
bin/kernel:     file format elf32-i386


Disassembly of section .text:

c0100000 <kern_entry>:
.text
.globl kern_entry
kern_entry:
    # reload temperate gdt (second time) to remap all physical memory
    # virtual_addr 0~4G=linear_addr&physical_addr -KERNBASE~4G-KERNBASE 
    lgdt REALLOC(__gdtdesc)
c0100000:	0f 01 15 18 40 13 00 	lgdtl  0x134018
    movl $KERNEL_DS, %eax
c0100007:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c010000c:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c010000e:	8e c0                	mov    %eax,%es
    movw %ax, %ss
c0100010:	8e d0                	mov    %eax,%ss

    ljmp $KERNEL_CS, $relocated
c0100012:	ea 19 00 10 c0 08 00 	ljmp   $0x8,$0xc0100019

c0100019 <relocated>:

relocated:

    # set ebp, esp
    movl $0x0, %ebp
c0100019:	bd 00 00 00 00       	mov    $0x0,%ebp
    # the kernel stack region is from bootstack -- bootstacktop,
    # the kernel stack size is KSTACKSIZE (8KB)defined in memlayout.h
    movl $bootstacktop, %esp
c010001e:	bc 00 40 13 c0       	mov    $0xc0134000,%esp
    # now kernel stack is ready , call the first C function
    call kern_init
c0100023:	e8 02 00 00 00       	call   c010002a <kern_init>

c0100028 <spin>:

# should never get here
spin:
    jmp spin
c0100028:	eb fe                	jmp    c0100028 <spin>

c010002a <kern_init>:
int kern_init(void) __attribute__((noreturn));

static void lab1_switch_test(void);

int
kern_init(void) {
c010002a:	55                   	push   %ebp
c010002b:	89 e5                	mov    %esp,%ebp
c010002d:	83 ec 28             	sub    $0x28,%esp
    extern char edata[], end[];
    memset(edata, 0, end - edata);
c0100030:	ba c4 86 1c c0       	mov    $0xc01c86c4,%edx
c0100035:	b8 f9 53 1c c0       	mov    $0xc01c53f9,%eax
c010003a:	29 c2                	sub    %eax,%edx
c010003c:	89 d0                	mov    %edx,%eax
c010003e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100042:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0100049:	00 
c010004a:	c7 04 24 f9 53 1c c0 	movl   $0xc01c53f9,(%esp)
c0100051:	e8 56 ea 00 00       	call   c010eaac <memset>

    cons_init();                // init the console
c0100056:	e8 08 2b 00 00       	call   c0102b63 <cons_init>

    const char *message = "(THU.CST) os is loading ...";
c010005b:	c7 45 f4 40 ec 10 c0 	movl   $0xc010ec40,-0xc(%ebp)
    cprintf("%s\n\n", message);
c0100062:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100065:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100069:	c7 04 24 5c ec 10 c0 	movl   $0xc010ec5c,(%esp)
c0100070:	e8 66 17 00 00       	call   c01017db <cprintf>

    print_kerninfo();
c0100075:	e8 8d 1d 00 00       	call   c0101e07 <print_kerninfo>

    grade_backtrace();
c010007a:	e8 a2 00 00 00       	call   c0100121 <grade_backtrace>

    pmm_init();                 // init physical memory management
c010007f:	e8 10 6b 00 00       	call   c0106b94 <pmm_init>

    pic_init();                 // init interrupt controller
c0100084:	e8 b8 34 00 00       	call   c0103541 <pic_init>
    idt_init();                 // init interrupt descriptor table
c0100089:	e8 30 36 00 00       	call   c01036be <idt_init>

    vmm_init();                 // init virtual memory management
c010008e:	e8 1f 9a 00 00       	call   c0109ab2 <vmm_init>
    sched_init();               // init scheduler
c0100093:	e8 52 d8 00 00       	call   c010d8ea <sched_init>
    proc_init();                // init process table
c0100098:	e8 42 d1 00 00       	call   c010d1df <proc_init>
    
    ide_init();                 // init ide devices
c010009d:	e8 f2 2b 00 00       	call   c0102c94 <ide_init>
    swap_init();                // init swap
c01000a2:	e8 a5 81 00 00       	call   c010824c <swap_init>

    clock_init();               // init clock interrupt
c01000a7:	e8 6d 22 00 00       	call   c0102319 <clock_init>
    intr_enable();              // enable irq interrupt
c01000ac:	e8 fe 33 00 00       	call   c01034af <intr_enable>

    //LAB1: CAHLLENGE 1 If you try to do it, uncomment lab1_switch_test()
    // user/kernel mode switch test
    //lab1_switch_test();
    
    cpu_idle();                 // run idle process
c01000b1:	e8 e8 d2 00 00       	call   c010d39e <cpu_idle>

c01000b6 <grade_backtrace2>:
}

void __attribute__((noinline))
grade_backtrace2(int arg0, int arg1, int arg2, int arg3) {
c01000b6:	55                   	push   %ebp
c01000b7:	89 e5                	mov    %esp,%ebp
c01000b9:	83 ec 18             	sub    $0x18,%esp
    mon_backtrace(0, NULL, NULL);
c01000bc:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01000c3:	00 
c01000c4:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01000cb:	00 
c01000cc:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c01000d3:	e8 73 21 00 00       	call   c010224b <mon_backtrace>
}
c01000d8:	c9                   	leave  
c01000d9:	c3                   	ret    

c01000da <grade_backtrace1>:

void __attribute__((noinline))
grade_backtrace1(int arg0, int arg1) {
c01000da:	55                   	push   %ebp
c01000db:	89 e5                	mov    %esp,%ebp
c01000dd:	53                   	push   %ebx
c01000de:	83 ec 14             	sub    $0x14,%esp
    grade_backtrace2(arg0, (int)&arg0, arg1, (int)&arg1);
c01000e1:	8d 5d 0c             	lea    0xc(%ebp),%ebx
c01000e4:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c01000e7:	8d 55 08             	lea    0x8(%ebp),%edx
c01000ea:	8b 45 08             	mov    0x8(%ebp),%eax
c01000ed:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c01000f1:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01000f5:	89 54 24 04          	mov    %edx,0x4(%esp)
c01000f9:	89 04 24             	mov    %eax,(%esp)
c01000fc:	e8 b5 ff ff ff       	call   c01000b6 <grade_backtrace2>
}
c0100101:	83 c4 14             	add    $0x14,%esp
c0100104:	5b                   	pop    %ebx
c0100105:	5d                   	pop    %ebp
c0100106:	c3                   	ret    

c0100107 <grade_backtrace0>:

void __attribute__((noinline))
grade_backtrace0(int arg0, int arg1, int arg2) {
c0100107:	55                   	push   %ebp
c0100108:	89 e5                	mov    %esp,%ebp
c010010a:	83 ec 18             	sub    $0x18,%esp
    grade_backtrace1(arg0, arg2);
c010010d:	8b 45 10             	mov    0x10(%ebp),%eax
c0100110:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100114:	8b 45 08             	mov    0x8(%ebp),%eax
c0100117:	89 04 24             	mov    %eax,(%esp)
c010011a:	e8 bb ff ff ff       	call   c01000da <grade_backtrace1>
}
c010011f:	c9                   	leave  
c0100120:	c3                   	ret    

c0100121 <grade_backtrace>:

void
grade_backtrace(void) {
c0100121:	55                   	push   %ebp
c0100122:	89 e5                	mov    %esp,%ebp
c0100124:	83 ec 18             	sub    $0x18,%esp
    grade_backtrace0(0, (int)kern_init, 0xffff0000);
c0100127:	b8 2a 00 10 c0       	mov    $0xc010002a,%eax
c010012c:	c7 44 24 08 00 00 ff 	movl   $0xffff0000,0x8(%esp)
c0100133:	ff 
c0100134:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100138:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010013f:	e8 c3 ff ff ff       	call   c0100107 <grade_backtrace0>
}
c0100144:	c9                   	leave  
c0100145:	c3                   	ret    

c0100146 <lab1_print_cur_status>:

static void
lab1_print_cur_status(void) {
c0100146:	55                   	push   %ebp
c0100147:	89 e5                	mov    %esp,%ebp
c0100149:	83 ec 28             	sub    $0x28,%esp
    static int round = 0;
    uint16_t reg1, reg2, reg3, reg4;
    asm volatile (
c010014c:	8c 4d f6             	mov    %cs,-0xa(%ebp)
c010014f:	8c 5d f4             	mov    %ds,-0xc(%ebp)
c0100152:	8c 45 f2             	mov    %es,-0xe(%ebp)
c0100155:	8c 55 f0             	mov    %ss,-0x10(%ebp)
            "mov %%cs, %0;"
            "mov %%ds, %1;"
            "mov %%es, %2;"
            "mov %%ss, %3;"
            : "=m"(reg1), "=m"(reg2), "=m"(reg3), "=m"(reg4));
    cprintf("%d: @ring %d\n", round, reg1 & 3);
c0100158:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010015c:	0f b7 c0             	movzwl %ax,%eax
c010015f:	83 e0 03             	and    $0x3,%eax
c0100162:	89 c2                	mov    %eax,%edx
c0100164:	a1 00 54 1c c0       	mov    0xc01c5400,%eax
c0100169:	89 54 24 08          	mov    %edx,0x8(%esp)
c010016d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100171:	c7 04 24 61 ec 10 c0 	movl   $0xc010ec61,(%esp)
c0100178:	e8 5e 16 00 00       	call   c01017db <cprintf>
    cprintf("%d:  cs = %x\n", round, reg1);
c010017d:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100181:	0f b7 d0             	movzwl %ax,%edx
c0100184:	a1 00 54 1c c0       	mov    0xc01c5400,%eax
c0100189:	89 54 24 08          	mov    %edx,0x8(%esp)
c010018d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100191:	c7 04 24 6f ec 10 c0 	movl   $0xc010ec6f,(%esp)
c0100198:	e8 3e 16 00 00       	call   c01017db <cprintf>
    cprintf("%d:  ds = %x\n", round, reg2);
c010019d:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c01001a1:	0f b7 d0             	movzwl %ax,%edx
c01001a4:	a1 00 54 1c c0       	mov    0xc01c5400,%eax
c01001a9:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001ad:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001b1:	c7 04 24 7d ec 10 c0 	movl   $0xc010ec7d,(%esp)
c01001b8:	e8 1e 16 00 00       	call   c01017db <cprintf>
    cprintf("%d:  es = %x\n", round, reg3);
c01001bd:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01001c1:	0f b7 d0             	movzwl %ax,%edx
c01001c4:	a1 00 54 1c c0       	mov    0xc01c5400,%eax
c01001c9:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001cd:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001d1:	c7 04 24 8b ec 10 c0 	movl   $0xc010ec8b,(%esp)
c01001d8:	e8 fe 15 00 00       	call   c01017db <cprintf>
    cprintf("%d:  ss = %x\n", round, reg4);
c01001dd:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c01001e1:	0f b7 d0             	movzwl %ax,%edx
c01001e4:	a1 00 54 1c c0       	mov    0xc01c5400,%eax
c01001e9:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001ed:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001f1:	c7 04 24 99 ec 10 c0 	movl   $0xc010ec99,(%esp)
c01001f8:	e8 de 15 00 00       	call   c01017db <cprintf>
    round ++;
c01001fd:	a1 00 54 1c c0       	mov    0xc01c5400,%eax
c0100202:	83 c0 01             	add    $0x1,%eax
c0100205:	a3 00 54 1c c0       	mov    %eax,0xc01c5400
}
c010020a:	c9                   	leave  
c010020b:	c3                   	ret    

c010020c <lab1_switch_to_user>:

static void
lab1_switch_to_user(void) {
c010020c:	55                   	push   %ebp
c010020d:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 : TODO
}
c010020f:	5d                   	pop    %ebp
c0100210:	c3                   	ret    

c0100211 <lab1_switch_to_kernel>:

static void
lab1_switch_to_kernel(void) {
c0100211:	55                   	push   %ebp
c0100212:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 :  TODO
}
c0100214:	5d                   	pop    %ebp
c0100215:	c3                   	ret    

c0100216 <lab1_switch_test>:

static void
lab1_switch_test(void) {
c0100216:	55                   	push   %ebp
c0100217:	89 e5                	mov    %esp,%ebp
c0100219:	83 ec 18             	sub    $0x18,%esp
    lab1_print_cur_status();
c010021c:	e8 25 ff ff ff       	call   c0100146 <lab1_print_cur_status>
    cprintf("+++ switch to  user  mode +++\n");
c0100221:	c7 04 24 a8 ec 10 c0 	movl   $0xc010eca8,(%esp)
c0100228:	e8 ae 15 00 00       	call   c01017db <cprintf>
    lab1_switch_to_user();
c010022d:	e8 da ff ff ff       	call   c010020c <lab1_switch_to_user>
    lab1_print_cur_status();
c0100232:	e8 0f ff ff ff       	call   c0100146 <lab1_print_cur_status>
    cprintf("+++ switch to kernel mode +++\n");
c0100237:	c7 04 24 c8 ec 10 c0 	movl   $0xc010ecc8,(%esp)
c010023e:	e8 98 15 00 00       	call   c01017db <cprintf>
    lab1_switch_to_kernel();
c0100243:	e8 c9 ff ff ff       	call   c0100211 <lab1_switch_to_kernel>
    lab1_print_cur_status();
c0100248:	e8 f9 fe ff ff       	call   c0100146 <lab1_print_cur_status>
}
c010024d:	c9                   	leave  
c010024e:	c3                   	ret    

c010024f <rb_node_create>:
#include <rb_tree.h>
#include <assert.h>

/* rb_node_create - create a new rb_node */
static inline rb_node *
rb_node_create(void) {
c010024f:	55                   	push   %ebp
c0100250:	89 e5                	mov    %esp,%ebp
c0100252:	83 ec 18             	sub    $0x18,%esp
    return kmalloc(sizeof(rb_node));
c0100255:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
c010025c:	e8 6b 5e 00 00       	call   c01060cc <kmalloc>
}
c0100261:	c9                   	leave  
c0100262:	c3                   	ret    

c0100263 <rb_tree_empty>:

/* rb_tree_empty - tests if tree is empty */
static inline bool
rb_tree_empty(rb_tree *tree) {
c0100263:	55                   	push   %ebp
c0100264:	89 e5                	mov    %esp,%ebp
c0100266:	83 ec 10             	sub    $0x10,%esp
    rb_node *nil = tree->nil, *root = tree->root;
c0100269:	8b 45 08             	mov    0x8(%ebp),%eax
c010026c:	8b 40 04             	mov    0x4(%eax),%eax
c010026f:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0100272:	8b 45 08             	mov    0x8(%ebp),%eax
c0100275:	8b 40 08             	mov    0x8(%eax),%eax
c0100278:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return root->left == nil;
c010027b:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010027e:	8b 40 08             	mov    0x8(%eax),%eax
c0100281:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100284:	0f 94 c0             	sete   %al
c0100287:	0f b6 c0             	movzbl %al,%eax
}
c010028a:	c9                   	leave  
c010028b:	c3                   	ret    

c010028c <rb_tree_create>:
 * Note that, root->left should always point to the node that is the root
 * of the tree. And nil points to a 'NULL' node which should always be
 * black and may have arbitrary children and parent node.
 * */
rb_tree *
rb_tree_create(int (*compare)(rb_node *node1, rb_node *node2)) {
c010028c:	55                   	push   %ebp
c010028d:	89 e5                	mov    %esp,%ebp
c010028f:	83 ec 28             	sub    $0x28,%esp
    assert(compare != NULL);
c0100292:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100296:	75 24                	jne    c01002bc <rb_tree_create+0x30>
c0100298:	c7 44 24 0c e8 ec 10 	movl   $0xc010ece8,0xc(%esp)
c010029f:	c0 
c01002a0:	c7 44 24 08 f8 ec 10 	movl   $0xc010ecf8,0x8(%esp)
c01002a7:	c0 
c01002a8:	c7 44 24 04 1f 00 00 	movl   $0x1f,0x4(%esp)
c01002af:	00 
c01002b0:	c7 04 24 0d ed 10 c0 	movl   $0xc010ed0d,(%esp)
c01002b7:	e8 a1 1f 00 00       	call   c010225d <__panic>

    rb_tree *tree;
    rb_node *nil, *root;

    if ((tree = kmalloc(sizeof(rb_tree))) == NULL) {
c01002bc:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c01002c3:	e8 04 5e 00 00       	call   c01060cc <kmalloc>
c01002c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01002cb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01002cf:	75 05                	jne    c01002d6 <rb_tree_create+0x4a>
        goto bad_tree;
c01002d1:	e9 ad 00 00 00       	jmp    c0100383 <rb_tree_create+0xf7>
    }

    tree->compare = compare;
c01002d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01002d9:	8b 55 08             	mov    0x8(%ebp),%edx
c01002dc:	89 10                	mov    %edx,(%eax)

    if ((nil = rb_node_create()) == NULL) {
c01002de:	e8 6c ff ff ff       	call   c010024f <rb_node_create>
c01002e3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01002e6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01002ea:	75 05                	jne    c01002f1 <rb_tree_create+0x65>
        goto bad_node_cleanup_tree;
c01002ec:	e9 87 00 00 00       	jmp    c0100378 <rb_tree_create+0xec>
    }

    nil->parent = nil->left = nil->right = nil;
c01002f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002f4:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01002f7:	89 50 0c             	mov    %edx,0xc(%eax)
c01002fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002fd:	8b 50 0c             	mov    0xc(%eax),%edx
c0100300:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100303:	89 50 08             	mov    %edx,0x8(%eax)
c0100306:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100309:	8b 50 08             	mov    0x8(%eax),%edx
c010030c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010030f:	89 50 04             	mov    %edx,0x4(%eax)
    nil->red = 0;
c0100312:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100315:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    tree->nil = nil;
c010031b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010031e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100321:	89 50 04             	mov    %edx,0x4(%eax)

    if ((root = rb_node_create()) == NULL) {
c0100324:	e8 26 ff ff ff       	call   c010024f <rb_node_create>
c0100329:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010032c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0100330:	75 0e                	jne    c0100340 <rb_tree_create+0xb4>
        goto bad_node_cleanup_nil;
c0100332:	90                   	nop
    root->red = 0;
    tree->root = root;
    return tree;

bad_node_cleanup_nil:
    kfree(nil);
c0100333:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100336:	89 04 24             	mov    %eax,(%esp)
c0100339:	e8 a9 5d 00 00       	call   c01060e7 <kfree>
c010033e:	eb 38                	jmp    c0100378 <rb_tree_create+0xec>

    if ((root = rb_node_create()) == NULL) {
        goto bad_node_cleanup_nil;
    }

    root->parent = root->left = root->right = nil;
c0100340:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100343:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100346:	89 50 0c             	mov    %edx,0xc(%eax)
c0100349:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010034c:	8b 50 0c             	mov    0xc(%eax),%edx
c010034f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100352:	89 50 08             	mov    %edx,0x8(%eax)
c0100355:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100358:	8b 50 08             	mov    0x8(%eax),%edx
c010035b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010035e:	89 50 04             	mov    %edx,0x4(%eax)
    root->red = 0;
c0100361:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100364:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    tree->root = root;
c010036a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010036d:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0100370:	89 50 08             	mov    %edx,0x8(%eax)
    return tree;
c0100373:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100376:	eb 10                	jmp    c0100388 <rb_tree_create+0xfc>

bad_node_cleanup_nil:
    kfree(nil);
bad_node_cleanup_tree:
    kfree(tree);
c0100378:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010037b:	89 04 24             	mov    %eax,(%esp)
c010037e:	e8 64 5d 00 00       	call   c01060e7 <kfree>
bad_tree:
    return NULL;
c0100383:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100388:	c9                   	leave  
c0100389:	c3                   	ret    

c010038a <rb_left_rotate>:
    y->_left = x;                                               \
    x->parent = y;                                              \
    assert(!(nil->red));                                        \
}

FUNC_ROTATE(rb_left_rotate, left, right);
c010038a:	55                   	push   %ebp
c010038b:	89 e5                	mov    %esp,%ebp
c010038d:	83 ec 28             	sub    $0x28,%esp
c0100390:	8b 45 08             	mov    0x8(%ebp),%eax
c0100393:	8b 40 04             	mov    0x4(%eax),%eax
c0100396:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100399:	8b 45 0c             	mov    0xc(%ebp),%eax
c010039c:	8b 40 0c             	mov    0xc(%eax),%eax
c010039f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01003a2:	8b 45 08             	mov    0x8(%ebp),%eax
c01003a5:	8b 40 08             	mov    0x8(%eax),%eax
c01003a8:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01003ab:	74 10                	je     c01003bd <rb_left_rotate+0x33>
c01003ad:	8b 45 0c             	mov    0xc(%ebp),%eax
c01003b0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01003b3:	74 08                	je     c01003bd <rb_left_rotate+0x33>
c01003b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01003b8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01003bb:	75 24                	jne    c01003e1 <rb_left_rotate+0x57>
c01003bd:	c7 44 24 0c 24 ed 10 	movl   $0xc010ed24,0xc(%esp)
c01003c4:	c0 
c01003c5:	c7 44 24 08 f8 ec 10 	movl   $0xc010ecf8,0x8(%esp)
c01003cc:	c0 
c01003cd:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c01003d4:	00 
c01003d5:	c7 04 24 0d ed 10 c0 	movl   $0xc010ed0d,(%esp)
c01003dc:	e8 7c 1e 00 00       	call   c010225d <__panic>
c01003e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01003e4:	8b 50 08             	mov    0x8(%eax),%edx
c01003e7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01003ea:	89 50 0c             	mov    %edx,0xc(%eax)
c01003ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01003f0:	8b 40 08             	mov    0x8(%eax),%eax
c01003f3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01003f6:	74 0c                	je     c0100404 <rb_left_rotate+0x7a>
c01003f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01003fb:	8b 40 08             	mov    0x8(%eax),%eax
c01003fe:	8b 55 0c             	mov    0xc(%ebp),%edx
c0100401:	89 50 04             	mov    %edx,0x4(%eax)
c0100404:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100407:	8b 50 04             	mov    0x4(%eax),%edx
c010040a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010040d:	89 50 04             	mov    %edx,0x4(%eax)
c0100410:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100413:	8b 40 04             	mov    0x4(%eax),%eax
c0100416:	8b 40 08             	mov    0x8(%eax),%eax
c0100419:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010041c:	75 0e                	jne    c010042c <rb_left_rotate+0xa2>
c010041e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100421:	8b 40 04             	mov    0x4(%eax),%eax
c0100424:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100427:	89 50 08             	mov    %edx,0x8(%eax)
c010042a:	eb 0c                	jmp    c0100438 <rb_left_rotate+0xae>
c010042c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010042f:	8b 40 04             	mov    0x4(%eax),%eax
c0100432:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100435:	89 50 0c             	mov    %edx,0xc(%eax)
c0100438:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010043b:	8b 55 0c             	mov    0xc(%ebp),%edx
c010043e:	89 50 08             	mov    %edx,0x8(%eax)
c0100441:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100444:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100447:	89 50 04             	mov    %edx,0x4(%eax)
c010044a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010044d:	8b 00                	mov    (%eax),%eax
c010044f:	85 c0                	test   %eax,%eax
c0100451:	74 24                	je     c0100477 <rb_left_rotate+0xed>
c0100453:	c7 44 24 0c 4c ed 10 	movl   $0xc010ed4c,0xc(%esp)
c010045a:	c0 
c010045b:	c7 44 24 08 f8 ec 10 	movl   $0xc010ecf8,0x8(%esp)
c0100462:	c0 
c0100463:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c010046a:	00 
c010046b:	c7 04 24 0d ed 10 c0 	movl   $0xc010ed0d,(%esp)
c0100472:	e8 e6 1d 00 00       	call   c010225d <__panic>
c0100477:	c9                   	leave  
c0100478:	c3                   	ret    

c0100479 <rb_right_rotate>:
FUNC_ROTATE(rb_right_rotate, right, left);
c0100479:	55                   	push   %ebp
c010047a:	89 e5                	mov    %esp,%ebp
c010047c:	83 ec 28             	sub    $0x28,%esp
c010047f:	8b 45 08             	mov    0x8(%ebp),%eax
c0100482:	8b 40 04             	mov    0x4(%eax),%eax
c0100485:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100488:	8b 45 0c             	mov    0xc(%ebp),%eax
c010048b:	8b 40 08             	mov    0x8(%eax),%eax
c010048e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0100491:	8b 45 08             	mov    0x8(%ebp),%eax
c0100494:	8b 40 08             	mov    0x8(%eax),%eax
c0100497:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010049a:	74 10                	je     c01004ac <rb_right_rotate+0x33>
c010049c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010049f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01004a2:	74 08                	je     c01004ac <rb_right_rotate+0x33>
c01004a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004a7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01004aa:	75 24                	jne    c01004d0 <rb_right_rotate+0x57>
c01004ac:	c7 44 24 0c 24 ed 10 	movl   $0xc010ed24,0xc(%esp)
c01004b3:	c0 
c01004b4:	c7 44 24 08 f8 ec 10 	movl   $0xc010ecf8,0x8(%esp)
c01004bb:	c0 
c01004bc:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c01004c3:	00 
c01004c4:	c7 04 24 0d ed 10 c0 	movl   $0xc010ed0d,(%esp)
c01004cb:	e8 8d 1d 00 00       	call   c010225d <__panic>
c01004d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004d3:	8b 50 0c             	mov    0xc(%eax),%edx
c01004d6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004d9:	89 50 08             	mov    %edx,0x8(%eax)
c01004dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004df:	8b 40 0c             	mov    0xc(%eax),%eax
c01004e2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01004e5:	74 0c                	je     c01004f3 <rb_right_rotate+0x7a>
c01004e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004ea:	8b 40 0c             	mov    0xc(%eax),%eax
c01004ed:	8b 55 0c             	mov    0xc(%ebp),%edx
c01004f0:	89 50 04             	mov    %edx,0x4(%eax)
c01004f3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004f6:	8b 50 04             	mov    0x4(%eax),%edx
c01004f9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004fc:	89 50 04             	mov    %edx,0x4(%eax)
c01004ff:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100502:	8b 40 04             	mov    0x4(%eax),%eax
c0100505:	8b 40 0c             	mov    0xc(%eax),%eax
c0100508:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010050b:	75 0e                	jne    c010051b <rb_right_rotate+0xa2>
c010050d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100510:	8b 40 04             	mov    0x4(%eax),%eax
c0100513:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100516:	89 50 0c             	mov    %edx,0xc(%eax)
c0100519:	eb 0c                	jmp    c0100527 <rb_right_rotate+0xae>
c010051b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010051e:	8b 40 04             	mov    0x4(%eax),%eax
c0100521:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100524:	89 50 08             	mov    %edx,0x8(%eax)
c0100527:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010052a:	8b 55 0c             	mov    0xc(%ebp),%edx
c010052d:	89 50 0c             	mov    %edx,0xc(%eax)
c0100530:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100533:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100536:	89 50 04             	mov    %edx,0x4(%eax)
c0100539:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010053c:	8b 00                	mov    (%eax),%eax
c010053e:	85 c0                	test   %eax,%eax
c0100540:	74 24                	je     c0100566 <rb_right_rotate+0xed>
c0100542:	c7 44 24 0c 4c ed 10 	movl   $0xc010ed4c,0xc(%esp)
c0100549:	c0 
c010054a:	c7 44 24 08 f8 ec 10 	movl   $0xc010ecf8,0x8(%esp)
c0100551:	c0 
c0100552:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c0100559:	00 
c010055a:	c7 04 24 0d ed 10 c0 	movl   $0xc010ed0d,(%esp)
c0100561:	e8 f7 1c 00 00       	call   c010225d <__panic>
c0100566:	c9                   	leave  
c0100567:	c3                   	ret    

c0100568 <rb_insert_binary>:
 * rb_insert_binary - insert @node to red-black @tree as if it were
 * a regular binary tree. This function is only intended to be called
 * by function rb_insert.
 * */
static inline void
rb_insert_binary(rb_tree *tree, rb_node *node) {
c0100568:	55                   	push   %ebp
c0100569:	89 e5                	mov    %esp,%ebp
c010056b:	83 ec 38             	sub    $0x38,%esp
    rb_node *x, *y, *z = node, *nil = tree->nil, *root = tree->root;
c010056e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100571:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0100574:	8b 45 08             	mov    0x8(%ebp),%eax
c0100577:	8b 40 04             	mov    0x4(%eax),%eax
c010057a:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010057d:	8b 45 08             	mov    0x8(%ebp),%eax
c0100580:	8b 40 08             	mov    0x8(%eax),%eax
c0100583:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    z->left = z->right = nil;
c0100586:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100589:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010058c:	89 50 0c             	mov    %edx,0xc(%eax)
c010058f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100592:	8b 50 0c             	mov    0xc(%eax),%edx
c0100595:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100598:	89 50 08             	mov    %edx,0x8(%eax)
    y = root, x = y->left;
c010059b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010059e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01005a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005a4:	8b 40 08             	mov    0x8(%eax),%eax
c01005a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (x != nil) {
c01005aa:	eb 2f                	jmp    c01005db <rb_insert_binary+0x73>
        y = x;
c01005ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01005af:	89 45 f0             	mov    %eax,-0x10(%ebp)
        x = (COMPARE(tree, x, node) > 0) ? x->left : x->right;
c01005b2:	8b 45 08             	mov    0x8(%ebp),%eax
c01005b5:	8b 00                	mov    (%eax),%eax
c01005b7:	8b 55 0c             	mov    0xc(%ebp),%edx
c01005ba:	89 54 24 04          	mov    %edx,0x4(%esp)
c01005be:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01005c1:	89 14 24             	mov    %edx,(%esp)
c01005c4:	ff d0                	call   *%eax
c01005c6:	85 c0                	test   %eax,%eax
c01005c8:	7e 08                	jle    c01005d2 <rb_insert_binary+0x6a>
c01005ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01005cd:	8b 40 08             	mov    0x8(%eax),%eax
c01005d0:	eb 06                	jmp    c01005d8 <rb_insert_binary+0x70>
c01005d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01005d5:	8b 40 0c             	mov    0xc(%eax),%eax
c01005d8:	89 45 f4             	mov    %eax,-0xc(%ebp)
rb_insert_binary(rb_tree *tree, rb_node *node) {
    rb_node *x, *y, *z = node, *nil = tree->nil, *root = tree->root;

    z->left = z->right = nil;
    y = root, x = y->left;
    while (x != nil) {
c01005db:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01005de:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c01005e1:	75 c9                	jne    c01005ac <rb_insert_binary+0x44>
        y = x;
        x = (COMPARE(tree, x, node) > 0) ? x->left : x->right;
    }
    z->parent = y;
c01005e3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01005e6:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01005e9:	89 50 04             	mov    %edx,0x4(%eax)
    if (y == root || COMPARE(tree, y, z) > 0) {
c01005ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005ef:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c01005f2:	74 18                	je     c010060c <rb_insert_binary+0xa4>
c01005f4:	8b 45 08             	mov    0x8(%ebp),%eax
c01005f7:	8b 00                	mov    (%eax),%eax
c01005f9:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01005fc:	89 54 24 04          	mov    %edx,0x4(%esp)
c0100600:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100603:	89 14 24             	mov    %edx,(%esp)
c0100606:	ff d0                	call   *%eax
c0100608:	85 c0                	test   %eax,%eax
c010060a:	7e 0b                	jle    c0100617 <rb_insert_binary+0xaf>
        y->left = z;
c010060c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010060f:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0100612:	89 50 08             	mov    %edx,0x8(%eax)
c0100615:	eb 09                	jmp    c0100620 <rb_insert_binary+0xb8>
    }
    else {
        y->right = z;
c0100617:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010061a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010061d:	89 50 0c             	mov    %edx,0xc(%eax)
    }
}
c0100620:	c9                   	leave  
c0100621:	c3                   	ret    

c0100622 <rb_insert>:

/* rb_insert - insert a node to red-black tree */
void
rb_insert(rb_tree *tree, rb_node *node) {
c0100622:	55                   	push   %ebp
c0100623:	89 e5                	mov    %esp,%ebp
c0100625:	83 ec 28             	sub    $0x28,%esp
    rb_insert_binary(tree, node);
c0100628:	8b 45 0c             	mov    0xc(%ebp),%eax
c010062b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010062f:	8b 45 08             	mov    0x8(%ebp),%eax
c0100632:	89 04 24             	mov    %eax,(%esp)
c0100635:	e8 2e ff ff ff       	call   c0100568 <rb_insert_binary>
    node->red = 1;
c010063a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010063d:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

    rb_node *x = node, *y;
c0100643:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100646:	89 45 f4             	mov    %eax,-0xc(%ebp)
            x->parent->parent->red = 1;                         \
            rb_##_right##_rotate(tree, x->parent->parent);      \
        }                                                       \
    } while (0)

    while (x->parent->red) {
c0100649:	e9 6e 01 00 00       	jmp    c01007bc <rb_insert+0x19a>
        if (x->parent == x->parent->parent->left) {
c010064e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100651:	8b 50 04             	mov    0x4(%eax),%edx
c0100654:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100657:	8b 40 04             	mov    0x4(%eax),%eax
c010065a:	8b 40 04             	mov    0x4(%eax),%eax
c010065d:	8b 40 08             	mov    0x8(%eax),%eax
c0100660:	39 c2                	cmp    %eax,%edx
c0100662:	0f 85 ae 00 00 00    	jne    c0100716 <rb_insert+0xf4>
            RB_INSERT_SUB(left, right);
c0100668:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010066b:	8b 40 04             	mov    0x4(%eax),%eax
c010066e:	8b 40 04             	mov    0x4(%eax),%eax
c0100671:	8b 40 0c             	mov    0xc(%eax),%eax
c0100674:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0100677:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010067a:	8b 00                	mov    (%eax),%eax
c010067c:	85 c0                	test   %eax,%eax
c010067e:	74 35                	je     c01006b5 <rb_insert+0x93>
c0100680:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100683:	8b 40 04             	mov    0x4(%eax),%eax
c0100686:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c010068c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010068f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0100695:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100698:	8b 40 04             	mov    0x4(%eax),%eax
c010069b:	8b 40 04             	mov    0x4(%eax),%eax
c010069e:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c01006a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01006a7:	8b 40 04             	mov    0x4(%eax),%eax
c01006aa:	8b 40 04             	mov    0x4(%eax),%eax
c01006ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01006b0:	e9 07 01 00 00       	jmp    c01007bc <rb_insert+0x19a>
c01006b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01006b8:	8b 40 04             	mov    0x4(%eax),%eax
c01006bb:	8b 40 0c             	mov    0xc(%eax),%eax
c01006be:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01006c1:	75 1b                	jne    c01006de <rb_insert+0xbc>
c01006c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01006c6:	8b 40 04             	mov    0x4(%eax),%eax
c01006c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01006cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01006cf:	89 44 24 04          	mov    %eax,0x4(%esp)
c01006d3:	8b 45 08             	mov    0x8(%ebp),%eax
c01006d6:	89 04 24             	mov    %eax,(%esp)
c01006d9:	e8 ac fc ff ff       	call   c010038a <rb_left_rotate>
c01006de:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01006e1:	8b 40 04             	mov    0x4(%eax),%eax
c01006e4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c01006ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01006ed:	8b 40 04             	mov    0x4(%eax),%eax
c01006f0:	8b 40 04             	mov    0x4(%eax),%eax
c01006f3:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c01006f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01006fc:	8b 40 04             	mov    0x4(%eax),%eax
c01006ff:	8b 40 04             	mov    0x4(%eax),%eax
c0100702:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100706:	8b 45 08             	mov    0x8(%ebp),%eax
c0100709:	89 04 24             	mov    %eax,(%esp)
c010070c:	e8 68 fd ff ff       	call   c0100479 <rb_right_rotate>
c0100711:	e9 a6 00 00 00       	jmp    c01007bc <rb_insert+0x19a>
        }
        else {
            RB_INSERT_SUB(right, left);
c0100716:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100719:	8b 40 04             	mov    0x4(%eax),%eax
c010071c:	8b 40 04             	mov    0x4(%eax),%eax
c010071f:	8b 40 08             	mov    0x8(%eax),%eax
c0100722:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0100725:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100728:	8b 00                	mov    (%eax),%eax
c010072a:	85 c0                	test   %eax,%eax
c010072c:	74 32                	je     c0100760 <rb_insert+0x13e>
c010072e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100731:	8b 40 04             	mov    0x4(%eax),%eax
c0100734:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c010073a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010073d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0100743:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100746:	8b 40 04             	mov    0x4(%eax),%eax
c0100749:	8b 40 04             	mov    0x4(%eax),%eax
c010074c:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c0100752:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100755:	8b 40 04             	mov    0x4(%eax),%eax
c0100758:	8b 40 04             	mov    0x4(%eax),%eax
c010075b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010075e:	eb 5c                	jmp    c01007bc <rb_insert+0x19a>
c0100760:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100763:	8b 40 04             	mov    0x4(%eax),%eax
c0100766:	8b 40 08             	mov    0x8(%eax),%eax
c0100769:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010076c:	75 1b                	jne    c0100789 <rb_insert+0x167>
c010076e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100771:	8b 40 04             	mov    0x4(%eax),%eax
c0100774:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100777:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010077a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010077e:	8b 45 08             	mov    0x8(%ebp),%eax
c0100781:	89 04 24             	mov    %eax,(%esp)
c0100784:	e8 f0 fc ff ff       	call   c0100479 <rb_right_rotate>
c0100789:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010078c:	8b 40 04             	mov    0x4(%eax),%eax
c010078f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0100795:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100798:	8b 40 04             	mov    0x4(%eax),%eax
c010079b:	8b 40 04             	mov    0x4(%eax),%eax
c010079e:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c01007a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007a7:	8b 40 04             	mov    0x4(%eax),%eax
c01007aa:	8b 40 04             	mov    0x4(%eax),%eax
c01007ad:	89 44 24 04          	mov    %eax,0x4(%esp)
c01007b1:	8b 45 08             	mov    0x8(%ebp),%eax
c01007b4:	89 04 24             	mov    %eax,(%esp)
c01007b7:	e8 ce fb ff ff       	call   c010038a <rb_left_rotate>
            x->parent->parent->red = 1;                         \
            rb_##_right##_rotate(tree, x->parent->parent);      \
        }                                                       \
    } while (0)

    while (x->parent->red) {
c01007bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007bf:	8b 40 04             	mov    0x4(%eax),%eax
c01007c2:	8b 00                	mov    (%eax),%eax
c01007c4:	85 c0                	test   %eax,%eax
c01007c6:	0f 85 82 fe ff ff    	jne    c010064e <rb_insert+0x2c>
        }
        else {
            RB_INSERT_SUB(right, left);
        }
    }
    tree->root->left->red = 0;
c01007cc:	8b 45 08             	mov    0x8(%ebp),%eax
c01007cf:	8b 40 08             	mov    0x8(%eax),%eax
c01007d2:	8b 40 08             	mov    0x8(%eax),%eax
c01007d5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    assert(!(tree->nil->red) && !(tree->root->red));
c01007db:	8b 45 08             	mov    0x8(%ebp),%eax
c01007de:	8b 40 04             	mov    0x4(%eax),%eax
c01007e1:	8b 00                	mov    (%eax),%eax
c01007e3:	85 c0                	test   %eax,%eax
c01007e5:	75 0c                	jne    c01007f3 <rb_insert+0x1d1>
c01007e7:	8b 45 08             	mov    0x8(%ebp),%eax
c01007ea:	8b 40 08             	mov    0x8(%eax),%eax
c01007ed:	8b 00                	mov    (%eax),%eax
c01007ef:	85 c0                	test   %eax,%eax
c01007f1:	74 24                	je     c0100817 <rb_insert+0x1f5>
c01007f3:	c7 44 24 0c 58 ed 10 	movl   $0xc010ed58,0xc(%esp)
c01007fa:	c0 
c01007fb:	c7 44 24 08 f8 ec 10 	movl   $0xc010ecf8,0x8(%esp)
c0100802:	c0 
c0100803:	c7 44 24 04 a9 00 00 	movl   $0xa9,0x4(%esp)
c010080a:	00 
c010080b:	c7 04 24 0d ed 10 c0 	movl   $0xc010ed0d,(%esp)
c0100812:	e8 46 1a 00 00       	call   c010225d <__panic>

#undef RB_INSERT_SUB
}
c0100817:	c9                   	leave  
c0100818:	c3                   	ret    

c0100819 <rb_tree_successor>:
 * rb_tree_successor - returns the successor of @node, or nil
 * if no successor exists. Make sure that @node must belong to @tree,
 * and this function should only be called by rb_node_prev.
 * */
static inline rb_node *
rb_tree_successor(rb_tree *tree, rb_node *node) {
c0100819:	55                   	push   %ebp
c010081a:	89 e5                	mov    %esp,%ebp
c010081c:	83 ec 10             	sub    $0x10,%esp
    rb_node *x = node, *y, *nil = tree->nil;
c010081f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100822:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0100825:	8b 45 08             	mov    0x8(%ebp),%eax
c0100828:	8b 40 04             	mov    0x4(%eax),%eax
c010082b:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if ((y = x->right) != nil) {
c010082e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100831:	8b 40 0c             	mov    0xc(%eax),%eax
c0100834:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0100837:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010083a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010083d:	74 1b                	je     c010085a <rb_tree_successor+0x41>
        while (y->left != nil) {
c010083f:	eb 09                	jmp    c010084a <rb_tree_successor+0x31>
            y = y->left;
c0100841:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0100844:	8b 40 08             	mov    0x8(%eax),%eax
c0100847:	89 45 f8             	mov    %eax,-0x8(%ebp)
static inline rb_node *
rb_tree_successor(rb_tree *tree, rb_node *node) {
    rb_node *x = node, *y, *nil = tree->nil;

    if ((y = x->right) != nil) {
        while (y->left != nil) {
c010084a:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010084d:	8b 40 08             	mov    0x8(%eax),%eax
c0100850:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0100853:	75 ec                	jne    c0100841 <rb_tree_successor+0x28>
            y = y->left;
        }
        return y;
c0100855:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0100858:	eb 38                	jmp    c0100892 <rb_tree_successor+0x79>
    }
    else {
        y = x->parent;
c010085a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010085d:	8b 40 04             	mov    0x4(%eax),%eax
c0100860:	89 45 f8             	mov    %eax,-0x8(%ebp)
        while (x == y->right) {
c0100863:	eb 0f                	jmp    c0100874 <rb_tree_successor+0x5b>
            x = y, y = y->parent;
c0100865:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0100868:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010086b:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010086e:	8b 40 04             	mov    0x4(%eax),%eax
c0100871:	89 45 f8             	mov    %eax,-0x8(%ebp)
        }
        return y;
    }
    else {
        y = x->parent;
        while (x == y->right) {
c0100874:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0100877:	8b 40 0c             	mov    0xc(%eax),%eax
c010087a:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010087d:	74 e6                	je     c0100865 <rb_tree_successor+0x4c>
            x = y, y = y->parent;
        }
        if (y == tree->root) {
c010087f:	8b 45 08             	mov    0x8(%ebp),%eax
c0100882:	8b 40 08             	mov    0x8(%eax),%eax
c0100885:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c0100888:	75 05                	jne    c010088f <rb_tree_successor+0x76>
            return nil;
c010088a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010088d:	eb 03                	jmp    c0100892 <rb_tree_successor+0x79>
        }
        return y;
c010088f:	8b 45 f8             	mov    -0x8(%ebp),%eax
    }
}
c0100892:	c9                   	leave  
c0100893:	c3                   	ret    

c0100894 <rb_tree_predecessor>:
/* *
 * rb_tree_predecessor - returns the predecessor of @node, or nil
 * if no predecessor exists, likes rb_tree_successor.
 * */
static inline rb_node *
rb_tree_predecessor(rb_tree *tree, rb_node *node) {
c0100894:	55                   	push   %ebp
c0100895:	89 e5                	mov    %esp,%ebp
c0100897:	83 ec 10             	sub    $0x10,%esp
    rb_node *x = node, *y, *nil = tree->nil;
c010089a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010089d:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01008a0:	8b 45 08             	mov    0x8(%ebp),%eax
c01008a3:	8b 40 04             	mov    0x4(%eax),%eax
c01008a6:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if ((y = x->left) != nil) {
c01008a9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01008ac:	8b 40 08             	mov    0x8(%eax),%eax
c01008af:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01008b2:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01008b5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01008b8:	74 1b                	je     c01008d5 <rb_tree_predecessor+0x41>
        while (y->right != nil) {
c01008ba:	eb 09                	jmp    c01008c5 <rb_tree_predecessor+0x31>
            y = y->right;
c01008bc:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01008bf:	8b 40 0c             	mov    0xc(%eax),%eax
c01008c2:	89 45 f8             	mov    %eax,-0x8(%ebp)
static inline rb_node *
rb_tree_predecessor(rb_tree *tree, rb_node *node) {
    rb_node *x = node, *y, *nil = tree->nil;

    if ((y = x->left) != nil) {
        while (y->right != nil) {
c01008c5:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01008c8:	8b 40 0c             	mov    0xc(%eax),%eax
c01008cb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01008ce:	75 ec                	jne    c01008bc <rb_tree_predecessor+0x28>
            y = y->right;
        }
        return y;
c01008d0:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01008d3:	eb 38                	jmp    c010090d <rb_tree_predecessor+0x79>
    }
    else {
        y = x->parent;
c01008d5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01008d8:	8b 40 04             	mov    0x4(%eax),%eax
c01008db:	89 45 f8             	mov    %eax,-0x8(%ebp)
        while (x == y->left) {
c01008de:	eb 1f                	jmp    c01008ff <rb_tree_predecessor+0x6b>
            if (y == tree->root) {
c01008e0:	8b 45 08             	mov    0x8(%ebp),%eax
c01008e3:	8b 40 08             	mov    0x8(%eax),%eax
c01008e6:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c01008e9:	75 05                	jne    c01008f0 <rb_tree_predecessor+0x5c>
                return nil;
c01008eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01008ee:	eb 1d                	jmp    c010090d <rb_tree_predecessor+0x79>
            }
            x = y, y = y->parent;
c01008f0:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01008f3:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01008f6:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01008f9:	8b 40 04             	mov    0x4(%eax),%eax
c01008fc:	89 45 f8             	mov    %eax,-0x8(%ebp)
        }
        return y;
    }
    else {
        y = x->parent;
        while (x == y->left) {
c01008ff:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0100902:	8b 40 08             	mov    0x8(%eax),%eax
c0100905:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100908:	74 d6                	je     c01008e0 <rb_tree_predecessor+0x4c>
            if (y == tree->root) {
                return nil;
            }
            x = y, y = y->parent;
        }
        return y;
c010090a:	8b 45 f8             	mov    -0x8(%ebp),%eax
    }
}
c010090d:	c9                   	leave  
c010090e:	c3                   	ret    

c010090f <rb_search>:
 * rb_search - returns a node with value 'equal' to @key (according to
 * function @compare). If there're multiple nodes with value 'equal' to @key,
 * the functions returns the one highest in the tree.
 * */
rb_node *
rb_search(rb_tree *tree, int (*compare)(rb_node *node, void *key), void *key) {
c010090f:	55                   	push   %ebp
c0100910:	89 e5                	mov    %esp,%ebp
c0100912:	83 ec 28             	sub    $0x28,%esp
    rb_node *nil = tree->nil, *node = tree->root->left;
c0100915:	8b 45 08             	mov    0x8(%ebp),%eax
c0100918:	8b 40 04             	mov    0x4(%eax),%eax
c010091b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010091e:	8b 45 08             	mov    0x8(%ebp),%eax
c0100921:	8b 40 08             	mov    0x8(%eax),%eax
c0100924:	8b 40 08             	mov    0x8(%eax),%eax
c0100927:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int r;
    while (node != nil && (r = compare(node, key)) != 0) {
c010092a:	eb 17                	jmp    c0100943 <rb_search+0x34>
        node = (r > 0) ? node->left : node->right;
c010092c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0100930:	7e 08                	jle    c010093a <rb_search+0x2b>
c0100932:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100935:	8b 40 08             	mov    0x8(%eax),%eax
c0100938:	eb 06                	jmp    c0100940 <rb_search+0x31>
c010093a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010093d:	8b 40 0c             	mov    0xc(%eax),%eax
c0100940:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * */
rb_node *
rb_search(rb_tree *tree, int (*compare)(rb_node *node, void *key), void *key) {
    rb_node *nil = tree->nil, *node = tree->root->left;
    int r;
    while (node != nil && (r = compare(node, key)) != 0) {
c0100943:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100946:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0100949:	74 1b                	je     c0100966 <rb_search+0x57>
c010094b:	8b 45 10             	mov    0x10(%ebp),%eax
c010094e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100952:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100955:	89 04 24             	mov    %eax,(%esp)
c0100958:	8b 45 0c             	mov    0xc(%ebp),%eax
c010095b:	ff d0                	call   *%eax
c010095d:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0100960:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0100964:	75 c6                	jne    c010092c <rb_search+0x1d>
        node = (r > 0) ? node->left : node->right;
    }
    return (node != nil) ? node : NULL;
c0100966:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100969:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010096c:	74 05                	je     c0100973 <rb_search+0x64>
c010096e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100971:	eb 05                	jmp    c0100978 <rb_search+0x69>
c0100973:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100978:	c9                   	leave  
c0100979:	c3                   	ret    

c010097a <rb_delete_fixup>:
/* *
 * rb_delete_fixup - performs rotations and changes colors to restore
 * red-black properties after a node is deleted.
 * */
static void
rb_delete_fixup(rb_tree *tree, rb_node *node) {
c010097a:	55                   	push   %ebp
c010097b:	89 e5                	mov    %esp,%ebp
c010097d:	83 ec 28             	sub    $0x28,%esp
    rb_node *x = node, *w, *root = tree->root->left;
c0100980:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100983:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100986:	8b 45 08             	mov    0x8(%ebp),%eax
c0100989:	8b 40 08             	mov    0x8(%eax),%eax
c010098c:	8b 40 08             	mov    0x8(%eax),%eax
c010098f:	89 45 ec             	mov    %eax,-0x14(%ebp)
            rb_##_left##_rotate(tree, x->parent);               \
            x = root;                                           \
        }                                                       \
    } while (0)

    while (x != root && !x->red) {
c0100992:	e9 06 02 00 00       	jmp    c0100b9d <rb_delete_fixup+0x223>
        if (x == x->parent->left) {
c0100997:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010099a:	8b 40 04             	mov    0x4(%eax),%eax
c010099d:	8b 40 08             	mov    0x8(%eax),%eax
c01009a0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01009a3:	0f 85 fe 00 00 00    	jne    c0100aa7 <rb_delete_fixup+0x12d>
            RB_DELETE_FIXUP_SUB(left, right);
c01009a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009ac:	8b 40 04             	mov    0x4(%eax),%eax
c01009af:	8b 40 0c             	mov    0xc(%eax),%eax
c01009b2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01009b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01009b8:	8b 00                	mov    (%eax),%eax
c01009ba:	85 c0                	test   %eax,%eax
c01009bc:	74 36                	je     c01009f4 <rb_delete_fixup+0x7a>
c01009be:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01009c1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c01009c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009ca:	8b 40 04             	mov    0x4(%eax),%eax
c01009cd:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c01009d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009d6:	8b 40 04             	mov    0x4(%eax),%eax
c01009d9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01009dd:	8b 45 08             	mov    0x8(%ebp),%eax
c01009e0:	89 04 24             	mov    %eax,(%esp)
c01009e3:	e8 a2 f9 ff ff       	call   c010038a <rb_left_rotate>
c01009e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009eb:	8b 40 04             	mov    0x4(%eax),%eax
c01009ee:	8b 40 0c             	mov    0xc(%eax),%eax
c01009f1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01009f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01009f7:	8b 40 08             	mov    0x8(%eax),%eax
c01009fa:	8b 00                	mov    (%eax),%eax
c01009fc:	85 c0                	test   %eax,%eax
c01009fe:	75 23                	jne    c0100a23 <rb_delete_fixup+0xa9>
c0100a00:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100a03:	8b 40 0c             	mov    0xc(%eax),%eax
c0100a06:	8b 00                	mov    (%eax),%eax
c0100a08:	85 c0                	test   %eax,%eax
c0100a0a:	75 17                	jne    c0100a23 <rb_delete_fixup+0xa9>
c0100a0c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100a0f:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c0100a15:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a18:	8b 40 04             	mov    0x4(%eax),%eax
c0100a1b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100a1e:	e9 7a 01 00 00       	jmp    c0100b9d <rb_delete_fixup+0x223>
c0100a23:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100a26:	8b 40 0c             	mov    0xc(%eax),%eax
c0100a29:	8b 00                	mov    (%eax),%eax
c0100a2b:	85 c0                	test   %eax,%eax
c0100a2d:	75 33                	jne    c0100a62 <rb_delete_fixup+0xe8>
c0100a2f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100a32:	8b 40 08             	mov    0x8(%eax),%eax
c0100a35:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0100a3b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100a3e:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c0100a44:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100a47:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100a4b:	8b 45 08             	mov    0x8(%ebp),%eax
c0100a4e:	89 04 24             	mov    %eax,(%esp)
c0100a51:	e8 23 fa ff ff       	call   c0100479 <rb_right_rotate>
c0100a56:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a59:	8b 40 04             	mov    0x4(%eax),%eax
c0100a5c:	8b 40 0c             	mov    0xc(%eax),%eax
c0100a5f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0100a62:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a65:	8b 40 04             	mov    0x4(%eax),%eax
c0100a68:	8b 10                	mov    (%eax),%edx
c0100a6a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100a6d:	89 10                	mov    %edx,(%eax)
c0100a6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a72:	8b 40 04             	mov    0x4(%eax),%eax
c0100a75:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0100a7b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100a7e:	8b 40 0c             	mov    0xc(%eax),%eax
c0100a81:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0100a87:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a8a:	8b 40 04             	mov    0x4(%eax),%eax
c0100a8d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100a91:	8b 45 08             	mov    0x8(%ebp),%eax
c0100a94:	89 04 24             	mov    %eax,(%esp)
c0100a97:	e8 ee f8 ff ff       	call   c010038a <rb_left_rotate>
c0100a9c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100a9f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100aa2:	e9 f6 00 00 00       	jmp    c0100b9d <rb_delete_fixup+0x223>
        }
        else {
            RB_DELETE_FIXUP_SUB(right, left);
c0100aa7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100aaa:	8b 40 04             	mov    0x4(%eax),%eax
c0100aad:	8b 40 08             	mov    0x8(%eax),%eax
c0100ab0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0100ab3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100ab6:	8b 00                	mov    (%eax),%eax
c0100ab8:	85 c0                	test   %eax,%eax
c0100aba:	74 36                	je     c0100af2 <rb_delete_fixup+0x178>
c0100abc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100abf:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0100ac5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100ac8:	8b 40 04             	mov    0x4(%eax),%eax
c0100acb:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c0100ad1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100ad4:	8b 40 04             	mov    0x4(%eax),%eax
c0100ad7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100adb:	8b 45 08             	mov    0x8(%ebp),%eax
c0100ade:	89 04 24             	mov    %eax,(%esp)
c0100ae1:	e8 93 f9 ff ff       	call   c0100479 <rb_right_rotate>
c0100ae6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100ae9:	8b 40 04             	mov    0x4(%eax),%eax
c0100aec:	8b 40 08             	mov    0x8(%eax),%eax
c0100aef:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0100af2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100af5:	8b 40 0c             	mov    0xc(%eax),%eax
c0100af8:	8b 00                	mov    (%eax),%eax
c0100afa:	85 c0                	test   %eax,%eax
c0100afc:	75 20                	jne    c0100b1e <rb_delete_fixup+0x1a4>
c0100afe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100b01:	8b 40 08             	mov    0x8(%eax),%eax
c0100b04:	8b 00                	mov    (%eax),%eax
c0100b06:	85 c0                	test   %eax,%eax
c0100b08:	75 14                	jne    c0100b1e <rb_delete_fixup+0x1a4>
c0100b0a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100b0d:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c0100b13:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b16:	8b 40 04             	mov    0x4(%eax),%eax
c0100b19:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100b1c:	eb 7f                	jmp    c0100b9d <rb_delete_fixup+0x223>
c0100b1e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100b21:	8b 40 08             	mov    0x8(%eax),%eax
c0100b24:	8b 00                	mov    (%eax),%eax
c0100b26:	85 c0                	test   %eax,%eax
c0100b28:	75 33                	jne    c0100b5d <rb_delete_fixup+0x1e3>
c0100b2a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100b2d:	8b 40 0c             	mov    0xc(%eax),%eax
c0100b30:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0100b36:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100b39:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c0100b3f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100b42:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b46:	8b 45 08             	mov    0x8(%ebp),%eax
c0100b49:	89 04 24             	mov    %eax,(%esp)
c0100b4c:	e8 39 f8 ff ff       	call   c010038a <rb_left_rotate>
c0100b51:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b54:	8b 40 04             	mov    0x4(%eax),%eax
c0100b57:	8b 40 08             	mov    0x8(%eax),%eax
c0100b5a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0100b5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b60:	8b 40 04             	mov    0x4(%eax),%eax
c0100b63:	8b 10                	mov    (%eax),%edx
c0100b65:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100b68:	89 10                	mov    %edx,(%eax)
c0100b6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b6d:	8b 40 04             	mov    0x4(%eax),%eax
c0100b70:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0100b76:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100b79:	8b 40 08             	mov    0x8(%eax),%eax
c0100b7c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0100b82:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b85:	8b 40 04             	mov    0x4(%eax),%eax
c0100b88:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b8c:	8b 45 08             	mov    0x8(%ebp),%eax
c0100b8f:	89 04 24             	mov    %eax,(%esp)
c0100b92:	e8 e2 f8 ff ff       	call   c0100479 <rb_right_rotate>
c0100b97:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100b9a:	89 45 f4             	mov    %eax,-0xc(%ebp)
            rb_##_left##_rotate(tree, x->parent);               \
            x = root;                                           \
        }                                                       \
    } while (0)

    while (x != root && !x->red) {
c0100b9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100ba0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0100ba3:	74 0d                	je     c0100bb2 <rb_delete_fixup+0x238>
c0100ba5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100ba8:	8b 00                	mov    (%eax),%eax
c0100baa:	85 c0                	test   %eax,%eax
c0100bac:	0f 84 e5 fd ff ff    	je     c0100997 <rb_delete_fixup+0x1d>
        }
        else {
            RB_DELETE_FIXUP_SUB(right, left);
        }
    }
    x->red = 0;
c0100bb2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100bb5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

#undef RB_DELETE_FIXUP_SUB
}
c0100bbb:	c9                   	leave  
c0100bbc:	c3                   	ret    

c0100bbd <rb_delete>:
/* *
 * rb_delete - deletes @node from @tree, and calls rb_delete_fixup to
 * restore red-black properties.
 * */
void
rb_delete(rb_tree *tree, rb_node *node) {
c0100bbd:	55                   	push   %ebp
c0100bbe:	89 e5                	mov    %esp,%ebp
c0100bc0:	83 ec 38             	sub    $0x38,%esp
    rb_node *x, *y, *z = node;
c0100bc3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100bc6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    rb_node *nil = tree->nil, *root = tree->root;
c0100bc9:	8b 45 08             	mov    0x8(%ebp),%eax
c0100bcc:	8b 40 04             	mov    0x4(%eax),%eax
c0100bcf:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0100bd2:	8b 45 08             	mov    0x8(%ebp),%eax
c0100bd5:	8b 40 08             	mov    0x8(%eax),%eax
c0100bd8:	89 45 ec             	mov    %eax,-0x14(%ebp)

    y = (z->left == nil || z->right == nil) ? z : rb_tree_successor(tree, z);
c0100bdb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100bde:	8b 40 08             	mov    0x8(%eax),%eax
c0100be1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0100be4:	74 1f                	je     c0100c05 <rb_delete+0x48>
c0100be6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100be9:	8b 40 0c             	mov    0xc(%eax),%eax
c0100bec:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0100bef:	74 14                	je     c0100c05 <rb_delete+0x48>
c0100bf1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100bf4:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100bf8:	8b 45 08             	mov    0x8(%ebp),%eax
c0100bfb:	89 04 24             	mov    %eax,(%esp)
c0100bfe:	e8 16 fc ff ff       	call   c0100819 <rb_tree_successor>
c0100c03:	eb 03                	jmp    c0100c08 <rb_delete+0x4b>
c0100c05:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c08:	89 45 e8             	mov    %eax,-0x18(%ebp)
    x = (y->left != nil) ? y->left : y->right;
c0100c0b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100c0e:	8b 40 08             	mov    0x8(%eax),%eax
c0100c11:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0100c14:	74 08                	je     c0100c1e <rb_delete+0x61>
c0100c16:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100c19:	8b 40 08             	mov    0x8(%eax),%eax
c0100c1c:	eb 06                	jmp    c0100c24 <rb_delete+0x67>
c0100c1e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100c21:	8b 40 0c             	mov    0xc(%eax),%eax
c0100c24:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    assert(y != root && y != nil);
c0100c27:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100c2a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0100c2d:	74 08                	je     c0100c37 <rb_delete+0x7a>
c0100c2f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100c32:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0100c35:	75 24                	jne    c0100c5b <rb_delete+0x9e>
c0100c37:	c7 44 24 0c 80 ed 10 	movl   $0xc010ed80,0xc(%esp)
c0100c3e:	c0 
c0100c3f:	c7 44 24 08 f8 ec 10 	movl   $0xc010ecf8,0x8(%esp)
c0100c46:	c0 
c0100c47:	c7 44 24 04 2f 01 00 	movl   $0x12f,0x4(%esp)
c0100c4e:	00 
c0100c4f:	c7 04 24 0d ed 10 c0 	movl   $0xc010ed0d,(%esp)
c0100c56:	e8 02 16 00 00       	call   c010225d <__panic>

    x->parent = y->parent;
c0100c5b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100c5e:	8b 50 04             	mov    0x4(%eax),%edx
c0100c61:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100c64:	89 50 04             	mov    %edx,0x4(%eax)
    if (y == y->parent->left) {
c0100c67:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100c6a:	8b 40 04             	mov    0x4(%eax),%eax
c0100c6d:	8b 40 08             	mov    0x8(%eax),%eax
c0100c70:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0100c73:	75 0e                	jne    c0100c83 <rb_delete+0xc6>
        y->parent->left = x;
c0100c75:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100c78:	8b 40 04             	mov    0x4(%eax),%eax
c0100c7b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0100c7e:	89 50 08             	mov    %edx,0x8(%eax)
c0100c81:	eb 0c                	jmp    c0100c8f <rb_delete+0xd2>
    }
    else {
        y->parent->right = x;
c0100c83:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100c86:	8b 40 04             	mov    0x4(%eax),%eax
c0100c89:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0100c8c:	89 50 0c             	mov    %edx,0xc(%eax)
    }

    bool need_fixup = !(y->red);
c0100c8f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100c92:	8b 00                	mov    (%eax),%eax
c0100c94:	85 c0                	test   %eax,%eax
c0100c96:	0f 94 c0             	sete   %al
c0100c99:	0f b6 c0             	movzbl %al,%eax
c0100c9c:	89 45 e0             	mov    %eax,-0x20(%ebp)

    if (y != z) {
c0100c9f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100ca2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0100ca5:	74 5c                	je     c0100d03 <rb_delete+0x146>
        if (z == z->parent->left) {
c0100ca7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100caa:	8b 40 04             	mov    0x4(%eax),%eax
c0100cad:	8b 40 08             	mov    0x8(%eax),%eax
c0100cb0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0100cb3:	75 0e                	jne    c0100cc3 <rb_delete+0x106>
            z->parent->left = y;
c0100cb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100cb8:	8b 40 04             	mov    0x4(%eax),%eax
c0100cbb:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0100cbe:	89 50 08             	mov    %edx,0x8(%eax)
c0100cc1:	eb 0c                	jmp    c0100ccf <rb_delete+0x112>
        }
        else {
            z->parent->right = y;
c0100cc3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100cc6:	8b 40 04             	mov    0x4(%eax),%eax
c0100cc9:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0100ccc:	89 50 0c             	mov    %edx,0xc(%eax)
        }
        z->left->parent = z->right->parent = y;
c0100ccf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100cd2:	8b 50 08             	mov    0x8(%eax),%edx
c0100cd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100cd8:	8b 40 0c             	mov    0xc(%eax),%eax
c0100cdb:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0100cde:	89 48 04             	mov    %ecx,0x4(%eax)
c0100ce1:	8b 40 04             	mov    0x4(%eax),%eax
c0100ce4:	89 42 04             	mov    %eax,0x4(%edx)
        *y = *z;
c0100ce7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100cea:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100ced:	8b 0a                	mov    (%edx),%ecx
c0100cef:	89 08                	mov    %ecx,(%eax)
c0100cf1:	8b 4a 04             	mov    0x4(%edx),%ecx
c0100cf4:	89 48 04             	mov    %ecx,0x4(%eax)
c0100cf7:	8b 4a 08             	mov    0x8(%edx),%ecx
c0100cfa:	89 48 08             	mov    %ecx,0x8(%eax)
c0100cfd:	8b 52 0c             	mov    0xc(%edx),%edx
c0100d00:	89 50 0c             	mov    %edx,0xc(%eax)
    }
    if (need_fixup) {
c0100d03:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0100d07:	74 12                	je     c0100d1b <rb_delete+0x15e>
        rb_delete_fixup(tree, x);
c0100d09:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100d0c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100d10:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d13:	89 04 24             	mov    %eax,(%esp)
c0100d16:	e8 5f fc ff ff       	call   c010097a <rb_delete_fixup>
    }
}
c0100d1b:	c9                   	leave  
c0100d1c:	c3                   	ret    

c0100d1d <rb_tree_destroy>:

/* rb_tree_destroy - destroy a tree and free memory */
void
rb_tree_destroy(rb_tree *tree) {
c0100d1d:	55                   	push   %ebp
c0100d1e:	89 e5                	mov    %esp,%ebp
c0100d20:	83 ec 18             	sub    $0x18,%esp
    kfree(tree->root);
c0100d23:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d26:	8b 40 08             	mov    0x8(%eax),%eax
c0100d29:	89 04 24             	mov    %eax,(%esp)
c0100d2c:	e8 b6 53 00 00       	call   c01060e7 <kfree>
    kfree(tree->nil);
c0100d31:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d34:	8b 40 04             	mov    0x4(%eax),%eax
c0100d37:	89 04 24             	mov    %eax,(%esp)
c0100d3a:	e8 a8 53 00 00       	call   c01060e7 <kfree>
    kfree(tree);
c0100d3f:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d42:	89 04 24             	mov    %eax,(%esp)
c0100d45:	e8 9d 53 00 00       	call   c01060e7 <kfree>
}
c0100d4a:	c9                   	leave  
c0100d4b:	c3                   	ret    

c0100d4c <rb_node_prev>:
/* *
 * rb_node_prev - returns the predecessor node of @node in @tree,
 * or 'NULL' if no predecessor exists.
 * */
rb_node *
rb_node_prev(rb_tree *tree, rb_node *node) {
c0100d4c:	55                   	push   %ebp
c0100d4d:	89 e5                	mov    %esp,%ebp
c0100d4f:	83 ec 18             	sub    $0x18,%esp
    rb_node *prev = rb_tree_predecessor(tree, node);
c0100d52:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100d55:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100d59:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d5c:	89 04 24             	mov    %eax,(%esp)
c0100d5f:	e8 30 fb ff ff       	call   c0100894 <rb_tree_predecessor>
c0100d64:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (prev != tree->nil) ? prev : NULL;
c0100d67:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d6a:	8b 40 04             	mov    0x4(%eax),%eax
c0100d6d:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100d70:	74 05                	je     c0100d77 <rb_node_prev+0x2b>
c0100d72:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100d75:	eb 05                	jmp    c0100d7c <rb_node_prev+0x30>
c0100d77:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100d7c:	c9                   	leave  
c0100d7d:	c3                   	ret    

c0100d7e <rb_node_next>:
/* *
 * rb_node_next - returns the successor node of @node in @tree,
 * or 'NULL' if no successor exists.
 * */
rb_node *
rb_node_next(rb_tree *tree, rb_node *node) {
c0100d7e:	55                   	push   %ebp
c0100d7f:	89 e5                	mov    %esp,%ebp
c0100d81:	83 ec 18             	sub    $0x18,%esp
    rb_node *next = rb_tree_successor(tree, node);
c0100d84:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100d87:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100d8b:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d8e:	89 04 24             	mov    %eax,(%esp)
c0100d91:	e8 83 fa ff ff       	call   c0100819 <rb_tree_successor>
c0100d96:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (next != tree->nil) ? next : NULL;
c0100d99:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d9c:	8b 40 04             	mov    0x4(%eax),%eax
c0100d9f:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100da2:	74 05                	je     c0100da9 <rb_node_next+0x2b>
c0100da4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100da7:	eb 05                	jmp    c0100dae <rb_node_next+0x30>
c0100da9:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100dae:	c9                   	leave  
c0100daf:	c3                   	ret    

c0100db0 <rb_node_root>:

/* rb_node_root - returns the root node of a @tree, or 'NULL' if tree is empty */
rb_node *
rb_node_root(rb_tree *tree) {
c0100db0:	55                   	push   %ebp
c0100db1:	89 e5                	mov    %esp,%ebp
c0100db3:	83 ec 10             	sub    $0x10,%esp
    rb_node *node = tree->root->left;
c0100db6:	8b 45 08             	mov    0x8(%ebp),%eax
c0100db9:	8b 40 08             	mov    0x8(%eax),%eax
c0100dbc:	8b 40 08             	mov    0x8(%eax),%eax
c0100dbf:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (node != tree->nil) ? node : NULL;
c0100dc2:	8b 45 08             	mov    0x8(%ebp),%eax
c0100dc5:	8b 40 04             	mov    0x4(%eax),%eax
c0100dc8:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100dcb:	74 05                	je     c0100dd2 <rb_node_root+0x22>
c0100dcd:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100dd0:	eb 05                	jmp    c0100dd7 <rb_node_root+0x27>
c0100dd2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100dd7:	c9                   	leave  
c0100dd8:	c3                   	ret    

c0100dd9 <rb_node_left>:

/* rb_node_left - gets the left child of @node, or 'NULL' if no such node */
rb_node *
rb_node_left(rb_tree *tree, rb_node *node) {
c0100dd9:	55                   	push   %ebp
c0100dda:	89 e5                	mov    %esp,%ebp
c0100ddc:	83 ec 10             	sub    $0x10,%esp
    rb_node *left = node->left;
c0100ddf:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100de2:	8b 40 08             	mov    0x8(%eax),%eax
c0100de5:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (left != tree->nil) ? left : NULL;
c0100de8:	8b 45 08             	mov    0x8(%ebp),%eax
c0100deb:	8b 40 04             	mov    0x4(%eax),%eax
c0100dee:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100df1:	74 05                	je     c0100df8 <rb_node_left+0x1f>
c0100df3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100df6:	eb 05                	jmp    c0100dfd <rb_node_left+0x24>
c0100df8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100dfd:	c9                   	leave  
c0100dfe:	c3                   	ret    

c0100dff <rb_node_right>:

/* rb_node_right - gets the right child of @node, or 'NULL' if no such node */
rb_node *
rb_node_right(rb_tree *tree, rb_node *node) {
c0100dff:	55                   	push   %ebp
c0100e00:	89 e5                	mov    %esp,%ebp
c0100e02:	83 ec 10             	sub    $0x10,%esp
    rb_node *right = node->right;
c0100e05:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100e08:	8b 40 0c             	mov    0xc(%eax),%eax
c0100e0b:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (right != tree->nil) ? right : NULL;
c0100e0e:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e11:	8b 40 04             	mov    0x4(%eax),%eax
c0100e14:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100e17:	74 05                	je     c0100e1e <rb_node_right+0x1f>
c0100e19:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100e1c:	eb 05                	jmp    c0100e23 <rb_node_right+0x24>
c0100e1e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100e23:	c9                   	leave  
c0100e24:	c3                   	ret    

c0100e25 <check_tree>:

int
check_tree(rb_tree *tree, rb_node *node) {
c0100e25:	55                   	push   %ebp
c0100e26:	89 e5                	mov    %esp,%ebp
c0100e28:	83 ec 28             	sub    $0x28,%esp
    rb_node *nil = tree->nil;
c0100e2b:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e2e:	8b 40 04             	mov    0x4(%eax),%eax
c0100e31:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (node == nil) {
c0100e34:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100e37:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0100e3a:	75 37                	jne    c0100e73 <check_tree+0x4e>
        assert(!node->red);
c0100e3c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100e3f:	8b 00                	mov    (%eax),%eax
c0100e41:	85 c0                	test   %eax,%eax
c0100e43:	74 24                	je     c0100e69 <check_tree+0x44>
c0100e45:	c7 44 24 0c 96 ed 10 	movl   $0xc010ed96,0xc(%esp)
c0100e4c:	c0 
c0100e4d:	c7 44 24 08 f8 ec 10 	movl   $0xc010ecf8,0x8(%esp)
c0100e54:	c0 
c0100e55:	c7 44 24 04 7f 01 00 	movl   $0x17f,0x4(%esp)
c0100e5c:	00 
c0100e5d:	c7 04 24 0d ed 10 c0 	movl   $0xc010ed0d,(%esp)
c0100e64:	e8 f4 13 00 00       	call   c010225d <__panic>
        return 1;
c0100e69:	b8 01 00 00 00       	mov    $0x1,%eax
c0100e6e:	e9 af 01 00 00       	jmp    c0101022 <check_tree+0x1fd>
    }
    if (node->left != nil) {
c0100e73:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100e76:	8b 40 08             	mov    0x8(%eax),%eax
c0100e79:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0100e7c:	74 71                	je     c0100eef <check_tree+0xca>
        assert(COMPARE(tree, node, node->left) >= 0);
c0100e7e:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e81:	8b 00                	mov    (%eax),%eax
c0100e83:	8b 55 0c             	mov    0xc(%ebp),%edx
c0100e86:	8b 52 08             	mov    0x8(%edx),%edx
c0100e89:	89 54 24 04          	mov    %edx,0x4(%esp)
c0100e8d:	8b 55 0c             	mov    0xc(%ebp),%edx
c0100e90:	89 14 24             	mov    %edx,(%esp)
c0100e93:	ff d0                	call   *%eax
c0100e95:	85 c0                	test   %eax,%eax
c0100e97:	79 24                	jns    c0100ebd <check_tree+0x98>
c0100e99:	c7 44 24 0c a4 ed 10 	movl   $0xc010eda4,0xc(%esp)
c0100ea0:	c0 
c0100ea1:	c7 44 24 08 f8 ec 10 	movl   $0xc010ecf8,0x8(%esp)
c0100ea8:	c0 
c0100ea9:	c7 44 24 04 83 01 00 	movl   $0x183,0x4(%esp)
c0100eb0:	00 
c0100eb1:	c7 04 24 0d ed 10 c0 	movl   $0xc010ed0d,(%esp)
c0100eb8:	e8 a0 13 00 00       	call   c010225d <__panic>
        assert(node->left->parent == node);
c0100ebd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100ec0:	8b 40 08             	mov    0x8(%eax),%eax
c0100ec3:	8b 40 04             	mov    0x4(%eax),%eax
c0100ec6:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0100ec9:	74 24                	je     c0100eef <check_tree+0xca>
c0100ecb:	c7 44 24 0c c9 ed 10 	movl   $0xc010edc9,0xc(%esp)
c0100ed2:	c0 
c0100ed3:	c7 44 24 08 f8 ec 10 	movl   $0xc010ecf8,0x8(%esp)
c0100eda:	c0 
c0100edb:	c7 44 24 04 84 01 00 	movl   $0x184,0x4(%esp)
c0100ee2:	00 
c0100ee3:	c7 04 24 0d ed 10 c0 	movl   $0xc010ed0d,(%esp)
c0100eea:	e8 6e 13 00 00       	call   c010225d <__panic>
    }
    if (node->right != nil) {
c0100eef:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100ef2:	8b 40 0c             	mov    0xc(%eax),%eax
c0100ef5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0100ef8:	74 71                	je     c0100f6b <check_tree+0x146>
        assert(COMPARE(tree, node, node->right) <= 0);
c0100efa:	8b 45 08             	mov    0x8(%ebp),%eax
c0100efd:	8b 00                	mov    (%eax),%eax
c0100eff:	8b 55 0c             	mov    0xc(%ebp),%edx
c0100f02:	8b 52 0c             	mov    0xc(%edx),%edx
c0100f05:	89 54 24 04          	mov    %edx,0x4(%esp)
c0100f09:	8b 55 0c             	mov    0xc(%ebp),%edx
c0100f0c:	89 14 24             	mov    %edx,(%esp)
c0100f0f:	ff d0                	call   *%eax
c0100f11:	85 c0                	test   %eax,%eax
c0100f13:	7e 24                	jle    c0100f39 <check_tree+0x114>
c0100f15:	c7 44 24 0c e4 ed 10 	movl   $0xc010ede4,0xc(%esp)
c0100f1c:	c0 
c0100f1d:	c7 44 24 08 f8 ec 10 	movl   $0xc010ecf8,0x8(%esp)
c0100f24:	c0 
c0100f25:	c7 44 24 04 87 01 00 	movl   $0x187,0x4(%esp)
c0100f2c:	00 
c0100f2d:	c7 04 24 0d ed 10 c0 	movl   $0xc010ed0d,(%esp)
c0100f34:	e8 24 13 00 00       	call   c010225d <__panic>
        assert(node->right->parent == node);
c0100f39:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100f3c:	8b 40 0c             	mov    0xc(%eax),%eax
c0100f3f:	8b 40 04             	mov    0x4(%eax),%eax
c0100f42:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0100f45:	74 24                	je     c0100f6b <check_tree+0x146>
c0100f47:	c7 44 24 0c 0a ee 10 	movl   $0xc010ee0a,0xc(%esp)
c0100f4e:	c0 
c0100f4f:	c7 44 24 08 f8 ec 10 	movl   $0xc010ecf8,0x8(%esp)
c0100f56:	c0 
c0100f57:	c7 44 24 04 88 01 00 	movl   $0x188,0x4(%esp)
c0100f5e:	00 
c0100f5f:	c7 04 24 0d ed 10 c0 	movl   $0xc010ed0d,(%esp)
c0100f66:	e8 f2 12 00 00       	call   c010225d <__panic>
    }
    if (node->red) {
c0100f6b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100f6e:	8b 00                	mov    (%eax),%eax
c0100f70:	85 c0                	test   %eax,%eax
c0100f72:	74 3c                	je     c0100fb0 <check_tree+0x18b>
        assert(!node->left->red && !node->right->red);
c0100f74:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100f77:	8b 40 08             	mov    0x8(%eax),%eax
c0100f7a:	8b 00                	mov    (%eax),%eax
c0100f7c:	85 c0                	test   %eax,%eax
c0100f7e:	75 0c                	jne    c0100f8c <check_tree+0x167>
c0100f80:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100f83:	8b 40 0c             	mov    0xc(%eax),%eax
c0100f86:	8b 00                	mov    (%eax),%eax
c0100f88:	85 c0                	test   %eax,%eax
c0100f8a:	74 24                	je     c0100fb0 <check_tree+0x18b>
c0100f8c:	c7 44 24 0c 28 ee 10 	movl   $0xc010ee28,0xc(%esp)
c0100f93:	c0 
c0100f94:	c7 44 24 08 f8 ec 10 	movl   $0xc010ecf8,0x8(%esp)
c0100f9b:	c0 
c0100f9c:	c7 44 24 04 8b 01 00 	movl   $0x18b,0x4(%esp)
c0100fa3:	00 
c0100fa4:	c7 04 24 0d ed 10 c0 	movl   $0xc010ed0d,(%esp)
c0100fab:	e8 ad 12 00 00       	call   c010225d <__panic>
    }
    int hb_left = check_tree(tree, node->left);
c0100fb0:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100fb3:	8b 40 08             	mov    0x8(%eax),%eax
c0100fb6:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100fba:	8b 45 08             	mov    0x8(%ebp),%eax
c0100fbd:	89 04 24             	mov    %eax,(%esp)
c0100fc0:	e8 60 fe ff ff       	call   c0100e25 <check_tree>
c0100fc5:	89 45 ec             	mov    %eax,-0x14(%ebp)
    int hb_right = check_tree(tree, node->right);
c0100fc8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100fcb:	8b 40 0c             	mov    0xc(%eax),%eax
c0100fce:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100fd2:	8b 45 08             	mov    0x8(%ebp),%eax
c0100fd5:	89 04 24             	mov    %eax,(%esp)
c0100fd8:	e8 48 fe ff ff       	call   c0100e25 <check_tree>
c0100fdd:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(hb_left == hb_right);
c0100fe0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100fe3:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0100fe6:	74 24                	je     c010100c <check_tree+0x1e7>
c0100fe8:	c7 44 24 0c 4e ee 10 	movl   $0xc010ee4e,0xc(%esp)
c0100fef:	c0 
c0100ff0:	c7 44 24 08 f8 ec 10 	movl   $0xc010ecf8,0x8(%esp)
c0100ff7:	c0 
c0100ff8:	c7 44 24 04 8f 01 00 	movl   $0x18f,0x4(%esp)
c0100fff:	00 
c0101000:	c7 04 24 0d ed 10 c0 	movl   $0xc010ed0d,(%esp)
c0101007:	e8 51 12 00 00       	call   c010225d <__panic>
    int hb = hb_left;
c010100c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010100f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!node->red) {
c0101012:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101015:	8b 00                	mov    (%eax),%eax
c0101017:	85 c0                	test   %eax,%eax
c0101019:	75 04                	jne    c010101f <check_tree+0x1fa>
        hb ++;
c010101b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
    }
    return hb;
c010101f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101022:	c9                   	leave  
c0101023:	c3                   	ret    

c0101024 <check_safe_kmalloc>:

static void *
check_safe_kmalloc(size_t size) {
c0101024:	55                   	push   %ebp
c0101025:	89 e5                	mov    %esp,%ebp
c0101027:	83 ec 28             	sub    $0x28,%esp
    void *ret = kmalloc(size);
c010102a:	8b 45 08             	mov    0x8(%ebp),%eax
c010102d:	89 04 24             	mov    %eax,(%esp)
c0101030:	e8 97 50 00 00       	call   c01060cc <kmalloc>
c0101035:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(ret != NULL);
c0101038:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010103c:	75 24                	jne    c0101062 <check_safe_kmalloc+0x3e>
c010103e:	c7 44 24 0c 62 ee 10 	movl   $0xc010ee62,0xc(%esp)
c0101045:	c0 
c0101046:	c7 44 24 08 f8 ec 10 	movl   $0xc010ecf8,0x8(%esp)
c010104d:	c0 
c010104e:	c7 44 24 04 9a 01 00 	movl   $0x19a,0x4(%esp)
c0101055:	00 
c0101056:	c7 04 24 0d ed 10 c0 	movl   $0xc010ed0d,(%esp)
c010105d:	e8 fb 11 00 00       	call   c010225d <__panic>
    return ret;
c0101062:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101065:	c9                   	leave  
c0101066:	c3                   	ret    

c0101067 <check_compare1>:

#define rbn2data(node)              \
    (to_struct(node, struct check_data, rb_link))

static inline int
check_compare1(rb_node *node1, rb_node *node2) {
c0101067:	55                   	push   %ebp
c0101068:	89 e5                	mov    %esp,%ebp
    return rbn2data(node1)->data - rbn2data(node2)->data;
c010106a:	8b 45 08             	mov    0x8(%ebp),%eax
c010106d:	83 e8 04             	sub    $0x4,%eax
c0101070:	8b 10                	mov    (%eax),%edx
c0101072:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101075:	83 e8 04             	sub    $0x4,%eax
c0101078:	8b 00                	mov    (%eax),%eax
c010107a:	29 c2                	sub    %eax,%edx
c010107c:	89 d0                	mov    %edx,%eax
}
c010107e:	5d                   	pop    %ebp
c010107f:	c3                   	ret    

c0101080 <check_compare2>:

static inline int
check_compare2(rb_node *node, void *key) {
c0101080:	55                   	push   %ebp
c0101081:	89 e5                	mov    %esp,%ebp
    return rbn2data(node)->data - (long)key;
c0101083:	8b 45 08             	mov    0x8(%ebp),%eax
c0101086:	83 e8 04             	sub    $0x4,%eax
c0101089:	8b 10                	mov    (%eax),%edx
c010108b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010108e:	29 c2                	sub    %eax,%edx
c0101090:	89 d0                	mov    %edx,%eax
}
c0101092:	5d                   	pop    %ebp
c0101093:	c3                   	ret    

c0101094 <check_rb_tree>:

void
check_rb_tree(void) {
c0101094:	55                   	push   %ebp
c0101095:	89 e5                	mov    %esp,%ebp
c0101097:	53                   	push   %ebx
c0101098:	83 ec 44             	sub    $0x44,%esp
    rb_tree *tree = rb_tree_create(check_compare1);
c010109b:	c7 04 24 67 10 10 c0 	movl   $0xc0101067,(%esp)
c01010a2:	e8 e5 f1 ff ff       	call   c010028c <rb_tree_create>
c01010a7:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert(tree != NULL);
c01010aa:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01010ae:	75 24                	jne    c01010d4 <check_rb_tree+0x40>
c01010b0:	c7 44 24 0c 6e ee 10 	movl   $0xc010ee6e,0xc(%esp)
c01010b7:	c0 
c01010b8:	c7 44 24 08 f8 ec 10 	movl   $0xc010ecf8,0x8(%esp)
c01010bf:	c0 
c01010c0:	c7 44 24 04 b3 01 00 	movl   $0x1b3,0x4(%esp)
c01010c7:	00 
c01010c8:	c7 04 24 0d ed 10 c0 	movl   $0xc010ed0d,(%esp)
c01010cf:	e8 89 11 00 00       	call   c010225d <__panic>

    rb_node *nil = tree->nil, *root = tree->root;
c01010d4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01010d7:	8b 40 04             	mov    0x4(%eax),%eax
c01010da:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01010dd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01010e0:	8b 40 08             	mov    0x8(%eax),%eax
c01010e3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(!nil->red && root->left == nil);
c01010e6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01010e9:	8b 00                	mov    (%eax),%eax
c01010eb:	85 c0                	test   %eax,%eax
c01010ed:	75 0b                	jne    c01010fa <check_rb_tree+0x66>
c01010ef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01010f2:	8b 40 08             	mov    0x8(%eax),%eax
c01010f5:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c01010f8:	74 24                	je     c010111e <check_rb_tree+0x8a>
c01010fa:	c7 44 24 0c 7c ee 10 	movl   $0xc010ee7c,0xc(%esp)
c0101101:	c0 
c0101102:	c7 44 24 08 f8 ec 10 	movl   $0xc010ecf8,0x8(%esp)
c0101109:	c0 
c010110a:	c7 44 24 04 b6 01 00 	movl   $0x1b6,0x4(%esp)
c0101111:	00 
c0101112:	c7 04 24 0d ed 10 c0 	movl   $0xc010ed0d,(%esp)
c0101119:	e8 3f 11 00 00       	call   c010225d <__panic>

    int total = 1000;
c010111e:	c7 45 e0 e8 03 00 00 	movl   $0x3e8,-0x20(%ebp)
    struct check_data **all = check_safe_kmalloc(sizeof(struct check_data *) * total);
c0101125:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0101128:	c1 e0 02             	shl    $0x2,%eax
c010112b:	89 04 24             	mov    %eax,(%esp)
c010112e:	e8 f1 fe ff ff       	call   c0101024 <check_safe_kmalloc>
c0101133:	89 45 dc             	mov    %eax,-0x24(%ebp)

    long i;
    for (i = 0; i < total; i ++) {
c0101136:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010113d:	eb 38                	jmp    c0101177 <check_rb_tree+0xe3>
        all[i] = check_safe_kmalloc(sizeof(struct check_data));
c010113f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101142:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0101149:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010114c:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
c010114f:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
c0101156:	e8 c9 fe ff ff       	call   c0101024 <check_safe_kmalloc>
c010115b:	89 03                	mov    %eax,(%ebx)
        all[i]->data = i;
c010115d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101160:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0101167:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010116a:	01 d0                	add    %edx,%eax
c010116c:	8b 00                	mov    (%eax),%eax
c010116e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101171:	89 10                	mov    %edx,(%eax)

    int total = 1000;
    struct check_data **all = check_safe_kmalloc(sizeof(struct check_data *) * total);

    long i;
    for (i = 0; i < total; i ++) {
c0101173:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101177:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010117a:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010117d:	7c c0                	jl     c010113f <check_rb_tree+0xab>
        all[i] = check_safe_kmalloc(sizeof(struct check_data));
        all[i]->data = i;
    }

    int *mark = check_safe_kmalloc(sizeof(int) * total);
c010117f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0101182:	c1 e0 02             	shl    $0x2,%eax
c0101185:	89 04 24             	mov    %eax,(%esp)
c0101188:	e8 97 fe ff ff       	call   c0101024 <check_safe_kmalloc>
c010118d:	89 45 d8             	mov    %eax,-0x28(%ebp)
    memset(mark, 0, sizeof(int) * total);
c0101190:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0101193:	c1 e0 02             	shl    $0x2,%eax
c0101196:	89 44 24 08          	mov    %eax,0x8(%esp)
c010119a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01011a1:	00 
c01011a2:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01011a5:	89 04 24             	mov    %eax,(%esp)
c01011a8:	e8 ff d8 00 00       	call   c010eaac <memset>

    for (i = 0; i < total; i ++) {
c01011ad:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01011b4:	eb 29                	jmp    c01011df <check_rb_tree+0x14b>
        mark[all[i]->data] = 1;
c01011b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01011b9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01011c0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01011c3:	01 d0                	add    %edx,%eax
c01011c5:	8b 00                	mov    (%eax),%eax
c01011c7:	8b 00                	mov    (%eax),%eax
c01011c9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01011d0:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01011d3:	01 d0                	add    %edx,%eax
c01011d5:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    }

    int *mark = check_safe_kmalloc(sizeof(int) * total);
    memset(mark, 0, sizeof(int) * total);

    for (i = 0; i < total; i ++) {
c01011db:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01011df:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01011e2:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01011e5:	7c cf                	jl     c01011b6 <check_rb_tree+0x122>
        mark[all[i]->data] = 1;
    }
    for (i = 0; i < total; i ++) {
c01011e7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01011ee:	eb 3e                	jmp    c010122e <check_rb_tree+0x19a>
        assert(mark[i] == 1);
c01011f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01011f3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01011fa:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01011fd:	01 d0                	add    %edx,%eax
c01011ff:	8b 00                	mov    (%eax),%eax
c0101201:	83 f8 01             	cmp    $0x1,%eax
c0101204:	74 24                	je     c010122a <check_rb_tree+0x196>
c0101206:	c7 44 24 0c 9b ee 10 	movl   $0xc010ee9b,0xc(%esp)
c010120d:	c0 
c010120e:	c7 44 24 08 f8 ec 10 	movl   $0xc010ecf8,0x8(%esp)
c0101215:	c0 
c0101216:	c7 44 24 04 c8 01 00 	movl   $0x1c8,0x4(%esp)
c010121d:	00 
c010121e:	c7 04 24 0d ed 10 c0 	movl   $0xc010ed0d,(%esp)
c0101225:	e8 33 10 00 00       	call   c010225d <__panic>
    memset(mark, 0, sizeof(int) * total);

    for (i = 0; i < total; i ++) {
        mark[all[i]->data] = 1;
    }
    for (i = 0; i < total; i ++) {
c010122a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010122e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101231:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0101234:	7c ba                	jl     c01011f0 <check_rb_tree+0x15c>
        assert(mark[i] == 1);
    }

    for (i = 0; i < total; i ++) {
c0101236:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010123d:	eb 66                	jmp    c01012a5 <check_rb_tree+0x211>
        int j = (rand() % (total - i)) + i;
c010123f:	e8 61 d4 00 00       	call   c010e6a5 <rand>
c0101244:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101247:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c010124a:	29 d1                	sub    %edx,%ecx
c010124c:	99                   	cltd   
c010124d:	f7 f9                	idiv   %ecx
c010124f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101252:	01 d0                	add    %edx,%eax
c0101254:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        struct check_data *z = all[i];
c0101257:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010125a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0101261:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101264:	01 d0                	add    %edx,%eax
c0101266:	8b 00                	mov    (%eax),%eax
c0101268:	89 45 d0             	mov    %eax,-0x30(%ebp)
        all[i] = all[j];
c010126b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010126e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0101275:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101278:	01 c2                	add    %eax,%edx
c010127a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010127d:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
c0101284:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101287:	01 c8                	add    %ecx,%eax
c0101289:	8b 00                	mov    (%eax),%eax
c010128b:	89 02                	mov    %eax,(%edx)
        all[j] = z;
c010128d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0101290:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0101297:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010129a:	01 c2                	add    %eax,%edx
c010129c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010129f:	89 02                	mov    %eax,(%edx)
    }
    for (i = 0; i < total; i ++) {
        assert(mark[i] == 1);
    }

    for (i = 0; i < total; i ++) {
c01012a1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01012a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01012a8:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01012ab:	7c 92                	jl     c010123f <check_rb_tree+0x1ab>
        struct check_data *z = all[i];
        all[i] = all[j];
        all[j] = z;
    }

    memset(mark, 0, sizeof(int) * total);
c01012ad:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01012b0:	c1 e0 02             	shl    $0x2,%eax
c01012b3:	89 44 24 08          	mov    %eax,0x8(%esp)
c01012b7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01012be:	00 
c01012bf:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01012c2:	89 04 24             	mov    %eax,(%esp)
c01012c5:	e8 e2 d7 00 00       	call   c010eaac <memset>
    for (i = 0; i < total; i ++) {
c01012ca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01012d1:	eb 29                	jmp    c01012fc <check_rb_tree+0x268>
        mark[all[i]->data] = 1;
c01012d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01012d6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01012dd:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01012e0:	01 d0                	add    %edx,%eax
c01012e2:	8b 00                	mov    (%eax),%eax
c01012e4:	8b 00                	mov    (%eax),%eax
c01012e6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01012ed:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01012f0:	01 d0                	add    %edx,%eax
c01012f2:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        all[i] = all[j];
        all[j] = z;
    }

    memset(mark, 0, sizeof(int) * total);
    for (i = 0; i < total; i ++) {
c01012f8:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01012fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01012ff:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0101302:	7c cf                	jl     c01012d3 <check_rb_tree+0x23f>
        mark[all[i]->data] = 1;
    }
    for (i = 0; i < total; i ++) {
c0101304:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010130b:	eb 3e                	jmp    c010134b <check_rb_tree+0x2b7>
        assert(mark[i] == 1);
c010130d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101310:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0101317:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010131a:	01 d0                	add    %edx,%eax
c010131c:	8b 00                	mov    (%eax),%eax
c010131e:	83 f8 01             	cmp    $0x1,%eax
c0101321:	74 24                	je     c0101347 <check_rb_tree+0x2b3>
c0101323:	c7 44 24 0c 9b ee 10 	movl   $0xc010ee9b,0xc(%esp)
c010132a:	c0 
c010132b:	c7 44 24 08 f8 ec 10 	movl   $0xc010ecf8,0x8(%esp)
c0101332:	c0 
c0101333:	c7 44 24 04 d7 01 00 	movl   $0x1d7,0x4(%esp)
c010133a:	00 
c010133b:	c7 04 24 0d ed 10 c0 	movl   $0xc010ed0d,(%esp)
c0101342:	e8 16 0f 00 00       	call   c010225d <__panic>

    memset(mark, 0, sizeof(int) * total);
    for (i = 0; i < total; i ++) {
        mark[all[i]->data] = 1;
    }
    for (i = 0; i < total; i ++) {
c0101347:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010134b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010134e:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0101351:	7c ba                	jl     c010130d <check_rb_tree+0x279>
        assert(mark[i] == 1);
    }

    for (i = 0; i < total; i ++) {
c0101353:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010135a:	eb 3c                	jmp    c0101398 <check_rb_tree+0x304>
        rb_insert(tree, &(all[i]->rb_link));
c010135c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010135f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0101366:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101369:	01 d0                	add    %edx,%eax
c010136b:	8b 00                	mov    (%eax),%eax
c010136d:	83 c0 04             	add    $0x4,%eax
c0101370:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101374:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101377:	89 04 24             	mov    %eax,(%esp)
c010137a:	e8 a3 f2 ff ff       	call   c0100622 <rb_insert>
        check_tree(tree, root->left);
c010137f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101382:	8b 40 08             	mov    0x8(%eax),%eax
c0101385:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101389:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010138c:	89 04 24             	mov    %eax,(%esp)
c010138f:	e8 91 fa ff ff       	call   c0100e25 <check_tree>
    }
    for (i = 0; i < total; i ++) {
        assert(mark[i] == 1);
    }

    for (i = 0; i < total; i ++) {
c0101394:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101398:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010139b:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010139e:	7c bc                	jl     c010135c <check_rb_tree+0x2c8>
        rb_insert(tree, &(all[i]->rb_link));
        check_tree(tree, root->left);
    }

    rb_node *node;
    for (i = 0; i < total; i ++) {
c01013a0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01013a7:	eb 74                	jmp    c010141d <check_rb_tree+0x389>
        node = rb_search(tree, check_compare2, (void *)(all[i]->data));
c01013a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01013ac:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01013b3:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01013b6:	01 d0                	add    %edx,%eax
c01013b8:	8b 00                	mov    (%eax),%eax
c01013ba:	8b 00                	mov    (%eax),%eax
c01013bc:	89 44 24 08          	mov    %eax,0x8(%esp)
c01013c0:	c7 44 24 04 80 10 10 	movl   $0xc0101080,0x4(%esp)
c01013c7:	c0 
c01013c8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01013cb:	89 04 24             	mov    %eax,(%esp)
c01013ce:	e8 3c f5 ff ff       	call   c010090f <rb_search>
c01013d3:	89 45 cc             	mov    %eax,-0x34(%ebp)
        assert(node != NULL && node == &(all[i]->rb_link));
c01013d6:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01013da:	74 19                	je     c01013f5 <check_rb_tree+0x361>
c01013dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01013df:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01013e6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01013e9:	01 d0                	add    %edx,%eax
c01013eb:	8b 00                	mov    (%eax),%eax
c01013ed:	83 c0 04             	add    $0x4,%eax
c01013f0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
c01013f3:	74 24                	je     c0101419 <check_rb_tree+0x385>
c01013f5:	c7 44 24 0c a8 ee 10 	movl   $0xc010eea8,0xc(%esp)
c01013fc:	c0 
c01013fd:	c7 44 24 08 f8 ec 10 	movl   $0xc010ecf8,0x8(%esp)
c0101404:	c0 
c0101405:	c7 44 24 04 e2 01 00 	movl   $0x1e2,0x4(%esp)
c010140c:	00 
c010140d:	c7 04 24 0d ed 10 c0 	movl   $0xc010ed0d,(%esp)
c0101414:	e8 44 0e 00 00       	call   c010225d <__panic>
        rb_insert(tree, &(all[i]->rb_link));
        check_tree(tree, root->left);
    }

    rb_node *node;
    for (i = 0; i < total; i ++) {
c0101419:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010141d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101420:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0101423:	7c 84                	jl     c01013a9 <check_rb_tree+0x315>
        node = rb_search(tree, check_compare2, (void *)(all[i]->data));
        assert(node != NULL && node == &(all[i]->rb_link));
    }

    for (i = 0; i < total; i ++) {
c0101425:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010142c:	eb 7f                	jmp    c01014ad <check_rb_tree+0x419>
        node = rb_search(tree, check_compare2, (void *)i);
c010142e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101431:	89 44 24 08          	mov    %eax,0x8(%esp)
c0101435:	c7 44 24 04 80 10 10 	movl   $0xc0101080,0x4(%esp)
c010143c:	c0 
c010143d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101440:	89 04 24             	mov    %eax,(%esp)
c0101443:	e8 c7 f4 ff ff       	call   c010090f <rb_search>
c0101448:	89 45 cc             	mov    %eax,-0x34(%ebp)
        assert(node != NULL && rbn2data(node)->data == i);
c010144b:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c010144f:	74 0d                	je     c010145e <check_rb_tree+0x3ca>
c0101451:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101454:	83 e8 04             	sub    $0x4,%eax
c0101457:	8b 00                	mov    (%eax),%eax
c0101459:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010145c:	74 24                	je     c0101482 <check_rb_tree+0x3ee>
c010145e:	c7 44 24 0c d4 ee 10 	movl   $0xc010eed4,0xc(%esp)
c0101465:	c0 
c0101466:	c7 44 24 08 f8 ec 10 	movl   $0xc010ecf8,0x8(%esp)
c010146d:	c0 
c010146e:	c7 44 24 04 e7 01 00 	movl   $0x1e7,0x4(%esp)
c0101475:	00 
c0101476:	c7 04 24 0d ed 10 c0 	movl   $0xc010ed0d,(%esp)
c010147d:	e8 db 0d 00 00       	call   c010225d <__panic>
        rb_delete(tree, node);
c0101482:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101485:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101489:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010148c:	89 04 24             	mov    %eax,(%esp)
c010148f:	e8 29 f7 ff ff       	call   c0100bbd <rb_delete>
        check_tree(tree, root->left);
c0101494:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101497:	8b 40 08             	mov    0x8(%eax),%eax
c010149a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010149e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01014a1:	89 04 24             	mov    %eax,(%esp)
c01014a4:	e8 7c f9 ff ff       	call   c0100e25 <check_tree>
    for (i = 0; i < total; i ++) {
        node = rb_search(tree, check_compare2, (void *)(all[i]->data));
        assert(node != NULL && node == &(all[i]->rb_link));
    }

    for (i = 0; i < total; i ++) {
c01014a9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01014ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01014b0:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01014b3:	0f 8c 75 ff ff ff    	jl     c010142e <check_rb_tree+0x39a>
        assert(node != NULL && rbn2data(node)->data == i);
        rb_delete(tree, node);
        check_tree(tree, root->left);
    }

    assert(!nil->red && root->left == nil);
c01014b9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01014bc:	8b 00                	mov    (%eax),%eax
c01014be:	85 c0                	test   %eax,%eax
c01014c0:	75 0b                	jne    c01014cd <check_rb_tree+0x439>
c01014c2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01014c5:	8b 40 08             	mov    0x8(%eax),%eax
c01014c8:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c01014cb:	74 24                	je     c01014f1 <check_rb_tree+0x45d>
c01014cd:	c7 44 24 0c 7c ee 10 	movl   $0xc010ee7c,0xc(%esp)
c01014d4:	c0 
c01014d5:	c7 44 24 08 f8 ec 10 	movl   $0xc010ecf8,0x8(%esp)
c01014dc:	c0 
c01014dd:	c7 44 24 04 ec 01 00 	movl   $0x1ec,0x4(%esp)
c01014e4:	00 
c01014e5:	c7 04 24 0d ed 10 c0 	movl   $0xc010ed0d,(%esp)
c01014ec:	e8 6c 0d 00 00       	call   c010225d <__panic>

    long max = 32;
c01014f1:	c7 45 f0 20 00 00 00 	movl   $0x20,-0x10(%ebp)
    if (max > total) {
c01014f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01014fb:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01014fe:	7e 06                	jle    c0101506 <check_rb_tree+0x472>
        max = total;
c0101500:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0101503:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }

    for (i = 0; i < max; i ++) {
c0101506:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010150d:	eb 52                	jmp    c0101561 <check_rb_tree+0x4cd>
        all[i]->data = max;
c010150f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101512:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0101519:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010151c:	01 d0                	add    %edx,%eax
c010151e:	8b 00                	mov    (%eax),%eax
c0101520:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0101523:	89 10                	mov    %edx,(%eax)
        rb_insert(tree, &(all[i]->rb_link));
c0101525:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101528:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010152f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101532:	01 d0                	add    %edx,%eax
c0101534:	8b 00                	mov    (%eax),%eax
c0101536:	83 c0 04             	add    $0x4,%eax
c0101539:	89 44 24 04          	mov    %eax,0x4(%esp)
c010153d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101540:	89 04 24             	mov    %eax,(%esp)
c0101543:	e8 da f0 ff ff       	call   c0100622 <rb_insert>
        check_tree(tree, root->left);
c0101548:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010154b:	8b 40 08             	mov    0x8(%eax),%eax
c010154e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101552:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101555:	89 04 24             	mov    %eax,(%esp)
c0101558:	e8 c8 f8 ff ff       	call   c0100e25 <check_tree>
    long max = 32;
    if (max > total) {
        max = total;
    }

    for (i = 0; i < max; i ++) {
c010155d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101561:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101564:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0101567:	7c a6                	jl     c010150f <check_rb_tree+0x47b>
        all[i]->data = max;
        rb_insert(tree, &(all[i]->rb_link));
        check_tree(tree, root->left);
    }

    for (i = 0; i < max; i ++) {
c0101569:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0101570:	eb 7f                	jmp    c01015f1 <check_rb_tree+0x55d>
        node = rb_search(tree, check_compare2, (void *)max);
c0101572:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101575:	89 44 24 08          	mov    %eax,0x8(%esp)
c0101579:	c7 44 24 04 80 10 10 	movl   $0xc0101080,0x4(%esp)
c0101580:	c0 
c0101581:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101584:	89 04 24             	mov    %eax,(%esp)
c0101587:	e8 83 f3 ff ff       	call   c010090f <rb_search>
c010158c:	89 45 cc             	mov    %eax,-0x34(%ebp)
        assert(node != NULL && rbn2data(node)->data == max);
c010158f:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0101593:	74 0d                	je     c01015a2 <check_rb_tree+0x50e>
c0101595:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101598:	83 e8 04             	sub    $0x4,%eax
c010159b:	8b 00                	mov    (%eax),%eax
c010159d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01015a0:	74 24                	je     c01015c6 <check_rb_tree+0x532>
c01015a2:	c7 44 24 0c 00 ef 10 	movl   $0xc010ef00,0xc(%esp)
c01015a9:	c0 
c01015aa:	c7 44 24 08 f8 ec 10 	movl   $0xc010ecf8,0x8(%esp)
c01015b1:	c0 
c01015b2:	c7 44 24 04 fb 01 00 	movl   $0x1fb,0x4(%esp)
c01015b9:	00 
c01015ba:	c7 04 24 0d ed 10 c0 	movl   $0xc010ed0d,(%esp)
c01015c1:	e8 97 0c 00 00       	call   c010225d <__panic>
        rb_delete(tree, node);
c01015c6:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01015c9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01015cd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01015d0:	89 04 24             	mov    %eax,(%esp)
c01015d3:	e8 e5 f5 ff ff       	call   c0100bbd <rb_delete>
        check_tree(tree, root->left);
c01015d8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01015db:	8b 40 08             	mov    0x8(%eax),%eax
c01015de:	89 44 24 04          	mov    %eax,0x4(%esp)
c01015e2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01015e5:	89 04 24             	mov    %eax,(%esp)
c01015e8:	e8 38 f8 ff ff       	call   c0100e25 <check_tree>
        all[i]->data = max;
        rb_insert(tree, &(all[i]->rb_link));
        check_tree(tree, root->left);
    }

    for (i = 0; i < max; i ++) {
c01015ed:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01015f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01015f4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01015f7:	0f 8c 75 ff ff ff    	jl     c0101572 <check_rb_tree+0x4de>
        assert(node != NULL && rbn2data(node)->data == max);
        rb_delete(tree, node);
        check_tree(tree, root->left);
    }

    assert(rb_tree_empty(tree));
c01015fd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101600:	89 04 24             	mov    %eax,(%esp)
c0101603:	e8 5b ec ff ff       	call   c0100263 <rb_tree_empty>
c0101608:	85 c0                	test   %eax,%eax
c010160a:	75 24                	jne    c0101630 <check_rb_tree+0x59c>
c010160c:	c7 44 24 0c 2c ef 10 	movl   $0xc010ef2c,0xc(%esp)
c0101613:	c0 
c0101614:	c7 44 24 08 f8 ec 10 	movl   $0xc010ecf8,0x8(%esp)
c010161b:	c0 
c010161c:	c7 44 24 04 00 02 00 	movl   $0x200,0x4(%esp)
c0101623:	00 
c0101624:	c7 04 24 0d ed 10 c0 	movl   $0xc010ed0d,(%esp)
c010162b:	e8 2d 0c 00 00       	call   c010225d <__panic>

    for (i = 0; i < total; i ++) {
c0101630:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0101637:	eb 3c                	jmp    c0101675 <check_rb_tree+0x5e1>
        rb_insert(tree, &(all[i]->rb_link));
c0101639:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010163c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0101643:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101646:	01 d0                	add    %edx,%eax
c0101648:	8b 00                	mov    (%eax),%eax
c010164a:	83 c0 04             	add    $0x4,%eax
c010164d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101651:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101654:	89 04 24             	mov    %eax,(%esp)
c0101657:	e8 c6 ef ff ff       	call   c0100622 <rb_insert>
        check_tree(tree, root->left);
c010165c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010165f:	8b 40 08             	mov    0x8(%eax),%eax
c0101662:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101666:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101669:	89 04 24             	mov    %eax,(%esp)
c010166c:	e8 b4 f7 ff ff       	call   c0100e25 <check_tree>
        check_tree(tree, root->left);
    }

    assert(rb_tree_empty(tree));

    for (i = 0; i < total; i ++) {
c0101671:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101675:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101678:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010167b:	7c bc                	jl     c0101639 <check_rb_tree+0x5a5>
        rb_insert(tree, &(all[i]->rb_link));
        check_tree(tree, root->left);
    }

    rb_tree_destroy(tree);
c010167d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101680:	89 04 24             	mov    %eax,(%esp)
c0101683:	e8 95 f6 ff ff       	call   c0100d1d <rb_tree_destroy>

    for (i = 0; i < total; i ++) {
c0101688:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010168f:	eb 1d                	jmp    c01016ae <check_rb_tree+0x61a>
        kfree(all[i]);
c0101691:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101694:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010169b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010169e:	01 d0                	add    %edx,%eax
c01016a0:	8b 00                	mov    (%eax),%eax
c01016a2:	89 04 24             	mov    %eax,(%esp)
c01016a5:	e8 3d 4a 00 00       	call   c01060e7 <kfree>
        check_tree(tree, root->left);
    }

    rb_tree_destroy(tree);

    for (i = 0; i < total; i ++) {
c01016aa:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01016ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01016b1:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01016b4:	7c db                	jl     c0101691 <check_rb_tree+0x5fd>
        kfree(all[i]);
    }

    kfree(mark);
c01016b6:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01016b9:	89 04 24             	mov    %eax,(%esp)
c01016bc:	e8 26 4a 00 00       	call   c01060e7 <kfree>
    kfree(all);
c01016c1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01016c4:	89 04 24             	mov    %eax,(%esp)
c01016c7:	e8 1b 4a 00 00       	call   c01060e7 <kfree>
}
c01016cc:	83 c4 44             	add    $0x44,%esp
c01016cf:	5b                   	pop    %ebx
c01016d0:	5d                   	pop    %ebp
c01016d1:	c3                   	ret    

c01016d2 <readline>:
 * The readline() function returns the text of the line read. If some errors
 * are happened, NULL is returned. The return value is a global variable,
 * thus it should be copied before it is used.
 * */
char *
readline(const char *prompt) {
c01016d2:	55                   	push   %ebp
c01016d3:	89 e5                	mov    %esp,%ebp
c01016d5:	83 ec 28             	sub    $0x28,%esp
    if (prompt != NULL) {
c01016d8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01016dc:	74 13                	je     c01016f1 <readline+0x1f>
        cprintf("%s", prompt);
c01016de:	8b 45 08             	mov    0x8(%ebp),%eax
c01016e1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01016e5:	c7 04 24 40 ef 10 c0 	movl   $0xc010ef40,(%esp)
c01016ec:	e8 ea 00 00 00       	call   c01017db <cprintf>
    }
    int i = 0, c;
c01016f1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        c = getchar();
c01016f8:	e8 66 01 00 00       	call   c0101863 <getchar>
c01016fd:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (c < 0) {
c0101700:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0101704:	79 07                	jns    c010170d <readline+0x3b>
            return NULL;
c0101706:	b8 00 00 00 00       	mov    $0x0,%eax
c010170b:	eb 79                	jmp    c0101786 <readline+0xb4>
        }
        else if (c >= ' ' && i < BUFSIZE - 1) {
c010170d:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c0101711:	7e 28                	jle    c010173b <readline+0x69>
c0101713:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
c010171a:	7f 1f                	jg     c010173b <readline+0x69>
            cputchar(c);
c010171c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010171f:	89 04 24             	mov    %eax,(%esp)
c0101722:	e8 da 00 00 00       	call   c0101801 <cputchar>
            buf[i ++] = c;
c0101727:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010172a:	8d 50 01             	lea    0x1(%eax),%edx
c010172d:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0101730:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0101733:	88 90 20 54 1c c0    	mov    %dl,-0x3fe3abe0(%eax)
c0101739:	eb 46                	jmp    c0101781 <readline+0xaf>
        }
        else if (c == '\b' && i > 0) {
c010173b:	83 7d f0 08          	cmpl   $0x8,-0x10(%ebp)
c010173f:	75 17                	jne    c0101758 <readline+0x86>
c0101741:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101745:	7e 11                	jle    c0101758 <readline+0x86>
            cputchar(c);
c0101747:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010174a:	89 04 24             	mov    %eax,(%esp)
c010174d:	e8 af 00 00 00       	call   c0101801 <cputchar>
            i --;
c0101752:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0101756:	eb 29                	jmp    c0101781 <readline+0xaf>
        }
        else if (c == '\n' || c == '\r') {
c0101758:	83 7d f0 0a          	cmpl   $0xa,-0x10(%ebp)
c010175c:	74 06                	je     c0101764 <readline+0x92>
c010175e:	83 7d f0 0d          	cmpl   $0xd,-0x10(%ebp)
c0101762:	75 1d                	jne    c0101781 <readline+0xaf>
            cputchar(c);
c0101764:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101767:	89 04 24             	mov    %eax,(%esp)
c010176a:	e8 92 00 00 00       	call   c0101801 <cputchar>
            buf[i] = '\0';
c010176f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101772:	05 20 54 1c c0       	add    $0xc01c5420,%eax
c0101777:	c6 00 00             	movb   $0x0,(%eax)
            return buf;
c010177a:	b8 20 54 1c c0       	mov    $0xc01c5420,%eax
c010177f:	eb 05                	jmp    c0101786 <readline+0xb4>
        }
    }
c0101781:	e9 72 ff ff ff       	jmp    c01016f8 <readline+0x26>
}
c0101786:	c9                   	leave  
c0101787:	c3                   	ret    

c0101788 <cputch>:
/* *
 * cputch - writes a single character @c to stdout, and it will
 * increace the value of counter pointed by @cnt.
 * */
static void
cputch(int c, int *cnt) {
c0101788:	55                   	push   %ebp
c0101789:	89 e5                	mov    %esp,%ebp
c010178b:	83 ec 18             	sub    $0x18,%esp
    cons_putc(c);
c010178e:	8b 45 08             	mov    0x8(%ebp),%eax
c0101791:	89 04 24             	mov    %eax,(%esp)
c0101794:	e8 f6 13 00 00       	call   c0102b8f <cons_putc>
    (*cnt) ++;
c0101799:	8b 45 0c             	mov    0xc(%ebp),%eax
c010179c:	8b 00                	mov    (%eax),%eax
c010179e:	8d 50 01             	lea    0x1(%eax),%edx
c01017a1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01017a4:	89 10                	mov    %edx,(%eax)
}
c01017a6:	c9                   	leave  
c01017a7:	c3                   	ret    

c01017a8 <vcprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want cprintf() instead.
 * */
int
vcprintf(const char *fmt, va_list ap) {
c01017a8:	55                   	push   %ebp
c01017a9:	89 e5                	mov    %esp,%ebp
c01017ab:	83 ec 28             	sub    $0x28,%esp
    int cnt = 0;
c01017ae:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    vprintfmt((void*)cputch, &cnt, fmt, ap);
c01017b5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01017b8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01017bc:	8b 45 08             	mov    0x8(%ebp),%eax
c01017bf:	89 44 24 08          	mov    %eax,0x8(%esp)
c01017c3:	8d 45 f4             	lea    -0xc(%ebp),%eax
c01017c6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01017ca:	c7 04 24 88 17 10 c0 	movl   $0xc0101788,(%esp)
c01017d1:	e8 17 ca 00 00       	call   c010e1ed <vprintfmt>
    return cnt;
c01017d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01017d9:	c9                   	leave  
c01017da:	c3                   	ret    

c01017db <cprintf>:
 *
 * The return value is the number of characters which would be
 * written to stdout.
 * */
int
cprintf(const char *fmt, ...) {
c01017db:	55                   	push   %ebp
c01017dc:	89 e5                	mov    %esp,%ebp
c01017de:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c01017e1:	8d 45 0c             	lea    0xc(%ebp),%eax
c01017e4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vcprintf(fmt, ap);
c01017e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01017ea:	89 44 24 04          	mov    %eax,0x4(%esp)
c01017ee:	8b 45 08             	mov    0x8(%ebp),%eax
c01017f1:	89 04 24             	mov    %eax,(%esp)
c01017f4:	e8 af ff ff ff       	call   c01017a8 <vcprintf>
c01017f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c01017fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01017ff:	c9                   	leave  
c0101800:	c3                   	ret    

c0101801 <cputchar>:

/* cputchar - writes a single character to stdout */
void
cputchar(int c) {
c0101801:	55                   	push   %ebp
c0101802:	89 e5                	mov    %esp,%ebp
c0101804:	83 ec 18             	sub    $0x18,%esp
    cons_putc(c);
c0101807:	8b 45 08             	mov    0x8(%ebp),%eax
c010180a:	89 04 24             	mov    %eax,(%esp)
c010180d:	e8 7d 13 00 00       	call   c0102b8f <cons_putc>
}
c0101812:	c9                   	leave  
c0101813:	c3                   	ret    

c0101814 <cputs>:
/* *
 * cputs- writes the string pointed by @str to stdout and
 * appends a newline character.
 * */
int
cputs(const char *str) {
c0101814:	55                   	push   %ebp
c0101815:	89 e5                	mov    %esp,%ebp
c0101817:	83 ec 28             	sub    $0x28,%esp
    int cnt = 0;
c010181a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    char c;
    while ((c = *str ++) != '\0') {
c0101821:	eb 13                	jmp    c0101836 <cputs+0x22>
        cputch(c, &cnt);
c0101823:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
c0101827:	8d 55 f0             	lea    -0x10(%ebp),%edx
c010182a:	89 54 24 04          	mov    %edx,0x4(%esp)
c010182e:	89 04 24             	mov    %eax,(%esp)
c0101831:	e8 52 ff ff ff       	call   c0101788 <cputch>
 * */
int
cputs(const char *str) {
    int cnt = 0;
    char c;
    while ((c = *str ++) != '\0') {
c0101836:	8b 45 08             	mov    0x8(%ebp),%eax
c0101839:	8d 50 01             	lea    0x1(%eax),%edx
c010183c:	89 55 08             	mov    %edx,0x8(%ebp)
c010183f:	0f b6 00             	movzbl (%eax),%eax
c0101842:	88 45 f7             	mov    %al,-0x9(%ebp)
c0101845:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
c0101849:	75 d8                	jne    c0101823 <cputs+0xf>
        cputch(c, &cnt);
    }
    cputch('\n', &cnt);
c010184b:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010184e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101852:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c0101859:	e8 2a ff ff ff       	call   c0101788 <cputch>
    return cnt;
c010185e:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0101861:	c9                   	leave  
c0101862:	c3                   	ret    

c0101863 <getchar>:

/* getchar - reads a single non-zero character from stdin */
int
getchar(void) {
c0101863:	55                   	push   %ebp
c0101864:	89 e5                	mov    %esp,%ebp
c0101866:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = cons_getc()) == 0)
c0101869:	e8 5d 13 00 00       	call   c0102bcb <cons_getc>
c010186e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101871:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101875:	74 f2                	je     c0101869 <getchar+0x6>
        /* do nothing */;
    return c;
c0101877:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010187a:	c9                   	leave  
c010187b:	c3                   	ret    

c010187c <stab_binsearch>:
 *      stab_binsearch(stabs, &left, &right, N_SO, 0xf0100184);
 * will exit setting left = 118, right = 554.
 * */
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
c010187c:	55                   	push   %ebp
c010187d:	89 e5                	mov    %esp,%ebp
c010187f:	83 ec 20             	sub    $0x20,%esp
    int l = *region_left, r = *region_right, any_matches = 0;
c0101882:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101885:	8b 00                	mov    (%eax),%eax
c0101887:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010188a:	8b 45 10             	mov    0x10(%ebp),%eax
c010188d:	8b 00                	mov    (%eax),%eax
c010188f:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0101892:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    while (l <= r) {
c0101899:	e9 d2 00 00 00       	jmp    c0101970 <stab_binsearch+0xf4>
        int true_m = (l + r) / 2, m = true_m;
c010189e:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01018a1:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01018a4:	01 d0                	add    %edx,%eax
c01018a6:	89 c2                	mov    %eax,%edx
c01018a8:	c1 ea 1f             	shr    $0x1f,%edx
c01018ab:	01 d0                	add    %edx,%eax
c01018ad:	d1 f8                	sar    %eax
c01018af:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01018b2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01018b5:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c01018b8:	eb 04                	jmp    c01018be <stab_binsearch+0x42>
            m --;
c01018ba:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)

    while (l <= r) {
        int true_m = (l + r) / 2, m = true_m;

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c01018be:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01018c1:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c01018c4:	7c 1f                	jl     c01018e5 <stab_binsearch+0x69>
c01018c6:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01018c9:	89 d0                	mov    %edx,%eax
c01018cb:	01 c0                	add    %eax,%eax
c01018cd:	01 d0                	add    %edx,%eax
c01018cf:	c1 e0 02             	shl    $0x2,%eax
c01018d2:	89 c2                	mov    %eax,%edx
c01018d4:	8b 45 08             	mov    0x8(%ebp),%eax
c01018d7:	01 d0                	add    %edx,%eax
c01018d9:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c01018dd:	0f b6 c0             	movzbl %al,%eax
c01018e0:	3b 45 14             	cmp    0x14(%ebp),%eax
c01018e3:	75 d5                	jne    c01018ba <stab_binsearch+0x3e>
            m --;
        }
        if (m < l) {    // no match in [l, m]
c01018e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01018e8:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c01018eb:	7d 0b                	jge    c01018f8 <stab_binsearch+0x7c>
            l = true_m + 1;
c01018ed:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01018f0:	83 c0 01             	add    $0x1,%eax
c01018f3:	89 45 fc             	mov    %eax,-0x4(%ebp)
            continue;
c01018f6:	eb 78                	jmp    c0101970 <stab_binsearch+0xf4>
        }

        // actual binary search
        any_matches = 1;
c01018f8:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        if (stabs[m].n_value < addr) {
c01018ff:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0101902:	89 d0                	mov    %edx,%eax
c0101904:	01 c0                	add    %eax,%eax
c0101906:	01 d0                	add    %edx,%eax
c0101908:	c1 e0 02             	shl    $0x2,%eax
c010190b:	89 c2                	mov    %eax,%edx
c010190d:	8b 45 08             	mov    0x8(%ebp),%eax
c0101910:	01 d0                	add    %edx,%eax
c0101912:	8b 40 08             	mov    0x8(%eax),%eax
c0101915:	3b 45 18             	cmp    0x18(%ebp),%eax
c0101918:	73 13                	jae    c010192d <stab_binsearch+0xb1>
            *region_left = m;
c010191a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010191d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0101920:	89 10                	mov    %edx,(%eax)
            l = true_m + 1;
c0101922:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101925:	83 c0 01             	add    $0x1,%eax
c0101928:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010192b:	eb 43                	jmp    c0101970 <stab_binsearch+0xf4>
        } else if (stabs[m].n_value > addr) {
c010192d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0101930:	89 d0                	mov    %edx,%eax
c0101932:	01 c0                	add    %eax,%eax
c0101934:	01 d0                	add    %edx,%eax
c0101936:	c1 e0 02             	shl    $0x2,%eax
c0101939:	89 c2                	mov    %eax,%edx
c010193b:	8b 45 08             	mov    0x8(%ebp),%eax
c010193e:	01 d0                	add    %edx,%eax
c0101940:	8b 40 08             	mov    0x8(%eax),%eax
c0101943:	3b 45 18             	cmp    0x18(%ebp),%eax
c0101946:	76 16                	jbe    c010195e <stab_binsearch+0xe2>
            *region_right = m - 1;
c0101948:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010194b:	8d 50 ff             	lea    -0x1(%eax),%edx
c010194e:	8b 45 10             	mov    0x10(%ebp),%eax
c0101951:	89 10                	mov    %edx,(%eax)
            r = m - 1;
c0101953:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101956:	83 e8 01             	sub    $0x1,%eax
c0101959:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010195c:	eb 12                	jmp    c0101970 <stab_binsearch+0xf4>
        } else {
            // exact match for 'addr', but continue loop to find
            // *region_right
            *region_left = m;
c010195e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101961:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0101964:	89 10                	mov    %edx,(%eax)
            l = m;
c0101966:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101969:	89 45 fc             	mov    %eax,-0x4(%ebp)
            addr ++;
c010196c:	83 45 18 01          	addl   $0x1,0x18(%ebp)
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
    int l = *region_left, r = *region_right, any_matches = 0;

    while (l <= r) {
c0101970:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101973:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c0101976:	0f 8e 22 ff ff ff    	jle    c010189e <stab_binsearch+0x22>
            l = m;
            addr ++;
        }
    }

    if (!any_matches) {
c010197c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101980:	75 0f                	jne    c0101991 <stab_binsearch+0x115>
        *region_right = *region_left - 1;
c0101982:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101985:	8b 00                	mov    (%eax),%eax
c0101987:	8d 50 ff             	lea    -0x1(%eax),%edx
c010198a:	8b 45 10             	mov    0x10(%ebp),%eax
c010198d:	89 10                	mov    %edx,(%eax)
c010198f:	eb 3f                	jmp    c01019d0 <stab_binsearch+0x154>
    }
    else {
        // find rightmost region containing 'addr'
        l = *region_right;
c0101991:	8b 45 10             	mov    0x10(%ebp),%eax
c0101994:	8b 00                	mov    (%eax),%eax
c0101996:	89 45 fc             	mov    %eax,-0x4(%ebp)
        for (; l > *region_left && stabs[l].n_type != type; l --)
c0101999:	eb 04                	jmp    c010199f <stab_binsearch+0x123>
c010199b:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
c010199f:	8b 45 0c             	mov    0xc(%ebp),%eax
c01019a2:	8b 00                	mov    (%eax),%eax
c01019a4:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c01019a7:	7d 1f                	jge    c01019c8 <stab_binsearch+0x14c>
c01019a9:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01019ac:	89 d0                	mov    %edx,%eax
c01019ae:	01 c0                	add    %eax,%eax
c01019b0:	01 d0                	add    %edx,%eax
c01019b2:	c1 e0 02             	shl    $0x2,%eax
c01019b5:	89 c2                	mov    %eax,%edx
c01019b7:	8b 45 08             	mov    0x8(%ebp),%eax
c01019ba:	01 d0                	add    %edx,%eax
c01019bc:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c01019c0:	0f b6 c0             	movzbl %al,%eax
c01019c3:	3b 45 14             	cmp    0x14(%ebp),%eax
c01019c6:	75 d3                	jne    c010199b <stab_binsearch+0x11f>
            /* do nothing */;
        *region_left = l;
c01019c8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01019cb:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01019ce:	89 10                	mov    %edx,(%eax)
    }
}
c01019d0:	c9                   	leave  
c01019d1:	c3                   	ret    

c01019d2 <debuginfo_eip>:
 * the specified instruction address, @addr.  Returns 0 if information
 * was found, and negative if not.  But even if it returns negative it
 * has stored some information into '*info'.
 * */
int
debuginfo_eip(uintptr_t addr, struct eipdebuginfo *info) {
c01019d2:	55                   	push   %ebp
c01019d3:	89 e5                	mov    %esp,%ebp
c01019d5:	83 ec 58             	sub    $0x58,%esp
    const struct stab *stabs, *stab_end;
    const char *stabstr, *stabstr_end;

    info->eip_file = "<unknown>";
c01019d8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01019db:	c7 00 44 ef 10 c0    	movl   $0xc010ef44,(%eax)
    info->eip_line = 0;
c01019e1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01019e4:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    info->eip_fn_name = "<unknown>";
c01019eb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01019ee:	c7 40 08 44 ef 10 c0 	movl   $0xc010ef44,0x8(%eax)
    info->eip_fn_namelen = 9;
c01019f5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01019f8:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
    info->eip_fn_addr = addr;
c01019ff:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101a02:	8b 55 08             	mov    0x8(%ebp),%edx
c0101a05:	89 50 10             	mov    %edx,0x10(%eax)
    info->eip_fn_narg = 0;
c0101a08:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101a0b:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

    // find the relevant set of stabs
    if (addr >= KERNBASE) {
c0101a12:	81 7d 08 ff ff ff bf 	cmpl   $0xbfffffff,0x8(%ebp)
c0101a19:	76 21                	jbe    c0101a3c <debuginfo_eip+0x6a>
        stabs = __STAB_BEGIN__;
c0101a1b:	c7 45 f4 60 1c 11 c0 	movl   $0xc0111c60,-0xc(%ebp)
        stab_end = __STAB_END__;
c0101a22:	c7 45 f0 74 a9 12 c0 	movl   $0xc012a974,-0x10(%ebp)
        stabstr = __STABSTR_BEGIN__;
c0101a29:	c7 45 ec 75 a9 12 c0 	movl   $0xc012a975,-0x14(%ebp)
        stabstr_end = __STABSTR_END__;
c0101a30:	c7 45 e8 4d 1d 13 c0 	movl   $0xc0131d4d,-0x18(%ebp)
c0101a37:	e9 ea 00 00 00       	jmp    c0101b26 <debuginfo_eip+0x154>
    }
    else {
        // user-program linker script, tools/user.ld puts the information about the
        // program's stabs (included __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__,
        // and __STABSTR_END__) in a structure located at virtual address USTAB.
        const struct userstabdata *usd = (struct userstabdata *)USTAB;
c0101a3c:	c7 45 e4 00 00 20 00 	movl   $0x200000,-0x1c(%ebp)

        // make sure that debugger (current process) can access this memory
        struct mm_struct *mm;
        if (current == NULL || (mm = current->mm) == NULL) {
c0101a43:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c0101a48:	85 c0                	test   %eax,%eax
c0101a4a:	74 11                	je     c0101a5d <debuginfo_eip+0x8b>
c0101a4c:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c0101a51:	8b 40 18             	mov    0x18(%eax),%eax
c0101a54:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0101a57:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0101a5b:	75 0a                	jne    c0101a67 <debuginfo_eip+0x95>
            return -1;
c0101a5d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101a62:	e9 9e 03 00 00       	jmp    c0101e05 <debuginfo_eip+0x433>
        }
        if (!user_mem_check(mm, (uintptr_t)usd, sizeof(struct userstabdata), 0)) {
c0101a67:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101a6a:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0101a71:	00 
c0101a72:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c0101a79:	00 
c0101a7a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101a7e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0101a81:	89 04 24             	mov    %eax,(%esp)
c0101a84:	e8 88 89 00 00       	call   c010a411 <user_mem_check>
c0101a89:	85 c0                	test   %eax,%eax
c0101a8b:	75 0a                	jne    c0101a97 <debuginfo_eip+0xc5>
            return -1;
c0101a8d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101a92:	e9 6e 03 00 00       	jmp    c0101e05 <debuginfo_eip+0x433>
        }

        stabs = usd->stabs;
c0101a97:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101a9a:	8b 00                	mov    (%eax),%eax
c0101a9c:	89 45 f4             	mov    %eax,-0xc(%ebp)
        stab_end = usd->stab_end;
c0101a9f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101aa2:	8b 40 04             	mov    0x4(%eax),%eax
c0101aa5:	89 45 f0             	mov    %eax,-0x10(%ebp)
        stabstr = usd->stabstr;
c0101aa8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101aab:	8b 40 08             	mov    0x8(%eax),%eax
c0101aae:	89 45 ec             	mov    %eax,-0x14(%ebp)
        stabstr_end = usd->stabstr_end;
c0101ab1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101ab4:	8b 40 0c             	mov    0xc(%eax),%eax
c0101ab7:	89 45 e8             	mov    %eax,-0x18(%ebp)

        // make sure the STABS and string table memory is valid
        if (!user_mem_check(mm, (uintptr_t)stabs, (uintptr_t)stab_end - (uintptr_t)stabs, 0)) {
c0101aba:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0101abd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101ac0:	29 c2                	sub    %eax,%edx
c0101ac2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101ac5:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0101acc:	00 
c0101acd:	89 54 24 08          	mov    %edx,0x8(%esp)
c0101ad1:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101ad5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0101ad8:	89 04 24             	mov    %eax,(%esp)
c0101adb:	e8 31 89 00 00       	call   c010a411 <user_mem_check>
c0101ae0:	85 c0                	test   %eax,%eax
c0101ae2:	75 0a                	jne    c0101aee <debuginfo_eip+0x11c>
            return -1;
c0101ae4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101ae9:	e9 17 03 00 00       	jmp    c0101e05 <debuginfo_eip+0x433>
        }
        if (!user_mem_check(mm, (uintptr_t)stabstr, stabstr_end - stabstr, 0)) {
c0101aee:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0101af1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101af4:	29 c2                	sub    %eax,%edx
c0101af6:	89 d0                	mov    %edx,%eax
c0101af8:	89 c2                	mov    %eax,%edx
c0101afa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101afd:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0101b04:	00 
c0101b05:	89 54 24 08          	mov    %edx,0x8(%esp)
c0101b09:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101b0d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0101b10:	89 04 24             	mov    %eax,(%esp)
c0101b13:	e8 f9 88 00 00       	call   c010a411 <user_mem_check>
c0101b18:	85 c0                	test   %eax,%eax
c0101b1a:	75 0a                	jne    c0101b26 <debuginfo_eip+0x154>
            return -1;
c0101b1c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101b21:	e9 df 02 00 00       	jmp    c0101e05 <debuginfo_eip+0x433>
        }
    }

    // String table validity checks
    if (stabstr_end <= stabstr || stabstr_end[-1] != 0) {
c0101b26:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0101b29:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0101b2c:	76 0d                	jbe    c0101b3b <debuginfo_eip+0x169>
c0101b2e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0101b31:	83 e8 01             	sub    $0x1,%eax
c0101b34:	0f b6 00             	movzbl (%eax),%eax
c0101b37:	84 c0                	test   %al,%al
c0101b39:	74 0a                	je     c0101b45 <debuginfo_eip+0x173>
        return -1;
c0101b3b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101b40:	e9 c0 02 00 00       	jmp    c0101e05 <debuginfo_eip+0x433>
    // 'eip'.  First, we find the basic source file containing 'eip'.
    // Then, we look in that source file for the function.  Then we look
    // for the line number.

    // Search the entire set of stabs for the source file (type N_SO).
    int lfile = 0, rfile = (stab_end - stabs) - 1;
c0101b45:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0101b4c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0101b4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101b52:	29 c2                	sub    %eax,%edx
c0101b54:	89 d0                	mov    %edx,%eax
c0101b56:	c1 f8 02             	sar    $0x2,%eax
c0101b59:	69 c0 ab aa aa aa    	imul   $0xaaaaaaab,%eax,%eax
c0101b5f:	83 e8 01             	sub    $0x1,%eax
c0101b62:	89 45 d8             	mov    %eax,-0x28(%ebp)
    stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
c0101b65:	8b 45 08             	mov    0x8(%ebp),%eax
c0101b68:	89 44 24 10          	mov    %eax,0x10(%esp)
c0101b6c:	c7 44 24 0c 64 00 00 	movl   $0x64,0xc(%esp)
c0101b73:	00 
c0101b74:	8d 45 d8             	lea    -0x28(%ebp),%eax
c0101b77:	89 44 24 08          	mov    %eax,0x8(%esp)
c0101b7b:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0101b7e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101b82:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101b85:	89 04 24             	mov    %eax,(%esp)
c0101b88:	e8 ef fc ff ff       	call   c010187c <stab_binsearch>
    if (lfile == 0)
c0101b8d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101b90:	85 c0                	test   %eax,%eax
c0101b92:	75 0a                	jne    c0101b9e <debuginfo_eip+0x1cc>
        return -1;
c0101b94:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101b99:	e9 67 02 00 00       	jmp    c0101e05 <debuginfo_eip+0x433>

    // Search within that file's stabs for the function definition
    // (N_FUN).
    int lfun = lfile, rfun = rfile;
c0101b9e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101ba1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0101ba4:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0101ba7:	89 45 d0             	mov    %eax,-0x30(%ebp)
    int lline, rline;
    stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
c0101baa:	8b 45 08             	mov    0x8(%ebp),%eax
c0101bad:	89 44 24 10          	mov    %eax,0x10(%esp)
c0101bb1:	c7 44 24 0c 24 00 00 	movl   $0x24,0xc(%esp)
c0101bb8:	00 
c0101bb9:	8d 45 d0             	lea    -0x30(%ebp),%eax
c0101bbc:	89 44 24 08          	mov    %eax,0x8(%esp)
c0101bc0:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c0101bc3:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101bc7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101bca:	89 04 24             	mov    %eax,(%esp)
c0101bcd:	e8 aa fc ff ff       	call   c010187c <stab_binsearch>

    if (lfun <= rfun) {
c0101bd2:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0101bd5:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0101bd8:	39 c2                	cmp    %eax,%edx
c0101bda:	7f 7c                	jg     c0101c58 <debuginfo_eip+0x286>
        // stabs[lfun] points to the function name
        // in the string table, but check bounds just in case.
        if (stabs[lfun].n_strx < stabstr_end - stabstr) {
c0101bdc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0101bdf:	89 c2                	mov    %eax,%edx
c0101be1:	89 d0                	mov    %edx,%eax
c0101be3:	01 c0                	add    %eax,%eax
c0101be5:	01 d0                	add    %edx,%eax
c0101be7:	c1 e0 02             	shl    $0x2,%eax
c0101bea:	89 c2                	mov    %eax,%edx
c0101bec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101bef:	01 d0                	add    %edx,%eax
c0101bf1:	8b 10                	mov    (%eax),%edx
c0101bf3:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0101bf6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101bf9:	29 c1                	sub    %eax,%ecx
c0101bfb:	89 c8                	mov    %ecx,%eax
c0101bfd:	39 c2                	cmp    %eax,%edx
c0101bff:	73 22                	jae    c0101c23 <debuginfo_eip+0x251>
            info->eip_fn_name = stabstr + stabs[lfun].n_strx;
c0101c01:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0101c04:	89 c2                	mov    %eax,%edx
c0101c06:	89 d0                	mov    %edx,%eax
c0101c08:	01 c0                	add    %eax,%eax
c0101c0a:	01 d0                	add    %edx,%eax
c0101c0c:	c1 e0 02             	shl    $0x2,%eax
c0101c0f:	89 c2                	mov    %eax,%edx
c0101c11:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101c14:	01 d0                	add    %edx,%eax
c0101c16:	8b 10                	mov    (%eax),%edx
c0101c18:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101c1b:	01 c2                	add    %eax,%edx
c0101c1d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101c20:	89 50 08             	mov    %edx,0x8(%eax)
        }
        info->eip_fn_addr = stabs[lfun].n_value;
c0101c23:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0101c26:	89 c2                	mov    %eax,%edx
c0101c28:	89 d0                	mov    %edx,%eax
c0101c2a:	01 c0                	add    %eax,%eax
c0101c2c:	01 d0                	add    %edx,%eax
c0101c2e:	c1 e0 02             	shl    $0x2,%eax
c0101c31:	89 c2                	mov    %eax,%edx
c0101c33:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101c36:	01 d0                	add    %edx,%eax
c0101c38:	8b 50 08             	mov    0x8(%eax),%edx
c0101c3b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101c3e:	89 50 10             	mov    %edx,0x10(%eax)
        addr -= info->eip_fn_addr;
c0101c41:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101c44:	8b 40 10             	mov    0x10(%eax),%eax
c0101c47:	29 45 08             	sub    %eax,0x8(%ebp)
        // Search within the function definition for the line number.
        lline = lfun;
c0101c4a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0101c4d:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfun;
c0101c50:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0101c53:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0101c56:	eb 15                	jmp    c0101c6d <debuginfo_eip+0x29b>
    } else {
        // Couldn't find function stab!  Maybe we're in an assembly
        // file.  Search the whole file for the line number.
        info->eip_fn_addr = addr;
c0101c58:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101c5b:	8b 55 08             	mov    0x8(%ebp),%edx
c0101c5e:	89 50 10             	mov    %edx,0x10(%eax)
        lline = lfile;
c0101c61:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101c64:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfile;
c0101c67:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0101c6a:	89 45 c8             	mov    %eax,-0x38(%ebp)
    }
    info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
c0101c6d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101c70:	8b 40 08             	mov    0x8(%eax),%eax
c0101c73:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
c0101c7a:	00 
c0101c7b:	89 04 24             	mov    %eax,(%esp)
c0101c7e:	e8 9d cc 00 00       	call   c010e920 <strfind>
c0101c83:	89 c2                	mov    %eax,%edx
c0101c85:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101c88:	8b 40 08             	mov    0x8(%eax),%eax
c0101c8b:	29 c2                	sub    %eax,%edx
c0101c8d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101c90:	89 50 0c             	mov    %edx,0xc(%eax)

    // Search within [lline, rline] for the line number stab.
    // If found, set info->eip_line to the right line number.
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
c0101c93:	8b 45 08             	mov    0x8(%ebp),%eax
c0101c96:	89 44 24 10          	mov    %eax,0x10(%esp)
c0101c9a:	c7 44 24 0c 44 00 00 	movl   $0x44,0xc(%esp)
c0101ca1:	00 
c0101ca2:	8d 45 c8             	lea    -0x38(%ebp),%eax
c0101ca5:	89 44 24 08          	mov    %eax,0x8(%esp)
c0101ca9:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0101cac:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101cb0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101cb3:	89 04 24             	mov    %eax,(%esp)
c0101cb6:	e8 c1 fb ff ff       	call   c010187c <stab_binsearch>
    if (lline <= rline) {
c0101cbb:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0101cbe:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0101cc1:	39 c2                	cmp    %eax,%edx
c0101cc3:	7f 24                	jg     c0101ce9 <debuginfo_eip+0x317>
        info->eip_line = stabs[rline].n_desc;
c0101cc5:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0101cc8:	89 c2                	mov    %eax,%edx
c0101cca:	89 d0                	mov    %edx,%eax
c0101ccc:	01 c0                	add    %eax,%eax
c0101cce:	01 d0                	add    %edx,%eax
c0101cd0:	c1 e0 02             	shl    $0x2,%eax
c0101cd3:	89 c2                	mov    %eax,%edx
c0101cd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101cd8:	01 d0                	add    %edx,%eax
c0101cda:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c0101cde:	0f b7 d0             	movzwl %ax,%edx
c0101ce1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101ce4:	89 50 04             	mov    %edx,0x4(%eax)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c0101ce7:	eb 13                	jmp    c0101cfc <debuginfo_eip+0x32a>
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
    if (lline <= rline) {
        info->eip_line = stabs[rline].n_desc;
    } else {
        return -1;
c0101ce9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101cee:	e9 12 01 00 00       	jmp    c0101e05 <debuginfo_eip+0x433>
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
           && stabs[lline].n_type != N_SOL
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
        lline --;
c0101cf3:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101cf6:	83 e8 01             	sub    $0x1,%eax
c0101cf9:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c0101cfc:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0101cff:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101d02:	39 c2                	cmp    %eax,%edx
c0101d04:	7c 56                	jl     c0101d5c <debuginfo_eip+0x38a>
           && stabs[lline].n_type != N_SOL
c0101d06:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101d09:	89 c2                	mov    %eax,%edx
c0101d0b:	89 d0                	mov    %edx,%eax
c0101d0d:	01 c0                	add    %eax,%eax
c0101d0f:	01 d0                	add    %edx,%eax
c0101d11:	c1 e0 02             	shl    $0x2,%eax
c0101d14:	89 c2                	mov    %eax,%edx
c0101d16:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101d19:	01 d0                	add    %edx,%eax
c0101d1b:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0101d1f:	3c 84                	cmp    $0x84,%al
c0101d21:	74 39                	je     c0101d5c <debuginfo_eip+0x38a>
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
c0101d23:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101d26:	89 c2                	mov    %eax,%edx
c0101d28:	89 d0                	mov    %edx,%eax
c0101d2a:	01 c0                	add    %eax,%eax
c0101d2c:	01 d0                	add    %edx,%eax
c0101d2e:	c1 e0 02             	shl    $0x2,%eax
c0101d31:	89 c2                	mov    %eax,%edx
c0101d33:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101d36:	01 d0                	add    %edx,%eax
c0101d38:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0101d3c:	3c 64                	cmp    $0x64,%al
c0101d3e:	75 b3                	jne    c0101cf3 <debuginfo_eip+0x321>
c0101d40:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101d43:	89 c2                	mov    %eax,%edx
c0101d45:	89 d0                	mov    %edx,%eax
c0101d47:	01 c0                	add    %eax,%eax
c0101d49:	01 d0                	add    %edx,%eax
c0101d4b:	c1 e0 02             	shl    $0x2,%eax
c0101d4e:	89 c2                	mov    %eax,%edx
c0101d50:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101d53:	01 d0                	add    %edx,%eax
c0101d55:	8b 40 08             	mov    0x8(%eax),%eax
c0101d58:	85 c0                	test   %eax,%eax
c0101d5a:	74 97                	je     c0101cf3 <debuginfo_eip+0x321>
        lline --;
    }
    if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr) {
c0101d5c:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0101d5f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101d62:	39 c2                	cmp    %eax,%edx
c0101d64:	7c 46                	jl     c0101dac <debuginfo_eip+0x3da>
c0101d66:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101d69:	89 c2                	mov    %eax,%edx
c0101d6b:	89 d0                	mov    %edx,%eax
c0101d6d:	01 c0                	add    %eax,%eax
c0101d6f:	01 d0                	add    %edx,%eax
c0101d71:	c1 e0 02             	shl    $0x2,%eax
c0101d74:	89 c2                	mov    %eax,%edx
c0101d76:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101d79:	01 d0                	add    %edx,%eax
c0101d7b:	8b 10                	mov    (%eax),%edx
c0101d7d:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0101d80:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101d83:	29 c1                	sub    %eax,%ecx
c0101d85:	89 c8                	mov    %ecx,%eax
c0101d87:	39 c2                	cmp    %eax,%edx
c0101d89:	73 21                	jae    c0101dac <debuginfo_eip+0x3da>
        info->eip_file = stabstr + stabs[lline].n_strx;
c0101d8b:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101d8e:	89 c2                	mov    %eax,%edx
c0101d90:	89 d0                	mov    %edx,%eax
c0101d92:	01 c0                	add    %eax,%eax
c0101d94:	01 d0                	add    %edx,%eax
c0101d96:	c1 e0 02             	shl    $0x2,%eax
c0101d99:	89 c2                	mov    %eax,%edx
c0101d9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101d9e:	01 d0                	add    %edx,%eax
c0101da0:	8b 10                	mov    (%eax),%edx
c0101da2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101da5:	01 c2                	add    %eax,%edx
c0101da7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101daa:	89 10                	mov    %edx,(%eax)
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
c0101dac:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0101daf:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0101db2:	39 c2                	cmp    %eax,%edx
c0101db4:	7d 4a                	jge    c0101e00 <debuginfo_eip+0x42e>
        for (lline = lfun + 1;
c0101db6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0101db9:	83 c0 01             	add    $0x1,%eax
c0101dbc:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0101dbf:	eb 18                	jmp    c0101dd9 <debuginfo_eip+0x407>
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
            info->eip_fn_narg ++;
c0101dc1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101dc4:	8b 40 14             	mov    0x14(%eax),%eax
c0101dc7:	8d 50 01             	lea    0x1(%eax),%edx
c0101dca:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101dcd:	89 50 14             	mov    %edx,0x14(%eax)
    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
c0101dd0:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101dd3:	83 c0 01             	add    $0x1,%eax
c0101dd6:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0101dd9:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0101ddc:	8b 45 d0             	mov    -0x30(%ebp),%eax
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
c0101ddf:	39 c2                	cmp    %eax,%edx
c0101de1:	7d 1d                	jge    c0101e00 <debuginfo_eip+0x42e>
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0101de3:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101de6:	89 c2                	mov    %eax,%edx
c0101de8:	89 d0                	mov    %edx,%eax
c0101dea:	01 c0                	add    %eax,%eax
c0101dec:	01 d0                	add    %edx,%eax
c0101dee:	c1 e0 02             	shl    $0x2,%eax
c0101df1:	89 c2                	mov    %eax,%edx
c0101df3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101df6:	01 d0                	add    %edx,%eax
c0101df8:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0101dfc:	3c a0                	cmp    $0xa0,%al
c0101dfe:	74 c1                	je     c0101dc1 <debuginfo_eip+0x3ef>
             lline ++) {
            info->eip_fn_narg ++;
        }
    }
    return 0;
c0101e00:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101e05:	c9                   	leave  
c0101e06:	c3                   	ret    

c0101e07 <print_kerninfo>:
 * print_kerninfo - print the information about kernel, including the location
 * of kernel entry, the start addresses of data and text segements, the start
 * address of free memory and how many memory that kernel has used.
 * */
void
print_kerninfo(void) {
c0101e07:	55                   	push   %ebp
c0101e08:	89 e5                	mov    %esp,%ebp
c0101e0a:	83 ec 18             	sub    $0x18,%esp
    extern char etext[], edata[], end[], kern_init[];
    cprintf("Special kernel symbols:\n");
c0101e0d:	c7 04 24 4e ef 10 c0 	movl   $0xc010ef4e,(%esp)
c0101e14:	e8 c2 f9 ff ff       	call   c01017db <cprintf>
    cprintf("  entry  0x%08x (phys)\n", kern_init);
c0101e19:	c7 44 24 04 2a 00 10 	movl   $0xc010002a,0x4(%esp)
c0101e20:	c0 
c0101e21:	c7 04 24 67 ef 10 c0 	movl   $0xc010ef67,(%esp)
c0101e28:	e8 ae f9 ff ff       	call   c01017db <cprintf>
    cprintf("  etext  0x%08x (phys)\n", etext);
c0101e2d:	c7 44 24 04 35 ec 10 	movl   $0xc010ec35,0x4(%esp)
c0101e34:	c0 
c0101e35:	c7 04 24 7f ef 10 c0 	movl   $0xc010ef7f,(%esp)
c0101e3c:	e8 9a f9 ff ff       	call   c01017db <cprintf>
    cprintf("  edata  0x%08x (phys)\n", edata);
c0101e41:	c7 44 24 04 f9 53 1c 	movl   $0xc01c53f9,0x4(%esp)
c0101e48:	c0 
c0101e49:	c7 04 24 97 ef 10 c0 	movl   $0xc010ef97,(%esp)
c0101e50:	e8 86 f9 ff ff       	call   c01017db <cprintf>
    cprintf("  end    0x%08x (phys)\n", end);
c0101e55:	c7 44 24 04 c4 86 1c 	movl   $0xc01c86c4,0x4(%esp)
c0101e5c:	c0 
c0101e5d:	c7 04 24 af ef 10 c0 	movl   $0xc010efaf,(%esp)
c0101e64:	e8 72 f9 ff ff       	call   c01017db <cprintf>
    cprintf("Kernel executable memory footprint: %dKB\n", (end - kern_init + 1023)/1024);
c0101e69:	b8 c4 86 1c c0       	mov    $0xc01c86c4,%eax
c0101e6e:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c0101e74:	b8 2a 00 10 c0       	mov    $0xc010002a,%eax
c0101e79:	29 c2                	sub    %eax,%edx
c0101e7b:	89 d0                	mov    %edx,%eax
c0101e7d:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c0101e83:	85 c0                	test   %eax,%eax
c0101e85:	0f 48 c2             	cmovs  %edx,%eax
c0101e88:	c1 f8 0a             	sar    $0xa,%eax
c0101e8b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101e8f:	c7 04 24 c8 ef 10 c0 	movl   $0xc010efc8,(%esp)
c0101e96:	e8 40 f9 ff ff       	call   c01017db <cprintf>
}
c0101e9b:	c9                   	leave  
c0101e9c:	c3                   	ret    

c0101e9d <print_debuginfo>:
/* *
 * print_debuginfo - read and print the stat information for the address @eip,
 * and info.eip_fn_addr should be the first address of the related function.
 * */
void
print_debuginfo(uintptr_t eip) {
c0101e9d:	55                   	push   %ebp
c0101e9e:	89 e5                	mov    %esp,%ebp
c0101ea0:	81 ec 48 01 00 00    	sub    $0x148,%esp
    struct eipdebuginfo info;
    if (debuginfo_eip(eip, &info) != 0) {
c0101ea6:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0101ea9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101ead:	8b 45 08             	mov    0x8(%ebp),%eax
c0101eb0:	89 04 24             	mov    %eax,(%esp)
c0101eb3:	e8 1a fb ff ff       	call   c01019d2 <debuginfo_eip>
c0101eb8:	85 c0                	test   %eax,%eax
c0101eba:	74 15                	je     c0101ed1 <print_debuginfo+0x34>
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
c0101ebc:	8b 45 08             	mov    0x8(%ebp),%eax
c0101ebf:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101ec3:	c7 04 24 f2 ef 10 c0 	movl   $0xc010eff2,(%esp)
c0101eca:	e8 0c f9 ff ff       	call   c01017db <cprintf>
c0101ecf:	eb 6d                	jmp    c0101f3e <print_debuginfo+0xa1>
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0101ed1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0101ed8:	eb 1c                	jmp    c0101ef6 <print_debuginfo+0x59>
            fnname[j] = info.eip_fn_name[j];
c0101eda:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0101edd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101ee0:	01 d0                	add    %edx,%eax
c0101ee2:	0f b6 00             	movzbl (%eax),%eax
c0101ee5:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0101eeb:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101eee:	01 ca                	add    %ecx,%edx
c0101ef0:	88 02                	mov    %al,(%edx)
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0101ef2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101ef6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0101ef9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0101efc:	7f dc                	jg     c0101eda <print_debuginfo+0x3d>
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
c0101efe:	8d 95 dc fe ff ff    	lea    -0x124(%ebp),%edx
c0101f04:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101f07:	01 d0                	add    %edx,%eax
c0101f09:	c6 00 00             	movb   $0x0,(%eax)
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
                fnname, eip - info.eip_fn_addr);
c0101f0c:	8b 45 ec             	mov    -0x14(%ebp),%eax
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
c0101f0f:	8b 55 08             	mov    0x8(%ebp),%edx
c0101f12:	89 d1                	mov    %edx,%ecx
c0101f14:	29 c1                	sub    %eax,%ecx
c0101f16:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0101f19:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101f1c:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0101f20:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0101f26:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0101f2a:	89 54 24 08          	mov    %edx,0x8(%esp)
c0101f2e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101f32:	c7 04 24 0e f0 10 c0 	movl   $0xc010f00e,(%esp)
c0101f39:	e8 9d f8 ff ff       	call   c01017db <cprintf>
                fnname, eip - info.eip_fn_addr);
    }
}
c0101f3e:	c9                   	leave  
c0101f3f:	c3                   	ret    

c0101f40 <read_eip>:

static __noinline uint32_t
read_eip(void) {
c0101f40:	55                   	push   %ebp
c0101f41:	89 e5                	mov    %esp,%ebp
c0101f43:	83 ec 10             	sub    $0x10,%esp
    uint32_t eip;
    asm volatile("movl 4(%%ebp), %0" : "=r" (eip));
c0101f46:	8b 45 04             	mov    0x4(%ebp),%eax
c0101f49:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eip;
c0101f4c:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0101f4f:	c9                   	leave  
c0101f50:	c3                   	ret    

c0101f51 <print_stackframe>:
 *
 * Note that, the length of ebp-chain is limited. In boot/bootasm.S, before jumping
 * to the kernel entry, the value of ebp has been set to zero, that's the boundary.
 * */
void
print_stackframe(void) {
c0101f51:	55                   	push   %ebp
c0101f52:	89 e5                	mov    %esp,%ebp
c0101f54:	83 ec 38             	sub    $0x38,%esp
}

static inline uint32_t
read_ebp(void) {
    uint32_t ebp;
    asm volatile ("movl %%ebp, %0" : "=r" (ebp));
c0101f57:	89 e8                	mov    %ebp,%eax
c0101f59:	89 45 e0             	mov    %eax,-0x20(%ebp)
    return ebp;
c0101f5c:	8b 45 e0             	mov    -0x20(%ebp),%eax
      *    (3.4) call print_debuginfo(eip-1) to print the C calling function name and line number, etc.
      *    (3.5) popup a calling stackframe
      *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
      *                   the calling funciton's ebp = ss:[ebp]
      */
    uint32_t ebp = read_ebp(), eip = read_eip();
c0101f5f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101f62:	e8 d9 ff ff ff       	call   c0101f40 <read_eip>
c0101f67:	89 45 f0             	mov    %eax,-0x10(%ebp)

    int i, j;
    for (i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i ++) {
c0101f6a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0101f71:	e9 88 00 00 00       	jmp    c0101ffe <print_stackframe+0xad>
        cprintf("ebp:0x%08x eip:0x%08x args:", ebp, eip);
c0101f76:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101f79:	89 44 24 08          	mov    %eax,0x8(%esp)
c0101f7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101f80:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101f84:	c7 04 24 20 f0 10 c0 	movl   $0xc010f020,(%esp)
c0101f8b:	e8 4b f8 ff ff       	call   c01017db <cprintf>
        uint32_t *args = (uint32_t *)ebp + 2;
c0101f90:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101f93:	83 c0 08             	add    $0x8,%eax
c0101f96:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        for (j = 0; j < 4; j ++) {
c0101f99:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0101fa0:	eb 25                	jmp    c0101fc7 <print_stackframe+0x76>
            cprintf("0x%08x ", args[j]);
c0101fa2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0101fa5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0101fac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101faf:	01 d0                	add    %edx,%eax
c0101fb1:	8b 00                	mov    (%eax),%eax
c0101fb3:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101fb7:	c7 04 24 3c f0 10 c0 	movl   $0xc010f03c,(%esp)
c0101fbe:	e8 18 f8 ff ff       	call   c01017db <cprintf>

    int i, j;
    for (i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i ++) {
        cprintf("ebp:0x%08x eip:0x%08x args:", ebp, eip);
        uint32_t *args = (uint32_t *)ebp + 2;
        for (j = 0; j < 4; j ++) {
c0101fc3:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
c0101fc7:	83 7d e8 03          	cmpl   $0x3,-0x18(%ebp)
c0101fcb:	7e d5                	jle    c0101fa2 <print_stackframe+0x51>
            cprintf("0x%08x ", args[j]);
        }
        cprintf("\n");
c0101fcd:	c7 04 24 44 f0 10 c0 	movl   $0xc010f044,(%esp)
c0101fd4:	e8 02 f8 ff ff       	call   c01017db <cprintf>
        print_debuginfo(eip - 1);
c0101fd9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101fdc:	83 e8 01             	sub    $0x1,%eax
c0101fdf:	89 04 24             	mov    %eax,(%esp)
c0101fe2:	e8 b6 fe ff ff       	call   c0101e9d <print_debuginfo>
        eip = ((uint32_t *)ebp)[1];
c0101fe7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101fea:	83 c0 04             	add    $0x4,%eax
c0101fed:	8b 00                	mov    (%eax),%eax
c0101fef:	89 45 f0             	mov    %eax,-0x10(%ebp)
        ebp = ((uint32_t *)ebp)[0];
c0101ff2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101ff5:	8b 00                	mov    (%eax),%eax
c0101ff7:	89 45 f4             	mov    %eax,-0xc(%ebp)
      *                   the calling funciton's ebp = ss:[ebp]
      */
    uint32_t ebp = read_ebp(), eip = read_eip();

    int i, j;
    for (i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i ++) {
c0101ffa:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0101ffe:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0102002:	74 0a                	je     c010200e <print_stackframe+0xbd>
c0102004:	83 7d ec 13          	cmpl   $0x13,-0x14(%ebp)
c0102008:	0f 8e 68 ff ff ff    	jle    c0101f76 <print_stackframe+0x25>
        cprintf("\n");
        print_debuginfo(eip - 1);
        eip = ((uint32_t *)ebp)[1];
        ebp = ((uint32_t *)ebp)[0];
    }
}
c010200e:	c9                   	leave  
c010200f:	c3                   	ret    

c0102010 <parse>:
#define MAXARGS         16
#define WHITESPACE      " \t\n\r"

/* parse - parse the command buffer into whitespace-separated arguments */
static int
parse(char *buf, char **argv) {
c0102010:	55                   	push   %ebp
c0102011:	89 e5                	mov    %esp,%ebp
c0102013:	83 ec 28             	sub    $0x28,%esp
    int argc = 0;
c0102016:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c010201d:	eb 0c                	jmp    c010202b <parse+0x1b>
            *buf ++ = '\0';
c010201f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102022:	8d 50 01             	lea    0x1(%eax),%edx
c0102025:	89 55 08             	mov    %edx,0x8(%ebp)
c0102028:	c6 00 00             	movb   $0x0,(%eax)
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c010202b:	8b 45 08             	mov    0x8(%ebp),%eax
c010202e:	0f b6 00             	movzbl (%eax),%eax
c0102031:	84 c0                	test   %al,%al
c0102033:	74 1d                	je     c0102052 <parse+0x42>
c0102035:	8b 45 08             	mov    0x8(%ebp),%eax
c0102038:	0f b6 00             	movzbl (%eax),%eax
c010203b:	0f be c0             	movsbl %al,%eax
c010203e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102042:	c7 04 24 c8 f0 10 c0 	movl   $0xc010f0c8,(%esp)
c0102049:	e8 9f c8 00 00       	call   c010e8ed <strchr>
c010204e:	85 c0                	test   %eax,%eax
c0102050:	75 cd                	jne    c010201f <parse+0xf>
            *buf ++ = '\0';
        }
        if (*buf == '\0') {
c0102052:	8b 45 08             	mov    0x8(%ebp),%eax
c0102055:	0f b6 00             	movzbl (%eax),%eax
c0102058:	84 c0                	test   %al,%al
c010205a:	75 02                	jne    c010205e <parse+0x4e>
            break;
c010205c:	eb 67                	jmp    c01020c5 <parse+0xb5>
        }

        // save and scan past next arg
        if (argc == MAXARGS - 1) {
c010205e:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
c0102062:	75 14                	jne    c0102078 <parse+0x68>
            cprintf("Too many arguments (max %d).\n", MAXARGS);
c0102064:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
c010206b:	00 
c010206c:	c7 04 24 cd f0 10 c0 	movl   $0xc010f0cd,(%esp)
c0102073:	e8 63 f7 ff ff       	call   c01017db <cprintf>
        }
        argv[argc ++] = buf;
c0102078:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010207b:	8d 50 01             	lea    0x1(%eax),%edx
c010207e:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0102081:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0102088:	8b 45 0c             	mov    0xc(%ebp),%eax
c010208b:	01 c2                	add    %eax,%edx
c010208d:	8b 45 08             	mov    0x8(%ebp),%eax
c0102090:	89 02                	mov    %eax,(%edx)
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0102092:	eb 04                	jmp    c0102098 <parse+0x88>
            buf ++;
c0102094:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        // save and scan past next arg
        if (argc == MAXARGS - 1) {
            cprintf("Too many arguments (max %d).\n", MAXARGS);
        }
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0102098:	8b 45 08             	mov    0x8(%ebp),%eax
c010209b:	0f b6 00             	movzbl (%eax),%eax
c010209e:	84 c0                	test   %al,%al
c01020a0:	74 1d                	je     c01020bf <parse+0xaf>
c01020a2:	8b 45 08             	mov    0x8(%ebp),%eax
c01020a5:	0f b6 00             	movzbl (%eax),%eax
c01020a8:	0f be c0             	movsbl %al,%eax
c01020ab:	89 44 24 04          	mov    %eax,0x4(%esp)
c01020af:	c7 04 24 c8 f0 10 c0 	movl   $0xc010f0c8,(%esp)
c01020b6:	e8 32 c8 00 00       	call   c010e8ed <strchr>
c01020bb:	85 c0                	test   %eax,%eax
c01020bd:	74 d5                	je     c0102094 <parse+0x84>
            buf ++;
        }
    }
c01020bf:	90                   	nop
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c01020c0:	e9 66 ff ff ff       	jmp    c010202b <parse+0x1b>
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
            buf ++;
        }
    }
    return argc;
c01020c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01020c8:	c9                   	leave  
c01020c9:	c3                   	ret    

c01020ca <runcmd>:
/* *
 * runcmd - parse the input string, split it into separated arguments
 * and then lookup and invoke some related commands/
 * */
static int
runcmd(char *buf, struct trapframe *tf) {
c01020ca:	55                   	push   %ebp
c01020cb:	89 e5                	mov    %esp,%ebp
c01020cd:	83 ec 68             	sub    $0x68,%esp
    char *argv[MAXARGS];
    int argc = parse(buf, argv);
c01020d0:	8d 45 b0             	lea    -0x50(%ebp),%eax
c01020d3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01020d7:	8b 45 08             	mov    0x8(%ebp),%eax
c01020da:	89 04 24             	mov    %eax,(%esp)
c01020dd:	e8 2e ff ff ff       	call   c0102010 <parse>
c01020e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (argc == 0) {
c01020e5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01020e9:	75 0a                	jne    c01020f5 <runcmd+0x2b>
        return 0;
c01020eb:	b8 00 00 00 00       	mov    $0x0,%eax
c01020f0:	e9 85 00 00 00       	jmp    c010217a <runcmd+0xb0>
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c01020f5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01020fc:	eb 5c                	jmp    c010215a <runcmd+0x90>
        if (strcmp(commands[i].name, argv[0]) == 0) {
c01020fe:	8b 4d b0             	mov    -0x50(%ebp),%ecx
c0102101:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102104:	89 d0                	mov    %edx,%eax
c0102106:	01 c0                	add    %eax,%eax
c0102108:	01 d0                	add    %edx,%eax
c010210a:	c1 e0 02             	shl    $0x2,%eax
c010210d:	05 20 40 13 c0       	add    $0xc0134020,%eax
c0102112:	8b 00                	mov    (%eax),%eax
c0102114:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0102118:	89 04 24             	mov    %eax,(%esp)
c010211b:	e8 2e c7 00 00       	call   c010e84e <strcmp>
c0102120:	85 c0                	test   %eax,%eax
c0102122:	75 32                	jne    c0102156 <runcmd+0x8c>
            return commands[i].func(argc - 1, argv + 1, tf);
c0102124:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102127:	89 d0                	mov    %edx,%eax
c0102129:	01 c0                	add    %eax,%eax
c010212b:	01 d0                	add    %edx,%eax
c010212d:	c1 e0 02             	shl    $0x2,%eax
c0102130:	05 20 40 13 c0       	add    $0xc0134020,%eax
c0102135:	8b 40 08             	mov    0x8(%eax),%eax
c0102138:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010213b:	8d 4a ff             	lea    -0x1(%edx),%ecx
c010213e:	8b 55 0c             	mov    0xc(%ebp),%edx
c0102141:	89 54 24 08          	mov    %edx,0x8(%esp)
c0102145:	8d 55 b0             	lea    -0x50(%ebp),%edx
c0102148:	83 c2 04             	add    $0x4,%edx
c010214b:	89 54 24 04          	mov    %edx,0x4(%esp)
c010214f:	89 0c 24             	mov    %ecx,(%esp)
c0102152:	ff d0                	call   *%eax
c0102154:	eb 24                	jmp    c010217a <runcmd+0xb0>
    int argc = parse(buf, argv);
    if (argc == 0) {
        return 0;
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0102156:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010215a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010215d:	83 f8 02             	cmp    $0x2,%eax
c0102160:	76 9c                	jbe    c01020fe <runcmd+0x34>
        if (strcmp(commands[i].name, argv[0]) == 0) {
            return commands[i].func(argc - 1, argv + 1, tf);
        }
    }
    cprintf("Unknown command '%s'\n", argv[0]);
c0102162:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0102165:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102169:	c7 04 24 eb f0 10 c0 	movl   $0xc010f0eb,(%esp)
c0102170:	e8 66 f6 ff ff       	call   c01017db <cprintf>
    return 0;
c0102175:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010217a:	c9                   	leave  
c010217b:	c3                   	ret    

c010217c <kmonitor>:

/***** Implementations of basic kernel monitor commands *****/

void
kmonitor(struct trapframe *tf) {
c010217c:	55                   	push   %ebp
c010217d:	89 e5                	mov    %esp,%ebp
c010217f:	83 ec 28             	sub    $0x28,%esp
    cprintf("Welcome to the kernel debug monitor!!\n");
c0102182:	c7 04 24 04 f1 10 c0 	movl   $0xc010f104,(%esp)
c0102189:	e8 4d f6 ff ff       	call   c01017db <cprintf>
    cprintf("Type 'help' for a list of commands.\n");
c010218e:	c7 04 24 2c f1 10 c0 	movl   $0xc010f12c,(%esp)
c0102195:	e8 41 f6 ff ff       	call   c01017db <cprintf>

    if (tf != NULL) {
c010219a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010219e:	74 0b                	je     c01021ab <kmonitor+0x2f>
        print_trapframe(tf);
c01021a0:	8b 45 08             	mov    0x8(%ebp),%eax
c01021a3:	89 04 24             	mov    %eax,(%esp)
c01021a6:	e8 c8 16 00 00       	call   c0103873 <print_trapframe>
    }

    char *buf;
    while (1) {
        if ((buf = readline("K> ")) != NULL) {
c01021ab:	c7 04 24 51 f1 10 c0 	movl   $0xc010f151,(%esp)
c01021b2:	e8 1b f5 ff ff       	call   c01016d2 <readline>
c01021b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01021ba:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01021be:	74 18                	je     c01021d8 <kmonitor+0x5c>
            if (runcmd(buf, tf) < 0) {
c01021c0:	8b 45 08             	mov    0x8(%ebp),%eax
c01021c3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01021c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01021ca:	89 04 24             	mov    %eax,(%esp)
c01021cd:	e8 f8 fe ff ff       	call   c01020ca <runcmd>
c01021d2:	85 c0                	test   %eax,%eax
c01021d4:	79 02                	jns    c01021d8 <kmonitor+0x5c>
                break;
c01021d6:	eb 02                	jmp    c01021da <kmonitor+0x5e>
            }
        }
    }
c01021d8:	eb d1                	jmp    c01021ab <kmonitor+0x2f>
}
c01021da:	c9                   	leave  
c01021db:	c3                   	ret    

c01021dc <mon_help>:

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
c01021dc:	55                   	push   %ebp
c01021dd:	89 e5                	mov    %esp,%ebp
c01021df:	83 ec 28             	sub    $0x28,%esp
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c01021e2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01021e9:	eb 3f                	jmp    c010222a <mon_help+0x4e>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
c01021eb:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01021ee:	89 d0                	mov    %edx,%eax
c01021f0:	01 c0                	add    %eax,%eax
c01021f2:	01 d0                	add    %edx,%eax
c01021f4:	c1 e0 02             	shl    $0x2,%eax
c01021f7:	05 20 40 13 c0       	add    $0xc0134020,%eax
c01021fc:	8b 48 04             	mov    0x4(%eax),%ecx
c01021ff:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102202:	89 d0                	mov    %edx,%eax
c0102204:	01 c0                	add    %eax,%eax
c0102206:	01 d0                	add    %edx,%eax
c0102208:	c1 e0 02             	shl    $0x2,%eax
c010220b:	05 20 40 13 c0       	add    $0xc0134020,%eax
c0102210:	8b 00                	mov    (%eax),%eax
c0102212:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0102216:	89 44 24 04          	mov    %eax,0x4(%esp)
c010221a:	c7 04 24 55 f1 10 c0 	movl   $0xc010f155,(%esp)
c0102221:	e8 b5 f5 ff ff       	call   c01017db <cprintf>

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0102226:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010222a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010222d:	83 f8 02             	cmp    $0x2,%eax
c0102230:	76 b9                	jbe    c01021eb <mon_help+0xf>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
    }
    return 0;
c0102232:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0102237:	c9                   	leave  
c0102238:	c3                   	ret    

c0102239 <mon_kerninfo>:
/* *
 * mon_kerninfo - call print_kerninfo in kern/debug/kdebug.c to
 * print the memory occupancy in kernel.
 * */
int
mon_kerninfo(int argc, char **argv, struct trapframe *tf) {
c0102239:	55                   	push   %ebp
c010223a:	89 e5                	mov    %esp,%ebp
c010223c:	83 ec 08             	sub    $0x8,%esp
    print_kerninfo();
c010223f:	e8 c3 fb ff ff       	call   c0101e07 <print_kerninfo>
    return 0;
c0102244:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0102249:	c9                   	leave  
c010224a:	c3                   	ret    

c010224b <mon_backtrace>:
/* *
 * mon_backtrace - call print_stackframe in kern/debug/kdebug.c to
 * print a backtrace of the stack.
 * */
int
mon_backtrace(int argc, char **argv, struct trapframe *tf) {
c010224b:	55                   	push   %ebp
c010224c:	89 e5                	mov    %esp,%ebp
c010224e:	83 ec 08             	sub    $0x8,%esp
    print_stackframe();
c0102251:	e8 fb fc ff ff       	call   c0101f51 <print_stackframe>
    return 0;
c0102256:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010225b:	c9                   	leave  
c010225c:	c3                   	ret    

c010225d <__panic>:
/* *
 * __panic - __panic is called on unresolvable fatal errors. it prints
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
c010225d:	55                   	push   %ebp
c010225e:	89 e5                	mov    %esp,%ebp
c0102260:	83 ec 28             	sub    $0x28,%esp
    if (is_panic) {
c0102263:	a1 20 58 1c c0       	mov    0xc01c5820,%eax
c0102268:	85 c0                	test   %eax,%eax
c010226a:	74 02                	je     c010226e <__panic+0x11>
        goto panic_dead;
c010226c:	eb 48                	jmp    c01022b6 <__panic+0x59>
    }
    is_panic = 1;
c010226e:	c7 05 20 58 1c c0 01 	movl   $0x1,0xc01c5820
c0102275:	00 00 00 

    // print the 'message'
    va_list ap;
    va_start(ap, fmt);
c0102278:	8d 45 14             	lea    0x14(%ebp),%eax
c010227b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel panic at %s:%d:\n    ", file, line);
c010227e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102281:	89 44 24 08          	mov    %eax,0x8(%esp)
c0102285:	8b 45 08             	mov    0x8(%ebp),%eax
c0102288:	89 44 24 04          	mov    %eax,0x4(%esp)
c010228c:	c7 04 24 5e f1 10 c0 	movl   $0xc010f15e,(%esp)
c0102293:	e8 43 f5 ff ff       	call   c01017db <cprintf>
    vcprintf(fmt, ap);
c0102298:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010229b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010229f:	8b 45 10             	mov    0x10(%ebp),%eax
c01022a2:	89 04 24             	mov    %eax,(%esp)
c01022a5:	e8 fe f4 ff ff       	call   c01017a8 <vcprintf>
    cprintf("\n");
c01022aa:	c7 04 24 7a f1 10 c0 	movl   $0xc010f17a,(%esp)
c01022b1:	e8 25 f5 ff ff       	call   c01017db <cprintf>
    va_end(ap);

panic_dead:
    intr_disable();
c01022b6:	e8 fa 11 00 00       	call   c01034b5 <intr_disable>
    while (1) {
        kmonitor(NULL);
c01022bb:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c01022c2:	e8 b5 fe ff ff       	call   c010217c <kmonitor>
    }
c01022c7:	eb f2                	jmp    c01022bb <__panic+0x5e>

c01022c9 <__warn>:
}

/* __warn - like panic, but don't */
void
__warn(const char *file, int line, const char *fmt, ...) {
c01022c9:	55                   	push   %ebp
c01022ca:	89 e5                	mov    %esp,%ebp
c01022cc:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    va_start(ap, fmt);
c01022cf:	8d 45 14             	lea    0x14(%ebp),%eax
c01022d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel warning at %s:%d:\n    ", file, line);
c01022d5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01022d8:	89 44 24 08          	mov    %eax,0x8(%esp)
c01022dc:	8b 45 08             	mov    0x8(%ebp),%eax
c01022df:	89 44 24 04          	mov    %eax,0x4(%esp)
c01022e3:	c7 04 24 7c f1 10 c0 	movl   $0xc010f17c,(%esp)
c01022ea:	e8 ec f4 ff ff       	call   c01017db <cprintf>
    vcprintf(fmt, ap);
c01022ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01022f2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01022f6:	8b 45 10             	mov    0x10(%ebp),%eax
c01022f9:	89 04 24             	mov    %eax,(%esp)
c01022fc:	e8 a7 f4 ff ff       	call   c01017a8 <vcprintf>
    cprintf("\n");
c0102301:	c7 04 24 7a f1 10 c0 	movl   $0xc010f17a,(%esp)
c0102308:	e8 ce f4 ff ff       	call   c01017db <cprintf>
    va_end(ap);
}
c010230d:	c9                   	leave  
c010230e:	c3                   	ret    

c010230f <is_kernel_panic>:

bool
is_kernel_panic(void) {
c010230f:	55                   	push   %ebp
c0102310:	89 e5                	mov    %esp,%ebp
    return is_panic;
c0102312:	a1 20 58 1c c0       	mov    0xc01c5820,%eax
}
c0102317:	5d                   	pop    %ebp
c0102318:	c3                   	ret    

c0102319 <clock_init>:
/* *
 * clock_init - initialize 8253 clock to interrupt 100 times per second,
 * and then enable IRQ_TIMER.
 * */
void
clock_init(void) {
c0102319:	55                   	push   %ebp
c010231a:	89 e5                	mov    %esp,%ebp
c010231c:	83 ec 28             	sub    $0x28,%esp
c010231f:	66 c7 45 f6 43 00    	movw   $0x43,-0xa(%ebp)
c0102325:	c6 45 f5 34          	movb   $0x34,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102329:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c010232d:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0102331:	ee                   	out    %al,(%dx)
c0102332:	66 c7 45 f2 40 00    	movw   $0x40,-0xe(%ebp)
c0102338:	c6 45 f1 9c          	movb   $0x9c,-0xf(%ebp)
c010233c:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0102340:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102344:	ee                   	out    %al,(%dx)
c0102345:	66 c7 45 ee 40 00    	movw   $0x40,-0x12(%ebp)
c010234b:	c6 45 ed 2e          	movb   $0x2e,-0x13(%ebp)
c010234f:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0102353:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0102357:	ee                   	out    %al,(%dx)
    outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
    outb(IO_TIMER1, TIMER_DIV(100) % 256);
    outb(IO_TIMER1, TIMER_DIV(100) / 256);

    // initialize time counter 'ticks' to zero
    ticks = 0;
c0102358:	c7 05 d8 84 1c c0 00 	movl   $0x0,0xc01c84d8
c010235f:	00 00 00 

    cprintf("++ setup timer interrupts\n");
c0102362:	c7 04 24 9a f1 10 c0 	movl   $0xc010f19a,(%esp)
c0102369:	e8 6d f4 ff ff       	call   c01017db <cprintf>
    pic_enable(IRQ_TIMER);
c010236e:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0102375:	e8 99 11 00 00       	call   c0103513 <pic_enable>
}
c010237a:	c9                   	leave  
c010237b:	c3                   	ret    

c010237c <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010237c:	55                   	push   %ebp
c010237d:	89 e5                	mov    %esp,%ebp
c010237f:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0102382:	9c                   	pushf  
c0102383:	58                   	pop    %eax
c0102384:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0102387:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010238a:	25 00 02 00 00       	and    $0x200,%eax
c010238f:	85 c0                	test   %eax,%eax
c0102391:	74 0c                	je     c010239f <__intr_save+0x23>
        intr_disable();
c0102393:	e8 1d 11 00 00       	call   c01034b5 <intr_disable>
        return 1;
c0102398:	b8 01 00 00 00       	mov    $0x1,%eax
c010239d:	eb 05                	jmp    c01023a4 <__intr_save+0x28>
    }
    return 0;
c010239f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01023a4:	c9                   	leave  
c01023a5:	c3                   	ret    

c01023a6 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c01023a6:	55                   	push   %ebp
c01023a7:	89 e5                	mov    %esp,%ebp
c01023a9:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c01023ac:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01023b0:	74 05                	je     c01023b7 <__intr_restore+0x11>
        intr_enable();
c01023b2:	e8 f8 10 00 00       	call   c01034af <intr_enable>
    }
}
c01023b7:	c9                   	leave  
c01023b8:	c3                   	ret    

c01023b9 <delay>:
#include <memlayout.h>
#include <sync.h>

/* stupid I/O delay routine necessitated by historical PC design flaws */
static void
delay(void) {
c01023b9:	55                   	push   %ebp
c01023ba:	89 e5                	mov    %esp,%ebp
c01023bc:	83 ec 10             	sub    $0x10,%esp
c01023bf:	66 c7 45 fe 84 00    	movw   $0x84,-0x2(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01023c5:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c01023c9:	89 c2                	mov    %eax,%edx
c01023cb:	ec                   	in     (%dx),%al
c01023cc:	88 45 fd             	mov    %al,-0x3(%ebp)
c01023cf:	66 c7 45 fa 84 00    	movw   $0x84,-0x6(%ebp)
c01023d5:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01023d9:	89 c2                	mov    %eax,%edx
c01023db:	ec                   	in     (%dx),%al
c01023dc:	88 45 f9             	mov    %al,-0x7(%ebp)
c01023df:	66 c7 45 f6 84 00    	movw   $0x84,-0xa(%ebp)
c01023e5:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01023e9:	89 c2                	mov    %eax,%edx
c01023eb:	ec                   	in     (%dx),%al
c01023ec:	88 45 f5             	mov    %al,-0xb(%ebp)
c01023ef:	66 c7 45 f2 84 00    	movw   $0x84,-0xe(%ebp)
c01023f5:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01023f9:	89 c2                	mov    %eax,%edx
c01023fb:	ec                   	in     (%dx),%al
c01023fc:	88 45 f1             	mov    %al,-0xf(%ebp)
    inb(0x84);
    inb(0x84);
    inb(0x84);
    inb(0x84);
}
c01023ff:	c9                   	leave  
c0102400:	c3                   	ret    

c0102401 <cga_init>:
static uint16_t addr_6845;

/* TEXT-mode CGA/VGA display output */

static void
cga_init(void) {
c0102401:	55                   	push   %ebp
c0102402:	89 e5                	mov    %esp,%ebp
c0102404:	83 ec 20             	sub    $0x20,%esp
    volatile uint16_t *cp = (uint16_t *)(CGA_BUF + KERNBASE);
c0102407:	c7 45 fc 00 80 0b c0 	movl   $0xc00b8000,-0x4(%ebp)
    uint16_t was = *cp;
c010240e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102411:	0f b7 00             	movzwl (%eax),%eax
c0102414:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    *cp = (uint16_t) 0xA55A;
c0102418:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010241b:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
    if (*cp != 0xA55A) {
c0102420:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102423:	0f b7 00             	movzwl (%eax),%eax
c0102426:	66 3d 5a a5          	cmp    $0xa55a,%ax
c010242a:	74 12                	je     c010243e <cga_init+0x3d>
        cp = (uint16_t*)(MONO_BUF + KERNBASE);
c010242c:	c7 45 fc 00 00 0b c0 	movl   $0xc00b0000,-0x4(%ebp)
        addr_6845 = MONO_BASE;
c0102433:	66 c7 05 46 58 1c c0 	movw   $0x3b4,0xc01c5846
c010243a:	b4 03 
c010243c:	eb 13                	jmp    c0102451 <cga_init+0x50>
    } else {
        *cp = was;
c010243e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102441:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0102445:	66 89 10             	mov    %dx,(%eax)
        addr_6845 = CGA_BASE;
c0102448:	66 c7 05 46 58 1c c0 	movw   $0x3d4,0xc01c5846
c010244f:	d4 03 
    }

    // Extract cursor location
    uint32_t pos;
    outb(addr_6845, 14);
c0102451:	0f b7 05 46 58 1c c0 	movzwl 0xc01c5846,%eax
c0102458:	0f b7 c0             	movzwl %ax,%eax
c010245b:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c010245f:	c6 45 f1 0e          	movb   $0xe,-0xf(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102463:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0102467:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010246b:	ee                   	out    %al,(%dx)
    pos = inb(addr_6845 + 1) << 8;
c010246c:	0f b7 05 46 58 1c c0 	movzwl 0xc01c5846,%eax
c0102473:	83 c0 01             	add    $0x1,%eax
c0102476:	0f b7 c0             	movzwl %ax,%eax
c0102479:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010247d:	0f b7 45 ee          	movzwl -0x12(%ebp),%eax
c0102481:	89 c2                	mov    %eax,%edx
c0102483:	ec                   	in     (%dx),%al
c0102484:	88 45 ed             	mov    %al,-0x13(%ebp)
    return data;
c0102487:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c010248b:	0f b6 c0             	movzbl %al,%eax
c010248e:	c1 e0 08             	shl    $0x8,%eax
c0102491:	89 45 f4             	mov    %eax,-0xc(%ebp)
    outb(addr_6845, 15);
c0102494:	0f b7 05 46 58 1c c0 	movzwl 0xc01c5846,%eax
c010249b:	0f b7 c0             	movzwl %ax,%eax
c010249e:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c01024a2:	c6 45 e9 0f          	movb   $0xf,-0x17(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01024a6:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c01024aa:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c01024ae:	ee                   	out    %al,(%dx)
    pos |= inb(addr_6845 + 1);
c01024af:	0f b7 05 46 58 1c c0 	movzwl 0xc01c5846,%eax
c01024b6:	83 c0 01             	add    $0x1,%eax
c01024b9:	0f b7 c0             	movzwl %ax,%eax
c01024bc:	66 89 45 e6          	mov    %ax,-0x1a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01024c0:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c01024c4:	89 c2                	mov    %eax,%edx
c01024c6:	ec                   	in     (%dx),%al
c01024c7:	88 45 e5             	mov    %al,-0x1b(%ebp)
    return data;
c01024ca:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c01024ce:	0f b6 c0             	movzbl %al,%eax
c01024d1:	09 45 f4             	or     %eax,-0xc(%ebp)

    crt_buf = (uint16_t*) cp;
c01024d4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01024d7:	a3 40 58 1c c0       	mov    %eax,0xc01c5840
    crt_pos = pos;
c01024dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01024df:	66 a3 44 58 1c c0    	mov    %ax,0xc01c5844
}
c01024e5:	c9                   	leave  
c01024e6:	c3                   	ret    

c01024e7 <serial_init>:

static bool serial_exists = 0;

static void
serial_init(void) {
c01024e7:	55                   	push   %ebp
c01024e8:	89 e5                	mov    %esp,%ebp
c01024ea:	83 ec 48             	sub    $0x48,%esp
c01024ed:	66 c7 45 f6 fa 03    	movw   $0x3fa,-0xa(%ebp)
c01024f3:	c6 45 f5 00          	movb   $0x0,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01024f7:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c01024fb:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01024ff:	ee                   	out    %al,(%dx)
c0102500:	66 c7 45 f2 fb 03    	movw   $0x3fb,-0xe(%ebp)
c0102506:	c6 45 f1 80          	movb   $0x80,-0xf(%ebp)
c010250a:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c010250e:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102512:	ee                   	out    %al,(%dx)
c0102513:	66 c7 45 ee f8 03    	movw   $0x3f8,-0x12(%ebp)
c0102519:	c6 45 ed 0c          	movb   $0xc,-0x13(%ebp)
c010251d:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0102521:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0102525:	ee                   	out    %al,(%dx)
c0102526:	66 c7 45 ea f9 03    	movw   $0x3f9,-0x16(%ebp)
c010252c:	c6 45 e9 00          	movb   $0x0,-0x17(%ebp)
c0102530:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0102534:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0102538:	ee                   	out    %al,(%dx)
c0102539:	66 c7 45 e6 fb 03    	movw   $0x3fb,-0x1a(%ebp)
c010253f:	c6 45 e5 03          	movb   $0x3,-0x1b(%ebp)
c0102543:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0102547:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c010254b:	ee                   	out    %al,(%dx)
c010254c:	66 c7 45 e2 fc 03    	movw   $0x3fc,-0x1e(%ebp)
c0102552:	c6 45 e1 00          	movb   $0x0,-0x1f(%ebp)
c0102556:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c010255a:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c010255e:	ee                   	out    %al,(%dx)
c010255f:	66 c7 45 de f9 03    	movw   $0x3f9,-0x22(%ebp)
c0102565:	c6 45 dd 01          	movb   $0x1,-0x23(%ebp)
c0102569:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c010256d:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0102571:	ee                   	out    %al,(%dx)
c0102572:	66 c7 45 da fd 03    	movw   $0x3fd,-0x26(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0102578:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c010257c:	89 c2                	mov    %eax,%edx
c010257e:	ec                   	in     (%dx),%al
c010257f:	88 45 d9             	mov    %al,-0x27(%ebp)
    return data;
c0102582:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
    // Enable rcv interrupts
    outb(COM1 + COM_IER, COM_IER_RDI);

    // Clear any preexisting overrun indications and interrupts
    // Serial port doesn't exist if COM_LSR returns 0xFF
    serial_exists = (inb(COM1 + COM_LSR) != 0xFF);
c0102586:	3c ff                	cmp    $0xff,%al
c0102588:	0f 95 c0             	setne  %al
c010258b:	0f b6 c0             	movzbl %al,%eax
c010258e:	a3 48 58 1c c0       	mov    %eax,0xc01c5848
c0102593:	66 c7 45 d6 fa 03    	movw   $0x3fa,-0x2a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0102599:	0f b7 45 d6          	movzwl -0x2a(%ebp),%eax
c010259d:	89 c2                	mov    %eax,%edx
c010259f:	ec                   	in     (%dx),%al
c01025a0:	88 45 d5             	mov    %al,-0x2b(%ebp)
c01025a3:	66 c7 45 d2 f8 03    	movw   $0x3f8,-0x2e(%ebp)
c01025a9:	0f b7 45 d2          	movzwl -0x2e(%ebp),%eax
c01025ad:	89 c2                	mov    %eax,%edx
c01025af:	ec                   	in     (%dx),%al
c01025b0:	88 45 d1             	mov    %al,-0x2f(%ebp)
    (void) inb(COM1+COM_IIR);
    (void) inb(COM1+COM_RX);

    if (serial_exists) {
c01025b3:	a1 48 58 1c c0       	mov    0xc01c5848,%eax
c01025b8:	85 c0                	test   %eax,%eax
c01025ba:	74 0c                	je     c01025c8 <serial_init+0xe1>
        pic_enable(IRQ_COM1);
c01025bc:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c01025c3:	e8 4b 0f 00 00       	call   c0103513 <pic_enable>
    }
}
c01025c8:	c9                   	leave  
c01025c9:	c3                   	ret    

c01025ca <lpt_putc_sub>:

static void
lpt_putc_sub(int c) {
c01025ca:	55                   	push   %ebp
c01025cb:	89 e5                	mov    %esp,%ebp
c01025cd:	83 ec 20             	sub    $0x20,%esp
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c01025d0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c01025d7:	eb 09                	jmp    c01025e2 <lpt_putc_sub+0x18>
        delay();
c01025d9:	e8 db fd ff ff       	call   c01023b9 <delay>
}

static void
lpt_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c01025de:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01025e2:	66 c7 45 fa 79 03    	movw   $0x379,-0x6(%ebp)
c01025e8:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01025ec:	89 c2                	mov    %eax,%edx
c01025ee:	ec                   	in     (%dx),%al
c01025ef:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c01025f2:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01025f6:	84 c0                	test   %al,%al
c01025f8:	78 09                	js     c0102603 <lpt_putc_sub+0x39>
c01025fa:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c0102601:	7e d6                	jle    c01025d9 <lpt_putc_sub+0xf>
        delay();
    }
    outb(LPTPORT + 0, c);
c0102603:	8b 45 08             	mov    0x8(%ebp),%eax
c0102606:	0f b6 c0             	movzbl %al,%eax
c0102609:	66 c7 45 f6 78 03    	movw   $0x378,-0xa(%ebp)
c010260f:	88 45 f5             	mov    %al,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102612:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0102616:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c010261a:	ee                   	out    %al,(%dx)
c010261b:	66 c7 45 f2 7a 03    	movw   $0x37a,-0xe(%ebp)
c0102621:	c6 45 f1 0d          	movb   $0xd,-0xf(%ebp)
c0102625:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0102629:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010262d:	ee                   	out    %al,(%dx)
c010262e:	66 c7 45 ee 7a 03    	movw   $0x37a,-0x12(%ebp)
c0102634:	c6 45 ed 08          	movb   $0x8,-0x13(%ebp)
c0102638:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c010263c:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0102640:	ee                   	out    %al,(%dx)
    outb(LPTPORT + 2, 0x08 | 0x04 | 0x01);
    outb(LPTPORT + 2, 0x08);
}
c0102641:	c9                   	leave  
c0102642:	c3                   	ret    

c0102643 <lpt_putc>:

/* lpt_putc - copy console output to parallel port */
static void
lpt_putc(int c) {
c0102643:	55                   	push   %ebp
c0102644:	89 e5                	mov    %esp,%ebp
c0102646:	83 ec 04             	sub    $0x4,%esp
    if (c != '\b') {
c0102649:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c010264d:	74 0d                	je     c010265c <lpt_putc+0x19>
        lpt_putc_sub(c);
c010264f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102652:	89 04 24             	mov    %eax,(%esp)
c0102655:	e8 70 ff ff ff       	call   c01025ca <lpt_putc_sub>
c010265a:	eb 24                	jmp    c0102680 <lpt_putc+0x3d>
    }
    else {
        lpt_putc_sub('\b');
c010265c:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c0102663:	e8 62 ff ff ff       	call   c01025ca <lpt_putc_sub>
        lpt_putc_sub(' ');
c0102668:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c010266f:	e8 56 ff ff ff       	call   c01025ca <lpt_putc_sub>
        lpt_putc_sub('\b');
c0102674:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c010267b:	e8 4a ff ff ff       	call   c01025ca <lpt_putc_sub>
    }
}
c0102680:	c9                   	leave  
c0102681:	c3                   	ret    

c0102682 <cga_putc>:

/* cga_putc - print character to console */
static void
cga_putc(int c) {
c0102682:	55                   	push   %ebp
c0102683:	89 e5                	mov    %esp,%ebp
c0102685:	53                   	push   %ebx
c0102686:	83 ec 34             	sub    $0x34,%esp
    // set black on white
    if (!(c & ~0xFF)) {
c0102689:	8b 45 08             	mov    0x8(%ebp),%eax
c010268c:	b0 00                	mov    $0x0,%al
c010268e:	85 c0                	test   %eax,%eax
c0102690:	75 07                	jne    c0102699 <cga_putc+0x17>
        c |= 0x0700;
c0102692:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)
    }

    switch (c & 0xff) {
c0102699:	8b 45 08             	mov    0x8(%ebp),%eax
c010269c:	0f b6 c0             	movzbl %al,%eax
c010269f:	83 f8 0a             	cmp    $0xa,%eax
c01026a2:	74 4c                	je     c01026f0 <cga_putc+0x6e>
c01026a4:	83 f8 0d             	cmp    $0xd,%eax
c01026a7:	74 57                	je     c0102700 <cga_putc+0x7e>
c01026a9:	83 f8 08             	cmp    $0x8,%eax
c01026ac:	0f 85 88 00 00 00    	jne    c010273a <cga_putc+0xb8>
    case '\b':
        if (crt_pos > 0) {
c01026b2:	0f b7 05 44 58 1c c0 	movzwl 0xc01c5844,%eax
c01026b9:	66 85 c0             	test   %ax,%ax
c01026bc:	74 30                	je     c01026ee <cga_putc+0x6c>
            crt_pos --;
c01026be:	0f b7 05 44 58 1c c0 	movzwl 0xc01c5844,%eax
c01026c5:	83 e8 01             	sub    $0x1,%eax
c01026c8:	66 a3 44 58 1c c0    	mov    %ax,0xc01c5844
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
c01026ce:	a1 40 58 1c c0       	mov    0xc01c5840,%eax
c01026d3:	0f b7 15 44 58 1c c0 	movzwl 0xc01c5844,%edx
c01026da:	0f b7 d2             	movzwl %dx,%edx
c01026dd:	01 d2                	add    %edx,%edx
c01026df:	01 c2                	add    %eax,%edx
c01026e1:	8b 45 08             	mov    0x8(%ebp),%eax
c01026e4:	b0 00                	mov    $0x0,%al
c01026e6:	83 c8 20             	or     $0x20,%eax
c01026e9:	66 89 02             	mov    %ax,(%edx)
        }
        break;
c01026ec:	eb 72                	jmp    c0102760 <cga_putc+0xde>
c01026ee:	eb 70                	jmp    c0102760 <cga_putc+0xde>
    case '\n':
        crt_pos += CRT_COLS;
c01026f0:	0f b7 05 44 58 1c c0 	movzwl 0xc01c5844,%eax
c01026f7:	83 c0 50             	add    $0x50,%eax
c01026fa:	66 a3 44 58 1c c0    	mov    %ax,0xc01c5844
    case '\r':
        crt_pos -= (crt_pos % CRT_COLS);
c0102700:	0f b7 1d 44 58 1c c0 	movzwl 0xc01c5844,%ebx
c0102707:	0f b7 0d 44 58 1c c0 	movzwl 0xc01c5844,%ecx
c010270e:	0f b7 c1             	movzwl %cx,%eax
c0102711:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
c0102717:	c1 e8 10             	shr    $0x10,%eax
c010271a:	89 c2                	mov    %eax,%edx
c010271c:	66 c1 ea 06          	shr    $0x6,%dx
c0102720:	89 d0                	mov    %edx,%eax
c0102722:	c1 e0 02             	shl    $0x2,%eax
c0102725:	01 d0                	add    %edx,%eax
c0102727:	c1 e0 04             	shl    $0x4,%eax
c010272a:	29 c1                	sub    %eax,%ecx
c010272c:	89 ca                	mov    %ecx,%edx
c010272e:	89 d8                	mov    %ebx,%eax
c0102730:	29 d0                	sub    %edx,%eax
c0102732:	66 a3 44 58 1c c0    	mov    %ax,0xc01c5844
        break;
c0102738:	eb 26                	jmp    c0102760 <cga_putc+0xde>
    default:
        crt_buf[crt_pos ++] = c;     // write the character
c010273a:	8b 0d 40 58 1c c0    	mov    0xc01c5840,%ecx
c0102740:	0f b7 05 44 58 1c c0 	movzwl 0xc01c5844,%eax
c0102747:	8d 50 01             	lea    0x1(%eax),%edx
c010274a:	66 89 15 44 58 1c c0 	mov    %dx,0xc01c5844
c0102751:	0f b7 c0             	movzwl %ax,%eax
c0102754:	01 c0                	add    %eax,%eax
c0102756:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c0102759:	8b 45 08             	mov    0x8(%ebp),%eax
c010275c:	66 89 02             	mov    %ax,(%edx)
        break;
c010275f:	90                   	nop
    }

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
c0102760:	0f b7 05 44 58 1c c0 	movzwl 0xc01c5844,%eax
c0102767:	66 3d cf 07          	cmp    $0x7cf,%ax
c010276b:	76 5b                	jbe    c01027c8 <cga_putc+0x146>
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
c010276d:	a1 40 58 1c c0       	mov    0xc01c5840,%eax
c0102772:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
c0102778:	a1 40 58 1c c0       	mov    0xc01c5840,%eax
c010277d:	c7 44 24 08 00 0f 00 	movl   $0xf00,0x8(%esp)
c0102784:	00 
c0102785:	89 54 24 04          	mov    %edx,0x4(%esp)
c0102789:	89 04 24             	mov    %eax,(%esp)
c010278c:	e8 5a c3 00 00       	call   c010eaeb <memmove>
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0102791:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
c0102798:	eb 15                	jmp    c01027af <cga_putc+0x12d>
            crt_buf[i] = 0x0700 | ' ';
c010279a:	a1 40 58 1c c0       	mov    0xc01c5840,%eax
c010279f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01027a2:	01 d2                	add    %edx,%edx
c01027a4:	01 d0                	add    %edx,%eax
c01027a6:	66 c7 00 20 07       	movw   $0x720,(%eax)

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c01027ab:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01027af:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
c01027b6:	7e e2                	jle    c010279a <cga_putc+0x118>
            crt_buf[i] = 0x0700 | ' ';
        }
        crt_pos -= CRT_COLS;
c01027b8:	0f b7 05 44 58 1c c0 	movzwl 0xc01c5844,%eax
c01027bf:	83 e8 50             	sub    $0x50,%eax
c01027c2:	66 a3 44 58 1c c0    	mov    %ax,0xc01c5844
    }

    // move that little blinky thing
    outb(addr_6845, 14);
c01027c8:	0f b7 05 46 58 1c c0 	movzwl 0xc01c5846,%eax
c01027cf:	0f b7 c0             	movzwl %ax,%eax
c01027d2:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c01027d6:	c6 45 f1 0e          	movb   $0xe,-0xf(%ebp)
c01027da:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c01027de:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01027e2:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos >> 8);
c01027e3:	0f b7 05 44 58 1c c0 	movzwl 0xc01c5844,%eax
c01027ea:	66 c1 e8 08          	shr    $0x8,%ax
c01027ee:	0f b6 c0             	movzbl %al,%eax
c01027f1:	0f b7 15 46 58 1c c0 	movzwl 0xc01c5846,%edx
c01027f8:	83 c2 01             	add    $0x1,%edx
c01027fb:	0f b7 d2             	movzwl %dx,%edx
c01027fe:	66 89 55 ee          	mov    %dx,-0x12(%ebp)
c0102802:	88 45 ed             	mov    %al,-0x13(%ebp)
c0102805:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0102809:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c010280d:	ee                   	out    %al,(%dx)
    outb(addr_6845, 15);
c010280e:	0f b7 05 46 58 1c c0 	movzwl 0xc01c5846,%eax
c0102815:	0f b7 c0             	movzwl %ax,%eax
c0102818:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c010281c:	c6 45 e9 0f          	movb   $0xf,-0x17(%ebp)
c0102820:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0102824:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0102828:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos);
c0102829:	0f b7 05 44 58 1c c0 	movzwl 0xc01c5844,%eax
c0102830:	0f b6 c0             	movzbl %al,%eax
c0102833:	0f b7 15 46 58 1c c0 	movzwl 0xc01c5846,%edx
c010283a:	83 c2 01             	add    $0x1,%edx
c010283d:	0f b7 d2             	movzwl %dx,%edx
c0102840:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0102844:	88 45 e5             	mov    %al,-0x1b(%ebp)
c0102847:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c010284b:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c010284f:	ee                   	out    %al,(%dx)
}
c0102850:	83 c4 34             	add    $0x34,%esp
c0102853:	5b                   	pop    %ebx
c0102854:	5d                   	pop    %ebp
c0102855:	c3                   	ret    

c0102856 <serial_putc_sub>:

static void
serial_putc_sub(int c) {
c0102856:	55                   	push   %ebp
c0102857:	89 e5                	mov    %esp,%ebp
c0102859:	83 ec 10             	sub    $0x10,%esp
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c010285c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0102863:	eb 09                	jmp    c010286e <serial_putc_sub+0x18>
        delay();
c0102865:	e8 4f fb ff ff       	call   c01023b9 <delay>
}

static void
serial_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c010286a:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010286e:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0102874:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0102878:	89 c2                	mov    %eax,%edx
c010287a:	ec                   	in     (%dx),%al
c010287b:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c010287e:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c0102882:	0f b6 c0             	movzbl %al,%eax
c0102885:	83 e0 20             	and    $0x20,%eax
c0102888:	85 c0                	test   %eax,%eax
c010288a:	75 09                	jne    c0102895 <serial_putc_sub+0x3f>
c010288c:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c0102893:	7e d0                	jle    c0102865 <serial_putc_sub+0xf>
        delay();
    }
    outb(COM1 + COM_TX, c);
c0102895:	8b 45 08             	mov    0x8(%ebp),%eax
c0102898:	0f b6 c0             	movzbl %al,%eax
c010289b:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
c01028a1:	88 45 f5             	mov    %al,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01028a4:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c01028a8:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01028ac:	ee                   	out    %al,(%dx)
}
c01028ad:	c9                   	leave  
c01028ae:	c3                   	ret    

c01028af <serial_putc>:

/* serial_putc - print character to serial port */
static void
serial_putc(int c) {
c01028af:	55                   	push   %ebp
c01028b0:	89 e5                	mov    %esp,%ebp
c01028b2:	83 ec 04             	sub    $0x4,%esp
    if (c != '\b') {
c01028b5:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c01028b9:	74 0d                	je     c01028c8 <serial_putc+0x19>
        serial_putc_sub(c);
c01028bb:	8b 45 08             	mov    0x8(%ebp),%eax
c01028be:	89 04 24             	mov    %eax,(%esp)
c01028c1:	e8 90 ff ff ff       	call   c0102856 <serial_putc_sub>
c01028c6:	eb 24                	jmp    c01028ec <serial_putc+0x3d>
    }
    else {
        serial_putc_sub('\b');
c01028c8:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01028cf:	e8 82 ff ff ff       	call   c0102856 <serial_putc_sub>
        serial_putc_sub(' ');
c01028d4:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c01028db:	e8 76 ff ff ff       	call   c0102856 <serial_putc_sub>
        serial_putc_sub('\b');
c01028e0:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01028e7:	e8 6a ff ff ff       	call   c0102856 <serial_putc_sub>
    }
}
c01028ec:	c9                   	leave  
c01028ed:	c3                   	ret    

c01028ee <cons_intr>:
/* *
 * cons_intr - called by device interrupt routines to feed input
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
c01028ee:	55                   	push   %ebp
c01028ef:	89 e5                	mov    %esp,%ebp
c01028f1:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = (*proc)()) != -1) {
c01028f4:	eb 33                	jmp    c0102929 <cons_intr+0x3b>
        if (c != 0) {
c01028f6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01028fa:	74 2d                	je     c0102929 <cons_intr+0x3b>
            cons.buf[cons.wpos ++] = c;
c01028fc:	a1 64 5a 1c c0       	mov    0xc01c5a64,%eax
c0102901:	8d 50 01             	lea    0x1(%eax),%edx
c0102904:	89 15 64 5a 1c c0    	mov    %edx,0xc01c5a64
c010290a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010290d:	88 90 60 58 1c c0    	mov    %dl,-0x3fe3a7a0(%eax)
            if (cons.wpos == CONSBUFSIZE) {
c0102913:	a1 64 5a 1c c0       	mov    0xc01c5a64,%eax
c0102918:	3d 00 02 00 00       	cmp    $0x200,%eax
c010291d:	75 0a                	jne    c0102929 <cons_intr+0x3b>
                cons.wpos = 0;
c010291f:	c7 05 64 5a 1c c0 00 	movl   $0x0,0xc01c5a64
c0102926:	00 00 00 
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
    int c;
    while ((c = (*proc)()) != -1) {
c0102929:	8b 45 08             	mov    0x8(%ebp),%eax
c010292c:	ff d0                	call   *%eax
c010292e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0102931:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c0102935:	75 bf                	jne    c01028f6 <cons_intr+0x8>
            if (cons.wpos == CONSBUFSIZE) {
                cons.wpos = 0;
            }
        }
    }
}
c0102937:	c9                   	leave  
c0102938:	c3                   	ret    

c0102939 <serial_proc_data>:

/* serial_proc_data - get data from serial port */
static int
serial_proc_data(void) {
c0102939:	55                   	push   %ebp
c010293a:	89 e5                	mov    %esp,%ebp
c010293c:	83 ec 10             	sub    $0x10,%esp
c010293f:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0102945:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0102949:	89 c2                	mov    %eax,%edx
c010294b:	ec                   	in     (%dx),%al
c010294c:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c010294f:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
    if (!(inb(COM1 + COM_LSR) & COM_LSR_DATA)) {
c0102953:	0f b6 c0             	movzbl %al,%eax
c0102956:	83 e0 01             	and    $0x1,%eax
c0102959:	85 c0                	test   %eax,%eax
c010295b:	75 07                	jne    c0102964 <serial_proc_data+0x2b>
        return -1;
c010295d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0102962:	eb 2a                	jmp    c010298e <serial_proc_data+0x55>
c0102964:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010296a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010296e:	89 c2                	mov    %eax,%edx
c0102970:	ec                   	in     (%dx),%al
c0102971:	88 45 f5             	mov    %al,-0xb(%ebp)
    return data;
c0102974:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
    }
    int c = inb(COM1 + COM_RX);
c0102978:	0f b6 c0             	movzbl %al,%eax
c010297b:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (c == 127) {
c010297e:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
c0102982:	75 07                	jne    c010298b <serial_proc_data+0x52>
        c = '\b';
c0102984:	c7 45 fc 08 00 00 00 	movl   $0x8,-0x4(%ebp)
    }
    return c;
c010298b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010298e:	c9                   	leave  
c010298f:	c3                   	ret    

c0102990 <serial_intr>:

/* serial_intr - try to feed input characters from serial port */
void
serial_intr(void) {
c0102990:	55                   	push   %ebp
c0102991:	89 e5                	mov    %esp,%ebp
c0102993:	83 ec 18             	sub    $0x18,%esp
    if (serial_exists) {
c0102996:	a1 48 58 1c c0       	mov    0xc01c5848,%eax
c010299b:	85 c0                	test   %eax,%eax
c010299d:	74 0c                	je     c01029ab <serial_intr+0x1b>
        cons_intr(serial_proc_data);
c010299f:	c7 04 24 39 29 10 c0 	movl   $0xc0102939,(%esp)
c01029a6:	e8 43 ff ff ff       	call   c01028ee <cons_intr>
    }
}
c01029ab:	c9                   	leave  
c01029ac:	c3                   	ret    

c01029ad <kbd_proc_data>:
 *
 * The kbd_proc_data() function gets data from the keyboard.
 * If we finish a character, return it, else 0. And return -1 if no data.
 * */
static int
kbd_proc_data(void) {
c01029ad:	55                   	push   %ebp
c01029ae:	89 e5                	mov    %esp,%ebp
c01029b0:	83 ec 38             	sub    $0x38,%esp
c01029b3:	66 c7 45 f0 64 00    	movw   $0x64,-0x10(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01029b9:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c01029bd:	89 c2                	mov    %eax,%edx
c01029bf:	ec                   	in     (%dx),%al
c01029c0:	88 45 ef             	mov    %al,-0x11(%ebp)
    return data;
c01029c3:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
    int c;
    uint8_t data;
    static uint32_t shift;

    if ((inb(KBSTATP) & KBS_DIB) == 0) {
c01029c7:	0f b6 c0             	movzbl %al,%eax
c01029ca:	83 e0 01             	and    $0x1,%eax
c01029cd:	85 c0                	test   %eax,%eax
c01029cf:	75 0a                	jne    c01029db <kbd_proc_data+0x2e>
        return -1;
c01029d1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01029d6:	e9 59 01 00 00       	jmp    c0102b34 <kbd_proc_data+0x187>
c01029db:	66 c7 45 ec 60 00    	movw   $0x60,-0x14(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01029e1:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c01029e5:	89 c2                	mov    %eax,%edx
c01029e7:	ec                   	in     (%dx),%al
c01029e8:	88 45 eb             	mov    %al,-0x15(%ebp)
    return data;
c01029eb:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
    }

    data = inb(KBDATAP);
c01029ef:	88 45 f3             	mov    %al,-0xd(%ebp)

    if (data == 0xE0) {
c01029f2:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
c01029f6:	75 17                	jne    c0102a0f <kbd_proc_data+0x62>
        // E0 escape character
        shift |= E0ESC;
c01029f8:	a1 68 5a 1c c0       	mov    0xc01c5a68,%eax
c01029fd:	83 c8 40             	or     $0x40,%eax
c0102a00:	a3 68 5a 1c c0       	mov    %eax,0xc01c5a68
        return 0;
c0102a05:	b8 00 00 00 00       	mov    $0x0,%eax
c0102a0a:	e9 25 01 00 00       	jmp    c0102b34 <kbd_proc_data+0x187>
    } else if (data & 0x80) {
c0102a0f:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0102a13:	84 c0                	test   %al,%al
c0102a15:	79 47                	jns    c0102a5e <kbd_proc_data+0xb1>
        // Key released
        data = (shift & E0ESC ? data : data & 0x7F);
c0102a17:	a1 68 5a 1c c0       	mov    0xc01c5a68,%eax
c0102a1c:	83 e0 40             	and    $0x40,%eax
c0102a1f:	85 c0                	test   %eax,%eax
c0102a21:	75 09                	jne    c0102a2c <kbd_proc_data+0x7f>
c0102a23:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0102a27:	83 e0 7f             	and    $0x7f,%eax
c0102a2a:	eb 04                	jmp    c0102a30 <kbd_proc_data+0x83>
c0102a2c:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0102a30:	88 45 f3             	mov    %al,-0xd(%ebp)
        shift &= ~(shiftcode[data] | E0ESC);
c0102a33:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0102a37:	0f b6 80 60 40 13 c0 	movzbl -0x3fecbfa0(%eax),%eax
c0102a3e:	83 c8 40             	or     $0x40,%eax
c0102a41:	0f b6 c0             	movzbl %al,%eax
c0102a44:	f7 d0                	not    %eax
c0102a46:	89 c2                	mov    %eax,%edx
c0102a48:	a1 68 5a 1c c0       	mov    0xc01c5a68,%eax
c0102a4d:	21 d0                	and    %edx,%eax
c0102a4f:	a3 68 5a 1c c0       	mov    %eax,0xc01c5a68
        return 0;
c0102a54:	b8 00 00 00 00       	mov    $0x0,%eax
c0102a59:	e9 d6 00 00 00       	jmp    c0102b34 <kbd_proc_data+0x187>
    } else if (shift & E0ESC) {
c0102a5e:	a1 68 5a 1c c0       	mov    0xc01c5a68,%eax
c0102a63:	83 e0 40             	and    $0x40,%eax
c0102a66:	85 c0                	test   %eax,%eax
c0102a68:	74 11                	je     c0102a7b <kbd_proc_data+0xce>
        // Last character was an E0 escape; or with 0x80
        data |= 0x80;
c0102a6a:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
        shift &= ~E0ESC;
c0102a6e:	a1 68 5a 1c c0       	mov    0xc01c5a68,%eax
c0102a73:	83 e0 bf             	and    $0xffffffbf,%eax
c0102a76:	a3 68 5a 1c c0       	mov    %eax,0xc01c5a68
    }

    shift |= shiftcode[data];
c0102a7b:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0102a7f:	0f b6 80 60 40 13 c0 	movzbl -0x3fecbfa0(%eax),%eax
c0102a86:	0f b6 d0             	movzbl %al,%edx
c0102a89:	a1 68 5a 1c c0       	mov    0xc01c5a68,%eax
c0102a8e:	09 d0                	or     %edx,%eax
c0102a90:	a3 68 5a 1c c0       	mov    %eax,0xc01c5a68
    shift ^= togglecode[data];
c0102a95:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0102a99:	0f b6 80 60 41 13 c0 	movzbl -0x3fecbea0(%eax),%eax
c0102aa0:	0f b6 d0             	movzbl %al,%edx
c0102aa3:	a1 68 5a 1c c0       	mov    0xc01c5a68,%eax
c0102aa8:	31 d0                	xor    %edx,%eax
c0102aaa:	a3 68 5a 1c c0       	mov    %eax,0xc01c5a68

    c = charcode[shift & (CTL | SHIFT)][data];
c0102aaf:	a1 68 5a 1c c0       	mov    0xc01c5a68,%eax
c0102ab4:	83 e0 03             	and    $0x3,%eax
c0102ab7:	8b 14 85 60 45 13 c0 	mov    -0x3fecbaa0(,%eax,4),%edx
c0102abe:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0102ac2:	01 d0                	add    %edx,%eax
c0102ac4:	0f b6 00             	movzbl (%eax),%eax
c0102ac7:	0f b6 c0             	movzbl %al,%eax
c0102aca:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (shift & CAPSLOCK) {
c0102acd:	a1 68 5a 1c c0       	mov    0xc01c5a68,%eax
c0102ad2:	83 e0 08             	and    $0x8,%eax
c0102ad5:	85 c0                	test   %eax,%eax
c0102ad7:	74 22                	je     c0102afb <kbd_proc_data+0x14e>
        if ('a' <= c && c <= 'z')
c0102ad9:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
c0102add:	7e 0c                	jle    c0102aeb <kbd_proc_data+0x13e>
c0102adf:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
c0102ae3:	7f 06                	jg     c0102aeb <kbd_proc_data+0x13e>
            c += 'A' - 'a';
c0102ae5:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
c0102ae9:	eb 10                	jmp    c0102afb <kbd_proc_data+0x14e>
        else if ('A' <= c && c <= 'Z')
c0102aeb:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
c0102aef:	7e 0a                	jle    c0102afb <kbd_proc_data+0x14e>
c0102af1:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
c0102af5:	7f 04                	jg     c0102afb <kbd_proc_data+0x14e>
            c += 'a' - 'A';
c0102af7:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
    }

    // Process special keys
    // Ctrl-Alt-Del: reboot
    if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
c0102afb:	a1 68 5a 1c c0       	mov    0xc01c5a68,%eax
c0102b00:	f7 d0                	not    %eax
c0102b02:	83 e0 06             	and    $0x6,%eax
c0102b05:	85 c0                	test   %eax,%eax
c0102b07:	75 28                	jne    c0102b31 <kbd_proc_data+0x184>
c0102b09:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
c0102b10:	75 1f                	jne    c0102b31 <kbd_proc_data+0x184>
        cprintf("Rebooting!\n");
c0102b12:	c7 04 24 b5 f1 10 c0 	movl   $0xc010f1b5,(%esp)
c0102b19:	e8 bd ec ff ff       	call   c01017db <cprintf>
c0102b1e:	66 c7 45 e8 92 00    	movw   $0x92,-0x18(%ebp)
c0102b24:	c6 45 e7 03          	movb   $0x3,-0x19(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102b28:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
c0102b2c:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c0102b30:	ee                   	out    %al,(%dx)
        outb(0x92, 0x3); // courtesy of Chris Frost
    }
    return c;
c0102b31:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0102b34:	c9                   	leave  
c0102b35:	c3                   	ret    

c0102b36 <kbd_intr>:

/* kbd_intr - try to feed input characters from keyboard */
static void
kbd_intr(void) {
c0102b36:	55                   	push   %ebp
c0102b37:	89 e5                	mov    %esp,%ebp
c0102b39:	83 ec 18             	sub    $0x18,%esp
    cons_intr(kbd_proc_data);
c0102b3c:	c7 04 24 ad 29 10 c0 	movl   $0xc01029ad,(%esp)
c0102b43:	e8 a6 fd ff ff       	call   c01028ee <cons_intr>
}
c0102b48:	c9                   	leave  
c0102b49:	c3                   	ret    

c0102b4a <kbd_init>:

static void
kbd_init(void) {
c0102b4a:	55                   	push   %ebp
c0102b4b:	89 e5                	mov    %esp,%ebp
c0102b4d:	83 ec 18             	sub    $0x18,%esp
    // drain the kbd buffer
    kbd_intr();
c0102b50:	e8 e1 ff ff ff       	call   c0102b36 <kbd_intr>
    pic_enable(IRQ_KBD);
c0102b55:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0102b5c:	e8 b2 09 00 00       	call   c0103513 <pic_enable>
}
c0102b61:	c9                   	leave  
c0102b62:	c3                   	ret    

c0102b63 <cons_init>:

/* cons_init - initializes the console devices */
void
cons_init(void) {
c0102b63:	55                   	push   %ebp
c0102b64:	89 e5                	mov    %esp,%ebp
c0102b66:	83 ec 18             	sub    $0x18,%esp
    cga_init();
c0102b69:	e8 93 f8 ff ff       	call   c0102401 <cga_init>
    serial_init();
c0102b6e:	e8 74 f9 ff ff       	call   c01024e7 <serial_init>
    kbd_init();
c0102b73:	e8 d2 ff ff ff       	call   c0102b4a <kbd_init>
    if (!serial_exists) {
c0102b78:	a1 48 58 1c c0       	mov    0xc01c5848,%eax
c0102b7d:	85 c0                	test   %eax,%eax
c0102b7f:	75 0c                	jne    c0102b8d <cons_init+0x2a>
        cprintf("serial port does not exist!!\n");
c0102b81:	c7 04 24 c1 f1 10 c0 	movl   $0xc010f1c1,(%esp)
c0102b88:	e8 4e ec ff ff       	call   c01017db <cprintf>
    }
}
c0102b8d:	c9                   	leave  
c0102b8e:	c3                   	ret    

c0102b8f <cons_putc>:

/* cons_putc - print a single character @c to console devices */
void
cons_putc(int c) {
c0102b8f:	55                   	push   %ebp
c0102b90:	89 e5                	mov    %esp,%ebp
c0102b92:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0102b95:	e8 e2 f7 ff ff       	call   c010237c <__intr_save>
c0102b9a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        lpt_putc(c);
c0102b9d:	8b 45 08             	mov    0x8(%ebp),%eax
c0102ba0:	89 04 24             	mov    %eax,(%esp)
c0102ba3:	e8 9b fa ff ff       	call   c0102643 <lpt_putc>
        cga_putc(c);
c0102ba8:	8b 45 08             	mov    0x8(%ebp),%eax
c0102bab:	89 04 24             	mov    %eax,(%esp)
c0102bae:	e8 cf fa ff ff       	call   c0102682 <cga_putc>
        serial_putc(c);
c0102bb3:	8b 45 08             	mov    0x8(%ebp),%eax
c0102bb6:	89 04 24             	mov    %eax,(%esp)
c0102bb9:	e8 f1 fc ff ff       	call   c01028af <serial_putc>
    }
    local_intr_restore(intr_flag);
c0102bbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102bc1:	89 04 24             	mov    %eax,(%esp)
c0102bc4:	e8 dd f7 ff ff       	call   c01023a6 <__intr_restore>
}
c0102bc9:	c9                   	leave  
c0102bca:	c3                   	ret    

c0102bcb <cons_getc>:
/* *
 * cons_getc - return the next input character from console,
 * or 0 if none waiting.
 * */
int
cons_getc(void) {
c0102bcb:	55                   	push   %ebp
c0102bcc:	89 e5                	mov    %esp,%ebp
c0102bce:	83 ec 28             	sub    $0x28,%esp
    int c = 0;
c0102bd1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c0102bd8:	e8 9f f7 ff ff       	call   c010237c <__intr_save>
c0102bdd:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        // poll for any pending input characters,
        // so that this function works even when interrupts are disabled
        // (e.g., when called from the kernel monitor).
        serial_intr();
c0102be0:	e8 ab fd ff ff       	call   c0102990 <serial_intr>
        kbd_intr();
c0102be5:	e8 4c ff ff ff       	call   c0102b36 <kbd_intr>

        // grab the next character from the input buffer.
        if (cons.rpos != cons.wpos) {
c0102bea:	8b 15 60 5a 1c c0    	mov    0xc01c5a60,%edx
c0102bf0:	a1 64 5a 1c c0       	mov    0xc01c5a64,%eax
c0102bf5:	39 c2                	cmp    %eax,%edx
c0102bf7:	74 31                	je     c0102c2a <cons_getc+0x5f>
            c = cons.buf[cons.rpos ++];
c0102bf9:	a1 60 5a 1c c0       	mov    0xc01c5a60,%eax
c0102bfe:	8d 50 01             	lea    0x1(%eax),%edx
c0102c01:	89 15 60 5a 1c c0    	mov    %edx,0xc01c5a60
c0102c07:	0f b6 80 60 58 1c c0 	movzbl -0x3fe3a7a0(%eax),%eax
c0102c0e:	0f b6 c0             	movzbl %al,%eax
c0102c11:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (cons.rpos == CONSBUFSIZE) {
c0102c14:	a1 60 5a 1c c0       	mov    0xc01c5a60,%eax
c0102c19:	3d 00 02 00 00       	cmp    $0x200,%eax
c0102c1e:	75 0a                	jne    c0102c2a <cons_getc+0x5f>
                cons.rpos = 0;
c0102c20:	c7 05 60 5a 1c c0 00 	movl   $0x0,0xc01c5a60
c0102c27:	00 00 00 
            }
        }
    }
    local_intr_restore(intr_flag);
c0102c2a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0102c2d:	89 04 24             	mov    %eax,(%esp)
c0102c30:	e8 71 f7 ff ff       	call   c01023a6 <__intr_restore>
    return c;
c0102c35:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0102c38:	c9                   	leave  
c0102c39:	c3                   	ret    

c0102c3a <ide_wait_ready>:
    unsigned int size;          // Size in Sectors
    unsigned char model[41];    // Model in String
} ide_devices[MAX_IDE];

static int
ide_wait_ready(unsigned short iobase, bool check_error) {
c0102c3a:	55                   	push   %ebp
c0102c3b:	89 e5                	mov    %esp,%ebp
c0102c3d:	83 ec 14             	sub    $0x14,%esp
c0102c40:	8b 45 08             	mov    0x8(%ebp),%eax
c0102c43:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    int r;
    while ((r = inb(iobase + ISA_STATUS)) & IDE_BSY)
c0102c47:	90                   	nop
c0102c48:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102c4c:	83 c0 07             	add    $0x7,%eax
c0102c4f:	0f b7 c0             	movzwl %ax,%eax
c0102c52:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0102c56:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0102c5a:	89 c2                	mov    %eax,%edx
c0102c5c:	ec                   	in     (%dx),%al
c0102c5d:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c0102c60:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c0102c64:	0f b6 c0             	movzbl %al,%eax
c0102c67:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0102c6a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102c6d:	25 80 00 00 00       	and    $0x80,%eax
c0102c72:	85 c0                	test   %eax,%eax
c0102c74:	75 d2                	jne    c0102c48 <ide_wait_ready+0xe>
        /* nothing */;
    if (check_error && (r & (IDE_DF | IDE_ERR)) != 0) {
c0102c76:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0102c7a:	74 11                	je     c0102c8d <ide_wait_ready+0x53>
c0102c7c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102c7f:	83 e0 21             	and    $0x21,%eax
c0102c82:	85 c0                	test   %eax,%eax
c0102c84:	74 07                	je     c0102c8d <ide_wait_ready+0x53>
        return -1;
c0102c86:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0102c8b:	eb 05                	jmp    c0102c92 <ide_wait_ready+0x58>
    }
    return 0;
c0102c8d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0102c92:	c9                   	leave  
c0102c93:	c3                   	ret    

c0102c94 <ide_init>:

void
ide_init(void) {
c0102c94:	55                   	push   %ebp
c0102c95:	89 e5                	mov    %esp,%ebp
c0102c97:	57                   	push   %edi
c0102c98:	53                   	push   %ebx
c0102c99:	81 ec 50 02 00 00    	sub    $0x250,%esp
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c0102c9f:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%ebp)
c0102ca5:	e9 d6 02 00 00       	jmp    c0102f80 <ide_init+0x2ec>
        /* assume that no device here */
        ide_devices[ideno].valid = 0;
c0102caa:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0102cae:	c1 e0 03             	shl    $0x3,%eax
c0102cb1:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0102cb8:	29 c2                	sub    %eax,%edx
c0102cba:	8d 82 80 5a 1c c0    	lea    -0x3fe3a580(%edx),%eax
c0102cc0:	c6 00 00             	movb   $0x0,(%eax)

        iobase = IO_BASE(ideno);
c0102cc3:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0102cc7:	66 d1 e8             	shr    %ax
c0102cca:	0f b7 c0             	movzwl %ax,%eax
c0102ccd:	0f b7 04 85 e0 f1 10 	movzwl -0x3fef0e20(,%eax,4),%eax
c0102cd4:	c0 
c0102cd5:	66 89 45 ea          	mov    %ax,-0x16(%ebp)

        /* wait device ready */
        ide_wait_ready(iobase, 0);
c0102cd9:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0102cdd:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0102ce4:	00 
c0102ce5:	89 04 24             	mov    %eax,(%esp)
c0102ce8:	e8 4d ff ff ff       	call   c0102c3a <ide_wait_ready>

        /* step1: select drive */
        outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4));
c0102ced:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0102cf1:	83 e0 01             	and    $0x1,%eax
c0102cf4:	c1 e0 04             	shl    $0x4,%eax
c0102cf7:	83 c8 e0             	or     $0xffffffe0,%eax
c0102cfa:	0f b6 c0             	movzbl %al,%eax
c0102cfd:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0102d01:	83 c2 06             	add    $0x6,%edx
c0102d04:	0f b7 d2             	movzwl %dx,%edx
c0102d07:	66 89 55 d2          	mov    %dx,-0x2e(%ebp)
c0102d0b:	88 45 d1             	mov    %al,-0x2f(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102d0e:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c0102d12:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c0102d16:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c0102d17:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0102d1b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0102d22:	00 
c0102d23:	89 04 24             	mov    %eax,(%esp)
c0102d26:	e8 0f ff ff ff       	call   c0102c3a <ide_wait_ready>

        /* step2: send ATA identify command */
        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
c0102d2b:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0102d2f:	83 c0 07             	add    $0x7,%eax
c0102d32:	0f b7 c0             	movzwl %ax,%eax
c0102d35:	66 89 45 ce          	mov    %ax,-0x32(%ebp)
c0102d39:	c6 45 cd ec          	movb   $0xec,-0x33(%ebp)
c0102d3d:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
c0102d41:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
c0102d45:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c0102d46:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0102d4a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0102d51:	00 
c0102d52:	89 04 24             	mov    %eax,(%esp)
c0102d55:	e8 e0 fe ff ff       	call   c0102c3a <ide_wait_ready>

        /* step3: polling */
        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
c0102d5a:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0102d5e:	83 c0 07             	add    $0x7,%eax
c0102d61:	0f b7 c0             	movzwl %ax,%eax
c0102d64:	66 89 45 ca          	mov    %ax,-0x36(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0102d68:	0f b7 45 ca          	movzwl -0x36(%ebp),%eax
c0102d6c:	89 c2                	mov    %eax,%edx
c0102d6e:	ec                   	in     (%dx),%al
c0102d6f:	88 45 c9             	mov    %al,-0x37(%ebp)
    return data;
c0102d72:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c0102d76:	84 c0                	test   %al,%al
c0102d78:	0f 84 f7 01 00 00    	je     c0102f75 <ide_init+0x2e1>
c0102d7e:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0102d82:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0102d89:	00 
c0102d8a:	89 04 24             	mov    %eax,(%esp)
c0102d8d:	e8 a8 fe ff ff       	call   c0102c3a <ide_wait_ready>
c0102d92:	85 c0                	test   %eax,%eax
c0102d94:	0f 85 db 01 00 00    	jne    c0102f75 <ide_init+0x2e1>
            continue ;
        }

        /* device is ok */
        ide_devices[ideno].valid = 1;
c0102d9a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0102d9e:	c1 e0 03             	shl    $0x3,%eax
c0102da1:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0102da8:	29 c2                	sub    %eax,%edx
c0102daa:	8d 82 80 5a 1c c0    	lea    -0x3fe3a580(%edx),%eax
c0102db0:	c6 00 01             	movb   $0x1,(%eax)

        /* read identification space of the device */
        unsigned int buffer[128];
        insl(iobase + ISA_DATA, buffer, sizeof(buffer) / sizeof(unsigned int));
c0102db3:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0102db7:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0102dba:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c0102dc0:	89 45 c0             	mov    %eax,-0x40(%ebp)
c0102dc3:	c7 45 bc 80 00 00 00 	movl   $0x80,-0x44(%ebp)
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0102dca:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0102dcd:	8b 4d c0             	mov    -0x40(%ebp),%ecx
c0102dd0:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0102dd3:	89 cb                	mov    %ecx,%ebx
c0102dd5:	89 df                	mov    %ebx,%edi
c0102dd7:	89 c1                	mov    %eax,%ecx
c0102dd9:	fc                   	cld    
c0102dda:	f2 6d                	repnz insl (%dx),%es:(%edi)
c0102ddc:	89 c8                	mov    %ecx,%eax
c0102dde:	89 fb                	mov    %edi,%ebx
c0102de0:	89 5d c0             	mov    %ebx,-0x40(%ebp)
c0102de3:	89 45 bc             	mov    %eax,-0x44(%ebp)

        unsigned char *ident = (unsigned char *)buffer;
c0102de6:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c0102dec:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        unsigned int sectors;
        unsigned int cmdsets = *(unsigned int *)(ident + IDE_IDENT_CMDSETS);
c0102def:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0102df2:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
c0102df8:	89 45 e0             	mov    %eax,-0x20(%ebp)
        /* device use 48-bits or 28-bits addressing */
        if (cmdsets & (1 << 26)) {
c0102dfb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0102dfe:	25 00 00 00 04       	and    $0x4000000,%eax
c0102e03:	85 c0                	test   %eax,%eax
c0102e05:	74 0e                	je     c0102e15 <ide_init+0x181>
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA_EXT);
c0102e07:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0102e0a:	8b 80 c8 00 00 00    	mov    0xc8(%eax),%eax
c0102e10:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0102e13:	eb 09                	jmp    c0102e1e <ide_init+0x18a>
        }
        else {
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA);
c0102e15:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0102e18:	8b 40 78             	mov    0x78(%eax),%eax
c0102e1b:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
        ide_devices[ideno].sets = cmdsets;
c0102e1e:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0102e22:	c1 e0 03             	shl    $0x3,%eax
c0102e25:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0102e2c:	29 c2                	sub    %eax,%edx
c0102e2e:	81 c2 80 5a 1c c0    	add    $0xc01c5a80,%edx
c0102e34:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0102e37:	89 42 04             	mov    %eax,0x4(%edx)
        ide_devices[ideno].size = sectors;
c0102e3a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0102e3e:	c1 e0 03             	shl    $0x3,%eax
c0102e41:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0102e48:	29 c2                	sub    %eax,%edx
c0102e4a:	81 c2 80 5a 1c c0    	add    $0xc01c5a80,%edx
c0102e50:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0102e53:	89 42 08             	mov    %eax,0x8(%edx)

        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);
c0102e56:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0102e59:	83 c0 62             	add    $0x62,%eax
c0102e5c:	0f b7 00             	movzwl (%eax),%eax
c0102e5f:	0f b7 c0             	movzwl %ax,%eax
c0102e62:	25 00 02 00 00       	and    $0x200,%eax
c0102e67:	85 c0                	test   %eax,%eax
c0102e69:	75 24                	jne    c0102e8f <ide_init+0x1fb>
c0102e6b:	c7 44 24 0c e8 f1 10 	movl   $0xc010f1e8,0xc(%esp)
c0102e72:	c0 
c0102e73:	c7 44 24 08 2b f2 10 	movl   $0xc010f22b,0x8(%esp)
c0102e7a:	c0 
c0102e7b:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
c0102e82:	00 
c0102e83:	c7 04 24 40 f2 10 c0 	movl   $0xc010f240,(%esp)
c0102e8a:	e8 ce f3 ff ff       	call   c010225d <__panic>

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
c0102e8f:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0102e93:	c1 e0 03             	shl    $0x3,%eax
c0102e96:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0102e9d:	29 c2                	sub    %eax,%edx
c0102e9f:	8d 82 80 5a 1c c0    	lea    -0x3fe3a580(%edx),%eax
c0102ea5:	83 c0 0c             	add    $0xc,%eax
c0102ea8:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0102eab:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0102eae:	83 c0 36             	add    $0x36,%eax
c0102eb1:	89 45 d8             	mov    %eax,-0x28(%ebp)
        unsigned int i, length = 40;
c0102eb4:	c7 45 d4 28 00 00 00 	movl   $0x28,-0x2c(%ebp)
        for (i = 0; i < length; i += 2) {
c0102ebb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0102ec2:	eb 34                	jmp    c0102ef8 <ide_init+0x264>
            model[i] = data[i + 1], model[i + 1] = data[i];
c0102ec4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0102ec7:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0102eca:	01 c2                	add    %eax,%edx
c0102ecc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0102ecf:	8d 48 01             	lea    0x1(%eax),%ecx
c0102ed2:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0102ed5:	01 c8                	add    %ecx,%eax
c0102ed7:	0f b6 00             	movzbl (%eax),%eax
c0102eda:	88 02                	mov    %al,(%edx)
c0102edc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0102edf:	8d 50 01             	lea    0x1(%eax),%edx
c0102ee2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0102ee5:	01 c2                	add    %eax,%edx
c0102ee7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0102eea:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c0102eed:	01 c8                	add    %ecx,%eax
c0102eef:	0f b6 00             	movzbl (%eax),%eax
c0102ef2:	88 02                	mov    %al,(%edx)
        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
        unsigned int i, length = 40;
        for (i = 0; i < length; i += 2) {
c0102ef4:	83 45 ec 02          	addl   $0x2,-0x14(%ebp)
c0102ef8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0102efb:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0102efe:	72 c4                	jb     c0102ec4 <ide_init+0x230>
            model[i] = data[i + 1], model[i + 1] = data[i];
        }
        do {
            model[i] = '\0';
c0102f00:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0102f03:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0102f06:	01 d0                	add    %edx,%eax
c0102f08:	c6 00 00             	movb   $0x0,(%eax)
        } while (i -- > 0 && model[i] == ' ');
c0102f0b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0102f0e:	8d 50 ff             	lea    -0x1(%eax),%edx
c0102f11:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0102f14:	85 c0                	test   %eax,%eax
c0102f16:	74 0f                	je     c0102f27 <ide_init+0x293>
c0102f18:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0102f1b:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0102f1e:	01 d0                	add    %edx,%eax
c0102f20:	0f b6 00             	movzbl (%eax),%eax
c0102f23:	3c 20                	cmp    $0x20,%al
c0102f25:	74 d9                	je     c0102f00 <ide_init+0x26c>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
c0102f27:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0102f2b:	c1 e0 03             	shl    $0x3,%eax
c0102f2e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0102f35:	29 c2                	sub    %eax,%edx
c0102f37:	8d 82 80 5a 1c c0    	lea    -0x3fe3a580(%edx),%eax
c0102f3d:	8d 48 0c             	lea    0xc(%eax),%ecx
c0102f40:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0102f44:	c1 e0 03             	shl    $0x3,%eax
c0102f47:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0102f4e:	29 c2                	sub    %eax,%edx
c0102f50:	8d 82 80 5a 1c c0    	lea    -0x3fe3a580(%edx),%eax
c0102f56:	8b 50 08             	mov    0x8(%eax),%edx
c0102f59:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0102f5d:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0102f61:	89 54 24 08          	mov    %edx,0x8(%esp)
c0102f65:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102f69:	c7 04 24 52 f2 10 c0 	movl   $0xc010f252,(%esp)
c0102f70:	e8 66 e8 ff ff       	call   c01017db <cprintf>

void
ide_init(void) {
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c0102f75:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0102f79:	83 c0 01             	add    $0x1,%eax
c0102f7c:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
c0102f80:	66 83 7d f6 03       	cmpw   $0x3,-0xa(%ebp)
c0102f85:	0f 86 1f fd ff ff    	jbe    c0102caa <ide_init+0x16>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
    }

    // enable ide interrupt
    pic_enable(IRQ_IDE1);
c0102f8b:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
c0102f92:	e8 7c 05 00 00       	call   c0103513 <pic_enable>
    pic_enable(IRQ_IDE2);
c0102f97:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
c0102f9e:	e8 70 05 00 00       	call   c0103513 <pic_enable>
}
c0102fa3:	81 c4 50 02 00 00    	add    $0x250,%esp
c0102fa9:	5b                   	pop    %ebx
c0102faa:	5f                   	pop    %edi
c0102fab:	5d                   	pop    %ebp
c0102fac:	c3                   	ret    

c0102fad <ide_device_valid>:

bool
ide_device_valid(unsigned short ideno) {
c0102fad:	55                   	push   %ebp
c0102fae:	89 e5                	mov    %esp,%ebp
c0102fb0:	83 ec 04             	sub    $0x4,%esp
c0102fb3:	8b 45 08             	mov    0x8(%ebp),%eax
c0102fb6:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return VALID_IDE(ideno);
c0102fba:	66 83 7d fc 03       	cmpw   $0x3,-0x4(%ebp)
c0102fbf:	77 24                	ja     c0102fe5 <ide_device_valid+0x38>
c0102fc1:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0102fc5:	c1 e0 03             	shl    $0x3,%eax
c0102fc8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0102fcf:	29 c2                	sub    %eax,%edx
c0102fd1:	8d 82 80 5a 1c c0    	lea    -0x3fe3a580(%edx),%eax
c0102fd7:	0f b6 00             	movzbl (%eax),%eax
c0102fda:	84 c0                	test   %al,%al
c0102fdc:	74 07                	je     c0102fe5 <ide_device_valid+0x38>
c0102fde:	b8 01 00 00 00       	mov    $0x1,%eax
c0102fe3:	eb 05                	jmp    c0102fea <ide_device_valid+0x3d>
c0102fe5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0102fea:	c9                   	leave  
c0102feb:	c3                   	ret    

c0102fec <ide_device_size>:

size_t
ide_device_size(unsigned short ideno) {
c0102fec:	55                   	push   %ebp
c0102fed:	89 e5                	mov    %esp,%ebp
c0102fef:	83 ec 08             	sub    $0x8,%esp
c0102ff2:	8b 45 08             	mov    0x8(%ebp),%eax
c0102ff5:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    if (ide_device_valid(ideno)) {
c0102ff9:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0102ffd:	89 04 24             	mov    %eax,(%esp)
c0103000:	e8 a8 ff ff ff       	call   c0102fad <ide_device_valid>
c0103005:	85 c0                	test   %eax,%eax
c0103007:	74 1b                	je     c0103024 <ide_device_size+0x38>
        return ide_devices[ideno].size;
c0103009:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c010300d:	c1 e0 03             	shl    $0x3,%eax
c0103010:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0103017:	29 c2                	sub    %eax,%edx
c0103019:	8d 82 80 5a 1c c0    	lea    -0x3fe3a580(%edx),%eax
c010301f:	8b 40 08             	mov    0x8(%eax),%eax
c0103022:	eb 05                	jmp    c0103029 <ide_device_size+0x3d>
    }
    return 0;
c0103024:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0103029:	c9                   	leave  
c010302a:	c3                   	ret    

c010302b <ide_read_secs>:

int
ide_read_secs(unsigned short ideno, uint32_t secno, void *dst, size_t nsecs) {
c010302b:	55                   	push   %ebp
c010302c:	89 e5                	mov    %esp,%ebp
c010302e:	57                   	push   %edi
c010302f:	53                   	push   %ebx
c0103030:	83 ec 50             	sub    $0x50,%esp
c0103033:	8b 45 08             	mov    0x8(%ebp),%eax
c0103036:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c010303a:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0103041:	77 24                	ja     c0103067 <ide_read_secs+0x3c>
c0103043:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c0103048:	77 1d                	ja     c0103067 <ide_read_secs+0x3c>
c010304a:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c010304e:	c1 e0 03             	shl    $0x3,%eax
c0103051:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0103058:	29 c2                	sub    %eax,%edx
c010305a:	8d 82 80 5a 1c c0    	lea    -0x3fe3a580(%edx),%eax
c0103060:	0f b6 00             	movzbl (%eax),%eax
c0103063:	84 c0                	test   %al,%al
c0103065:	75 24                	jne    c010308b <ide_read_secs+0x60>
c0103067:	c7 44 24 0c 70 f2 10 	movl   $0xc010f270,0xc(%esp)
c010306e:	c0 
c010306f:	c7 44 24 08 2b f2 10 	movl   $0xc010f22b,0x8(%esp)
c0103076:	c0 
c0103077:	c7 44 24 04 9f 00 00 	movl   $0x9f,0x4(%esp)
c010307e:	00 
c010307f:	c7 04 24 40 f2 10 c0 	movl   $0xc010f240,(%esp)
c0103086:	e8 d2 f1 ff ff       	call   c010225d <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c010308b:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c0103092:	77 0f                	ja     c01030a3 <ide_read_secs+0x78>
c0103094:	8b 45 14             	mov    0x14(%ebp),%eax
c0103097:	8b 55 0c             	mov    0xc(%ebp),%edx
c010309a:	01 d0                	add    %edx,%eax
c010309c:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c01030a1:	76 24                	jbe    c01030c7 <ide_read_secs+0x9c>
c01030a3:	c7 44 24 0c 98 f2 10 	movl   $0xc010f298,0xc(%esp)
c01030aa:	c0 
c01030ab:	c7 44 24 08 2b f2 10 	movl   $0xc010f22b,0x8(%esp)
c01030b2:	c0 
c01030b3:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c01030ba:	00 
c01030bb:	c7 04 24 40 f2 10 c0 	movl   $0xc010f240,(%esp)
c01030c2:	e8 96 f1 ff ff       	call   c010225d <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c01030c7:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01030cb:	66 d1 e8             	shr    %ax
c01030ce:	0f b7 c0             	movzwl %ax,%eax
c01030d1:	0f b7 04 85 e0 f1 10 	movzwl -0x3fef0e20(,%eax,4),%eax
c01030d8:	c0 
c01030d9:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c01030dd:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01030e1:	66 d1 e8             	shr    %ax
c01030e4:	0f b7 c0             	movzwl %ax,%eax
c01030e7:	0f b7 04 85 e2 f1 10 	movzwl -0x3fef0e1e(,%eax,4),%eax
c01030ee:	c0 
c01030ef:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c01030f3:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01030f7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01030fe:	00 
c01030ff:	89 04 24             	mov    %eax,(%esp)
c0103102:	e8 33 fb ff ff       	call   c0102c3a <ide_wait_ready>

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0103107:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c010310b:	83 c0 02             	add    $0x2,%eax
c010310e:	0f b7 c0             	movzwl %ax,%eax
c0103111:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0103115:	c6 45 ed 00          	movb   $0x0,-0x13(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0103119:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c010311d:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0103121:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0103122:	8b 45 14             	mov    0x14(%ebp),%eax
c0103125:	0f b6 c0             	movzbl %al,%eax
c0103128:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010312c:	83 c2 02             	add    $0x2,%edx
c010312f:	0f b7 d2             	movzwl %dx,%edx
c0103132:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0103136:	88 45 e9             	mov    %al,-0x17(%ebp)
c0103139:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c010313d:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0103141:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0103142:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103145:	0f b6 c0             	movzbl %al,%eax
c0103148:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010314c:	83 c2 03             	add    $0x3,%edx
c010314f:	0f b7 d2             	movzwl %dx,%edx
c0103152:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0103156:	88 45 e5             	mov    %al,-0x1b(%ebp)
c0103159:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c010315d:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0103161:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c0103162:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103165:	c1 e8 08             	shr    $0x8,%eax
c0103168:	0f b6 c0             	movzbl %al,%eax
c010316b:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010316f:	83 c2 04             	add    $0x4,%edx
c0103172:	0f b7 d2             	movzwl %dx,%edx
c0103175:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c0103179:	88 45 e1             	mov    %al,-0x1f(%ebp)
c010317c:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0103180:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0103184:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c0103185:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103188:	c1 e8 10             	shr    $0x10,%eax
c010318b:	0f b6 c0             	movzbl %al,%eax
c010318e:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0103192:	83 c2 05             	add    $0x5,%edx
c0103195:	0f b7 d2             	movzwl %dx,%edx
c0103198:	66 89 55 de          	mov    %dx,-0x22(%ebp)
c010319c:	88 45 dd             	mov    %al,-0x23(%ebp)
c010319f:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c01031a3:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c01031a7:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c01031a8:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01031ac:	83 e0 01             	and    $0x1,%eax
c01031af:	c1 e0 04             	shl    $0x4,%eax
c01031b2:	89 c2                	mov    %eax,%edx
c01031b4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01031b7:	c1 e8 18             	shr    $0x18,%eax
c01031ba:	83 e0 0f             	and    $0xf,%eax
c01031bd:	09 d0                	or     %edx,%eax
c01031bf:	83 c8 e0             	or     $0xffffffe0,%eax
c01031c2:	0f b6 c0             	movzbl %al,%eax
c01031c5:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01031c9:	83 c2 06             	add    $0x6,%edx
c01031cc:	0f b7 d2             	movzwl %dx,%edx
c01031cf:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c01031d3:	88 45 d9             	mov    %al,-0x27(%ebp)
c01031d6:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c01031da:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c01031de:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);
c01031df:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01031e3:	83 c0 07             	add    $0x7,%eax
c01031e6:	0f b7 c0             	movzwl %ax,%eax
c01031e9:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
c01031ed:	c6 45 d5 20          	movb   $0x20,-0x2b(%ebp)
c01031f1:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c01031f5:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c01031f9:	ee                   	out    %al,(%dx)

    int ret = 0;
c01031fa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0103201:	eb 5a                	jmp    c010325d <ide_read_secs+0x232>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c0103203:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0103207:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010320e:	00 
c010320f:	89 04 24             	mov    %eax,(%esp)
c0103212:	e8 23 fa ff ff       	call   c0102c3a <ide_wait_ready>
c0103217:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010321a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010321e:	74 02                	je     c0103222 <ide_read_secs+0x1f7>
            goto out;
c0103220:	eb 41                	jmp    c0103263 <ide_read_secs+0x238>
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
c0103222:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0103226:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0103229:	8b 45 10             	mov    0x10(%ebp),%eax
c010322c:	89 45 cc             	mov    %eax,-0x34(%ebp)
c010322f:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
    return data;
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0103236:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0103239:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c010323c:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010323f:	89 cb                	mov    %ecx,%ebx
c0103241:	89 df                	mov    %ebx,%edi
c0103243:	89 c1                	mov    %eax,%ecx
c0103245:	fc                   	cld    
c0103246:	f2 6d                	repnz insl (%dx),%es:(%edi)
c0103248:	89 c8                	mov    %ecx,%eax
c010324a:	89 fb                	mov    %edi,%ebx
c010324c:	89 5d cc             	mov    %ebx,-0x34(%ebp)
c010324f:	89 45 c8             	mov    %eax,-0x38(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);

    int ret = 0;
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0103252:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0103256:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c010325d:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0103261:	75 a0                	jne    c0103203 <ide_read_secs+0x1d8>
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c0103263:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0103266:	83 c4 50             	add    $0x50,%esp
c0103269:	5b                   	pop    %ebx
c010326a:	5f                   	pop    %edi
c010326b:	5d                   	pop    %ebp
c010326c:	c3                   	ret    

c010326d <ide_write_secs>:

int
ide_write_secs(unsigned short ideno, uint32_t secno, const void *src, size_t nsecs) {
c010326d:	55                   	push   %ebp
c010326e:	89 e5                	mov    %esp,%ebp
c0103270:	56                   	push   %esi
c0103271:	53                   	push   %ebx
c0103272:	83 ec 50             	sub    $0x50,%esp
c0103275:	8b 45 08             	mov    0x8(%ebp),%eax
c0103278:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c010327c:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0103283:	77 24                	ja     c01032a9 <ide_write_secs+0x3c>
c0103285:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c010328a:	77 1d                	ja     c01032a9 <ide_write_secs+0x3c>
c010328c:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0103290:	c1 e0 03             	shl    $0x3,%eax
c0103293:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010329a:	29 c2                	sub    %eax,%edx
c010329c:	8d 82 80 5a 1c c0    	lea    -0x3fe3a580(%edx),%eax
c01032a2:	0f b6 00             	movzbl (%eax),%eax
c01032a5:	84 c0                	test   %al,%al
c01032a7:	75 24                	jne    c01032cd <ide_write_secs+0x60>
c01032a9:	c7 44 24 0c 70 f2 10 	movl   $0xc010f270,0xc(%esp)
c01032b0:	c0 
c01032b1:	c7 44 24 08 2b f2 10 	movl   $0xc010f22b,0x8(%esp)
c01032b8:	c0 
c01032b9:	c7 44 24 04 bc 00 00 	movl   $0xbc,0x4(%esp)
c01032c0:	00 
c01032c1:	c7 04 24 40 f2 10 c0 	movl   $0xc010f240,(%esp)
c01032c8:	e8 90 ef ff ff       	call   c010225d <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c01032cd:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c01032d4:	77 0f                	ja     c01032e5 <ide_write_secs+0x78>
c01032d6:	8b 45 14             	mov    0x14(%ebp),%eax
c01032d9:	8b 55 0c             	mov    0xc(%ebp),%edx
c01032dc:	01 d0                	add    %edx,%eax
c01032de:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c01032e3:	76 24                	jbe    c0103309 <ide_write_secs+0x9c>
c01032e5:	c7 44 24 0c 98 f2 10 	movl   $0xc010f298,0xc(%esp)
c01032ec:	c0 
c01032ed:	c7 44 24 08 2b f2 10 	movl   $0xc010f22b,0x8(%esp)
c01032f4:	c0 
c01032f5:	c7 44 24 04 bd 00 00 	movl   $0xbd,0x4(%esp)
c01032fc:	00 
c01032fd:	c7 04 24 40 f2 10 c0 	movl   $0xc010f240,(%esp)
c0103304:	e8 54 ef ff ff       	call   c010225d <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c0103309:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c010330d:	66 d1 e8             	shr    %ax
c0103310:	0f b7 c0             	movzwl %ax,%eax
c0103313:	0f b7 04 85 e0 f1 10 	movzwl -0x3fef0e20(,%eax,4),%eax
c010331a:	c0 
c010331b:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c010331f:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0103323:	66 d1 e8             	shr    %ax
c0103326:	0f b7 c0             	movzwl %ax,%eax
c0103329:	0f b7 04 85 e2 f1 10 	movzwl -0x3fef0e1e(,%eax,4),%eax
c0103330:	c0 
c0103331:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c0103335:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0103339:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0103340:	00 
c0103341:	89 04 24             	mov    %eax,(%esp)
c0103344:	e8 f1 f8 ff ff       	call   c0102c3a <ide_wait_ready>

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0103349:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c010334d:	83 c0 02             	add    $0x2,%eax
c0103350:	0f b7 c0             	movzwl %ax,%eax
c0103353:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0103357:	c6 45 ed 00          	movb   $0x0,-0x13(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010335b:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c010335f:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0103363:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0103364:	8b 45 14             	mov    0x14(%ebp),%eax
c0103367:	0f b6 c0             	movzbl %al,%eax
c010336a:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010336e:	83 c2 02             	add    $0x2,%edx
c0103371:	0f b7 d2             	movzwl %dx,%edx
c0103374:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0103378:	88 45 e9             	mov    %al,-0x17(%ebp)
c010337b:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c010337f:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0103383:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0103384:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103387:	0f b6 c0             	movzbl %al,%eax
c010338a:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010338e:	83 c2 03             	add    $0x3,%edx
c0103391:	0f b7 d2             	movzwl %dx,%edx
c0103394:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0103398:	88 45 e5             	mov    %al,-0x1b(%ebp)
c010339b:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c010339f:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c01033a3:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c01033a4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01033a7:	c1 e8 08             	shr    $0x8,%eax
c01033aa:	0f b6 c0             	movzbl %al,%eax
c01033ad:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01033b1:	83 c2 04             	add    $0x4,%edx
c01033b4:	0f b7 d2             	movzwl %dx,%edx
c01033b7:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c01033bb:	88 45 e1             	mov    %al,-0x1f(%ebp)
c01033be:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c01033c2:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c01033c6:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c01033c7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01033ca:	c1 e8 10             	shr    $0x10,%eax
c01033cd:	0f b6 c0             	movzbl %al,%eax
c01033d0:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01033d4:	83 c2 05             	add    $0x5,%edx
c01033d7:	0f b7 d2             	movzwl %dx,%edx
c01033da:	66 89 55 de          	mov    %dx,-0x22(%ebp)
c01033de:	88 45 dd             	mov    %al,-0x23(%ebp)
c01033e1:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c01033e5:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c01033e9:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c01033ea:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01033ee:	83 e0 01             	and    $0x1,%eax
c01033f1:	c1 e0 04             	shl    $0x4,%eax
c01033f4:	89 c2                	mov    %eax,%edx
c01033f6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01033f9:	c1 e8 18             	shr    $0x18,%eax
c01033fc:	83 e0 0f             	and    $0xf,%eax
c01033ff:	09 d0                	or     %edx,%eax
c0103401:	83 c8 e0             	or     $0xffffffe0,%eax
c0103404:	0f b6 c0             	movzbl %al,%eax
c0103407:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010340b:	83 c2 06             	add    $0x6,%edx
c010340e:	0f b7 d2             	movzwl %dx,%edx
c0103411:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c0103415:	88 45 d9             	mov    %al,-0x27(%ebp)
c0103418:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c010341c:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0103420:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);
c0103421:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0103425:	83 c0 07             	add    $0x7,%eax
c0103428:	0f b7 c0             	movzwl %ax,%eax
c010342b:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
c010342f:	c6 45 d5 30          	movb   $0x30,-0x2b(%ebp)
c0103433:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c0103437:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c010343b:	ee                   	out    %al,(%dx)

    int ret = 0;
c010343c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c0103443:	eb 5a                	jmp    c010349f <ide_write_secs+0x232>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c0103445:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0103449:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103450:	00 
c0103451:	89 04 24             	mov    %eax,(%esp)
c0103454:	e8 e1 f7 ff ff       	call   c0102c3a <ide_wait_ready>
c0103459:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010345c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103460:	74 02                	je     c0103464 <ide_write_secs+0x1f7>
            goto out;
c0103462:	eb 41                	jmp    c01034a5 <ide_write_secs+0x238>
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
c0103464:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0103468:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010346b:	8b 45 10             	mov    0x10(%ebp),%eax
c010346e:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0103471:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
    asm volatile ("outw %0, %1" :: "a" (data), "d" (port) : "memory");
}

static inline void
outsl(uint32_t port, const void *addr, int cnt) {
    asm volatile (
c0103478:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010347b:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c010347e:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0103481:	89 cb                	mov    %ecx,%ebx
c0103483:	89 de                	mov    %ebx,%esi
c0103485:	89 c1                	mov    %eax,%ecx
c0103487:	fc                   	cld    
c0103488:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
c010348a:	89 c8                	mov    %ecx,%eax
c010348c:	89 f3                	mov    %esi,%ebx
c010348e:	89 5d cc             	mov    %ebx,-0x34(%ebp)
c0103491:	89 45 c8             	mov    %eax,-0x38(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);

    int ret = 0;
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c0103494:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0103498:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c010349f:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c01034a3:	75 a0                	jne    c0103445 <ide_write_secs+0x1d8>
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c01034a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01034a8:	83 c4 50             	add    $0x50,%esp
c01034ab:	5b                   	pop    %ebx
c01034ac:	5e                   	pop    %esi
c01034ad:	5d                   	pop    %ebp
c01034ae:	c3                   	ret    

c01034af <intr_enable>:
#include <x86.h>
#include <intr.h>

/* intr_enable - enable irq interrupt */
void
intr_enable(void) {
c01034af:	55                   	push   %ebp
c01034b0:	89 e5                	mov    %esp,%ebp
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
}

static inline void
sti(void) {
    asm volatile ("sti");
c01034b2:	fb                   	sti    
    sti();
}
c01034b3:	5d                   	pop    %ebp
c01034b4:	c3                   	ret    

c01034b5 <intr_disable>:

/* intr_disable - disable irq interrupt */
void
intr_disable(void) {
c01034b5:	55                   	push   %ebp
c01034b6:	89 e5                	mov    %esp,%ebp
}

static inline void
cli(void) {
    asm volatile ("cli" ::: "memory");
c01034b8:	fa                   	cli    
    cli();
}
c01034b9:	5d                   	pop    %ebp
c01034ba:	c3                   	ret    

c01034bb <pic_setmask>:
// Initial IRQ mask has interrupt 2 enabled (for slave 8259A).
static uint16_t irq_mask = 0xFFFF & ~(1 << IRQ_SLAVE);
static bool did_init = 0;

static void
pic_setmask(uint16_t mask) {
c01034bb:	55                   	push   %ebp
c01034bc:	89 e5                	mov    %esp,%ebp
c01034be:	83 ec 14             	sub    $0x14,%esp
c01034c1:	8b 45 08             	mov    0x8(%ebp),%eax
c01034c4:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    irq_mask = mask;
c01034c8:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c01034cc:	66 a3 70 45 13 c0    	mov    %ax,0xc0134570
    if (did_init) {
c01034d2:	a1 60 5b 1c c0       	mov    0xc01c5b60,%eax
c01034d7:	85 c0                	test   %eax,%eax
c01034d9:	74 36                	je     c0103511 <pic_setmask+0x56>
        outb(IO_PIC1 + 1, mask);
c01034db:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c01034df:	0f b6 c0             	movzbl %al,%eax
c01034e2:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c01034e8:	88 45 fd             	mov    %al,-0x3(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01034eb:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
c01034ef:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c01034f3:	ee                   	out    %al,(%dx)
        outb(IO_PIC2 + 1, mask >> 8);
c01034f4:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c01034f8:	66 c1 e8 08          	shr    $0x8,%ax
c01034fc:	0f b6 c0             	movzbl %al,%eax
c01034ff:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
c0103505:	88 45 f9             	mov    %al,-0x7(%ebp)
c0103508:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c010350c:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0103510:	ee                   	out    %al,(%dx)
    }
}
c0103511:	c9                   	leave  
c0103512:	c3                   	ret    

c0103513 <pic_enable>:

void
pic_enable(unsigned int irq) {
c0103513:	55                   	push   %ebp
c0103514:	89 e5                	mov    %esp,%ebp
c0103516:	83 ec 04             	sub    $0x4,%esp
    pic_setmask(irq_mask & ~(1 << irq));
c0103519:	8b 45 08             	mov    0x8(%ebp),%eax
c010351c:	ba 01 00 00 00       	mov    $0x1,%edx
c0103521:	89 c1                	mov    %eax,%ecx
c0103523:	d3 e2                	shl    %cl,%edx
c0103525:	89 d0                	mov    %edx,%eax
c0103527:	f7 d0                	not    %eax
c0103529:	89 c2                	mov    %eax,%edx
c010352b:	0f b7 05 70 45 13 c0 	movzwl 0xc0134570,%eax
c0103532:	21 d0                	and    %edx,%eax
c0103534:	0f b7 c0             	movzwl %ax,%eax
c0103537:	89 04 24             	mov    %eax,(%esp)
c010353a:	e8 7c ff ff ff       	call   c01034bb <pic_setmask>
}
c010353f:	c9                   	leave  
c0103540:	c3                   	ret    

c0103541 <pic_init>:

/* pic_init - initialize the 8259A interrupt controllers */
void
pic_init(void) {
c0103541:	55                   	push   %ebp
c0103542:	89 e5                	mov    %esp,%ebp
c0103544:	83 ec 44             	sub    $0x44,%esp
    did_init = 1;
c0103547:	c7 05 60 5b 1c c0 01 	movl   $0x1,0xc01c5b60
c010354e:	00 00 00 
c0103551:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c0103557:	c6 45 fd ff          	movb   $0xff,-0x3(%ebp)
c010355b:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
c010355f:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c0103563:	ee                   	out    %al,(%dx)
c0103564:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
c010356a:	c6 45 f9 ff          	movb   $0xff,-0x7(%ebp)
c010356e:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c0103572:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0103576:	ee                   	out    %al,(%dx)
c0103577:	66 c7 45 f6 20 00    	movw   $0x20,-0xa(%ebp)
c010357d:	c6 45 f5 11          	movb   $0x11,-0xb(%ebp)
c0103581:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0103585:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0103589:	ee                   	out    %al,(%dx)
c010358a:	66 c7 45 f2 21 00    	movw   $0x21,-0xe(%ebp)
c0103590:	c6 45 f1 20          	movb   $0x20,-0xf(%ebp)
c0103594:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0103598:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010359c:	ee                   	out    %al,(%dx)
c010359d:	66 c7 45 ee 21 00    	movw   $0x21,-0x12(%ebp)
c01035a3:	c6 45 ed 04          	movb   $0x4,-0x13(%ebp)
c01035a7:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c01035ab:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01035af:	ee                   	out    %al,(%dx)
c01035b0:	66 c7 45 ea 21 00    	movw   $0x21,-0x16(%ebp)
c01035b6:	c6 45 e9 03          	movb   $0x3,-0x17(%ebp)
c01035ba:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c01035be:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c01035c2:	ee                   	out    %al,(%dx)
c01035c3:	66 c7 45 e6 a0 00    	movw   $0xa0,-0x1a(%ebp)
c01035c9:	c6 45 e5 11          	movb   $0x11,-0x1b(%ebp)
c01035cd:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c01035d1:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c01035d5:	ee                   	out    %al,(%dx)
c01035d6:	66 c7 45 e2 a1 00    	movw   $0xa1,-0x1e(%ebp)
c01035dc:	c6 45 e1 28          	movb   $0x28,-0x1f(%ebp)
c01035e0:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c01035e4:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c01035e8:	ee                   	out    %al,(%dx)
c01035e9:	66 c7 45 de a1 00    	movw   $0xa1,-0x22(%ebp)
c01035ef:	c6 45 dd 02          	movb   $0x2,-0x23(%ebp)
c01035f3:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c01035f7:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c01035fb:	ee                   	out    %al,(%dx)
c01035fc:	66 c7 45 da a1 00    	movw   $0xa1,-0x26(%ebp)
c0103602:	c6 45 d9 03          	movb   $0x3,-0x27(%ebp)
c0103606:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c010360a:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c010360e:	ee                   	out    %al,(%dx)
c010360f:	66 c7 45 d6 20 00    	movw   $0x20,-0x2a(%ebp)
c0103615:	c6 45 d5 68          	movb   $0x68,-0x2b(%ebp)
c0103619:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c010361d:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c0103621:	ee                   	out    %al,(%dx)
c0103622:	66 c7 45 d2 20 00    	movw   $0x20,-0x2e(%ebp)
c0103628:	c6 45 d1 0a          	movb   $0xa,-0x2f(%ebp)
c010362c:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c0103630:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c0103634:	ee                   	out    %al,(%dx)
c0103635:	66 c7 45 ce a0 00    	movw   $0xa0,-0x32(%ebp)
c010363b:	c6 45 cd 68          	movb   $0x68,-0x33(%ebp)
c010363f:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
c0103643:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
c0103647:	ee                   	out    %al,(%dx)
c0103648:	66 c7 45 ca a0 00    	movw   $0xa0,-0x36(%ebp)
c010364e:	c6 45 c9 0a          	movb   $0xa,-0x37(%ebp)
c0103652:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c0103656:	0f b7 55 ca          	movzwl -0x36(%ebp),%edx
c010365a:	ee                   	out    %al,(%dx)
    outb(IO_PIC1, 0x0a);    // read IRR by default

    outb(IO_PIC2, 0x68);    // OCW3
    outb(IO_PIC2, 0x0a);    // OCW3

    if (irq_mask != 0xFFFF) {
c010365b:	0f b7 05 70 45 13 c0 	movzwl 0xc0134570,%eax
c0103662:	66 83 f8 ff          	cmp    $0xffff,%ax
c0103666:	74 12                	je     c010367a <pic_init+0x139>
        pic_setmask(irq_mask);
c0103668:	0f b7 05 70 45 13 c0 	movzwl 0xc0134570,%eax
c010366f:	0f b7 c0             	movzwl %ax,%eax
c0103672:	89 04 24             	mov    %eax,(%esp)
c0103675:	e8 41 fe ff ff       	call   c01034bb <pic_setmask>
    }
}
c010367a:	c9                   	leave  
c010367b:	c3                   	ret    

c010367c <print_ticks>:
#include <sync.h>
#include <proc.h>

#define TICK_NUM 100

static void print_ticks() {
c010367c:	55                   	push   %ebp
c010367d:	89 e5                	mov    %esp,%ebp
c010367f:	83 ec 18             	sub    $0x18,%esp
    cprintf("%d ticks\n",TICK_NUM);
c0103682:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c0103689:	00 
c010368a:	c7 04 24 e0 f2 10 c0 	movl   $0xc010f2e0,(%esp)
c0103691:	e8 45 e1 ff ff       	call   c01017db <cprintf>
#ifdef DEBUG_GRADE
    cprintf("End of Test.\n");
c0103696:	c7 04 24 ea f2 10 c0 	movl   $0xc010f2ea,(%esp)
c010369d:	e8 39 e1 ff ff       	call   c01017db <cprintf>
    panic("EOT: kernel seems ok.");
c01036a2:	c7 44 24 08 f8 f2 10 	movl   $0xc010f2f8,0x8(%esp)
c01036a9:	c0 
c01036aa:	c7 44 24 04 1a 00 00 	movl   $0x1a,0x4(%esp)
c01036b1:	00 
c01036b2:	c7 04 24 0e f3 10 c0 	movl   $0xc010f30e,(%esp)
c01036b9:	e8 9f eb ff ff       	call   c010225d <__panic>

c01036be <idt_init>:
    sizeof(idt) - 1, (uintptr_t)idt
};

/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
void
idt_init(void) {
c01036be:	55                   	push   %ebp
c01036bf:	89 e5                	mov    %esp,%ebp
c01036c1:	83 ec 10             	sub    $0x10,%esp
     /* LAB5 YOUR CODE */ 
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
    extern uintptr_t __vectors[];
    int i;
    for (i = 0; i < sizeof(idt) / sizeof(struct gatedesc); i ++) {
c01036c4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c01036cb:	e9 c3 00 00 00       	jmp    c0103793 <idt_init+0xd5>
        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
c01036d0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01036d3:	8b 04 85 00 46 13 c0 	mov    -0x3fecba00(,%eax,4),%eax
c01036da:	89 c2                	mov    %eax,%edx
c01036dc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01036df:	66 89 14 c5 80 5b 1c 	mov    %dx,-0x3fe3a480(,%eax,8)
c01036e6:	c0 
c01036e7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01036ea:	66 c7 04 c5 82 5b 1c 	movw   $0x8,-0x3fe3a47e(,%eax,8)
c01036f1:	c0 08 00 
c01036f4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01036f7:	0f b6 14 c5 84 5b 1c 	movzbl -0x3fe3a47c(,%eax,8),%edx
c01036fe:	c0 
c01036ff:	83 e2 e0             	and    $0xffffffe0,%edx
c0103702:	88 14 c5 84 5b 1c c0 	mov    %dl,-0x3fe3a47c(,%eax,8)
c0103709:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010370c:	0f b6 14 c5 84 5b 1c 	movzbl -0x3fe3a47c(,%eax,8),%edx
c0103713:	c0 
c0103714:	83 e2 1f             	and    $0x1f,%edx
c0103717:	88 14 c5 84 5b 1c c0 	mov    %dl,-0x3fe3a47c(,%eax,8)
c010371e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103721:	0f b6 14 c5 85 5b 1c 	movzbl -0x3fe3a47b(,%eax,8),%edx
c0103728:	c0 
c0103729:	83 e2 f0             	and    $0xfffffff0,%edx
c010372c:	83 ca 0e             	or     $0xe,%edx
c010372f:	88 14 c5 85 5b 1c c0 	mov    %dl,-0x3fe3a47b(,%eax,8)
c0103736:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103739:	0f b6 14 c5 85 5b 1c 	movzbl -0x3fe3a47b(,%eax,8),%edx
c0103740:	c0 
c0103741:	83 e2 ef             	and    $0xffffffef,%edx
c0103744:	88 14 c5 85 5b 1c c0 	mov    %dl,-0x3fe3a47b(,%eax,8)
c010374b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010374e:	0f b6 14 c5 85 5b 1c 	movzbl -0x3fe3a47b(,%eax,8),%edx
c0103755:	c0 
c0103756:	83 e2 9f             	and    $0xffffff9f,%edx
c0103759:	88 14 c5 85 5b 1c c0 	mov    %dl,-0x3fe3a47b(,%eax,8)
c0103760:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103763:	0f b6 14 c5 85 5b 1c 	movzbl -0x3fe3a47b(,%eax,8),%edx
c010376a:	c0 
c010376b:	83 ca 80             	or     $0xffffff80,%edx
c010376e:	88 14 c5 85 5b 1c c0 	mov    %dl,-0x3fe3a47b(,%eax,8)
c0103775:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103778:	8b 04 85 00 46 13 c0 	mov    -0x3fecba00(,%eax,4),%eax
c010377f:	c1 e8 10             	shr    $0x10,%eax
c0103782:	89 c2                	mov    %eax,%edx
c0103784:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103787:	66 89 14 c5 86 5b 1c 	mov    %dx,-0x3fe3a47a(,%eax,8)
c010378e:	c0 
     /* LAB5 YOUR CODE */ 
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
    extern uintptr_t __vectors[];
    int i;
    for (i = 0; i < sizeof(idt) / sizeof(struct gatedesc); i ++) {
c010378f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0103793:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103796:	3d ff 00 00 00       	cmp    $0xff,%eax
c010379b:	0f 86 2f ff ff ff    	jbe    c01036d0 <idt_init+0x12>
        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
    }
    SETGATE(idt[T_SYSCALL], 1, GD_KTEXT, __vectors[T_SYSCALL], DPL_USER);
c01037a1:	a1 00 48 13 c0       	mov    0xc0134800,%eax
c01037a6:	66 a3 80 5f 1c c0    	mov    %ax,0xc01c5f80
c01037ac:	66 c7 05 82 5f 1c c0 	movw   $0x8,0xc01c5f82
c01037b3:	08 00 
c01037b5:	0f b6 05 84 5f 1c c0 	movzbl 0xc01c5f84,%eax
c01037bc:	83 e0 e0             	and    $0xffffffe0,%eax
c01037bf:	a2 84 5f 1c c0       	mov    %al,0xc01c5f84
c01037c4:	0f b6 05 84 5f 1c c0 	movzbl 0xc01c5f84,%eax
c01037cb:	83 e0 1f             	and    $0x1f,%eax
c01037ce:	a2 84 5f 1c c0       	mov    %al,0xc01c5f84
c01037d3:	0f b6 05 85 5f 1c c0 	movzbl 0xc01c5f85,%eax
c01037da:	83 c8 0f             	or     $0xf,%eax
c01037dd:	a2 85 5f 1c c0       	mov    %al,0xc01c5f85
c01037e2:	0f b6 05 85 5f 1c c0 	movzbl 0xc01c5f85,%eax
c01037e9:	83 e0 ef             	and    $0xffffffef,%eax
c01037ec:	a2 85 5f 1c c0       	mov    %al,0xc01c5f85
c01037f1:	0f b6 05 85 5f 1c c0 	movzbl 0xc01c5f85,%eax
c01037f8:	83 c8 60             	or     $0x60,%eax
c01037fb:	a2 85 5f 1c c0       	mov    %al,0xc01c5f85
c0103800:	0f b6 05 85 5f 1c c0 	movzbl 0xc01c5f85,%eax
c0103807:	83 c8 80             	or     $0xffffff80,%eax
c010380a:	a2 85 5f 1c c0       	mov    %al,0xc01c5f85
c010380f:	a1 00 48 13 c0       	mov    0xc0134800,%eax
c0103814:	c1 e8 10             	shr    $0x10,%eax
c0103817:	66 a3 86 5f 1c c0    	mov    %ax,0xc01c5f86
c010381d:	c7 45 f8 80 45 13 c0 	movl   $0xc0134580,-0x8(%ebp)
    }
}

static inline void
lidt(struct pseudodesc *pd) {
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
c0103824:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0103827:	0f 01 18             	lidtl  (%eax)
    lidt(&idt_pd);
}
c010382a:	c9                   	leave  
c010382b:	c3                   	ret    

c010382c <trapname>:

static const char *
trapname(int trapno) {
c010382c:	55                   	push   %ebp
c010382d:	89 e5                	mov    %esp,%ebp
        "Alignment Check",
        "Machine-Check",
        "SIMD Floating-Point Exception"
    };

    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
c010382f:	8b 45 08             	mov    0x8(%ebp),%eax
c0103832:	83 f8 13             	cmp    $0x13,%eax
c0103835:	77 0c                	ja     c0103843 <trapname+0x17>
        return excnames[trapno];
c0103837:	8b 45 08             	mov    0x8(%ebp),%eax
c010383a:	8b 04 85 a0 f7 10 c0 	mov    -0x3fef0860(,%eax,4),%eax
c0103841:	eb 18                	jmp    c010385b <trapname+0x2f>
    }
    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
c0103843:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
c0103847:	7e 0d                	jle    c0103856 <trapname+0x2a>
c0103849:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c010384d:	7f 07                	jg     c0103856 <trapname+0x2a>
        return "Hardware Interrupt";
c010384f:	b8 1f f3 10 c0       	mov    $0xc010f31f,%eax
c0103854:	eb 05                	jmp    c010385b <trapname+0x2f>
    }
    return "(unknown trap)";
c0103856:	b8 32 f3 10 c0       	mov    $0xc010f332,%eax
}
c010385b:	5d                   	pop    %ebp
c010385c:	c3                   	ret    

c010385d <trap_in_kernel>:

/* trap_in_kernel - test if trap happened in kernel */
bool
trap_in_kernel(struct trapframe *tf) {
c010385d:	55                   	push   %ebp
c010385e:	89 e5                	mov    %esp,%ebp
    return (tf->tf_cs == (uint16_t)KERNEL_CS);
c0103860:	8b 45 08             	mov    0x8(%ebp),%eax
c0103863:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c0103867:	66 83 f8 08          	cmp    $0x8,%ax
c010386b:	0f 94 c0             	sete   %al
c010386e:	0f b6 c0             	movzbl %al,%eax
}
c0103871:	5d                   	pop    %ebp
c0103872:	c3                   	ret    

c0103873 <print_trapframe>:
    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
};

void
print_trapframe(struct trapframe *tf) {
c0103873:	55                   	push   %ebp
c0103874:	89 e5                	mov    %esp,%ebp
c0103876:	83 ec 28             	sub    $0x28,%esp
    cprintf("trapframe at %p\n", tf);
c0103879:	8b 45 08             	mov    0x8(%ebp),%eax
c010387c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103880:	c7 04 24 73 f3 10 c0 	movl   $0xc010f373,(%esp)
c0103887:	e8 4f df ff ff       	call   c01017db <cprintf>
    print_regs(&tf->tf_regs);
c010388c:	8b 45 08             	mov    0x8(%ebp),%eax
c010388f:	89 04 24             	mov    %eax,(%esp)
c0103892:	e8 a1 01 00 00       	call   c0103a38 <print_regs>
    cprintf("  ds   0x----%04x\n", tf->tf_ds);
c0103897:	8b 45 08             	mov    0x8(%ebp),%eax
c010389a:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c010389e:	0f b7 c0             	movzwl %ax,%eax
c01038a1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01038a5:	c7 04 24 84 f3 10 c0 	movl   $0xc010f384,(%esp)
c01038ac:	e8 2a df ff ff       	call   c01017db <cprintf>
    cprintf("  es   0x----%04x\n", tf->tf_es);
c01038b1:	8b 45 08             	mov    0x8(%ebp),%eax
c01038b4:	0f b7 40 28          	movzwl 0x28(%eax),%eax
c01038b8:	0f b7 c0             	movzwl %ax,%eax
c01038bb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01038bf:	c7 04 24 97 f3 10 c0 	movl   $0xc010f397,(%esp)
c01038c6:	e8 10 df ff ff       	call   c01017db <cprintf>
    cprintf("  fs   0x----%04x\n", tf->tf_fs);
c01038cb:	8b 45 08             	mov    0x8(%ebp),%eax
c01038ce:	0f b7 40 24          	movzwl 0x24(%eax),%eax
c01038d2:	0f b7 c0             	movzwl %ax,%eax
c01038d5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01038d9:	c7 04 24 aa f3 10 c0 	movl   $0xc010f3aa,(%esp)
c01038e0:	e8 f6 de ff ff       	call   c01017db <cprintf>
    cprintf("  gs   0x----%04x\n", tf->tf_gs);
c01038e5:	8b 45 08             	mov    0x8(%ebp),%eax
c01038e8:	0f b7 40 20          	movzwl 0x20(%eax),%eax
c01038ec:	0f b7 c0             	movzwl %ax,%eax
c01038ef:	89 44 24 04          	mov    %eax,0x4(%esp)
c01038f3:	c7 04 24 bd f3 10 c0 	movl   $0xc010f3bd,(%esp)
c01038fa:	e8 dc de ff ff       	call   c01017db <cprintf>
    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
c01038ff:	8b 45 08             	mov    0x8(%ebp),%eax
c0103902:	8b 40 30             	mov    0x30(%eax),%eax
c0103905:	89 04 24             	mov    %eax,(%esp)
c0103908:	e8 1f ff ff ff       	call   c010382c <trapname>
c010390d:	8b 55 08             	mov    0x8(%ebp),%edx
c0103910:	8b 52 30             	mov    0x30(%edx),%edx
c0103913:	89 44 24 08          	mov    %eax,0x8(%esp)
c0103917:	89 54 24 04          	mov    %edx,0x4(%esp)
c010391b:	c7 04 24 d0 f3 10 c0 	movl   $0xc010f3d0,(%esp)
c0103922:	e8 b4 de ff ff       	call   c01017db <cprintf>
    cprintf("  err  0x%08x\n", tf->tf_err);
c0103927:	8b 45 08             	mov    0x8(%ebp),%eax
c010392a:	8b 40 34             	mov    0x34(%eax),%eax
c010392d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103931:	c7 04 24 e2 f3 10 c0 	movl   $0xc010f3e2,(%esp)
c0103938:	e8 9e de ff ff       	call   c01017db <cprintf>
    cprintf("  eip  0x%08x\n", tf->tf_eip);
c010393d:	8b 45 08             	mov    0x8(%ebp),%eax
c0103940:	8b 40 38             	mov    0x38(%eax),%eax
c0103943:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103947:	c7 04 24 f1 f3 10 c0 	movl   $0xc010f3f1,(%esp)
c010394e:	e8 88 de ff ff       	call   c01017db <cprintf>
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
c0103953:	8b 45 08             	mov    0x8(%ebp),%eax
c0103956:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c010395a:	0f b7 c0             	movzwl %ax,%eax
c010395d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103961:	c7 04 24 00 f4 10 c0 	movl   $0xc010f400,(%esp)
c0103968:	e8 6e de ff ff       	call   c01017db <cprintf>
    cprintf("  flag 0x%08x ", tf->tf_eflags);
c010396d:	8b 45 08             	mov    0x8(%ebp),%eax
c0103970:	8b 40 40             	mov    0x40(%eax),%eax
c0103973:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103977:	c7 04 24 13 f4 10 c0 	movl   $0xc010f413,(%esp)
c010397e:	e8 58 de ff ff       	call   c01017db <cprintf>

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c0103983:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010398a:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c0103991:	eb 3e                	jmp    c01039d1 <print_trapframe+0x15e>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
c0103993:	8b 45 08             	mov    0x8(%ebp),%eax
c0103996:	8b 50 40             	mov    0x40(%eax),%edx
c0103999:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010399c:	21 d0                	and    %edx,%eax
c010399e:	85 c0                	test   %eax,%eax
c01039a0:	74 28                	je     c01039ca <print_trapframe+0x157>
c01039a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01039a5:	8b 04 85 a0 45 13 c0 	mov    -0x3fecba60(,%eax,4),%eax
c01039ac:	85 c0                	test   %eax,%eax
c01039ae:	74 1a                	je     c01039ca <print_trapframe+0x157>
            cprintf("%s,", IA32flags[i]);
c01039b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01039b3:	8b 04 85 a0 45 13 c0 	mov    -0x3fecba60(,%eax,4),%eax
c01039ba:	89 44 24 04          	mov    %eax,0x4(%esp)
c01039be:	c7 04 24 22 f4 10 c0 	movl   $0xc010f422,(%esp)
c01039c5:	e8 11 de ff ff       	call   c01017db <cprintf>
    cprintf("  eip  0x%08x\n", tf->tf_eip);
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
    cprintf("  flag 0x%08x ", tf->tf_eflags);

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c01039ca:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01039ce:	d1 65 f0             	shll   -0x10(%ebp)
c01039d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01039d4:	83 f8 17             	cmp    $0x17,%eax
c01039d7:	76 ba                	jbe    c0103993 <print_trapframe+0x120>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
            cprintf("%s,", IA32flags[i]);
        }
    }
    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
c01039d9:	8b 45 08             	mov    0x8(%ebp),%eax
c01039dc:	8b 40 40             	mov    0x40(%eax),%eax
c01039df:	25 00 30 00 00       	and    $0x3000,%eax
c01039e4:	c1 e8 0c             	shr    $0xc,%eax
c01039e7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01039eb:	c7 04 24 26 f4 10 c0 	movl   $0xc010f426,(%esp)
c01039f2:	e8 e4 dd ff ff       	call   c01017db <cprintf>

    if (!trap_in_kernel(tf)) {
c01039f7:	8b 45 08             	mov    0x8(%ebp),%eax
c01039fa:	89 04 24             	mov    %eax,(%esp)
c01039fd:	e8 5b fe ff ff       	call   c010385d <trap_in_kernel>
c0103a02:	85 c0                	test   %eax,%eax
c0103a04:	75 30                	jne    c0103a36 <print_trapframe+0x1c3>
        cprintf("  esp  0x%08x\n", tf->tf_esp);
c0103a06:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a09:	8b 40 44             	mov    0x44(%eax),%eax
c0103a0c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103a10:	c7 04 24 2f f4 10 c0 	movl   $0xc010f42f,(%esp)
c0103a17:	e8 bf dd ff ff       	call   c01017db <cprintf>
        cprintf("  ss   0x----%04x\n", tf->tf_ss);
c0103a1c:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a1f:	0f b7 40 48          	movzwl 0x48(%eax),%eax
c0103a23:	0f b7 c0             	movzwl %ax,%eax
c0103a26:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103a2a:	c7 04 24 3e f4 10 c0 	movl   $0xc010f43e,(%esp)
c0103a31:	e8 a5 dd ff ff       	call   c01017db <cprintf>
    }
}
c0103a36:	c9                   	leave  
c0103a37:	c3                   	ret    

c0103a38 <print_regs>:

void
print_regs(struct pushregs *regs) {
c0103a38:	55                   	push   %ebp
c0103a39:	89 e5                	mov    %esp,%ebp
c0103a3b:	83 ec 18             	sub    $0x18,%esp
    cprintf("  edi  0x%08x\n", regs->reg_edi);
c0103a3e:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a41:	8b 00                	mov    (%eax),%eax
c0103a43:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103a47:	c7 04 24 51 f4 10 c0 	movl   $0xc010f451,(%esp)
c0103a4e:	e8 88 dd ff ff       	call   c01017db <cprintf>
    cprintf("  esi  0x%08x\n", regs->reg_esi);
c0103a53:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a56:	8b 40 04             	mov    0x4(%eax),%eax
c0103a59:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103a5d:	c7 04 24 60 f4 10 c0 	movl   $0xc010f460,(%esp)
c0103a64:	e8 72 dd ff ff       	call   c01017db <cprintf>
    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
c0103a69:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a6c:	8b 40 08             	mov    0x8(%eax),%eax
c0103a6f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103a73:	c7 04 24 6f f4 10 c0 	movl   $0xc010f46f,(%esp)
c0103a7a:	e8 5c dd ff ff       	call   c01017db <cprintf>
    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
c0103a7f:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a82:	8b 40 0c             	mov    0xc(%eax),%eax
c0103a85:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103a89:	c7 04 24 7e f4 10 c0 	movl   $0xc010f47e,(%esp)
c0103a90:	e8 46 dd ff ff       	call   c01017db <cprintf>
    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
c0103a95:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a98:	8b 40 10             	mov    0x10(%eax),%eax
c0103a9b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103a9f:	c7 04 24 8d f4 10 c0 	movl   $0xc010f48d,(%esp)
c0103aa6:	e8 30 dd ff ff       	call   c01017db <cprintf>
    cprintf("  edx  0x%08x\n", regs->reg_edx);
c0103aab:	8b 45 08             	mov    0x8(%ebp),%eax
c0103aae:	8b 40 14             	mov    0x14(%eax),%eax
c0103ab1:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103ab5:	c7 04 24 9c f4 10 c0 	movl   $0xc010f49c,(%esp)
c0103abc:	e8 1a dd ff ff       	call   c01017db <cprintf>
    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
c0103ac1:	8b 45 08             	mov    0x8(%ebp),%eax
c0103ac4:	8b 40 18             	mov    0x18(%eax),%eax
c0103ac7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103acb:	c7 04 24 ab f4 10 c0 	movl   $0xc010f4ab,(%esp)
c0103ad2:	e8 04 dd ff ff       	call   c01017db <cprintf>
    cprintf("  eax  0x%08x\n", regs->reg_eax);
c0103ad7:	8b 45 08             	mov    0x8(%ebp),%eax
c0103ada:	8b 40 1c             	mov    0x1c(%eax),%eax
c0103add:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103ae1:	c7 04 24 ba f4 10 c0 	movl   $0xc010f4ba,(%esp)
c0103ae8:	e8 ee dc ff ff       	call   c01017db <cprintf>
}
c0103aed:	c9                   	leave  
c0103aee:	c3                   	ret    

c0103aef <print_pgfault>:

static inline void
print_pgfault(struct trapframe *tf) {
c0103aef:	55                   	push   %ebp
c0103af0:	89 e5                	mov    %esp,%ebp
c0103af2:	53                   	push   %ebx
c0103af3:	83 ec 34             	sub    $0x34,%esp
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
c0103af6:	8b 45 08             	mov    0x8(%ebp),%eax
c0103af9:	8b 40 34             	mov    0x34(%eax),%eax
c0103afc:	83 e0 01             	and    $0x1,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0103aff:	85 c0                	test   %eax,%eax
c0103b01:	74 07                	je     c0103b0a <print_pgfault+0x1b>
c0103b03:	b9 c9 f4 10 c0       	mov    $0xc010f4c9,%ecx
c0103b08:	eb 05                	jmp    c0103b0f <print_pgfault+0x20>
c0103b0a:	b9 da f4 10 c0       	mov    $0xc010f4da,%ecx
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
c0103b0f:	8b 45 08             	mov    0x8(%ebp),%eax
c0103b12:	8b 40 34             	mov    0x34(%eax),%eax
c0103b15:	83 e0 02             	and    $0x2,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0103b18:	85 c0                	test   %eax,%eax
c0103b1a:	74 07                	je     c0103b23 <print_pgfault+0x34>
c0103b1c:	ba 57 00 00 00       	mov    $0x57,%edx
c0103b21:	eb 05                	jmp    c0103b28 <print_pgfault+0x39>
c0103b23:	ba 52 00 00 00       	mov    $0x52,%edx
            (tf->tf_err & 4) ? 'U' : 'K',
c0103b28:	8b 45 08             	mov    0x8(%ebp),%eax
c0103b2b:	8b 40 34             	mov    0x34(%eax),%eax
c0103b2e:	83 e0 04             	and    $0x4,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0103b31:	85 c0                	test   %eax,%eax
c0103b33:	74 07                	je     c0103b3c <print_pgfault+0x4d>
c0103b35:	b8 55 00 00 00       	mov    $0x55,%eax
c0103b3a:	eb 05                	jmp    c0103b41 <print_pgfault+0x52>
c0103b3c:	b8 4b 00 00 00       	mov    $0x4b,%eax
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c0103b41:	0f 20 d3             	mov    %cr2,%ebx
c0103b44:	89 5d f4             	mov    %ebx,-0xc(%ebp)
    return cr2;
c0103b47:	8b 5d f4             	mov    -0xc(%ebp),%ebx
c0103b4a:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0103b4e:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0103b52:	89 44 24 08          	mov    %eax,0x8(%esp)
c0103b56:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c0103b5a:	c7 04 24 e8 f4 10 c0 	movl   $0xc010f4e8,(%esp)
c0103b61:	e8 75 dc ff ff       	call   c01017db <cprintf>
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
}
c0103b66:	83 c4 34             	add    $0x34,%esp
c0103b69:	5b                   	pop    %ebx
c0103b6a:	5d                   	pop    %ebp
c0103b6b:	c3                   	ret    

c0103b6c <pgfault_handler>:

static int
pgfault_handler(struct trapframe *tf) {
c0103b6c:	55                   	push   %ebp
c0103b6d:	89 e5                	mov    %esp,%ebp
c0103b6f:	83 ec 28             	sub    $0x28,%esp
    extern struct mm_struct *check_mm_struct;
    if(check_mm_struct !=NULL) { //used for test check_swap
c0103b72:	a1 cc 85 1c c0       	mov    0xc01c85cc,%eax
c0103b77:	85 c0                	test   %eax,%eax
c0103b79:	74 0b                	je     c0103b86 <pgfault_handler+0x1a>
            print_pgfault(tf);
c0103b7b:	8b 45 08             	mov    0x8(%ebp),%eax
c0103b7e:	89 04 24             	mov    %eax,(%esp)
c0103b81:	e8 69 ff ff ff       	call   c0103aef <print_pgfault>
        }
    struct mm_struct *mm;
    if (check_mm_struct != NULL) {
c0103b86:	a1 cc 85 1c c0       	mov    0xc01c85cc,%eax
c0103b8b:	85 c0                	test   %eax,%eax
c0103b8d:	74 3d                	je     c0103bcc <pgfault_handler+0x60>
        assert(current == idleproc);
c0103b8f:	8b 15 48 64 1c c0    	mov    0xc01c6448,%edx
c0103b95:	a1 40 64 1c c0       	mov    0xc01c6440,%eax
c0103b9a:	39 c2                	cmp    %eax,%edx
c0103b9c:	74 24                	je     c0103bc2 <pgfault_handler+0x56>
c0103b9e:	c7 44 24 0c 0b f5 10 	movl   $0xc010f50b,0xc(%esp)
c0103ba5:	c0 
c0103ba6:	c7 44 24 08 1f f5 10 	movl   $0xc010f51f,0x8(%esp)
c0103bad:	c0 
c0103bae:	c7 44 24 04 b0 00 00 	movl   $0xb0,0x4(%esp)
c0103bb5:	00 
c0103bb6:	c7 04 24 0e f3 10 c0 	movl   $0xc010f30e,(%esp)
c0103bbd:	e8 9b e6 ff ff       	call   c010225d <__panic>
        mm = check_mm_struct;
c0103bc2:	a1 cc 85 1c c0       	mov    0xc01c85cc,%eax
c0103bc7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103bca:	eb 46                	jmp    c0103c12 <pgfault_handler+0xa6>
    }
    else {
        if (current == NULL) {
c0103bcc:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c0103bd1:	85 c0                	test   %eax,%eax
c0103bd3:	75 32                	jne    c0103c07 <pgfault_handler+0x9b>
            print_trapframe(tf);
c0103bd5:	8b 45 08             	mov    0x8(%ebp),%eax
c0103bd8:	89 04 24             	mov    %eax,(%esp)
c0103bdb:	e8 93 fc ff ff       	call   c0103873 <print_trapframe>
            print_pgfault(tf);
c0103be0:	8b 45 08             	mov    0x8(%ebp),%eax
c0103be3:	89 04 24             	mov    %eax,(%esp)
c0103be6:	e8 04 ff ff ff       	call   c0103aef <print_pgfault>
            panic("unhandled page fault.\n");
c0103beb:	c7 44 24 08 34 f5 10 	movl   $0xc010f534,0x8(%esp)
c0103bf2:	c0 
c0103bf3:	c7 44 24 04 b7 00 00 	movl   $0xb7,0x4(%esp)
c0103bfa:	00 
c0103bfb:	c7 04 24 0e f3 10 c0 	movl   $0xc010f30e,(%esp)
c0103c02:	e8 56 e6 ff ff       	call   c010225d <__panic>
        }
        mm = current->mm;
c0103c07:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c0103c0c:	8b 40 18             	mov    0x18(%eax),%eax
c0103c0f:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c0103c12:	0f 20 d0             	mov    %cr2,%eax
c0103c15:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr2;
c0103c18:	8b 45 f0             	mov    -0x10(%ebp),%eax
    }
    return do_pgfault(mm, tf->tf_err, rcr2());
c0103c1b:	89 c2                	mov    %eax,%edx
c0103c1d:	8b 45 08             	mov    0x8(%ebp),%eax
c0103c20:	8b 40 34             	mov    0x34(%eax),%eax
c0103c23:	89 54 24 08          	mov    %edx,0x8(%esp)
c0103c27:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103c2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c2e:	89 04 24             	mov    %eax,(%esp)
c0103c31:	e8 8d 65 00 00       	call   c010a1c3 <do_pgfault>
}
c0103c36:	c9                   	leave  
c0103c37:	c3                   	ret    

c0103c38 <trap_dispatch>:

static volatile int in_swap_tick_event = 0;
extern struct mm_struct *check_mm_struct;

static void
trap_dispatch(struct trapframe *tf) {
c0103c38:	55                   	push   %ebp
c0103c39:	89 e5                	mov    %esp,%ebp
c0103c3b:	83 ec 28             	sub    $0x28,%esp
    char c;

    int ret=0;
c0103c3e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    switch (tf->tf_trapno) {
c0103c45:	8b 45 08             	mov    0x8(%ebp),%eax
c0103c48:	8b 40 30             	mov    0x30(%eax),%eax
c0103c4b:	83 f8 2f             	cmp    $0x2f,%eax
c0103c4e:	77 38                	ja     c0103c88 <trap_dispatch+0x50>
c0103c50:	83 f8 2e             	cmp    $0x2e,%eax
c0103c53:	0f 83 07 02 00 00    	jae    c0103e60 <trap_dispatch+0x228>
c0103c59:	83 f8 20             	cmp    $0x20,%eax
c0103c5c:	0f 84 07 01 00 00    	je     c0103d69 <trap_dispatch+0x131>
c0103c62:	83 f8 20             	cmp    $0x20,%eax
c0103c65:	77 0a                	ja     c0103c71 <trap_dispatch+0x39>
c0103c67:	83 f8 0e             	cmp    $0xe,%eax
c0103c6a:	74 3e                	je     c0103caa <trap_dispatch+0x72>
c0103c6c:	e9 a7 01 00 00       	jmp    c0103e18 <trap_dispatch+0x1e0>
c0103c71:	83 f8 21             	cmp    $0x21,%eax
c0103c74:	0f 84 5c 01 00 00    	je     c0103dd6 <trap_dispatch+0x19e>
c0103c7a:	83 f8 24             	cmp    $0x24,%eax
c0103c7d:	0f 84 2a 01 00 00    	je     c0103dad <trap_dispatch+0x175>
c0103c83:	e9 90 01 00 00       	jmp    c0103e18 <trap_dispatch+0x1e0>
c0103c88:	83 f8 78             	cmp    $0x78,%eax
c0103c8b:	0f 82 87 01 00 00    	jb     c0103e18 <trap_dispatch+0x1e0>
c0103c91:	83 f8 79             	cmp    $0x79,%eax
c0103c94:	0f 86 62 01 00 00    	jbe    c0103dfc <trap_dispatch+0x1c4>
c0103c9a:	3d 80 00 00 00       	cmp    $0x80,%eax
c0103c9f:	0f 84 ba 00 00 00    	je     c0103d5f <trap_dispatch+0x127>
c0103ca5:	e9 6e 01 00 00       	jmp    c0103e18 <trap_dispatch+0x1e0>
    case T_PGFLT:  //page fault
        if ((ret = pgfault_handler(tf)) != 0) {
c0103caa:	8b 45 08             	mov    0x8(%ebp),%eax
c0103cad:	89 04 24             	mov    %eax,(%esp)
c0103cb0:	e8 b7 fe ff ff       	call   c0103b6c <pgfault_handler>
c0103cb5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103cb8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103cbc:	0f 84 98 00 00 00    	je     c0103d5a <trap_dispatch+0x122>
            print_trapframe(tf);
c0103cc2:	8b 45 08             	mov    0x8(%ebp),%eax
c0103cc5:	89 04 24             	mov    %eax,(%esp)
c0103cc8:	e8 a6 fb ff ff       	call   c0103873 <print_trapframe>
            if (current == NULL) {
c0103ccd:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c0103cd2:	85 c0                	test   %eax,%eax
c0103cd4:	75 23                	jne    c0103cf9 <trap_dispatch+0xc1>
                panic("handle pgfault failed. ret=%d\n", ret);
c0103cd6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103cd9:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0103cdd:	c7 44 24 08 4c f5 10 	movl   $0xc010f54c,0x8(%esp)
c0103ce4:	c0 
c0103ce5:	c7 44 24 04 cc 00 00 	movl   $0xcc,0x4(%esp)
c0103cec:	00 
c0103ced:	c7 04 24 0e f3 10 c0 	movl   $0xc010f30e,(%esp)
c0103cf4:	e8 64 e5 ff ff       	call   c010225d <__panic>
            }
            else {
                if (trap_in_kernel(tf)) {
c0103cf9:	8b 45 08             	mov    0x8(%ebp),%eax
c0103cfc:	89 04 24             	mov    %eax,(%esp)
c0103cff:	e8 59 fb ff ff       	call   c010385d <trap_in_kernel>
c0103d04:	85 c0                	test   %eax,%eax
c0103d06:	74 23                	je     c0103d2b <trap_dispatch+0xf3>
                    panic("handle pgfault failed in kernel mode. ret=%d\n", ret);
c0103d08:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103d0b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0103d0f:	c7 44 24 08 6c f5 10 	movl   $0xc010f56c,0x8(%esp)
c0103d16:	c0 
c0103d17:	c7 44 24 04 d0 00 00 	movl   $0xd0,0x4(%esp)
c0103d1e:	00 
c0103d1f:	c7 04 24 0e f3 10 c0 	movl   $0xc010f30e,(%esp)
c0103d26:	e8 32 e5 ff ff       	call   c010225d <__panic>
                }
                cprintf("killed by kernel.\n");
c0103d2b:	c7 04 24 9a f5 10 c0 	movl   $0xc010f59a,(%esp)
c0103d32:	e8 a4 da ff ff       	call   c01017db <cprintf>
                panic("handle user mode pgfault failed. ret=%d\n", ret); 
c0103d37:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103d3a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0103d3e:	c7 44 24 08 b0 f5 10 	movl   $0xc010f5b0,0x8(%esp)
c0103d45:	c0 
c0103d46:	c7 44 24 04 d3 00 00 	movl   $0xd3,0x4(%esp)
c0103d4d:	00 
c0103d4e:	c7 04 24 0e f3 10 c0 	movl   $0xc010f30e,(%esp)
c0103d55:	e8 03 e5 ff ff       	call   c010225d <__panic>
                do_exit(-E_KILLED);
            }
        }
        break;
c0103d5a:	e9 02 01 00 00       	jmp    c0103e61 <trap_dispatch+0x229>
    case T_SYSCALL:
        syscall();
c0103d5f:	e8 d3 a1 00 00       	call   c010df37 <syscall>
        break;
c0103d64:	e9 f8 00 00 00       	jmp    c0103e61 <trap_dispatch+0x229>
	     *----------------------
	     * you should update your lab5 code (just add ONE or TWO lines of code):
         *    Every tick, you should update the system time, iterate the timers, and trigger the timers which are end to call scheduler.
         *    You can use one funcitons to finish all these things.
         */
        ticks ++;
c0103d69:	a1 d8 84 1c c0       	mov    0xc01c84d8,%eax
c0103d6e:	83 c0 01             	add    $0x1,%eax
c0103d71:	a3 d8 84 1c c0       	mov    %eax,0xc01c84d8
        assert(current != NULL);
c0103d76:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c0103d7b:	85 c0                	test   %eax,%eax
c0103d7d:	75 24                	jne    c0103da3 <trap_dispatch+0x16b>
c0103d7f:	c7 44 24 0c d9 f5 10 	movl   $0xc010f5d9,0xc(%esp)
c0103d86:	c0 
c0103d87:	c7 44 24 08 1f f5 10 	movl   $0xc010f51f,0x8(%esp)
c0103d8e:	c0 
c0103d8f:	c7 44 24 04 f3 00 00 	movl   $0xf3,0x4(%esp)
c0103d96:	00 
c0103d97:	c7 04 24 0e f3 10 c0 	movl   $0xc010f30e,(%esp)
c0103d9e:	e8 ba e4 ff ff       	call   c010225d <__panic>
        run_timer_list();
c0103da3:	e8 d8 9e 00 00       	call   c010dc80 <run_timer_list>
        break;
c0103da8:	e9 b4 00 00 00       	jmp    c0103e61 <trap_dispatch+0x229>
    case IRQ_OFFSET + IRQ_COM1:
        c = cons_getc();
c0103dad:	e8 19 ee ff ff       	call   c0102bcb <cons_getc>
c0103db2:	88 45 f3             	mov    %al,-0xd(%ebp)
        cprintf("serial [%03d] %c\n", c, c);
c0103db5:	0f be 55 f3          	movsbl -0xd(%ebp),%edx
c0103db9:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c0103dbd:	89 54 24 08          	mov    %edx,0x8(%esp)
c0103dc1:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103dc5:	c7 04 24 e9 f5 10 c0 	movl   $0xc010f5e9,(%esp)
c0103dcc:	e8 0a da ff ff       	call   c01017db <cprintf>
        break;
c0103dd1:	e9 8b 00 00 00       	jmp    c0103e61 <trap_dispatch+0x229>
    case IRQ_OFFSET + IRQ_KBD:
        c = cons_getc();
c0103dd6:	e8 f0 ed ff ff       	call   c0102bcb <cons_getc>
c0103ddb:	88 45 f3             	mov    %al,-0xd(%ebp)
        cprintf("kbd [%03d] %c\n", c, c);
c0103dde:	0f be 55 f3          	movsbl -0xd(%ebp),%edx
c0103de2:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c0103de6:	89 54 24 08          	mov    %edx,0x8(%esp)
c0103dea:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103dee:	c7 04 24 fb f5 10 c0 	movl   $0xc010f5fb,(%esp)
c0103df5:	e8 e1 d9 ff ff       	call   c01017db <cprintf>
        break;
c0103dfa:	eb 65                	jmp    c0103e61 <trap_dispatch+0x229>
    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
    case T_SWITCH_TOU:
    case T_SWITCH_TOK:
        panic("T_SWITCH_** ??\n");
c0103dfc:	c7 44 24 08 0a f6 10 	movl   $0xc010f60a,0x8(%esp)
c0103e03:	c0 
c0103e04:	c7 44 24 04 01 01 00 	movl   $0x101,0x4(%esp)
c0103e0b:	00 
c0103e0c:	c7 04 24 0e f3 10 c0 	movl   $0xc010f30e,(%esp)
c0103e13:	e8 45 e4 ff ff       	call   c010225d <__panic>
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
    default:
        print_trapframe(tf);
c0103e18:	8b 45 08             	mov    0x8(%ebp),%eax
c0103e1b:	89 04 24             	mov    %eax,(%esp)
c0103e1e:	e8 50 fa ff ff       	call   c0103873 <print_trapframe>
        if (current != NULL) {
c0103e23:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c0103e28:	85 c0                	test   %eax,%eax
c0103e2a:	74 18                	je     c0103e44 <trap_dispatch+0x20c>
            cprintf("unhandled trap.\n");
c0103e2c:	c7 04 24 1a f6 10 c0 	movl   $0xc010f61a,(%esp)
c0103e33:	e8 a3 d9 ff ff       	call   c01017db <cprintf>
            do_exit(-E_KILLED);
c0103e38:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c0103e3f:	e8 65 85 00 00       	call   c010c3a9 <do_exit>
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");
c0103e44:	c7 44 24 08 2b f6 10 	movl   $0xc010f62b,0x8(%esp)
c0103e4b:	c0 
c0103e4c:	c7 44 24 04 0e 01 00 	movl   $0x10e,0x4(%esp)
c0103e53:	00 
c0103e54:	c7 04 24 0e f3 10 c0 	movl   $0xc010f30e,(%esp)
c0103e5b:	e8 fd e3 ff ff       	call   c010225d <__panic>
        panic("T_SWITCH_** ??\n");
        break;
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
c0103e60:	90                   	nop
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");

    }
}
c0103e61:	c9                   	leave  
c0103e62:	c3                   	ret    

c0103e63 <trap>:
 * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
 * the code in kern/trap/trapentry.S restores the old CPU state saved in the
 * trapframe and then uses the iret instruction to return from the exception.
 * */
void
trap(struct trapframe *tf) {
c0103e63:	55                   	push   %ebp
c0103e64:	89 e5                	mov    %esp,%ebp
c0103e66:	83 ec 28             	sub    $0x28,%esp
    // dispatch based on what type of trap occurred
    // used for previous projects
    if (current == NULL) {
c0103e69:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c0103e6e:	85 c0                	test   %eax,%eax
c0103e70:	75 0d                	jne    c0103e7f <trap+0x1c>
        trap_dispatch(tf);
c0103e72:	8b 45 08             	mov    0x8(%ebp),%eax
c0103e75:	89 04 24             	mov    %eax,(%esp)
c0103e78:	e8 bb fd ff ff       	call   c0103c38 <trap_dispatch>
c0103e7d:	eb 6c                	jmp    c0103eeb <trap+0x88>
    }
    else {
        // keep a trapframe chain in stack
        struct trapframe *otf = current->tf;
c0103e7f:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c0103e84:	8b 40 3c             	mov    0x3c(%eax),%eax
c0103e87:	89 45 f4             	mov    %eax,-0xc(%ebp)
        current->tf = tf;
c0103e8a:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c0103e8f:	8b 55 08             	mov    0x8(%ebp),%edx
c0103e92:	89 50 3c             	mov    %edx,0x3c(%eax)
    
        bool in_kernel = trap_in_kernel(tf);
c0103e95:	8b 45 08             	mov    0x8(%ebp),%eax
c0103e98:	89 04 24             	mov    %eax,(%esp)
c0103e9b:	e8 bd f9 ff ff       	call   c010385d <trap_in_kernel>
c0103ea0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
        trap_dispatch(tf);
c0103ea3:	8b 45 08             	mov    0x8(%ebp),%eax
c0103ea6:	89 04 24             	mov    %eax,(%esp)
c0103ea9:	e8 8a fd ff ff       	call   c0103c38 <trap_dispatch>
    
        current->tf = otf;
c0103eae:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c0103eb3:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103eb6:	89 50 3c             	mov    %edx,0x3c(%eax)
        if (!in_kernel) {
c0103eb9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0103ebd:	75 2c                	jne    c0103eeb <trap+0x88>
            if (current->flags & PF_EXITING) {
c0103ebf:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c0103ec4:	8b 40 44             	mov    0x44(%eax),%eax
c0103ec7:	83 e0 01             	and    $0x1,%eax
c0103eca:	85 c0                	test   %eax,%eax
c0103ecc:	74 0c                	je     c0103eda <trap+0x77>
                do_exit(-E_KILLED);
c0103ece:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c0103ed5:	e8 cf 84 00 00       	call   c010c3a9 <do_exit>
            }
            if (current->need_resched) {
c0103eda:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c0103edf:	8b 40 10             	mov    0x10(%eax),%eax
c0103ee2:	85 c0                	test   %eax,%eax
c0103ee4:	74 05                	je     c0103eeb <trap+0x88>
                schedule();
c0103ee6:	e8 08 9b 00 00       	call   c010d9f3 <schedule>
            }
        }
    }
}
c0103eeb:	c9                   	leave  
c0103eec:	c3                   	ret    

c0103eed <__alltraps>:
.text
.globl __alltraps
__alltraps:
    # push registers to build a trap frame
    # therefore make the stack look like a struct trapframe
    pushl %ds
c0103eed:	1e                   	push   %ds
    pushl %es
c0103eee:	06                   	push   %es
    pushl %fs
c0103eef:	0f a0                	push   %fs
    pushl %gs
c0103ef1:	0f a8                	push   %gs
    pushal
c0103ef3:	60                   	pusha  

    # load GD_KDATA into %ds and %es to set up data segments for kernel
    movl $GD_KDATA, %eax
c0103ef4:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c0103ef9:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c0103efb:	8e c0                	mov    %eax,%es

    # push %esp to pass a pointer to the trapframe as an argument to trap()
    pushl %esp
c0103efd:	54                   	push   %esp

    # call trap(tf), where tf=%esp
    call trap
c0103efe:	e8 60 ff ff ff       	call   c0103e63 <trap>

    # pop the pushed stack pointer
    popl %esp
c0103f03:	5c                   	pop    %esp

c0103f04 <__trapret>:

    # return falls through to trapret...
.globl __trapret
__trapret:
    # restore registers from stack
    popal
c0103f04:	61                   	popa   

    # restore %ds, %es, %fs and %gs
    popl %gs
c0103f05:	0f a9                	pop    %gs
    popl %fs
c0103f07:	0f a1                	pop    %fs
    popl %es
c0103f09:	07                   	pop    %es
    popl %ds
c0103f0a:	1f                   	pop    %ds

    # get rid of the trap number and error code
    addl $0x8, %esp
c0103f0b:	83 c4 08             	add    $0x8,%esp
    iret
c0103f0e:	cf                   	iret   

c0103f0f <forkrets>:

.globl forkrets
forkrets:
    # set stack to this new process's trapframe
    movl 4(%esp), %esp
c0103f0f:	8b 64 24 04          	mov    0x4(%esp),%esp
    jmp __trapret
c0103f13:	e9 ec ff ff ff       	jmp    c0103f04 <__trapret>

c0103f18 <vector0>:
# handler
.text
.globl __alltraps
.globl vector0
vector0:
  pushl $0
c0103f18:	6a 00                	push   $0x0
  pushl $0
c0103f1a:	6a 00                	push   $0x0
  jmp __alltraps
c0103f1c:	e9 cc ff ff ff       	jmp    c0103eed <__alltraps>

c0103f21 <vector1>:
.globl vector1
vector1:
  pushl $0
c0103f21:	6a 00                	push   $0x0
  pushl $1
c0103f23:	6a 01                	push   $0x1
  jmp __alltraps
c0103f25:	e9 c3 ff ff ff       	jmp    c0103eed <__alltraps>

c0103f2a <vector2>:
.globl vector2
vector2:
  pushl $0
c0103f2a:	6a 00                	push   $0x0
  pushl $2
c0103f2c:	6a 02                	push   $0x2
  jmp __alltraps
c0103f2e:	e9 ba ff ff ff       	jmp    c0103eed <__alltraps>

c0103f33 <vector3>:
.globl vector3
vector3:
  pushl $0
c0103f33:	6a 00                	push   $0x0
  pushl $3
c0103f35:	6a 03                	push   $0x3
  jmp __alltraps
c0103f37:	e9 b1 ff ff ff       	jmp    c0103eed <__alltraps>

c0103f3c <vector4>:
.globl vector4
vector4:
  pushl $0
c0103f3c:	6a 00                	push   $0x0
  pushl $4
c0103f3e:	6a 04                	push   $0x4
  jmp __alltraps
c0103f40:	e9 a8 ff ff ff       	jmp    c0103eed <__alltraps>

c0103f45 <vector5>:
.globl vector5
vector5:
  pushl $0
c0103f45:	6a 00                	push   $0x0
  pushl $5
c0103f47:	6a 05                	push   $0x5
  jmp __alltraps
c0103f49:	e9 9f ff ff ff       	jmp    c0103eed <__alltraps>

c0103f4e <vector6>:
.globl vector6
vector6:
  pushl $0
c0103f4e:	6a 00                	push   $0x0
  pushl $6
c0103f50:	6a 06                	push   $0x6
  jmp __alltraps
c0103f52:	e9 96 ff ff ff       	jmp    c0103eed <__alltraps>

c0103f57 <vector7>:
.globl vector7
vector7:
  pushl $0
c0103f57:	6a 00                	push   $0x0
  pushl $7
c0103f59:	6a 07                	push   $0x7
  jmp __alltraps
c0103f5b:	e9 8d ff ff ff       	jmp    c0103eed <__alltraps>

c0103f60 <vector8>:
.globl vector8
vector8:
  pushl $8
c0103f60:	6a 08                	push   $0x8
  jmp __alltraps
c0103f62:	e9 86 ff ff ff       	jmp    c0103eed <__alltraps>

c0103f67 <vector9>:
.globl vector9
vector9:
  pushl $9
c0103f67:	6a 09                	push   $0x9
  jmp __alltraps
c0103f69:	e9 7f ff ff ff       	jmp    c0103eed <__alltraps>

c0103f6e <vector10>:
.globl vector10
vector10:
  pushl $10
c0103f6e:	6a 0a                	push   $0xa
  jmp __alltraps
c0103f70:	e9 78 ff ff ff       	jmp    c0103eed <__alltraps>

c0103f75 <vector11>:
.globl vector11
vector11:
  pushl $11
c0103f75:	6a 0b                	push   $0xb
  jmp __alltraps
c0103f77:	e9 71 ff ff ff       	jmp    c0103eed <__alltraps>

c0103f7c <vector12>:
.globl vector12
vector12:
  pushl $12
c0103f7c:	6a 0c                	push   $0xc
  jmp __alltraps
c0103f7e:	e9 6a ff ff ff       	jmp    c0103eed <__alltraps>

c0103f83 <vector13>:
.globl vector13
vector13:
  pushl $13
c0103f83:	6a 0d                	push   $0xd
  jmp __alltraps
c0103f85:	e9 63 ff ff ff       	jmp    c0103eed <__alltraps>

c0103f8a <vector14>:
.globl vector14
vector14:
  pushl $14
c0103f8a:	6a 0e                	push   $0xe
  jmp __alltraps
c0103f8c:	e9 5c ff ff ff       	jmp    c0103eed <__alltraps>

c0103f91 <vector15>:
.globl vector15
vector15:
  pushl $0
c0103f91:	6a 00                	push   $0x0
  pushl $15
c0103f93:	6a 0f                	push   $0xf
  jmp __alltraps
c0103f95:	e9 53 ff ff ff       	jmp    c0103eed <__alltraps>

c0103f9a <vector16>:
.globl vector16
vector16:
  pushl $0
c0103f9a:	6a 00                	push   $0x0
  pushl $16
c0103f9c:	6a 10                	push   $0x10
  jmp __alltraps
c0103f9e:	e9 4a ff ff ff       	jmp    c0103eed <__alltraps>

c0103fa3 <vector17>:
.globl vector17
vector17:
  pushl $17
c0103fa3:	6a 11                	push   $0x11
  jmp __alltraps
c0103fa5:	e9 43 ff ff ff       	jmp    c0103eed <__alltraps>

c0103faa <vector18>:
.globl vector18
vector18:
  pushl $0
c0103faa:	6a 00                	push   $0x0
  pushl $18
c0103fac:	6a 12                	push   $0x12
  jmp __alltraps
c0103fae:	e9 3a ff ff ff       	jmp    c0103eed <__alltraps>

c0103fb3 <vector19>:
.globl vector19
vector19:
  pushl $0
c0103fb3:	6a 00                	push   $0x0
  pushl $19
c0103fb5:	6a 13                	push   $0x13
  jmp __alltraps
c0103fb7:	e9 31 ff ff ff       	jmp    c0103eed <__alltraps>

c0103fbc <vector20>:
.globl vector20
vector20:
  pushl $0
c0103fbc:	6a 00                	push   $0x0
  pushl $20
c0103fbe:	6a 14                	push   $0x14
  jmp __alltraps
c0103fc0:	e9 28 ff ff ff       	jmp    c0103eed <__alltraps>

c0103fc5 <vector21>:
.globl vector21
vector21:
  pushl $0
c0103fc5:	6a 00                	push   $0x0
  pushl $21
c0103fc7:	6a 15                	push   $0x15
  jmp __alltraps
c0103fc9:	e9 1f ff ff ff       	jmp    c0103eed <__alltraps>

c0103fce <vector22>:
.globl vector22
vector22:
  pushl $0
c0103fce:	6a 00                	push   $0x0
  pushl $22
c0103fd0:	6a 16                	push   $0x16
  jmp __alltraps
c0103fd2:	e9 16 ff ff ff       	jmp    c0103eed <__alltraps>

c0103fd7 <vector23>:
.globl vector23
vector23:
  pushl $0
c0103fd7:	6a 00                	push   $0x0
  pushl $23
c0103fd9:	6a 17                	push   $0x17
  jmp __alltraps
c0103fdb:	e9 0d ff ff ff       	jmp    c0103eed <__alltraps>

c0103fe0 <vector24>:
.globl vector24
vector24:
  pushl $0
c0103fe0:	6a 00                	push   $0x0
  pushl $24
c0103fe2:	6a 18                	push   $0x18
  jmp __alltraps
c0103fe4:	e9 04 ff ff ff       	jmp    c0103eed <__alltraps>

c0103fe9 <vector25>:
.globl vector25
vector25:
  pushl $0
c0103fe9:	6a 00                	push   $0x0
  pushl $25
c0103feb:	6a 19                	push   $0x19
  jmp __alltraps
c0103fed:	e9 fb fe ff ff       	jmp    c0103eed <__alltraps>

c0103ff2 <vector26>:
.globl vector26
vector26:
  pushl $0
c0103ff2:	6a 00                	push   $0x0
  pushl $26
c0103ff4:	6a 1a                	push   $0x1a
  jmp __alltraps
c0103ff6:	e9 f2 fe ff ff       	jmp    c0103eed <__alltraps>

c0103ffb <vector27>:
.globl vector27
vector27:
  pushl $0
c0103ffb:	6a 00                	push   $0x0
  pushl $27
c0103ffd:	6a 1b                	push   $0x1b
  jmp __alltraps
c0103fff:	e9 e9 fe ff ff       	jmp    c0103eed <__alltraps>

c0104004 <vector28>:
.globl vector28
vector28:
  pushl $0
c0104004:	6a 00                	push   $0x0
  pushl $28
c0104006:	6a 1c                	push   $0x1c
  jmp __alltraps
c0104008:	e9 e0 fe ff ff       	jmp    c0103eed <__alltraps>

c010400d <vector29>:
.globl vector29
vector29:
  pushl $0
c010400d:	6a 00                	push   $0x0
  pushl $29
c010400f:	6a 1d                	push   $0x1d
  jmp __alltraps
c0104011:	e9 d7 fe ff ff       	jmp    c0103eed <__alltraps>

c0104016 <vector30>:
.globl vector30
vector30:
  pushl $0
c0104016:	6a 00                	push   $0x0
  pushl $30
c0104018:	6a 1e                	push   $0x1e
  jmp __alltraps
c010401a:	e9 ce fe ff ff       	jmp    c0103eed <__alltraps>

c010401f <vector31>:
.globl vector31
vector31:
  pushl $0
c010401f:	6a 00                	push   $0x0
  pushl $31
c0104021:	6a 1f                	push   $0x1f
  jmp __alltraps
c0104023:	e9 c5 fe ff ff       	jmp    c0103eed <__alltraps>

c0104028 <vector32>:
.globl vector32
vector32:
  pushl $0
c0104028:	6a 00                	push   $0x0
  pushl $32
c010402a:	6a 20                	push   $0x20
  jmp __alltraps
c010402c:	e9 bc fe ff ff       	jmp    c0103eed <__alltraps>

c0104031 <vector33>:
.globl vector33
vector33:
  pushl $0
c0104031:	6a 00                	push   $0x0
  pushl $33
c0104033:	6a 21                	push   $0x21
  jmp __alltraps
c0104035:	e9 b3 fe ff ff       	jmp    c0103eed <__alltraps>

c010403a <vector34>:
.globl vector34
vector34:
  pushl $0
c010403a:	6a 00                	push   $0x0
  pushl $34
c010403c:	6a 22                	push   $0x22
  jmp __alltraps
c010403e:	e9 aa fe ff ff       	jmp    c0103eed <__alltraps>

c0104043 <vector35>:
.globl vector35
vector35:
  pushl $0
c0104043:	6a 00                	push   $0x0
  pushl $35
c0104045:	6a 23                	push   $0x23
  jmp __alltraps
c0104047:	e9 a1 fe ff ff       	jmp    c0103eed <__alltraps>

c010404c <vector36>:
.globl vector36
vector36:
  pushl $0
c010404c:	6a 00                	push   $0x0
  pushl $36
c010404e:	6a 24                	push   $0x24
  jmp __alltraps
c0104050:	e9 98 fe ff ff       	jmp    c0103eed <__alltraps>

c0104055 <vector37>:
.globl vector37
vector37:
  pushl $0
c0104055:	6a 00                	push   $0x0
  pushl $37
c0104057:	6a 25                	push   $0x25
  jmp __alltraps
c0104059:	e9 8f fe ff ff       	jmp    c0103eed <__alltraps>

c010405e <vector38>:
.globl vector38
vector38:
  pushl $0
c010405e:	6a 00                	push   $0x0
  pushl $38
c0104060:	6a 26                	push   $0x26
  jmp __alltraps
c0104062:	e9 86 fe ff ff       	jmp    c0103eed <__alltraps>

c0104067 <vector39>:
.globl vector39
vector39:
  pushl $0
c0104067:	6a 00                	push   $0x0
  pushl $39
c0104069:	6a 27                	push   $0x27
  jmp __alltraps
c010406b:	e9 7d fe ff ff       	jmp    c0103eed <__alltraps>

c0104070 <vector40>:
.globl vector40
vector40:
  pushl $0
c0104070:	6a 00                	push   $0x0
  pushl $40
c0104072:	6a 28                	push   $0x28
  jmp __alltraps
c0104074:	e9 74 fe ff ff       	jmp    c0103eed <__alltraps>

c0104079 <vector41>:
.globl vector41
vector41:
  pushl $0
c0104079:	6a 00                	push   $0x0
  pushl $41
c010407b:	6a 29                	push   $0x29
  jmp __alltraps
c010407d:	e9 6b fe ff ff       	jmp    c0103eed <__alltraps>

c0104082 <vector42>:
.globl vector42
vector42:
  pushl $0
c0104082:	6a 00                	push   $0x0
  pushl $42
c0104084:	6a 2a                	push   $0x2a
  jmp __alltraps
c0104086:	e9 62 fe ff ff       	jmp    c0103eed <__alltraps>

c010408b <vector43>:
.globl vector43
vector43:
  pushl $0
c010408b:	6a 00                	push   $0x0
  pushl $43
c010408d:	6a 2b                	push   $0x2b
  jmp __alltraps
c010408f:	e9 59 fe ff ff       	jmp    c0103eed <__alltraps>

c0104094 <vector44>:
.globl vector44
vector44:
  pushl $0
c0104094:	6a 00                	push   $0x0
  pushl $44
c0104096:	6a 2c                	push   $0x2c
  jmp __alltraps
c0104098:	e9 50 fe ff ff       	jmp    c0103eed <__alltraps>

c010409d <vector45>:
.globl vector45
vector45:
  pushl $0
c010409d:	6a 00                	push   $0x0
  pushl $45
c010409f:	6a 2d                	push   $0x2d
  jmp __alltraps
c01040a1:	e9 47 fe ff ff       	jmp    c0103eed <__alltraps>

c01040a6 <vector46>:
.globl vector46
vector46:
  pushl $0
c01040a6:	6a 00                	push   $0x0
  pushl $46
c01040a8:	6a 2e                	push   $0x2e
  jmp __alltraps
c01040aa:	e9 3e fe ff ff       	jmp    c0103eed <__alltraps>

c01040af <vector47>:
.globl vector47
vector47:
  pushl $0
c01040af:	6a 00                	push   $0x0
  pushl $47
c01040b1:	6a 2f                	push   $0x2f
  jmp __alltraps
c01040b3:	e9 35 fe ff ff       	jmp    c0103eed <__alltraps>

c01040b8 <vector48>:
.globl vector48
vector48:
  pushl $0
c01040b8:	6a 00                	push   $0x0
  pushl $48
c01040ba:	6a 30                	push   $0x30
  jmp __alltraps
c01040bc:	e9 2c fe ff ff       	jmp    c0103eed <__alltraps>

c01040c1 <vector49>:
.globl vector49
vector49:
  pushl $0
c01040c1:	6a 00                	push   $0x0
  pushl $49
c01040c3:	6a 31                	push   $0x31
  jmp __alltraps
c01040c5:	e9 23 fe ff ff       	jmp    c0103eed <__alltraps>

c01040ca <vector50>:
.globl vector50
vector50:
  pushl $0
c01040ca:	6a 00                	push   $0x0
  pushl $50
c01040cc:	6a 32                	push   $0x32
  jmp __alltraps
c01040ce:	e9 1a fe ff ff       	jmp    c0103eed <__alltraps>

c01040d3 <vector51>:
.globl vector51
vector51:
  pushl $0
c01040d3:	6a 00                	push   $0x0
  pushl $51
c01040d5:	6a 33                	push   $0x33
  jmp __alltraps
c01040d7:	e9 11 fe ff ff       	jmp    c0103eed <__alltraps>

c01040dc <vector52>:
.globl vector52
vector52:
  pushl $0
c01040dc:	6a 00                	push   $0x0
  pushl $52
c01040de:	6a 34                	push   $0x34
  jmp __alltraps
c01040e0:	e9 08 fe ff ff       	jmp    c0103eed <__alltraps>

c01040e5 <vector53>:
.globl vector53
vector53:
  pushl $0
c01040e5:	6a 00                	push   $0x0
  pushl $53
c01040e7:	6a 35                	push   $0x35
  jmp __alltraps
c01040e9:	e9 ff fd ff ff       	jmp    c0103eed <__alltraps>

c01040ee <vector54>:
.globl vector54
vector54:
  pushl $0
c01040ee:	6a 00                	push   $0x0
  pushl $54
c01040f0:	6a 36                	push   $0x36
  jmp __alltraps
c01040f2:	e9 f6 fd ff ff       	jmp    c0103eed <__alltraps>

c01040f7 <vector55>:
.globl vector55
vector55:
  pushl $0
c01040f7:	6a 00                	push   $0x0
  pushl $55
c01040f9:	6a 37                	push   $0x37
  jmp __alltraps
c01040fb:	e9 ed fd ff ff       	jmp    c0103eed <__alltraps>

c0104100 <vector56>:
.globl vector56
vector56:
  pushl $0
c0104100:	6a 00                	push   $0x0
  pushl $56
c0104102:	6a 38                	push   $0x38
  jmp __alltraps
c0104104:	e9 e4 fd ff ff       	jmp    c0103eed <__alltraps>

c0104109 <vector57>:
.globl vector57
vector57:
  pushl $0
c0104109:	6a 00                	push   $0x0
  pushl $57
c010410b:	6a 39                	push   $0x39
  jmp __alltraps
c010410d:	e9 db fd ff ff       	jmp    c0103eed <__alltraps>

c0104112 <vector58>:
.globl vector58
vector58:
  pushl $0
c0104112:	6a 00                	push   $0x0
  pushl $58
c0104114:	6a 3a                	push   $0x3a
  jmp __alltraps
c0104116:	e9 d2 fd ff ff       	jmp    c0103eed <__alltraps>

c010411b <vector59>:
.globl vector59
vector59:
  pushl $0
c010411b:	6a 00                	push   $0x0
  pushl $59
c010411d:	6a 3b                	push   $0x3b
  jmp __alltraps
c010411f:	e9 c9 fd ff ff       	jmp    c0103eed <__alltraps>

c0104124 <vector60>:
.globl vector60
vector60:
  pushl $0
c0104124:	6a 00                	push   $0x0
  pushl $60
c0104126:	6a 3c                	push   $0x3c
  jmp __alltraps
c0104128:	e9 c0 fd ff ff       	jmp    c0103eed <__alltraps>

c010412d <vector61>:
.globl vector61
vector61:
  pushl $0
c010412d:	6a 00                	push   $0x0
  pushl $61
c010412f:	6a 3d                	push   $0x3d
  jmp __alltraps
c0104131:	e9 b7 fd ff ff       	jmp    c0103eed <__alltraps>

c0104136 <vector62>:
.globl vector62
vector62:
  pushl $0
c0104136:	6a 00                	push   $0x0
  pushl $62
c0104138:	6a 3e                	push   $0x3e
  jmp __alltraps
c010413a:	e9 ae fd ff ff       	jmp    c0103eed <__alltraps>

c010413f <vector63>:
.globl vector63
vector63:
  pushl $0
c010413f:	6a 00                	push   $0x0
  pushl $63
c0104141:	6a 3f                	push   $0x3f
  jmp __alltraps
c0104143:	e9 a5 fd ff ff       	jmp    c0103eed <__alltraps>

c0104148 <vector64>:
.globl vector64
vector64:
  pushl $0
c0104148:	6a 00                	push   $0x0
  pushl $64
c010414a:	6a 40                	push   $0x40
  jmp __alltraps
c010414c:	e9 9c fd ff ff       	jmp    c0103eed <__alltraps>

c0104151 <vector65>:
.globl vector65
vector65:
  pushl $0
c0104151:	6a 00                	push   $0x0
  pushl $65
c0104153:	6a 41                	push   $0x41
  jmp __alltraps
c0104155:	e9 93 fd ff ff       	jmp    c0103eed <__alltraps>

c010415a <vector66>:
.globl vector66
vector66:
  pushl $0
c010415a:	6a 00                	push   $0x0
  pushl $66
c010415c:	6a 42                	push   $0x42
  jmp __alltraps
c010415e:	e9 8a fd ff ff       	jmp    c0103eed <__alltraps>

c0104163 <vector67>:
.globl vector67
vector67:
  pushl $0
c0104163:	6a 00                	push   $0x0
  pushl $67
c0104165:	6a 43                	push   $0x43
  jmp __alltraps
c0104167:	e9 81 fd ff ff       	jmp    c0103eed <__alltraps>

c010416c <vector68>:
.globl vector68
vector68:
  pushl $0
c010416c:	6a 00                	push   $0x0
  pushl $68
c010416e:	6a 44                	push   $0x44
  jmp __alltraps
c0104170:	e9 78 fd ff ff       	jmp    c0103eed <__alltraps>

c0104175 <vector69>:
.globl vector69
vector69:
  pushl $0
c0104175:	6a 00                	push   $0x0
  pushl $69
c0104177:	6a 45                	push   $0x45
  jmp __alltraps
c0104179:	e9 6f fd ff ff       	jmp    c0103eed <__alltraps>

c010417e <vector70>:
.globl vector70
vector70:
  pushl $0
c010417e:	6a 00                	push   $0x0
  pushl $70
c0104180:	6a 46                	push   $0x46
  jmp __alltraps
c0104182:	e9 66 fd ff ff       	jmp    c0103eed <__alltraps>

c0104187 <vector71>:
.globl vector71
vector71:
  pushl $0
c0104187:	6a 00                	push   $0x0
  pushl $71
c0104189:	6a 47                	push   $0x47
  jmp __alltraps
c010418b:	e9 5d fd ff ff       	jmp    c0103eed <__alltraps>

c0104190 <vector72>:
.globl vector72
vector72:
  pushl $0
c0104190:	6a 00                	push   $0x0
  pushl $72
c0104192:	6a 48                	push   $0x48
  jmp __alltraps
c0104194:	e9 54 fd ff ff       	jmp    c0103eed <__alltraps>

c0104199 <vector73>:
.globl vector73
vector73:
  pushl $0
c0104199:	6a 00                	push   $0x0
  pushl $73
c010419b:	6a 49                	push   $0x49
  jmp __alltraps
c010419d:	e9 4b fd ff ff       	jmp    c0103eed <__alltraps>

c01041a2 <vector74>:
.globl vector74
vector74:
  pushl $0
c01041a2:	6a 00                	push   $0x0
  pushl $74
c01041a4:	6a 4a                	push   $0x4a
  jmp __alltraps
c01041a6:	e9 42 fd ff ff       	jmp    c0103eed <__alltraps>

c01041ab <vector75>:
.globl vector75
vector75:
  pushl $0
c01041ab:	6a 00                	push   $0x0
  pushl $75
c01041ad:	6a 4b                	push   $0x4b
  jmp __alltraps
c01041af:	e9 39 fd ff ff       	jmp    c0103eed <__alltraps>

c01041b4 <vector76>:
.globl vector76
vector76:
  pushl $0
c01041b4:	6a 00                	push   $0x0
  pushl $76
c01041b6:	6a 4c                	push   $0x4c
  jmp __alltraps
c01041b8:	e9 30 fd ff ff       	jmp    c0103eed <__alltraps>

c01041bd <vector77>:
.globl vector77
vector77:
  pushl $0
c01041bd:	6a 00                	push   $0x0
  pushl $77
c01041bf:	6a 4d                	push   $0x4d
  jmp __alltraps
c01041c1:	e9 27 fd ff ff       	jmp    c0103eed <__alltraps>

c01041c6 <vector78>:
.globl vector78
vector78:
  pushl $0
c01041c6:	6a 00                	push   $0x0
  pushl $78
c01041c8:	6a 4e                	push   $0x4e
  jmp __alltraps
c01041ca:	e9 1e fd ff ff       	jmp    c0103eed <__alltraps>

c01041cf <vector79>:
.globl vector79
vector79:
  pushl $0
c01041cf:	6a 00                	push   $0x0
  pushl $79
c01041d1:	6a 4f                	push   $0x4f
  jmp __alltraps
c01041d3:	e9 15 fd ff ff       	jmp    c0103eed <__alltraps>

c01041d8 <vector80>:
.globl vector80
vector80:
  pushl $0
c01041d8:	6a 00                	push   $0x0
  pushl $80
c01041da:	6a 50                	push   $0x50
  jmp __alltraps
c01041dc:	e9 0c fd ff ff       	jmp    c0103eed <__alltraps>

c01041e1 <vector81>:
.globl vector81
vector81:
  pushl $0
c01041e1:	6a 00                	push   $0x0
  pushl $81
c01041e3:	6a 51                	push   $0x51
  jmp __alltraps
c01041e5:	e9 03 fd ff ff       	jmp    c0103eed <__alltraps>

c01041ea <vector82>:
.globl vector82
vector82:
  pushl $0
c01041ea:	6a 00                	push   $0x0
  pushl $82
c01041ec:	6a 52                	push   $0x52
  jmp __alltraps
c01041ee:	e9 fa fc ff ff       	jmp    c0103eed <__alltraps>

c01041f3 <vector83>:
.globl vector83
vector83:
  pushl $0
c01041f3:	6a 00                	push   $0x0
  pushl $83
c01041f5:	6a 53                	push   $0x53
  jmp __alltraps
c01041f7:	e9 f1 fc ff ff       	jmp    c0103eed <__alltraps>

c01041fc <vector84>:
.globl vector84
vector84:
  pushl $0
c01041fc:	6a 00                	push   $0x0
  pushl $84
c01041fe:	6a 54                	push   $0x54
  jmp __alltraps
c0104200:	e9 e8 fc ff ff       	jmp    c0103eed <__alltraps>

c0104205 <vector85>:
.globl vector85
vector85:
  pushl $0
c0104205:	6a 00                	push   $0x0
  pushl $85
c0104207:	6a 55                	push   $0x55
  jmp __alltraps
c0104209:	e9 df fc ff ff       	jmp    c0103eed <__alltraps>

c010420e <vector86>:
.globl vector86
vector86:
  pushl $0
c010420e:	6a 00                	push   $0x0
  pushl $86
c0104210:	6a 56                	push   $0x56
  jmp __alltraps
c0104212:	e9 d6 fc ff ff       	jmp    c0103eed <__alltraps>

c0104217 <vector87>:
.globl vector87
vector87:
  pushl $0
c0104217:	6a 00                	push   $0x0
  pushl $87
c0104219:	6a 57                	push   $0x57
  jmp __alltraps
c010421b:	e9 cd fc ff ff       	jmp    c0103eed <__alltraps>

c0104220 <vector88>:
.globl vector88
vector88:
  pushl $0
c0104220:	6a 00                	push   $0x0
  pushl $88
c0104222:	6a 58                	push   $0x58
  jmp __alltraps
c0104224:	e9 c4 fc ff ff       	jmp    c0103eed <__alltraps>

c0104229 <vector89>:
.globl vector89
vector89:
  pushl $0
c0104229:	6a 00                	push   $0x0
  pushl $89
c010422b:	6a 59                	push   $0x59
  jmp __alltraps
c010422d:	e9 bb fc ff ff       	jmp    c0103eed <__alltraps>

c0104232 <vector90>:
.globl vector90
vector90:
  pushl $0
c0104232:	6a 00                	push   $0x0
  pushl $90
c0104234:	6a 5a                	push   $0x5a
  jmp __alltraps
c0104236:	e9 b2 fc ff ff       	jmp    c0103eed <__alltraps>

c010423b <vector91>:
.globl vector91
vector91:
  pushl $0
c010423b:	6a 00                	push   $0x0
  pushl $91
c010423d:	6a 5b                	push   $0x5b
  jmp __alltraps
c010423f:	e9 a9 fc ff ff       	jmp    c0103eed <__alltraps>

c0104244 <vector92>:
.globl vector92
vector92:
  pushl $0
c0104244:	6a 00                	push   $0x0
  pushl $92
c0104246:	6a 5c                	push   $0x5c
  jmp __alltraps
c0104248:	e9 a0 fc ff ff       	jmp    c0103eed <__alltraps>

c010424d <vector93>:
.globl vector93
vector93:
  pushl $0
c010424d:	6a 00                	push   $0x0
  pushl $93
c010424f:	6a 5d                	push   $0x5d
  jmp __alltraps
c0104251:	e9 97 fc ff ff       	jmp    c0103eed <__alltraps>

c0104256 <vector94>:
.globl vector94
vector94:
  pushl $0
c0104256:	6a 00                	push   $0x0
  pushl $94
c0104258:	6a 5e                	push   $0x5e
  jmp __alltraps
c010425a:	e9 8e fc ff ff       	jmp    c0103eed <__alltraps>

c010425f <vector95>:
.globl vector95
vector95:
  pushl $0
c010425f:	6a 00                	push   $0x0
  pushl $95
c0104261:	6a 5f                	push   $0x5f
  jmp __alltraps
c0104263:	e9 85 fc ff ff       	jmp    c0103eed <__alltraps>

c0104268 <vector96>:
.globl vector96
vector96:
  pushl $0
c0104268:	6a 00                	push   $0x0
  pushl $96
c010426a:	6a 60                	push   $0x60
  jmp __alltraps
c010426c:	e9 7c fc ff ff       	jmp    c0103eed <__alltraps>

c0104271 <vector97>:
.globl vector97
vector97:
  pushl $0
c0104271:	6a 00                	push   $0x0
  pushl $97
c0104273:	6a 61                	push   $0x61
  jmp __alltraps
c0104275:	e9 73 fc ff ff       	jmp    c0103eed <__alltraps>

c010427a <vector98>:
.globl vector98
vector98:
  pushl $0
c010427a:	6a 00                	push   $0x0
  pushl $98
c010427c:	6a 62                	push   $0x62
  jmp __alltraps
c010427e:	e9 6a fc ff ff       	jmp    c0103eed <__alltraps>

c0104283 <vector99>:
.globl vector99
vector99:
  pushl $0
c0104283:	6a 00                	push   $0x0
  pushl $99
c0104285:	6a 63                	push   $0x63
  jmp __alltraps
c0104287:	e9 61 fc ff ff       	jmp    c0103eed <__alltraps>

c010428c <vector100>:
.globl vector100
vector100:
  pushl $0
c010428c:	6a 00                	push   $0x0
  pushl $100
c010428e:	6a 64                	push   $0x64
  jmp __alltraps
c0104290:	e9 58 fc ff ff       	jmp    c0103eed <__alltraps>

c0104295 <vector101>:
.globl vector101
vector101:
  pushl $0
c0104295:	6a 00                	push   $0x0
  pushl $101
c0104297:	6a 65                	push   $0x65
  jmp __alltraps
c0104299:	e9 4f fc ff ff       	jmp    c0103eed <__alltraps>

c010429e <vector102>:
.globl vector102
vector102:
  pushl $0
c010429e:	6a 00                	push   $0x0
  pushl $102
c01042a0:	6a 66                	push   $0x66
  jmp __alltraps
c01042a2:	e9 46 fc ff ff       	jmp    c0103eed <__alltraps>

c01042a7 <vector103>:
.globl vector103
vector103:
  pushl $0
c01042a7:	6a 00                	push   $0x0
  pushl $103
c01042a9:	6a 67                	push   $0x67
  jmp __alltraps
c01042ab:	e9 3d fc ff ff       	jmp    c0103eed <__alltraps>

c01042b0 <vector104>:
.globl vector104
vector104:
  pushl $0
c01042b0:	6a 00                	push   $0x0
  pushl $104
c01042b2:	6a 68                	push   $0x68
  jmp __alltraps
c01042b4:	e9 34 fc ff ff       	jmp    c0103eed <__alltraps>

c01042b9 <vector105>:
.globl vector105
vector105:
  pushl $0
c01042b9:	6a 00                	push   $0x0
  pushl $105
c01042bb:	6a 69                	push   $0x69
  jmp __alltraps
c01042bd:	e9 2b fc ff ff       	jmp    c0103eed <__alltraps>

c01042c2 <vector106>:
.globl vector106
vector106:
  pushl $0
c01042c2:	6a 00                	push   $0x0
  pushl $106
c01042c4:	6a 6a                	push   $0x6a
  jmp __alltraps
c01042c6:	e9 22 fc ff ff       	jmp    c0103eed <__alltraps>

c01042cb <vector107>:
.globl vector107
vector107:
  pushl $0
c01042cb:	6a 00                	push   $0x0
  pushl $107
c01042cd:	6a 6b                	push   $0x6b
  jmp __alltraps
c01042cf:	e9 19 fc ff ff       	jmp    c0103eed <__alltraps>

c01042d4 <vector108>:
.globl vector108
vector108:
  pushl $0
c01042d4:	6a 00                	push   $0x0
  pushl $108
c01042d6:	6a 6c                	push   $0x6c
  jmp __alltraps
c01042d8:	e9 10 fc ff ff       	jmp    c0103eed <__alltraps>

c01042dd <vector109>:
.globl vector109
vector109:
  pushl $0
c01042dd:	6a 00                	push   $0x0
  pushl $109
c01042df:	6a 6d                	push   $0x6d
  jmp __alltraps
c01042e1:	e9 07 fc ff ff       	jmp    c0103eed <__alltraps>

c01042e6 <vector110>:
.globl vector110
vector110:
  pushl $0
c01042e6:	6a 00                	push   $0x0
  pushl $110
c01042e8:	6a 6e                	push   $0x6e
  jmp __alltraps
c01042ea:	e9 fe fb ff ff       	jmp    c0103eed <__alltraps>

c01042ef <vector111>:
.globl vector111
vector111:
  pushl $0
c01042ef:	6a 00                	push   $0x0
  pushl $111
c01042f1:	6a 6f                	push   $0x6f
  jmp __alltraps
c01042f3:	e9 f5 fb ff ff       	jmp    c0103eed <__alltraps>

c01042f8 <vector112>:
.globl vector112
vector112:
  pushl $0
c01042f8:	6a 00                	push   $0x0
  pushl $112
c01042fa:	6a 70                	push   $0x70
  jmp __alltraps
c01042fc:	e9 ec fb ff ff       	jmp    c0103eed <__alltraps>

c0104301 <vector113>:
.globl vector113
vector113:
  pushl $0
c0104301:	6a 00                	push   $0x0
  pushl $113
c0104303:	6a 71                	push   $0x71
  jmp __alltraps
c0104305:	e9 e3 fb ff ff       	jmp    c0103eed <__alltraps>

c010430a <vector114>:
.globl vector114
vector114:
  pushl $0
c010430a:	6a 00                	push   $0x0
  pushl $114
c010430c:	6a 72                	push   $0x72
  jmp __alltraps
c010430e:	e9 da fb ff ff       	jmp    c0103eed <__alltraps>

c0104313 <vector115>:
.globl vector115
vector115:
  pushl $0
c0104313:	6a 00                	push   $0x0
  pushl $115
c0104315:	6a 73                	push   $0x73
  jmp __alltraps
c0104317:	e9 d1 fb ff ff       	jmp    c0103eed <__alltraps>

c010431c <vector116>:
.globl vector116
vector116:
  pushl $0
c010431c:	6a 00                	push   $0x0
  pushl $116
c010431e:	6a 74                	push   $0x74
  jmp __alltraps
c0104320:	e9 c8 fb ff ff       	jmp    c0103eed <__alltraps>

c0104325 <vector117>:
.globl vector117
vector117:
  pushl $0
c0104325:	6a 00                	push   $0x0
  pushl $117
c0104327:	6a 75                	push   $0x75
  jmp __alltraps
c0104329:	e9 bf fb ff ff       	jmp    c0103eed <__alltraps>

c010432e <vector118>:
.globl vector118
vector118:
  pushl $0
c010432e:	6a 00                	push   $0x0
  pushl $118
c0104330:	6a 76                	push   $0x76
  jmp __alltraps
c0104332:	e9 b6 fb ff ff       	jmp    c0103eed <__alltraps>

c0104337 <vector119>:
.globl vector119
vector119:
  pushl $0
c0104337:	6a 00                	push   $0x0
  pushl $119
c0104339:	6a 77                	push   $0x77
  jmp __alltraps
c010433b:	e9 ad fb ff ff       	jmp    c0103eed <__alltraps>

c0104340 <vector120>:
.globl vector120
vector120:
  pushl $0
c0104340:	6a 00                	push   $0x0
  pushl $120
c0104342:	6a 78                	push   $0x78
  jmp __alltraps
c0104344:	e9 a4 fb ff ff       	jmp    c0103eed <__alltraps>

c0104349 <vector121>:
.globl vector121
vector121:
  pushl $0
c0104349:	6a 00                	push   $0x0
  pushl $121
c010434b:	6a 79                	push   $0x79
  jmp __alltraps
c010434d:	e9 9b fb ff ff       	jmp    c0103eed <__alltraps>

c0104352 <vector122>:
.globl vector122
vector122:
  pushl $0
c0104352:	6a 00                	push   $0x0
  pushl $122
c0104354:	6a 7a                	push   $0x7a
  jmp __alltraps
c0104356:	e9 92 fb ff ff       	jmp    c0103eed <__alltraps>

c010435b <vector123>:
.globl vector123
vector123:
  pushl $0
c010435b:	6a 00                	push   $0x0
  pushl $123
c010435d:	6a 7b                	push   $0x7b
  jmp __alltraps
c010435f:	e9 89 fb ff ff       	jmp    c0103eed <__alltraps>

c0104364 <vector124>:
.globl vector124
vector124:
  pushl $0
c0104364:	6a 00                	push   $0x0
  pushl $124
c0104366:	6a 7c                	push   $0x7c
  jmp __alltraps
c0104368:	e9 80 fb ff ff       	jmp    c0103eed <__alltraps>

c010436d <vector125>:
.globl vector125
vector125:
  pushl $0
c010436d:	6a 00                	push   $0x0
  pushl $125
c010436f:	6a 7d                	push   $0x7d
  jmp __alltraps
c0104371:	e9 77 fb ff ff       	jmp    c0103eed <__alltraps>

c0104376 <vector126>:
.globl vector126
vector126:
  pushl $0
c0104376:	6a 00                	push   $0x0
  pushl $126
c0104378:	6a 7e                	push   $0x7e
  jmp __alltraps
c010437a:	e9 6e fb ff ff       	jmp    c0103eed <__alltraps>

c010437f <vector127>:
.globl vector127
vector127:
  pushl $0
c010437f:	6a 00                	push   $0x0
  pushl $127
c0104381:	6a 7f                	push   $0x7f
  jmp __alltraps
c0104383:	e9 65 fb ff ff       	jmp    c0103eed <__alltraps>

c0104388 <vector128>:
.globl vector128
vector128:
  pushl $0
c0104388:	6a 00                	push   $0x0
  pushl $128
c010438a:	68 80 00 00 00       	push   $0x80
  jmp __alltraps
c010438f:	e9 59 fb ff ff       	jmp    c0103eed <__alltraps>

c0104394 <vector129>:
.globl vector129
vector129:
  pushl $0
c0104394:	6a 00                	push   $0x0
  pushl $129
c0104396:	68 81 00 00 00       	push   $0x81
  jmp __alltraps
c010439b:	e9 4d fb ff ff       	jmp    c0103eed <__alltraps>

c01043a0 <vector130>:
.globl vector130
vector130:
  pushl $0
c01043a0:	6a 00                	push   $0x0
  pushl $130
c01043a2:	68 82 00 00 00       	push   $0x82
  jmp __alltraps
c01043a7:	e9 41 fb ff ff       	jmp    c0103eed <__alltraps>

c01043ac <vector131>:
.globl vector131
vector131:
  pushl $0
c01043ac:	6a 00                	push   $0x0
  pushl $131
c01043ae:	68 83 00 00 00       	push   $0x83
  jmp __alltraps
c01043b3:	e9 35 fb ff ff       	jmp    c0103eed <__alltraps>

c01043b8 <vector132>:
.globl vector132
vector132:
  pushl $0
c01043b8:	6a 00                	push   $0x0
  pushl $132
c01043ba:	68 84 00 00 00       	push   $0x84
  jmp __alltraps
c01043bf:	e9 29 fb ff ff       	jmp    c0103eed <__alltraps>

c01043c4 <vector133>:
.globl vector133
vector133:
  pushl $0
c01043c4:	6a 00                	push   $0x0
  pushl $133
c01043c6:	68 85 00 00 00       	push   $0x85
  jmp __alltraps
c01043cb:	e9 1d fb ff ff       	jmp    c0103eed <__alltraps>

c01043d0 <vector134>:
.globl vector134
vector134:
  pushl $0
c01043d0:	6a 00                	push   $0x0
  pushl $134
c01043d2:	68 86 00 00 00       	push   $0x86
  jmp __alltraps
c01043d7:	e9 11 fb ff ff       	jmp    c0103eed <__alltraps>

c01043dc <vector135>:
.globl vector135
vector135:
  pushl $0
c01043dc:	6a 00                	push   $0x0
  pushl $135
c01043de:	68 87 00 00 00       	push   $0x87
  jmp __alltraps
c01043e3:	e9 05 fb ff ff       	jmp    c0103eed <__alltraps>

c01043e8 <vector136>:
.globl vector136
vector136:
  pushl $0
c01043e8:	6a 00                	push   $0x0
  pushl $136
c01043ea:	68 88 00 00 00       	push   $0x88
  jmp __alltraps
c01043ef:	e9 f9 fa ff ff       	jmp    c0103eed <__alltraps>

c01043f4 <vector137>:
.globl vector137
vector137:
  pushl $0
c01043f4:	6a 00                	push   $0x0
  pushl $137
c01043f6:	68 89 00 00 00       	push   $0x89
  jmp __alltraps
c01043fb:	e9 ed fa ff ff       	jmp    c0103eed <__alltraps>

c0104400 <vector138>:
.globl vector138
vector138:
  pushl $0
c0104400:	6a 00                	push   $0x0
  pushl $138
c0104402:	68 8a 00 00 00       	push   $0x8a
  jmp __alltraps
c0104407:	e9 e1 fa ff ff       	jmp    c0103eed <__alltraps>

c010440c <vector139>:
.globl vector139
vector139:
  pushl $0
c010440c:	6a 00                	push   $0x0
  pushl $139
c010440e:	68 8b 00 00 00       	push   $0x8b
  jmp __alltraps
c0104413:	e9 d5 fa ff ff       	jmp    c0103eed <__alltraps>

c0104418 <vector140>:
.globl vector140
vector140:
  pushl $0
c0104418:	6a 00                	push   $0x0
  pushl $140
c010441a:	68 8c 00 00 00       	push   $0x8c
  jmp __alltraps
c010441f:	e9 c9 fa ff ff       	jmp    c0103eed <__alltraps>

c0104424 <vector141>:
.globl vector141
vector141:
  pushl $0
c0104424:	6a 00                	push   $0x0
  pushl $141
c0104426:	68 8d 00 00 00       	push   $0x8d
  jmp __alltraps
c010442b:	e9 bd fa ff ff       	jmp    c0103eed <__alltraps>

c0104430 <vector142>:
.globl vector142
vector142:
  pushl $0
c0104430:	6a 00                	push   $0x0
  pushl $142
c0104432:	68 8e 00 00 00       	push   $0x8e
  jmp __alltraps
c0104437:	e9 b1 fa ff ff       	jmp    c0103eed <__alltraps>

c010443c <vector143>:
.globl vector143
vector143:
  pushl $0
c010443c:	6a 00                	push   $0x0
  pushl $143
c010443e:	68 8f 00 00 00       	push   $0x8f
  jmp __alltraps
c0104443:	e9 a5 fa ff ff       	jmp    c0103eed <__alltraps>

c0104448 <vector144>:
.globl vector144
vector144:
  pushl $0
c0104448:	6a 00                	push   $0x0
  pushl $144
c010444a:	68 90 00 00 00       	push   $0x90
  jmp __alltraps
c010444f:	e9 99 fa ff ff       	jmp    c0103eed <__alltraps>

c0104454 <vector145>:
.globl vector145
vector145:
  pushl $0
c0104454:	6a 00                	push   $0x0
  pushl $145
c0104456:	68 91 00 00 00       	push   $0x91
  jmp __alltraps
c010445b:	e9 8d fa ff ff       	jmp    c0103eed <__alltraps>

c0104460 <vector146>:
.globl vector146
vector146:
  pushl $0
c0104460:	6a 00                	push   $0x0
  pushl $146
c0104462:	68 92 00 00 00       	push   $0x92
  jmp __alltraps
c0104467:	e9 81 fa ff ff       	jmp    c0103eed <__alltraps>

c010446c <vector147>:
.globl vector147
vector147:
  pushl $0
c010446c:	6a 00                	push   $0x0
  pushl $147
c010446e:	68 93 00 00 00       	push   $0x93
  jmp __alltraps
c0104473:	e9 75 fa ff ff       	jmp    c0103eed <__alltraps>

c0104478 <vector148>:
.globl vector148
vector148:
  pushl $0
c0104478:	6a 00                	push   $0x0
  pushl $148
c010447a:	68 94 00 00 00       	push   $0x94
  jmp __alltraps
c010447f:	e9 69 fa ff ff       	jmp    c0103eed <__alltraps>

c0104484 <vector149>:
.globl vector149
vector149:
  pushl $0
c0104484:	6a 00                	push   $0x0
  pushl $149
c0104486:	68 95 00 00 00       	push   $0x95
  jmp __alltraps
c010448b:	e9 5d fa ff ff       	jmp    c0103eed <__alltraps>

c0104490 <vector150>:
.globl vector150
vector150:
  pushl $0
c0104490:	6a 00                	push   $0x0
  pushl $150
c0104492:	68 96 00 00 00       	push   $0x96
  jmp __alltraps
c0104497:	e9 51 fa ff ff       	jmp    c0103eed <__alltraps>

c010449c <vector151>:
.globl vector151
vector151:
  pushl $0
c010449c:	6a 00                	push   $0x0
  pushl $151
c010449e:	68 97 00 00 00       	push   $0x97
  jmp __alltraps
c01044a3:	e9 45 fa ff ff       	jmp    c0103eed <__alltraps>

c01044a8 <vector152>:
.globl vector152
vector152:
  pushl $0
c01044a8:	6a 00                	push   $0x0
  pushl $152
c01044aa:	68 98 00 00 00       	push   $0x98
  jmp __alltraps
c01044af:	e9 39 fa ff ff       	jmp    c0103eed <__alltraps>

c01044b4 <vector153>:
.globl vector153
vector153:
  pushl $0
c01044b4:	6a 00                	push   $0x0
  pushl $153
c01044b6:	68 99 00 00 00       	push   $0x99
  jmp __alltraps
c01044bb:	e9 2d fa ff ff       	jmp    c0103eed <__alltraps>

c01044c0 <vector154>:
.globl vector154
vector154:
  pushl $0
c01044c0:	6a 00                	push   $0x0
  pushl $154
c01044c2:	68 9a 00 00 00       	push   $0x9a
  jmp __alltraps
c01044c7:	e9 21 fa ff ff       	jmp    c0103eed <__alltraps>

c01044cc <vector155>:
.globl vector155
vector155:
  pushl $0
c01044cc:	6a 00                	push   $0x0
  pushl $155
c01044ce:	68 9b 00 00 00       	push   $0x9b
  jmp __alltraps
c01044d3:	e9 15 fa ff ff       	jmp    c0103eed <__alltraps>

c01044d8 <vector156>:
.globl vector156
vector156:
  pushl $0
c01044d8:	6a 00                	push   $0x0
  pushl $156
c01044da:	68 9c 00 00 00       	push   $0x9c
  jmp __alltraps
c01044df:	e9 09 fa ff ff       	jmp    c0103eed <__alltraps>

c01044e4 <vector157>:
.globl vector157
vector157:
  pushl $0
c01044e4:	6a 00                	push   $0x0
  pushl $157
c01044e6:	68 9d 00 00 00       	push   $0x9d
  jmp __alltraps
c01044eb:	e9 fd f9 ff ff       	jmp    c0103eed <__alltraps>

c01044f0 <vector158>:
.globl vector158
vector158:
  pushl $0
c01044f0:	6a 00                	push   $0x0
  pushl $158
c01044f2:	68 9e 00 00 00       	push   $0x9e
  jmp __alltraps
c01044f7:	e9 f1 f9 ff ff       	jmp    c0103eed <__alltraps>

c01044fc <vector159>:
.globl vector159
vector159:
  pushl $0
c01044fc:	6a 00                	push   $0x0
  pushl $159
c01044fe:	68 9f 00 00 00       	push   $0x9f
  jmp __alltraps
c0104503:	e9 e5 f9 ff ff       	jmp    c0103eed <__alltraps>

c0104508 <vector160>:
.globl vector160
vector160:
  pushl $0
c0104508:	6a 00                	push   $0x0
  pushl $160
c010450a:	68 a0 00 00 00       	push   $0xa0
  jmp __alltraps
c010450f:	e9 d9 f9 ff ff       	jmp    c0103eed <__alltraps>

c0104514 <vector161>:
.globl vector161
vector161:
  pushl $0
c0104514:	6a 00                	push   $0x0
  pushl $161
c0104516:	68 a1 00 00 00       	push   $0xa1
  jmp __alltraps
c010451b:	e9 cd f9 ff ff       	jmp    c0103eed <__alltraps>

c0104520 <vector162>:
.globl vector162
vector162:
  pushl $0
c0104520:	6a 00                	push   $0x0
  pushl $162
c0104522:	68 a2 00 00 00       	push   $0xa2
  jmp __alltraps
c0104527:	e9 c1 f9 ff ff       	jmp    c0103eed <__alltraps>

c010452c <vector163>:
.globl vector163
vector163:
  pushl $0
c010452c:	6a 00                	push   $0x0
  pushl $163
c010452e:	68 a3 00 00 00       	push   $0xa3
  jmp __alltraps
c0104533:	e9 b5 f9 ff ff       	jmp    c0103eed <__alltraps>

c0104538 <vector164>:
.globl vector164
vector164:
  pushl $0
c0104538:	6a 00                	push   $0x0
  pushl $164
c010453a:	68 a4 00 00 00       	push   $0xa4
  jmp __alltraps
c010453f:	e9 a9 f9 ff ff       	jmp    c0103eed <__alltraps>

c0104544 <vector165>:
.globl vector165
vector165:
  pushl $0
c0104544:	6a 00                	push   $0x0
  pushl $165
c0104546:	68 a5 00 00 00       	push   $0xa5
  jmp __alltraps
c010454b:	e9 9d f9 ff ff       	jmp    c0103eed <__alltraps>

c0104550 <vector166>:
.globl vector166
vector166:
  pushl $0
c0104550:	6a 00                	push   $0x0
  pushl $166
c0104552:	68 a6 00 00 00       	push   $0xa6
  jmp __alltraps
c0104557:	e9 91 f9 ff ff       	jmp    c0103eed <__alltraps>

c010455c <vector167>:
.globl vector167
vector167:
  pushl $0
c010455c:	6a 00                	push   $0x0
  pushl $167
c010455e:	68 a7 00 00 00       	push   $0xa7
  jmp __alltraps
c0104563:	e9 85 f9 ff ff       	jmp    c0103eed <__alltraps>

c0104568 <vector168>:
.globl vector168
vector168:
  pushl $0
c0104568:	6a 00                	push   $0x0
  pushl $168
c010456a:	68 a8 00 00 00       	push   $0xa8
  jmp __alltraps
c010456f:	e9 79 f9 ff ff       	jmp    c0103eed <__alltraps>

c0104574 <vector169>:
.globl vector169
vector169:
  pushl $0
c0104574:	6a 00                	push   $0x0
  pushl $169
c0104576:	68 a9 00 00 00       	push   $0xa9
  jmp __alltraps
c010457b:	e9 6d f9 ff ff       	jmp    c0103eed <__alltraps>

c0104580 <vector170>:
.globl vector170
vector170:
  pushl $0
c0104580:	6a 00                	push   $0x0
  pushl $170
c0104582:	68 aa 00 00 00       	push   $0xaa
  jmp __alltraps
c0104587:	e9 61 f9 ff ff       	jmp    c0103eed <__alltraps>

c010458c <vector171>:
.globl vector171
vector171:
  pushl $0
c010458c:	6a 00                	push   $0x0
  pushl $171
c010458e:	68 ab 00 00 00       	push   $0xab
  jmp __alltraps
c0104593:	e9 55 f9 ff ff       	jmp    c0103eed <__alltraps>

c0104598 <vector172>:
.globl vector172
vector172:
  pushl $0
c0104598:	6a 00                	push   $0x0
  pushl $172
c010459a:	68 ac 00 00 00       	push   $0xac
  jmp __alltraps
c010459f:	e9 49 f9 ff ff       	jmp    c0103eed <__alltraps>

c01045a4 <vector173>:
.globl vector173
vector173:
  pushl $0
c01045a4:	6a 00                	push   $0x0
  pushl $173
c01045a6:	68 ad 00 00 00       	push   $0xad
  jmp __alltraps
c01045ab:	e9 3d f9 ff ff       	jmp    c0103eed <__alltraps>

c01045b0 <vector174>:
.globl vector174
vector174:
  pushl $0
c01045b0:	6a 00                	push   $0x0
  pushl $174
c01045b2:	68 ae 00 00 00       	push   $0xae
  jmp __alltraps
c01045b7:	e9 31 f9 ff ff       	jmp    c0103eed <__alltraps>

c01045bc <vector175>:
.globl vector175
vector175:
  pushl $0
c01045bc:	6a 00                	push   $0x0
  pushl $175
c01045be:	68 af 00 00 00       	push   $0xaf
  jmp __alltraps
c01045c3:	e9 25 f9 ff ff       	jmp    c0103eed <__alltraps>

c01045c8 <vector176>:
.globl vector176
vector176:
  pushl $0
c01045c8:	6a 00                	push   $0x0
  pushl $176
c01045ca:	68 b0 00 00 00       	push   $0xb0
  jmp __alltraps
c01045cf:	e9 19 f9 ff ff       	jmp    c0103eed <__alltraps>

c01045d4 <vector177>:
.globl vector177
vector177:
  pushl $0
c01045d4:	6a 00                	push   $0x0
  pushl $177
c01045d6:	68 b1 00 00 00       	push   $0xb1
  jmp __alltraps
c01045db:	e9 0d f9 ff ff       	jmp    c0103eed <__alltraps>

c01045e0 <vector178>:
.globl vector178
vector178:
  pushl $0
c01045e0:	6a 00                	push   $0x0
  pushl $178
c01045e2:	68 b2 00 00 00       	push   $0xb2
  jmp __alltraps
c01045e7:	e9 01 f9 ff ff       	jmp    c0103eed <__alltraps>

c01045ec <vector179>:
.globl vector179
vector179:
  pushl $0
c01045ec:	6a 00                	push   $0x0
  pushl $179
c01045ee:	68 b3 00 00 00       	push   $0xb3
  jmp __alltraps
c01045f3:	e9 f5 f8 ff ff       	jmp    c0103eed <__alltraps>

c01045f8 <vector180>:
.globl vector180
vector180:
  pushl $0
c01045f8:	6a 00                	push   $0x0
  pushl $180
c01045fa:	68 b4 00 00 00       	push   $0xb4
  jmp __alltraps
c01045ff:	e9 e9 f8 ff ff       	jmp    c0103eed <__alltraps>

c0104604 <vector181>:
.globl vector181
vector181:
  pushl $0
c0104604:	6a 00                	push   $0x0
  pushl $181
c0104606:	68 b5 00 00 00       	push   $0xb5
  jmp __alltraps
c010460b:	e9 dd f8 ff ff       	jmp    c0103eed <__alltraps>

c0104610 <vector182>:
.globl vector182
vector182:
  pushl $0
c0104610:	6a 00                	push   $0x0
  pushl $182
c0104612:	68 b6 00 00 00       	push   $0xb6
  jmp __alltraps
c0104617:	e9 d1 f8 ff ff       	jmp    c0103eed <__alltraps>

c010461c <vector183>:
.globl vector183
vector183:
  pushl $0
c010461c:	6a 00                	push   $0x0
  pushl $183
c010461e:	68 b7 00 00 00       	push   $0xb7
  jmp __alltraps
c0104623:	e9 c5 f8 ff ff       	jmp    c0103eed <__alltraps>

c0104628 <vector184>:
.globl vector184
vector184:
  pushl $0
c0104628:	6a 00                	push   $0x0
  pushl $184
c010462a:	68 b8 00 00 00       	push   $0xb8
  jmp __alltraps
c010462f:	e9 b9 f8 ff ff       	jmp    c0103eed <__alltraps>

c0104634 <vector185>:
.globl vector185
vector185:
  pushl $0
c0104634:	6a 00                	push   $0x0
  pushl $185
c0104636:	68 b9 00 00 00       	push   $0xb9
  jmp __alltraps
c010463b:	e9 ad f8 ff ff       	jmp    c0103eed <__alltraps>

c0104640 <vector186>:
.globl vector186
vector186:
  pushl $0
c0104640:	6a 00                	push   $0x0
  pushl $186
c0104642:	68 ba 00 00 00       	push   $0xba
  jmp __alltraps
c0104647:	e9 a1 f8 ff ff       	jmp    c0103eed <__alltraps>

c010464c <vector187>:
.globl vector187
vector187:
  pushl $0
c010464c:	6a 00                	push   $0x0
  pushl $187
c010464e:	68 bb 00 00 00       	push   $0xbb
  jmp __alltraps
c0104653:	e9 95 f8 ff ff       	jmp    c0103eed <__alltraps>

c0104658 <vector188>:
.globl vector188
vector188:
  pushl $0
c0104658:	6a 00                	push   $0x0
  pushl $188
c010465a:	68 bc 00 00 00       	push   $0xbc
  jmp __alltraps
c010465f:	e9 89 f8 ff ff       	jmp    c0103eed <__alltraps>

c0104664 <vector189>:
.globl vector189
vector189:
  pushl $0
c0104664:	6a 00                	push   $0x0
  pushl $189
c0104666:	68 bd 00 00 00       	push   $0xbd
  jmp __alltraps
c010466b:	e9 7d f8 ff ff       	jmp    c0103eed <__alltraps>

c0104670 <vector190>:
.globl vector190
vector190:
  pushl $0
c0104670:	6a 00                	push   $0x0
  pushl $190
c0104672:	68 be 00 00 00       	push   $0xbe
  jmp __alltraps
c0104677:	e9 71 f8 ff ff       	jmp    c0103eed <__alltraps>

c010467c <vector191>:
.globl vector191
vector191:
  pushl $0
c010467c:	6a 00                	push   $0x0
  pushl $191
c010467e:	68 bf 00 00 00       	push   $0xbf
  jmp __alltraps
c0104683:	e9 65 f8 ff ff       	jmp    c0103eed <__alltraps>

c0104688 <vector192>:
.globl vector192
vector192:
  pushl $0
c0104688:	6a 00                	push   $0x0
  pushl $192
c010468a:	68 c0 00 00 00       	push   $0xc0
  jmp __alltraps
c010468f:	e9 59 f8 ff ff       	jmp    c0103eed <__alltraps>

c0104694 <vector193>:
.globl vector193
vector193:
  pushl $0
c0104694:	6a 00                	push   $0x0
  pushl $193
c0104696:	68 c1 00 00 00       	push   $0xc1
  jmp __alltraps
c010469b:	e9 4d f8 ff ff       	jmp    c0103eed <__alltraps>

c01046a0 <vector194>:
.globl vector194
vector194:
  pushl $0
c01046a0:	6a 00                	push   $0x0
  pushl $194
c01046a2:	68 c2 00 00 00       	push   $0xc2
  jmp __alltraps
c01046a7:	e9 41 f8 ff ff       	jmp    c0103eed <__alltraps>

c01046ac <vector195>:
.globl vector195
vector195:
  pushl $0
c01046ac:	6a 00                	push   $0x0
  pushl $195
c01046ae:	68 c3 00 00 00       	push   $0xc3
  jmp __alltraps
c01046b3:	e9 35 f8 ff ff       	jmp    c0103eed <__alltraps>

c01046b8 <vector196>:
.globl vector196
vector196:
  pushl $0
c01046b8:	6a 00                	push   $0x0
  pushl $196
c01046ba:	68 c4 00 00 00       	push   $0xc4
  jmp __alltraps
c01046bf:	e9 29 f8 ff ff       	jmp    c0103eed <__alltraps>

c01046c4 <vector197>:
.globl vector197
vector197:
  pushl $0
c01046c4:	6a 00                	push   $0x0
  pushl $197
c01046c6:	68 c5 00 00 00       	push   $0xc5
  jmp __alltraps
c01046cb:	e9 1d f8 ff ff       	jmp    c0103eed <__alltraps>

c01046d0 <vector198>:
.globl vector198
vector198:
  pushl $0
c01046d0:	6a 00                	push   $0x0
  pushl $198
c01046d2:	68 c6 00 00 00       	push   $0xc6
  jmp __alltraps
c01046d7:	e9 11 f8 ff ff       	jmp    c0103eed <__alltraps>

c01046dc <vector199>:
.globl vector199
vector199:
  pushl $0
c01046dc:	6a 00                	push   $0x0
  pushl $199
c01046de:	68 c7 00 00 00       	push   $0xc7
  jmp __alltraps
c01046e3:	e9 05 f8 ff ff       	jmp    c0103eed <__alltraps>

c01046e8 <vector200>:
.globl vector200
vector200:
  pushl $0
c01046e8:	6a 00                	push   $0x0
  pushl $200
c01046ea:	68 c8 00 00 00       	push   $0xc8
  jmp __alltraps
c01046ef:	e9 f9 f7 ff ff       	jmp    c0103eed <__alltraps>

c01046f4 <vector201>:
.globl vector201
vector201:
  pushl $0
c01046f4:	6a 00                	push   $0x0
  pushl $201
c01046f6:	68 c9 00 00 00       	push   $0xc9
  jmp __alltraps
c01046fb:	e9 ed f7 ff ff       	jmp    c0103eed <__alltraps>

c0104700 <vector202>:
.globl vector202
vector202:
  pushl $0
c0104700:	6a 00                	push   $0x0
  pushl $202
c0104702:	68 ca 00 00 00       	push   $0xca
  jmp __alltraps
c0104707:	e9 e1 f7 ff ff       	jmp    c0103eed <__alltraps>

c010470c <vector203>:
.globl vector203
vector203:
  pushl $0
c010470c:	6a 00                	push   $0x0
  pushl $203
c010470e:	68 cb 00 00 00       	push   $0xcb
  jmp __alltraps
c0104713:	e9 d5 f7 ff ff       	jmp    c0103eed <__alltraps>

c0104718 <vector204>:
.globl vector204
vector204:
  pushl $0
c0104718:	6a 00                	push   $0x0
  pushl $204
c010471a:	68 cc 00 00 00       	push   $0xcc
  jmp __alltraps
c010471f:	e9 c9 f7 ff ff       	jmp    c0103eed <__alltraps>

c0104724 <vector205>:
.globl vector205
vector205:
  pushl $0
c0104724:	6a 00                	push   $0x0
  pushl $205
c0104726:	68 cd 00 00 00       	push   $0xcd
  jmp __alltraps
c010472b:	e9 bd f7 ff ff       	jmp    c0103eed <__alltraps>

c0104730 <vector206>:
.globl vector206
vector206:
  pushl $0
c0104730:	6a 00                	push   $0x0
  pushl $206
c0104732:	68 ce 00 00 00       	push   $0xce
  jmp __alltraps
c0104737:	e9 b1 f7 ff ff       	jmp    c0103eed <__alltraps>

c010473c <vector207>:
.globl vector207
vector207:
  pushl $0
c010473c:	6a 00                	push   $0x0
  pushl $207
c010473e:	68 cf 00 00 00       	push   $0xcf
  jmp __alltraps
c0104743:	e9 a5 f7 ff ff       	jmp    c0103eed <__alltraps>

c0104748 <vector208>:
.globl vector208
vector208:
  pushl $0
c0104748:	6a 00                	push   $0x0
  pushl $208
c010474a:	68 d0 00 00 00       	push   $0xd0
  jmp __alltraps
c010474f:	e9 99 f7 ff ff       	jmp    c0103eed <__alltraps>

c0104754 <vector209>:
.globl vector209
vector209:
  pushl $0
c0104754:	6a 00                	push   $0x0
  pushl $209
c0104756:	68 d1 00 00 00       	push   $0xd1
  jmp __alltraps
c010475b:	e9 8d f7 ff ff       	jmp    c0103eed <__alltraps>

c0104760 <vector210>:
.globl vector210
vector210:
  pushl $0
c0104760:	6a 00                	push   $0x0
  pushl $210
c0104762:	68 d2 00 00 00       	push   $0xd2
  jmp __alltraps
c0104767:	e9 81 f7 ff ff       	jmp    c0103eed <__alltraps>

c010476c <vector211>:
.globl vector211
vector211:
  pushl $0
c010476c:	6a 00                	push   $0x0
  pushl $211
c010476e:	68 d3 00 00 00       	push   $0xd3
  jmp __alltraps
c0104773:	e9 75 f7 ff ff       	jmp    c0103eed <__alltraps>

c0104778 <vector212>:
.globl vector212
vector212:
  pushl $0
c0104778:	6a 00                	push   $0x0
  pushl $212
c010477a:	68 d4 00 00 00       	push   $0xd4
  jmp __alltraps
c010477f:	e9 69 f7 ff ff       	jmp    c0103eed <__alltraps>

c0104784 <vector213>:
.globl vector213
vector213:
  pushl $0
c0104784:	6a 00                	push   $0x0
  pushl $213
c0104786:	68 d5 00 00 00       	push   $0xd5
  jmp __alltraps
c010478b:	e9 5d f7 ff ff       	jmp    c0103eed <__alltraps>

c0104790 <vector214>:
.globl vector214
vector214:
  pushl $0
c0104790:	6a 00                	push   $0x0
  pushl $214
c0104792:	68 d6 00 00 00       	push   $0xd6
  jmp __alltraps
c0104797:	e9 51 f7 ff ff       	jmp    c0103eed <__alltraps>

c010479c <vector215>:
.globl vector215
vector215:
  pushl $0
c010479c:	6a 00                	push   $0x0
  pushl $215
c010479e:	68 d7 00 00 00       	push   $0xd7
  jmp __alltraps
c01047a3:	e9 45 f7 ff ff       	jmp    c0103eed <__alltraps>

c01047a8 <vector216>:
.globl vector216
vector216:
  pushl $0
c01047a8:	6a 00                	push   $0x0
  pushl $216
c01047aa:	68 d8 00 00 00       	push   $0xd8
  jmp __alltraps
c01047af:	e9 39 f7 ff ff       	jmp    c0103eed <__alltraps>

c01047b4 <vector217>:
.globl vector217
vector217:
  pushl $0
c01047b4:	6a 00                	push   $0x0
  pushl $217
c01047b6:	68 d9 00 00 00       	push   $0xd9
  jmp __alltraps
c01047bb:	e9 2d f7 ff ff       	jmp    c0103eed <__alltraps>

c01047c0 <vector218>:
.globl vector218
vector218:
  pushl $0
c01047c0:	6a 00                	push   $0x0
  pushl $218
c01047c2:	68 da 00 00 00       	push   $0xda
  jmp __alltraps
c01047c7:	e9 21 f7 ff ff       	jmp    c0103eed <__alltraps>

c01047cc <vector219>:
.globl vector219
vector219:
  pushl $0
c01047cc:	6a 00                	push   $0x0
  pushl $219
c01047ce:	68 db 00 00 00       	push   $0xdb
  jmp __alltraps
c01047d3:	e9 15 f7 ff ff       	jmp    c0103eed <__alltraps>

c01047d8 <vector220>:
.globl vector220
vector220:
  pushl $0
c01047d8:	6a 00                	push   $0x0
  pushl $220
c01047da:	68 dc 00 00 00       	push   $0xdc
  jmp __alltraps
c01047df:	e9 09 f7 ff ff       	jmp    c0103eed <__alltraps>

c01047e4 <vector221>:
.globl vector221
vector221:
  pushl $0
c01047e4:	6a 00                	push   $0x0
  pushl $221
c01047e6:	68 dd 00 00 00       	push   $0xdd
  jmp __alltraps
c01047eb:	e9 fd f6 ff ff       	jmp    c0103eed <__alltraps>

c01047f0 <vector222>:
.globl vector222
vector222:
  pushl $0
c01047f0:	6a 00                	push   $0x0
  pushl $222
c01047f2:	68 de 00 00 00       	push   $0xde
  jmp __alltraps
c01047f7:	e9 f1 f6 ff ff       	jmp    c0103eed <__alltraps>

c01047fc <vector223>:
.globl vector223
vector223:
  pushl $0
c01047fc:	6a 00                	push   $0x0
  pushl $223
c01047fe:	68 df 00 00 00       	push   $0xdf
  jmp __alltraps
c0104803:	e9 e5 f6 ff ff       	jmp    c0103eed <__alltraps>

c0104808 <vector224>:
.globl vector224
vector224:
  pushl $0
c0104808:	6a 00                	push   $0x0
  pushl $224
c010480a:	68 e0 00 00 00       	push   $0xe0
  jmp __alltraps
c010480f:	e9 d9 f6 ff ff       	jmp    c0103eed <__alltraps>

c0104814 <vector225>:
.globl vector225
vector225:
  pushl $0
c0104814:	6a 00                	push   $0x0
  pushl $225
c0104816:	68 e1 00 00 00       	push   $0xe1
  jmp __alltraps
c010481b:	e9 cd f6 ff ff       	jmp    c0103eed <__alltraps>

c0104820 <vector226>:
.globl vector226
vector226:
  pushl $0
c0104820:	6a 00                	push   $0x0
  pushl $226
c0104822:	68 e2 00 00 00       	push   $0xe2
  jmp __alltraps
c0104827:	e9 c1 f6 ff ff       	jmp    c0103eed <__alltraps>

c010482c <vector227>:
.globl vector227
vector227:
  pushl $0
c010482c:	6a 00                	push   $0x0
  pushl $227
c010482e:	68 e3 00 00 00       	push   $0xe3
  jmp __alltraps
c0104833:	e9 b5 f6 ff ff       	jmp    c0103eed <__alltraps>

c0104838 <vector228>:
.globl vector228
vector228:
  pushl $0
c0104838:	6a 00                	push   $0x0
  pushl $228
c010483a:	68 e4 00 00 00       	push   $0xe4
  jmp __alltraps
c010483f:	e9 a9 f6 ff ff       	jmp    c0103eed <__alltraps>

c0104844 <vector229>:
.globl vector229
vector229:
  pushl $0
c0104844:	6a 00                	push   $0x0
  pushl $229
c0104846:	68 e5 00 00 00       	push   $0xe5
  jmp __alltraps
c010484b:	e9 9d f6 ff ff       	jmp    c0103eed <__alltraps>

c0104850 <vector230>:
.globl vector230
vector230:
  pushl $0
c0104850:	6a 00                	push   $0x0
  pushl $230
c0104852:	68 e6 00 00 00       	push   $0xe6
  jmp __alltraps
c0104857:	e9 91 f6 ff ff       	jmp    c0103eed <__alltraps>

c010485c <vector231>:
.globl vector231
vector231:
  pushl $0
c010485c:	6a 00                	push   $0x0
  pushl $231
c010485e:	68 e7 00 00 00       	push   $0xe7
  jmp __alltraps
c0104863:	e9 85 f6 ff ff       	jmp    c0103eed <__alltraps>

c0104868 <vector232>:
.globl vector232
vector232:
  pushl $0
c0104868:	6a 00                	push   $0x0
  pushl $232
c010486a:	68 e8 00 00 00       	push   $0xe8
  jmp __alltraps
c010486f:	e9 79 f6 ff ff       	jmp    c0103eed <__alltraps>

c0104874 <vector233>:
.globl vector233
vector233:
  pushl $0
c0104874:	6a 00                	push   $0x0
  pushl $233
c0104876:	68 e9 00 00 00       	push   $0xe9
  jmp __alltraps
c010487b:	e9 6d f6 ff ff       	jmp    c0103eed <__alltraps>

c0104880 <vector234>:
.globl vector234
vector234:
  pushl $0
c0104880:	6a 00                	push   $0x0
  pushl $234
c0104882:	68 ea 00 00 00       	push   $0xea
  jmp __alltraps
c0104887:	e9 61 f6 ff ff       	jmp    c0103eed <__alltraps>

c010488c <vector235>:
.globl vector235
vector235:
  pushl $0
c010488c:	6a 00                	push   $0x0
  pushl $235
c010488e:	68 eb 00 00 00       	push   $0xeb
  jmp __alltraps
c0104893:	e9 55 f6 ff ff       	jmp    c0103eed <__alltraps>

c0104898 <vector236>:
.globl vector236
vector236:
  pushl $0
c0104898:	6a 00                	push   $0x0
  pushl $236
c010489a:	68 ec 00 00 00       	push   $0xec
  jmp __alltraps
c010489f:	e9 49 f6 ff ff       	jmp    c0103eed <__alltraps>

c01048a4 <vector237>:
.globl vector237
vector237:
  pushl $0
c01048a4:	6a 00                	push   $0x0
  pushl $237
c01048a6:	68 ed 00 00 00       	push   $0xed
  jmp __alltraps
c01048ab:	e9 3d f6 ff ff       	jmp    c0103eed <__alltraps>

c01048b0 <vector238>:
.globl vector238
vector238:
  pushl $0
c01048b0:	6a 00                	push   $0x0
  pushl $238
c01048b2:	68 ee 00 00 00       	push   $0xee
  jmp __alltraps
c01048b7:	e9 31 f6 ff ff       	jmp    c0103eed <__alltraps>

c01048bc <vector239>:
.globl vector239
vector239:
  pushl $0
c01048bc:	6a 00                	push   $0x0
  pushl $239
c01048be:	68 ef 00 00 00       	push   $0xef
  jmp __alltraps
c01048c3:	e9 25 f6 ff ff       	jmp    c0103eed <__alltraps>

c01048c8 <vector240>:
.globl vector240
vector240:
  pushl $0
c01048c8:	6a 00                	push   $0x0
  pushl $240
c01048ca:	68 f0 00 00 00       	push   $0xf0
  jmp __alltraps
c01048cf:	e9 19 f6 ff ff       	jmp    c0103eed <__alltraps>

c01048d4 <vector241>:
.globl vector241
vector241:
  pushl $0
c01048d4:	6a 00                	push   $0x0
  pushl $241
c01048d6:	68 f1 00 00 00       	push   $0xf1
  jmp __alltraps
c01048db:	e9 0d f6 ff ff       	jmp    c0103eed <__alltraps>

c01048e0 <vector242>:
.globl vector242
vector242:
  pushl $0
c01048e0:	6a 00                	push   $0x0
  pushl $242
c01048e2:	68 f2 00 00 00       	push   $0xf2
  jmp __alltraps
c01048e7:	e9 01 f6 ff ff       	jmp    c0103eed <__alltraps>

c01048ec <vector243>:
.globl vector243
vector243:
  pushl $0
c01048ec:	6a 00                	push   $0x0
  pushl $243
c01048ee:	68 f3 00 00 00       	push   $0xf3
  jmp __alltraps
c01048f3:	e9 f5 f5 ff ff       	jmp    c0103eed <__alltraps>

c01048f8 <vector244>:
.globl vector244
vector244:
  pushl $0
c01048f8:	6a 00                	push   $0x0
  pushl $244
c01048fa:	68 f4 00 00 00       	push   $0xf4
  jmp __alltraps
c01048ff:	e9 e9 f5 ff ff       	jmp    c0103eed <__alltraps>

c0104904 <vector245>:
.globl vector245
vector245:
  pushl $0
c0104904:	6a 00                	push   $0x0
  pushl $245
c0104906:	68 f5 00 00 00       	push   $0xf5
  jmp __alltraps
c010490b:	e9 dd f5 ff ff       	jmp    c0103eed <__alltraps>

c0104910 <vector246>:
.globl vector246
vector246:
  pushl $0
c0104910:	6a 00                	push   $0x0
  pushl $246
c0104912:	68 f6 00 00 00       	push   $0xf6
  jmp __alltraps
c0104917:	e9 d1 f5 ff ff       	jmp    c0103eed <__alltraps>

c010491c <vector247>:
.globl vector247
vector247:
  pushl $0
c010491c:	6a 00                	push   $0x0
  pushl $247
c010491e:	68 f7 00 00 00       	push   $0xf7
  jmp __alltraps
c0104923:	e9 c5 f5 ff ff       	jmp    c0103eed <__alltraps>

c0104928 <vector248>:
.globl vector248
vector248:
  pushl $0
c0104928:	6a 00                	push   $0x0
  pushl $248
c010492a:	68 f8 00 00 00       	push   $0xf8
  jmp __alltraps
c010492f:	e9 b9 f5 ff ff       	jmp    c0103eed <__alltraps>

c0104934 <vector249>:
.globl vector249
vector249:
  pushl $0
c0104934:	6a 00                	push   $0x0
  pushl $249
c0104936:	68 f9 00 00 00       	push   $0xf9
  jmp __alltraps
c010493b:	e9 ad f5 ff ff       	jmp    c0103eed <__alltraps>

c0104940 <vector250>:
.globl vector250
vector250:
  pushl $0
c0104940:	6a 00                	push   $0x0
  pushl $250
c0104942:	68 fa 00 00 00       	push   $0xfa
  jmp __alltraps
c0104947:	e9 a1 f5 ff ff       	jmp    c0103eed <__alltraps>

c010494c <vector251>:
.globl vector251
vector251:
  pushl $0
c010494c:	6a 00                	push   $0x0
  pushl $251
c010494e:	68 fb 00 00 00       	push   $0xfb
  jmp __alltraps
c0104953:	e9 95 f5 ff ff       	jmp    c0103eed <__alltraps>

c0104958 <vector252>:
.globl vector252
vector252:
  pushl $0
c0104958:	6a 00                	push   $0x0
  pushl $252
c010495a:	68 fc 00 00 00       	push   $0xfc
  jmp __alltraps
c010495f:	e9 89 f5 ff ff       	jmp    c0103eed <__alltraps>

c0104964 <vector253>:
.globl vector253
vector253:
  pushl $0
c0104964:	6a 00                	push   $0x0
  pushl $253
c0104966:	68 fd 00 00 00       	push   $0xfd
  jmp __alltraps
c010496b:	e9 7d f5 ff ff       	jmp    c0103eed <__alltraps>

c0104970 <vector254>:
.globl vector254
vector254:
  pushl $0
c0104970:	6a 00                	push   $0x0
  pushl $254
c0104972:	68 fe 00 00 00       	push   $0xfe
  jmp __alltraps
c0104977:	e9 71 f5 ff ff       	jmp    c0103eed <__alltraps>

c010497c <vector255>:
.globl vector255
vector255:
  pushl $0
c010497c:	6a 00                	push   $0x0
  pushl $255
c010497e:	68 ff 00 00 00       	push   $0xff
  jmp __alltraps
c0104983:	e9 65 f5 ff ff       	jmp    c0103eed <__alltraps>

c0104988 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0104988:	55                   	push   %ebp
c0104989:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010498b:	8b 55 08             	mov    0x8(%ebp),%edx
c010498e:	a1 f0 84 1c c0       	mov    0xc01c84f0,%eax
c0104993:	29 c2                	sub    %eax,%edx
c0104995:	89 d0                	mov    %edx,%eax
c0104997:	c1 f8 02             	sar    $0x2,%eax
c010499a:	69 c0 39 8e e3 38    	imul   $0x38e38e39,%eax,%eax
}
c01049a0:	5d                   	pop    %ebp
c01049a1:	c3                   	ret    

c01049a2 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c01049a2:	55                   	push   %ebp
c01049a3:	89 e5                	mov    %esp,%ebp
c01049a5:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c01049a8:	8b 45 08             	mov    0x8(%ebp),%eax
c01049ab:	89 04 24             	mov    %eax,(%esp)
c01049ae:	e8 d5 ff ff ff       	call   c0104988 <page2ppn>
c01049b3:	c1 e0 0c             	shl    $0xc,%eax
}
c01049b6:	c9                   	leave  
c01049b7:	c3                   	ret    

c01049b8 <page_ref>:
pde2page(pde_t pde) {
    return pa2page(PDE_ADDR(pde));
}

static inline int
page_ref(struct Page *page) {
c01049b8:	55                   	push   %ebp
c01049b9:	89 e5                	mov    %esp,%ebp
    return page->ref;
c01049bb:	8b 45 08             	mov    0x8(%ebp),%eax
c01049be:	8b 00                	mov    (%eax),%eax
}
c01049c0:	5d                   	pop    %ebp
c01049c1:	c3                   	ret    

c01049c2 <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c01049c2:	55                   	push   %ebp
c01049c3:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c01049c5:	8b 45 08             	mov    0x8(%ebp),%eax
c01049c8:	8b 55 0c             	mov    0xc(%ebp),%edx
c01049cb:	89 10                	mov    %edx,(%eax)
}
c01049cd:	5d                   	pop    %ebp
c01049ce:	c3                   	ret    

c01049cf <default_init>:

#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
default_init(void) {
c01049cf:	55                   	push   %ebp
c01049d0:	89 e5                	mov    %esp,%ebp
c01049d2:	83 ec 10             	sub    $0x10,%esp
c01049d5:	c7 45 fc dc 84 1c c0 	movl   $0xc01c84dc,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01049dc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01049df:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01049e2:	89 50 04             	mov    %edx,0x4(%eax)
c01049e5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01049e8:	8b 50 04             	mov    0x4(%eax),%edx
c01049eb:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01049ee:	89 10                	mov    %edx,(%eax)
    list_init(&free_list);
    nr_free = 0;
c01049f0:	c7 05 e4 84 1c c0 00 	movl   $0x0,0xc01c84e4
c01049f7:	00 00 00 
}
c01049fa:	c9                   	leave  
c01049fb:	c3                   	ret    

c01049fc <default_init_memmap>:

static void
default_init_memmap(struct Page *base, size_t n) {
c01049fc:	55                   	push   %ebp
c01049fd:	89 e5                	mov    %esp,%ebp
c01049ff:	83 ec 48             	sub    $0x48,%esp
    assert(n > 0);
c0104a02:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0104a06:	75 24                	jne    c0104a2c <default_init_memmap+0x30>
c0104a08:	c7 44 24 0c f0 f7 10 	movl   $0xc010f7f0,0xc(%esp)
c0104a0f:	c0 
c0104a10:	c7 44 24 08 f6 f7 10 	movl   $0xc010f7f6,0x8(%esp)
c0104a17:	c0 
c0104a18:	c7 44 24 04 46 00 00 	movl   $0x46,0x4(%esp)
c0104a1f:	00 
c0104a20:	c7 04 24 0b f8 10 c0 	movl   $0xc010f80b,(%esp)
c0104a27:	e8 31 d8 ff ff       	call   c010225d <__panic>
    struct Page *p = base;
c0104a2c:	8b 45 08             	mov    0x8(%ebp),%eax
c0104a2f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c0104a32:	e9 dc 00 00 00       	jmp    c0104b13 <default_init_memmap+0x117>
        assert(PageReserved(p));
c0104a37:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a3a:	83 c0 04             	add    $0x4,%eax
c0104a3d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0104a44:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0104a47:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104a4a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104a4d:	0f a3 10             	bt     %edx,(%eax)
c0104a50:	19 c0                	sbb    %eax,%eax
c0104a52:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return oldbit != 0;
c0104a55:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0104a59:	0f 95 c0             	setne  %al
c0104a5c:	0f b6 c0             	movzbl %al,%eax
c0104a5f:	85 c0                	test   %eax,%eax
c0104a61:	75 24                	jne    c0104a87 <default_init_memmap+0x8b>
c0104a63:	c7 44 24 0c 21 f8 10 	movl   $0xc010f821,0xc(%esp)
c0104a6a:	c0 
c0104a6b:	c7 44 24 08 f6 f7 10 	movl   $0xc010f7f6,0x8(%esp)
c0104a72:	c0 
c0104a73:	c7 44 24 04 49 00 00 	movl   $0x49,0x4(%esp)
c0104a7a:	00 
c0104a7b:	c7 04 24 0b f8 10 c0 	movl   $0xc010f80b,(%esp)
c0104a82:	e8 d6 d7 ff ff       	call   c010225d <__panic>
        p->flags = 0;
c0104a87:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a8a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        SetPageProperty(p);
c0104a91:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a94:	83 c0 04             	add    $0x4,%eax
c0104a97:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
c0104a9e:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0104aa1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104aa4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0104aa7:	0f ab 10             	bts    %edx,(%eax)
        p->property = 0;
c0104aaa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104aad:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        set_page_ref(p, 0);
c0104ab4:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104abb:	00 
c0104abc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104abf:	89 04 24             	mov    %eax,(%esp)
c0104ac2:	e8 fb fe ff ff       	call   c01049c2 <set_page_ref>
        list_add_before(&free_list, &(p->page_link));
c0104ac7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104aca:	83 c0 10             	add    $0x10,%eax
c0104acd:	c7 45 dc dc 84 1c c0 	movl   $0xc01c84dc,-0x24(%ebp)
c0104ad4:	89 45 d8             	mov    %eax,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0104ad7:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104ada:	8b 00                	mov    (%eax),%eax
c0104adc:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0104adf:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0104ae2:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0104ae5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104ae8:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0104aeb:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0104aee:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0104af1:	89 10                	mov    %edx,(%eax)
c0104af3:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0104af6:	8b 10                	mov    (%eax),%edx
c0104af8:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0104afb:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0104afe:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0104b01:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0104b04:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0104b07:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0104b0a:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0104b0d:	89 10                	mov    %edx,(%eax)

static void
default_init_memmap(struct Page *base, size_t n) {
    assert(n > 0);
    struct Page *p = base;
    for (; p != base + n; p ++) {
c0104b0f:	83 45 f4 24          	addl   $0x24,-0xc(%ebp)
c0104b13:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104b16:	89 d0                	mov    %edx,%eax
c0104b18:	c1 e0 03             	shl    $0x3,%eax
c0104b1b:	01 d0                	add    %edx,%eax
c0104b1d:	c1 e0 02             	shl    $0x2,%eax
c0104b20:	89 c2                	mov    %eax,%edx
c0104b22:	8b 45 08             	mov    0x8(%ebp),%eax
c0104b25:	01 d0                	add    %edx,%eax
c0104b27:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104b2a:	0f 85 07 ff ff ff    	jne    c0104a37 <default_init_memmap+0x3b>
        SetPageProperty(p);
        p->property = 0;
        set_page_ref(p, 0);
        list_add_before(&free_list, &(p->page_link));
    }
    nr_free += n;
c0104b30:	8b 15 e4 84 1c c0    	mov    0xc01c84e4,%edx
c0104b36:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104b39:	01 d0                	add    %edx,%eax
c0104b3b:	a3 e4 84 1c c0       	mov    %eax,0xc01c84e4
    //first block
    base->property = n;
c0104b40:	8b 45 08             	mov    0x8(%ebp),%eax
c0104b43:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104b46:	89 50 08             	mov    %edx,0x8(%eax)
}
c0104b49:	c9                   	leave  
c0104b4a:	c3                   	ret    

c0104b4b <default_alloc_pages>:

static struct Page *
default_alloc_pages(size_t n) {
c0104b4b:	55                   	push   %ebp
c0104b4c:	89 e5                	mov    %esp,%ebp
c0104b4e:	83 ec 68             	sub    $0x68,%esp
    assert(n > 0);
c0104b51:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104b55:	75 24                	jne    c0104b7b <default_alloc_pages+0x30>
c0104b57:	c7 44 24 0c f0 f7 10 	movl   $0xc010f7f0,0xc(%esp)
c0104b5e:	c0 
c0104b5f:	c7 44 24 08 f6 f7 10 	movl   $0xc010f7f6,0x8(%esp)
c0104b66:	c0 
c0104b67:	c7 44 24 04 57 00 00 	movl   $0x57,0x4(%esp)
c0104b6e:	00 
c0104b6f:	c7 04 24 0b f8 10 c0 	movl   $0xc010f80b,(%esp)
c0104b76:	e8 e2 d6 ff ff       	call   c010225d <__panic>
    if (n > nr_free) {
c0104b7b:	a1 e4 84 1c c0       	mov    0xc01c84e4,%eax
c0104b80:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104b83:	73 0a                	jae    c0104b8f <default_alloc_pages+0x44>
        return NULL;
c0104b85:	b8 00 00 00 00       	mov    $0x0,%eax
c0104b8a:	e9 37 01 00 00       	jmp    c0104cc6 <default_alloc_pages+0x17b>
    }
    list_entry_t *le, *len;
    le = &free_list;
c0104b8f:	c7 45 f4 dc 84 1c c0 	movl   $0xc01c84dc,-0xc(%ebp)

    while((le=list_next(le)) != &free_list) {
c0104b96:	e9 0a 01 00 00       	jmp    c0104ca5 <default_alloc_pages+0x15a>
      struct Page *p = le2page(le, page_link);
c0104b9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b9e:	83 e8 10             	sub    $0x10,%eax
c0104ba1:	89 45 ec             	mov    %eax,-0x14(%ebp)
      if(p->property >= n){
c0104ba4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104ba7:	8b 40 08             	mov    0x8(%eax),%eax
c0104baa:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104bad:	0f 82 f2 00 00 00    	jb     c0104ca5 <default_alloc_pages+0x15a>
        int i;
        for(i=0;i<n;i++){
c0104bb3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0104bba:	eb 7c                	jmp    c0104c38 <default_alloc_pages+0xed>
c0104bbc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104bbf:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0104bc2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104bc5:	8b 40 04             	mov    0x4(%eax),%eax
          len = list_next(le);
c0104bc8:	89 45 e8             	mov    %eax,-0x18(%ebp)
          struct Page *pp = le2page(le, page_link);
c0104bcb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104bce:	83 e8 10             	sub    $0x10,%eax
c0104bd1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
          SetPageReserved(pp);
c0104bd4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104bd7:	83 c0 04             	add    $0x4,%eax
c0104bda:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0104be1:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0104be4:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104be7:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0104bea:	0f ab 10             	bts    %edx,(%eax)
          ClearPageProperty(pp);
c0104bed:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104bf0:	83 c0 04             	add    $0x4,%eax
c0104bf3:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
c0104bfa:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0104bfd:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0104c00:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0104c03:	0f b3 10             	btr    %edx,(%eax)
c0104c06:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c09:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0104c0c:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0104c0f:	8b 40 04             	mov    0x4(%eax),%eax
c0104c12:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0104c15:	8b 12                	mov    (%edx),%edx
c0104c17:	89 55 c8             	mov    %edx,-0x38(%ebp)
c0104c1a:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0104c1d:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0104c20:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0104c23:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0104c26:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0104c29:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0104c2c:	89 10                	mov    %edx,(%eax)
          list_del(le);
          le = len;
c0104c2e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104c31:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while((le=list_next(le)) != &free_list) {
      struct Page *p = le2page(le, page_link);
      if(p->property >= n){
        int i;
        for(i=0;i<n;i++){
c0104c34:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0104c38:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c3b:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104c3e:	0f 82 78 ff ff ff    	jb     c0104bbc <default_alloc_pages+0x71>
          SetPageReserved(pp);
          ClearPageProperty(pp);
          list_del(le);
          le = len;
        }
        if(p->property>n){
c0104c44:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104c47:	8b 40 08             	mov    0x8(%eax),%eax
c0104c4a:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104c4d:	76 12                	jbe    c0104c61 <default_alloc_pages+0x116>
          (le2page(le,page_link))->property = p->property - n;
c0104c4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c52:	8d 50 f0             	lea    -0x10(%eax),%edx
c0104c55:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104c58:	8b 40 08             	mov    0x8(%eax),%eax
c0104c5b:	2b 45 08             	sub    0x8(%ebp),%eax
c0104c5e:	89 42 08             	mov    %eax,0x8(%edx)
        }
        ClearPageProperty(p);
c0104c61:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104c64:	83 c0 04             	add    $0x4,%eax
c0104c67:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c0104c6e:	89 45 bc             	mov    %eax,-0x44(%ebp)
c0104c71:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0104c74:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0104c77:	0f b3 10             	btr    %edx,(%eax)
        SetPageReserved(p);
c0104c7a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104c7d:	83 c0 04             	add    $0x4,%eax
c0104c80:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
c0104c87:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0104c8a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0104c8d:	8b 55 b8             	mov    -0x48(%ebp),%edx
c0104c90:	0f ab 10             	bts    %edx,(%eax)
        nr_free -= n;
c0104c93:	a1 e4 84 1c c0       	mov    0xc01c84e4,%eax
c0104c98:	2b 45 08             	sub    0x8(%ebp),%eax
c0104c9b:	a3 e4 84 1c c0       	mov    %eax,0xc01c84e4
        return p;
c0104ca0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104ca3:	eb 21                	jmp    c0104cc6 <default_alloc_pages+0x17b>
c0104ca5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ca8:	89 45 b0             	mov    %eax,-0x50(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0104cab:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0104cae:	8b 40 04             	mov    0x4(%eax),%eax
        return NULL;
    }
    list_entry_t *le, *len;
    le = &free_list;

    while((le=list_next(le)) != &free_list) {
c0104cb1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104cb4:	81 7d f4 dc 84 1c c0 	cmpl   $0xc01c84dc,-0xc(%ebp)
c0104cbb:	0f 85 da fe ff ff    	jne    c0104b9b <default_alloc_pages+0x50>
        SetPageReserved(p);
        nr_free -= n;
        return p;
      }
    }
    return NULL;
c0104cc1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104cc6:	c9                   	leave  
c0104cc7:	c3                   	ret    

c0104cc8 <default_free_pages>:

static void
default_free_pages(struct Page *base, size_t n) {
c0104cc8:	55                   	push   %ebp
c0104cc9:	89 e5                	mov    %esp,%ebp
c0104ccb:	83 ec 68             	sub    $0x68,%esp
    assert(n > 0);
c0104cce:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0104cd2:	75 24                	jne    c0104cf8 <default_free_pages+0x30>
c0104cd4:	c7 44 24 0c f0 f7 10 	movl   $0xc010f7f0,0xc(%esp)
c0104cdb:	c0 
c0104cdc:	c7 44 24 08 f6 f7 10 	movl   $0xc010f7f6,0x8(%esp)
c0104ce3:	c0 
c0104ce4:	c7 44 24 04 78 00 00 	movl   $0x78,0x4(%esp)
c0104ceb:	00 
c0104cec:	c7 04 24 0b f8 10 c0 	movl   $0xc010f80b,(%esp)
c0104cf3:	e8 65 d5 ff ff       	call   c010225d <__panic>
    assert(PageReserved(base));
c0104cf8:	8b 45 08             	mov    0x8(%ebp),%eax
c0104cfb:	83 c0 04             	add    $0x4,%eax
c0104cfe:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0104d05:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0104d08:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104d0b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0104d0e:	0f a3 10             	bt     %edx,(%eax)
c0104d11:	19 c0                	sbb    %eax,%eax
c0104d13:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return oldbit != 0;
c0104d16:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0104d1a:	0f 95 c0             	setne  %al
c0104d1d:	0f b6 c0             	movzbl %al,%eax
c0104d20:	85 c0                	test   %eax,%eax
c0104d22:	75 24                	jne    c0104d48 <default_free_pages+0x80>
c0104d24:	c7 44 24 0c 31 f8 10 	movl   $0xc010f831,0xc(%esp)
c0104d2b:	c0 
c0104d2c:	c7 44 24 08 f6 f7 10 	movl   $0xc010f7f6,0x8(%esp)
c0104d33:	c0 
c0104d34:	c7 44 24 04 79 00 00 	movl   $0x79,0x4(%esp)
c0104d3b:	00 
c0104d3c:	c7 04 24 0b f8 10 c0 	movl   $0xc010f80b,(%esp)
c0104d43:	e8 15 d5 ff ff       	call   c010225d <__panic>

    list_entry_t *le = &free_list;
c0104d48:	c7 45 f4 dc 84 1c c0 	movl   $0xc01c84dc,-0xc(%ebp)
    struct Page * p;
    while((le=list_next(le)) != &free_list) {
c0104d4f:	eb 13                	jmp    c0104d64 <default_free_pages+0x9c>
      p = le2page(le, page_link);
c0104d51:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d54:	83 e8 10             	sub    $0x10,%eax
c0104d57:	89 45 f0             	mov    %eax,-0x10(%ebp)
      if(p>base){
c0104d5a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104d5d:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104d60:	76 02                	jbe    c0104d64 <default_free_pages+0x9c>
        break;
c0104d62:	eb 18                	jmp    c0104d7c <default_free_pages+0xb4>
c0104d64:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d67:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0104d6a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104d6d:	8b 40 04             	mov    0x4(%eax),%eax
    assert(n > 0);
    assert(PageReserved(base));

    list_entry_t *le = &free_list;
    struct Page * p;
    while((le=list_next(le)) != &free_list) {
c0104d70:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104d73:	81 7d f4 dc 84 1c c0 	cmpl   $0xc01c84dc,-0xc(%ebp)
c0104d7a:	75 d5                	jne    c0104d51 <default_free_pages+0x89>
      if(p>base){
        break;
      }
    }
    //list_add_before(le, base->page_link);
    for(p=base;p<base+n;p++){
c0104d7c:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d7f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104d82:	eb 4b                	jmp    c0104dcf <default_free_pages+0x107>
      list_add_before(le, &(p->page_link));
c0104d84:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104d87:	8d 50 10             	lea    0x10(%eax),%edx
c0104d8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d8d:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0104d90:	89 55 d8             	mov    %edx,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0104d93:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104d96:	8b 00                	mov    (%eax),%eax
c0104d98:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0104d9b:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0104d9e:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0104da1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104da4:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0104da7:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0104daa:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0104dad:	89 10                	mov    %edx,(%eax)
c0104daf:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0104db2:	8b 10                	mov    (%eax),%edx
c0104db4:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0104db7:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0104dba:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0104dbd:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0104dc0:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0104dc3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0104dc6:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0104dc9:	89 10                	mov    %edx,(%eax)
      if(p>base){
        break;
      }
    }
    //list_add_before(le, base->page_link);
    for(p=base;p<base+n;p++){
c0104dcb:	83 45 f0 24          	addl   $0x24,-0x10(%ebp)
c0104dcf:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104dd2:	89 d0                	mov    %edx,%eax
c0104dd4:	c1 e0 03             	shl    $0x3,%eax
c0104dd7:	01 d0                	add    %edx,%eax
c0104dd9:	c1 e0 02             	shl    $0x2,%eax
c0104ddc:	89 c2                	mov    %eax,%edx
c0104dde:	8b 45 08             	mov    0x8(%ebp),%eax
c0104de1:	01 d0                	add    %edx,%eax
c0104de3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104de6:	77 9c                	ja     c0104d84 <default_free_pages+0xbc>
      list_add_before(le, &(p->page_link));
    }
    base->flags = 0;
c0104de8:	8b 45 08             	mov    0x8(%ebp),%eax
c0104deb:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    set_page_ref(base, 0);
c0104df2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104df9:	00 
c0104dfa:	8b 45 08             	mov    0x8(%ebp),%eax
c0104dfd:	89 04 24             	mov    %eax,(%esp)
c0104e00:	e8 bd fb ff ff       	call   c01049c2 <set_page_ref>
    ClearPageProperty(base);
c0104e05:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e08:	83 c0 04             	add    $0x4,%eax
c0104e0b:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
c0104e12:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0104e15:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0104e18:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0104e1b:	0f b3 10             	btr    %edx,(%eax)
    SetPageProperty(base);
c0104e1e:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e21:	83 c0 04             	add    $0x4,%eax
c0104e24:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c0104e2b:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0104e2e:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0104e31:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0104e34:	0f ab 10             	bts    %edx,(%eax)
    base->property = n;
c0104e37:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e3a:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104e3d:	89 50 08             	mov    %edx,0x8(%eax)
    
    p = le2page(le,page_link) ;
c0104e40:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e43:	83 e8 10             	sub    $0x10,%eax
c0104e46:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if( base+n == p ){
c0104e49:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104e4c:	89 d0                	mov    %edx,%eax
c0104e4e:	c1 e0 03             	shl    $0x3,%eax
c0104e51:	01 d0                	add    %edx,%eax
c0104e53:	c1 e0 02             	shl    $0x2,%eax
c0104e56:	89 c2                	mov    %eax,%edx
c0104e58:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e5b:	01 d0                	add    %edx,%eax
c0104e5d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104e60:	75 1e                	jne    c0104e80 <default_free_pages+0x1b8>
      base->property += p->property;
c0104e62:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e65:	8b 50 08             	mov    0x8(%eax),%edx
c0104e68:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e6b:	8b 40 08             	mov    0x8(%eax),%eax
c0104e6e:	01 c2                	add    %eax,%edx
c0104e70:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e73:	89 50 08             	mov    %edx,0x8(%eax)
      p->property = 0;
c0104e76:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e79:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    }
    le = list_prev(&(base->page_link));
c0104e80:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e83:	83 c0 10             	add    $0x10,%eax
c0104e86:	89 45 b8             	mov    %eax,-0x48(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0104e89:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0104e8c:	8b 00                	mov    (%eax),%eax
c0104e8e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    p = le2page(le, page_link);
c0104e91:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e94:	83 e8 10             	sub    $0x10,%eax
c0104e97:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(le!=&free_list && p==base-1){
c0104e9a:	81 7d f4 dc 84 1c c0 	cmpl   $0xc01c84dc,-0xc(%ebp)
c0104ea1:	74 57                	je     c0104efa <default_free_pages+0x232>
c0104ea3:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ea6:	83 e8 24             	sub    $0x24,%eax
c0104ea9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104eac:	75 4c                	jne    c0104efa <default_free_pages+0x232>
      while(le!=&free_list){
c0104eae:	eb 41                	jmp    c0104ef1 <default_free_pages+0x229>
        if(p->property){
c0104eb0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104eb3:	8b 40 08             	mov    0x8(%eax),%eax
c0104eb6:	85 c0                	test   %eax,%eax
c0104eb8:	74 20                	je     c0104eda <default_free_pages+0x212>
          p->property += base->property;
c0104eba:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ebd:	8b 50 08             	mov    0x8(%eax),%edx
c0104ec0:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ec3:	8b 40 08             	mov    0x8(%eax),%eax
c0104ec6:	01 c2                	add    %eax,%edx
c0104ec8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ecb:	89 50 08             	mov    %edx,0x8(%eax)
          base->property = 0;
c0104ece:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ed1:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
          break;
c0104ed8:	eb 20                	jmp    c0104efa <default_free_pages+0x232>
c0104eda:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104edd:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c0104ee0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0104ee3:	8b 00                	mov    (%eax),%eax
        }
        le = list_prev(le);
c0104ee5:	89 45 f4             	mov    %eax,-0xc(%ebp)
        p = le2page(le,page_link);
c0104ee8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104eeb:	83 e8 10             	sub    $0x10,%eax
c0104eee:	89 45 f0             	mov    %eax,-0x10(%ebp)
      p->property = 0;
    }
    le = list_prev(&(base->page_link));
    p = le2page(le, page_link);
    if(le!=&free_list && p==base-1){
      while(le!=&free_list){
c0104ef1:	81 7d f4 dc 84 1c c0 	cmpl   $0xc01c84dc,-0xc(%ebp)
c0104ef8:	75 b6                	jne    c0104eb0 <default_free_pages+0x1e8>
        le = list_prev(le);
        p = le2page(le,page_link);
      }
    }

    nr_free += n;
c0104efa:	8b 15 e4 84 1c c0    	mov    0xc01c84e4,%edx
c0104f00:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104f03:	01 d0                	add    %edx,%eax
c0104f05:	a3 e4 84 1c c0       	mov    %eax,0xc01c84e4
    return ;
c0104f0a:	90                   	nop
}
c0104f0b:	c9                   	leave  
c0104f0c:	c3                   	ret    

c0104f0d <default_nr_free_pages>:

static size_t
default_nr_free_pages(void) {
c0104f0d:	55                   	push   %ebp
c0104f0e:	89 e5                	mov    %esp,%ebp
    return nr_free;
c0104f10:	a1 e4 84 1c c0       	mov    0xc01c84e4,%eax
}
c0104f15:	5d                   	pop    %ebp
c0104f16:	c3                   	ret    

c0104f17 <basic_check>:

static void
basic_check(void) {
c0104f17:	55                   	push   %ebp
c0104f18:	89 e5                	mov    %esp,%ebp
c0104f1a:	83 ec 48             	sub    $0x48,%esp
    struct Page *p0, *p1, *p2;
    p0 = p1 = p2 = NULL;
c0104f1d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0104f24:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104f27:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104f2a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f2d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert((p0 = alloc_page()) != NULL);
c0104f30:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104f37:	e8 15 16 00 00       	call   c0106551 <alloc_pages>
c0104f3c:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0104f3f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0104f43:	75 24                	jne    c0104f69 <basic_check+0x52>
c0104f45:	c7 44 24 0c 44 f8 10 	movl   $0xc010f844,0xc(%esp)
c0104f4c:	c0 
c0104f4d:	c7 44 24 08 f6 f7 10 	movl   $0xc010f7f6,0x8(%esp)
c0104f54:	c0 
c0104f55:	c7 44 24 04 ad 00 00 	movl   $0xad,0x4(%esp)
c0104f5c:	00 
c0104f5d:	c7 04 24 0b f8 10 c0 	movl   $0xc010f80b,(%esp)
c0104f64:	e8 f4 d2 ff ff       	call   c010225d <__panic>
    assert((p1 = alloc_page()) != NULL);
c0104f69:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104f70:	e8 dc 15 00 00       	call   c0106551 <alloc_pages>
c0104f75:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104f78:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104f7c:	75 24                	jne    c0104fa2 <basic_check+0x8b>
c0104f7e:	c7 44 24 0c 60 f8 10 	movl   $0xc010f860,0xc(%esp)
c0104f85:	c0 
c0104f86:	c7 44 24 08 f6 f7 10 	movl   $0xc010f7f6,0x8(%esp)
c0104f8d:	c0 
c0104f8e:	c7 44 24 04 ae 00 00 	movl   $0xae,0x4(%esp)
c0104f95:	00 
c0104f96:	c7 04 24 0b f8 10 c0 	movl   $0xc010f80b,(%esp)
c0104f9d:	e8 bb d2 ff ff       	call   c010225d <__panic>
    assert((p2 = alloc_page()) != NULL);
c0104fa2:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104fa9:	e8 a3 15 00 00       	call   c0106551 <alloc_pages>
c0104fae:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104fb1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104fb5:	75 24                	jne    c0104fdb <basic_check+0xc4>
c0104fb7:	c7 44 24 0c 7c f8 10 	movl   $0xc010f87c,0xc(%esp)
c0104fbe:	c0 
c0104fbf:	c7 44 24 08 f6 f7 10 	movl   $0xc010f7f6,0x8(%esp)
c0104fc6:	c0 
c0104fc7:	c7 44 24 04 af 00 00 	movl   $0xaf,0x4(%esp)
c0104fce:	00 
c0104fcf:	c7 04 24 0b f8 10 c0 	movl   $0xc010f80b,(%esp)
c0104fd6:	e8 82 d2 ff ff       	call   c010225d <__panic>

    assert(p0 != p1 && p0 != p2 && p1 != p2);
c0104fdb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104fde:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104fe1:	74 10                	je     c0104ff3 <basic_check+0xdc>
c0104fe3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104fe6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104fe9:	74 08                	je     c0104ff3 <basic_check+0xdc>
c0104feb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104fee:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104ff1:	75 24                	jne    c0105017 <basic_check+0x100>
c0104ff3:	c7 44 24 0c 98 f8 10 	movl   $0xc010f898,0xc(%esp)
c0104ffa:	c0 
c0104ffb:	c7 44 24 08 f6 f7 10 	movl   $0xc010f7f6,0x8(%esp)
c0105002:	c0 
c0105003:	c7 44 24 04 b1 00 00 	movl   $0xb1,0x4(%esp)
c010500a:	00 
c010500b:	c7 04 24 0b f8 10 c0 	movl   $0xc010f80b,(%esp)
c0105012:	e8 46 d2 ff ff       	call   c010225d <__panic>
    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
c0105017:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010501a:	89 04 24             	mov    %eax,(%esp)
c010501d:	e8 96 f9 ff ff       	call   c01049b8 <page_ref>
c0105022:	85 c0                	test   %eax,%eax
c0105024:	75 1e                	jne    c0105044 <basic_check+0x12d>
c0105026:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105029:	89 04 24             	mov    %eax,(%esp)
c010502c:	e8 87 f9 ff ff       	call   c01049b8 <page_ref>
c0105031:	85 c0                	test   %eax,%eax
c0105033:	75 0f                	jne    c0105044 <basic_check+0x12d>
c0105035:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105038:	89 04 24             	mov    %eax,(%esp)
c010503b:	e8 78 f9 ff ff       	call   c01049b8 <page_ref>
c0105040:	85 c0                	test   %eax,%eax
c0105042:	74 24                	je     c0105068 <basic_check+0x151>
c0105044:	c7 44 24 0c bc f8 10 	movl   $0xc010f8bc,0xc(%esp)
c010504b:	c0 
c010504c:	c7 44 24 08 f6 f7 10 	movl   $0xc010f7f6,0x8(%esp)
c0105053:	c0 
c0105054:	c7 44 24 04 b2 00 00 	movl   $0xb2,0x4(%esp)
c010505b:	00 
c010505c:	c7 04 24 0b f8 10 c0 	movl   $0xc010f80b,(%esp)
c0105063:	e8 f5 d1 ff ff       	call   c010225d <__panic>

    assert(page2pa(p0) < npage * PGSIZE);
c0105068:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010506b:	89 04 24             	mov    %eax,(%esp)
c010506e:	e8 2f f9 ff ff       	call   c01049a2 <page2pa>
c0105073:	8b 15 a0 63 1c c0    	mov    0xc01c63a0,%edx
c0105079:	c1 e2 0c             	shl    $0xc,%edx
c010507c:	39 d0                	cmp    %edx,%eax
c010507e:	72 24                	jb     c01050a4 <basic_check+0x18d>
c0105080:	c7 44 24 0c f8 f8 10 	movl   $0xc010f8f8,0xc(%esp)
c0105087:	c0 
c0105088:	c7 44 24 08 f6 f7 10 	movl   $0xc010f7f6,0x8(%esp)
c010508f:	c0 
c0105090:	c7 44 24 04 b4 00 00 	movl   $0xb4,0x4(%esp)
c0105097:	00 
c0105098:	c7 04 24 0b f8 10 c0 	movl   $0xc010f80b,(%esp)
c010509f:	e8 b9 d1 ff ff       	call   c010225d <__panic>
    assert(page2pa(p1) < npage * PGSIZE);
c01050a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01050a7:	89 04 24             	mov    %eax,(%esp)
c01050aa:	e8 f3 f8 ff ff       	call   c01049a2 <page2pa>
c01050af:	8b 15 a0 63 1c c0    	mov    0xc01c63a0,%edx
c01050b5:	c1 e2 0c             	shl    $0xc,%edx
c01050b8:	39 d0                	cmp    %edx,%eax
c01050ba:	72 24                	jb     c01050e0 <basic_check+0x1c9>
c01050bc:	c7 44 24 0c 15 f9 10 	movl   $0xc010f915,0xc(%esp)
c01050c3:	c0 
c01050c4:	c7 44 24 08 f6 f7 10 	movl   $0xc010f7f6,0x8(%esp)
c01050cb:	c0 
c01050cc:	c7 44 24 04 b5 00 00 	movl   $0xb5,0x4(%esp)
c01050d3:	00 
c01050d4:	c7 04 24 0b f8 10 c0 	movl   $0xc010f80b,(%esp)
c01050db:	e8 7d d1 ff ff       	call   c010225d <__panic>
    assert(page2pa(p2) < npage * PGSIZE);
c01050e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01050e3:	89 04 24             	mov    %eax,(%esp)
c01050e6:	e8 b7 f8 ff ff       	call   c01049a2 <page2pa>
c01050eb:	8b 15 a0 63 1c c0    	mov    0xc01c63a0,%edx
c01050f1:	c1 e2 0c             	shl    $0xc,%edx
c01050f4:	39 d0                	cmp    %edx,%eax
c01050f6:	72 24                	jb     c010511c <basic_check+0x205>
c01050f8:	c7 44 24 0c 32 f9 10 	movl   $0xc010f932,0xc(%esp)
c01050ff:	c0 
c0105100:	c7 44 24 08 f6 f7 10 	movl   $0xc010f7f6,0x8(%esp)
c0105107:	c0 
c0105108:	c7 44 24 04 b6 00 00 	movl   $0xb6,0x4(%esp)
c010510f:	00 
c0105110:	c7 04 24 0b f8 10 c0 	movl   $0xc010f80b,(%esp)
c0105117:	e8 41 d1 ff ff       	call   c010225d <__panic>

    list_entry_t free_list_store = free_list;
c010511c:	a1 dc 84 1c c0       	mov    0xc01c84dc,%eax
c0105121:	8b 15 e0 84 1c c0    	mov    0xc01c84e0,%edx
c0105127:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010512a:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010512d:	c7 45 e0 dc 84 1c c0 	movl   $0xc01c84dc,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0105134:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105137:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010513a:	89 50 04             	mov    %edx,0x4(%eax)
c010513d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105140:	8b 50 04             	mov    0x4(%eax),%edx
c0105143:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105146:	89 10                	mov    %edx,(%eax)
c0105148:	c7 45 dc dc 84 1c c0 	movl   $0xc01c84dc,-0x24(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010514f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0105152:	8b 40 04             	mov    0x4(%eax),%eax
c0105155:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0105158:	0f 94 c0             	sete   %al
c010515b:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c010515e:	85 c0                	test   %eax,%eax
c0105160:	75 24                	jne    c0105186 <basic_check+0x26f>
c0105162:	c7 44 24 0c 4f f9 10 	movl   $0xc010f94f,0xc(%esp)
c0105169:	c0 
c010516a:	c7 44 24 08 f6 f7 10 	movl   $0xc010f7f6,0x8(%esp)
c0105171:	c0 
c0105172:	c7 44 24 04 ba 00 00 	movl   $0xba,0x4(%esp)
c0105179:	00 
c010517a:	c7 04 24 0b f8 10 c0 	movl   $0xc010f80b,(%esp)
c0105181:	e8 d7 d0 ff ff       	call   c010225d <__panic>

    unsigned int nr_free_store = nr_free;
c0105186:	a1 e4 84 1c c0       	mov    0xc01c84e4,%eax
c010518b:	89 45 e8             	mov    %eax,-0x18(%ebp)
    nr_free = 0;
c010518e:	c7 05 e4 84 1c c0 00 	movl   $0x0,0xc01c84e4
c0105195:	00 00 00 

    assert(alloc_page() == NULL);
c0105198:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010519f:	e8 ad 13 00 00       	call   c0106551 <alloc_pages>
c01051a4:	85 c0                	test   %eax,%eax
c01051a6:	74 24                	je     c01051cc <basic_check+0x2b5>
c01051a8:	c7 44 24 0c 66 f9 10 	movl   $0xc010f966,0xc(%esp)
c01051af:	c0 
c01051b0:	c7 44 24 08 f6 f7 10 	movl   $0xc010f7f6,0x8(%esp)
c01051b7:	c0 
c01051b8:	c7 44 24 04 bf 00 00 	movl   $0xbf,0x4(%esp)
c01051bf:	00 
c01051c0:	c7 04 24 0b f8 10 c0 	movl   $0xc010f80b,(%esp)
c01051c7:	e8 91 d0 ff ff       	call   c010225d <__panic>

    free_page(p0);
c01051cc:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01051d3:	00 
c01051d4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01051d7:	89 04 24             	mov    %eax,(%esp)
c01051da:	e8 dd 13 00 00       	call   c01065bc <free_pages>
    free_page(p1);
c01051df:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01051e6:	00 
c01051e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01051ea:	89 04 24             	mov    %eax,(%esp)
c01051ed:	e8 ca 13 00 00       	call   c01065bc <free_pages>
    free_page(p2);
c01051f2:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01051f9:	00 
c01051fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01051fd:	89 04 24             	mov    %eax,(%esp)
c0105200:	e8 b7 13 00 00       	call   c01065bc <free_pages>
    assert(nr_free == 3);
c0105205:	a1 e4 84 1c c0       	mov    0xc01c84e4,%eax
c010520a:	83 f8 03             	cmp    $0x3,%eax
c010520d:	74 24                	je     c0105233 <basic_check+0x31c>
c010520f:	c7 44 24 0c 7b f9 10 	movl   $0xc010f97b,0xc(%esp)
c0105216:	c0 
c0105217:	c7 44 24 08 f6 f7 10 	movl   $0xc010f7f6,0x8(%esp)
c010521e:	c0 
c010521f:	c7 44 24 04 c4 00 00 	movl   $0xc4,0x4(%esp)
c0105226:	00 
c0105227:	c7 04 24 0b f8 10 c0 	movl   $0xc010f80b,(%esp)
c010522e:	e8 2a d0 ff ff       	call   c010225d <__panic>

    assert((p0 = alloc_page()) != NULL);
c0105233:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010523a:	e8 12 13 00 00       	call   c0106551 <alloc_pages>
c010523f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0105242:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0105246:	75 24                	jne    c010526c <basic_check+0x355>
c0105248:	c7 44 24 0c 44 f8 10 	movl   $0xc010f844,0xc(%esp)
c010524f:	c0 
c0105250:	c7 44 24 08 f6 f7 10 	movl   $0xc010f7f6,0x8(%esp)
c0105257:	c0 
c0105258:	c7 44 24 04 c6 00 00 	movl   $0xc6,0x4(%esp)
c010525f:	00 
c0105260:	c7 04 24 0b f8 10 c0 	movl   $0xc010f80b,(%esp)
c0105267:	e8 f1 cf ff ff       	call   c010225d <__panic>
    assert((p1 = alloc_page()) != NULL);
c010526c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105273:	e8 d9 12 00 00       	call   c0106551 <alloc_pages>
c0105278:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010527b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010527f:	75 24                	jne    c01052a5 <basic_check+0x38e>
c0105281:	c7 44 24 0c 60 f8 10 	movl   $0xc010f860,0xc(%esp)
c0105288:	c0 
c0105289:	c7 44 24 08 f6 f7 10 	movl   $0xc010f7f6,0x8(%esp)
c0105290:	c0 
c0105291:	c7 44 24 04 c7 00 00 	movl   $0xc7,0x4(%esp)
c0105298:	00 
c0105299:	c7 04 24 0b f8 10 c0 	movl   $0xc010f80b,(%esp)
c01052a0:	e8 b8 cf ff ff       	call   c010225d <__panic>
    assert((p2 = alloc_page()) != NULL);
c01052a5:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01052ac:	e8 a0 12 00 00       	call   c0106551 <alloc_pages>
c01052b1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01052b4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01052b8:	75 24                	jne    c01052de <basic_check+0x3c7>
c01052ba:	c7 44 24 0c 7c f8 10 	movl   $0xc010f87c,0xc(%esp)
c01052c1:	c0 
c01052c2:	c7 44 24 08 f6 f7 10 	movl   $0xc010f7f6,0x8(%esp)
c01052c9:	c0 
c01052ca:	c7 44 24 04 c8 00 00 	movl   $0xc8,0x4(%esp)
c01052d1:	00 
c01052d2:	c7 04 24 0b f8 10 c0 	movl   $0xc010f80b,(%esp)
c01052d9:	e8 7f cf ff ff       	call   c010225d <__panic>

    assert(alloc_page() == NULL);
c01052de:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01052e5:	e8 67 12 00 00       	call   c0106551 <alloc_pages>
c01052ea:	85 c0                	test   %eax,%eax
c01052ec:	74 24                	je     c0105312 <basic_check+0x3fb>
c01052ee:	c7 44 24 0c 66 f9 10 	movl   $0xc010f966,0xc(%esp)
c01052f5:	c0 
c01052f6:	c7 44 24 08 f6 f7 10 	movl   $0xc010f7f6,0x8(%esp)
c01052fd:	c0 
c01052fe:	c7 44 24 04 ca 00 00 	movl   $0xca,0x4(%esp)
c0105305:	00 
c0105306:	c7 04 24 0b f8 10 c0 	movl   $0xc010f80b,(%esp)
c010530d:	e8 4b cf ff ff       	call   c010225d <__panic>

    free_page(p0);
c0105312:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105319:	00 
c010531a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010531d:	89 04 24             	mov    %eax,(%esp)
c0105320:	e8 97 12 00 00       	call   c01065bc <free_pages>
c0105325:	c7 45 d8 dc 84 1c c0 	movl   $0xc01c84dc,-0x28(%ebp)
c010532c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010532f:	8b 40 04             	mov    0x4(%eax),%eax
c0105332:	39 45 d8             	cmp    %eax,-0x28(%ebp)
c0105335:	0f 94 c0             	sete   %al
c0105338:	0f b6 c0             	movzbl %al,%eax
    assert(!list_empty(&free_list));
c010533b:	85 c0                	test   %eax,%eax
c010533d:	74 24                	je     c0105363 <basic_check+0x44c>
c010533f:	c7 44 24 0c 88 f9 10 	movl   $0xc010f988,0xc(%esp)
c0105346:	c0 
c0105347:	c7 44 24 08 f6 f7 10 	movl   $0xc010f7f6,0x8(%esp)
c010534e:	c0 
c010534f:	c7 44 24 04 cd 00 00 	movl   $0xcd,0x4(%esp)
c0105356:	00 
c0105357:	c7 04 24 0b f8 10 c0 	movl   $0xc010f80b,(%esp)
c010535e:	e8 fa ce ff ff       	call   c010225d <__panic>

    struct Page *p;
    assert((p = alloc_page()) == p0);
c0105363:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010536a:	e8 e2 11 00 00       	call   c0106551 <alloc_pages>
c010536f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0105372:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105375:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0105378:	74 24                	je     c010539e <basic_check+0x487>
c010537a:	c7 44 24 0c a0 f9 10 	movl   $0xc010f9a0,0xc(%esp)
c0105381:	c0 
c0105382:	c7 44 24 08 f6 f7 10 	movl   $0xc010f7f6,0x8(%esp)
c0105389:	c0 
c010538a:	c7 44 24 04 d0 00 00 	movl   $0xd0,0x4(%esp)
c0105391:	00 
c0105392:	c7 04 24 0b f8 10 c0 	movl   $0xc010f80b,(%esp)
c0105399:	e8 bf ce ff ff       	call   c010225d <__panic>
    assert(alloc_page() == NULL);
c010539e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01053a5:	e8 a7 11 00 00       	call   c0106551 <alloc_pages>
c01053aa:	85 c0                	test   %eax,%eax
c01053ac:	74 24                	je     c01053d2 <basic_check+0x4bb>
c01053ae:	c7 44 24 0c 66 f9 10 	movl   $0xc010f966,0xc(%esp)
c01053b5:	c0 
c01053b6:	c7 44 24 08 f6 f7 10 	movl   $0xc010f7f6,0x8(%esp)
c01053bd:	c0 
c01053be:	c7 44 24 04 d1 00 00 	movl   $0xd1,0x4(%esp)
c01053c5:	00 
c01053c6:	c7 04 24 0b f8 10 c0 	movl   $0xc010f80b,(%esp)
c01053cd:	e8 8b ce ff ff       	call   c010225d <__panic>

    assert(nr_free == 0);
c01053d2:	a1 e4 84 1c c0       	mov    0xc01c84e4,%eax
c01053d7:	85 c0                	test   %eax,%eax
c01053d9:	74 24                	je     c01053ff <basic_check+0x4e8>
c01053db:	c7 44 24 0c b9 f9 10 	movl   $0xc010f9b9,0xc(%esp)
c01053e2:	c0 
c01053e3:	c7 44 24 08 f6 f7 10 	movl   $0xc010f7f6,0x8(%esp)
c01053ea:	c0 
c01053eb:	c7 44 24 04 d3 00 00 	movl   $0xd3,0x4(%esp)
c01053f2:	00 
c01053f3:	c7 04 24 0b f8 10 c0 	movl   $0xc010f80b,(%esp)
c01053fa:	e8 5e ce ff ff       	call   c010225d <__panic>
    free_list = free_list_store;
c01053ff:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105402:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0105405:	a3 dc 84 1c c0       	mov    %eax,0xc01c84dc
c010540a:	89 15 e0 84 1c c0    	mov    %edx,0xc01c84e0
    nr_free = nr_free_store;
c0105410:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105413:	a3 e4 84 1c c0       	mov    %eax,0xc01c84e4

    free_page(p);
c0105418:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010541f:	00 
c0105420:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105423:	89 04 24             	mov    %eax,(%esp)
c0105426:	e8 91 11 00 00       	call   c01065bc <free_pages>
    free_page(p1);
c010542b:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105432:	00 
c0105433:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105436:	89 04 24             	mov    %eax,(%esp)
c0105439:	e8 7e 11 00 00       	call   c01065bc <free_pages>
    free_page(p2);
c010543e:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105445:	00 
c0105446:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105449:	89 04 24             	mov    %eax,(%esp)
c010544c:	e8 6b 11 00 00       	call   c01065bc <free_pages>
}
c0105451:	c9                   	leave  
c0105452:	c3                   	ret    

c0105453 <default_check>:

// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1) 
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
c0105453:	55                   	push   %ebp
c0105454:	89 e5                	mov    %esp,%ebp
c0105456:	53                   	push   %ebx
c0105457:	81 ec 94 00 00 00    	sub    $0x94,%esp
    int count = 0, total = 0;
c010545d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0105464:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    list_entry_t *le = &free_list;
c010546b:	c7 45 ec dc 84 1c c0 	movl   $0xc01c84dc,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0105472:	eb 6b                	jmp    c01054df <default_check+0x8c>
        struct Page *p = le2page(le, page_link);
c0105474:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105477:	83 e8 10             	sub    $0x10,%eax
c010547a:	89 45 e8             	mov    %eax,-0x18(%ebp)
        assert(PageProperty(p));
c010547d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105480:	83 c0 04             	add    $0x4,%eax
c0105483:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%ebp)
c010548a:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010548d:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0105490:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0105493:	0f a3 10             	bt     %edx,(%eax)
c0105496:	19 c0                	sbb    %eax,%eax
c0105498:	89 45 c8             	mov    %eax,-0x38(%ebp)
    return oldbit != 0;
c010549b:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c010549f:	0f 95 c0             	setne  %al
c01054a2:	0f b6 c0             	movzbl %al,%eax
c01054a5:	85 c0                	test   %eax,%eax
c01054a7:	75 24                	jne    c01054cd <default_check+0x7a>
c01054a9:	c7 44 24 0c c6 f9 10 	movl   $0xc010f9c6,0xc(%esp)
c01054b0:	c0 
c01054b1:	c7 44 24 08 f6 f7 10 	movl   $0xc010f7f6,0x8(%esp)
c01054b8:	c0 
c01054b9:	c7 44 24 04 e4 00 00 	movl   $0xe4,0x4(%esp)
c01054c0:	00 
c01054c1:	c7 04 24 0b f8 10 c0 	movl   $0xc010f80b,(%esp)
c01054c8:	e8 90 cd ff ff       	call   c010225d <__panic>
        count ++, total += p->property;
c01054cd:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01054d1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01054d4:	8b 50 08             	mov    0x8(%eax),%edx
c01054d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01054da:	01 d0                	add    %edx,%eax
c01054dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01054df:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01054e2:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01054e5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01054e8:	8b 40 04             	mov    0x4(%eax),%eax
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
    int count = 0, total = 0;
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c01054eb:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01054ee:	81 7d ec dc 84 1c c0 	cmpl   $0xc01c84dc,-0x14(%ebp)
c01054f5:	0f 85 79 ff ff ff    	jne    c0105474 <default_check+0x21>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
    }
    assert(total == nr_free_pages());
c01054fb:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c01054fe:	e8 eb 10 00 00       	call   c01065ee <nr_free_pages>
c0105503:	39 c3                	cmp    %eax,%ebx
c0105505:	74 24                	je     c010552b <default_check+0xd8>
c0105507:	c7 44 24 0c d6 f9 10 	movl   $0xc010f9d6,0xc(%esp)
c010550e:	c0 
c010550f:	c7 44 24 08 f6 f7 10 	movl   $0xc010f7f6,0x8(%esp)
c0105516:	c0 
c0105517:	c7 44 24 04 e7 00 00 	movl   $0xe7,0x4(%esp)
c010551e:	00 
c010551f:	c7 04 24 0b f8 10 c0 	movl   $0xc010f80b,(%esp)
c0105526:	e8 32 cd ff ff       	call   c010225d <__panic>

    basic_check();
c010552b:	e8 e7 f9 ff ff       	call   c0104f17 <basic_check>

    struct Page *p0 = alloc_pages(5), *p1, *p2;
c0105530:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c0105537:	e8 15 10 00 00       	call   c0106551 <alloc_pages>
c010553c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(p0 != NULL);
c010553f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0105543:	75 24                	jne    c0105569 <default_check+0x116>
c0105545:	c7 44 24 0c ef f9 10 	movl   $0xc010f9ef,0xc(%esp)
c010554c:	c0 
c010554d:	c7 44 24 08 f6 f7 10 	movl   $0xc010f7f6,0x8(%esp)
c0105554:	c0 
c0105555:	c7 44 24 04 ec 00 00 	movl   $0xec,0x4(%esp)
c010555c:	00 
c010555d:	c7 04 24 0b f8 10 c0 	movl   $0xc010f80b,(%esp)
c0105564:	e8 f4 cc ff ff       	call   c010225d <__panic>
    assert(!PageProperty(p0));
c0105569:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010556c:	83 c0 04             	add    $0x4,%eax
c010556f:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c0105576:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0105579:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010557c:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010557f:	0f a3 10             	bt     %edx,(%eax)
c0105582:	19 c0                	sbb    %eax,%eax
c0105584:	89 45 b8             	mov    %eax,-0x48(%ebp)
    return oldbit != 0;
c0105587:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c010558b:	0f 95 c0             	setne  %al
c010558e:	0f b6 c0             	movzbl %al,%eax
c0105591:	85 c0                	test   %eax,%eax
c0105593:	74 24                	je     c01055b9 <default_check+0x166>
c0105595:	c7 44 24 0c fa f9 10 	movl   $0xc010f9fa,0xc(%esp)
c010559c:	c0 
c010559d:	c7 44 24 08 f6 f7 10 	movl   $0xc010f7f6,0x8(%esp)
c01055a4:	c0 
c01055a5:	c7 44 24 04 ed 00 00 	movl   $0xed,0x4(%esp)
c01055ac:	00 
c01055ad:	c7 04 24 0b f8 10 c0 	movl   $0xc010f80b,(%esp)
c01055b4:	e8 a4 cc ff ff       	call   c010225d <__panic>

    list_entry_t free_list_store = free_list;
c01055b9:	a1 dc 84 1c c0       	mov    0xc01c84dc,%eax
c01055be:	8b 15 e0 84 1c c0    	mov    0xc01c84e0,%edx
c01055c4:	89 45 80             	mov    %eax,-0x80(%ebp)
c01055c7:	89 55 84             	mov    %edx,-0x7c(%ebp)
c01055ca:	c7 45 b4 dc 84 1c c0 	movl   $0xc01c84dc,-0x4c(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01055d1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01055d4:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01055d7:	89 50 04             	mov    %edx,0x4(%eax)
c01055da:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01055dd:	8b 50 04             	mov    0x4(%eax),%edx
c01055e0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01055e3:	89 10                	mov    %edx,(%eax)
c01055e5:	c7 45 b0 dc 84 1c c0 	movl   $0xc01c84dc,-0x50(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c01055ec:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01055ef:	8b 40 04             	mov    0x4(%eax),%eax
c01055f2:	39 45 b0             	cmp    %eax,-0x50(%ebp)
c01055f5:	0f 94 c0             	sete   %al
c01055f8:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c01055fb:	85 c0                	test   %eax,%eax
c01055fd:	75 24                	jne    c0105623 <default_check+0x1d0>
c01055ff:	c7 44 24 0c 4f f9 10 	movl   $0xc010f94f,0xc(%esp)
c0105606:	c0 
c0105607:	c7 44 24 08 f6 f7 10 	movl   $0xc010f7f6,0x8(%esp)
c010560e:	c0 
c010560f:	c7 44 24 04 f1 00 00 	movl   $0xf1,0x4(%esp)
c0105616:	00 
c0105617:	c7 04 24 0b f8 10 c0 	movl   $0xc010f80b,(%esp)
c010561e:	e8 3a cc ff ff       	call   c010225d <__panic>
    assert(alloc_page() == NULL);
c0105623:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010562a:	e8 22 0f 00 00       	call   c0106551 <alloc_pages>
c010562f:	85 c0                	test   %eax,%eax
c0105631:	74 24                	je     c0105657 <default_check+0x204>
c0105633:	c7 44 24 0c 66 f9 10 	movl   $0xc010f966,0xc(%esp)
c010563a:	c0 
c010563b:	c7 44 24 08 f6 f7 10 	movl   $0xc010f7f6,0x8(%esp)
c0105642:	c0 
c0105643:	c7 44 24 04 f2 00 00 	movl   $0xf2,0x4(%esp)
c010564a:	00 
c010564b:	c7 04 24 0b f8 10 c0 	movl   $0xc010f80b,(%esp)
c0105652:	e8 06 cc ff ff       	call   c010225d <__panic>

    unsigned int nr_free_store = nr_free;
c0105657:	a1 e4 84 1c c0       	mov    0xc01c84e4,%eax
c010565c:	89 45 e0             	mov    %eax,-0x20(%ebp)
    nr_free = 0;
c010565f:	c7 05 e4 84 1c c0 00 	movl   $0x0,0xc01c84e4
c0105666:	00 00 00 

    free_pages(p0 + 2, 3);
c0105669:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010566c:	83 c0 48             	add    $0x48,%eax
c010566f:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c0105676:	00 
c0105677:	89 04 24             	mov    %eax,(%esp)
c010567a:	e8 3d 0f 00 00       	call   c01065bc <free_pages>
    assert(alloc_pages(4) == NULL);
c010567f:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c0105686:	e8 c6 0e 00 00       	call   c0106551 <alloc_pages>
c010568b:	85 c0                	test   %eax,%eax
c010568d:	74 24                	je     c01056b3 <default_check+0x260>
c010568f:	c7 44 24 0c 0c fa 10 	movl   $0xc010fa0c,0xc(%esp)
c0105696:	c0 
c0105697:	c7 44 24 08 f6 f7 10 	movl   $0xc010f7f6,0x8(%esp)
c010569e:	c0 
c010569f:	c7 44 24 04 f8 00 00 	movl   $0xf8,0x4(%esp)
c01056a6:	00 
c01056a7:	c7 04 24 0b f8 10 c0 	movl   $0xc010f80b,(%esp)
c01056ae:	e8 aa cb ff ff       	call   c010225d <__panic>
    assert(PageProperty(p0 + 2) && p0[2].property == 3);
c01056b3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01056b6:	83 c0 48             	add    $0x48,%eax
c01056b9:	83 c0 04             	add    $0x4,%eax
c01056bc:	c7 45 ac 01 00 00 00 	movl   $0x1,-0x54(%ebp)
c01056c3:	89 45 a8             	mov    %eax,-0x58(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01056c6:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01056c9:	8b 55 ac             	mov    -0x54(%ebp),%edx
c01056cc:	0f a3 10             	bt     %edx,(%eax)
c01056cf:	19 c0                	sbb    %eax,%eax
c01056d1:	89 45 a4             	mov    %eax,-0x5c(%ebp)
    return oldbit != 0;
c01056d4:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
c01056d8:	0f 95 c0             	setne  %al
c01056db:	0f b6 c0             	movzbl %al,%eax
c01056de:	85 c0                	test   %eax,%eax
c01056e0:	74 0e                	je     c01056f0 <default_check+0x29d>
c01056e2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01056e5:	83 c0 48             	add    $0x48,%eax
c01056e8:	8b 40 08             	mov    0x8(%eax),%eax
c01056eb:	83 f8 03             	cmp    $0x3,%eax
c01056ee:	74 24                	je     c0105714 <default_check+0x2c1>
c01056f0:	c7 44 24 0c 24 fa 10 	movl   $0xc010fa24,0xc(%esp)
c01056f7:	c0 
c01056f8:	c7 44 24 08 f6 f7 10 	movl   $0xc010f7f6,0x8(%esp)
c01056ff:	c0 
c0105700:	c7 44 24 04 f9 00 00 	movl   $0xf9,0x4(%esp)
c0105707:	00 
c0105708:	c7 04 24 0b f8 10 c0 	movl   $0xc010f80b,(%esp)
c010570f:	e8 49 cb ff ff       	call   c010225d <__panic>
    assert((p1 = alloc_pages(3)) != NULL);
c0105714:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
c010571b:	e8 31 0e 00 00       	call   c0106551 <alloc_pages>
c0105720:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0105723:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0105727:	75 24                	jne    c010574d <default_check+0x2fa>
c0105729:	c7 44 24 0c 50 fa 10 	movl   $0xc010fa50,0xc(%esp)
c0105730:	c0 
c0105731:	c7 44 24 08 f6 f7 10 	movl   $0xc010f7f6,0x8(%esp)
c0105738:	c0 
c0105739:	c7 44 24 04 fa 00 00 	movl   $0xfa,0x4(%esp)
c0105740:	00 
c0105741:	c7 04 24 0b f8 10 c0 	movl   $0xc010f80b,(%esp)
c0105748:	e8 10 cb ff ff       	call   c010225d <__panic>
    assert(alloc_page() == NULL);
c010574d:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105754:	e8 f8 0d 00 00       	call   c0106551 <alloc_pages>
c0105759:	85 c0                	test   %eax,%eax
c010575b:	74 24                	je     c0105781 <default_check+0x32e>
c010575d:	c7 44 24 0c 66 f9 10 	movl   $0xc010f966,0xc(%esp)
c0105764:	c0 
c0105765:	c7 44 24 08 f6 f7 10 	movl   $0xc010f7f6,0x8(%esp)
c010576c:	c0 
c010576d:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
c0105774:	00 
c0105775:	c7 04 24 0b f8 10 c0 	movl   $0xc010f80b,(%esp)
c010577c:	e8 dc ca ff ff       	call   c010225d <__panic>
    assert(p0 + 2 == p1);
c0105781:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105784:	83 c0 48             	add    $0x48,%eax
c0105787:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c010578a:	74 24                	je     c01057b0 <default_check+0x35d>
c010578c:	c7 44 24 0c 6e fa 10 	movl   $0xc010fa6e,0xc(%esp)
c0105793:	c0 
c0105794:	c7 44 24 08 f6 f7 10 	movl   $0xc010f7f6,0x8(%esp)
c010579b:	c0 
c010579c:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
c01057a3:	00 
c01057a4:	c7 04 24 0b f8 10 c0 	movl   $0xc010f80b,(%esp)
c01057ab:	e8 ad ca ff ff       	call   c010225d <__panic>

    p2 = p0 + 1;
c01057b0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01057b3:	83 c0 24             	add    $0x24,%eax
c01057b6:	89 45 d8             	mov    %eax,-0x28(%ebp)
    free_page(p0);
c01057b9:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01057c0:	00 
c01057c1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01057c4:	89 04 24             	mov    %eax,(%esp)
c01057c7:	e8 f0 0d 00 00       	call   c01065bc <free_pages>
    free_pages(p1, 3);
c01057cc:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c01057d3:	00 
c01057d4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01057d7:	89 04 24             	mov    %eax,(%esp)
c01057da:	e8 dd 0d 00 00       	call   c01065bc <free_pages>
    assert(PageProperty(p0) && p0->property == 1);
c01057df:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01057e2:	83 c0 04             	add    $0x4,%eax
c01057e5:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
c01057ec:	89 45 9c             	mov    %eax,-0x64(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01057ef:	8b 45 9c             	mov    -0x64(%ebp),%eax
c01057f2:	8b 55 a0             	mov    -0x60(%ebp),%edx
c01057f5:	0f a3 10             	bt     %edx,(%eax)
c01057f8:	19 c0                	sbb    %eax,%eax
c01057fa:	89 45 98             	mov    %eax,-0x68(%ebp)
    return oldbit != 0;
c01057fd:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
c0105801:	0f 95 c0             	setne  %al
c0105804:	0f b6 c0             	movzbl %al,%eax
c0105807:	85 c0                	test   %eax,%eax
c0105809:	74 0b                	je     c0105816 <default_check+0x3c3>
c010580b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010580e:	8b 40 08             	mov    0x8(%eax),%eax
c0105811:	83 f8 01             	cmp    $0x1,%eax
c0105814:	74 24                	je     c010583a <default_check+0x3e7>
c0105816:	c7 44 24 0c 7c fa 10 	movl   $0xc010fa7c,0xc(%esp)
c010581d:	c0 
c010581e:	c7 44 24 08 f6 f7 10 	movl   $0xc010f7f6,0x8(%esp)
c0105825:	c0 
c0105826:	c7 44 24 04 01 01 00 	movl   $0x101,0x4(%esp)
c010582d:	00 
c010582e:	c7 04 24 0b f8 10 c0 	movl   $0xc010f80b,(%esp)
c0105835:	e8 23 ca ff ff       	call   c010225d <__panic>
    assert(PageProperty(p1) && p1->property == 3);
c010583a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010583d:	83 c0 04             	add    $0x4,%eax
c0105840:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
c0105847:	89 45 90             	mov    %eax,-0x70(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010584a:	8b 45 90             	mov    -0x70(%ebp),%eax
c010584d:	8b 55 94             	mov    -0x6c(%ebp),%edx
c0105850:	0f a3 10             	bt     %edx,(%eax)
c0105853:	19 c0                	sbb    %eax,%eax
c0105855:	89 45 8c             	mov    %eax,-0x74(%ebp)
    return oldbit != 0;
c0105858:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
c010585c:	0f 95 c0             	setne  %al
c010585f:	0f b6 c0             	movzbl %al,%eax
c0105862:	85 c0                	test   %eax,%eax
c0105864:	74 0b                	je     c0105871 <default_check+0x41e>
c0105866:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0105869:	8b 40 08             	mov    0x8(%eax),%eax
c010586c:	83 f8 03             	cmp    $0x3,%eax
c010586f:	74 24                	je     c0105895 <default_check+0x442>
c0105871:	c7 44 24 0c a4 fa 10 	movl   $0xc010faa4,0xc(%esp)
c0105878:	c0 
c0105879:	c7 44 24 08 f6 f7 10 	movl   $0xc010f7f6,0x8(%esp)
c0105880:	c0 
c0105881:	c7 44 24 04 02 01 00 	movl   $0x102,0x4(%esp)
c0105888:	00 
c0105889:	c7 04 24 0b f8 10 c0 	movl   $0xc010f80b,(%esp)
c0105890:	e8 c8 c9 ff ff       	call   c010225d <__panic>

    assert((p0 = alloc_page()) == p2 - 1);
c0105895:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010589c:	e8 b0 0c 00 00       	call   c0106551 <alloc_pages>
c01058a1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01058a4:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01058a7:	83 e8 24             	sub    $0x24,%eax
c01058aa:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c01058ad:	74 24                	je     c01058d3 <default_check+0x480>
c01058af:	c7 44 24 0c ca fa 10 	movl   $0xc010faca,0xc(%esp)
c01058b6:	c0 
c01058b7:	c7 44 24 08 f6 f7 10 	movl   $0xc010f7f6,0x8(%esp)
c01058be:	c0 
c01058bf:	c7 44 24 04 04 01 00 	movl   $0x104,0x4(%esp)
c01058c6:	00 
c01058c7:	c7 04 24 0b f8 10 c0 	movl   $0xc010f80b,(%esp)
c01058ce:	e8 8a c9 ff ff       	call   c010225d <__panic>
    free_page(p0);
c01058d3:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01058da:	00 
c01058db:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01058de:	89 04 24             	mov    %eax,(%esp)
c01058e1:	e8 d6 0c 00 00       	call   c01065bc <free_pages>
    assert((p0 = alloc_pages(2)) == p2 + 1);
c01058e6:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c01058ed:	e8 5f 0c 00 00       	call   c0106551 <alloc_pages>
c01058f2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01058f5:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01058f8:	83 c0 24             	add    $0x24,%eax
c01058fb:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c01058fe:	74 24                	je     c0105924 <default_check+0x4d1>
c0105900:	c7 44 24 0c e8 fa 10 	movl   $0xc010fae8,0xc(%esp)
c0105907:	c0 
c0105908:	c7 44 24 08 f6 f7 10 	movl   $0xc010f7f6,0x8(%esp)
c010590f:	c0 
c0105910:	c7 44 24 04 06 01 00 	movl   $0x106,0x4(%esp)
c0105917:	00 
c0105918:	c7 04 24 0b f8 10 c0 	movl   $0xc010f80b,(%esp)
c010591f:	e8 39 c9 ff ff       	call   c010225d <__panic>

    free_pages(p0, 2);
c0105924:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c010592b:	00 
c010592c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010592f:	89 04 24             	mov    %eax,(%esp)
c0105932:	e8 85 0c 00 00       	call   c01065bc <free_pages>
    free_page(p2);
c0105937:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010593e:	00 
c010593f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105942:	89 04 24             	mov    %eax,(%esp)
c0105945:	e8 72 0c 00 00       	call   c01065bc <free_pages>

    assert((p0 = alloc_pages(5)) != NULL);
c010594a:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c0105951:	e8 fb 0b 00 00       	call   c0106551 <alloc_pages>
c0105956:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0105959:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010595d:	75 24                	jne    c0105983 <default_check+0x530>
c010595f:	c7 44 24 0c 08 fb 10 	movl   $0xc010fb08,0xc(%esp)
c0105966:	c0 
c0105967:	c7 44 24 08 f6 f7 10 	movl   $0xc010f7f6,0x8(%esp)
c010596e:	c0 
c010596f:	c7 44 24 04 0b 01 00 	movl   $0x10b,0x4(%esp)
c0105976:	00 
c0105977:	c7 04 24 0b f8 10 c0 	movl   $0xc010f80b,(%esp)
c010597e:	e8 da c8 ff ff       	call   c010225d <__panic>
    assert(alloc_page() == NULL);
c0105983:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010598a:	e8 c2 0b 00 00       	call   c0106551 <alloc_pages>
c010598f:	85 c0                	test   %eax,%eax
c0105991:	74 24                	je     c01059b7 <default_check+0x564>
c0105993:	c7 44 24 0c 66 f9 10 	movl   $0xc010f966,0xc(%esp)
c010599a:	c0 
c010599b:	c7 44 24 08 f6 f7 10 	movl   $0xc010f7f6,0x8(%esp)
c01059a2:	c0 
c01059a3:	c7 44 24 04 0c 01 00 	movl   $0x10c,0x4(%esp)
c01059aa:	00 
c01059ab:	c7 04 24 0b f8 10 c0 	movl   $0xc010f80b,(%esp)
c01059b2:	e8 a6 c8 ff ff       	call   c010225d <__panic>

    assert(nr_free == 0);
c01059b7:	a1 e4 84 1c c0       	mov    0xc01c84e4,%eax
c01059bc:	85 c0                	test   %eax,%eax
c01059be:	74 24                	je     c01059e4 <default_check+0x591>
c01059c0:	c7 44 24 0c b9 f9 10 	movl   $0xc010f9b9,0xc(%esp)
c01059c7:	c0 
c01059c8:	c7 44 24 08 f6 f7 10 	movl   $0xc010f7f6,0x8(%esp)
c01059cf:	c0 
c01059d0:	c7 44 24 04 0e 01 00 	movl   $0x10e,0x4(%esp)
c01059d7:	00 
c01059d8:	c7 04 24 0b f8 10 c0 	movl   $0xc010f80b,(%esp)
c01059df:	e8 79 c8 ff ff       	call   c010225d <__panic>
    nr_free = nr_free_store;
c01059e4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01059e7:	a3 e4 84 1c c0       	mov    %eax,0xc01c84e4

    free_list = free_list_store;
c01059ec:	8b 45 80             	mov    -0x80(%ebp),%eax
c01059ef:	8b 55 84             	mov    -0x7c(%ebp),%edx
c01059f2:	a3 dc 84 1c c0       	mov    %eax,0xc01c84dc
c01059f7:	89 15 e0 84 1c c0    	mov    %edx,0xc01c84e0
    free_pages(p0, 5);
c01059fd:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
c0105a04:	00 
c0105a05:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105a08:	89 04 24             	mov    %eax,(%esp)
c0105a0b:	e8 ac 0b 00 00       	call   c01065bc <free_pages>

    le = &free_list;
c0105a10:	c7 45 ec dc 84 1c c0 	movl   $0xc01c84dc,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0105a17:	eb 1d                	jmp    c0105a36 <default_check+0x5e3>
        struct Page *p = le2page(le, page_link);
c0105a19:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105a1c:	83 e8 10             	sub    $0x10,%eax
c0105a1f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        count --, total -= p->property;
c0105a22:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0105a26:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0105a29:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0105a2c:	8b 40 08             	mov    0x8(%eax),%eax
c0105a2f:	29 c2                	sub    %eax,%edx
c0105a31:	89 d0                	mov    %edx,%eax
c0105a33:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105a36:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105a39:	89 45 88             	mov    %eax,-0x78(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0105a3c:	8b 45 88             	mov    -0x78(%ebp),%eax
c0105a3f:	8b 40 04             	mov    0x4(%eax),%eax

    free_list = free_list_store;
    free_pages(p0, 5);

    le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c0105a42:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0105a45:	81 7d ec dc 84 1c c0 	cmpl   $0xc01c84dc,-0x14(%ebp)
c0105a4c:	75 cb                	jne    c0105a19 <default_check+0x5c6>
        struct Page *p = le2page(le, page_link);
        count --, total -= p->property;
    }
    assert(count == 0);
c0105a4e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105a52:	74 24                	je     c0105a78 <default_check+0x625>
c0105a54:	c7 44 24 0c 26 fb 10 	movl   $0xc010fb26,0xc(%esp)
c0105a5b:	c0 
c0105a5c:	c7 44 24 08 f6 f7 10 	movl   $0xc010f7f6,0x8(%esp)
c0105a63:	c0 
c0105a64:	c7 44 24 04 19 01 00 	movl   $0x119,0x4(%esp)
c0105a6b:	00 
c0105a6c:	c7 04 24 0b f8 10 c0 	movl   $0xc010f80b,(%esp)
c0105a73:	e8 e5 c7 ff ff       	call   c010225d <__panic>
    assert(total == 0);
c0105a78:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0105a7c:	74 24                	je     c0105aa2 <default_check+0x64f>
c0105a7e:	c7 44 24 0c 31 fb 10 	movl   $0xc010fb31,0xc(%esp)
c0105a85:	c0 
c0105a86:	c7 44 24 08 f6 f7 10 	movl   $0xc010f7f6,0x8(%esp)
c0105a8d:	c0 
c0105a8e:	c7 44 24 04 1a 01 00 	movl   $0x11a,0x4(%esp)
c0105a95:	00 
c0105a96:	c7 04 24 0b f8 10 c0 	movl   $0xc010f80b,(%esp)
c0105a9d:	e8 bb c7 ff ff       	call   c010225d <__panic>
}
c0105aa2:	81 c4 94 00 00 00    	add    $0x94,%esp
c0105aa8:	5b                   	pop    %ebx
c0105aa9:	5d                   	pop    %ebp
c0105aaa:	c3                   	ret    

c0105aab <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0105aab:	55                   	push   %ebp
c0105aac:	89 e5                	mov    %esp,%ebp
c0105aae:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0105ab1:	9c                   	pushf  
c0105ab2:	58                   	pop    %eax
c0105ab3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0105ab6:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0105ab9:	25 00 02 00 00       	and    $0x200,%eax
c0105abe:	85 c0                	test   %eax,%eax
c0105ac0:	74 0c                	je     c0105ace <__intr_save+0x23>
        intr_disable();
c0105ac2:	e8 ee d9 ff ff       	call   c01034b5 <intr_disable>
        return 1;
c0105ac7:	b8 01 00 00 00       	mov    $0x1,%eax
c0105acc:	eb 05                	jmp    c0105ad3 <__intr_save+0x28>
    }
    return 0;
c0105ace:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105ad3:	c9                   	leave  
c0105ad4:	c3                   	ret    

c0105ad5 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0105ad5:	55                   	push   %ebp
c0105ad6:	89 e5                	mov    %esp,%ebp
c0105ad8:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0105adb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0105adf:	74 05                	je     c0105ae6 <__intr_restore+0x11>
        intr_enable();
c0105ae1:	e8 c9 d9 ff ff       	call   c01034af <intr_enable>
    }
}
c0105ae6:	c9                   	leave  
c0105ae7:	c3                   	ret    

c0105ae8 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0105ae8:	55                   	push   %ebp
c0105ae9:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0105aeb:	8b 55 08             	mov    0x8(%ebp),%edx
c0105aee:	a1 f0 84 1c c0       	mov    0xc01c84f0,%eax
c0105af3:	29 c2                	sub    %eax,%edx
c0105af5:	89 d0                	mov    %edx,%eax
c0105af7:	c1 f8 02             	sar    $0x2,%eax
c0105afa:	69 c0 39 8e e3 38    	imul   $0x38e38e39,%eax,%eax
}
c0105b00:	5d                   	pop    %ebp
c0105b01:	c3                   	ret    

c0105b02 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0105b02:	55                   	push   %ebp
c0105b03:	89 e5                	mov    %esp,%ebp
c0105b05:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c0105b08:	8b 45 08             	mov    0x8(%ebp),%eax
c0105b0b:	89 04 24             	mov    %eax,(%esp)
c0105b0e:	e8 d5 ff ff ff       	call   c0105ae8 <page2ppn>
c0105b13:	c1 e0 0c             	shl    $0xc,%eax
}
c0105b16:	c9                   	leave  
c0105b17:	c3                   	ret    

c0105b18 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0105b18:	55                   	push   %ebp
c0105b19:	89 e5                	mov    %esp,%ebp
c0105b1b:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0105b1e:	8b 45 08             	mov    0x8(%ebp),%eax
c0105b21:	c1 e8 0c             	shr    $0xc,%eax
c0105b24:	89 c2                	mov    %eax,%edx
c0105b26:	a1 a0 63 1c c0       	mov    0xc01c63a0,%eax
c0105b2b:	39 c2                	cmp    %eax,%edx
c0105b2d:	72 1c                	jb     c0105b4b <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0105b2f:	c7 44 24 08 6c fb 10 	movl   $0xc010fb6c,0x8(%esp)
c0105b36:	c0 
c0105b37:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0105b3e:	00 
c0105b3f:	c7 04 24 8b fb 10 c0 	movl   $0xc010fb8b,(%esp)
c0105b46:	e8 12 c7 ff ff       	call   c010225d <__panic>
    }
    return &pages[PPN(pa)];
c0105b4b:	8b 0d f0 84 1c c0    	mov    0xc01c84f0,%ecx
c0105b51:	8b 45 08             	mov    0x8(%ebp),%eax
c0105b54:	c1 e8 0c             	shr    $0xc,%eax
c0105b57:	89 c2                	mov    %eax,%edx
c0105b59:	89 d0                	mov    %edx,%eax
c0105b5b:	c1 e0 03             	shl    $0x3,%eax
c0105b5e:	01 d0                	add    %edx,%eax
c0105b60:	c1 e0 02             	shl    $0x2,%eax
c0105b63:	01 c8                	add    %ecx,%eax
}
c0105b65:	c9                   	leave  
c0105b66:	c3                   	ret    

c0105b67 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0105b67:	55                   	push   %ebp
c0105b68:	89 e5                	mov    %esp,%ebp
c0105b6a:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c0105b6d:	8b 45 08             	mov    0x8(%ebp),%eax
c0105b70:	89 04 24             	mov    %eax,(%esp)
c0105b73:	e8 8a ff ff ff       	call   c0105b02 <page2pa>
c0105b78:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105b7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105b7e:	c1 e8 0c             	shr    $0xc,%eax
c0105b81:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105b84:	a1 a0 63 1c c0       	mov    0xc01c63a0,%eax
c0105b89:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0105b8c:	72 23                	jb     c0105bb1 <page2kva+0x4a>
c0105b8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105b91:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105b95:	c7 44 24 08 9c fb 10 	movl   $0xc010fb9c,0x8(%esp)
c0105b9c:	c0 
c0105b9d:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c0105ba4:	00 
c0105ba5:	c7 04 24 8b fb 10 c0 	movl   $0xc010fb8b,(%esp)
c0105bac:	e8 ac c6 ff ff       	call   c010225d <__panic>
c0105bb1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105bb4:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0105bb9:	c9                   	leave  
c0105bba:	c3                   	ret    

c0105bbb <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c0105bbb:	55                   	push   %ebp
c0105bbc:	89 e5                	mov    %esp,%ebp
c0105bbe:	83 ec 28             	sub    $0x28,%esp
    return pa2page(PADDR(kva));
c0105bc1:	8b 45 08             	mov    0x8(%ebp),%eax
c0105bc4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105bc7:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0105bce:	77 23                	ja     c0105bf3 <kva2page+0x38>
c0105bd0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105bd3:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105bd7:	c7 44 24 08 c0 fb 10 	movl   $0xc010fbc0,0x8(%esp)
c0105bde:	c0 
c0105bdf:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c0105be6:	00 
c0105be7:	c7 04 24 8b fb 10 c0 	movl   $0xc010fb8b,(%esp)
c0105bee:	e8 6a c6 ff ff       	call   c010225d <__panic>
c0105bf3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105bf6:	05 00 00 00 40       	add    $0x40000000,%eax
c0105bfb:	89 04 24             	mov    %eax,(%esp)
c0105bfe:	e8 15 ff ff ff       	call   c0105b18 <pa2page>
}
c0105c03:	c9                   	leave  
c0105c04:	c3                   	ret    

c0105c05 <__slob_get_free_pages>:
static slob_t *slobfree = &arena;
static bigblock_t *bigblocks;


static void* __slob_get_free_pages(gfp_t gfp, int order)
{
c0105c05:	55                   	push   %ebp
c0105c06:	89 e5                	mov    %esp,%ebp
c0105c08:	83 ec 28             	sub    $0x28,%esp
  struct Page * page = alloc_pages(1 << order);
c0105c0b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105c0e:	ba 01 00 00 00       	mov    $0x1,%edx
c0105c13:	89 c1                	mov    %eax,%ecx
c0105c15:	d3 e2                	shl    %cl,%edx
c0105c17:	89 d0                	mov    %edx,%eax
c0105c19:	89 04 24             	mov    %eax,(%esp)
c0105c1c:	e8 30 09 00 00       	call   c0106551 <alloc_pages>
c0105c21:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(!page)
c0105c24:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105c28:	75 07                	jne    c0105c31 <__slob_get_free_pages+0x2c>
    return NULL;
c0105c2a:	b8 00 00 00 00       	mov    $0x0,%eax
c0105c2f:	eb 0b                	jmp    c0105c3c <__slob_get_free_pages+0x37>
  return page2kva(page);
c0105c31:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105c34:	89 04 24             	mov    %eax,(%esp)
c0105c37:	e8 2b ff ff ff       	call   c0105b67 <page2kva>
}
c0105c3c:	c9                   	leave  
c0105c3d:	c3                   	ret    

c0105c3e <__slob_free_pages>:

#define __slob_get_free_page(gfp) __slob_get_free_pages(gfp, 0)

static inline void __slob_free_pages(unsigned long kva, int order)
{
c0105c3e:	55                   	push   %ebp
c0105c3f:	89 e5                	mov    %esp,%ebp
c0105c41:	53                   	push   %ebx
c0105c42:	83 ec 14             	sub    $0x14,%esp
  free_pages(kva2page(kva), 1 << order);
c0105c45:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105c48:	ba 01 00 00 00       	mov    $0x1,%edx
c0105c4d:	89 c1                	mov    %eax,%ecx
c0105c4f:	d3 e2                	shl    %cl,%edx
c0105c51:	89 d0                	mov    %edx,%eax
c0105c53:	89 c3                	mov    %eax,%ebx
c0105c55:	8b 45 08             	mov    0x8(%ebp),%eax
c0105c58:	89 04 24             	mov    %eax,(%esp)
c0105c5b:	e8 5b ff ff ff       	call   c0105bbb <kva2page>
c0105c60:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c0105c64:	89 04 24             	mov    %eax,(%esp)
c0105c67:	e8 50 09 00 00       	call   c01065bc <free_pages>
}
c0105c6c:	83 c4 14             	add    $0x14,%esp
c0105c6f:	5b                   	pop    %ebx
c0105c70:	5d                   	pop    %ebp
c0105c71:	c3                   	ret    

c0105c72 <slob_alloc>:

static void slob_free(void *b, int size);

static void *slob_alloc(size_t size, gfp_t gfp, int align)
{
c0105c72:	55                   	push   %ebp
c0105c73:	89 e5                	mov    %esp,%ebp
c0105c75:	83 ec 38             	sub    $0x38,%esp
  assert( (size + SLOB_UNIT) < PAGE_SIZE );
c0105c78:	8b 45 08             	mov    0x8(%ebp),%eax
c0105c7b:	83 c0 08             	add    $0x8,%eax
c0105c7e:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c0105c83:	76 24                	jbe    c0105ca9 <slob_alloc+0x37>
c0105c85:	c7 44 24 0c e4 fb 10 	movl   $0xc010fbe4,0xc(%esp)
c0105c8c:	c0 
c0105c8d:	c7 44 24 08 03 fc 10 	movl   $0xc010fc03,0x8(%esp)
c0105c94:	c0 
c0105c95:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c0105c9c:	00 
c0105c9d:	c7 04 24 18 fc 10 c0 	movl   $0xc010fc18,(%esp)
c0105ca4:	e8 b4 c5 ff ff       	call   c010225d <__panic>

	slob_t *prev, *cur, *aligned = 0;
c0105ca9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
c0105cb0:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0105cb7:	8b 45 08             	mov    0x8(%ebp),%eax
c0105cba:	83 c0 07             	add    $0x7,%eax
c0105cbd:	c1 e8 03             	shr    $0x3,%eax
c0105cc0:	89 45 e0             	mov    %eax,-0x20(%ebp)
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
c0105cc3:	e8 e3 fd ff ff       	call   c0105aab <__intr_save>
c0105cc8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	prev = slobfree;
c0105ccb:	a1 08 4a 13 c0       	mov    0xc0134a08,%eax
c0105cd0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c0105cd3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105cd6:	8b 40 04             	mov    0x4(%eax),%eax
c0105cd9:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (align) {
c0105cdc:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0105ce0:	74 25                	je     c0105d07 <slob_alloc+0x95>
			aligned = (slob_t *)ALIGN((unsigned long)cur, align);
c0105ce2:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0105ce5:	8b 45 10             	mov    0x10(%ebp),%eax
c0105ce8:	01 d0                	add    %edx,%eax
c0105cea:	8d 50 ff             	lea    -0x1(%eax),%edx
c0105ced:	8b 45 10             	mov    0x10(%ebp),%eax
c0105cf0:	f7 d8                	neg    %eax
c0105cf2:	21 d0                	and    %edx,%eax
c0105cf4:	89 45 ec             	mov    %eax,-0x14(%ebp)
			delta = aligned - cur;
c0105cf7:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0105cfa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105cfd:	29 c2                	sub    %eax,%edx
c0105cff:	89 d0                	mov    %edx,%eax
c0105d01:	c1 f8 03             	sar    $0x3,%eax
c0105d04:	89 45 e8             	mov    %eax,-0x18(%ebp)
		}
		if (cur->units >= units + delta) { /* room enough? */
c0105d07:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105d0a:	8b 00                	mov    (%eax),%eax
c0105d0c:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0105d0f:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0105d12:	01 ca                	add    %ecx,%edx
c0105d14:	39 d0                	cmp    %edx,%eax
c0105d16:	0f 8c aa 00 00 00    	jl     c0105dc6 <slob_alloc+0x154>
			if (delta) { /* need to fragment head to align? */
c0105d1c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0105d20:	74 38                	je     c0105d5a <slob_alloc+0xe8>
				aligned->units = cur->units - delta;
c0105d22:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105d25:	8b 00                	mov    (%eax),%eax
c0105d27:	2b 45 e8             	sub    -0x18(%ebp),%eax
c0105d2a:	89 c2                	mov    %eax,%edx
c0105d2c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105d2f:	89 10                	mov    %edx,(%eax)
				aligned->next = cur->next;
c0105d31:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105d34:	8b 50 04             	mov    0x4(%eax),%edx
c0105d37:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105d3a:	89 50 04             	mov    %edx,0x4(%eax)
				cur->next = aligned;
c0105d3d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105d40:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0105d43:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = delta;
c0105d46:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105d49:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0105d4c:	89 10                	mov    %edx,(%eax)
				prev = cur;
c0105d4e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105d51:	89 45 f4             	mov    %eax,-0xc(%ebp)
				cur = aligned;
c0105d54:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105d57:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}

			if (cur->units == units) /* exact fit? */
c0105d5a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105d5d:	8b 00                	mov    (%eax),%eax
c0105d5f:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0105d62:	75 0e                	jne    c0105d72 <slob_alloc+0x100>
				prev->next = cur->next; /* unlink */
c0105d64:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105d67:	8b 50 04             	mov    0x4(%eax),%edx
c0105d6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105d6d:	89 50 04             	mov    %edx,0x4(%eax)
c0105d70:	eb 3c                	jmp    c0105dae <slob_alloc+0x13c>
			else { /* fragment */
				prev->next = cur + units;
c0105d72:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105d75:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0105d7c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105d7f:	01 c2                	add    %eax,%edx
c0105d81:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105d84:	89 50 04             	mov    %edx,0x4(%eax)
				prev->next->units = cur->units - units;
c0105d87:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105d8a:	8b 40 04             	mov    0x4(%eax),%eax
c0105d8d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0105d90:	8b 12                	mov    (%edx),%edx
c0105d92:	2b 55 e0             	sub    -0x20(%ebp),%edx
c0105d95:	89 10                	mov    %edx,(%eax)
				prev->next->next = cur->next;
c0105d97:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105d9a:	8b 40 04             	mov    0x4(%eax),%eax
c0105d9d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0105da0:	8b 52 04             	mov    0x4(%edx),%edx
c0105da3:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = units;
c0105da6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105da9:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0105dac:	89 10                	mov    %edx,(%eax)
			}

			slobfree = prev;
c0105dae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105db1:	a3 08 4a 13 c0       	mov    %eax,0xc0134a08
			spin_unlock_irqrestore(&slob_lock, flags);
c0105db6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105db9:	89 04 24             	mov    %eax,(%esp)
c0105dbc:	e8 14 fd ff ff       	call   c0105ad5 <__intr_restore>
			return cur;
c0105dc1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105dc4:	eb 7f                	jmp    c0105e45 <slob_alloc+0x1d3>
		}
		if (cur == slobfree) {
c0105dc6:	a1 08 4a 13 c0       	mov    0xc0134a08,%eax
c0105dcb:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0105dce:	75 61                	jne    c0105e31 <slob_alloc+0x1bf>
			spin_unlock_irqrestore(&slob_lock, flags);
c0105dd0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105dd3:	89 04 24             	mov    %eax,(%esp)
c0105dd6:	e8 fa fc ff ff       	call   c0105ad5 <__intr_restore>

			if (size == PAGE_SIZE) /* trying to shrink arena? */
c0105ddb:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c0105de2:	75 07                	jne    c0105deb <slob_alloc+0x179>
				return 0;
c0105de4:	b8 00 00 00 00       	mov    $0x0,%eax
c0105de9:	eb 5a                	jmp    c0105e45 <slob_alloc+0x1d3>

			cur = (slob_t *)__slob_get_free_page(gfp);
c0105deb:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0105df2:	00 
c0105df3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105df6:	89 04 24             	mov    %eax,(%esp)
c0105df9:	e8 07 fe ff ff       	call   c0105c05 <__slob_get_free_pages>
c0105dfe:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (!cur)
c0105e01:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0105e05:	75 07                	jne    c0105e0e <slob_alloc+0x19c>
				return 0;
c0105e07:	b8 00 00 00 00       	mov    $0x0,%eax
c0105e0c:	eb 37                	jmp    c0105e45 <slob_alloc+0x1d3>

			slob_free(cur, PAGE_SIZE);
c0105e0e:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0105e15:	00 
c0105e16:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105e19:	89 04 24             	mov    %eax,(%esp)
c0105e1c:	e8 26 00 00 00       	call   c0105e47 <slob_free>
			spin_lock_irqsave(&slob_lock, flags);
c0105e21:	e8 85 fc ff ff       	call   c0105aab <__intr_save>
c0105e26:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			cur = slobfree;
c0105e29:	a1 08 4a 13 c0       	mov    0xc0134a08,%eax
c0105e2e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
	prev = slobfree;
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c0105e31:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105e34:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105e37:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105e3a:	8b 40 04             	mov    0x4(%eax),%eax
c0105e3d:	89 45 f0             	mov    %eax,-0x10(%ebp)

			slob_free(cur, PAGE_SIZE);
			spin_lock_irqsave(&slob_lock, flags);
			cur = slobfree;
		}
	}
c0105e40:	e9 97 fe ff ff       	jmp    c0105cdc <slob_alloc+0x6a>
}
c0105e45:	c9                   	leave  
c0105e46:	c3                   	ret    

c0105e47 <slob_free>:

static void slob_free(void *block, int size)
{
c0105e47:	55                   	push   %ebp
c0105e48:	89 e5                	mov    %esp,%ebp
c0105e4a:	83 ec 28             	sub    $0x28,%esp
	slob_t *cur, *b = (slob_t *)block;
c0105e4d:	8b 45 08             	mov    0x8(%ebp),%eax
c0105e50:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c0105e53:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0105e57:	75 05                	jne    c0105e5e <slob_free+0x17>
		return;
c0105e59:	e9 ff 00 00 00       	jmp    c0105f5d <slob_free+0x116>

	if (size)
c0105e5e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105e62:	74 10                	je     c0105e74 <slob_free+0x2d>
		b->units = SLOB_UNITS(size);
c0105e64:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105e67:	83 c0 07             	add    $0x7,%eax
c0105e6a:	c1 e8 03             	shr    $0x3,%eax
c0105e6d:	89 c2                	mov    %eax,%edx
c0105e6f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105e72:	89 10                	mov    %edx,(%eax)

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
c0105e74:	e8 32 fc ff ff       	call   c0105aab <__intr_save>
c0105e79:	89 45 ec             	mov    %eax,-0x14(%ebp)
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0105e7c:	a1 08 4a 13 c0       	mov    0xc0134a08,%eax
c0105e81:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105e84:	eb 27                	jmp    c0105ead <slob_free+0x66>
		if (cur >= cur->next && (b > cur || b < cur->next))
c0105e86:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105e89:	8b 40 04             	mov    0x4(%eax),%eax
c0105e8c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0105e8f:	77 13                	ja     c0105ea4 <slob_free+0x5d>
c0105e91:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105e94:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0105e97:	77 27                	ja     c0105ec0 <slob_free+0x79>
c0105e99:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105e9c:	8b 40 04             	mov    0x4(%eax),%eax
c0105e9f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0105ea2:	77 1c                	ja     c0105ec0 <slob_free+0x79>
	if (size)
		b->units = SLOB_UNITS(size);

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0105ea4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ea7:	8b 40 04             	mov    0x4(%eax),%eax
c0105eaa:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105ead:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105eb0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0105eb3:	76 d1                	jbe    c0105e86 <slob_free+0x3f>
c0105eb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105eb8:	8b 40 04             	mov    0x4(%eax),%eax
c0105ebb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0105ebe:	76 c6                	jbe    c0105e86 <slob_free+0x3f>
		if (cur >= cur->next && (b > cur || b < cur->next))
			break;

	if (b + b->units == cur->next) {
c0105ec0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105ec3:	8b 00                	mov    (%eax),%eax
c0105ec5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0105ecc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105ecf:	01 c2                	add    %eax,%edx
c0105ed1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ed4:	8b 40 04             	mov    0x4(%eax),%eax
c0105ed7:	39 c2                	cmp    %eax,%edx
c0105ed9:	75 25                	jne    c0105f00 <slob_free+0xb9>
		b->units += cur->next->units;
c0105edb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105ede:	8b 10                	mov    (%eax),%edx
c0105ee0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ee3:	8b 40 04             	mov    0x4(%eax),%eax
c0105ee6:	8b 00                	mov    (%eax),%eax
c0105ee8:	01 c2                	add    %eax,%edx
c0105eea:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105eed:	89 10                	mov    %edx,(%eax)
		b->next = cur->next->next;
c0105eef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ef2:	8b 40 04             	mov    0x4(%eax),%eax
c0105ef5:	8b 50 04             	mov    0x4(%eax),%edx
c0105ef8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105efb:	89 50 04             	mov    %edx,0x4(%eax)
c0105efe:	eb 0c                	jmp    c0105f0c <slob_free+0xc5>
	} else
		b->next = cur->next;
c0105f00:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f03:	8b 50 04             	mov    0x4(%eax),%edx
c0105f06:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105f09:	89 50 04             	mov    %edx,0x4(%eax)

	if (cur + cur->units == b) {
c0105f0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f0f:	8b 00                	mov    (%eax),%eax
c0105f11:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0105f18:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f1b:	01 d0                	add    %edx,%eax
c0105f1d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0105f20:	75 1f                	jne    c0105f41 <slob_free+0xfa>
		cur->units += b->units;
c0105f22:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f25:	8b 10                	mov    (%eax),%edx
c0105f27:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105f2a:	8b 00                	mov    (%eax),%eax
c0105f2c:	01 c2                	add    %eax,%edx
c0105f2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f31:	89 10                	mov    %edx,(%eax)
		cur->next = b->next;
c0105f33:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105f36:	8b 50 04             	mov    0x4(%eax),%edx
c0105f39:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f3c:	89 50 04             	mov    %edx,0x4(%eax)
c0105f3f:	eb 09                	jmp    c0105f4a <slob_free+0x103>
	} else
		cur->next = b;
c0105f41:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f44:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0105f47:	89 50 04             	mov    %edx,0x4(%eax)

	slobfree = cur;
c0105f4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f4d:	a3 08 4a 13 c0       	mov    %eax,0xc0134a08

	spin_unlock_irqrestore(&slob_lock, flags);
c0105f52:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105f55:	89 04 24             	mov    %eax,(%esp)
c0105f58:	e8 78 fb ff ff       	call   c0105ad5 <__intr_restore>
}
c0105f5d:	c9                   	leave  
c0105f5e:	c3                   	ret    

c0105f5f <check_slab>:



void check_slab(void) {
c0105f5f:	55                   	push   %ebp
c0105f60:	89 e5                	mov    %esp,%ebp
c0105f62:	83 ec 18             	sub    $0x18,%esp
  cprintf("check_slab() success\n");
c0105f65:	c7 04 24 2a fc 10 c0 	movl   $0xc010fc2a,(%esp)
c0105f6c:	e8 6a b8 ff ff       	call   c01017db <cprintf>
}
c0105f71:	c9                   	leave  
c0105f72:	c3                   	ret    

c0105f73 <slab_init>:

void
slab_init(void) {
c0105f73:	55                   	push   %ebp
c0105f74:	89 e5                	mov    %esp,%ebp
c0105f76:	83 ec 18             	sub    $0x18,%esp
  cprintf("use SLOB allocator\n");
c0105f79:	c7 04 24 40 fc 10 c0 	movl   $0xc010fc40,(%esp)
c0105f80:	e8 56 b8 ff ff       	call   c01017db <cprintf>
  check_slab();
c0105f85:	e8 d5 ff ff ff       	call   c0105f5f <check_slab>
}
c0105f8a:	c9                   	leave  
c0105f8b:	c3                   	ret    

c0105f8c <kmalloc_init>:

inline void 
kmalloc_init(void) {
c0105f8c:	55                   	push   %ebp
c0105f8d:	89 e5                	mov    %esp,%ebp
c0105f8f:	83 ec 18             	sub    $0x18,%esp
    slab_init();
c0105f92:	e8 dc ff ff ff       	call   c0105f73 <slab_init>
    cprintf("kmalloc_init() succeeded!\n");
c0105f97:	c7 04 24 54 fc 10 c0 	movl   $0xc010fc54,(%esp)
c0105f9e:	e8 38 b8 ff ff       	call   c01017db <cprintf>
}
c0105fa3:	c9                   	leave  
c0105fa4:	c3                   	ret    

c0105fa5 <slab_allocated>:

size_t
slab_allocated(void) {
c0105fa5:	55                   	push   %ebp
c0105fa6:	89 e5                	mov    %esp,%ebp
  return 0;
c0105fa8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105fad:	5d                   	pop    %ebp
c0105fae:	c3                   	ret    

c0105faf <kallocated>:

size_t
kallocated(void) {
c0105faf:	55                   	push   %ebp
c0105fb0:	89 e5                	mov    %esp,%ebp
   return slab_allocated();
c0105fb2:	e8 ee ff ff ff       	call   c0105fa5 <slab_allocated>
}
c0105fb7:	5d                   	pop    %ebp
c0105fb8:	c3                   	ret    

c0105fb9 <find_order>:

static int find_order(int size)
{
c0105fb9:	55                   	push   %ebp
c0105fba:	89 e5                	mov    %esp,%ebp
c0105fbc:	83 ec 10             	sub    $0x10,%esp
	int order = 0;
c0105fbf:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for ( ; size > 4096 ; size >>=1)
c0105fc6:	eb 07                	jmp    c0105fcf <find_order+0x16>
		order++;
c0105fc8:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
}

static int find_order(int size)
{
	int order = 0;
	for ( ; size > 4096 ; size >>=1)
c0105fcc:	d1 7d 08             	sarl   0x8(%ebp)
c0105fcf:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c0105fd6:	7f f0                	jg     c0105fc8 <find_order+0xf>
		order++;
	return order;
c0105fd8:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0105fdb:	c9                   	leave  
c0105fdc:	c3                   	ret    

c0105fdd <__kmalloc>:

static void *__kmalloc(size_t size, gfp_t gfp)
{
c0105fdd:	55                   	push   %ebp
c0105fde:	89 e5                	mov    %esp,%ebp
c0105fe0:	83 ec 28             	sub    $0x28,%esp
	slob_t *m;
	bigblock_t *bb;
	unsigned long flags;

	if (size < PAGE_SIZE - SLOB_UNIT) {
c0105fe3:	81 7d 08 f7 0f 00 00 	cmpl   $0xff7,0x8(%ebp)
c0105fea:	77 38                	ja     c0106024 <__kmalloc+0x47>
		m = slob_alloc(size + SLOB_UNIT, gfp, 0);
c0105fec:	8b 45 08             	mov    0x8(%ebp),%eax
c0105fef:	8d 50 08             	lea    0x8(%eax),%edx
c0105ff2:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105ff9:	00 
c0105ffa:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105ffd:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106001:	89 14 24             	mov    %edx,(%esp)
c0106004:	e8 69 fc ff ff       	call   c0105c72 <slob_alloc>
c0106009:	89 45 f4             	mov    %eax,-0xc(%ebp)
		return m ? (void *)(m + 1) : 0;
c010600c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106010:	74 08                	je     c010601a <__kmalloc+0x3d>
c0106012:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106015:	83 c0 08             	add    $0x8,%eax
c0106018:	eb 05                	jmp    c010601f <__kmalloc+0x42>
c010601a:	b8 00 00 00 00       	mov    $0x0,%eax
c010601f:	e9 a6 00 00 00       	jmp    c01060ca <__kmalloc+0xed>
	}

	bb = slob_alloc(sizeof(bigblock_t), gfp, 0);
c0106024:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010602b:	00 
c010602c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010602f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106033:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c010603a:	e8 33 fc ff ff       	call   c0105c72 <slob_alloc>
c010603f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!bb)
c0106042:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106046:	75 07                	jne    c010604f <__kmalloc+0x72>
		return 0;
c0106048:	b8 00 00 00 00       	mov    $0x0,%eax
c010604d:	eb 7b                	jmp    c01060ca <__kmalloc+0xed>

	bb->order = find_order(size);
c010604f:	8b 45 08             	mov    0x8(%ebp),%eax
c0106052:	89 04 24             	mov    %eax,(%esp)
c0106055:	e8 5f ff ff ff       	call   c0105fb9 <find_order>
c010605a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010605d:	89 02                	mov    %eax,(%edx)
	bb->pages = (void *)__slob_get_free_pages(gfp, bb->order);
c010605f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106062:	8b 00                	mov    (%eax),%eax
c0106064:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106068:	8b 45 0c             	mov    0xc(%ebp),%eax
c010606b:	89 04 24             	mov    %eax,(%esp)
c010606e:	e8 92 fb ff ff       	call   c0105c05 <__slob_get_free_pages>
c0106073:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0106076:	89 42 04             	mov    %eax,0x4(%edx)

	if (bb->pages) {
c0106079:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010607c:	8b 40 04             	mov    0x4(%eax),%eax
c010607f:	85 c0                	test   %eax,%eax
c0106081:	74 2f                	je     c01060b2 <__kmalloc+0xd5>
		spin_lock_irqsave(&block_lock, flags);
c0106083:	e8 23 fa ff ff       	call   c0105aab <__intr_save>
c0106088:	89 45 ec             	mov    %eax,-0x14(%ebp)
		bb->next = bigblocks;
c010608b:	8b 15 84 63 1c c0    	mov    0xc01c6384,%edx
c0106091:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106094:	89 50 08             	mov    %edx,0x8(%eax)
		bigblocks = bb;
c0106097:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010609a:	a3 84 63 1c c0       	mov    %eax,0xc01c6384
		spin_unlock_irqrestore(&block_lock, flags);
c010609f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01060a2:	89 04 24             	mov    %eax,(%esp)
c01060a5:	e8 2b fa ff ff       	call   c0105ad5 <__intr_restore>
		return bb->pages;
c01060aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01060ad:	8b 40 04             	mov    0x4(%eax),%eax
c01060b0:	eb 18                	jmp    c01060ca <__kmalloc+0xed>
	}

	slob_free(bb, sizeof(bigblock_t));
c01060b2:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
c01060b9:	00 
c01060ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01060bd:	89 04 24             	mov    %eax,(%esp)
c01060c0:	e8 82 fd ff ff       	call   c0105e47 <slob_free>
	return 0;
c01060c5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01060ca:	c9                   	leave  
c01060cb:	c3                   	ret    

c01060cc <kmalloc>:

void *
kmalloc(size_t size)
{
c01060cc:	55                   	push   %ebp
c01060cd:	89 e5                	mov    %esp,%ebp
c01060cf:	83 ec 18             	sub    $0x18,%esp
  return __kmalloc(size, 0);
c01060d2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01060d9:	00 
c01060da:	8b 45 08             	mov    0x8(%ebp),%eax
c01060dd:	89 04 24             	mov    %eax,(%esp)
c01060e0:	e8 f8 fe ff ff       	call   c0105fdd <__kmalloc>
}
c01060e5:	c9                   	leave  
c01060e6:	c3                   	ret    

c01060e7 <kfree>:


void kfree(void *block)
{
c01060e7:	55                   	push   %ebp
c01060e8:	89 e5                	mov    %esp,%ebp
c01060ea:	83 ec 28             	sub    $0x28,%esp
	bigblock_t *bb, **last = &bigblocks;
c01060ed:	c7 45 f0 84 63 1c c0 	movl   $0xc01c6384,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c01060f4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01060f8:	75 05                	jne    c01060ff <kfree+0x18>
		return;
c01060fa:	e9 a2 00 00 00       	jmp    c01061a1 <kfree+0xba>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c01060ff:	8b 45 08             	mov    0x8(%ebp),%eax
c0106102:	25 ff 0f 00 00       	and    $0xfff,%eax
c0106107:	85 c0                	test   %eax,%eax
c0106109:	75 7f                	jne    c010618a <kfree+0xa3>
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
c010610b:	e8 9b f9 ff ff       	call   c0105aab <__intr_save>
c0106110:	89 45 ec             	mov    %eax,-0x14(%ebp)
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c0106113:	a1 84 63 1c c0       	mov    0xc01c6384,%eax
c0106118:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010611b:	eb 5c                	jmp    c0106179 <kfree+0x92>
			if (bb->pages == block) {
c010611d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106120:	8b 40 04             	mov    0x4(%eax),%eax
c0106123:	3b 45 08             	cmp    0x8(%ebp),%eax
c0106126:	75 3f                	jne    c0106167 <kfree+0x80>
				*last = bb->next;
c0106128:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010612b:	8b 50 08             	mov    0x8(%eax),%edx
c010612e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106131:	89 10                	mov    %edx,(%eax)
				spin_unlock_irqrestore(&block_lock, flags);
c0106133:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106136:	89 04 24             	mov    %eax,(%esp)
c0106139:	e8 97 f9 ff ff       	call   c0105ad5 <__intr_restore>
				__slob_free_pages((unsigned long)block, bb->order);
c010613e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106141:	8b 10                	mov    (%eax),%edx
c0106143:	8b 45 08             	mov    0x8(%ebp),%eax
c0106146:	89 54 24 04          	mov    %edx,0x4(%esp)
c010614a:	89 04 24             	mov    %eax,(%esp)
c010614d:	e8 ec fa ff ff       	call   c0105c3e <__slob_free_pages>
				slob_free(bb, sizeof(bigblock_t));
c0106152:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
c0106159:	00 
c010615a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010615d:	89 04 24             	mov    %eax,(%esp)
c0106160:	e8 e2 fc ff ff       	call   c0105e47 <slob_free>
				return;
c0106165:	eb 3a                	jmp    c01061a1 <kfree+0xba>
		return;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c0106167:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010616a:	83 c0 08             	add    $0x8,%eax
c010616d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106170:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106173:	8b 40 08             	mov    0x8(%eax),%eax
c0106176:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106179:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010617d:	75 9e                	jne    c010611d <kfree+0x36>
				__slob_free_pages((unsigned long)block, bb->order);
				slob_free(bb, sizeof(bigblock_t));
				return;
			}
		}
		spin_unlock_irqrestore(&block_lock, flags);
c010617f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106182:	89 04 24             	mov    %eax,(%esp)
c0106185:	e8 4b f9 ff ff       	call   c0105ad5 <__intr_restore>
	}

	slob_free((slob_t *)block - 1, 0);
c010618a:	8b 45 08             	mov    0x8(%ebp),%eax
c010618d:	83 e8 08             	sub    $0x8,%eax
c0106190:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0106197:	00 
c0106198:	89 04 24             	mov    %eax,(%esp)
c010619b:	e8 a7 fc ff ff       	call   c0105e47 <slob_free>
	return;
c01061a0:	90                   	nop
}
c01061a1:	c9                   	leave  
c01061a2:	c3                   	ret    

c01061a3 <ksize>:


unsigned int ksize(const void *block)
{
c01061a3:	55                   	push   %ebp
c01061a4:	89 e5                	mov    %esp,%ebp
c01061a6:	83 ec 28             	sub    $0x28,%esp
	bigblock_t *bb;
	unsigned long flags;

	if (!block)
c01061a9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01061ad:	75 07                	jne    c01061b6 <ksize+0x13>
		return 0;
c01061af:	b8 00 00 00 00       	mov    $0x0,%eax
c01061b4:	eb 6b                	jmp    c0106221 <ksize+0x7e>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c01061b6:	8b 45 08             	mov    0x8(%ebp),%eax
c01061b9:	25 ff 0f 00 00       	and    $0xfff,%eax
c01061be:	85 c0                	test   %eax,%eax
c01061c0:	75 54                	jne    c0106216 <ksize+0x73>
		spin_lock_irqsave(&block_lock, flags);
c01061c2:	e8 e4 f8 ff ff       	call   c0105aab <__intr_save>
c01061c7:	89 45 f0             	mov    %eax,-0x10(%ebp)
		for (bb = bigblocks; bb; bb = bb->next)
c01061ca:	a1 84 63 1c c0       	mov    0xc01c6384,%eax
c01061cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01061d2:	eb 31                	jmp    c0106205 <ksize+0x62>
			if (bb->pages == block) {
c01061d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01061d7:	8b 40 04             	mov    0x4(%eax),%eax
c01061da:	3b 45 08             	cmp    0x8(%ebp),%eax
c01061dd:	75 1d                	jne    c01061fc <ksize+0x59>
				spin_unlock_irqrestore(&slob_lock, flags);
c01061df:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01061e2:	89 04 24             	mov    %eax,(%esp)
c01061e5:	e8 eb f8 ff ff       	call   c0105ad5 <__intr_restore>
				return PAGE_SIZE << bb->order;
c01061ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01061ed:	8b 00                	mov    (%eax),%eax
c01061ef:	ba 00 10 00 00       	mov    $0x1000,%edx
c01061f4:	89 c1                	mov    %eax,%ecx
c01061f6:	d3 e2                	shl    %cl,%edx
c01061f8:	89 d0                	mov    %edx,%eax
c01061fa:	eb 25                	jmp    c0106221 <ksize+0x7e>
	if (!block)
		return 0;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; bb = bb->next)
c01061fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01061ff:	8b 40 08             	mov    0x8(%eax),%eax
c0106202:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106205:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106209:	75 c9                	jne    c01061d4 <ksize+0x31>
			if (bb->pages == block) {
				spin_unlock_irqrestore(&slob_lock, flags);
				return PAGE_SIZE << bb->order;
			}
		spin_unlock_irqrestore(&block_lock, flags);
c010620b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010620e:	89 04 24             	mov    %eax,(%esp)
c0106211:	e8 bf f8 ff ff       	call   c0105ad5 <__intr_restore>
	}

	return ((slob_t *)block - 1)->units * SLOB_UNIT;
c0106216:	8b 45 08             	mov    0x8(%ebp),%eax
c0106219:	83 e8 08             	sub    $0x8,%eax
c010621c:	8b 00                	mov    (%eax),%eax
c010621e:	c1 e0 03             	shl    $0x3,%eax
}
c0106221:	c9                   	leave  
c0106222:	c3                   	ret    

c0106223 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0106223:	55                   	push   %ebp
c0106224:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0106226:	8b 55 08             	mov    0x8(%ebp),%edx
c0106229:	a1 f0 84 1c c0       	mov    0xc01c84f0,%eax
c010622e:	29 c2                	sub    %eax,%edx
c0106230:	89 d0                	mov    %edx,%eax
c0106232:	c1 f8 02             	sar    $0x2,%eax
c0106235:	69 c0 39 8e e3 38    	imul   $0x38e38e39,%eax,%eax
}
c010623b:	5d                   	pop    %ebp
c010623c:	c3                   	ret    

c010623d <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010623d:	55                   	push   %ebp
c010623e:	89 e5                	mov    %esp,%ebp
c0106240:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c0106243:	8b 45 08             	mov    0x8(%ebp),%eax
c0106246:	89 04 24             	mov    %eax,(%esp)
c0106249:	e8 d5 ff ff ff       	call   c0106223 <page2ppn>
c010624e:	c1 e0 0c             	shl    $0xc,%eax
}
c0106251:	c9                   	leave  
c0106252:	c3                   	ret    

c0106253 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0106253:	55                   	push   %ebp
c0106254:	89 e5                	mov    %esp,%ebp
c0106256:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0106259:	8b 45 08             	mov    0x8(%ebp),%eax
c010625c:	c1 e8 0c             	shr    $0xc,%eax
c010625f:	89 c2                	mov    %eax,%edx
c0106261:	a1 a0 63 1c c0       	mov    0xc01c63a0,%eax
c0106266:	39 c2                	cmp    %eax,%edx
c0106268:	72 1c                	jb     c0106286 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c010626a:	c7 44 24 08 70 fc 10 	movl   $0xc010fc70,0x8(%esp)
c0106271:	c0 
c0106272:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0106279:	00 
c010627a:	c7 04 24 8f fc 10 c0 	movl   $0xc010fc8f,(%esp)
c0106281:	e8 d7 bf ff ff       	call   c010225d <__panic>
    }
    return &pages[PPN(pa)];
c0106286:	8b 0d f0 84 1c c0    	mov    0xc01c84f0,%ecx
c010628c:	8b 45 08             	mov    0x8(%ebp),%eax
c010628f:	c1 e8 0c             	shr    $0xc,%eax
c0106292:	89 c2                	mov    %eax,%edx
c0106294:	89 d0                	mov    %edx,%eax
c0106296:	c1 e0 03             	shl    $0x3,%eax
c0106299:	01 d0                	add    %edx,%eax
c010629b:	c1 e0 02             	shl    $0x2,%eax
c010629e:	01 c8                	add    %ecx,%eax
}
c01062a0:	c9                   	leave  
c01062a1:	c3                   	ret    

c01062a2 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c01062a2:	55                   	push   %ebp
c01062a3:	89 e5                	mov    %esp,%ebp
c01062a5:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c01062a8:	8b 45 08             	mov    0x8(%ebp),%eax
c01062ab:	89 04 24             	mov    %eax,(%esp)
c01062ae:	e8 8a ff ff ff       	call   c010623d <page2pa>
c01062b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01062b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01062b9:	c1 e8 0c             	shr    $0xc,%eax
c01062bc:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01062bf:	a1 a0 63 1c c0       	mov    0xc01c63a0,%eax
c01062c4:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c01062c7:	72 23                	jb     c01062ec <page2kva+0x4a>
c01062c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01062cc:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01062d0:	c7 44 24 08 a0 fc 10 	movl   $0xc010fca0,0x8(%esp)
c01062d7:	c0 
c01062d8:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c01062df:	00 
c01062e0:	c7 04 24 8f fc 10 c0 	movl   $0xc010fc8f,(%esp)
c01062e7:	e8 71 bf ff ff       	call   c010225d <__panic>
c01062ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01062ef:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c01062f4:	c9                   	leave  
c01062f5:	c3                   	ret    

c01062f6 <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c01062f6:	55                   	push   %ebp
c01062f7:	89 e5                	mov    %esp,%ebp
c01062f9:	83 ec 18             	sub    $0x18,%esp
    if (!(pte & PTE_P)) {
c01062fc:	8b 45 08             	mov    0x8(%ebp),%eax
c01062ff:	83 e0 01             	and    $0x1,%eax
c0106302:	85 c0                	test   %eax,%eax
c0106304:	75 1c                	jne    c0106322 <pte2page+0x2c>
        panic("pte2page called with invalid pte");
c0106306:	c7 44 24 08 c4 fc 10 	movl   $0xc010fcc4,0x8(%esp)
c010630d:	c0 
c010630e:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c0106315:	00 
c0106316:	c7 04 24 8f fc 10 c0 	movl   $0xc010fc8f,(%esp)
c010631d:	e8 3b bf ff ff       	call   c010225d <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c0106322:	8b 45 08             	mov    0x8(%ebp),%eax
c0106325:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010632a:	89 04 24             	mov    %eax,(%esp)
c010632d:	e8 21 ff ff ff       	call   c0106253 <pa2page>
}
c0106332:	c9                   	leave  
c0106333:	c3                   	ret    

c0106334 <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c0106334:	55                   	push   %ebp
c0106335:	89 e5                	mov    %esp,%ebp
c0106337:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c010633a:	8b 45 08             	mov    0x8(%ebp),%eax
c010633d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106342:	89 04 24             	mov    %eax,(%esp)
c0106345:	e8 09 ff ff ff       	call   c0106253 <pa2page>
}
c010634a:	c9                   	leave  
c010634b:	c3                   	ret    

c010634c <page_ref>:

static inline int
page_ref(struct Page *page) {
c010634c:	55                   	push   %ebp
c010634d:	89 e5                	mov    %esp,%ebp
    return page->ref;
c010634f:	8b 45 08             	mov    0x8(%ebp),%eax
c0106352:	8b 00                	mov    (%eax),%eax
}
c0106354:	5d                   	pop    %ebp
c0106355:	c3                   	ret    

c0106356 <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c0106356:	55                   	push   %ebp
c0106357:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c0106359:	8b 45 08             	mov    0x8(%ebp),%eax
c010635c:	8b 55 0c             	mov    0xc(%ebp),%edx
c010635f:	89 10                	mov    %edx,(%eax)
}
c0106361:	5d                   	pop    %ebp
c0106362:	c3                   	ret    

c0106363 <page_ref_inc>:

static inline int
page_ref_inc(struct Page *page) {
c0106363:	55                   	push   %ebp
c0106364:	89 e5                	mov    %esp,%ebp
    page->ref += 1;
c0106366:	8b 45 08             	mov    0x8(%ebp),%eax
c0106369:	8b 00                	mov    (%eax),%eax
c010636b:	8d 50 01             	lea    0x1(%eax),%edx
c010636e:	8b 45 08             	mov    0x8(%ebp),%eax
c0106371:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0106373:	8b 45 08             	mov    0x8(%ebp),%eax
c0106376:	8b 00                	mov    (%eax),%eax
}
c0106378:	5d                   	pop    %ebp
c0106379:	c3                   	ret    

c010637a <page_ref_dec>:

static inline int
page_ref_dec(struct Page *page) {
c010637a:	55                   	push   %ebp
c010637b:	89 e5                	mov    %esp,%ebp
    page->ref -= 1;
c010637d:	8b 45 08             	mov    0x8(%ebp),%eax
c0106380:	8b 00                	mov    (%eax),%eax
c0106382:	8d 50 ff             	lea    -0x1(%eax),%edx
c0106385:	8b 45 08             	mov    0x8(%ebp),%eax
c0106388:	89 10                	mov    %edx,(%eax)
    return page->ref;
c010638a:	8b 45 08             	mov    0x8(%ebp),%eax
c010638d:	8b 00                	mov    (%eax),%eax
}
c010638f:	5d                   	pop    %ebp
c0106390:	c3                   	ret    

c0106391 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0106391:	55                   	push   %ebp
c0106392:	89 e5                	mov    %esp,%ebp
c0106394:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0106397:	9c                   	pushf  
c0106398:	58                   	pop    %eax
c0106399:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010639c:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010639f:	25 00 02 00 00       	and    $0x200,%eax
c01063a4:	85 c0                	test   %eax,%eax
c01063a6:	74 0c                	je     c01063b4 <__intr_save+0x23>
        intr_disable();
c01063a8:	e8 08 d1 ff ff       	call   c01034b5 <intr_disable>
        return 1;
c01063ad:	b8 01 00 00 00       	mov    $0x1,%eax
c01063b2:	eb 05                	jmp    c01063b9 <__intr_save+0x28>
    }
    return 0;
c01063b4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01063b9:	c9                   	leave  
c01063ba:	c3                   	ret    

c01063bb <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c01063bb:	55                   	push   %ebp
c01063bc:	89 e5                	mov    %esp,%ebp
c01063be:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c01063c1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01063c5:	74 05                	je     c01063cc <__intr_restore+0x11>
        intr_enable();
c01063c7:	e8 e3 d0 ff ff       	call   c01034af <intr_enable>
    }
}
c01063cc:	c9                   	leave  
c01063cd:	c3                   	ret    

c01063ce <lgdt>:
/* *
 * lgdt - load the global descriptor table register and reset the
 * data/code segement registers for kernel.
 * */
static inline void
lgdt(struct pseudodesc *pd) {
c01063ce:	55                   	push   %ebp
c01063cf:	89 e5                	mov    %esp,%ebp
    asm volatile ("lgdt (%0)" :: "r" (pd));
c01063d1:	8b 45 08             	mov    0x8(%ebp),%eax
c01063d4:	0f 01 10             	lgdtl  (%eax)
    asm volatile ("movw %%ax, %%gs" :: "a" (USER_DS));
c01063d7:	b8 23 00 00 00       	mov    $0x23,%eax
c01063dc:	8e e8                	mov    %eax,%gs
    asm volatile ("movw %%ax, %%fs" :: "a" (USER_DS));
c01063de:	b8 23 00 00 00       	mov    $0x23,%eax
c01063e3:	8e e0                	mov    %eax,%fs
    asm volatile ("movw %%ax, %%es" :: "a" (KERNEL_DS));
c01063e5:	b8 10 00 00 00       	mov    $0x10,%eax
c01063ea:	8e c0                	mov    %eax,%es
    asm volatile ("movw %%ax, %%ds" :: "a" (KERNEL_DS));
c01063ec:	b8 10 00 00 00       	mov    $0x10,%eax
c01063f1:	8e d8                	mov    %eax,%ds
    asm volatile ("movw %%ax, %%ss" :: "a" (KERNEL_DS));
c01063f3:	b8 10 00 00 00       	mov    $0x10,%eax
c01063f8:	8e d0                	mov    %eax,%ss
    // reload cs
    asm volatile ("ljmp %0, $1f\n 1:\n" :: "i" (KERNEL_CS));
c01063fa:	ea 01 64 10 c0 08 00 	ljmp   $0x8,$0xc0106401
}
c0106401:	5d                   	pop    %ebp
c0106402:	c3                   	ret    

c0106403 <load_esp0>:
 * load_esp0 - change the ESP0 in default task state segment,
 * so that we can use different kernel stack when we trap frame
 * user to kernel.
 * */
void
load_esp0(uintptr_t esp0) {
c0106403:	55                   	push   %ebp
c0106404:	89 e5                	mov    %esp,%ebp
    ts.ts_esp0 = esp0;
c0106406:	8b 45 08             	mov    0x8(%ebp),%eax
c0106409:	a3 c4 63 1c c0       	mov    %eax,0xc01c63c4
}
c010640e:	5d                   	pop    %ebp
c010640f:	c3                   	ret    

c0106410 <gdt_init>:

/* gdt_init - initialize the default GDT and TSS */
static void
gdt_init(void) {
c0106410:	55                   	push   %ebp
c0106411:	89 e5                	mov    %esp,%ebp
c0106413:	83 ec 14             	sub    $0x14,%esp
    // set boot kernel stack and default SS0
    load_esp0((uintptr_t)bootstacktop);
c0106416:	b8 00 40 13 c0       	mov    $0xc0134000,%eax
c010641b:	89 04 24             	mov    %eax,(%esp)
c010641e:	e8 e0 ff ff ff       	call   c0106403 <load_esp0>
    ts.ts_ss0 = KERNEL_DS;
c0106423:	66 c7 05 c8 63 1c c0 	movw   $0x10,0xc01c63c8
c010642a:	10 00 

    // initialize the TSS filed of the gdt
    gdt[SEG_TSS] = SEGTSS(STS_T32A, (uintptr_t)&ts, sizeof(ts), DPL_KERNEL);
c010642c:	66 c7 05 48 4a 13 c0 	movw   $0x68,0xc0134a48
c0106433:	68 00 
c0106435:	b8 c0 63 1c c0       	mov    $0xc01c63c0,%eax
c010643a:	66 a3 4a 4a 13 c0    	mov    %ax,0xc0134a4a
c0106440:	b8 c0 63 1c c0       	mov    $0xc01c63c0,%eax
c0106445:	c1 e8 10             	shr    $0x10,%eax
c0106448:	a2 4c 4a 13 c0       	mov    %al,0xc0134a4c
c010644d:	0f b6 05 4d 4a 13 c0 	movzbl 0xc0134a4d,%eax
c0106454:	83 e0 f0             	and    $0xfffffff0,%eax
c0106457:	83 c8 09             	or     $0x9,%eax
c010645a:	a2 4d 4a 13 c0       	mov    %al,0xc0134a4d
c010645f:	0f b6 05 4d 4a 13 c0 	movzbl 0xc0134a4d,%eax
c0106466:	83 e0 ef             	and    $0xffffffef,%eax
c0106469:	a2 4d 4a 13 c0       	mov    %al,0xc0134a4d
c010646e:	0f b6 05 4d 4a 13 c0 	movzbl 0xc0134a4d,%eax
c0106475:	83 e0 9f             	and    $0xffffff9f,%eax
c0106478:	a2 4d 4a 13 c0       	mov    %al,0xc0134a4d
c010647d:	0f b6 05 4d 4a 13 c0 	movzbl 0xc0134a4d,%eax
c0106484:	83 c8 80             	or     $0xffffff80,%eax
c0106487:	a2 4d 4a 13 c0       	mov    %al,0xc0134a4d
c010648c:	0f b6 05 4e 4a 13 c0 	movzbl 0xc0134a4e,%eax
c0106493:	83 e0 f0             	and    $0xfffffff0,%eax
c0106496:	a2 4e 4a 13 c0       	mov    %al,0xc0134a4e
c010649b:	0f b6 05 4e 4a 13 c0 	movzbl 0xc0134a4e,%eax
c01064a2:	83 e0 ef             	and    $0xffffffef,%eax
c01064a5:	a2 4e 4a 13 c0       	mov    %al,0xc0134a4e
c01064aa:	0f b6 05 4e 4a 13 c0 	movzbl 0xc0134a4e,%eax
c01064b1:	83 e0 df             	and    $0xffffffdf,%eax
c01064b4:	a2 4e 4a 13 c0       	mov    %al,0xc0134a4e
c01064b9:	0f b6 05 4e 4a 13 c0 	movzbl 0xc0134a4e,%eax
c01064c0:	83 c8 40             	or     $0x40,%eax
c01064c3:	a2 4e 4a 13 c0       	mov    %al,0xc0134a4e
c01064c8:	0f b6 05 4e 4a 13 c0 	movzbl 0xc0134a4e,%eax
c01064cf:	83 e0 7f             	and    $0x7f,%eax
c01064d2:	a2 4e 4a 13 c0       	mov    %al,0xc0134a4e
c01064d7:	b8 c0 63 1c c0       	mov    $0xc01c63c0,%eax
c01064dc:	c1 e8 18             	shr    $0x18,%eax
c01064df:	a2 4f 4a 13 c0       	mov    %al,0xc0134a4f

    // reload all segment registers
    lgdt(&gdt_pd);
c01064e4:	c7 04 24 50 4a 13 c0 	movl   $0xc0134a50,(%esp)
c01064eb:	e8 de fe ff ff       	call   c01063ce <lgdt>
c01064f0:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
    asm volatile ("cli" ::: "memory");
}

static inline void
ltr(uint16_t sel) {
    asm volatile ("ltr %0" :: "r" (sel) : "memory");
c01064f6:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c01064fa:	0f 00 d8             	ltr    %ax

    // load the TSS
    ltr(GD_TSS);
}
c01064fd:	c9                   	leave  
c01064fe:	c3                   	ret    

c01064ff <init_pmm_manager>:

//init_pmm_manager - initialize a pmm_manager instance
static void
init_pmm_manager(void) {
c01064ff:	55                   	push   %ebp
c0106500:	89 e5                	mov    %esp,%ebp
c0106502:	83 ec 18             	sub    $0x18,%esp
    pmm_manager = &default_pmm_manager;
c0106505:	c7 05 e8 84 1c c0 50 	movl   $0xc010fb50,0xc01c84e8
c010650c:	fb 10 c0 
    cprintf("memory management: %s\n", pmm_manager->name);
c010650f:	a1 e8 84 1c c0       	mov    0xc01c84e8,%eax
c0106514:	8b 00                	mov    (%eax),%eax
c0106516:	89 44 24 04          	mov    %eax,0x4(%esp)
c010651a:	c7 04 24 f0 fc 10 c0 	movl   $0xc010fcf0,(%esp)
c0106521:	e8 b5 b2 ff ff       	call   c01017db <cprintf>
    pmm_manager->init();
c0106526:	a1 e8 84 1c c0       	mov    0xc01c84e8,%eax
c010652b:	8b 40 04             	mov    0x4(%eax),%eax
c010652e:	ff d0                	call   *%eax
}
c0106530:	c9                   	leave  
c0106531:	c3                   	ret    

c0106532 <init_memmap>:

//init_memmap - call pmm->init_memmap to build Page struct for free memory  
static void
init_memmap(struct Page *base, size_t n) {
c0106532:	55                   	push   %ebp
c0106533:	89 e5                	mov    %esp,%ebp
c0106535:	83 ec 18             	sub    $0x18,%esp
    pmm_manager->init_memmap(base, n);
c0106538:	a1 e8 84 1c c0       	mov    0xc01c84e8,%eax
c010653d:	8b 40 08             	mov    0x8(%eax),%eax
c0106540:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106543:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106547:	8b 55 08             	mov    0x8(%ebp),%edx
c010654a:	89 14 24             	mov    %edx,(%esp)
c010654d:	ff d0                	call   *%eax
}
c010654f:	c9                   	leave  
c0106550:	c3                   	ret    

c0106551 <alloc_pages>:

//alloc_pages - call pmm->alloc_pages to allocate a continuous n*PAGESIZE memory 
struct Page *
alloc_pages(size_t n) {
c0106551:	55                   	push   %ebp
c0106552:	89 e5                	mov    %esp,%ebp
c0106554:	83 ec 28             	sub    $0x28,%esp
    struct Page *page=NULL;
c0106557:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    
    while (1)
    {
         local_intr_save(intr_flag);
c010655e:	e8 2e fe ff ff       	call   c0106391 <__intr_save>
c0106563:	89 45 f0             	mov    %eax,-0x10(%ebp)
         {
              page = pmm_manager->alloc_pages(n);
c0106566:	a1 e8 84 1c c0       	mov    0xc01c84e8,%eax
c010656b:	8b 40 0c             	mov    0xc(%eax),%eax
c010656e:	8b 55 08             	mov    0x8(%ebp),%edx
c0106571:	89 14 24             	mov    %edx,(%esp)
c0106574:	ff d0                	call   *%eax
c0106576:	89 45 f4             	mov    %eax,-0xc(%ebp)
         }
         local_intr_restore(intr_flag);
c0106579:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010657c:	89 04 24             	mov    %eax,(%esp)
c010657f:	e8 37 fe ff ff       	call   c01063bb <__intr_restore>

         if (page != NULL || n > 1 || swap_init_ok == 0) break;
c0106584:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106588:	75 2d                	jne    c01065b7 <alloc_pages+0x66>
c010658a:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c010658e:	77 27                	ja     c01065b7 <alloc_pages+0x66>
c0106590:	a1 2c 64 1c c0       	mov    0xc01c642c,%eax
c0106595:	85 c0                	test   %eax,%eax
c0106597:	74 1e                	je     c01065b7 <alloc_pages+0x66>
         
         extern struct mm_struct *check_mm_struct;
         //cprintf("page %x, call swap_out in alloc_pages %d\n",page, n);
         swap_out(check_mm_struct, n, 0);
c0106599:	8b 55 08             	mov    0x8(%ebp),%edx
c010659c:	a1 cc 85 1c c0       	mov    0xc01c85cc,%eax
c01065a1:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01065a8:	00 
c01065a9:	89 54 24 04          	mov    %edx,0x4(%esp)
c01065ad:	89 04 24             	mov    %eax,(%esp)
c01065b0:	e8 a3 1d 00 00       	call   c0108358 <swap_out>
    }
c01065b5:	eb a7                	jmp    c010655e <alloc_pages+0xd>
    //cprintf("n %d,get page %x, No %d in alloc_pages\n",n,page,(page-pages));
    return page;
c01065b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01065ba:	c9                   	leave  
c01065bb:	c3                   	ret    

c01065bc <free_pages>:

//free_pages - call pmm->free_pages to free a continuous n*PAGESIZE memory 
void
free_pages(struct Page *base, size_t n) {
c01065bc:	55                   	push   %ebp
c01065bd:	89 e5                	mov    %esp,%ebp
c01065bf:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c01065c2:	e8 ca fd ff ff       	call   c0106391 <__intr_save>
c01065c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        pmm_manager->free_pages(base, n);
c01065ca:	a1 e8 84 1c c0       	mov    0xc01c84e8,%eax
c01065cf:	8b 40 10             	mov    0x10(%eax),%eax
c01065d2:	8b 55 0c             	mov    0xc(%ebp),%edx
c01065d5:	89 54 24 04          	mov    %edx,0x4(%esp)
c01065d9:	8b 55 08             	mov    0x8(%ebp),%edx
c01065dc:	89 14 24             	mov    %edx,(%esp)
c01065df:	ff d0                	call   *%eax
    }
    local_intr_restore(intr_flag);
c01065e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01065e4:	89 04 24             	mov    %eax,(%esp)
c01065e7:	e8 cf fd ff ff       	call   c01063bb <__intr_restore>
}
c01065ec:	c9                   	leave  
c01065ed:	c3                   	ret    

c01065ee <nr_free_pages>:

//nr_free_pages - call pmm->nr_free_pages to get the size (nr*PAGESIZE) 
//of current free memory
size_t
nr_free_pages(void) {
c01065ee:	55                   	push   %ebp
c01065ef:	89 e5                	mov    %esp,%ebp
c01065f1:	83 ec 28             	sub    $0x28,%esp
    size_t ret;
    bool intr_flag;
    local_intr_save(intr_flag);
c01065f4:	e8 98 fd ff ff       	call   c0106391 <__intr_save>
c01065f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        ret = pmm_manager->nr_free_pages();
c01065fc:	a1 e8 84 1c c0       	mov    0xc01c84e8,%eax
c0106601:	8b 40 14             	mov    0x14(%eax),%eax
c0106604:	ff d0                	call   *%eax
c0106606:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    local_intr_restore(intr_flag);
c0106609:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010660c:	89 04 24             	mov    %eax,(%esp)
c010660f:	e8 a7 fd ff ff       	call   c01063bb <__intr_restore>
    return ret;
c0106614:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0106617:	c9                   	leave  
c0106618:	c3                   	ret    

c0106619 <page_init>:

/* pmm_init - initialize the physical memory management */
static void
page_init(void) {
c0106619:	55                   	push   %ebp
c010661a:	89 e5                	mov    %esp,%ebp
c010661c:	57                   	push   %edi
c010661d:	56                   	push   %esi
c010661e:	53                   	push   %ebx
c010661f:	81 ec 9c 00 00 00    	sub    $0x9c,%esp
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
c0106625:	c7 45 c4 00 80 00 c0 	movl   $0xc0008000,-0x3c(%ebp)
    uint64_t maxpa = 0;
c010662c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c0106633:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    cprintf("e820map:\n");
c010663a:	c7 04 24 07 fd 10 c0 	movl   $0xc010fd07,(%esp)
c0106641:	e8 95 b1 ff ff       	call   c01017db <cprintf>
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c0106646:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010664d:	e9 15 01 00 00       	jmp    c0106767 <page_init+0x14e>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c0106652:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0106655:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0106658:	89 d0                	mov    %edx,%eax
c010665a:	c1 e0 02             	shl    $0x2,%eax
c010665d:	01 d0                	add    %edx,%eax
c010665f:	c1 e0 02             	shl    $0x2,%eax
c0106662:	01 c8                	add    %ecx,%eax
c0106664:	8b 50 08             	mov    0x8(%eax),%edx
c0106667:	8b 40 04             	mov    0x4(%eax),%eax
c010666a:	89 45 b8             	mov    %eax,-0x48(%ebp)
c010666d:	89 55 bc             	mov    %edx,-0x44(%ebp)
c0106670:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0106673:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0106676:	89 d0                	mov    %edx,%eax
c0106678:	c1 e0 02             	shl    $0x2,%eax
c010667b:	01 d0                	add    %edx,%eax
c010667d:	c1 e0 02             	shl    $0x2,%eax
c0106680:	01 c8                	add    %ecx,%eax
c0106682:	8b 48 0c             	mov    0xc(%eax),%ecx
c0106685:	8b 58 10             	mov    0x10(%eax),%ebx
c0106688:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010668b:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010668e:	01 c8                	add    %ecx,%eax
c0106690:	11 da                	adc    %ebx,%edx
c0106692:	89 45 b0             	mov    %eax,-0x50(%ebp)
c0106695:	89 55 b4             	mov    %edx,-0x4c(%ebp)
        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
c0106698:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010669b:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010669e:	89 d0                	mov    %edx,%eax
c01066a0:	c1 e0 02             	shl    $0x2,%eax
c01066a3:	01 d0                	add    %edx,%eax
c01066a5:	c1 e0 02             	shl    $0x2,%eax
c01066a8:	01 c8                	add    %ecx,%eax
c01066aa:	83 c0 14             	add    $0x14,%eax
c01066ad:	8b 00                	mov    (%eax),%eax
c01066af:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
c01066b5:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01066b8:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01066bb:	83 c0 ff             	add    $0xffffffff,%eax
c01066be:	83 d2 ff             	adc    $0xffffffff,%edx
c01066c1:	89 c6                	mov    %eax,%esi
c01066c3:	89 d7                	mov    %edx,%edi
c01066c5:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01066c8:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01066cb:	89 d0                	mov    %edx,%eax
c01066cd:	c1 e0 02             	shl    $0x2,%eax
c01066d0:	01 d0                	add    %edx,%eax
c01066d2:	c1 e0 02             	shl    $0x2,%eax
c01066d5:	01 c8                	add    %ecx,%eax
c01066d7:	8b 48 0c             	mov    0xc(%eax),%ecx
c01066da:	8b 58 10             	mov    0x10(%eax),%ebx
c01066dd:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
c01066e3:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c01066e7:	89 74 24 14          	mov    %esi,0x14(%esp)
c01066eb:	89 7c 24 18          	mov    %edi,0x18(%esp)
c01066ef:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01066f2:	8b 55 bc             	mov    -0x44(%ebp),%edx
c01066f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01066f9:	89 54 24 10          	mov    %edx,0x10(%esp)
c01066fd:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0106701:	89 5c 24 08          	mov    %ebx,0x8(%esp)
c0106705:	c7 04 24 14 fd 10 c0 	movl   $0xc010fd14,(%esp)
c010670c:	e8 ca b0 ff ff       	call   c01017db <cprintf>
                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
        if (memmap->map[i].type == E820_ARM) {
c0106711:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0106714:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0106717:	89 d0                	mov    %edx,%eax
c0106719:	c1 e0 02             	shl    $0x2,%eax
c010671c:	01 d0                	add    %edx,%eax
c010671e:	c1 e0 02             	shl    $0x2,%eax
c0106721:	01 c8                	add    %ecx,%eax
c0106723:	83 c0 14             	add    $0x14,%eax
c0106726:	8b 00                	mov    (%eax),%eax
c0106728:	83 f8 01             	cmp    $0x1,%eax
c010672b:	75 36                	jne    c0106763 <page_init+0x14a>
            if (maxpa < end && begin < KMEMSIZE) {
c010672d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106730:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106733:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c0106736:	77 2b                	ja     c0106763 <page_init+0x14a>
c0106738:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c010673b:	72 05                	jb     c0106742 <page_init+0x129>
c010673d:	3b 45 b0             	cmp    -0x50(%ebp),%eax
c0106740:	73 21                	jae    c0106763 <page_init+0x14a>
c0106742:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0106746:	77 1b                	ja     c0106763 <page_init+0x14a>
c0106748:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c010674c:	72 09                	jb     c0106757 <page_init+0x13e>
c010674e:	81 7d b8 ff ff ff 37 	cmpl   $0x37ffffff,-0x48(%ebp)
c0106755:	77 0c                	ja     c0106763 <page_init+0x14a>
                maxpa = end;
c0106757:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010675a:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010675d:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0106760:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
    uint64_t maxpa = 0;

    cprintf("e820map:\n");
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c0106763:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c0106767:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010676a:	8b 00                	mov    (%eax),%eax
c010676c:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c010676f:	0f 8f dd fe ff ff    	jg     c0106652 <page_init+0x39>
            if (maxpa < end && begin < KMEMSIZE) {
                maxpa = end;
            }
        }
    }
    if (maxpa > KMEMSIZE) {
c0106775:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0106779:	72 1d                	jb     c0106798 <page_init+0x17f>
c010677b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010677f:	77 09                	ja     c010678a <page_init+0x171>
c0106781:	81 7d e0 00 00 00 38 	cmpl   $0x38000000,-0x20(%ebp)
c0106788:	76 0e                	jbe    c0106798 <page_init+0x17f>
        maxpa = KMEMSIZE;
c010678a:	c7 45 e0 00 00 00 38 	movl   $0x38000000,-0x20(%ebp)
c0106791:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    }

    extern char end[];

    npage = maxpa / PGSIZE;
c0106798:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010679b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010679e:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c01067a2:	c1 ea 0c             	shr    $0xc,%edx
c01067a5:	a3 a0 63 1c c0       	mov    %eax,0xc01c63a0
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
c01067aa:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
c01067b1:	b8 c4 86 1c c0       	mov    $0xc01c86c4,%eax
c01067b6:	8d 50 ff             	lea    -0x1(%eax),%edx
c01067b9:	8b 45 ac             	mov    -0x54(%ebp),%eax
c01067bc:	01 d0                	add    %edx,%eax
c01067be:	89 45 a8             	mov    %eax,-0x58(%ebp)
c01067c1:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01067c4:	ba 00 00 00 00       	mov    $0x0,%edx
c01067c9:	f7 75 ac             	divl   -0x54(%ebp)
c01067cc:	89 d0                	mov    %edx,%eax
c01067ce:	8b 55 a8             	mov    -0x58(%ebp),%edx
c01067d1:	29 c2                	sub    %eax,%edx
c01067d3:	89 d0                	mov    %edx,%eax
c01067d5:	a3 f0 84 1c c0       	mov    %eax,0xc01c84f0

    for (i = 0; i < npage; i ++) {
c01067da:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01067e1:	eb 2f                	jmp    c0106812 <page_init+0x1f9>
        SetPageReserved(pages + i);
c01067e3:	8b 0d f0 84 1c c0    	mov    0xc01c84f0,%ecx
c01067e9:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01067ec:	89 d0                	mov    %edx,%eax
c01067ee:	c1 e0 03             	shl    $0x3,%eax
c01067f1:	01 d0                	add    %edx,%eax
c01067f3:	c1 e0 02             	shl    $0x2,%eax
c01067f6:	01 c8                	add    %ecx,%eax
c01067f8:	83 c0 04             	add    $0x4,%eax
c01067fb:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
c0106802:	89 45 8c             	mov    %eax,-0x74(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0106805:	8b 45 8c             	mov    -0x74(%ebp),%eax
c0106808:	8b 55 90             	mov    -0x70(%ebp),%edx
c010680b:	0f ab 10             	bts    %edx,(%eax)
    extern char end[];

    npage = maxpa / PGSIZE;
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);

    for (i = 0; i < npage; i ++) {
c010680e:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c0106812:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0106815:	a1 a0 63 1c c0       	mov    0xc01c63a0,%eax
c010681a:	39 c2                	cmp    %eax,%edx
c010681c:	72 c5                	jb     c01067e3 <page_init+0x1ca>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
c010681e:	8b 15 a0 63 1c c0    	mov    0xc01c63a0,%edx
c0106824:	89 d0                	mov    %edx,%eax
c0106826:	c1 e0 03             	shl    $0x3,%eax
c0106829:	01 d0                	add    %edx,%eax
c010682b:	c1 e0 02             	shl    $0x2,%eax
c010682e:	89 c2                	mov    %eax,%edx
c0106830:	a1 f0 84 1c c0       	mov    0xc01c84f0,%eax
c0106835:	01 d0                	add    %edx,%eax
c0106837:	89 45 a4             	mov    %eax,-0x5c(%ebp)
c010683a:	81 7d a4 ff ff ff bf 	cmpl   $0xbfffffff,-0x5c(%ebp)
c0106841:	77 23                	ja     c0106866 <page_init+0x24d>
c0106843:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0106846:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010684a:	c7 44 24 08 44 fd 10 	movl   $0xc010fd44,0x8(%esp)
c0106851:	c0 
c0106852:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
c0106859:	00 
c010685a:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c0106861:	e8 f7 b9 ff ff       	call   c010225d <__panic>
c0106866:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0106869:	05 00 00 00 40       	add    $0x40000000,%eax
c010686e:	89 45 a0             	mov    %eax,-0x60(%ebp)

    for (i = 0; i < memmap->nr_map; i ++) {
c0106871:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0106878:	e9 74 01 00 00       	jmp    c01069f1 <page_init+0x3d8>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c010687d:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0106880:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0106883:	89 d0                	mov    %edx,%eax
c0106885:	c1 e0 02             	shl    $0x2,%eax
c0106888:	01 d0                	add    %edx,%eax
c010688a:	c1 e0 02             	shl    $0x2,%eax
c010688d:	01 c8                	add    %ecx,%eax
c010688f:	8b 50 08             	mov    0x8(%eax),%edx
c0106892:	8b 40 04             	mov    0x4(%eax),%eax
c0106895:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0106898:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010689b:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010689e:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01068a1:	89 d0                	mov    %edx,%eax
c01068a3:	c1 e0 02             	shl    $0x2,%eax
c01068a6:	01 d0                	add    %edx,%eax
c01068a8:	c1 e0 02             	shl    $0x2,%eax
c01068ab:	01 c8                	add    %ecx,%eax
c01068ad:	8b 48 0c             	mov    0xc(%eax),%ecx
c01068b0:	8b 58 10             	mov    0x10(%eax),%ebx
c01068b3:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01068b6:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01068b9:	01 c8                	add    %ecx,%eax
c01068bb:	11 da                	adc    %ebx,%edx
c01068bd:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01068c0:	89 55 cc             	mov    %edx,-0x34(%ebp)
        if (memmap->map[i].type == E820_ARM) {
c01068c3:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01068c6:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01068c9:	89 d0                	mov    %edx,%eax
c01068cb:	c1 e0 02             	shl    $0x2,%eax
c01068ce:	01 d0                	add    %edx,%eax
c01068d0:	c1 e0 02             	shl    $0x2,%eax
c01068d3:	01 c8                	add    %ecx,%eax
c01068d5:	83 c0 14             	add    $0x14,%eax
c01068d8:	8b 00                	mov    (%eax),%eax
c01068da:	83 f8 01             	cmp    $0x1,%eax
c01068dd:	0f 85 0a 01 00 00    	jne    c01069ed <page_init+0x3d4>
            if (begin < freemem) {
c01068e3:	8b 45 a0             	mov    -0x60(%ebp),%eax
c01068e6:	ba 00 00 00 00       	mov    $0x0,%edx
c01068eb:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c01068ee:	72 17                	jb     c0106907 <page_init+0x2ee>
c01068f0:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c01068f3:	77 05                	ja     c01068fa <page_init+0x2e1>
c01068f5:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c01068f8:	76 0d                	jbe    c0106907 <page_init+0x2ee>
                begin = freemem;
c01068fa:	8b 45 a0             	mov    -0x60(%ebp),%eax
c01068fd:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0106900:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
            }
            if (end > KMEMSIZE) {
c0106907:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c010690b:	72 1d                	jb     c010692a <page_init+0x311>
c010690d:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0106911:	77 09                	ja     c010691c <page_init+0x303>
c0106913:	81 7d c8 00 00 00 38 	cmpl   $0x38000000,-0x38(%ebp)
c010691a:	76 0e                	jbe    c010692a <page_init+0x311>
                end = KMEMSIZE;
c010691c:	c7 45 c8 00 00 00 38 	movl   $0x38000000,-0x38(%ebp)
c0106923:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
            }
            if (begin < end) {
c010692a:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010692d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0106930:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0106933:	0f 87 b4 00 00 00    	ja     c01069ed <page_init+0x3d4>
c0106939:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c010693c:	72 09                	jb     c0106947 <page_init+0x32e>
c010693e:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c0106941:	0f 83 a6 00 00 00    	jae    c01069ed <page_init+0x3d4>
                begin = ROUNDUP(begin, PGSIZE);
c0106947:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
c010694e:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0106951:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0106954:	01 d0                	add    %edx,%eax
c0106956:	83 e8 01             	sub    $0x1,%eax
c0106959:	89 45 98             	mov    %eax,-0x68(%ebp)
c010695c:	8b 45 98             	mov    -0x68(%ebp),%eax
c010695f:	ba 00 00 00 00       	mov    $0x0,%edx
c0106964:	f7 75 9c             	divl   -0x64(%ebp)
c0106967:	89 d0                	mov    %edx,%eax
c0106969:	8b 55 98             	mov    -0x68(%ebp),%edx
c010696c:	29 c2                	sub    %eax,%edx
c010696e:	89 d0                	mov    %edx,%eax
c0106970:	ba 00 00 00 00       	mov    $0x0,%edx
c0106975:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0106978:	89 55 d4             	mov    %edx,-0x2c(%ebp)
                end = ROUNDDOWN(end, PGSIZE);
c010697b:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010697e:	89 45 94             	mov    %eax,-0x6c(%ebp)
c0106981:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0106984:	ba 00 00 00 00       	mov    $0x0,%edx
c0106989:	89 c7                	mov    %eax,%edi
c010698b:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
c0106991:	89 7d 80             	mov    %edi,-0x80(%ebp)
c0106994:	89 d0                	mov    %edx,%eax
c0106996:	83 e0 00             	and    $0x0,%eax
c0106999:	89 45 84             	mov    %eax,-0x7c(%ebp)
c010699c:	8b 45 80             	mov    -0x80(%ebp),%eax
c010699f:	8b 55 84             	mov    -0x7c(%ebp),%edx
c01069a2:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01069a5:	89 55 cc             	mov    %edx,-0x34(%ebp)
                if (begin < end) {
c01069a8:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01069ab:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01069ae:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c01069b1:	77 3a                	ja     c01069ed <page_init+0x3d4>
c01069b3:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c01069b6:	72 05                	jb     c01069bd <page_init+0x3a4>
c01069b8:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c01069bb:	73 30                	jae    c01069ed <page_init+0x3d4>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
c01069bd:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c01069c0:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
c01069c3:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01069c6:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01069c9:	29 c8                	sub    %ecx,%eax
c01069cb:	19 da                	sbb    %ebx,%edx
c01069cd:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c01069d1:	c1 ea 0c             	shr    $0xc,%edx
c01069d4:	89 c3                	mov    %eax,%ebx
c01069d6:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01069d9:	89 04 24             	mov    %eax,(%esp)
c01069dc:	e8 72 f8 ff ff       	call   c0106253 <pa2page>
c01069e1:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c01069e5:	89 04 24             	mov    %eax,(%esp)
c01069e8:	e8 45 fb ff ff       	call   c0106532 <init_memmap>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);

    for (i = 0; i < memmap->nr_map; i ++) {
c01069ed:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c01069f1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01069f4:	8b 00                	mov    (%eax),%eax
c01069f6:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c01069f9:	0f 8f 7e fe ff ff    	jg     c010687d <page_init+0x264>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
                }
            }
        }
    }
}
c01069ff:	81 c4 9c 00 00 00    	add    $0x9c,%esp
c0106a05:	5b                   	pop    %ebx
c0106a06:	5e                   	pop    %esi
c0106a07:	5f                   	pop    %edi
c0106a08:	5d                   	pop    %ebp
c0106a09:	c3                   	ret    

c0106a0a <enable_paging>:

static void
enable_paging(void) {
c0106a0a:	55                   	push   %ebp
c0106a0b:	89 e5                	mov    %esp,%ebp
c0106a0d:	83 ec 10             	sub    $0x10,%esp
    lcr3(boot_cr3);
c0106a10:	a1 ec 84 1c c0       	mov    0xc01c84ec,%eax
c0106a15:	89 45 f8             	mov    %eax,-0x8(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c0106a18:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0106a1b:	0f 22 d8             	mov    %eax,%cr3
}

static inline uintptr_t
rcr0(void) {
    uintptr_t cr0;
    asm volatile ("mov %%cr0, %0" : "=r" (cr0) :: "memory");
c0106a1e:	0f 20 c0             	mov    %cr0,%eax
c0106a21:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return cr0;
c0106a24:	8b 45 f4             	mov    -0xc(%ebp),%eax

    // turn on paging
    uint32_t cr0 = rcr0();
c0106a27:	89 45 fc             	mov    %eax,-0x4(%ebp)
    cr0 |= CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP;
c0106a2a:	81 4d fc 2f 00 05 80 	orl    $0x8005002f,-0x4(%ebp)
    cr0 &= ~(CR0_TS | CR0_EM);
c0106a31:	83 65 fc f3          	andl   $0xfffffff3,-0x4(%ebp)
c0106a35:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106a38:	89 45 f0             	mov    %eax,-0x10(%ebp)
    asm volatile ("pushl %0; popfl" :: "r" (eflags));
}

static inline void
lcr0(uintptr_t cr0) {
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
c0106a3b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106a3e:	0f 22 c0             	mov    %eax,%cr0
    lcr0(cr0);
}
c0106a41:	c9                   	leave  
c0106a42:	c3                   	ret    

c0106a43 <boot_map_segment>:
//  la:   linear address of this memory need to map (after x86 segment map)
//  size: memory size
//  pa:   physical address of this memory
//  perm: permission of this memory  
static void
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
c0106a43:	55                   	push   %ebp
c0106a44:	89 e5                	mov    %esp,%ebp
c0106a46:	83 ec 38             	sub    $0x38,%esp
    assert(PGOFF(la) == PGOFF(pa));
c0106a49:	8b 45 14             	mov    0x14(%ebp),%eax
c0106a4c:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106a4f:	31 d0                	xor    %edx,%eax
c0106a51:	25 ff 0f 00 00       	and    $0xfff,%eax
c0106a56:	85 c0                	test   %eax,%eax
c0106a58:	74 24                	je     c0106a7e <boot_map_segment+0x3b>
c0106a5a:	c7 44 24 0c 76 fd 10 	movl   $0xc010fd76,0xc(%esp)
c0106a61:	c0 
c0106a62:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c0106a69:	c0 
c0106a6a:	c7 44 24 04 12 01 00 	movl   $0x112,0x4(%esp)
c0106a71:	00 
c0106a72:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c0106a79:	e8 df b7 ff ff       	call   c010225d <__panic>
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
c0106a7e:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
c0106a85:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106a88:	25 ff 0f 00 00       	and    $0xfff,%eax
c0106a8d:	89 c2                	mov    %eax,%edx
c0106a8f:	8b 45 10             	mov    0x10(%ebp),%eax
c0106a92:	01 c2                	add    %eax,%edx
c0106a94:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106a97:	01 d0                	add    %edx,%eax
c0106a99:	83 e8 01             	sub    $0x1,%eax
c0106a9c:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106a9f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106aa2:	ba 00 00 00 00       	mov    $0x0,%edx
c0106aa7:	f7 75 f0             	divl   -0x10(%ebp)
c0106aaa:	89 d0                	mov    %edx,%eax
c0106aac:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0106aaf:	29 c2                	sub    %eax,%edx
c0106ab1:	89 d0                	mov    %edx,%eax
c0106ab3:	c1 e8 0c             	shr    $0xc,%eax
c0106ab6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    la = ROUNDDOWN(la, PGSIZE);
c0106ab9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106abc:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0106abf:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106ac2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106ac7:	89 45 0c             	mov    %eax,0xc(%ebp)
    pa = ROUNDDOWN(pa, PGSIZE);
c0106aca:	8b 45 14             	mov    0x14(%ebp),%eax
c0106acd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106ad0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106ad3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106ad8:	89 45 14             	mov    %eax,0x14(%ebp)
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c0106adb:	eb 6b                	jmp    c0106b48 <boot_map_segment+0x105>
        pte_t *ptep = get_pte(pgdir, la, 1);
c0106add:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0106ae4:	00 
c0106ae5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106ae8:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106aec:	8b 45 08             	mov    0x8(%ebp),%eax
c0106aef:	89 04 24             	mov    %eax,(%esp)
c0106af2:	e8 d1 01 00 00       	call   c0106cc8 <get_pte>
c0106af7:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(ptep != NULL);
c0106afa:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0106afe:	75 24                	jne    c0106b24 <boot_map_segment+0xe1>
c0106b00:	c7 44 24 0c a2 fd 10 	movl   $0xc010fda2,0xc(%esp)
c0106b07:	c0 
c0106b08:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c0106b0f:	c0 
c0106b10:	c7 44 24 04 18 01 00 	movl   $0x118,0x4(%esp)
c0106b17:	00 
c0106b18:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c0106b1f:	e8 39 b7 ff ff       	call   c010225d <__panic>
        *ptep = pa | PTE_P | perm;
c0106b24:	8b 45 18             	mov    0x18(%ebp),%eax
c0106b27:	8b 55 14             	mov    0x14(%ebp),%edx
c0106b2a:	09 d0                	or     %edx,%eax
c0106b2c:	83 c8 01             	or     $0x1,%eax
c0106b2f:	89 c2                	mov    %eax,%edx
c0106b31:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106b34:	89 10                	mov    %edx,(%eax)
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
    assert(PGOFF(la) == PGOFF(pa));
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
    la = ROUNDDOWN(la, PGSIZE);
    pa = ROUNDDOWN(pa, PGSIZE);
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c0106b36:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0106b3a:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
c0106b41:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
c0106b48:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106b4c:	75 8f                	jne    c0106add <boot_map_segment+0x9a>
        pte_t *ptep = get_pte(pgdir, la, 1);
        assert(ptep != NULL);
        *ptep = pa | PTE_P | perm;
    }
}
c0106b4e:	c9                   	leave  
c0106b4f:	c3                   	ret    

c0106b50 <boot_alloc_page>:

//boot_alloc_page - allocate one page using pmm->alloc_pages(1) 
// return value: the kernel virtual address of this allocated page
//note: this function is used to get the memory for PDT(Page Directory Table)&PT(Page Table)
static void *
boot_alloc_page(void) {
c0106b50:	55                   	push   %ebp
c0106b51:	89 e5                	mov    %esp,%ebp
c0106b53:	83 ec 28             	sub    $0x28,%esp
    struct Page *p = alloc_page();
c0106b56:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106b5d:	e8 ef f9 ff ff       	call   c0106551 <alloc_pages>
c0106b62:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (p == NULL) {
c0106b65:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106b69:	75 1c                	jne    c0106b87 <boot_alloc_page+0x37>
        panic("boot_alloc_page failed.\n");
c0106b6b:	c7 44 24 08 af fd 10 	movl   $0xc010fdaf,0x8(%esp)
c0106b72:	c0 
c0106b73:	c7 44 24 04 24 01 00 	movl   $0x124,0x4(%esp)
c0106b7a:	00 
c0106b7b:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c0106b82:	e8 d6 b6 ff ff       	call   c010225d <__panic>
    }
    return page2kva(p);
c0106b87:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106b8a:	89 04 24             	mov    %eax,(%esp)
c0106b8d:	e8 10 f7 ff ff       	call   c01062a2 <page2kva>
}
c0106b92:	c9                   	leave  
c0106b93:	c3                   	ret    

c0106b94 <pmm_init>:

//pmm_init - setup a pmm to manage physical memory, build PDT&PT to setup paging mechanism 
//         - check the correctness of pmm & paging mechanism, print PDT&PT
void
pmm_init(void) {
c0106b94:	55                   	push   %ebp
c0106b95:	89 e5                	mov    %esp,%ebp
c0106b97:	83 ec 38             	sub    $0x38,%esp
    //We need to alloc/free the physical memory (granularity is 4KB or other size). 
    //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
    //First we should init a physical memory manager(pmm) based on the framework.
    //Then pmm can alloc/free the physical memory. 
    //Now the first_fit/best_fit/worst_fit/buddy_system pmm are available.
    init_pmm_manager();
c0106b9a:	e8 60 f9 ff ff       	call   c01064ff <init_pmm_manager>

    // detect physical memory space, reserve already used memory,
    // then use pmm->init_memmap to create free page list
    page_init();
c0106b9f:	e8 75 fa ff ff       	call   c0106619 <page_init>

    //use pmm->check to verify the correctness of the alloc/free function in a pmm
    check_alloc_page();
c0106ba4:	e8 5d 09 00 00       	call   c0107506 <check_alloc_page>

    // create boot_pgdir, an initial page directory(Page Directory Table, PDT)
    boot_pgdir = boot_alloc_page();
c0106ba9:	e8 a2 ff ff ff       	call   c0106b50 <boot_alloc_page>
c0106bae:	a3 a4 63 1c c0       	mov    %eax,0xc01c63a4
    memset(boot_pgdir, 0, PGSIZE);
c0106bb3:	a1 a4 63 1c c0       	mov    0xc01c63a4,%eax
c0106bb8:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0106bbf:	00 
c0106bc0:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0106bc7:	00 
c0106bc8:	89 04 24             	mov    %eax,(%esp)
c0106bcb:	e8 dc 7e 00 00       	call   c010eaac <memset>
    boot_cr3 = PADDR(boot_pgdir);
c0106bd0:	a1 a4 63 1c c0       	mov    0xc01c63a4,%eax
c0106bd5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106bd8:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0106bdf:	77 23                	ja     c0106c04 <pmm_init+0x70>
c0106be1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106be4:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106be8:	c7 44 24 08 44 fd 10 	movl   $0xc010fd44,0x8(%esp)
c0106bef:	c0 
c0106bf0:	c7 44 24 04 3e 01 00 	movl   $0x13e,0x4(%esp)
c0106bf7:	00 
c0106bf8:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c0106bff:	e8 59 b6 ff ff       	call   c010225d <__panic>
c0106c04:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106c07:	05 00 00 00 40       	add    $0x40000000,%eax
c0106c0c:	a3 ec 84 1c c0       	mov    %eax,0xc01c84ec

    check_pgdir();
c0106c11:	e8 0e 09 00 00       	call   c0107524 <check_pgdir>

    static_assert(KERNBASE % PTSIZE == 0 && KERNTOP % PTSIZE == 0);

    // recursively insert boot_pgdir in itself
    // to form a virtual page table at virtual address VPT
    boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;
c0106c16:	a1 a4 63 1c c0       	mov    0xc01c63a4,%eax
c0106c1b:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c0106c21:	a1 a4 63 1c c0       	mov    0xc01c63a4,%eax
c0106c26:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106c29:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
c0106c30:	77 23                	ja     c0106c55 <pmm_init+0xc1>
c0106c32:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106c35:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106c39:	c7 44 24 08 44 fd 10 	movl   $0xc010fd44,0x8(%esp)
c0106c40:	c0 
c0106c41:	c7 44 24 04 46 01 00 	movl   $0x146,0x4(%esp)
c0106c48:	00 
c0106c49:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c0106c50:	e8 08 b6 ff ff       	call   c010225d <__panic>
c0106c55:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106c58:	05 00 00 00 40       	add    $0x40000000,%eax
c0106c5d:	83 c8 03             	or     $0x3,%eax
c0106c60:	89 02                	mov    %eax,(%edx)

    // map all physical memory to linear memory with base linear addr KERNBASE
    //linear_addr KERNBASE~KERNBASE+KMEMSIZE = phy_addr 0~KMEMSIZE
    //But shouldn't use this map until enable_paging() & gdt_init() finished.
    boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W);
c0106c62:	a1 a4 63 1c c0       	mov    0xc01c63a4,%eax
c0106c67:	c7 44 24 10 02 00 00 	movl   $0x2,0x10(%esp)
c0106c6e:	00 
c0106c6f:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0106c76:	00 
c0106c77:	c7 44 24 08 00 00 00 	movl   $0x38000000,0x8(%esp)
c0106c7e:	38 
c0106c7f:	c7 44 24 04 00 00 00 	movl   $0xc0000000,0x4(%esp)
c0106c86:	c0 
c0106c87:	89 04 24             	mov    %eax,(%esp)
c0106c8a:	e8 b4 fd ff ff       	call   c0106a43 <boot_map_segment>

    //temporary map: 
    //virtual_addr 3G~3G+4M = linear_addr 0~4M = linear_addr 3G~3G+4M = phy_addr 0~4M     
    boot_pgdir[0] = boot_pgdir[PDX(KERNBASE)];
c0106c8f:	a1 a4 63 1c c0       	mov    0xc01c63a4,%eax
c0106c94:	8b 15 a4 63 1c c0    	mov    0xc01c63a4,%edx
c0106c9a:	8b 92 00 0c 00 00    	mov    0xc00(%edx),%edx
c0106ca0:	89 10                	mov    %edx,(%eax)

    enable_paging();
c0106ca2:	e8 63 fd ff ff       	call   c0106a0a <enable_paging>

    //reload gdt(third time,the last time) to map all physical memory
    //virtual_addr 0~4G=liear_addr 0~4G
    //then set kernel stack(ss:esp) in TSS, setup TSS in gdt, load TSS
    gdt_init();
c0106ca7:	e8 64 f7 ff ff       	call   c0106410 <gdt_init>

    //disable the map of virtual_addr 0~4M
    boot_pgdir[0] = 0;
c0106cac:	a1 a4 63 1c c0       	mov    0xc01c63a4,%eax
c0106cb1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    //now the basic virtual memory map(see memalyout.h) is established.
    //check the correctness of the basic virtual memory map.
    check_boot_pgdir();
c0106cb7:	e8 03 0f 00 00       	call   c0107bbf <check_boot_pgdir>

    print_pgdir();
c0106cbc:	e8 90 13 00 00       	call   c0108051 <print_pgdir>
    
    kmalloc_init();
c0106cc1:	e8 c6 f2 ff ff       	call   c0105f8c <kmalloc_init>

}
c0106cc6:	c9                   	leave  
c0106cc7:	c3                   	ret    

c0106cc8 <get_pte>:
//  pgdir:  the kernel virtual base address of PDT
//  la:     the linear address need to map
//  create: a logical value to decide if alloc a page for PT
// return vaule: the kernel virtual address of this pte
pte_t *
get_pte(pde_t *pgdir, uintptr_t la, bool create) {
c0106cc8:	55                   	push   %ebp
c0106cc9:	89 e5                	mov    %esp,%ebp
c0106ccb:	83 ec 38             	sub    $0x38,%esp
                          // (6) clear page content using memset
                          // (7) set page directory entry's permission
    }
    return NULL;          // (8) return page table entry
#endif
    pde_t *pdep = &pgdir[PDX(la)];
c0106cce:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106cd1:	c1 e8 16             	shr    $0x16,%eax
c0106cd4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106cdb:	8b 45 08             	mov    0x8(%ebp),%eax
c0106cde:	01 d0                	add    %edx,%eax
c0106ce0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!(*pdep & PTE_P)) {
c0106ce3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106ce6:	8b 00                	mov    (%eax),%eax
c0106ce8:	83 e0 01             	and    $0x1,%eax
c0106ceb:	85 c0                	test   %eax,%eax
c0106ced:	0f 85 af 00 00 00    	jne    c0106da2 <get_pte+0xda>
        struct Page *page;
        if (!create || (page = alloc_page()) == NULL) {
c0106cf3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0106cf7:	74 15                	je     c0106d0e <get_pte+0x46>
c0106cf9:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106d00:	e8 4c f8 ff ff       	call   c0106551 <alloc_pages>
c0106d05:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106d08:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106d0c:	75 0a                	jne    c0106d18 <get_pte+0x50>
            return NULL;
c0106d0e:	b8 00 00 00 00       	mov    $0x0,%eax
c0106d13:	e9 e6 00 00 00       	jmp    c0106dfe <get_pte+0x136>
        }
        set_page_ref(page, 1);
c0106d18:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106d1f:	00 
c0106d20:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106d23:	89 04 24             	mov    %eax,(%esp)
c0106d26:	e8 2b f6 ff ff       	call   c0106356 <set_page_ref>
        uintptr_t pa = page2pa(page);
c0106d2b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106d2e:	89 04 24             	mov    %eax,(%esp)
c0106d31:	e8 07 f5 ff ff       	call   c010623d <page2pa>
c0106d36:	89 45 ec             	mov    %eax,-0x14(%ebp)
        memset(KADDR(pa), 0, PGSIZE);
c0106d39:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106d3c:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0106d3f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106d42:	c1 e8 0c             	shr    $0xc,%eax
c0106d45:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106d48:	a1 a0 63 1c c0       	mov    0xc01c63a0,%eax
c0106d4d:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c0106d50:	72 23                	jb     c0106d75 <get_pte+0xad>
c0106d52:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106d55:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106d59:	c7 44 24 08 a0 fc 10 	movl   $0xc010fca0,0x8(%esp)
c0106d60:	c0 
c0106d61:	c7 44 24 04 97 01 00 	movl   $0x197,0x4(%esp)
c0106d68:	00 
c0106d69:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c0106d70:	e8 e8 b4 ff ff       	call   c010225d <__panic>
c0106d75:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106d78:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0106d7d:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0106d84:	00 
c0106d85:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0106d8c:	00 
c0106d8d:	89 04 24             	mov    %eax,(%esp)
c0106d90:	e8 17 7d 00 00       	call   c010eaac <memset>
        *pdep = pa | PTE_U | PTE_W | PTE_P;
c0106d95:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106d98:	83 c8 07             	or     $0x7,%eax
c0106d9b:	89 c2                	mov    %eax,%edx
c0106d9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106da0:	89 10                	mov    %edx,(%eax)
    }
    return &((pte_t *)KADDR(PDE_ADDR(*pdep)))[PTX(la)];
c0106da2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106da5:	8b 00                	mov    (%eax),%eax
c0106da7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106dac:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0106daf:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106db2:	c1 e8 0c             	shr    $0xc,%eax
c0106db5:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0106db8:	a1 a0 63 1c c0       	mov    0xc01c63a0,%eax
c0106dbd:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0106dc0:	72 23                	jb     c0106de5 <get_pte+0x11d>
c0106dc2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106dc5:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106dc9:	c7 44 24 08 a0 fc 10 	movl   $0xc010fca0,0x8(%esp)
c0106dd0:	c0 
c0106dd1:	c7 44 24 04 9a 01 00 	movl   $0x19a,0x4(%esp)
c0106dd8:	00 
c0106dd9:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c0106de0:	e8 78 b4 ff ff       	call   c010225d <__panic>
c0106de5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106de8:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0106ded:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106df0:	c1 ea 0c             	shr    $0xc,%edx
c0106df3:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
c0106df9:	c1 e2 02             	shl    $0x2,%edx
c0106dfc:	01 d0                	add    %edx,%eax
}
c0106dfe:	c9                   	leave  
c0106dff:	c3                   	ret    

c0106e00 <get_page>:

//get_page - get related Page struct for linear address la using PDT pgdir
struct Page *
get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store) {
c0106e00:	55                   	push   %ebp
c0106e01:	89 e5                	mov    %esp,%ebp
c0106e03:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c0106e06:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106e0d:	00 
c0106e0e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106e11:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106e15:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e18:	89 04 24             	mov    %eax,(%esp)
c0106e1b:	e8 a8 fe ff ff       	call   c0106cc8 <get_pte>
c0106e20:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep_store != NULL) {
c0106e23:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0106e27:	74 08                	je     c0106e31 <get_page+0x31>
        *ptep_store = ptep;
c0106e29:	8b 45 10             	mov    0x10(%ebp),%eax
c0106e2c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106e2f:	89 10                	mov    %edx,(%eax)
    }
    if (ptep != NULL && *ptep & PTE_P) {
c0106e31:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106e35:	74 1b                	je     c0106e52 <get_page+0x52>
c0106e37:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106e3a:	8b 00                	mov    (%eax),%eax
c0106e3c:	83 e0 01             	and    $0x1,%eax
c0106e3f:	85 c0                	test   %eax,%eax
c0106e41:	74 0f                	je     c0106e52 <get_page+0x52>
        return pa2page(*ptep);
c0106e43:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106e46:	8b 00                	mov    (%eax),%eax
c0106e48:	89 04 24             	mov    %eax,(%esp)
c0106e4b:	e8 03 f4 ff ff       	call   c0106253 <pa2page>
c0106e50:	eb 05                	jmp    c0106e57 <get_page+0x57>
    }
    return NULL;
c0106e52:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0106e57:	c9                   	leave  
c0106e58:	c3                   	ret    

c0106e59 <page_remove_pte>:

//page_remove_pte - free an Page sturct which is related linear address la
//                - and clean(invalidate) pte which is related linear address la
//note: PT is changed, so the TLB need to be invalidate 
static inline void
page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
c0106e59:	55                   	push   %ebp
c0106e5a:	89 e5                	mov    %esp,%ebp
c0106e5c:	83 ec 28             	sub    $0x28,%esp
                                  //(4) and free this page when page reference reachs 0
                                  //(5) clear second page table entry
                                  //(6) flush tlb
    }
#endif
    if (*ptep & PTE_P) {
c0106e5f:	8b 45 10             	mov    0x10(%ebp),%eax
c0106e62:	8b 00                	mov    (%eax),%eax
c0106e64:	83 e0 01             	and    $0x1,%eax
c0106e67:	85 c0                	test   %eax,%eax
c0106e69:	74 4d                	je     c0106eb8 <page_remove_pte+0x5f>
        struct Page *page = pte2page(*ptep);
c0106e6b:	8b 45 10             	mov    0x10(%ebp),%eax
c0106e6e:	8b 00                	mov    (%eax),%eax
c0106e70:	89 04 24             	mov    %eax,(%esp)
c0106e73:	e8 7e f4 ff ff       	call   c01062f6 <pte2page>
c0106e78:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (page_ref_dec(page) == 0) {
c0106e7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106e7e:	89 04 24             	mov    %eax,(%esp)
c0106e81:	e8 f4 f4 ff ff       	call   c010637a <page_ref_dec>
c0106e86:	85 c0                	test   %eax,%eax
c0106e88:	75 13                	jne    c0106e9d <page_remove_pte+0x44>
            free_page(page);
c0106e8a:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106e91:	00 
c0106e92:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106e95:	89 04 24             	mov    %eax,(%esp)
c0106e98:	e8 1f f7 ff ff       	call   c01065bc <free_pages>
        }
        *ptep = 0;
c0106e9d:	8b 45 10             	mov    0x10(%ebp),%eax
c0106ea0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        tlb_invalidate(pgdir, la);
c0106ea6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106ea9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106ead:	8b 45 08             	mov    0x8(%ebp),%eax
c0106eb0:	89 04 24             	mov    %eax,(%esp)
c0106eb3:	e8 1d 05 00 00       	call   c01073d5 <tlb_invalidate>
    }
}
c0106eb8:	c9                   	leave  
c0106eb9:	c3                   	ret    

c0106eba <unmap_range>:

void
unmap_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c0106eba:	55                   	push   %ebp
c0106ebb:	89 e5                	mov    %esp,%ebp
c0106ebd:	83 ec 28             	sub    $0x28,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0106ec0:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106ec3:	25 ff 0f 00 00       	and    $0xfff,%eax
c0106ec8:	85 c0                	test   %eax,%eax
c0106eca:	75 0c                	jne    c0106ed8 <unmap_range+0x1e>
c0106ecc:	8b 45 10             	mov    0x10(%ebp),%eax
c0106ecf:	25 ff 0f 00 00       	and    $0xfff,%eax
c0106ed4:	85 c0                	test   %eax,%eax
c0106ed6:	74 24                	je     c0106efc <unmap_range+0x42>
c0106ed8:	c7 44 24 0c c8 fd 10 	movl   $0xc010fdc8,0xc(%esp)
c0106edf:	c0 
c0106ee0:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c0106ee7:	c0 
c0106ee8:	c7 44 24 04 d4 01 00 	movl   $0x1d4,0x4(%esp)
c0106eef:	00 
c0106ef0:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c0106ef7:	e8 61 b3 ff ff       	call   c010225d <__panic>
    assert(USER_ACCESS(start, end));
c0106efc:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0106f03:	76 11                	jbe    c0106f16 <unmap_range+0x5c>
c0106f05:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106f08:	3b 45 10             	cmp    0x10(%ebp),%eax
c0106f0b:	73 09                	jae    c0106f16 <unmap_range+0x5c>
c0106f0d:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0106f14:	76 24                	jbe    c0106f3a <unmap_range+0x80>
c0106f16:	c7 44 24 0c f1 fd 10 	movl   $0xc010fdf1,0xc(%esp)
c0106f1d:	c0 
c0106f1e:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c0106f25:	c0 
c0106f26:	c7 44 24 04 d5 01 00 	movl   $0x1d5,0x4(%esp)
c0106f2d:	00 
c0106f2e:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c0106f35:	e8 23 b3 ff ff       	call   c010225d <__panic>

    do {
        pte_t *ptep = get_pte(pgdir, start, 0);
c0106f3a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106f41:	00 
c0106f42:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106f45:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106f49:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f4c:	89 04 24             	mov    %eax,(%esp)
c0106f4f:	e8 74 fd ff ff       	call   c0106cc8 <get_pte>
c0106f54:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0106f57:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106f5b:	75 18                	jne    c0106f75 <unmap_range+0xbb>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0106f5d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106f60:	05 00 00 40 00       	add    $0x400000,%eax
c0106f65:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106f68:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106f6b:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0106f70:	89 45 0c             	mov    %eax,0xc(%ebp)
            continue ;
c0106f73:	eb 29                	jmp    c0106f9e <unmap_range+0xe4>
        }
        if (*ptep != 0) {
c0106f75:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106f78:	8b 00                	mov    (%eax),%eax
c0106f7a:	85 c0                	test   %eax,%eax
c0106f7c:	74 19                	je     c0106f97 <unmap_range+0xdd>
            page_remove_pte(pgdir, start, ptep);
c0106f7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106f81:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106f85:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106f88:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106f8c:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f8f:	89 04 24             	mov    %eax,(%esp)
c0106f92:	e8 c2 fe ff ff       	call   c0106e59 <page_remove_pte>
        }
        start += PGSIZE;
c0106f97:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    } while (start != 0 && start < end);
c0106f9e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0106fa2:	74 08                	je     c0106fac <unmap_range+0xf2>
c0106fa4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106fa7:	3b 45 10             	cmp    0x10(%ebp),%eax
c0106faa:	72 8e                	jb     c0106f3a <unmap_range+0x80>
}
c0106fac:	c9                   	leave  
c0106fad:	c3                   	ret    

c0106fae <exit_range>:

void
exit_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c0106fae:	55                   	push   %ebp
c0106faf:	89 e5                	mov    %esp,%ebp
c0106fb1:	83 ec 28             	sub    $0x28,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0106fb4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106fb7:	25 ff 0f 00 00       	and    $0xfff,%eax
c0106fbc:	85 c0                	test   %eax,%eax
c0106fbe:	75 0c                	jne    c0106fcc <exit_range+0x1e>
c0106fc0:	8b 45 10             	mov    0x10(%ebp),%eax
c0106fc3:	25 ff 0f 00 00       	and    $0xfff,%eax
c0106fc8:	85 c0                	test   %eax,%eax
c0106fca:	74 24                	je     c0106ff0 <exit_range+0x42>
c0106fcc:	c7 44 24 0c c8 fd 10 	movl   $0xc010fdc8,0xc(%esp)
c0106fd3:	c0 
c0106fd4:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c0106fdb:	c0 
c0106fdc:	c7 44 24 04 e6 01 00 	movl   $0x1e6,0x4(%esp)
c0106fe3:	00 
c0106fe4:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c0106feb:	e8 6d b2 ff ff       	call   c010225d <__panic>
    assert(USER_ACCESS(start, end));
c0106ff0:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0106ff7:	76 11                	jbe    c010700a <exit_range+0x5c>
c0106ff9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106ffc:	3b 45 10             	cmp    0x10(%ebp),%eax
c0106fff:	73 09                	jae    c010700a <exit_range+0x5c>
c0107001:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0107008:	76 24                	jbe    c010702e <exit_range+0x80>
c010700a:	c7 44 24 0c f1 fd 10 	movl   $0xc010fdf1,0xc(%esp)
c0107011:	c0 
c0107012:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c0107019:	c0 
c010701a:	c7 44 24 04 e7 01 00 	movl   $0x1e7,0x4(%esp)
c0107021:	00 
c0107022:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c0107029:	e8 2f b2 ff ff       	call   c010225d <__panic>

    start = ROUNDDOWN(start, PTSIZE);
c010702e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107031:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0107034:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107037:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c010703c:	89 45 0c             	mov    %eax,0xc(%ebp)
    do {
        int pde_idx = PDX(start);
c010703f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107042:	c1 e8 16             	shr    $0x16,%eax
c0107045:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pgdir[pde_idx] & PTE_P) {
c0107048:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010704b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107052:	8b 45 08             	mov    0x8(%ebp),%eax
c0107055:	01 d0                	add    %edx,%eax
c0107057:	8b 00                	mov    (%eax),%eax
c0107059:	83 e0 01             	and    $0x1,%eax
c010705c:	85 c0                	test   %eax,%eax
c010705e:	74 3e                	je     c010709e <exit_range+0xf0>
            free_page(pde2page(pgdir[pde_idx]));
c0107060:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107063:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010706a:	8b 45 08             	mov    0x8(%ebp),%eax
c010706d:	01 d0                	add    %edx,%eax
c010706f:	8b 00                	mov    (%eax),%eax
c0107071:	89 04 24             	mov    %eax,(%esp)
c0107074:	e8 bb f2 ff ff       	call   c0106334 <pde2page>
c0107079:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107080:	00 
c0107081:	89 04 24             	mov    %eax,(%esp)
c0107084:	e8 33 f5 ff ff       	call   c01065bc <free_pages>
            pgdir[pde_idx] = 0;
c0107089:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010708c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107093:	8b 45 08             	mov    0x8(%ebp),%eax
c0107096:	01 d0                	add    %edx,%eax
c0107098:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        }
        start += PTSIZE;
c010709e:	81 45 0c 00 00 40 00 	addl   $0x400000,0xc(%ebp)
    } while (start != 0 && start < end);
c01070a5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01070a9:	74 08                	je     c01070b3 <exit_range+0x105>
c01070ab:	8b 45 0c             	mov    0xc(%ebp),%eax
c01070ae:	3b 45 10             	cmp    0x10(%ebp),%eax
c01070b1:	72 8c                	jb     c010703f <exit_range+0x91>
}
c01070b3:	c9                   	leave  
c01070b4:	c3                   	ret    

c01070b5 <copy_range>:
 * @share: flags to indicate to dup OR share. We just use dup method, so it didn't be used.
 *
 * CALL GRAPH: copy_mm-->dup_mmap-->copy_range
 */
int
copy_range(pde_t *to, pde_t *from, uintptr_t start, uintptr_t end, bool share) {
c01070b5:	55                   	push   %ebp
c01070b6:	89 e5                	mov    %esp,%ebp
c01070b8:	83 ec 48             	sub    $0x48,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c01070bb:	8b 45 10             	mov    0x10(%ebp),%eax
c01070be:	25 ff 0f 00 00       	and    $0xfff,%eax
c01070c3:	85 c0                	test   %eax,%eax
c01070c5:	75 0c                	jne    c01070d3 <copy_range+0x1e>
c01070c7:	8b 45 14             	mov    0x14(%ebp),%eax
c01070ca:	25 ff 0f 00 00       	and    $0xfff,%eax
c01070cf:	85 c0                	test   %eax,%eax
c01070d1:	74 24                	je     c01070f7 <copy_range+0x42>
c01070d3:	c7 44 24 0c c8 fd 10 	movl   $0xc010fdc8,0xc(%esp)
c01070da:	c0 
c01070db:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c01070e2:	c0 
c01070e3:	c7 44 24 04 fc 01 00 	movl   $0x1fc,0x4(%esp)
c01070ea:	00 
c01070eb:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c01070f2:	e8 66 b1 ff ff       	call   c010225d <__panic>
    assert(USER_ACCESS(start, end));
c01070f7:	81 7d 10 ff ff 1f 00 	cmpl   $0x1fffff,0x10(%ebp)
c01070fe:	76 11                	jbe    c0107111 <copy_range+0x5c>
c0107100:	8b 45 10             	mov    0x10(%ebp),%eax
c0107103:	3b 45 14             	cmp    0x14(%ebp),%eax
c0107106:	73 09                	jae    c0107111 <copy_range+0x5c>
c0107108:	81 7d 14 00 00 00 b0 	cmpl   $0xb0000000,0x14(%ebp)
c010710f:	76 24                	jbe    c0107135 <copy_range+0x80>
c0107111:	c7 44 24 0c f1 fd 10 	movl   $0xc010fdf1,0xc(%esp)
c0107118:	c0 
c0107119:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c0107120:	c0 
c0107121:	c7 44 24 04 fd 01 00 	movl   $0x1fd,0x4(%esp)
c0107128:	00 
c0107129:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c0107130:	e8 28 b1 ff ff       	call   c010225d <__panic>
    // copy content by page unit.
    do {
        //call get_pte to find process A's pte according to the addr start
        pte_t *ptep = get_pte(from, start, 0), *nptep;
c0107135:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010713c:	00 
c010713d:	8b 45 10             	mov    0x10(%ebp),%eax
c0107140:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107144:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107147:	89 04 24             	mov    %eax,(%esp)
c010714a:	e8 79 fb ff ff       	call   c0106cc8 <get_pte>
c010714f:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0107152:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107156:	75 1b                	jne    c0107173 <copy_range+0xbe>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0107158:	8b 45 10             	mov    0x10(%ebp),%eax
c010715b:	05 00 00 40 00       	add    $0x400000,%eax
c0107160:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107163:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107166:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c010716b:	89 45 10             	mov    %eax,0x10(%ebp)
            continue ;
c010716e:	e9 4c 01 00 00       	jmp    c01072bf <copy_range+0x20a>
        }
        //call get_pte to find process B's pte according to the addr start. If pte is NULL, just alloc a PT
        if (*ptep & PTE_P) {
c0107173:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107176:	8b 00                	mov    (%eax),%eax
c0107178:	83 e0 01             	and    $0x1,%eax
c010717b:	85 c0                	test   %eax,%eax
c010717d:	0f 84 35 01 00 00    	je     c01072b8 <copy_range+0x203>
            if ((nptep = get_pte(to, start, 1)) == NULL) {
c0107183:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c010718a:	00 
c010718b:	8b 45 10             	mov    0x10(%ebp),%eax
c010718e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107192:	8b 45 08             	mov    0x8(%ebp),%eax
c0107195:	89 04 24             	mov    %eax,(%esp)
c0107198:	e8 2b fb ff ff       	call   c0106cc8 <get_pte>
c010719d:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01071a0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01071a4:	75 0a                	jne    c01071b0 <copy_range+0xfb>
                return -E_NO_MEM;
c01071a6:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c01071ab:	e9 26 01 00 00       	jmp    c01072d6 <copy_range+0x221>
            }
        uint32_t perm = (*ptep & PTE_USER);
c01071b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01071b3:	8b 00                	mov    (%eax),%eax
c01071b5:	83 e0 07             	and    $0x7,%eax
c01071b8:	89 45 e8             	mov    %eax,-0x18(%ebp)
        //get page from ptep
        struct Page *page = pte2page(*ptep);
c01071bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01071be:	8b 00                	mov    (%eax),%eax
c01071c0:	89 04 24             	mov    %eax,(%esp)
c01071c3:	e8 2e f1 ff ff       	call   c01062f6 <pte2page>
c01071c8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        // alloc a page for process B
        struct Page *npage=alloc_page();
c01071cb:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01071d2:	e8 7a f3 ff ff       	call   c0106551 <alloc_pages>
c01071d7:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(page!=NULL);
c01071da:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01071de:	75 24                	jne    c0107204 <copy_range+0x14f>
c01071e0:	c7 44 24 0c 09 fe 10 	movl   $0xc010fe09,0xc(%esp)
c01071e7:	c0 
c01071e8:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c01071ef:	c0 
c01071f0:	c7 44 24 04 10 02 00 	movl   $0x210,0x4(%esp)
c01071f7:	00 
c01071f8:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c01071ff:	e8 59 b0 ff ff       	call   c010225d <__panic>
        assert(npage!=NULL);
c0107204:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0107208:	75 24                	jne    c010722e <copy_range+0x179>
c010720a:	c7 44 24 0c 14 fe 10 	movl   $0xc010fe14,0xc(%esp)
c0107211:	c0 
c0107212:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c0107219:	c0 
c010721a:	c7 44 24 04 11 02 00 	movl   $0x211,0x4(%esp)
c0107221:	00 
c0107222:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c0107229:	e8 2f b0 ff ff       	call   c010225d <__panic>
        int ret=0;
c010722e:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
         * (1) find src_kvaddr: the kernel virtual address of page
         * (2) find dst_kvaddr: the kernel virtual address of npage
         * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
         * (4) build the map of phy addr of  nage with the linear addr start
         */
        void * kva_src = page2kva(page);
c0107235:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107238:	89 04 24             	mov    %eax,(%esp)
c010723b:	e8 62 f0 ff ff       	call   c01062a2 <page2kva>
c0107240:	89 45 d8             	mov    %eax,-0x28(%ebp)
        void * kva_dst = page2kva(npage);
c0107243:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107246:	89 04 24             	mov    %eax,(%esp)
c0107249:	e8 54 f0 ff ff       	call   c01062a2 <page2kva>
c010724e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    
        memcpy(kva_dst, kva_src, PGSIZE);
c0107251:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0107258:	00 
c0107259:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010725c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107260:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0107263:	89 04 24             	mov    %eax,(%esp)
c0107266:	e8 23 79 00 00       	call   c010eb8e <memcpy>

        ret = page_insert(to, npage, start, perm);
c010726b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010726e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0107272:	8b 45 10             	mov    0x10(%ebp),%eax
c0107275:	89 44 24 08          	mov    %eax,0x8(%esp)
c0107279:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010727c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107280:	8b 45 08             	mov    0x8(%ebp),%eax
c0107283:	89 04 24             	mov    %eax,(%esp)
c0107286:	e8 91 00 00 00       	call   c010731c <page_insert>
c010728b:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(ret == 0);
c010728e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0107292:	74 24                	je     c01072b8 <copy_range+0x203>
c0107294:	c7 44 24 0c 20 fe 10 	movl   $0xc010fe20,0xc(%esp)
c010729b:	c0 
c010729c:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c01072a3:	c0 
c01072a4:	c7 44 24 04 27 02 00 	movl   $0x227,0x4(%esp)
c01072ab:	00 
c01072ac:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c01072b3:	e8 a5 af ff ff       	call   c010225d <__panic>
        }
        start += PGSIZE;
c01072b8:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    } while (start != 0 && start < end);
c01072bf:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01072c3:	74 0c                	je     c01072d1 <copy_range+0x21c>
c01072c5:	8b 45 10             	mov    0x10(%ebp),%eax
c01072c8:	3b 45 14             	cmp    0x14(%ebp),%eax
c01072cb:	0f 82 64 fe ff ff    	jb     c0107135 <copy_range+0x80>
    return 0;
c01072d1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01072d6:	c9                   	leave  
c01072d7:	c3                   	ret    

c01072d8 <page_remove>:

//page_remove - free an Page which is related linear address la and has an validated pte
void
page_remove(pde_t *pgdir, uintptr_t la) {
c01072d8:	55                   	push   %ebp
c01072d9:	89 e5                	mov    %esp,%ebp
c01072db:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c01072de:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01072e5:	00 
c01072e6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01072e9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01072ed:	8b 45 08             	mov    0x8(%ebp),%eax
c01072f0:	89 04 24             	mov    %eax,(%esp)
c01072f3:	e8 d0 f9 ff ff       	call   c0106cc8 <get_pte>
c01072f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep != NULL) {
c01072fb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01072ff:	74 19                	je     c010731a <page_remove+0x42>
        page_remove_pte(pgdir, la, ptep);
c0107301:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107304:	89 44 24 08          	mov    %eax,0x8(%esp)
c0107308:	8b 45 0c             	mov    0xc(%ebp),%eax
c010730b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010730f:	8b 45 08             	mov    0x8(%ebp),%eax
c0107312:	89 04 24             	mov    %eax,(%esp)
c0107315:	e8 3f fb ff ff       	call   c0106e59 <page_remove_pte>
    }
}
c010731a:	c9                   	leave  
c010731b:	c3                   	ret    

c010731c <page_insert>:
//  la:    the linear address need to map
//  perm:  the permission of this Page which is setted in related pte
// return value: always 0
//note: PT is changed, so the TLB need to be invalidate 
int
page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm) {
c010731c:	55                   	push   %ebp
c010731d:	89 e5                	mov    %esp,%ebp
c010731f:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 1);
c0107322:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0107329:	00 
c010732a:	8b 45 10             	mov    0x10(%ebp),%eax
c010732d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107331:	8b 45 08             	mov    0x8(%ebp),%eax
c0107334:	89 04 24             	mov    %eax,(%esp)
c0107337:	e8 8c f9 ff ff       	call   c0106cc8 <get_pte>
c010733c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep == NULL) {
c010733f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107343:	75 0a                	jne    c010734f <page_insert+0x33>
        return -E_NO_MEM;
c0107345:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010734a:	e9 84 00 00 00       	jmp    c01073d3 <page_insert+0xb7>
    }
    page_ref_inc(page);
c010734f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107352:	89 04 24             	mov    %eax,(%esp)
c0107355:	e8 09 f0 ff ff       	call   c0106363 <page_ref_inc>
    if (*ptep & PTE_P) {
c010735a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010735d:	8b 00                	mov    (%eax),%eax
c010735f:	83 e0 01             	and    $0x1,%eax
c0107362:	85 c0                	test   %eax,%eax
c0107364:	74 3e                	je     c01073a4 <page_insert+0x88>
        struct Page *p = pte2page(*ptep);
c0107366:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107369:	8b 00                	mov    (%eax),%eax
c010736b:	89 04 24             	mov    %eax,(%esp)
c010736e:	e8 83 ef ff ff       	call   c01062f6 <pte2page>
c0107373:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (p == page) {
c0107376:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107379:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010737c:	75 0d                	jne    c010738b <page_insert+0x6f>
            page_ref_dec(page);
c010737e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107381:	89 04 24             	mov    %eax,(%esp)
c0107384:	e8 f1 ef ff ff       	call   c010637a <page_ref_dec>
c0107389:	eb 19                	jmp    c01073a4 <page_insert+0x88>
        }
        else {
            page_remove_pte(pgdir, la, ptep);
c010738b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010738e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0107392:	8b 45 10             	mov    0x10(%ebp),%eax
c0107395:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107399:	8b 45 08             	mov    0x8(%ebp),%eax
c010739c:	89 04 24             	mov    %eax,(%esp)
c010739f:	e8 b5 fa ff ff       	call   c0106e59 <page_remove_pte>
        }
    }
    *ptep = page2pa(page) | PTE_P | perm;
c01073a4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01073a7:	89 04 24             	mov    %eax,(%esp)
c01073aa:	e8 8e ee ff ff       	call   c010623d <page2pa>
c01073af:	0b 45 14             	or     0x14(%ebp),%eax
c01073b2:	83 c8 01             	or     $0x1,%eax
c01073b5:	89 c2                	mov    %eax,%edx
c01073b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01073ba:	89 10                	mov    %edx,(%eax)
    tlb_invalidate(pgdir, la);
c01073bc:	8b 45 10             	mov    0x10(%ebp),%eax
c01073bf:	89 44 24 04          	mov    %eax,0x4(%esp)
c01073c3:	8b 45 08             	mov    0x8(%ebp),%eax
c01073c6:	89 04 24             	mov    %eax,(%esp)
c01073c9:	e8 07 00 00 00       	call   c01073d5 <tlb_invalidate>
    return 0;
c01073ce:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01073d3:	c9                   	leave  
c01073d4:	c3                   	ret    

c01073d5 <tlb_invalidate>:

// invalidate a TLB entry, but only if the page tables being
// edited are the ones currently in use by the processor.
void
tlb_invalidate(pde_t *pgdir, uintptr_t la) {
c01073d5:	55                   	push   %ebp
c01073d6:	89 e5                	mov    %esp,%ebp
c01073d8:	83 ec 28             	sub    $0x28,%esp
}

static inline uintptr_t
rcr3(void) {
    uintptr_t cr3;
    asm volatile ("mov %%cr3, %0" : "=r" (cr3) :: "memory");
c01073db:	0f 20 d8             	mov    %cr3,%eax
c01073de:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr3;
c01073e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
    if (rcr3() == PADDR(pgdir)) {
c01073e4:	89 c2                	mov    %eax,%edx
c01073e6:	8b 45 08             	mov    0x8(%ebp),%eax
c01073e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01073ec:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c01073f3:	77 23                	ja     c0107418 <tlb_invalidate+0x43>
c01073f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01073f8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01073fc:	c7 44 24 08 44 fd 10 	movl   $0xc010fd44,0x8(%esp)
c0107403:	c0 
c0107404:	c7 44 24 04 58 02 00 	movl   $0x258,0x4(%esp)
c010740b:	00 
c010740c:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c0107413:	e8 45 ae ff ff       	call   c010225d <__panic>
c0107418:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010741b:	05 00 00 00 40       	add    $0x40000000,%eax
c0107420:	39 c2                	cmp    %eax,%edx
c0107422:	75 0c                	jne    c0107430 <tlb_invalidate+0x5b>
        invlpg((void *)la);
c0107424:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107427:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static inline void
invlpg(void *addr) {
    asm volatile ("invlpg (%0)" :: "r" (addr) : "memory");
c010742a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010742d:	0f 01 38             	invlpg (%eax)
    }
}
c0107430:	c9                   	leave  
c0107431:	c3                   	ret    

c0107432 <pgdir_alloc_page>:

// pgdir_alloc_page - call alloc_page & page_insert functions to 
//                  - allocate a page size memory & setup an addr map
//                  - pa<->la with linear address la and the PDT pgdir
struct Page *
pgdir_alloc_page(pde_t *pgdir, uintptr_t la, uint32_t perm) {
c0107432:	55                   	push   %ebp
c0107433:	89 e5                	mov    %esp,%ebp
c0107435:	83 ec 28             	sub    $0x28,%esp
    struct Page *page = alloc_page();
c0107438:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010743f:	e8 0d f1 ff ff       	call   c0106551 <alloc_pages>
c0107444:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c0107447:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010744b:	0f 84 b0 00 00 00    	je     c0107501 <pgdir_alloc_page+0xcf>
        if (page_insert(pgdir, page, la, perm) != 0) {
c0107451:	8b 45 10             	mov    0x10(%ebp),%eax
c0107454:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0107458:	8b 45 0c             	mov    0xc(%ebp),%eax
c010745b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010745f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107462:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107466:	8b 45 08             	mov    0x8(%ebp),%eax
c0107469:	89 04 24             	mov    %eax,(%esp)
c010746c:	e8 ab fe ff ff       	call   c010731c <page_insert>
c0107471:	85 c0                	test   %eax,%eax
c0107473:	74 1a                	je     c010748f <pgdir_alloc_page+0x5d>
            free_page(page);
c0107475:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010747c:	00 
c010747d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107480:	89 04 24             	mov    %eax,(%esp)
c0107483:	e8 34 f1 ff ff       	call   c01065bc <free_pages>
            return NULL;
c0107488:	b8 00 00 00 00       	mov    $0x0,%eax
c010748d:	eb 75                	jmp    c0107504 <pgdir_alloc_page+0xd2>
        }
        if (swap_init_ok){
c010748f:	a1 2c 64 1c c0       	mov    0xc01c642c,%eax
c0107494:	85 c0                	test   %eax,%eax
c0107496:	74 69                	je     c0107501 <pgdir_alloc_page+0xcf>
            if(check_mm_struct!=NULL) {
c0107498:	a1 cc 85 1c c0       	mov    0xc01c85cc,%eax
c010749d:	85 c0                	test   %eax,%eax
c010749f:	74 60                	je     c0107501 <pgdir_alloc_page+0xcf>
                swap_map_swappable(check_mm_struct, la, page, 0);
c01074a1:	a1 cc 85 1c c0       	mov    0xc01c85cc,%eax
c01074a6:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01074ad:	00 
c01074ae:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01074b1:	89 54 24 08          	mov    %edx,0x8(%esp)
c01074b5:	8b 55 0c             	mov    0xc(%ebp),%edx
c01074b8:	89 54 24 04          	mov    %edx,0x4(%esp)
c01074bc:	89 04 24             	mov    %eax,(%esp)
c01074bf:	e8 48 0e 00 00       	call   c010830c <swap_map_swappable>
                page->pra_vaddr=la;
c01074c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01074c7:	8b 55 0c             	mov    0xc(%ebp),%edx
c01074ca:	89 50 20             	mov    %edx,0x20(%eax)
                assert(page_ref(page) == 1);
c01074cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01074d0:	89 04 24             	mov    %eax,(%esp)
c01074d3:	e8 74 ee ff ff       	call   c010634c <page_ref>
c01074d8:	83 f8 01             	cmp    $0x1,%eax
c01074db:	74 24                	je     c0107501 <pgdir_alloc_page+0xcf>
c01074dd:	c7 44 24 0c 29 fe 10 	movl   $0xc010fe29,0xc(%esp)
c01074e4:	c0 
c01074e5:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c01074ec:	c0 
c01074ed:	c7 44 24 04 6c 02 00 	movl   $0x26c,0x4(%esp)
c01074f4:	00 
c01074f5:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c01074fc:	e8 5c ad ff ff       	call   c010225d <__panic>
            }
        }

    }

    return page;
c0107501:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107504:	c9                   	leave  
c0107505:	c3                   	ret    

c0107506 <check_alloc_page>:

static void
check_alloc_page(void) {
c0107506:	55                   	push   %ebp
c0107507:	89 e5                	mov    %esp,%ebp
c0107509:	83 ec 18             	sub    $0x18,%esp
    pmm_manager->check();
c010750c:	a1 e8 84 1c c0       	mov    0xc01c84e8,%eax
c0107511:	8b 40 18             	mov    0x18(%eax),%eax
c0107514:	ff d0                	call   *%eax
    cprintf("check_alloc_page() succeeded!\n");
c0107516:	c7 04 24 40 fe 10 c0 	movl   $0xc010fe40,(%esp)
c010751d:	e8 b9 a2 ff ff       	call   c01017db <cprintf>
}
c0107522:	c9                   	leave  
c0107523:	c3                   	ret    

c0107524 <check_pgdir>:

static void
check_pgdir(void) {
c0107524:	55                   	push   %ebp
c0107525:	89 e5                	mov    %esp,%ebp
c0107527:	83 ec 38             	sub    $0x38,%esp
    assert(npage <= KMEMSIZE / PGSIZE);
c010752a:	a1 a0 63 1c c0       	mov    0xc01c63a0,%eax
c010752f:	3d 00 80 03 00       	cmp    $0x38000,%eax
c0107534:	76 24                	jbe    c010755a <check_pgdir+0x36>
c0107536:	c7 44 24 0c 5f fe 10 	movl   $0xc010fe5f,0xc(%esp)
c010753d:	c0 
c010753e:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c0107545:	c0 
c0107546:	c7 44 24 04 84 02 00 	movl   $0x284,0x4(%esp)
c010754d:	00 
c010754e:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c0107555:	e8 03 ad ff ff       	call   c010225d <__panic>
    assert(boot_pgdir != NULL && (uint32_t)PGOFF(boot_pgdir) == 0);
c010755a:	a1 a4 63 1c c0       	mov    0xc01c63a4,%eax
c010755f:	85 c0                	test   %eax,%eax
c0107561:	74 0e                	je     c0107571 <check_pgdir+0x4d>
c0107563:	a1 a4 63 1c c0       	mov    0xc01c63a4,%eax
c0107568:	25 ff 0f 00 00       	and    $0xfff,%eax
c010756d:	85 c0                	test   %eax,%eax
c010756f:	74 24                	je     c0107595 <check_pgdir+0x71>
c0107571:	c7 44 24 0c 7c fe 10 	movl   $0xc010fe7c,0xc(%esp)
c0107578:	c0 
c0107579:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c0107580:	c0 
c0107581:	c7 44 24 04 85 02 00 	movl   $0x285,0x4(%esp)
c0107588:	00 
c0107589:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c0107590:	e8 c8 ac ff ff       	call   c010225d <__panic>
    assert(get_page(boot_pgdir, 0x0, NULL) == NULL);
c0107595:	a1 a4 63 1c c0       	mov    0xc01c63a4,%eax
c010759a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01075a1:	00 
c01075a2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01075a9:	00 
c01075aa:	89 04 24             	mov    %eax,(%esp)
c01075ad:	e8 4e f8 ff ff       	call   c0106e00 <get_page>
c01075b2:	85 c0                	test   %eax,%eax
c01075b4:	74 24                	je     c01075da <check_pgdir+0xb6>
c01075b6:	c7 44 24 0c b4 fe 10 	movl   $0xc010feb4,0xc(%esp)
c01075bd:	c0 
c01075be:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c01075c5:	c0 
c01075c6:	c7 44 24 04 86 02 00 	movl   $0x286,0x4(%esp)
c01075cd:	00 
c01075ce:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c01075d5:	e8 83 ac ff ff       	call   c010225d <__panic>

    struct Page *p1, *p2;
    p1 = alloc_page();
c01075da:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01075e1:	e8 6b ef ff ff       	call   c0106551 <alloc_pages>
c01075e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(page_insert(boot_pgdir, p1, 0x0, 0) == 0);
c01075e9:	a1 a4 63 1c c0       	mov    0xc01c63a4,%eax
c01075ee:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01075f5:	00 
c01075f6:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01075fd:	00 
c01075fe:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0107601:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107605:	89 04 24             	mov    %eax,(%esp)
c0107608:	e8 0f fd ff ff       	call   c010731c <page_insert>
c010760d:	85 c0                	test   %eax,%eax
c010760f:	74 24                	je     c0107635 <check_pgdir+0x111>
c0107611:	c7 44 24 0c dc fe 10 	movl   $0xc010fedc,0xc(%esp)
c0107618:	c0 
c0107619:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c0107620:	c0 
c0107621:	c7 44 24 04 8a 02 00 	movl   $0x28a,0x4(%esp)
c0107628:	00 
c0107629:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c0107630:	e8 28 ac ff ff       	call   c010225d <__panic>

    pte_t *ptep;
    assert((ptep = get_pte(boot_pgdir, 0x0, 0)) != NULL);
c0107635:	a1 a4 63 1c c0       	mov    0xc01c63a4,%eax
c010763a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0107641:	00 
c0107642:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0107649:	00 
c010764a:	89 04 24             	mov    %eax,(%esp)
c010764d:	e8 76 f6 ff ff       	call   c0106cc8 <get_pte>
c0107652:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107655:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0107659:	75 24                	jne    c010767f <check_pgdir+0x15b>
c010765b:	c7 44 24 0c 08 ff 10 	movl   $0xc010ff08,0xc(%esp)
c0107662:	c0 
c0107663:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c010766a:	c0 
c010766b:	c7 44 24 04 8d 02 00 	movl   $0x28d,0x4(%esp)
c0107672:	00 
c0107673:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c010767a:	e8 de ab ff ff       	call   c010225d <__panic>
    assert(pa2page(*ptep) == p1);
c010767f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107682:	8b 00                	mov    (%eax),%eax
c0107684:	89 04 24             	mov    %eax,(%esp)
c0107687:	e8 c7 eb ff ff       	call   c0106253 <pa2page>
c010768c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010768f:	74 24                	je     c01076b5 <check_pgdir+0x191>
c0107691:	c7 44 24 0c 35 ff 10 	movl   $0xc010ff35,0xc(%esp)
c0107698:	c0 
c0107699:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c01076a0:	c0 
c01076a1:	c7 44 24 04 8e 02 00 	movl   $0x28e,0x4(%esp)
c01076a8:	00 
c01076a9:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c01076b0:	e8 a8 ab ff ff       	call   c010225d <__panic>
    assert(page_ref(p1) == 1);
c01076b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01076b8:	89 04 24             	mov    %eax,(%esp)
c01076bb:	e8 8c ec ff ff       	call   c010634c <page_ref>
c01076c0:	83 f8 01             	cmp    $0x1,%eax
c01076c3:	74 24                	je     c01076e9 <check_pgdir+0x1c5>
c01076c5:	c7 44 24 0c 4a ff 10 	movl   $0xc010ff4a,0xc(%esp)
c01076cc:	c0 
c01076cd:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c01076d4:	c0 
c01076d5:	c7 44 24 04 8f 02 00 	movl   $0x28f,0x4(%esp)
c01076dc:	00 
c01076dd:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c01076e4:	e8 74 ab ff ff       	call   c010225d <__panic>

    ptep = &((pte_t *)KADDR(PDE_ADDR(boot_pgdir[0])))[1];
c01076e9:	a1 a4 63 1c c0       	mov    0xc01c63a4,%eax
c01076ee:	8b 00                	mov    (%eax),%eax
c01076f0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01076f5:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01076f8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01076fb:	c1 e8 0c             	shr    $0xc,%eax
c01076fe:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0107701:	a1 a0 63 1c c0       	mov    0xc01c63a0,%eax
c0107706:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c0107709:	72 23                	jb     c010772e <check_pgdir+0x20a>
c010770b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010770e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0107712:	c7 44 24 08 a0 fc 10 	movl   $0xc010fca0,0x8(%esp)
c0107719:	c0 
c010771a:	c7 44 24 04 91 02 00 	movl   $0x291,0x4(%esp)
c0107721:	00 
c0107722:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c0107729:	e8 2f ab ff ff       	call   c010225d <__panic>
c010772e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107731:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0107736:	83 c0 04             	add    $0x4,%eax
c0107739:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(get_pte(boot_pgdir, PGSIZE, 0) == ptep);
c010773c:	a1 a4 63 1c c0       	mov    0xc01c63a4,%eax
c0107741:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0107748:	00 
c0107749:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0107750:	00 
c0107751:	89 04 24             	mov    %eax,(%esp)
c0107754:	e8 6f f5 ff ff       	call   c0106cc8 <get_pte>
c0107759:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010775c:	74 24                	je     c0107782 <check_pgdir+0x25e>
c010775e:	c7 44 24 0c 5c ff 10 	movl   $0xc010ff5c,0xc(%esp)
c0107765:	c0 
c0107766:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c010776d:	c0 
c010776e:	c7 44 24 04 92 02 00 	movl   $0x292,0x4(%esp)
c0107775:	00 
c0107776:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c010777d:	e8 db aa ff ff       	call   c010225d <__panic>

    p2 = alloc_page();
c0107782:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0107789:	e8 c3 ed ff ff       	call   c0106551 <alloc_pages>
c010778e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(page_insert(boot_pgdir, p2, PGSIZE, PTE_U | PTE_W) == 0);
c0107791:	a1 a4 63 1c c0       	mov    0xc01c63a4,%eax
c0107796:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
c010779d:	00 
c010779e:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c01077a5:	00 
c01077a6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01077a9:	89 54 24 04          	mov    %edx,0x4(%esp)
c01077ad:	89 04 24             	mov    %eax,(%esp)
c01077b0:	e8 67 fb ff ff       	call   c010731c <page_insert>
c01077b5:	85 c0                	test   %eax,%eax
c01077b7:	74 24                	je     c01077dd <check_pgdir+0x2b9>
c01077b9:	c7 44 24 0c 84 ff 10 	movl   $0xc010ff84,0xc(%esp)
c01077c0:	c0 
c01077c1:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c01077c8:	c0 
c01077c9:	c7 44 24 04 95 02 00 	movl   $0x295,0x4(%esp)
c01077d0:	00 
c01077d1:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c01077d8:	e8 80 aa ff ff       	call   c010225d <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c01077dd:	a1 a4 63 1c c0       	mov    0xc01c63a4,%eax
c01077e2:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01077e9:	00 
c01077ea:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c01077f1:	00 
c01077f2:	89 04 24             	mov    %eax,(%esp)
c01077f5:	e8 ce f4 ff ff       	call   c0106cc8 <get_pte>
c01077fa:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01077fd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0107801:	75 24                	jne    c0107827 <check_pgdir+0x303>
c0107803:	c7 44 24 0c bc ff 10 	movl   $0xc010ffbc,0xc(%esp)
c010780a:	c0 
c010780b:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c0107812:	c0 
c0107813:	c7 44 24 04 96 02 00 	movl   $0x296,0x4(%esp)
c010781a:	00 
c010781b:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c0107822:	e8 36 aa ff ff       	call   c010225d <__panic>
    assert(*ptep & PTE_U);
c0107827:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010782a:	8b 00                	mov    (%eax),%eax
c010782c:	83 e0 04             	and    $0x4,%eax
c010782f:	85 c0                	test   %eax,%eax
c0107831:	75 24                	jne    c0107857 <check_pgdir+0x333>
c0107833:	c7 44 24 0c ec ff 10 	movl   $0xc010ffec,0xc(%esp)
c010783a:	c0 
c010783b:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c0107842:	c0 
c0107843:	c7 44 24 04 97 02 00 	movl   $0x297,0x4(%esp)
c010784a:	00 
c010784b:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c0107852:	e8 06 aa ff ff       	call   c010225d <__panic>
    assert(*ptep & PTE_W);
c0107857:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010785a:	8b 00                	mov    (%eax),%eax
c010785c:	83 e0 02             	and    $0x2,%eax
c010785f:	85 c0                	test   %eax,%eax
c0107861:	75 24                	jne    c0107887 <check_pgdir+0x363>
c0107863:	c7 44 24 0c fa ff 10 	movl   $0xc010fffa,0xc(%esp)
c010786a:	c0 
c010786b:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c0107872:	c0 
c0107873:	c7 44 24 04 98 02 00 	movl   $0x298,0x4(%esp)
c010787a:	00 
c010787b:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c0107882:	e8 d6 a9 ff ff       	call   c010225d <__panic>
    assert(boot_pgdir[0] & PTE_U);
c0107887:	a1 a4 63 1c c0       	mov    0xc01c63a4,%eax
c010788c:	8b 00                	mov    (%eax),%eax
c010788e:	83 e0 04             	and    $0x4,%eax
c0107891:	85 c0                	test   %eax,%eax
c0107893:	75 24                	jne    c01078b9 <check_pgdir+0x395>
c0107895:	c7 44 24 0c 08 00 11 	movl   $0xc0110008,0xc(%esp)
c010789c:	c0 
c010789d:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c01078a4:	c0 
c01078a5:	c7 44 24 04 99 02 00 	movl   $0x299,0x4(%esp)
c01078ac:	00 
c01078ad:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c01078b4:	e8 a4 a9 ff ff       	call   c010225d <__panic>
    assert(page_ref(p2) == 1);
c01078b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01078bc:	89 04 24             	mov    %eax,(%esp)
c01078bf:	e8 88 ea ff ff       	call   c010634c <page_ref>
c01078c4:	83 f8 01             	cmp    $0x1,%eax
c01078c7:	74 24                	je     c01078ed <check_pgdir+0x3c9>
c01078c9:	c7 44 24 0c 1e 00 11 	movl   $0xc011001e,0xc(%esp)
c01078d0:	c0 
c01078d1:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c01078d8:	c0 
c01078d9:	c7 44 24 04 9a 02 00 	movl   $0x29a,0x4(%esp)
c01078e0:	00 
c01078e1:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c01078e8:	e8 70 a9 ff ff       	call   c010225d <__panic>

    assert(page_insert(boot_pgdir, p1, PGSIZE, 0) == 0);
c01078ed:	a1 a4 63 1c c0       	mov    0xc01c63a4,%eax
c01078f2:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01078f9:	00 
c01078fa:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0107901:	00 
c0107902:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0107905:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107909:	89 04 24             	mov    %eax,(%esp)
c010790c:	e8 0b fa ff ff       	call   c010731c <page_insert>
c0107911:	85 c0                	test   %eax,%eax
c0107913:	74 24                	je     c0107939 <check_pgdir+0x415>
c0107915:	c7 44 24 0c 30 00 11 	movl   $0xc0110030,0xc(%esp)
c010791c:	c0 
c010791d:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c0107924:	c0 
c0107925:	c7 44 24 04 9c 02 00 	movl   $0x29c,0x4(%esp)
c010792c:	00 
c010792d:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c0107934:	e8 24 a9 ff ff       	call   c010225d <__panic>
    assert(page_ref(p1) == 2);
c0107939:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010793c:	89 04 24             	mov    %eax,(%esp)
c010793f:	e8 08 ea ff ff       	call   c010634c <page_ref>
c0107944:	83 f8 02             	cmp    $0x2,%eax
c0107947:	74 24                	je     c010796d <check_pgdir+0x449>
c0107949:	c7 44 24 0c 5c 00 11 	movl   $0xc011005c,0xc(%esp)
c0107950:	c0 
c0107951:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c0107958:	c0 
c0107959:	c7 44 24 04 9d 02 00 	movl   $0x29d,0x4(%esp)
c0107960:	00 
c0107961:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c0107968:	e8 f0 a8 ff ff       	call   c010225d <__panic>
    assert(page_ref(p2) == 0);
c010796d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107970:	89 04 24             	mov    %eax,(%esp)
c0107973:	e8 d4 e9 ff ff       	call   c010634c <page_ref>
c0107978:	85 c0                	test   %eax,%eax
c010797a:	74 24                	je     c01079a0 <check_pgdir+0x47c>
c010797c:	c7 44 24 0c 6e 00 11 	movl   $0xc011006e,0xc(%esp)
c0107983:	c0 
c0107984:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c010798b:	c0 
c010798c:	c7 44 24 04 9e 02 00 	movl   $0x29e,0x4(%esp)
c0107993:	00 
c0107994:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c010799b:	e8 bd a8 ff ff       	call   c010225d <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c01079a0:	a1 a4 63 1c c0       	mov    0xc01c63a4,%eax
c01079a5:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01079ac:	00 
c01079ad:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c01079b4:	00 
c01079b5:	89 04 24             	mov    %eax,(%esp)
c01079b8:	e8 0b f3 ff ff       	call   c0106cc8 <get_pte>
c01079bd:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01079c0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01079c4:	75 24                	jne    c01079ea <check_pgdir+0x4c6>
c01079c6:	c7 44 24 0c bc ff 10 	movl   $0xc010ffbc,0xc(%esp)
c01079cd:	c0 
c01079ce:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c01079d5:	c0 
c01079d6:	c7 44 24 04 9f 02 00 	movl   $0x29f,0x4(%esp)
c01079dd:	00 
c01079de:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c01079e5:	e8 73 a8 ff ff       	call   c010225d <__panic>
    assert(pa2page(*ptep) == p1);
c01079ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01079ed:	8b 00                	mov    (%eax),%eax
c01079ef:	89 04 24             	mov    %eax,(%esp)
c01079f2:	e8 5c e8 ff ff       	call   c0106253 <pa2page>
c01079f7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01079fa:	74 24                	je     c0107a20 <check_pgdir+0x4fc>
c01079fc:	c7 44 24 0c 35 ff 10 	movl   $0xc010ff35,0xc(%esp)
c0107a03:	c0 
c0107a04:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c0107a0b:	c0 
c0107a0c:	c7 44 24 04 a0 02 00 	movl   $0x2a0,0x4(%esp)
c0107a13:	00 
c0107a14:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c0107a1b:	e8 3d a8 ff ff       	call   c010225d <__panic>
    assert((*ptep & PTE_U) == 0);
c0107a20:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107a23:	8b 00                	mov    (%eax),%eax
c0107a25:	83 e0 04             	and    $0x4,%eax
c0107a28:	85 c0                	test   %eax,%eax
c0107a2a:	74 24                	je     c0107a50 <check_pgdir+0x52c>
c0107a2c:	c7 44 24 0c 80 00 11 	movl   $0xc0110080,0xc(%esp)
c0107a33:	c0 
c0107a34:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c0107a3b:	c0 
c0107a3c:	c7 44 24 04 a1 02 00 	movl   $0x2a1,0x4(%esp)
c0107a43:	00 
c0107a44:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c0107a4b:	e8 0d a8 ff ff       	call   c010225d <__panic>

    page_remove(boot_pgdir, 0x0);
c0107a50:	a1 a4 63 1c c0       	mov    0xc01c63a4,%eax
c0107a55:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0107a5c:	00 
c0107a5d:	89 04 24             	mov    %eax,(%esp)
c0107a60:	e8 73 f8 ff ff       	call   c01072d8 <page_remove>
    assert(page_ref(p1) == 1);
c0107a65:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107a68:	89 04 24             	mov    %eax,(%esp)
c0107a6b:	e8 dc e8 ff ff       	call   c010634c <page_ref>
c0107a70:	83 f8 01             	cmp    $0x1,%eax
c0107a73:	74 24                	je     c0107a99 <check_pgdir+0x575>
c0107a75:	c7 44 24 0c 4a ff 10 	movl   $0xc010ff4a,0xc(%esp)
c0107a7c:	c0 
c0107a7d:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c0107a84:	c0 
c0107a85:	c7 44 24 04 a4 02 00 	movl   $0x2a4,0x4(%esp)
c0107a8c:	00 
c0107a8d:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c0107a94:	e8 c4 a7 ff ff       	call   c010225d <__panic>
    assert(page_ref(p2) == 0);
c0107a99:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107a9c:	89 04 24             	mov    %eax,(%esp)
c0107a9f:	e8 a8 e8 ff ff       	call   c010634c <page_ref>
c0107aa4:	85 c0                	test   %eax,%eax
c0107aa6:	74 24                	je     c0107acc <check_pgdir+0x5a8>
c0107aa8:	c7 44 24 0c 6e 00 11 	movl   $0xc011006e,0xc(%esp)
c0107aaf:	c0 
c0107ab0:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c0107ab7:	c0 
c0107ab8:	c7 44 24 04 a5 02 00 	movl   $0x2a5,0x4(%esp)
c0107abf:	00 
c0107ac0:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c0107ac7:	e8 91 a7 ff ff       	call   c010225d <__panic>

    page_remove(boot_pgdir, PGSIZE);
c0107acc:	a1 a4 63 1c c0       	mov    0xc01c63a4,%eax
c0107ad1:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0107ad8:	00 
c0107ad9:	89 04 24             	mov    %eax,(%esp)
c0107adc:	e8 f7 f7 ff ff       	call   c01072d8 <page_remove>
    assert(page_ref(p1) == 0);
c0107ae1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107ae4:	89 04 24             	mov    %eax,(%esp)
c0107ae7:	e8 60 e8 ff ff       	call   c010634c <page_ref>
c0107aec:	85 c0                	test   %eax,%eax
c0107aee:	74 24                	je     c0107b14 <check_pgdir+0x5f0>
c0107af0:	c7 44 24 0c 95 00 11 	movl   $0xc0110095,0xc(%esp)
c0107af7:	c0 
c0107af8:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c0107aff:	c0 
c0107b00:	c7 44 24 04 a8 02 00 	movl   $0x2a8,0x4(%esp)
c0107b07:	00 
c0107b08:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c0107b0f:	e8 49 a7 ff ff       	call   c010225d <__panic>
    assert(page_ref(p2) == 0);
c0107b14:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107b17:	89 04 24             	mov    %eax,(%esp)
c0107b1a:	e8 2d e8 ff ff       	call   c010634c <page_ref>
c0107b1f:	85 c0                	test   %eax,%eax
c0107b21:	74 24                	je     c0107b47 <check_pgdir+0x623>
c0107b23:	c7 44 24 0c 6e 00 11 	movl   $0xc011006e,0xc(%esp)
c0107b2a:	c0 
c0107b2b:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c0107b32:	c0 
c0107b33:	c7 44 24 04 a9 02 00 	movl   $0x2a9,0x4(%esp)
c0107b3a:	00 
c0107b3b:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c0107b42:	e8 16 a7 ff ff       	call   c010225d <__panic>

    assert(page_ref(pa2page(boot_pgdir[0])) == 1);
c0107b47:	a1 a4 63 1c c0       	mov    0xc01c63a4,%eax
c0107b4c:	8b 00                	mov    (%eax),%eax
c0107b4e:	89 04 24             	mov    %eax,(%esp)
c0107b51:	e8 fd e6 ff ff       	call   c0106253 <pa2page>
c0107b56:	89 04 24             	mov    %eax,(%esp)
c0107b59:	e8 ee e7 ff ff       	call   c010634c <page_ref>
c0107b5e:	83 f8 01             	cmp    $0x1,%eax
c0107b61:	74 24                	je     c0107b87 <check_pgdir+0x663>
c0107b63:	c7 44 24 0c a8 00 11 	movl   $0xc01100a8,0xc(%esp)
c0107b6a:	c0 
c0107b6b:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c0107b72:	c0 
c0107b73:	c7 44 24 04 ab 02 00 	movl   $0x2ab,0x4(%esp)
c0107b7a:	00 
c0107b7b:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c0107b82:	e8 d6 a6 ff ff       	call   c010225d <__panic>
    free_page(pa2page(boot_pgdir[0]));
c0107b87:	a1 a4 63 1c c0       	mov    0xc01c63a4,%eax
c0107b8c:	8b 00                	mov    (%eax),%eax
c0107b8e:	89 04 24             	mov    %eax,(%esp)
c0107b91:	e8 bd e6 ff ff       	call   c0106253 <pa2page>
c0107b96:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107b9d:	00 
c0107b9e:	89 04 24             	mov    %eax,(%esp)
c0107ba1:	e8 16 ea ff ff       	call   c01065bc <free_pages>
    boot_pgdir[0] = 0;
c0107ba6:	a1 a4 63 1c c0       	mov    0xc01c63a4,%eax
c0107bab:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_pgdir() succeeded!\n");
c0107bb1:	c7 04 24 ce 00 11 c0 	movl   $0xc01100ce,(%esp)
c0107bb8:	e8 1e 9c ff ff       	call   c01017db <cprintf>
}
c0107bbd:	c9                   	leave  
c0107bbe:	c3                   	ret    

c0107bbf <check_boot_pgdir>:

static void
check_boot_pgdir(void) {
c0107bbf:	55                   	push   %ebp
c0107bc0:	89 e5                	mov    %esp,%ebp
c0107bc2:	83 ec 38             	sub    $0x38,%esp
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c0107bc5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0107bcc:	e9 ca 00 00 00       	jmp    c0107c9b <check_boot_pgdir+0xdc>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
c0107bd1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107bd4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107bd7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107bda:	c1 e8 0c             	shr    $0xc,%eax
c0107bdd:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107be0:	a1 a0 63 1c c0       	mov    0xc01c63a0,%eax
c0107be5:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c0107be8:	72 23                	jb     c0107c0d <check_boot_pgdir+0x4e>
c0107bea:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107bed:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0107bf1:	c7 44 24 08 a0 fc 10 	movl   $0xc010fca0,0x8(%esp)
c0107bf8:	c0 
c0107bf9:	c7 44 24 04 b7 02 00 	movl   $0x2b7,0x4(%esp)
c0107c00:	00 
c0107c01:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c0107c08:	e8 50 a6 ff ff       	call   c010225d <__panic>
c0107c0d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107c10:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0107c15:	89 c2                	mov    %eax,%edx
c0107c17:	a1 a4 63 1c c0       	mov    0xc01c63a4,%eax
c0107c1c:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0107c23:	00 
c0107c24:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107c28:	89 04 24             	mov    %eax,(%esp)
c0107c2b:	e8 98 f0 ff ff       	call   c0106cc8 <get_pte>
c0107c30:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0107c33:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0107c37:	75 24                	jne    c0107c5d <check_boot_pgdir+0x9e>
c0107c39:	c7 44 24 0c e8 00 11 	movl   $0xc01100e8,0xc(%esp)
c0107c40:	c0 
c0107c41:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c0107c48:	c0 
c0107c49:	c7 44 24 04 b7 02 00 	movl   $0x2b7,0x4(%esp)
c0107c50:	00 
c0107c51:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c0107c58:	e8 00 a6 ff ff       	call   c010225d <__panic>
        assert(PTE_ADDR(*ptep) == i);
c0107c5d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107c60:	8b 00                	mov    (%eax),%eax
c0107c62:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107c67:	89 c2                	mov    %eax,%edx
c0107c69:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107c6c:	39 c2                	cmp    %eax,%edx
c0107c6e:	74 24                	je     c0107c94 <check_boot_pgdir+0xd5>
c0107c70:	c7 44 24 0c 25 01 11 	movl   $0xc0110125,0xc(%esp)
c0107c77:	c0 
c0107c78:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c0107c7f:	c0 
c0107c80:	c7 44 24 04 b8 02 00 	movl   $0x2b8,0x4(%esp)
c0107c87:	00 
c0107c88:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c0107c8f:	e8 c9 a5 ff ff       	call   c010225d <__panic>

static void
check_boot_pgdir(void) {
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c0107c94:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
c0107c9b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0107c9e:	a1 a0 63 1c c0       	mov    0xc01c63a0,%eax
c0107ca3:	39 c2                	cmp    %eax,%edx
c0107ca5:	0f 82 26 ff ff ff    	jb     c0107bd1 <check_boot_pgdir+0x12>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
        assert(PTE_ADDR(*ptep) == i);
    }

    assert(PDE_ADDR(boot_pgdir[PDX(VPT)]) == PADDR(boot_pgdir));
c0107cab:	a1 a4 63 1c c0       	mov    0xc01c63a4,%eax
c0107cb0:	05 ac 0f 00 00       	add    $0xfac,%eax
c0107cb5:	8b 00                	mov    (%eax),%eax
c0107cb7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107cbc:	89 c2                	mov    %eax,%edx
c0107cbe:	a1 a4 63 1c c0       	mov    0xc01c63a4,%eax
c0107cc3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0107cc6:	81 7d e4 ff ff ff bf 	cmpl   $0xbfffffff,-0x1c(%ebp)
c0107ccd:	77 23                	ja     c0107cf2 <check_boot_pgdir+0x133>
c0107ccf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107cd2:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0107cd6:	c7 44 24 08 44 fd 10 	movl   $0xc010fd44,0x8(%esp)
c0107cdd:	c0 
c0107cde:	c7 44 24 04 bb 02 00 	movl   $0x2bb,0x4(%esp)
c0107ce5:	00 
c0107ce6:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c0107ced:	e8 6b a5 ff ff       	call   c010225d <__panic>
c0107cf2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107cf5:	05 00 00 00 40       	add    $0x40000000,%eax
c0107cfa:	39 c2                	cmp    %eax,%edx
c0107cfc:	74 24                	je     c0107d22 <check_boot_pgdir+0x163>
c0107cfe:	c7 44 24 0c 3c 01 11 	movl   $0xc011013c,0xc(%esp)
c0107d05:	c0 
c0107d06:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c0107d0d:	c0 
c0107d0e:	c7 44 24 04 bb 02 00 	movl   $0x2bb,0x4(%esp)
c0107d15:	00 
c0107d16:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c0107d1d:	e8 3b a5 ff ff       	call   c010225d <__panic>

    assert(boot_pgdir[0] == 0);
c0107d22:	a1 a4 63 1c c0       	mov    0xc01c63a4,%eax
c0107d27:	8b 00                	mov    (%eax),%eax
c0107d29:	85 c0                	test   %eax,%eax
c0107d2b:	74 24                	je     c0107d51 <check_boot_pgdir+0x192>
c0107d2d:	c7 44 24 0c 70 01 11 	movl   $0xc0110170,0xc(%esp)
c0107d34:	c0 
c0107d35:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c0107d3c:	c0 
c0107d3d:	c7 44 24 04 bd 02 00 	movl   $0x2bd,0x4(%esp)
c0107d44:	00 
c0107d45:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c0107d4c:	e8 0c a5 ff ff       	call   c010225d <__panic>

    struct Page *p;
    p = alloc_page();
c0107d51:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0107d58:	e8 f4 e7 ff ff       	call   c0106551 <alloc_pages>
c0107d5d:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(page_insert(boot_pgdir, p, 0x100, PTE_W) == 0);
c0107d60:	a1 a4 63 1c c0       	mov    0xc01c63a4,%eax
c0107d65:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c0107d6c:	00 
c0107d6d:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
c0107d74:	00 
c0107d75:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0107d78:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107d7c:	89 04 24             	mov    %eax,(%esp)
c0107d7f:	e8 98 f5 ff ff       	call   c010731c <page_insert>
c0107d84:	85 c0                	test   %eax,%eax
c0107d86:	74 24                	je     c0107dac <check_boot_pgdir+0x1ed>
c0107d88:	c7 44 24 0c 84 01 11 	movl   $0xc0110184,0xc(%esp)
c0107d8f:	c0 
c0107d90:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c0107d97:	c0 
c0107d98:	c7 44 24 04 c1 02 00 	movl   $0x2c1,0x4(%esp)
c0107d9f:	00 
c0107da0:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c0107da7:	e8 b1 a4 ff ff       	call   c010225d <__panic>
    assert(page_ref(p) == 1);
c0107dac:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107daf:	89 04 24             	mov    %eax,(%esp)
c0107db2:	e8 95 e5 ff ff       	call   c010634c <page_ref>
c0107db7:	83 f8 01             	cmp    $0x1,%eax
c0107dba:	74 24                	je     c0107de0 <check_boot_pgdir+0x221>
c0107dbc:	c7 44 24 0c b2 01 11 	movl   $0xc01101b2,0xc(%esp)
c0107dc3:	c0 
c0107dc4:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c0107dcb:	c0 
c0107dcc:	c7 44 24 04 c2 02 00 	movl   $0x2c2,0x4(%esp)
c0107dd3:	00 
c0107dd4:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c0107ddb:	e8 7d a4 ff ff       	call   c010225d <__panic>
    assert(page_insert(boot_pgdir, p, 0x100 + PGSIZE, PTE_W) == 0);
c0107de0:	a1 a4 63 1c c0       	mov    0xc01c63a4,%eax
c0107de5:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c0107dec:	00 
c0107ded:	c7 44 24 08 00 11 00 	movl   $0x1100,0x8(%esp)
c0107df4:	00 
c0107df5:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0107df8:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107dfc:	89 04 24             	mov    %eax,(%esp)
c0107dff:	e8 18 f5 ff ff       	call   c010731c <page_insert>
c0107e04:	85 c0                	test   %eax,%eax
c0107e06:	74 24                	je     c0107e2c <check_boot_pgdir+0x26d>
c0107e08:	c7 44 24 0c c4 01 11 	movl   $0xc01101c4,0xc(%esp)
c0107e0f:	c0 
c0107e10:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c0107e17:	c0 
c0107e18:	c7 44 24 04 c3 02 00 	movl   $0x2c3,0x4(%esp)
c0107e1f:	00 
c0107e20:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c0107e27:	e8 31 a4 ff ff       	call   c010225d <__panic>
    assert(page_ref(p) == 2);
c0107e2c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107e2f:	89 04 24             	mov    %eax,(%esp)
c0107e32:	e8 15 e5 ff ff       	call   c010634c <page_ref>
c0107e37:	83 f8 02             	cmp    $0x2,%eax
c0107e3a:	74 24                	je     c0107e60 <check_boot_pgdir+0x2a1>
c0107e3c:	c7 44 24 0c fb 01 11 	movl   $0xc01101fb,0xc(%esp)
c0107e43:	c0 
c0107e44:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c0107e4b:	c0 
c0107e4c:	c7 44 24 04 c4 02 00 	movl   $0x2c4,0x4(%esp)
c0107e53:	00 
c0107e54:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c0107e5b:	e8 fd a3 ff ff       	call   c010225d <__panic>

    const char *str = "ucore: Hello world!!";
c0107e60:	c7 45 dc 0c 02 11 c0 	movl   $0xc011020c,-0x24(%ebp)
    strcpy((void *)0x100, str);
c0107e67:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107e6a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107e6e:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0107e75:	e8 5b 69 00 00       	call   c010e7d5 <strcpy>
    assert(strcmp((void *)0x100, (void *)(0x100 + PGSIZE)) == 0);
c0107e7a:	c7 44 24 04 00 11 00 	movl   $0x1100,0x4(%esp)
c0107e81:	00 
c0107e82:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0107e89:	e8 c0 69 00 00       	call   c010e84e <strcmp>
c0107e8e:	85 c0                	test   %eax,%eax
c0107e90:	74 24                	je     c0107eb6 <check_boot_pgdir+0x2f7>
c0107e92:	c7 44 24 0c 24 02 11 	movl   $0xc0110224,0xc(%esp)
c0107e99:	c0 
c0107e9a:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c0107ea1:	c0 
c0107ea2:	c7 44 24 04 c8 02 00 	movl   $0x2c8,0x4(%esp)
c0107ea9:	00 
c0107eaa:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c0107eb1:	e8 a7 a3 ff ff       	call   c010225d <__panic>

    *(char *)(page2kva(p) + 0x100) = '\0';
c0107eb6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107eb9:	89 04 24             	mov    %eax,(%esp)
c0107ebc:	e8 e1 e3 ff ff       	call   c01062a2 <page2kva>
c0107ec1:	05 00 01 00 00       	add    $0x100,%eax
c0107ec6:	c6 00 00             	movb   $0x0,(%eax)
    assert(strlen((const char *)0x100) == 0);
c0107ec9:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0107ed0:	e8 a8 68 00 00       	call   c010e77d <strlen>
c0107ed5:	85 c0                	test   %eax,%eax
c0107ed7:	74 24                	je     c0107efd <check_boot_pgdir+0x33e>
c0107ed9:	c7 44 24 0c 5c 02 11 	movl   $0xc011025c,0xc(%esp)
c0107ee0:	c0 
c0107ee1:	c7 44 24 08 8d fd 10 	movl   $0xc010fd8d,0x8(%esp)
c0107ee8:	c0 
c0107ee9:	c7 44 24 04 cb 02 00 	movl   $0x2cb,0x4(%esp)
c0107ef0:	00 
c0107ef1:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c0107ef8:	e8 60 a3 ff ff       	call   c010225d <__panic>

    free_page(p);
c0107efd:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107f04:	00 
c0107f05:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107f08:	89 04 24             	mov    %eax,(%esp)
c0107f0b:	e8 ac e6 ff ff       	call   c01065bc <free_pages>
    free_page(pa2page(PDE_ADDR(boot_pgdir[0])));
c0107f10:	a1 a4 63 1c c0       	mov    0xc01c63a4,%eax
c0107f15:	8b 00                	mov    (%eax),%eax
c0107f17:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107f1c:	89 04 24             	mov    %eax,(%esp)
c0107f1f:	e8 2f e3 ff ff       	call   c0106253 <pa2page>
c0107f24:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107f2b:	00 
c0107f2c:	89 04 24             	mov    %eax,(%esp)
c0107f2f:	e8 88 e6 ff ff       	call   c01065bc <free_pages>
    boot_pgdir[0] = 0;
c0107f34:	a1 a4 63 1c c0       	mov    0xc01c63a4,%eax
c0107f39:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_boot_pgdir() succeeded!\n");
c0107f3f:	c7 04 24 80 02 11 c0 	movl   $0xc0110280,(%esp)
c0107f46:	e8 90 98 ff ff       	call   c01017db <cprintf>
}
c0107f4b:	c9                   	leave  
c0107f4c:	c3                   	ret    

c0107f4d <perm2str>:

//perm2str - use string 'u,r,w,-' to present the permission
static const char *
perm2str(int perm) {
c0107f4d:	55                   	push   %ebp
c0107f4e:	89 e5                	mov    %esp,%ebp
    static char str[4];
    str[0] = (perm & PTE_U) ? 'u' : '-';
c0107f50:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f53:	83 e0 04             	and    $0x4,%eax
c0107f56:	85 c0                	test   %eax,%eax
c0107f58:	74 07                	je     c0107f61 <perm2str+0x14>
c0107f5a:	b8 75 00 00 00       	mov    $0x75,%eax
c0107f5f:	eb 05                	jmp    c0107f66 <perm2str+0x19>
c0107f61:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0107f66:	a2 28 64 1c c0       	mov    %al,0xc01c6428
    str[1] = 'r';
c0107f6b:	c6 05 29 64 1c c0 72 	movb   $0x72,0xc01c6429
    str[2] = (perm & PTE_W) ? 'w' : '-';
c0107f72:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f75:	83 e0 02             	and    $0x2,%eax
c0107f78:	85 c0                	test   %eax,%eax
c0107f7a:	74 07                	je     c0107f83 <perm2str+0x36>
c0107f7c:	b8 77 00 00 00       	mov    $0x77,%eax
c0107f81:	eb 05                	jmp    c0107f88 <perm2str+0x3b>
c0107f83:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0107f88:	a2 2a 64 1c c0       	mov    %al,0xc01c642a
    str[3] = '\0';
c0107f8d:	c6 05 2b 64 1c c0 00 	movb   $0x0,0xc01c642b
    return str;
c0107f94:	b8 28 64 1c c0       	mov    $0xc01c6428,%eax
}
c0107f99:	5d                   	pop    %ebp
c0107f9a:	c3                   	ret    

c0107f9b <get_pgtable_items>:
//  table:       the beginning addr of table
//  left_store:  the pointer of the high side of table's next range
//  right_store: the pointer of the low side of table's next range
// return value: 0 - not a invalid item range, perm - a valid item range with perm permission 
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
c0107f9b:	55                   	push   %ebp
c0107f9c:	89 e5                	mov    %esp,%ebp
c0107f9e:	83 ec 10             	sub    $0x10,%esp
    if (start >= right) {
c0107fa1:	8b 45 10             	mov    0x10(%ebp),%eax
c0107fa4:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107fa7:	72 0a                	jb     c0107fb3 <get_pgtable_items+0x18>
        return 0;
c0107fa9:	b8 00 00 00 00       	mov    $0x0,%eax
c0107fae:	e9 9c 00 00 00       	jmp    c010804f <get_pgtable_items+0xb4>
    }
    while (start < right && !(table[start] & PTE_P)) {
c0107fb3:	eb 04                	jmp    c0107fb9 <get_pgtable_items+0x1e>
        start ++;
c0107fb5:	83 45 10 01          	addl   $0x1,0x10(%ebp)
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
    if (start >= right) {
        return 0;
    }
    while (start < right && !(table[start] & PTE_P)) {
c0107fb9:	8b 45 10             	mov    0x10(%ebp),%eax
c0107fbc:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107fbf:	73 18                	jae    c0107fd9 <get_pgtable_items+0x3e>
c0107fc1:	8b 45 10             	mov    0x10(%ebp),%eax
c0107fc4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107fcb:	8b 45 14             	mov    0x14(%ebp),%eax
c0107fce:	01 d0                	add    %edx,%eax
c0107fd0:	8b 00                	mov    (%eax),%eax
c0107fd2:	83 e0 01             	and    $0x1,%eax
c0107fd5:	85 c0                	test   %eax,%eax
c0107fd7:	74 dc                	je     c0107fb5 <get_pgtable_items+0x1a>
        start ++;
    }
    if (start < right) {
c0107fd9:	8b 45 10             	mov    0x10(%ebp),%eax
c0107fdc:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107fdf:	73 69                	jae    c010804a <get_pgtable_items+0xaf>
        if (left_store != NULL) {
c0107fe1:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0107fe5:	74 08                	je     c0107fef <get_pgtable_items+0x54>
            *left_store = start;
c0107fe7:	8b 45 18             	mov    0x18(%ebp),%eax
c0107fea:	8b 55 10             	mov    0x10(%ebp),%edx
c0107fed:	89 10                	mov    %edx,(%eax)
        }
        int perm = (table[start ++] & PTE_USER);
c0107fef:	8b 45 10             	mov    0x10(%ebp),%eax
c0107ff2:	8d 50 01             	lea    0x1(%eax),%edx
c0107ff5:	89 55 10             	mov    %edx,0x10(%ebp)
c0107ff8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107fff:	8b 45 14             	mov    0x14(%ebp),%eax
c0108002:	01 d0                	add    %edx,%eax
c0108004:	8b 00                	mov    (%eax),%eax
c0108006:	83 e0 07             	and    $0x7,%eax
c0108009:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while (start < right && (table[start] & PTE_USER) == perm) {
c010800c:	eb 04                	jmp    c0108012 <get_pgtable_items+0x77>
            start ++;
c010800e:	83 45 10 01          	addl   $0x1,0x10(%ebp)
    if (start < right) {
        if (left_store != NULL) {
            *left_store = start;
        }
        int perm = (table[start ++] & PTE_USER);
        while (start < right && (table[start] & PTE_USER) == perm) {
c0108012:	8b 45 10             	mov    0x10(%ebp),%eax
c0108015:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108018:	73 1d                	jae    c0108037 <get_pgtable_items+0x9c>
c010801a:	8b 45 10             	mov    0x10(%ebp),%eax
c010801d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0108024:	8b 45 14             	mov    0x14(%ebp),%eax
c0108027:	01 d0                	add    %edx,%eax
c0108029:	8b 00                	mov    (%eax),%eax
c010802b:	83 e0 07             	and    $0x7,%eax
c010802e:	89 c2                	mov    %eax,%edx
c0108030:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108033:	39 c2                	cmp    %eax,%edx
c0108035:	74 d7                	je     c010800e <get_pgtable_items+0x73>
            start ++;
        }
        if (right_store != NULL) {
c0108037:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c010803b:	74 08                	je     c0108045 <get_pgtable_items+0xaa>
            *right_store = start;
c010803d:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0108040:	8b 55 10             	mov    0x10(%ebp),%edx
c0108043:	89 10                	mov    %edx,(%eax)
        }
        return perm;
c0108045:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108048:	eb 05                	jmp    c010804f <get_pgtable_items+0xb4>
    }
    return 0;
c010804a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010804f:	c9                   	leave  
c0108050:	c3                   	ret    

c0108051 <print_pgdir>:

//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
c0108051:	55                   	push   %ebp
c0108052:	89 e5                	mov    %esp,%ebp
c0108054:	57                   	push   %edi
c0108055:	56                   	push   %esi
c0108056:	53                   	push   %ebx
c0108057:	83 ec 4c             	sub    $0x4c,%esp
    cprintf("-------------------- BEGIN --------------------\n");
c010805a:	c7 04 24 a0 02 11 c0 	movl   $0xc01102a0,(%esp)
c0108061:	e8 75 97 ff ff       	call   c01017db <cprintf>
    size_t left, right = 0, perm;
c0108066:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c010806d:	e9 fa 00 00 00       	jmp    c010816c <print_pgdir+0x11b>
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0108072:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108075:	89 04 24             	mov    %eax,(%esp)
c0108078:	e8 d0 fe ff ff       	call   c0107f4d <perm2str>
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
c010807d:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0108080:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108083:	29 d1                	sub    %edx,%ecx
c0108085:	89 ca                	mov    %ecx,%edx
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0108087:	89 d6                	mov    %edx,%esi
c0108089:	c1 e6 16             	shl    $0x16,%esi
c010808c:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010808f:	89 d3                	mov    %edx,%ebx
c0108091:	c1 e3 16             	shl    $0x16,%ebx
c0108094:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108097:	89 d1                	mov    %edx,%ecx
c0108099:	c1 e1 16             	shl    $0x16,%ecx
c010809c:	8b 7d dc             	mov    -0x24(%ebp),%edi
c010809f:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01080a2:	29 d7                	sub    %edx,%edi
c01080a4:	89 fa                	mov    %edi,%edx
c01080a6:	89 44 24 14          	mov    %eax,0x14(%esp)
c01080aa:	89 74 24 10          	mov    %esi,0x10(%esp)
c01080ae:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c01080b2:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01080b6:	89 54 24 04          	mov    %edx,0x4(%esp)
c01080ba:	c7 04 24 d1 02 11 c0 	movl   $0xc01102d1,(%esp)
c01080c1:	e8 15 97 ff ff       	call   c01017db <cprintf>
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
c01080c6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01080c9:	c1 e0 0a             	shl    $0xa,%eax
c01080cc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c01080cf:	eb 54                	jmp    c0108125 <print_pgdir+0xd4>
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c01080d1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01080d4:	89 04 24             	mov    %eax,(%esp)
c01080d7:	e8 71 fe ff ff       	call   c0107f4d <perm2str>
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
c01080dc:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c01080df:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01080e2:	29 d1                	sub    %edx,%ecx
c01080e4:	89 ca                	mov    %ecx,%edx
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c01080e6:	89 d6                	mov    %edx,%esi
c01080e8:	c1 e6 0c             	shl    $0xc,%esi
c01080eb:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01080ee:	89 d3                	mov    %edx,%ebx
c01080f0:	c1 e3 0c             	shl    $0xc,%ebx
c01080f3:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01080f6:	c1 e2 0c             	shl    $0xc,%edx
c01080f9:	89 d1                	mov    %edx,%ecx
c01080fb:	8b 7d d4             	mov    -0x2c(%ebp),%edi
c01080fe:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0108101:	29 d7                	sub    %edx,%edi
c0108103:	89 fa                	mov    %edi,%edx
c0108105:	89 44 24 14          	mov    %eax,0x14(%esp)
c0108109:	89 74 24 10          	mov    %esi,0x10(%esp)
c010810d:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0108111:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0108115:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108119:	c7 04 24 f0 02 11 c0 	movl   $0xc01102f0,(%esp)
c0108120:	e8 b6 96 ff ff       	call   c01017db <cprintf>
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0108125:	ba 00 00 c0 fa       	mov    $0xfac00000,%edx
c010812a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010812d:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0108130:	89 ce                	mov    %ecx,%esi
c0108132:	c1 e6 0a             	shl    $0xa,%esi
c0108135:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0108138:	89 cb                	mov    %ecx,%ebx
c010813a:	c1 e3 0a             	shl    $0xa,%ebx
c010813d:	8d 4d d4             	lea    -0x2c(%ebp),%ecx
c0108140:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c0108144:	8d 4d d8             	lea    -0x28(%ebp),%ecx
c0108147:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c010814b:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010814f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108153:	89 74 24 04          	mov    %esi,0x4(%esp)
c0108157:	89 1c 24             	mov    %ebx,(%esp)
c010815a:	e8 3c fe ff ff       	call   c0107f9b <get_pgtable_items>
c010815f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0108162:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0108166:	0f 85 65 ff ff ff    	jne    c01080d1 <print_pgdir+0x80>
//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c010816c:	ba 00 b0 fe fa       	mov    $0xfafeb000,%edx
c0108171:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108174:	8d 4d dc             	lea    -0x24(%ebp),%ecx
c0108177:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c010817b:	8d 4d e0             	lea    -0x20(%ebp),%ecx
c010817e:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0108182:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0108186:	89 44 24 08          	mov    %eax,0x8(%esp)
c010818a:	c7 44 24 04 00 04 00 	movl   $0x400,0x4(%esp)
c0108191:	00 
c0108192:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0108199:	e8 fd fd ff ff       	call   c0107f9b <get_pgtable_items>
c010819e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01081a1:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01081a5:	0f 85 c7 fe ff ff    	jne    c0108072 <print_pgdir+0x21>
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
        }
    }
    cprintf("--------------------- END ---------------------\n");
c01081ab:	c7 04 24 14 03 11 c0 	movl   $0xc0110314,(%esp)
c01081b2:	e8 24 96 ff ff       	call   c01017db <cprintf>
}
c01081b7:	83 c4 4c             	add    $0x4c,%esp
c01081ba:	5b                   	pop    %ebx
c01081bb:	5e                   	pop    %esi
c01081bc:	5f                   	pop    %edi
c01081bd:	5d                   	pop    %ebp
c01081be:	c3                   	ret    

c01081bf <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c01081bf:	55                   	push   %ebp
c01081c0:	89 e5                	mov    %esp,%ebp
c01081c2:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c01081c5:	8b 45 08             	mov    0x8(%ebp),%eax
c01081c8:	c1 e8 0c             	shr    $0xc,%eax
c01081cb:	89 c2                	mov    %eax,%edx
c01081cd:	a1 a0 63 1c c0       	mov    0xc01c63a0,%eax
c01081d2:	39 c2                	cmp    %eax,%edx
c01081d4:	72 1c                	jb     c01081f2 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c01081d6:	c7 44 24 08 48 03 11 	movl   $0xc0110348,0x8(%esp)
c01081dd:	c0 
c01081de:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c01081e5:	00 
c01081e6:	c7 04 24 67 03 11 c0 	movl   $0xc0110367,(%esp)
c01081ed:	e8 6b a0 ff ff       	call   c010225d <__panic>
    }
    return &pages[PPN(pa)];
c01081f2:	8b 0d f0 84 1c c0    	mov    0xc01c84f0,%ecx
c01081f8:	8b 45 08             	mov    0x8(%ebp),%eax
c01081fb:	c1 e8 0c             	shr    $0xc,%eax
c01081fe:	89 c2                	mov    %eax,%edx
c0108200:	89 d0                	mov    %edx,%eax
c0108202:	c1 e0 03             	shl    $0x3,%eax
c0108205:	01 d0                	add    %edx,%eax
c0108207:	c1 e0 02             	shl    $0x2,%eax
c010820a:	01 c8                	add    %ecx,%eax
}
c010820c:	c9                   	leave  
c010820d:	c3                   	ret    

c010820e <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c010820e:	55                   	push   %ebp
c010820f:	89 e5                	mov    %esp,%ebp
c0108211:	83 ec 18             	sub    $0x18,%esp
    if (!(pte & PTE_P)) {
c0108214:	8b 45 08             	mov    0x8(%ebp),%eax
c0108217:	83 e0 01             	and    $0x1,%eax
c010821a:	85 c0                	test   %eax,%eax
c010821c:	75 1c                	jne    c010823a <pte2page+0x2c>
        panic("pte2page called with invalid pte");
c010821e:	c7 44 24 08 78 03 11 	movl   $0xc0110378,0x8(%esp)
c0108225:	c0 
c0108226:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c010822d:	00 
c010822e:	c7 04 24 67 03 11 c0 	movl   $0xc0110367,(%esp)
c0108235:	e8 23 a0 ff ff       	call   c010225d <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c010823a:	8b 45 08             	mov    0x8(%ebp),%eax
c010823d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108242:	89 04 24             	mov    %eax,(%esp)
c0108245:	e8 75 ff ff ff       	call   c01081bf <pa2page>
}
c010824a:	c9                   	leave  
c010824b:	c3                   	ret    

c010824c <swap_init>:

static void check_swap(void);

int
swap_init(void)
{
c010824c:	55                   	push   %ebp
c010824d:	89 e5                	mov    %esp,%ebp
c010824f:	83 ec 28             	sub    $0x28,%esp
     swapfs_init();
c0108252:	e8 30 33 00 00       	call   c010b587 <swapfs_init>

     if (!(1024 <= max_swap_offset && max_swap_offset < MAX_SWAP_OFFSET_LIMIT))
c0108257:	a1 9c 85 1c c0       	mov    0xc01c859c,%eax
c010825c:	3d ff 03 00 00       	cmp    $0x3ff,%eax
c0108261:	76 0c                	jbe    c010826f <swap_init+0x23>
c0108263:	a1 9c 85 1c c0       	mov    0xc01c859c,%eax
c0108268:	3d ff ff ff 00       	cmp    $0xffffff,%eax
c010826d:	76 25                	jbe    c0108294 <swap_init+0x48>
     {
          panic("bad max_swap_offset %08x.\n", max_swap_offset);
c010826f:	a1 9c 85 1c c0       	mov    0xc01c859c,%eax
c0108274:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0108278:	c7 44 24 08 99 03 11 	movl   $0xc0110399,0x8(%esp)
c010827f:	c0 
c0108280:	c7 44 24 04 27 00 00 	movl   $0x27,0x4(%esp)
c0108287:	00 
c0108288:	c7 04 24 b4 03 11 c0 	movl   $0xc01103b4,(%esp)
c010828f:	e8 c9 9f ff ff       	call   c010225d <__panic>
     }
     

     sm = &swap_manager_fifo;
c0108294:	c7 05 34 64 1c c0 60 	movl   $0xc0134a60,0xc01c6434
c010829b:	4a 13 c0 
     int r = sm->init();
c010829e:	a1 34 64 1c c0       	mov    0xc01c6434,%eax
c01082a3:	8b 40 04             	mov    0x4(%eax),%eax
c01082a6:	ff d0                	call   *%eax
c01082a8:	89 45 f4             	mov    %eax,-0xc(%ebp)
     
     if (r == 0)
c01082ab:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01082af:	75 26                	jne    c01082d7 <swap_init+0x8b>
     {
          swap_init_ok = 1;
c01082b1:	c7 05 2c 64 1c c0 01 	movl   $0x1,0xc01c642c
c01082b8:	00 00 00 
          cprintf("SWAP: manager = %s\n", sm->name);
c01082bb:	a1 34 64 1c c0       	mov    0xc01c6434,%eax
c01082c0:	8b 00                	mov    (%eax),%eax
c01082c2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01082c6:	c7 04 24 c3 03 11 c0 	movl   $0xc01103c3,(%esp)
c01082cd:	e8 09 95 ff ff       	call   c01017db <cprintf>
          check_swap();
c01082d2:	e8 a4 04 00 00       	call   c010877b <check_swap>
     }

     return r;
c01082d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01082da:	c9                   	leave  
c01082db:	c3                   	ret    

c01082dc <swap_init_mm>:

int
swap_init_mm(struct mm_struct *mm)
{
c01082dc:	55                   	push   %ebp
c01082dd:	89 e5                	mov    %esp,%ebp
c01082df:	83 ec 18             	sub    $0x18,%esp
     return sm->init_mm(mm);
c01082e2:	a1 34 64 1c c0       	mov    0xc01c6434,%eax
c01082e7:	8b 40 08             	mov    0x8(%eax),%eax
c01082ea:	8b 55 08             	mov    0x8(%ebp),%edx
c01082ed:	89 14 24             	mov    %edx,(%esp)
c01082f0:	ff d0                	call   *%eax
}
c01082f2:	c9                   	leave  
c01082f3:	c3                   	ret    

c01082f4 <swap_tick_event>:

int
swap_tick_event(struct mm_struct *mm)
{
c01082f4:	55                   	push   %ebp
c01082f5:	89 e5                	mov    %esp,%ebp
c01082f7:	83 ec 18             	sub    $0x18,%esp
     return sm->tick_event(mm);
c01082fa:	a1 34 64 1c c0       	mov    0xc01c6434,%eax
c01082ff:	8b 40 0c             	mov    0xc(%eax),%eax
c0108302:	8b 55 08             	mov    0x8(%ebp),%edx
c0108305:	89 14 24             	mov    %edx,(%esp)
c0108308:	ff d0                	call   *%eax
}
c010830a:	c9                   	leave  
c010830b:	c3                   	ret    

c010830c <swap_map_swappable>:

int
swap_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c010830c:	55                   	push   %ebp
c010830d:	89 e5                	mov    %esp,%ebp
c010830f:	83 ec 18             	sub    $0x18,%esp
     return sm->map_swappable(mm, addr, page, swap_in);
c0108312:	a1 34 64 1c c0       	mov    0xc01c6434,%eax
c0108317:	8b 40 10             	mov    0x10(%eax),%eax
c010831a:	8b 55 14             	mov    0x14(%ebp),%edx
c010831d:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0108321:	8b 55 10             	mov    0x10(%ebp),%edx
c0108324:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108328:	8b 55 0c             	mov    0xc(%ebp),%edx
c010832b:	89 54 24 04          	mov    %edx,0x4(%esp)
c010832f:	8b 55 08             	mov    0x8(%ebp),%edx
c0108332:	89 14 24             	mov    %edx,(%esp)
c0108335:	ff d0                	call   *%eax
}
c0108337:	c9                   	leave  
c0108338:	c3                   	ret    

c0108339 <swap_set_unswappable>:

int
swap_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0108339:	55                   	push   %ebp
c010833a:	89 e5                	mov    %esp,%ebp
c010833c:	83 ec 18             	sub    $0x18,%esp
     return sm->set_unswappable(mm, addr);
c010833f:	a1 34 64 1c c0       	mov    0xc01c6434,%eax
c0108344:	8b 40 14             	mov    0x14(%eax),%eax
c0108347:	8b 55 0c             	mov    0xc(%ebp),%edx
c010834a:	89 54 24 04          	mov    %edx,0x4(%esp)
c010834e:	8b 55 08             	mov    0x8(%ebp),%edx
c0108351:	89 14 24             	mov    %edx,(%esp)
c0108354:	ff d0                	call   *%eax
}
c0108356:	c9                   	leave  
c0108357:	c3                   	ret    

c0108358 <swap_out>:

volatile unsigned int swap_out_num=0;

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
c0108358:	55                   	push   %ebp
c0108359:	89 e5                	mov    %esp,%ebp
c010835b:	83 ec 38             	sub    $0x38,%esp
     int i;
     for (i = 0; i != n; ++ i)
c010835e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108365:	e9 5a 01 00 00       	jmp    c01084c4 <swap_out+0x16c>
     {
          uintptr_t v;
          //struct Page **ptr_page=NULL;
          struct Page *page;
          // cprintf("i %d, SWAP: call swap_out_victim\n",i);
          int r = sm->swap_out_victim(mm, &page, in_tick);
c010836a:	a1 34 64 1c c0       	mov    0xc01c6434,%eax
c010836f:	8b 40 18             	mov    0x18(%eax),%eax
c0108372:	8b 55 10             	mov    0x10(%ebp),%edx
c0108375:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108379:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c010837c:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108380:	8b 55 08             	mov    0x8(%ebp),%edx
c0108383:	89 14 24             	mov    %edx,(%esp)
c0108386:	ff d0                	call   *%eax
c0108388:	89 45 f0             	mov    %eax,-0x10(%ebp)
          if (r != 0) {
c010838b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010838f:	74 18                	je     c01083a9 <swap_out+0x51>
                    cprintf("i %d, swap_out: call swap_out_victim failed\n",i);
c0108391:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108394:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108398:	c7 04 24 d8 03 11 c0 	movl   $0xc01103d8,(%esp)
c010839f:	e8 37 94 ff ff       	call   c01017db <cprintf>
c01083a4:	e9 27 01 00 00       	jmp    c01084d0 <swap_out+0x178>
          }          
          //assert(!PageReserved(page));

          //cprintf("SWAP: choose victim page 0x%08x\n", page);
          
          v=page->pra_vaddr; 
c01083a9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01083ac:	8b 40 20             	mov    0x20(%eax),%eax
c01083af:	89 45 ec             	mov    %eax,-0x14(%ebp)
          pte_t *ptep = get_pte(mm->pgdir, v, 0);
c01083b2:	8b 45 08             	mov    0x8(%ebp),%eax
c01083b5:	8b 40 0c             	mov    0xc(%eax),%eax
c01083b8:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01083bf:	00 
c01083c0:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01083c3:	89 54 24 04          	mov    %edx,0x4(%esp)
c01083c7:	89 04 24             	mov    %eax,(%esp)
c01083ca:	e8 f9 e8 ff ff       	call   c0106cc8 <get_pte>
c01083cf:	89 45 e8             	mov    %eax,-0x18(%ebp)
          assert((*ptep & PTE_P) != 0);
c01083d2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01083d5:	8b 00                	mov    (%eax),%eax
c01083d7:	83 e0 01             	and    $0x1,%eax
c01083da:	85 c0                	test   %eax,%eax
c01083dc:	75 24                	jne    c0108402 <swap_out+0xaa>
c01083de:	c7 44 24 0c 05 04 11 	movl   $0xc0110405,0xc(%esp)
c01083e5:	c0 
c01083e6:	c7 44 24 08 1a 04 11 	movl   $0xc011041a,0x8(%esp)
c01083ed:	c0 
c01083ee:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
c01083f5:	00 
c01083f6:	c7 04 24 b4 03 11 c0 	movl   $0xc01103b4,(%esp)
c01083fd:	e8 5b 9e ff ff       	call   c010225d <__panic>

          if (swapfs_write( (page->pra_vaddr/PGSIZE+1)<<8, page) != 0) {
c0108402:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108405:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0108408:	8b 52 20             	mov    0x20(%edx),%edx
c010840b:	c1 ea 0c             	shr    $0xc,%edx
c010840e:	83 c2 01             	add    $0x1,%edx
c0108411:	c1 e2 08             	shl    $0x8,%edx
c0108414:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108418:	89 14 24             	mov    %edx,(%esp)
c010841b:	e8 21 32 00 00       	call   c010b641 <swapfs_write>
c0108420:	85 c0                	test   %eax,%eax
c0108422:	74 34                	je     c0108458 <swap_out+0x100>
                    cprintf("SWAP: failed to save\n");
c0108424:	c7 04 24 2f 04 11 c0 	movl   $0xc011042f,(%esp)
c010842b:	e8 ab 93 ff ff       	call   c01017db <cprintf>
                    sm->map_swappable(mm, v, page, 0);
c0108430:	a1 34 64 1c c0       	mov    0xc01c6434,%eax
c0108435:	8b 40 10             	mov    0x10(%eax),%eax
c0108438:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010843b:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0108442:	00 
c0108443:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108447:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010844a:	89 54 24 04          	mov    %edx,0x4(%esp)
c010844e:	8b 55 08             	mov    0x8(%ebp),%edx
c0108451:	89 14 24             	mov    %edx,(%esp)
c0108454:	ff d0                	call   *%eax
c0108456:	eb 68                	jmp    c01084c0 <swap_out+0x168>
                    continue;
          }
          else {
                    cprintf("swap_out: i %d, store page in vaddr 0x%x to disk swap entry %d\n", i, v, page->pra_vaddr/PGSIZE+1);
c0108458:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010845b:	8b 40 20             	mov    0x20(%eax),%eax
c010845e:	c1 e8 0c             	shr    $0xc,%eax
c0108461:	83 c0 01             	add    $0x1,%eax
c0108464:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0108468:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010846b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010846f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108472:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108476:	c7 04 24 48 04 11 c0 	movl   $0xc0110448,(%esp)
c010847d:	e8 59 93 ff ff       	call   c01017db <cprintf>
                    *ptep = (page->pra_vaddr/PGSIZE+1)<<8;
c0108482:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108485:	8b 40 20             	mov    0x20(%eax),%eax
c0108488:	c1 e8 0c             	shr    $0xc,%eax
c010848b:	83 c0 01             	add    $0x1,%eax
c010848e:	c1 e0 08             	shl    $0x8,%eax
c0108491:	89 c2                	mov    %eax,%edx
c0108493:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108496:	89 10                	mov    %edx,(%eax)
                    free_page(page);
c0108498:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010849b:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01084a2:	00 
c01084a3:	89 04 24             	mov    %eax,(%esp)
c01084a6:	e8 11 e1 ff ff       	call   c01065bc <free_pages>
          }
          
          tlb_invalidate(mm->pgdir, v);
c01084ab:	8b 45 08             	mov    0x8(%ebp),%eax
c01084ae:	8b 40 0c             	mov    0xc(%eax),%eax
c01084b1:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01084b4:	89 54 24 04          	mov    %edx,0x4(%esp)
c01084b8:	89 04 24             	mov    %eax,(%esp)
c01084bb:	e8 15 ef ff ff       	call   c01073d5 <tlb_invalidate>

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
     int i;
     for (i = 0; i != n; ++ i)
c01084c0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01084c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01084c7:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01084ca:	0f 85 9a fe ff ff    	jne    c010836a <swap_out+0x12>
                    free_page(page);
          }
          
          tlb_invalidate(mm->pgdir, v);
     }
     return i;
c01084d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01084d3:	c9                   	leave  
c01084d4:	c3                   	ret    

c01084d5 <swap_in>:

int
swap_in(struct mm_struct *mm, uintptr_t addr, struct Page **ptr_result)
{
c01084d5:	55                   	push   %ebp
c01084d6:	89 e5                	mov    %esp,%ebp
c01084d8:	83 ec 28             	sub    $0x28,%esp
     struct Page *result = alloc_page();
c01084db:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01084e2:	e8 6a e0 ff ff       	call   c0106551 <alloc_pages>
c01084e7:	89 45 f4             	mov    %eax,-0xc(%ebp)
     assert(result!=NULL);
c01084ea:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01084ee:	75 24                	jne    c0108514 <swap_in+0x3f>
c01084f0:	c7 44 24 0c 88 04 11 	movl   $0xc0110488,0xc(%esp)
c01084f7:	c0 
c01084f8:	c7 44 24 08 1a 04 11 	movl   $0xc011041a,0x8(%esp)
c01084ff:	c0 
c0108500:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
c0108507:	00 
c0108508:	c7 04 24 b4 03 11 c0 	movl   $0xc01103b4,(%esp)
c010850f:	e8 49 9d ff ff       	call   c010225d <__panic>

     pte_t *ptep = get_pte(mm->pgdir, addr, 0);
c0108514:	8b 45 08             	mov    0x8(%ebp),%eax
c0108517:	8b 40 0c             	mov    0xc(%eax),%eax
c010851a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0108521:	00 
c0108522:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108525:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108529:	89 04 24             	mov    %eax,(%esp)
c010852c:	e8 97 e7 ff ff       	call   c0106cc8 <get_pte>
c0108531:	89 45 f0             	mov    %eax,-0x10(%ebp)
     // cprintf("SWAP: load ptep %x swap entry %d to vaddr 0x%08x, page %x, No %d\n", ptep, (*ptep)>>8, addr, result, (result-pages));
    
     int r;
     if ((r = swapfs_read((*ptep), result)) != 0)
c0108534:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108537:	8b 00                	mov    (%eax),%eax
c0108539:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010853c:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108540:	89 04 24             	mov    %eax,(%esp)
c0108543:	e8 87 30 00 00       	call   c010b5cf <swapfs_read>
c0108548:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010854b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010854f:	74 2a                	je     c010857b <swap_in+0xa6>
     {
        assert(r!=0);
c0108551:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0108555:	75 24                	jne    c010857b <swap_in+0xa6>
c0108557:	c7 44 24 0c 95 04 11 	movl   $0xc0110495,0xc(%esp)
c010855e:	c0 
c010855f:	c7 44 24 08 1a 04 11 	movl   $0xc011041a,0x8(%esp)
c0108566:	c0 
c0108567:	c7 44 24 04 85 00 00 	movl   $0x85,0x4(%esp)
c010856e:	00 
c010856f:	c7 04 24 b4 03 11 c0 	movl   $0xc01103b4,(%esp)
c0108576:	e8 e2 9c ff ff       	call   c010225d <__panic>
     }
     cprintf("swap_in: load disk swap entry %d with swap_page in vadr 0x%x\n", (*ptep)>>8, addr);
c010857b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010857e:	8b 00                	mov    (%eax),%eax
c0108580:	c1 e8 08             	shr    $0x8,%eax
c0108583:	89 c2                	mov    %eax,%edx
c0108585:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108588:	89 44 24 08          	mov    %eax,0x8(%esp)
c010858c:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108590:	c7 04 24 9c 04 11 c0 	movl   $0xc011049c,(%esp)
c0108597:	e8 3f 92 ff ff       	call   c01017db <cprintf>
     *ptr_result=result;
c010859c:	8b 45 10             	mov    0x10(%ebp),%eax
c010859f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01085a2:	89 10                	mov    %edx,(%eax)
     return 0;
c01085a4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01085a9:	c9                   	leave  
c01085aa:	c3                   	ret    

c01085ab <check_content_set>:



static inline void
check_content_set(void)
{
c01085ab:	55                   	push   %ebp
c01085ac:	89 e5                	mov    %esp,%ebp
c01085ae:	83 ec 18             	sub    $0x18,%esp
     *(unsigned char *)0x1000 = 0x0a;
c01085b1:	b8 00 10 00 00       	mov    $0x1000,%eax
c01085b6:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c01085b9:	a1 38 64 1c c0       	mov    0xc01c6438,%eax
c01085be:	83 f8 01             	cmp    $0x1,%eax
c01085c1:	74 24                	je     c01085e7 <check_content_set+0x3c>
c01085c3:	c7 44 24 0c da 04 11 	movl   $0xc01104da,0xc(%esp)
c01085ca:	c0 
c01085cb:	c7 44 24 08 1a 04 11 	movl   $0xc011041a,0x8(%esp)
c01085d2:	c0 
c01085d3:	c7 44 24 04 92 00 00 	movl   $0x92,0x4(%esp)
c01085da:	00 
c01085db:	c7 04 24 b4 03 11 c0 	movl   $0xc01103b4,(%esp)
c01085e2:	e8 76 9c ff ff       	call   c010225d <__panic>
     *(unsigned char *)0x1010 = 0x0a;
c01085e7:	b8 10 10 00 00       	mov    $0x1010,%eax
c01085ec:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c01085ef:	a1 38 64 1c c0       	mov    0xc01c6438,%eax
c01085f4:	83 f8 01             	cmp    $0x1,%eax
c01085f7:	74 24                	je     c010861d <check_content_set+0x72>
c01085f9:	c7 44 24 0c da 04 11 	movl   $0xc01104da,0xc(%esp)
c0108600:	c0 
c0108601:	c7 44 24 08 1a 04 11 	movl   $0xc011041a,0x8(%esp)
c0108608:	c0 
c0108609:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
c0108610:	00 
c0108611:	c7 04 24 b4 03 11 c0 	movl   $0xc01103b4,(%esp)
c0108618:	e8 40 9c ff ff       	call   c010225d <__panic>
     *(unsigned char *)0x2000 = 0x0b;
c010861d:	b8 00 20 00 00       	mov    $0x2000,%eax
c0108622:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c0108625:	a1 38 64 1c c0       	mov    0xc01c6438,%eax
c010862a:	83 f8 02             	cmp    $0x2,%eax
c010862d:	74 24                	je     c0108653 <check_content_set+0xa8>
c010862f:	c7 44 24 0c e9 04 11 	movl   $0xc01104e9,0xc(%esp)
c0108636:	c0 
c0108637:	c7 44 24 08 1a 04 11 	movl   $0xc011041a,0x8(%esp)
c010863e:	c0 
c010863f:	c7 44 24 04 96 00 00 	movl   $0x96,0x4(%esp)
c0108646:	00 
c0108647:	c7 04 24 b4 03 11 c0 	movl   $0xc01103b4,(%esp)
c010864e:	e8 0a 9c ff ff       	call   c010225d <__panic>
     *(unsigned char *)0x2010 = 0x0b;
c0108653:	b8 10 20 00 00       	mov    $0x2010,%eax
c0108658:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c010865b:	a1 38 64 1c c0       	mov    0xc01c6438,%eax
c0108660:	83 f8 02             	cmp    $0x2,%eax
c0108663:	74 24                	je     c0108689 <check_content_set+0xde>
c0108665:	c7 44 24 0c e9 04 11 	movl   $0xc01104e9,0xc(%esp)
c010866c:	c0 
c010866d:	c7 44 24 08 1a 04 11 	movl   $0xc011041a,0x8(%esp)
c0108674:	c0 
c0108675:	c7 44 24 04 98 00 00 	movl   $0x98,0x4(%esp)
c010867c:	00 
c010867d:	c7 04 24 b4 03 11 c0 	movl   $0xc01103b4,(%esp)
c0108684:	e8 d4 9b ff ff       	call   c010225d <__panic>
     *(unsigned char *)0x3000 = 0x0c;
c0108689:	b8 00 30 00 00       	mov    $0x3000,%eax
c010868e:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c0108691:	a1 38 64 1c c0       	mov    0xc01c6438,%eax
c0108696:	83 f8 03             	cmp    $0x3,%eax
c0108699:	74 24                	je     c01086bf <check_content_set+0x114>
c010869b:	c7 44 24 0c f8 04 11 	movl   $0xc01104f8,0xc(%esp)
c01086a2:	c0 
c01086a3:	c7 44 24 08 1a 04 11 	movl   $0xc011041a,0x8(%esp)
c01086aa:	c0 
c01086ab:	c7 44 24 04 9a 00 00 	movl   $0x9a,0x4(%esp)
c01086b2:	00 
c01086b3:	c7 04 24 b4 03 11 c0 	movl   $0xc01103b4,(%esp)
c01086ba:	e8 9e 9b ff ff       	call   c010225d <__panic>
     *(unsigned char *)0x3010 = 0x0c;
c01086bf:	b8 10 30 00 00       	mov    $0x3010,%eax
c01086c4:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c01086c7:	a1 38 64 1c c0       	mov    0xc01c6438,%eax
c01086cc:	83 f8 03             	cmp    $0x3,%eax
c01086cf:	74 24                	je     c01086f5 <check_content_set+0x14a>
c01086d1:	c7 44 24 0c f8 04 11 	movl   $0xc01104f8,0xc(%esp)
c01086d8:	c0 
c01086d9:	c7 44 24 08 1a 04 11 	movl   $0xc011041a,0x8(%esp)
c01086e0:	c0 
c01086e1:	c7 44 24 04 9c 00 00 	movl   $0x9c,0x4(%esp)
c01086e8:	00 
c01086e9:	c7 04 24 b4 03 11 c0 	movl   $0xc01103b4,(%esp)
c01086f0:	e8 68 9b ff ff       	call   c010225d <__panic>
     *(unsigned char *)0x4000 = 0x0d;
c01086f5:	b8 00 40 00 00       	mov    $0x4000,%eax
c01086fa:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c01086fd:	a1 38 64 1c c0       	mov    0xc01c6438,%eax
c0108702:	83 f8 04             	cmp    $0x4,%eax
c0108705:	74 24                	je     c010872b <check_content_set+0x180>
c0108707:	c7 44 24 0c 07 05 11 	movl   $0xc0110507,0xc(%esp)
c010870e:	c0 
c010870f:	c7 44 24 08 1a 04 11 	movl   $0xc011041a,0x8(%esp)
c0108716:	c0 
c0108717:	c7 44 24 04 9e 00 00 	movl   $0x9e,0x4(%esp)
c010871e:	00 
c010871f:	c7 04 24 b4 03 11 c0 	movl   $0xc01103b4,(%esp)
c0108726:	e8 32 9b ff ff       	call   c010225d <__panic>
     *(unsigned char *)0x4010 = 0x0d;
c010872b:	b8 10 40 00 00       	mov    $0x4010,%eax
c0108730:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c0108733:	a1 38 64 1c c0       	mov    0xc01c6438,%eax
c0108738:	83 f8 04             	cmp    $0x4,%eax
c010873b:	74 24                	je     c0108761 <check_content_set+0x1b6>
c010873d:	c7 44 24 0c 07 05 11 	movl   $0xc0110507,0xc(%esp)
c0108744:	c0 
c0108745:	c7 44 24 08 1a 04 11 	movl   $0xc011041a,0x8(%esp)
c010874c:	c0 
c010874d:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c0108754:	00 
c0108755:	c7 04 24 b4 03 11 c0 	movl   $0xc01103b4,(%esp)
c010875c:	e8 fc 9a ff ff       	call   c010225d <__panic>
}
c0108761:	c9                   	leave  
c0108762:	c3                   	ret    

c0108763 <check_content_access>:

static inline int
check_content_access(void)
{
c0108763:	55                   	push   %ebp
c0108764:	89 e5                	mov    %esp,%ebp
c0108766:	83 ec 18             	sub    $0x18,%esp
    int ret = sm->check_swap();
c0108769:	a1 34 64 1c c0       	mov    0xc01c6434,%eax
c010876e:	8b 40 1c             	mov    0x1c(%eax),%eax
c0108771:	ff d0                	call   *%eax
c0108773:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return ret;
c0108776:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0108779:	c9                   	leave  
c010877a:	c3                   	ret    

c010877b <check_swap>:
#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
check_swap(void)
{
c010877b:	55                   	push   %ebp
c010877c:	89 e5                	mov    %esp,%ebp
c010877e:	53                   	push   %ebx
c010877f:	83 ec 74             	sub    $0x74,%esp
    //backup mem env
     int ret, count = 0, total = 0, i;
c0108782:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108789:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
     list_entry_t *le = &free_list;
c0108790:	c7 45 e8 dc 84 1c c0 	movl   $0xc01c84dc,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c0108797:	eb 6b                	jmp    c0108804 <check_swap+0x89>
        struct Page *p = le2page(le, page_link);
c0108799:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010879c:	83 e8 10             	sub    $0x10,%eax
c010879f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        assert(PageProperty(p));
c01087a2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01087a5:	83 c0 04             	add    $0x4,%eax
c01087a8:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
c01087af:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01087b2:	8b 45 c0             	mov    -0x40(%ebp),%eax
c01087b5:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c01087b8:	0f a3 10             	bt     %edx,(%eax)
c01087bb:	19 c0                	sbb    %eax,%eax
c01087bd:	89 45 bc             	mov    %eax,-0x44(%ebp)
    return oldbit != 0;
c01087c0:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c01087c4:	0f 95 c0             	setne  %al
c01087c7:	0f b6 c0             	movzbl %al,%eax
c01087ca:	85 c0                	test   %eax,%eax
c01087cc:	75 24                	jne    c01087f2 <check_swap+0x77>
c01087ce:	c7 44 24 0c 16 05 11 	movl   $0xc0110516,0xc(%esp)
c01087d5:	c0 
c01087d6:	c7 44 24 08 1a 04 11 	movl   $0xc011041a,0x8(%esp)
c01087dd:	c0 
c01087de:	c7 44 24 04 bb 00 00 	movl   $0xbb,0x4(%esp)
c01087e5:	00 
c01087e6:	c7 04 24 b4 03 11 c0 	movl   $0xc01103b4,(%esp)
c01087ed:	e8 6b 9a ff ff       	call   c010225d <__panic>
        count ++, total += p->property;
c01087f2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01087f6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01087f9:	8b 50 08             	mov    0x8(%eax),%edx
c01087fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01087ff:	01 d0                	add    %edx,%eax
c0108801:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108804:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108807:	89 45 b8             	mov    %eax,-0x48(%ebp)
c010880a:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010880d:	8b 40 04             	mov    0x4(%eax),%eax
check_swap(void)
{
    //backup mem env
     int ret, count = 0, total = 0, i;
     list_entry_t *le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c0108810:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0108813:	81 7d e8 dc 84 1c c0 	cmpl   $0xc01c84dc,-0x18(%ebp)
c010881a:	0f 85 79 ff ff ff    	jne    c0108799 <check_swap+0x1e>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
     }
     assert(total == nr_free_pages());
c0108820:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c0108823:	e8 c6 dd ff ff       	call   c01065ee <nr_free_pages>
c0108828:	39 c3                	cmp    %eax,%ebx
c010882a:	74 24                	je     c0108850 <check_swap+0xd5>
c010882c:	c7 44 24 0c 26 05 11 	movl   $0xc0110526,0xc(%esp)
c0108833:	c0 
c0108834:	c7 44 24 08 1a 04 11 	movl   $0xc011041a,0x8(%esp)
c010883b:	c0 
c010883c:	c7 44 24 04 be 00 00 	movl   $0xbe,0x4(%esp)
c0108843:	00 
c0108844:	c7 04 24 b4 03 11 c0 	movl   $0xc01103b4,(%esp)
c010884b:	e8 0d 9a ff ff       	call   c010225d <__panic>
     cprintf("BEGIN check_swap: count %d, total %d\n",count,total);
c0108850:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108853:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108857:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010885a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010885e:	c7 04 24 40 05 11 c0 	movl   $0xc0110540,(%esp)
c0108865:	e8 71 8f ff ff       	call   c01017db <cprintf>
     
     //now we set the phy pages env     
     struct mm_struct *mm = mm_create();
c010886a:	e8 a4 0a 00 00       	call   c0109313 <mm_create>
c010886f:	89 45 e0             	mov    %eax,-0x20(%ebp)
     assert(mm != NULL);
c0108872:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0108876:	75 24                	jne    c010889c <check_swap+0x121>
c0108878:	c7 44 24 0c 66 05 11 	movl   $0xc0110566,0xc(%esp)
c010887f:	c0 
c0108880:	c7 44 24 08 1a 04 11 	movl   $0xc011041a,0x8(%esp)
c0108887:	c0 
c0108888:	c7 44 24 04 c3 00 00 	movl   $0xc3,0x4(%esp)
c010888f:	00 
c0108890:	c7 04 24 b4 03 11 c0 	movl   $0xc01103b4,(%esp)
c0108897:	e8 c1 99 ff ff       	call   c010225d <__panic>

     extern struct mm_struct *check_mm_struct;
     assert(check_mm_struct == NULL);
c010889c:	a1 cc 85 1c c0       	mov    0xc01c85cc,%eax
c01088a1:	85 c0                	test   %eax,%eax
c01088a3:	74 24                	je     c01088c9 <check_swap+0x14e>
c01088a5:	c7 44 24 0c 71 05 11 	movl   $0xc0110571,0xc(%esp)
c01088ac:	c0 
c01088ad:	c7 44 24 08 1a 04 11 	movl   $0xc011041a,0x8(%esp)
c01088b4:	c0 
c01088b5:	c7 44 24 04 c6 00 00 	movl   $0xc6,0x4(%esp)
c01088bc:	00 
c01088bd:	c7 04 24 b4 03 11 c0 	movl   $0xc01103b4,(%esp)
c01088c4:	e8 94 99 ff ff       	call   c010225d <__panic>

     check_mm_struct = mm;
c01088c9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01088cc:	a3 cc 85 1c c0       	mov    %eax,0xc01c85cc

     pde_t *pgdir = mm->pgdir = boot_pgdir;
c01088d1:	8b 15 a4 63 1c c0    	mov    0xc01c63a4,%edx
c01088d7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01088da:	89 50 0c             	mov    %edx,0xc(%eax)
c01088dd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01088e0:	8b 40 0c             	mov    0xc(%eax),%eax
c01088e3:	89 45 dc             	mov    %eax,-0x24(%ebp)
     assert(pgdir[0] == 0);
c01088e6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01088e9:	8b 00                	mov    (%eax),%eax
c01088eb:	85 c0                	test   %eax,%eax
c01088ed:	74 24                	je     c0108913 <check_swap+0x198>
c01088ef:	c7 44 24 0c 89 05 11 	movl   $0xc0110589,0xc(%esp)
c01088f6:	c0 
c01088f7:	c7 44 24 08 1a 04 11 	movl   $0xc011041a,0x8(%esp)
c01088fe:	c0 
c01088ff:	c7 44 24 04 cb 00 00 	movl   $0xcb,0x4(%esp)
c0108906:	00 
c0108907:	c7 04 24 b4 03 11 c0 	movl   $0xc01103b4,(%esp)
c010890e:	e8 4a 99 ff ff       	call   c010225d <__panic>

     struct vma_struct *vma = vma_create(BEING_CHECK_VALID_VADDR, CHECK_VALID_VADDR, VM_WRITE | VM_READ);
c0108913:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
c010891a:	00 
c010891b:	c7 44 24 04 00 60 00 	movl   $0x6000,0x4(%esp)
c0108922:	00 
c0108923:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c010892a:	e8 89 0a 00 00       	call   c01093b8 <vma_create>
c010892f:	89 45 d8             	mov    %eax,-0x28(%ebp)
     assert(vma != NULL);
c0108932:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0108936:	75 24                	jne    c010895c <check_swap+0x1e1>
c0108938:	c7 44 24 0c 97 05 11 	movl   $0xc0110597,0xc(%esp)
c010893f:	c0 
c0108940:	c7 44 24 08 1a 04 11 	movl   $0xc011041a,0x8(%esp)
c0108947:	c0 
c0108948:	c7 44 24 04 ce 00 00 	movl   $0xce,0x4(%esp)
c010894f:	00 
c0108950:	c7 04 24 b4 03 11 c0 	movl   $0xc01103b4,(%esp)
c0108957:	e8 01 99 ff ff       	call   c010225d <__panic>

     insert_vma_struct(mm, vma);
c010895c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010895f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108963:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108966:	89 04 24             	mov    %eax,(%esp)
c0108969:	e8 da 0b 00 00       	call   c0109548 <insert_vma_struct>

     //setup the temp Page Table vaddr 0~4MB
     cprintf("setup Page Table for vaddr 0X1000, so alloc a page\n");
c010896e:	c7 04 24 a4 05 11 c0 	movl   $0xc01105a4,(%esp)
c0108975:	e8 61 8e ff ff       	call   c01017db <cprintf>
     pte_t *temp_ptep=NULL;
c010897a:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
c0108981:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108984:	8b 40 0c             	mov    0xc(%eax),%eax
c0108987:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c010898e:	00 
c010898f:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0108996:	00 
c0108997:	89 04 24             	mov    %eax,(%esp)
c010899a:	e8 29 e3 ff ff       	call   c0106cc8 <get_pte>
c010899f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
     assert(temp_ptep!= NULL);
c01089a2:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c01089a6:	75 24                	jne    c01089cc <check_swap+0x251>
c01089a8:	c7 44 24 0c d8 05 11 	movl   $0xc01105d8,0xc(%esp)
c01089af:	c0 
c01089b0:	c7 44 24 08 1a 04 11 	movl   $0xc011041a,0x8(%esp)
c01089b7:	c0 
c01089b8:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c01089bf:	00 
c01089c0:	c7 04 24 b4 03 11 c0 	movl   $0xc01103b4,(%esp)
c01089c7:	e8 91 98 ff ff       	call   c010225d <__panic>
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
c01089cc:	c7 04 24 ec 05 11 c0 	movl   $0xc01105ec,(%esp)
c01089d3:	e8 03 8e ff ff       	call   c01017db <cprintf>
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01089d8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01089df:	e9 a3 00 00 00       	jmp    c0108a87 <check_swap+0x30c>
          check_rp[i] = alloc_page();
c01089e4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01089eb:	e8 61 db ff ff       	call   c0106551 <alloc_pages>
c01089f0:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01089f3:	89 04 95 00 85 1c c0 	mov    %eax,-0x3fe37b00(,%edx,4)
          assert(check_rp[i] != NULL );
c01089fa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01089fd:	8b 04 85 00 85 1c c0 	mov    -0x3fe37b00(,%eax,4),%eax
c0108a04:	85 c0                	test   %eax,%eax
c0108a06:	75 24                	jne    c0108a2c <check_swap+0x2b1>
c0108a08:	c7 44 24 0c 10 06 11 	movl   $0xc0110610,0xc(%esp)
c0108a0f:	c0 
c0108a10:	c7 44 24 08 1a 04 11 	movl   $0xc011041a,0x8(%esp)
c0108a17:	c0 
c0108a18:	c7 44 24 04 db 00 00 	movl   $0xdb,0x4(%esp)
c0108a1f:	00 
c0108a20:	c7 04 24 b4 03 11 c0 	movl   $0xc01103b4,(%esp)
c0108a27:	e8 31 98 ff ff       	call   c010225d <__panic>
          assert(!PageProperty(check_rp[i]));
c0108a2c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108a2f:	8b 04 85 00 85 1c c0 	mov    -0x3fe37b00(,%eax,4),%eax
c0108a36:	83 c0 04             	add    $0x4,%eax
c0108a39:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%ebp)
c0108a40:	89 45 b0             	mov    %eax,-0x50(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0108a43:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0108a46:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0108a49:	0f a3 10             	bt     %edx,(%eax)
c0108a4c:	19 c0                	sbb    %eax,%eax
c0108a4e:	89 45 ac             	mov    %eax,-0x54(%ebp)
    return oldbit != 0;
c0108a51:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
c0108a55:	0f 95 c0             	setne  %al
c0108a58:	0f b6 c0             	movzbl %al,%eax
c0108a5b:	85 c0                	test   %eax,%eax
c0108a5d:	74 24                	je     c0108a83 <check_swap+0x308>
c0108a5f:	c7 44 24 0c 24 06 11 	movl   $0xc0110624,0xc(%esp)
c0108a66:	c0 
c0108a67:	c7 44 24 08 1a 04 11 	movl   $0xc011041a,0x8(%esp)
c0108a6e:	c0 
c0108a6f:	c7 44 24 04 dc 00 00 	movl   $0xdc,0x4(%esp)
c0108a76:	00 
c0108a77:	c7 04 24 b4 03 11 c0 	movl   $0xc01103b4,(%esp)
c0108a7e:	e8 da 97 ff ff       	call   c010225d <__panic>
     pte_t *temp_ptep=NULL;
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
     assert(temp_ptep!= NULL);
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0108a83:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0108a87:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0108a8b:	0f 8e 53 ff ff ff    	jle    c01089e4 <check_swap+0x269>
          check_rp[i] = alloc_page();
          assert(check_rp[i] != NULL );
          assert(!PageProperty(check_rp[i]));
     }
     list_entry_t free_list_store = free_list;
c0108a91:	a1 dc 84 1c c0       	mov    0xc01c84dc,%eax
c0108a96:	8b 15 e0 84 1c c0    	mov    0xc01c84e0,%edx
c0108a9c:	89 45 98             	mov    %eax,-0x68(%ebp)
c0108a9f:	89 55 9c             	mov    %edx,-0x64(%ebp)
c0108aa2:	c7 45 a8 dc 84 1c c0 	movl   $0xc01c84dc,-0x58(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0108aa9:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0108aac:	8b 55 a8             	mov    -0x58(%ebp),%edx
c0108aaf:	89 50 04             	mov    %edx,0x4(%eax)
c0108ab2:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0108ab5:	8b 50 04             	mov    0x4(%eax),%edx
c0108ab8:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0108abb:	89 10                	mov    %edx,(%eax)
c0108abd:	c7 45 a4 dc 84 1c c0 	movl   $0xc01c84dc,-0x5c(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0108ac4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0108ac7:	8b 40 04             	mov    0x4(%eax),%eax
c0108aca:	39 45 a4             	cmp    %eax,-0x5c(%ebp)
c0108acd:	0f 94 c0             	sete   %al
c0108ad0:	0f b6 c0             	movzbl %al,%eax
     list_init(&free_list);
     assert(list_empty(&free_list));
c0108ad3:	85 c0                	test   %eax,%eax
c0108ad5:	75 24                	jne    c0108afb <check_swap+0x380>
c0108ad7:	c7 44 24 0c 3f 06 11 	movl   $0xc011063f,0xc(%esp)
c0108ade:	c0 
c0108adf:	c7 44 24 08 1a 04 11 	movl   $0xc011041a,0x8(%esp)
c0108ae6:	c0 
c0108ae7:	c7 44 24 04 e0 00 00 	movl   $0xe0,0x4(%esp)
c0108aee:	00 
c0108aef:	c7 04 24 b4 03 11 c0 	movl   $0xc01103b4,(%esp)
c0108af6:	e8 62 97 ff ff       	call   c010225d <__panic>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
c0108afb:	a1 e4 84 1c c0       	mov    0xc01c84e4,%eax
c0108b00:	89 45 d0             	mov    %eax,-0x30(%ebp)
     nr_free = 0;
c0108b03:	c7 05 e4 84 1c c0 00 	movl   $0x0,0xc01c84e4
c0108b0a:	00 00 00 
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0108b0d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0108b14:	eb 1e                	jmp    c0108b34 <check_swap+0x3b9>
        free_pages(check_rp[i],1);
c0108b16:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108b19:	8b 04 85 00 85 1c c0 	mov    -0x3fe37b00(,%eax,4),%eax
c0108b20:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0108b27:	00 
c0108b28:	89 04 24             	mov    %eax,(%esp)
c0108b2b:	e8 8c da ff ff       	call   c01065bc <free_pages>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
     nr_free = 0;
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0108b30:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0108b34:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0108b38:	7e dc                	jle    c0108b16 <check_swap+0x39b>
        free_pages(check_rp[i],1);
     }
     assert(nr_free==CHECK_VALID_PHY_PAGE_NUM);
c0108b3a:	a1 e4 84 1c c0       	mov    0xc01c84e4,%eax
c0108b3f:	83 f8 04             	cmp    $0x4,%eax
c0108b42:	74 24                	je     c0108b68 <check_swap+0x3ed>
c0108b44:	c7 44 24 0c 58 06 11 	movl   $0xc0110658,0xc(%esp)
c0108b4b:	c0 
c0108b4c:	c7 44 24 08 1a 04 11 	movl   $0xc011041a,0x8(%esp)
c0108b53:	c0 
c0108b54:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
c0108b5b:	00 
c0108b5c:	c7 04 24 b4 03 11 c0 	movl   $0xc01103b4,(%esp)
c0108b63:	e8 f5 96 ff ff       	call   c010225d <__panic>
     
     cprintf("set up init env for check_swap begin!\n");
c0108b68:	c7 04 24 7c 06 11 c0 	movl   $0xc011067c,(%esp)
c0108b6f:	e8 67 8c ff ff       	call   c01017db <cprintf>
     //setup initial vir_page<->phy_page environment for page relpacement algorithm 

     
     pgfault_num=0;
c0108b74:	c7 05 38 64 1c c0 00 	movl   $0x0,0xc01c6438
c0108b7b:	00 00 00 
     
     check_content_set();
c0108b7e:	e8 28 fa ff ff       	call   c01085ab <check_content_set>
     assert( nr_free == 0);         
c0108b83:	a1 e4 84 1c c0       	mov    0xc01c84e4,%eax
c0108b88:	85 c0                	test   %eax,%eax
c0108b8a:	74 24                	je     c0108bb0 <check_swap+0x435>
c0108b8c:	c7 44 24 0c a3 06 11 	movl   $0xc01106a3,0xc(%esp)
c0108b93:	c0 
c0108b94:	c7 44 24 08 1a 04 11 	movl   $0xc011041a,0x8(%esp)
c0108b9b:	c0 
c0108b9c:	c7 44 24 04 f2 00 00 	movl   $0xf2,0x4(%esp)
c0108ba3:	00 
c0108ba4:	c7 04 24 b4 03 11 c0 	movl   $0xc01103b4,(%esp)
c0108bab:	e8 ad 96 ff ff       	call   c010225d <__panic>
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c0108bb0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0108bb7:	eb 26                	jmp    c0108bdf <check_swap+0x464>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
c0108bb9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108bbc:	c7 04 85 20 85 1c c0 	movl   $0xffffffff,-0x3fe37ae0(,%eax,4)
c0108bc3:	ff ff ff ff 
c0108bc7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108bca:	8b 14 85 20 85 1c c0 	mov    -0x3fe37ae0(,%eax,4),%edx
c0108bd1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108bd4:	89 14 85 60 85 1c c0 	mov    %edx,-0x3fe37aa0(,%eax,4)
     
     pgfault_num=0;
     
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c0108bdb:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0108bdf:	83 7d ec 09          	cmpl   $0x9,-0x14(%ebp)
c0108be3:	7e d4                	jle    c0108bb9 <check_swap+0x43e>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0108be5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0108bec:	e9 eb 00 00 00       	jmp    c0108cdc <check_swap+0x561>
         check_ptep[i]=0;
c0108bf1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108bf4:	c7 04 85 b4 85 1c c0 	movl   $0x0,-0x3fe37a4c(,%eax,4)
c0108bfb:	00 00 00 00 
         check_ptep[i] = get_pte(pgdir, (i+1)*0x1000, 0);
c0108bff:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108c02:	83 c0 01             	add    $0x1,%eax
c0108c05:	c1 e0 0c             	shl    $0xc,%eax
c0108c08:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0108c0f:	00 
c0108c10:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108c14:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108c17:	89 04 24             	mov    %eax,(%esp)
c0108c1a:	e8 a9 e0 ff ff       	call   c0106cc8 <get_pte>
c0108c1f:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0108c22:	89 04 95 b4 85 1c c0 	mov    %eax,-0x3fe37a4c(,%edx,4)
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
c0108c29:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108c2c:	8b 04 85 b4 85 1c c0 	mov    -0x3fe37a4c(,%eax,4),%eax
c0108c33:	85 c0                	test   %eax,%eax
c0108c35:	75 24                	jne    c0108c5b <check_swap+0x4e0>
c0108c37:	c7 44 24 0c b0 06 11 	movl   $0xc01106b0,0xc(%esp)
c0108c3e:	c0 
c0108c3f:	c7 44 24 08 1a 04 11 	movl   $0xc011041a,0x8(%esp)
c0108c46:	c0 
c0108c47:	c7 44 24 04 fa 00 00 	movl   $0xfa,0x4(%esp)
c0108c4e:	00 
c0108c4f:	c7 04 24 b4 03 11 c0 	movl   $0xc01103b4,(%esp)
c0108c56:	e8 02 96 ff ff       	call   c010225d <__panic>
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
c0108c5b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108c5e:	8b 04 85 b4 85 1c c0 	mov    -0x3fe37a4c(,%eax,4),%eax
c0108c65:	8b 00                	mov    (%eax),%eax
c0108c67:	89 04 24             	mov    %eax,(%esp)
c0108c6a:	e8 9f f5 ff ff       	call   c010820e <pte2page>
c0108c6f:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0108c72:	8b 14 95 00 85 1c c0 	mov    -0x3fe37b00(,%edx,4),%edx
c0108c79:	39 d0                	cmp    %edx,%eax
c0108c7b:	74 24                	je     c0108ca1 <check_swap+0x526>
c0108c7d:	c7 44 24 0c c8 06 11 	movl   $0xc01106c8,0xc(%esp)
c0108c84:	c0 
c0108c85:	c7 44 24 08 1a 04 11 	movl   $0xc011041a,0x8(%esp)
c0108c8c:	c0 
c0108c8d:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
c0108c94:	00 
c0108c95:	c7 04 24 b4 03 11 c0 	movl   $0xc01103b4,(%esp)
c0108c9c:	e8 bc 95 ff ff       	call   c010225d <__panic>
         assert((*check_ptep[i] & PTE_P));          
c0108ca1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108ca4:	8b 04 85 b4 85 1c c0 	mov    -0x3fe37a4c(,%eax,4),%eax
c0108cab:	8b 00                	mov    (%eax),%eax
c0108cad:	83 e0 01             	and    $0x1,%eax
c0108cb0:	85 c0                	test   %eax,%eax
c0108cb2:	75 24                	jne    c0108cd8 <check_swap+0x55d>
c0108cb4:	c7 44 24 0c f0 06 11 	movl   $0xc01106f0,0xc(%esp)
c0108cbb:	c0 
c0108cbc:	c7 44 24 08 1a 04 11 	movl   $0xc011041a,0x8(%esp)
c0108cc3:	c0 
c0108cc4:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
c0108ccb:	00 
c0108ccc:	c7 04 24 b4 03 11 c0 	movl   $0xc01103b4,(%esp)
c0108cd3:	e8 85 95 ff ff       	call   c010225d <__panic>
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0108cd8:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0108cdc:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0108ce0:	0f 8e 0b ff ff ff    	jle    c0108bf1 <check_swap+0x476>
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
         assert((*check_ptep[i] & PTE_P));          
     }
     cprintf("set up init env for check_swap over!\n");
c0108ce6:	c7 04 24 0c 07 11 c0 	movl   $0xc011070c,(%esp)
c0108ced:	e8 e9 8a ff ff       	call   c01017db <cprintf>
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
c0108cf2:	e8 6c fa ff ff       	call   c0108763 <check_content_access>
c0108cf7:	89 45 cc             	mov    %eax,-0x34(%ebp)
     assert(ret==0);
c0108cfa:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0108cfe:	74 24                	je     c0108d24 <check_swap+0x5a9>
c0108d00:	c7 44 24 0c 32 07 11 	movl   $0xc0110732,0xc(%esp)
c0108d07:	c0 
c0108d08:	c7 44 24 08 1a 04 11 	movl   $0xc011041a,0x8(%esp)
c0108d0f:	c0 
c0108d10:	c7 44 24 04 01 01 00 	movl   $0x101,0x4(%esp)
c0108d17:	00 
c0108d18:	c7 04 24 b4 03 11 c0 	movl   $0xc01103b4,(%esp)
c0108d1f:	e8 39 95 ff ff       	call   c010225d <__panic>
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0108d24:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0108d2b:	eb 1e                	jmp    c0108d4b <check_swap+0x5d0>
         free_pages(check_rp[i],1);
c0108d2d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108d30:	8b 04 85 00 85 1c c0 	mov    -0x3fe37b00(,%eax,4),%eax
c0108d37:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0108d3e:	00 
c0108d3f:	89 04 24             	mov    %eax,(%esp)
c0108d42:	e8 75 d8 ff ff       	call   c01065bc <free_pages>
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
     assert(ret==0);
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0108d47:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0108d4b:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0108d4f:	7e dc                	jle    c0108d2d <check_swap+0x5b2>
         free_pages(check_rp[i],1);
     } 

     //free_page(pte2page(*temp_ptep));
    free_page(pa2page(pgdir[0]));
c0108d51:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108d54:	8b 00                	mov    (%eax),%eax
c0108d56:	89 04 24             	mov    %eax,(%esp)
c0108d59:	e8 61 f4 ff ff       	call   c01081bf <pa2page>
c0108d5e:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0108d65:	00 
c0108d66:	89 04 24             	mov    %eax,(%esp)
c0108d69:	e8 4e d8 ff ff       	call   c01065bc <free_pages>
     pgdir[0] = 0;
c0108d6e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108d71:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
     mm->pgdir = NULL;
c0108d77:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108d7a:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
     mm_destroy(mm);
c0108d81:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108d84:	89 04 24             	mov    %eax,(%esp)
c0108d87:	e8 ec 08 00 00       	call   c0109678 <mm_destroy>
     check_mm_struct = NULL;
c0108d8c:	c7 05 cc 85 1c c0 00 	movl   $0x0,0xc01c85cc
c0108d93:	00 00 00 
     
     nr_free = nr_free_store;
c0108d96:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0108d99:	a3 e4 84 1c c0       	mov    %eax,0xc01c84e4
     free_list = free_list_store;
c0108d9e:	8b 45 98             	mov    -0x68(%ebp),%eax
c0108da1:	8b 55 9c             	mov    -0x64(%ebp),%edx
c0108da4:	a3 dc 84 1c c0       	mov    %eax,0xc01c84dc
c0108da9:	89 15 e0 84 1c c0    	mov    %edx,0xc01c84e0

     
     le = &free_list;
c0108daf:	c7 45 e8 dc 84 1c c0 	movl   $0xc01c84dc,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c0108db6:	eb 1d                	jmp    c0108dd5 <check_swap+0x65a>
         struct Page *p = le2page(le, page_link);
c0108db8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108dbb:	83 e8 10             	sub    $0x10,%eax
c0108dbe:	89 45 c8             	mov    %eax,-0x38(%ebp)
         count --, total -= p->property;
c0108dc1:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0108dc5:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0108dc8:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0108dcb:	8b 40 08             	mov    0x8(%eax),%eax
c0108dce:	29 c2                	sub    %eax,%edx
c0108dd0:	89 d0                	mov    %edx,%eax
c0108dd2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108dd5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108dd8:	89 45 a0             	mov    %eax,-0x60(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0108ddb:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0108dde:	8b 40 04             	mov    0x4(%eax),%eax
     nr_free = nr_free_store;
     free_list = free_list_store;

     
     le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c0108de1:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0108de4:	81 7d e8 dc 84 1c c0 	cmpl   $0xc01c84dc,-0x18(%ebp)
c0108deb:	75 cb                	jne    c0108db8 <check_swap+0x63d>
         struct Page *p = le2page(le, page_link);
         count --, total -= p->property;
     }
     cprintf("count is %d, total is %d\n",count,total);
c0108ded:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108df0:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108df4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108df7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108dfb:	c7 04 24 39 07 11 c0 	movl   $0xc0110739,(%esp)
c0108e02:	e8 d4 89 ff ff       	call   c01017db <cprintf>
     //assert(count == 0);
     
     cprintf("check_swap() succeeded!\n");
c0108e07:	c7 04 24 53 07 11 c0 	movl   $0xc0110753,(%esp)
c0108e0e:	e8 c8 89 ff ff       	call   c01017db <cprintf>
}
c0108e13:	83 c4 74             	add    $0x74,%esp
c0108e16:	5b                   	pop    %ebx
c0108e17:	5d                   	pop    %ebp
c0108e18:	c3                   	ret    

c0108e19 <_fifo_init_mm>:
 * (2) _fifo_init_mm: init pra_list_head and let  mm->sm_priv point to the addr of pra_list_head.
 *              Now, From the memory control struct mm_struct, we can access FIFO PRA
 */
static int
_fifo_init_mm(struct mm_struct *mm)
{     
c0108e19:	55                   	push   %ebp
c0108e1a:	89 e5                	mov    %esp,%ebp
c0108e1c:	83 ec 10             	sub    $0x10,%esp
c0108e1f:	c7 45 fc c4 85 1c c0 	movl   $0xc01c85c4,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0108e26:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108e29:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0108e2c:	89 50 04             	mov    %edx,0x4(%eax)
c0108e2f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108e32:	8b 50 04             	mov    0x4(%eax),%edx
c0108e35:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108e38:	89 10                	mov    %edx,(%eax)
     list_init(&pra_list_head);
     mm->sm_priv = &pra_list_head;
c0108e3a:	8b 45 08             	mov    0x8(%ebp),%eax
c0108e3d:	c7 40 14 c4 85 1c c0 	movl   $0xc01c85c4,0x14(%eax)
     //cprintf(" mm->sm_priv %x in fifo_init_mm\n",mm->sm_priv);
     return 0;
c0108e44:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108e49:	c9                   	leave  
c0108e4a:	c3                   	ret    

c0108e4b <_fifo_map_swappable>:
/*
 * (3)_fifo_map_swappable: According FIFO PRA, we should link the most recent arrival page at the back of pra_list_head qeueue
 */
static int
_fifo_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c0108e4b:	55                   	push   %ebp
c0108e4c:	89 e5                	mov    %esp,%ebp
c0108e4e:	83 ec 48             	sub    $0x48,%esp
    list_entry_t *head=(list_entry_t*) mm->sm_priv;
c0108e51:	8b 45 08             	mov    0x8(%ebp),%eax
c0108e54:	8b 40 14             	mov    0x14(%eax),%eax
c0108e57:	89 45 f4             	mov    %eax,-0xc(%ebp)
    list_entry_t *entry=&(page->pra_page_link);
c0108e5a:	8b 45 10             	mov    0x10(%ebp),%eax
c0108e5d:	83 c0 18             	add    $0x18,%eax
c0108e60:	89 45 f0             	mov    %eax,-0x10(%ebp)
 
    assert(entry != NULL && head != NULL);
c0108e63:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0108e67:	74 06                	je     c0108e6f <_fifo_map_swappable+0x24>
c0108e69:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108e6d:	75 24                	jne    c0108e93 <_fifo_map_swappable+0x48>
c0108e6f:	c7 44 24 0c 6c 07 11 	movl   $0xc011076c,0xc(%esp)
c0108e76:	c0 
c0108e77:	c7 44 24 08 8a 07 11 	movl   $0xc011078a,0x8(%esp)
c0108e7e:	c0 
c0108e7f:	c7 44 24 04 32 00 00 	movl   $0x32,0x4(%esp)
c0108e86:	00 
c0108e87:	c7 04 24 9f 07 11 c0 	movl   $0xc011079f,(%esp)
c0108e8e:	e8 ca 93 ff ff       	call   c010225d <__panic>
c0108e93:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108e96:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0108e99:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108e9c:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0108e9f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108ea2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0108ea5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108ea8:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0108eab:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108eae:	8b 40 04             	mov    0x4(%eax),%eax
c0108eb1:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108eb4:	89 55 dc             	mov    %edx,-0x24(%ebp)
c0108eb7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0108eba:	89 55 d8             	mov    %edx,-0x28(%ebp)
c0108ebd:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0108ec0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0108ec3:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0108ec6:	89 10                	mov    %edx,(%eax)
c0108ec8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0108ecb:	8b 10                	mov    (%eax),%edx
c0108ecd:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108ed0:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0108ed3:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108ed6:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0108ed9:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0108edc:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108edf:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0108ee2:	89 10                	mov    %edx,(%eax)
    //record the page access situlation
    /*LAB3 EXERCISE 2: YOUR CODE*/ 
    //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
    list_add(head, entry);
    return 0;
c0108ee4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108ee9:	c9                   	leave  
c0108eea:	c3                   	ret    

c0108eeb <_fifo_swap_out_victim>:
 *  (4)_fifo_swap_out_victim: According FIFO PRA, we should unlink the  earliest arrival page in front of pra_list_head qeueue,
 *                            then set the addr of addr of this page to ptr_page.
 */
static int
_fifo_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick)
{
c0108eeb:	55                   	push   %ebp
c0108eec:	89 e5                	mov    %esp,%ebp
c0108eee:	83 ec 38             	sub    $0x38,%esp
     list_entry_t *head=(list_entry_t*) mm->sm_priv;
c0108ef1:	8b 45 08             	mov    0x8(%ebp),%eax
c0108ef4:	8b 40 14             	mov    0x14(%eax),%eax
c0108ef7:	89 45 f4             	mov    %eax,-0xc(%ebp)
         assert(head != NULL);
c0108efa:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108efe:	75 24                	jne    c0108f24 <_fifo_swap_out_victim+0x39>
c0108f00:	c7 44 24 0c b3 07 11 	movl   $0xc01107b3,0xc(%esp)
c0108f07:	c0 
c0108f08:	c7 44 24 08 8a 07 11 	movl   $0xc011078a,0x8(%esp)
c0108f0f:	c0 
c0108f10:	c7 44 24 04 41 00 00 	movl   $0x41,0x4(%esp)
c0108f17:	00 
c0108f18:	c7 04 24 9f 07 11 c0 	movl   $0xc011079f,(%esp)
c0108f1f:	e8 39 93 ff ff       	call   c010225d <__panic>
     assert(in_tick==0);
c0108f24:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0108f28:	74 24                	je     c0108f4e <_fifo_swap_out_victim+0x63>
c0108f2a:	c7 44 24 0c c0 07 11 	movl   $0xc01107c0,0xc(%esp)
c0108f31:	c0 
c0108f32:	c7 44 24 08 8a 07 11 	movl   $0xc011078a,0x8(%esp)
c0108f39:	c0 
c0108f3a:	c7 44 24 04 42 00 00 	movl   $0x42,0x4(%esp)
c0108f41:	00 
c0108f42:	c7 04 24 9f 07 11 c0 	movl   $0xc011079f,(%esp)
c0108f49:	e8 0f 93 ff ff       	call   c010225d <__panic>
     /* Select the victim */
     /*LAB3 EXERCISE 2: YOUR CODE*/ 
     //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
     //(2)  set the addr of addr of this page to ptr_page
     /* Select the tail */
     list_entry_t *le = head->prev;
c0108f4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108f51:	8b 00                	mov    (%eax),%eax
c0108f53:	89 45 f0             	mov    %eax,-0x10(%ebp)
     assert(head!=le);
c0108f56:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108f59:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0108f5c:	75 24                	jne    c0108f82 <_fifo_swap_out_victim+0x97>
c0108f5e:	c7 44 24 0c cb 07 11 	movl   $0xc01107cb,0xc(%esp)
c0108f65:	c0 
c0108f66:	c7 44 24 08 8a 07 11 	movl   $0xc011078a,0x8(%esp)
c0108f6d:	c0 
c0108f6e:	c7 44 24 04 49 00 00 	movl   $0x49,0x4(%esp)
c0108f75:	00 
c0108f76:	c7 04 24 9f 07 11 c0 	movl   $0xc011079f,(%esp)
c0108f7d:	e8 db 92 ff ff       	call   c010225d <__panic>
     struct Page *p = le2page(le, pra_page_link);
c0108f82:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108f85:	83 e8 18             	sub    $0x18,%eax
c0108f88:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0108f8b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108f8e:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0108f91:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108f94:	8b 40 04             	mov    0x4(%eax),%eax
c0108f97:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0108f9a:	8b 12                	mov    (%edx),%edx
c0108f9c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0108f9f:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0108fa2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108fa5:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108fa8:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0108fab:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108fae:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0108fb1:	89 10                	mov    %edx,(%eax)
     list_del(le);
     assert(p !=NULL);
c0108fb3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0108fb7:	75 24                	jne    c0108fdd <_fifo_swap_out_victim+0xf2>
c0108fb9:	c7 44 24 0c d4 07 11 	movl   $0xc01107d4,0xc(%esp)
c0108fc0:	c0 
c0108fc1:	c7 44 24 08 8a 07 11 	movl   $0xc011078a,0x8(%esp)
c0108fc8:	c0 
c0108fc9:	c7 44 24 04 4c 00 00 	movl   $0x4c,0x4(%esp)
c0108fd0:	00 
c0108fd1:	c7 04 24 9f 07 11 c0 	movl   $0xc011079f,(%esp)
c0108fd8:	e8 80 92 ff ff       	call   c010225d <__panic>
     *ptr_page = p;
c0108fdd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108fe0:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0108fe3:	89 10                	mov    %edx,(%eax)
     return 0;
c0108fe5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108fea:	c9                   	leave  
c0108feb:	c3                   	ret    

c0108fec <_fifo_check_swap>:

static int
_fifo_check_swap(void) {
c0108fec:	55                   	push   %ebp
c0108fed:	89 e5                	mov    %esp,%ebp
c0108fef:	83 ec 18             	sub    $0x18,%esp
    cprintf("write Virt Page c in fifo_check_swap\n");
c0108ff2:	c7 04 24 e0 07 11 c0 	movl   $0xc01107e0,(%esp)
c0108ff9:	e8 dd 87 ff ff       	call   c01017db <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c0108ffe:	b8 00 30 00 00       	mov    $0x3000,%eax
c0109003:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==4);
c0109006:	a1 38 64 1c c0       	mov    0xc01c6438,%eax
c010900b:	83 f8 04             	cmp    $0x4,%eax
c010900e:	74 24                	je     c0109034 <_fifo_check_swap+0x48>
c0109010:	c7 44 24 0c 06 08 11 	movl   $0xc0110806,0xc(%esp)
c0109017:	c0 
c0109018:	c7 44 24 08 8a 07 11 	movl   $0xc011078a,0x8(%esp)
c010901f:	c0 
c0109020:	c7 44 24 04 55 00 00 	movl   $0x55,0x4(%esp)
c0109027:	00 
c0109028:	c7 04 24 9f 07 11 c0 	movl   $0xc011079f,(%esp)
c010902f:	e8 29 92 ff ff       	call   c010225d <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0109034:	c7 04 24 18 08 11 c0 	movl   $0xc0110818,(%esp)
c010903b:	e8 9b 87 ff ff       	call   c01017db <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c0109040:	b8 00 10 00 00       	mov    $0x1000,%eax
c0109045:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==4);
c0109048:	a1 38 64 1c c0       	mov    0xc01c6438,%eax
c010904d:	83 f8 04             	cmp    $0x4,%eax
c0109050:	74 24                	je     c0109076 <_fifo_check_swap+0x8a>
c0109052:	c7 44 24 0c 06 08 11 	movl   $0xc0110806,0xc(%esp)
c0109059:	c0 
c010905a:	c7 44 24 08 8a 07 11 	movl   $0xc011078a,0x8(%esp)
c0109061:	c0 
c0109062:	c7 44 24 04 58 00 00 	movl   $0x58,0x4(%esp)
c0109069:	00 
c010906a:	c7 04 24 9f 07 11 c0 	movl   $0xc011079f,(%esp)
c0109071:	e8 e7 91 ff ff       	call   c010225d <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0109076:	c7 04 24 40 08 11 c0 	movl   $0xc0110840,(%esp)
c010907d:	e8 59 87 ff ff       	call   c01017db <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c0109082:	b8 00 40 00 00       	mov    $0x4000,%eax
c0109087:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==4);
c010908a:	a1 38 64 1c c0       	mov    0xc01c6438,%eax
c010908f:	83 f8 04             	cmp    $0x4,%eax
c0109092:	74 24                	je     c01090b8 <_fifo_check_swap+0xcc>
c0109094:	c7 44 24 0c 06 08 11 	movl   $0xc0110806,0xc(%esp)
c010909b:	c0 
c010909c:	c7 44 24 08 8a 07 11 	movl   $0xc011078a,0x8(%esp)
c01090a3:	c0 
c01090a4:	c7 44 24 04 5b 00 00 	movl   $0x5b,0x4(%esp)
c01090ab:	00 
c01090ac:	c7 04 24 9f 07 11 c0 	movl   $0xc011079f,(%esp)
c01090b3:	e8 a5 91 ff ff       	call   c010225d <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c01090b8:	c7 04 24 68 08 11 c0 	movl   $0xc0110868,(%esp)
c01090bf:	e8 17 87 ff ff       	call   c01017db <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c01090c4:	b8 00 20 00 00       	mov    $0x2000,%eax
c01090c9:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==4);
c01090cc:	a1 38 64 1c c0       	mov    0xc01c6438,%eax
c01090d1:	83 f8 04             	cmp    $0x4,%eax
c01090d4:	74 24                	je     c01090fa <_fifo_check_swap+0x10e>
c01090d6:	c7 44 24 0c 06 08 11 	movl   $0xc0110806,0xc(%esp)
c01090dd:	c0 
c01090de:	c7 44 24 08 8a 07 11 	movl   $0xc011078a,0x8(%esp)
c01090e5:	c0 
c01090e6:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c01090ed:	00 
c01090ee:	c7 04 24 9f 07 11 c0 	movl   $0xc011079f,(%esp)
c01090f5:	e8 63 91 ff ff       	call   c010225d <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c01090fa:	c7 04 24 90 08 11 c0 	movl   $0xc0110890,(%esp)
c0109101:	e8 d5 86 ff ff       	call   c01017db <cprintf>
    *(unsigned char *)0x5000 = 0x0e;
c0109106:	b8 00 50 00 00       	mov    $0x5000,%eax
c010910b:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==5);
c010910e:	a1 38 64 1c c0       	mov    0xc01c6438,%eax
c0109113:	83 f8 05             	cmp    $0x5,%eax
c0109116:	74 24                	je     c010913c <_fifo_check_swap+0x150>
c0109118:	c7 44 24 0c b6 08 11 	movl   $0xc01108b6,0xc(%esp)
c010911f:	c0 
c0109120:	c7 44 24 08 8a 07 11 	movl   $0xc011078a,0x8(%esp)
c0109127:	c0 
c0109128:	c7 44 24 04 61 00 00 	movl   $0x61,0x4(%esp)
c010912f:	00 
c0109130:	c7 04 24 9f 07 11 c0 	movl   $0xc011079f,(%esp)
c0109137:	e8 21 91 ff ff       	call   c010225d <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c010913c:	c7 04 24 68 08 11 c0 	movl   $0xc0110868,(%esp)
c0109143:	e8 93 86 ff ff       	call   c01017db <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0109148:	b8 00 20 00 00       	mov    $0x2000,%eax
c010914d:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==5);
c0109150:	a1 38 64 1c c0       	mov    0xc01c6438,%eax
c0109155:	83 f8 05             	cmp    $0x5,%eax
c0109158:	74 24                	je     c010917e <_fifo_check_swap+0x192>
c010915a:	c7 44 24 0c b6 08 11 	movl   $0xc01108b6,0xc(%esp)
c0109161:	c0 
c0109162:	c7 44 24 08 8a 07 11 	movl   $0xc011078a,0x8(%esp)
c0109169:	c0 
c010916a:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c0109171:	00 
c0109172:	c7 04 24 9f 07 11 c0 	movl   $0xc011079f,(%esp)
c0109179:	e8 df 90 ff ff       	call   c010225d <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c010917e:	c7 04 24 18 08 11 c0 	movl   $0xc0110818,(%esp)
c0109185:	e8 51 86 ff ff       	call   c01017db <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c010918a:	b8 00 10 00 00       	mov    $0x1000,%eax
c010918f:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==6);
c0109192:	a1 38 64 1c c0       	mov    0xc01c6438,%eax
c0109197:	83 f8 06             	cmp    $0x6,%eax
c010919a:	74 24                	je     c01091c0 <_fifo_check_swap+0x1d4>
c010919c:	c7 44 24 0c c5 08 11 	movl   $0xc01108c5,0xc(%esp)
c01091a3:	c0 
c01091a4:	c7 44 24 08 8a 07 11 	movl   $0xc011078a,0x8(%esp)
c01091ab:	c0 
c01091ac:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
c01091b3:	00 
c01091b4:	c7 04 24 9f 07 11 c0 	movl   $0xc011079f,(%esp)
c01091bb:	e8 9d 90 ff ff       	call   c010225d <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c01091c0:	c7 04 24 68 08 11 c0 	movl   $0xc0110868,(%esp)
c01091c7:	e8 0f 86 ff ff       	call   c01017db <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c01091cc:	b8 00 20 00 00       	mov    $0x2000,%eax
c01091d1:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==7);
c01091d4:	a1 38 64 1c c0       	mov    0xc01c6438,%eax
c01091d9:	83 f8 07             	cmp    $0x7,%eax
c01091dc:	74 24                	je     c0109202 <_fifo_check_swap+0x216>
c01091de:	c7 44 24 0c d4 08 11 	movl   $0xc01108d4,0xc(%esp)
c01091e5:	c0 
c01091e6:	c7 44 24 08 8a 07 11 	movl   $0xc011078a,0x8(%esp)
c01091ed:	c0 
c01091ee:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c01091f5:	00 
c01091f6:	c7 04 24 9f 07 11 c0 	movl   $0xc011079f,(%esp)
c01091fd:	e8 5b 90 ff ff       	call   c010225d <__panic>
    cprintf("write Virt Page c in fifo_check_swap\n");
c0109202:	c7 04 24 e0 07 11 c0 	movl   $0xc01107e0,(%esp)
c0109209:	e8 cd 85 ff ff       	call   c01017db <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c010920e:	b8 00 30 00 00       	mov    $0x3000,%eax
c0109213:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==8);
c0109216:	a1 38 64 1c c0       	mov    0xc01c6438,%eax
c010921b:	83 f8 08             	cmp    $0x8,%eax
c010921e:	74 24                	je     c0109244 <_fifo_check_swap+0x258>
c0109220:	c7 44 24 0c e3 08 11 	movl   $0xc01108e3,0xc(%esp)
c0109227:	c0 
c0109228:	c7 44 24 08 8a 07 11 	movl   $0xc011078a,0x8(%esp)
c010922f:	c0 
c0109230:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c0109237:	00 
c0109238:	c7 04 24 9f 07 11 c0 	movl   $0xc011079f,(%esp)
c010923f:	e8 19 90 ff ff       	call   c010225d <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0109244:	c7 04 24 40 08 11 c0 	movl   $0xc0110840,(%esp)
c010924b:	e8 8b 85 ff ff       	call   c01017db <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c0109250:	b8 00 40 00 00       	mov    $0x4000,%eax
c0109255:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==9);
c0109258:	a1 38 64 1c c0       	mov    0xc01c6438,%eax
c010925d:	83 f8 09             	cmp    $0x9,%eax
c0109260:	74 24                	je     c0109286 <_fifo_check_swap+0x29a>
c0109262:	c7 44 24 0c f2 08 11 	movl   $0xc01108f2,0xc(%esp)
c0109269:	c0 
c010926a:	c7 44 24 08 8a 07 11 	movl   $0xc011078a,0x8(%esp)
c0109271:	c0 
c0109272:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c0109279:	00 
c010927a:	c7 04 24 9f 07 11 c0 	movl   $0xc011079f,(%esp)
c0109281:	e8 d7 8f ff ff       	call   c010225d <__panic>
    return 0;
c0109286:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010928b:	c9                   	leave  
c010928c:	c3                   	ret    

c010928d <_fifo_init>:


static int
_fifo_init(void)
{
c010928d:	55                   	push   %ebp
c010928e:	89 e5                	mov    %esp,%ebp
    return 0;
c0109290:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109295:	5d                   	pop    %ebp
c0109296:	c3                   	ret    

c0109297 <_fifo_set_unswappable>:

static int
_fifo_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0109297:	55                   	push   %ebp
c0109298:	89 e5                	mov    %esp,%ebp
    return 0;
c010929a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010929f:	5d                   	pop    %ebp
c01092a0:	c3                   	ret    

c01092a1 <_fifo_tick_event>:

static int
_fifo_tick_event(struct mm_struct *mm)
{ return 0; }
c01092a1:	55                   	push   %ebp
c01092a2:	89 e5                	mov    %esp,%ebp
c01092a4:	b8 00 00 00 00       	mov    $0x0,%eax
c01092a9:	5d                   	pop    %ebp
c01092aa:	c3                   	ret    

c01092ab <mm_count>:
bool user_mem_check(struct mm_struct *mm, uintptr_t start, size_t len, bool write);
bool copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable);
bool copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len);

static inline int
mm_count(struct mm_struct *mm) {
c01092ab:	55                   	push   %ebp
c01092ac:	89 e5                	mov    %esp,%ebp
    return mm->mm_count;
c01092ae:	8b 45 08             	mov    0x8(%ebp),%eax
c01092b1:	8b 40 18             	mov    0x18(%eax),%eax
}
c01092b4:	5d                   	pop    %ebp
c01092b5:	c3                   	ret    

c01092b6 <set_mm_count>:

static inline void
set_mm_count(struct mm_struct *mm, int val) {
c01092b6:	55                   	push   %ebp
c01092b7:	89 e5                	mov    %esp,%ebp
    mm->mm_count = val;
c01092b9:	8b 45 08             	mov    0x8(%ebp),%eax
c01092bc:	8b 55 0c             	mov    0xc(%ebp),%edx
c01092bf:	89 50 18             	mov    %edx,0x18(%eax)
}
c01092c2:	5d                   	pop    %ebp
c01092c3:	c3                   	ret    

c01092c4 <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c01092c4:	55                   	push   %ebp
c01092c5:	89 e5                	mov    %esp,%ebp
c01092c7:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c01092ca:	8b 45 08             	mov    0x8(%ebp),%eax
c01092cd:	c1 e8 0c             	shr    $0xc,%eax
c01092d0:	89 c2                	mov    %eax,%edx
c01092d2:	a1 a0 63 1c c0       	mov    0xc01c63a0,%eax
c01092d7:	39 c2                	cmp    %eax,%edx
c01092d9:	72 1c                	jb     c01092f7 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c01092db:	c7 44 24 08 14 09 11 	movl   $0xc0110914,0x8(%esp)
c01092e2:	c0 
c01092e3:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c01092ea:	00 
c01092eb:	c7 04 24 33 09 11 c0 	movl   $0xc0110933,(%esp)
c01092f2:	e8 66 8f ff ff       	call   c010225d <__panic>
    }
    return &pages[PPN(pa)];
c01092f7:	8b 0d f0 84 1c c0    	mov    0xc01c84f0,%ecx
c01092fd:	8b 45 08             	mov    0x8(%ebp),%eax
c0109300:	c1 e8 0c             	shr    $0xc,%eax
c0109303:	89 c2                	mov    %eax,%edx
c0109305:	89 d0                	mov    %edx,%eax
c0109307:	c1 e0 03             	shl    $0x3,%eax
c010930a:	01 d0                	add    %edx,%eax
c010930c:	c1 e0 02             	shl    $0x2,%eax
c010930f:	01 c8                	add    %ecx,%eax
}
c0109311:	c9                   	leave  
c0109312:	c3                   	ret    

c0109313 <mm_create>:
static void check_vma_struct(void);
static void check_pgfault(void);

// mm_create -  alloc a mm_struct & initialize it.
struct mm_struct *
mm_create(void) {
c0109313:	55                   	push   %ebp
c0109314:	89 e5                	mov    %esp,%ebp
c0109316:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = kmalloc(sizeof(struct mm_struct));
c0109319:	c7 04 24 2c 00 00 00 	movl   $0x2c,(%esp)
c0109320:	e8 a7 cd ff ff       	call   c01060cc <kmalloc>
c0109325:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (mm != NULL) {
c0109328:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010932c:	0f 84 81 00 00 00    	je     c01093b3 <mm_create+0xa0>
        list_init(&(mm->mmap_list));
c0109332:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109335:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0109338:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010933b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010933e:	89 50 04             	mov    %edx,0x4(%eax)
c0109341:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109344:	8b 50 04             	mov    0x4(%eax),%edx
c0109347:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010934a:	89 10                	mov    %edx,(%eax)
        mm->mmap_cache = NULL;
c010934c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010934f:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        mm->pgdir = NULL;
c0109356:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109359:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        mm->map_count = 0;
c0109360:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109363:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)

        if (swap_init_ok) swap_init_mm(mm);
c010936a:	a1 2c 64 1c c0       	mov    0xc01c642c,%eax
c010936f:	85 c0                	test   %eax,%eax
c0109371:	74 0d                	je     c0109380 <mm_create+0x6d>
c0109373:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109376:	89 04 24             	mov    %eax,(%esp)
c0109379:	e8 5e ef ff ff       	call   c01082dc <swap_init_mm>
c010937e:	eb 0a                	jmp    c010938a <mm_create+0x77>
        else mm->sm_priv = NULL;
c0109380:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109383:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        
        set_mm_count(mm, 0);
c010938a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0109391:	00 
c0109392:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109395:	89 04 24             	mov    %eax,(%esp)
c0109398:	e8 19 ff ff ff       	call   c01092b6 <set_mm_count>
        sem_init(&(mm->mm_sem), 1);
c010939d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01093a0:	83 c0 1c             	add    $0x1c,%eax
c01093a3:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01093aa:	00 
c01093ab:	89 04 24             	mov    %eax,(%esp)
c01093ae:	e8 96 1a 00 00       	call   c010ae49 <sem_init>
    }    
    return mm;
c01093b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01093b6:	c9                   	leave  
c01093b7:	c3                   	ret    

c01093b8 <vma_create>:

// vma_create - alloc a vma_struct & initialize it. (addr range: vm_start~vm_end)
struct vma_struct *
vma_create(uintptr_t vm_start, uintptr_t vm_end, uint32_t vm_flags) {
c01093b8:	55                   	push   %ebp
c01093b9:	89 e5                	mov    %esp,%ebp
c01093bb:	83 ec 28             	sub    $0x28,%esp
    struct vma_struct *vma = kmalloc(sizeof(struct vma_struct));
c01093be:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c01093c5:	e8 02 cd ff ff       	call   c01060cc <kmalloc>
c01093ca:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (vma != NULL) {
c01093cd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01093d1:	74 1b                	je     c01093ee <vma_create+0x36>
        vma->vm_start = vm_start;
c01093d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01093d6:	8b 55 08             	mov    0x8(%ebp),%edx
c01093d9:	89 50 04             	mov    %edx,0x4(%eax)
        vma->vm_end = vm_end;
c01093dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01093df:	8b 55 0c             	mov    0xc(%ebp),%edx
c01093e2:	89 50 08             	mov    %edx,0x8(%eax)
        vma->vm_flags = vm_flags;
c01093e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01093e8:	8b 55 10             	mov    0x10(%ebp),%edx
c01093eb:	89 50 0c             	mov    %edx,0xc(%eax)
    }
    return vma;
c01093ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01093f1:	c9                   	leave  
c01093f2:	c3                   	ret    

c01093f3 <find_vma>:


// find_vma - find a vma  (vma->vm_start <= addr <= vma_vm_end)
struct vma_struct *
find_vma(struct mm_struct *mm, uintptr_t addr) {
c01093f3:	55                   	push   %ebp
c01093f4:	89 e5                	mov    %esp,%ebp
c01093f6:	83 ec 20             	sub    $0x20,%esp
    struct vma_struct *vma = NULL;
c01093f9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    if (mm != NULL) {
c0109400:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0109404:	0f 84 95 00 00 00    	je     c010949f <find_vma+0xac>
        vma = mm->mmap_cache;
c010940a:	8b 45 08             	mov    0x8(%ebp),%eax
c010940d:	8b 40 08             	mov    0x8(%eax),%eax
c0109410:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
c0109413:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0109417:	74 16                	je     c010942f <find_vma+0x3c>
c0109419:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010941c:	8b 40 04             	mov    0x4(%eax),%eax
c010941f:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109422:	77 0b                	ja     c010942f <find_vma+0x3c>
c0109424:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109427:	8b 40 08             	mov    0x8(%eax),%eax
c010942a:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010942d:	77 61                	ja     c0109490 <find_vma+0x9d>
                bool found = 0;
c010942f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
                list_entry_t *list = &(mm->mmap_list), *le = list;
c0109436:	8b 45 08             	mov    0x8(%ebp),%eax
c0109439:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010943c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010943f:	89 45 f4             	mov    %eax,-0xc(%ebp)
                while ((le = list_next(le)) != list) {
c0109442:	eb 28                	jmp    c010946c <find_vma+0x79>
                    vma = le2vma(le, list_link);
c0109444:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109447:	83 e8 10             	sub    $0x10,%eax
c010944a:	89 45 fc             	mov    %eax,-0x4(%ebp)
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
c010944d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109450:	8b 40 04             	mov    0x4(%eax),%eax
c0109453:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109456:	77 14                	ja     c010946c <find_vma+0x79>
c0109458:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010945b:	8b 40 08             	mov    0x8(%eax),%eax
c010945e:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109461:	76 09                	jbe    c010946c <find_vma+0x79>
                        found = 1;
c0109463:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
                        break;
c010946a:	eb 17                	jmp    c0109483 <find_vma+0x90>
c010946c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010946f:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0109472:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109475:	8b 40 04             	mov    0x4(%eax),%eax
    if (mm != NULL) {
        vma = mm->mmap_cache;
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
                bool found = 0;
                list_entry_t *list = &(mm->mmap_list), *le = list;
                while ((le = list_next(le)) != list) {
c0109478:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010947b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010947e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0109481:	75 c1                	jne    c0109444 <find_vma+0x51>
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
                        found = 1;
                        break;
                    }
                }
                if (!found) {
c0109483:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c0109487:	75 07                	jne    c0109490 <find_vma+0x9d>
                    vma = NULL;
c0109489:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                }
        }
        if (vma != NULL) {
c0109490:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0109494:	74 09                	je     c010949f <find_vma+0xac>
            mm->mmap_cache = vma;
c0109496:	8b 45 08             	mov    0x8(%ebp),%eax
c0109499:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010949c:	89 50 08             	mov    %edx,0x8(%eax)
        }
    }
    return vma;
c010949f:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c01094a2:	c9                   	leave  
c01094a3:	c3                   	ret    

c01094a4 <check_vma_overlap>:


// check_vma_overlap - check if vma1 overlaps vma2 ?
static inline void
check_vma_overlap(struct vma_struct *prev, struct vma_struct *next) {
c01094a4:	55                   	push   %ebp
c01094a5:	89 e5                	mov    %esp,%ebp
c01094a7:	83 ec 18             	sub    $0x18,%esp
    assert(prev->vm_start < prev->vm_end);
c01094aa:	8b 45 08             	mov    0x8(%ebp),%eax
c01094ad:	8b 50 04             	mov    0x4(%eax),%edx
c01094b0:	8b 45 08             	mov    0x8(%ebp),%eax
c01094b3:	8b 40 08             	mov    0x8(%eax),%eax
c01094b6:	39 c2                	cmp    %eax,%edx
c01094b8:	72 24                	jb     c01094de <check_vma_overlap+0x3a>
c01094ba:	c7 44 24 0c 41 09 11 	movl   $0xc0110941,0xc(%esp)
c01094c1:	c0 
c01094c2:	c7 44 24 08 5f 09 11 	movl   $0xc011095f,0x8(%esp)
c01094c9:	c0 
c01094ca:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
c01094d1:	00 
c01094d2:	c7 04 24 74 09 11 c0 	movl   $0xc0110974,(%esp)
c01094d9:	e8 7f 8d ff ff       	call   c010225d <__panic>
    assert(prev->vm_end <= next->vm_start);
c01094de:	8b 45 08             	mov    0x8(%ebp),%eax
c01094e1:	8b 50 08             	mov    0x8(%eax),%edx
c01094e4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01094e7:	8b 40 04             	mov    0x4(%eax),%eax
c01094ea:	39 c2                	cmp    %eax,%edx
c01094ec:	76 24                	jbe    c0109512 <check_vma_overlap+0x6e>
c01094ee:	c7 44 24 0c 84 09 11 	movl   $0xc0110984,0xc(%esp)
c01094f5:	c0 
c01094f6:	c7 44 24 08 5f 09 11 	movl   $0xc011095f,0x8(%esp)
c01094fd:	c0 
c01094fe:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c0109505:	00 
c0109506:	c7 04 24 74 09 11 c0 	movl   $0xc0110974,(%esp)
c010950d:	e8 4b 8d ff ff       	call   c010225d <__panic>
    assert(next->vm_start < next->vm_end);
c0109512:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109515:	8b 50 04             	mov    0x4(%eax),%edx
c0109518:	8b 45 0c             	mov    0xc(%ebp),%eax
c010951b:	8b 40 08             	mov    0x8(%eax),%eax
c010951e:	39 c2                	cmp    %eax,%edx
c0109520:	72 24                	jb     c0109546 <check_vma_overlap+0xa2>
c0109522:	c7 44 24 0c a3 09 11 	movl   $0xc01109a3,0xc(%esp)
c0109529:	c0 
c010952a:	c7 44 24 08 5f 09 11 	movl   $0xc011095f,0x8(%esp)
c0109531:	c0 
c0109532:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c0109539:	00 
c010953a:	c7 04 24 74 09 11 c0 	movl   $0xc0110974,(%esp)
c0109541:	e8 17 8d ff ff       	call   c010225d <__panic>
}
c0109546:	c9                   	leave  
c0109547:	c3                   	ret    

c0109548 <insert_vma_struct>:


// insert_vma_struct -insert vma in mm's list link
void
insert_vma_struct(struct mm_struct *mm, struct vma_struct *vma) {
c0109548:	55                   	push   %ebp
c0109549:	89 e5                	mov    %esp,%ebp
c010954b:	83 ec 48             	sub    $0x48,%esp
    assert(vma->vm_start < vma->vm_end);
c010954e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109551:	8b 50 04             	mov    0x4(%eax),%edx
c0109554:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109557:	8b 40 08             	mov    0x8(%eax),%eax
c010955a:	39 c2                	cmp    %eax,%edx
c010955c:	72 24                	jb     c0109582 <insert_vma_struct+0x3a>
c010955e:	c7 44 24 0c c1 09 11 	movl   $0xc01109c1,0xc(%esp)
c0109565:	c0 
c0109566:	c7 44 24 08 5f 09 11 	movl   $0xc011095f,0x8(%esp)
c010956d:	c0 
c010956e:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
c0109575:	00 
c0109576:	c7 04 24 74 09 11 c0 	movl   $0xc0110974,(%esp)
c010957d:	e8 db 8c ff ff       	call   c010225d <__panic>
    list_entry_t *list = &(mm->mmap_list);
c0109582:	8b 45 08             	mov    0x8(%ebp),%eax
c0109585:	89 45 ec             	mov    %eax,-0x14(%ebp)
    list_entry_t *le_prev = list, *le_next;
c0109588:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010958b:	89 45 f4             	mov    %eax,-0xc(%ebp)

        list_entry_t *le = list;
c010958e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109591:	89 45 f0             	mov    %eax,-0x10(%ebp)
        while ((le = list_next(le)) != list) {
c0109594:	eb 21                	jmp    c01095b7 <insert_vma_struct+0x6f>
            struct vma_struct *mmap_prev = le2vma(le, list_link);
c0109596:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109599:	83 e8 10             	sub    $0x10,%eax
c010959c:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (mmap_prev->vm_start > vma->vm_start) {
c010959f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01095a2:	8b 50 04             	mov    0x4(%eax),%edx
c01095a5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01095a8:	8b 40 04             	mov    0x4(%eax),%eax
c01095ab:	39 c2                	cmp    %eax,%edx
c01095ad:	76 02                	jbe    c01095b1 <insert_vma_struct+0x69>
                break;
c01095af:	eb 1d                	jmp    c01095ce <insert_vma_struct+0x86>
            }
            le_prev = le;
c01095b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01095b4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01095b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01095ba:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01095bd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01095c0:	8b 40 04             	mov    0x4(%eax),%eax
    assert(vma->vm_start < vma->vm_end);
    list_entry_t *list = &(mm->mmap_list);
    list_entry_t *le_prev = list, *le_next;

        list_entry_t *le = list;
        while ((le = list_next(le)) != list) {
c01095c3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01095c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01095c9:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01095cc:	75 c8                	jne    c0109596 <insert_vma_struct+0x4e>
c01095ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01095d1:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01095d4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01095d7:	8b 40 04             	mov    0x4(%eax),%eax
                break;
            }
            le_prev = le;
        }

    le_next = list_next(le_prev);
c01095da:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    /* check overlap */
    if (le_prev != list) {
c01095dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01095e0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01095e3:	74 15                	je     c01095fa <insert_vma_struct+0xb2>
        check_vma_overlap(le2vma(le_prev, list_link), vma);
c01095e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01095e8:	8d 50 f0             	lea    -0x10(%eax),%edx
c01095eb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01095ee:	89 44 24 04          	mov    %eax,0x4(%esp)
c01095f2:	89 14 24             	mov    %edx,(%esp)
c01095f5:	e8 aa fe ff ff       	call   c01094a4 <check_vma_overlap>
    }
    if (le_next != list) {
c01095fa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01095fd:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0109600:	74 15                	je     c0109617 <insert_vma_struct+0xcf>
        check_vma_overlap(vma, le2vma(le_next, list_link));
c0109602:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109605:	83 e8 10             	sub    $0x10,%eax
c0109608:	89 44 24 04          	mov    %eax,0x4(%esp)
c010960c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010960f:	89 04 24             	mov    %eax,(%esp)
c0109612:	e8 8d fe ff ff       	call   c01094a4 <check_vma_overlap>
    }

    vma->vm_mm = mm;
c0109617:	8b 45 0c             	mov    0xc(%ebp),%eax
c010961a:	8b 55 08             	mov    0x8(%ebp),%edx
c010961d:	89 10                	mov    %edx,(%eax)
    list_add_after(le_prev, &(vma->list_link));
c010961f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109622:	8d 50 10             	lea    0x10(%eax),%edx
c0109625:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109628:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010962b:	89 55 d4             	mov    %edx,-0x2c(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010962e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0109631:	8b 40 04             	mov    0x4(%eax),%eax
c0109634:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0109637:	89 55 d0             	mov    %edx,-0x30(%ebp)
c010963a:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010963d:	89 55 cc             	mov    %edx,-0x34(%ebp)
c0109640:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0109643:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0109646:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0109649:	89 10                	mov    %edx,(%eax)
c010964b:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010964e:	8b 10                	mov    (%eax),%edx
c0109650:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0109653:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0109656:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0109659:	8b 55 c8             	mov    -0x38(%ebp),%edx
c010965c:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010965f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0109662:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0109665:	89 10                	mov    %edx,(%eax)

    mm->map_count ++;
c0109667:	8b 45 08             	mov    0x8(%ebp),%eax
c010966a:	8b 40 10             	mov    0x10(%eax),%eax
c010966d:	8d 50 01             	lea    0x1(%eax),%edx
c0109670:	8b 45 08             	mov    0x8(%ebp),%eax
c0109673:	89 50 10             	mov    %edx,0x10(%eax)
}
c0109676:	c9                   	leave  
c0109677:	c3                   	ret    

c0109678 <mm_destroy>:

// mm_destroy - free mm and mm internal fields
void
mm_destroy(struct mm_struct *mm) {
c0109678:	55                   	push   %ebp
c0109679:	89 e5                	mov    %esp,%ebp
c010967b:	83 ec 38             	sub    $0x38,%esp
    assert(mm_count(mm) == 0);
c010967e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109681:	89 04 24             	mov    %eax,(%esp)
c0109684:	e8 22 fc ff ff       	call   c01092ab <mm_count>
c0109689:	85 c0                	test   %eax,%eax
c010968b:	74 24                	je     c01096b1 <mm_destroy+0x39>
c010968d:	c7 44 24 0c dd 09 11 	movl   $0xc01109dd,0xc(%esp)
c0109694:	c0 
c0109695:	c7 44 24 08 5f 09 11 	movl   $0xc011095f,0x8(%esp)
c010969c:	c0 
c010969d:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
c01096a4:	00 
c01096a5:	c7 04 24 74 09 11 c0 	movl   $0xc0110974,(%esp)
c01096ac:	e8 ac 8b ff ff       	call   c010225d <__panic>

    list_entry_t *list = &(mm->mmap_list), *le;
c01096b1:	8b 45 08             	mov    0x8(%ebp),%eax
c01096b4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(list)) != list) {
c01096b7:	eb 36                	jmp    c01096ef <mm_destroy+0x77>
c01096b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01096bc:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c01096bf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01096c2:	8b 40 04             	mov    0x4(%eax),%eax
c01096c5:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01096c8:	8b 12                	mov    (%edx),%edx
c01096ca:	89 55 e8             	mov    %edx,-0x18(%ebp)
c01096cd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01096d0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01096d3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01096d6:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c01096d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01096dc:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01096df:	89 10                	mov    %edx,(%eax)
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
c01096e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01096e4:	83 e8 10             	sub    $0x10,%eax
c01096e7:	89 04 24             	mov    %eax,(%esp)
c01096ea:	e8 f8 c9 ff ff       	call   c01060e7 <kfree>
c01096ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01096f2:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01096f5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01096f8:	8b 40 04             	mov    0x4(%eax),%eax
void
mm_destroy(struct mm_struct *mm) {
    assert(mm_count(mm) == 0);

    list_entry_t *list = &(mm->mmap_list), *le;
    while ((le = list_next(list)) != list) {
c01096fb:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01096fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109701:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0109704:	75 b3                	jne    c01096b9 <mm_destroy+0x41>
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
    }
    kfree(mm); //kfree mm
c0109706:	8b 45 08             	mov    0x8(%ebp),%eax
c0109709:	89 04 24             	mov    %eax,(%esp)
c010970c:	e8 d6 c9 ff ff       	call   c01060e7 <kfree>
    mm=NULL;
c0109711:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
}
c0109718:	c9                   	leave  
c0109719:	c3                   	ret    

c010971a <mm_map>:

int
mm_map(struct mm_struct *mm, uintptr_t addr, size_t len, uint32_t vm_flags,
       struct vma_struct **vma_store) {
c010971a:	55                   	push   %ebp
c010971b:	89 e5                	mov    %esp,%ebp
c010971d:	83 ec 38             	sub    $0x38,%esp
    uintptr_t start = ROUNDDOWN(addr, PGSIZE), end = ROUNDUP(addr + len, PGSIZE);
c0109720:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109723:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109726:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109729:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010972e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0109731:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
c0109738:	8b 45 10             	mov    0x10(%ebp),%eax
c010973b:	8b 55 0c             	mov    0xc(%ebp),%edx
c010973e:	01 c2                	add    %eax,%edx
c0109740:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109743:	01 d0                	add    %edx,%eax
c0109745:	83 e8 01             	sub    $0x1,%eax
c0109748:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010974b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010974e:	ba 00 00 00 00       	mov    $0x0,%edx
c0109753:	f7 75 e8             	divl   -0x18(%ebp)
c0109756:	89 d0                	mov    %edx,%eax
c0109758:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010975b:	29 c2                	sub    %eax,%edx
c010975d:	89 d0                	mov    %edx,%eax
c010975f:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (!USER_ACCESS(start, end)) {
c0109762:	81 7d ec ff ff 1f 00 	cmpl   $0x1fffff,-0x14(%ebp)
c0109769:	76 11                	jbe    c010977c <mm_map+0x62>
c010976b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010976e:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0109771:	73 09                	jae    c010977c <mm_map+0x62>
c0109773:	81 7d e0 00 00 00 b0 	cmpl   $0xb0000000,-0x20(%ebp)
c010977a:	76 0a                	jbe    c0109786 <mm_map+0x6c>
        return -E_INVAL;
c010977c:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0109781:	e9 ae 00 00 00       	jmp    c0109834 <mm_map+0x11a>
    }

    assert(mm != NULL);
c0109786:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010978a:	75 24                	jne    c01097b0 <mm_map+0x96>
c010978c:	c7 44 24 0c ef 09 11 	movl   $0xc01109ef,0xc(%esp)
c0109793:	c0 
c0109794:	c7 44 24 08 5f 09 11 	movl   $0xc011095f,0x8(%esp)
c010979b:	c0 
c010979c:	c7 44 24 04 a7 00 00 	movl   $0xa7,0x4(%esp)
c01097a3:	00 
c01097a4:	c7 04 24 74 09 11 c0 	movl   $0xc0110974,(%esp)
c01097ab:	e8 ad 8a ff ff       	call   c010225d <__panic>

    int ret = -E_INVAL;
c01097b0:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)

    struct vma_struct *vma;
    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
c01097b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01097ba:	89 44 24 04          	mov    %eax,0x4(%esp)
c01097be:	8b 45 08             	mov    0x8(%ebp),%eax
c01097c1:	89 04 24             	mov    %eax,(%esp)
c01097c4:	e8 2a fc ff ff       	call   c01093f3 <find_vma>
c01097c9:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01097cc:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01097d0:	74 0d                	je     c01097df <mm_map+0xc5>
c01097d2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01097d5:	8b 40 04             	mov    0x4(%eax),%eax
c01097d8:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01097db:	73 02                	jae    c01097df <mm_map+0xc5>
        goto out;
c01097dd:	eb 52                	jmp    c0109831 <mm_map+0x117>
    }
    ret = -E_NO_MEM;
c01097df:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
c01097e6:	8b 45 14             	mov    0x14(%ebp),%eax
c01097e9:	89 44 24 08          	mov    %eax,0x8(%esp)
c01097ed:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01097f0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01097f4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01097f7:	89 04 24             	mov    %eax,(%esp)
c01097fa:	e8 b9 fb ff ff       	call   c01093b8 <vma_create>
c01097ff:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0109802:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0109806:	75 02                	jne    c010980a <mm_map+0xf0>
        goto out;
c0109808:	eb 27                	jmp    c0109831 <mm_map+0x117>
    }
    insert_vma_struct(mm, vma);
c010980a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010980d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109811:	8b 45 08             	mov    0x8(%ebp),%eax
c0109814:	89 04 24             	mov    %eax,(%esp)
c0109817:	e8 2c fd ff ff       	call   c0109548 <insert_vma_struct>
    if (vma_store != NULL) {
c010981c:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0109820:	74 08                	je     c010982a <mm_map+0x110>
        *vma_store = vma;
c0109822:	8b 45 18             	mov    0x18(%ebp),%eax
c0109825:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0109828:	89 10                	mov    %edx,(%eax)
    }
    ret = 0;
c010982a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

out:
    return ret;
c0109831:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0109834:	c9                   	leave  
c0109835:	c3                   	ret    

c0109836 <dup_mmap>:

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
c0109836:	55                   	push   %ebp
c0109837:	89 e5                	mov    %esp,%ebp
c0109839:	56                   	push   %esi
c010983a:	53                   	push   %ebx
c010983b:	83 ec 40             	sub    $0x40,%esp
    assert(to != NULL && from != NULL);
c010983e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0109842:	74 06                	je     c010984a <dup_mmap+0x14>
c0109844:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0109848:	75 24                	jne    c010986e <dup_mmap+0x38>
c010984a:	c7 44 24 0c fa 09 11 	movl   $0xc01109fa,0xc(%esp)
c0109851:	c0 
c0109852:	c7 44 24 08 5f 09 11 	movl   $0xc011095f,0x8(%esp)
c0109859:	c0 
c010985a:	c7 44 24 04 c0 00 00 	movl   $0xc0,0x4(%esp)
c0109861:	00 
c0109862:	c7 04 24 74 09 11 c0 	movl   $0xc0110974,(%esp)
c0109869:	e8 ef 89 ff ff       	call   c010225d <__panic>
    list_entry_t *list = &(from->mmap_list), *le = list;
c010986e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109871:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109874:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109877:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_prev(le)) != list) {
c010987a:	e9 92 00 00 00       	jmp    c0109911 <dup_mmap+0xdb>
        struct vma_struct *vma, *nvma;
        vma = le2vma(le, list_link);
c010987f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109882:	83 e8 10             	sub    $0x10,%eax
c0109885:	89 45 ec             	mov    %eax,-0x14(%ebp)
        nvma = vma_create(vma->vm_start, vma->vm_end, vma->vm_flags);
c0109888:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010988b:	8b 48 0c             	mov    0xc(%eax),%ecx
c010988e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109891:	8b 50 08             	mov    0x8(%eax),%edx
c0109894:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109897:	8b 40 04             	mov    0x4(%eax),%eax
c010989a:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010989e:	89 54 24 04          	mov    %edx,0x4(%esp)
c01098a2:	89 04 24             	mov    %eax,(%esp)
c01098a5:	e8 0e fb ff ff       	call   c01093b8 <vma_create>
c01098aa:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (nvma == NULL) {
c01098ad:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01098b1:	75 07                	jne    c01098ba <dup_mmap+0x84>
            return -E_NO_MEM;
c01098b3:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c01098b8:	eb 76                	jmp    c0109930 <dup_mmap+0xfa>
        }

        insert_vma_struct(to, nvma);
c01098ba:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01098bd:	89 44 24 04          	mov    %eax,0x4(%esp)
c01098c1:	8b 45 08             	mov    0x8(%ebp),%eax
c01098c4:	89 04 24             	mov    %eax,(%esp)
c01098c7:	e8 7c fc ff ff       	call   c0109548 <insert_vma_struct>

        bool share = 0;
c01098cc:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
c01098d3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01098d6:	8b 58 08             	mov    0x8(%eax),%ebx
c01098d9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01098dc:	8b 48 04             	mov    0x4(%eax),%ecx
c01098df:	8b 45 0c             	mov    0xc(%ebp),%eax
c01098e2:	8b 50 0c             	mov    0xc(%eax),%edx
c01098e5:	8b 45 08             	mov    0x8(%ebp),%eax
c01098e8:	8b 40 0c             	mov    0xc(%eax),%eax
c01098eb:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c01098ee:	89 74 24 10          	mov    %esi,0x10(%esp)
c01098f2:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c01098f6:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01098fa:	89 54 24 04          	mov    %edx,0x4(%esp)
c01098fe:	89 04 24             	mov    %eax,(%esp)
c0109901:	e8 af d7 ff ff       	call   c01070b5 <copy_range>
c0109906:	85 c0                	test   %eax,%eax
c0109908:	74 07                	je     c0109911 <dup_mmap+0xdb>
            return -E_NO_MEM;
c010990a:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010990f:	eb 1f                	jmp    c0109930 <dup_mmap+0xfa>
c0109911:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109914:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0109917:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010991a:	8b 00                	mov    (%eax),%eax

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
    assert(to != NULL && from != NULL);
    list_entry_t *list = &(from->mmap_list), *le = list;
    while ((le = list_prev(le)) != list) {
c010991c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010991f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109922:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0109925:	0f 85 54 ff ff ff    	jne    c010987f <dup_mmap+0x49>
        bool share = 0;
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
            return -E_NO_MEM;
        }
    }
    return 0;
c010992b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109930:	83 c4 40             	add    $0x40,%esp
c0109933:	5b                   	pop    %ebx
c0109934:	5e                   	pop    %esi
c0109935:	5d                   	pop    %ebp
c0109936:	c3                   	ret    

c0109937 <exit_mmap>:

void
exit_mmap(struct mm_struct *mm) {
c0109937:	55                   	push   %ebp
c0109938:	89 e5                	mov    %esp,%ebp
c010993a:	83 ec 38             	sub    $0x38,%esp
    assert(mm != NULL && mm_count(mm) == 0);
c010993d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0109941:	74 0f                	je     c0109952 <exit_mmap+0x1b>
c0109943:	8b 45 08             	mov    0x8(%ebp),%eax
c0109946:	89 04 24             	mov    %eax,(%esp)
c0109949:	e8 5d f9 ff ff       	call   c01092ab <mm_count>
c010994e:	85 c0                	test   %eax,%eax
c0109950:	74 24                	je     c0109976 <exit_mmap+0x3f>
c0109952:	c7 44 24 0c 18 0a 11 	movl   $0xc0110a18,0xc(%esp)
c0109959:	c0 
c010995a:	c7 44 24 08 5f 09 11 	movl   $0xc011095f,0x8(%esp)
c0109961:	c0 
c0109962:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c0109969:	00 
c010996a:	c7 04 24 74 09 11 c0 	movl   $0xc0110974,(%esp)
c0109971:	e8 e7 88 ff ff       	call   c010225d <__panic>
    pde_t *pgdir = mm->pgdir;
c0109976:	8b 45 08             	mov    0x8(%ebp),%eax
c0109979:	8b 40 0c             	mov    0xc(%eax),%eax
c010997c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    list_entry_t *list = &(mm->mmap_list), *le = list;
c010997f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109982:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0109985:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109988:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c010998b:	eb 28                	jmp    c01099b5 <exit_mmap+0x7e>
        struct vma_struct *vma = le2vma(le, list_link);
c010998d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109990:	83 e8 10             	sub    $0x10,%eax
c0109993:	89 45 e8             	mov    %eax,-0x18(%ebp)
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
c0109996:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109999:	8b 50 08             	mov    0x8(%eax),%edx
c010999c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010999f:	8b 40 04             	mov    0x4(%eax),%eax
c01099a2:	89 54 24 08          	mov    %edx,0x8(%esp)
c01099a6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01099aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01099ad:	89 04 24             	mov    %eax,(%esp)
c01099b0:	e8 05 d5 ff ff       	call   c0106eba <unmap_range>
c01099b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01099b8:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01099bb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01099be:	8b 40 04             	mov    0x4(%eax),%eax
void
exit_mmap(struct mm_struct *mm) {
    assert(mm != NULL && mm_count(mm) == 0);
    pde_t *pgdir = mm->pgdir;
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
c01099c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01099c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01099c7:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01099ca:	75 c1                	jne    c010998d <exit_mmap+0x56>
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c01099cc:	eb 28                	jmp    c01099f6 <exit_mmap+0xbf>
        struct vma_struct *vma = le2vma(le, list_link);
c01099ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01099d1:	83 e8 10             	sub    $0x10,%eax
c01099d4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        exit_range(pgdir, vma->vm_start, vma->vm_end);
c01099d7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01099da:	8b 50 08             	mov    0x8(%eax),%edx
c01099dd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01099e0:	8b 40 04             	mov    0x4(%eax),%eax
c01099e3:	89 54 24 08          	mov    %edx,0x8(%esp)
c01099e7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01099eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01099ee:	89 04 24             	mov    %eax,(%esp)
c01099f1:	e8 b8 d5 ff ff       	call   c0106fae <exit_range>
c01099f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01099f9:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01099fc:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01099ff:	8b 40 04             	mov    0x4(%eax),%eax
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c0109a02:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109a05:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109a08:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0109a0b:	75 c1                	jne    c01099ce <exit_mmap+0x97>
        struct vma_struct *vma = le2vma(le, list_link);
        exit_range(pgdir, vma->vm_start, vma->vm_end);
    }
}
c0109a0d:	c9                   	leave  
c0109a0e:	c3                   	ret    

c0109a0f <copy_from_user>:

bool
copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable) {
c0109a0f:	55                   	push   %ebp
c0109a10:	89 e5                	mov    %esp,%ebp
c0109a12:	83 ec 18             	sub    $0x18,%esp
    if (!user_mem_check(mm, (uintptr_t)src, len, writable)) {
c0109a15:	8b 45 10             	mov    0x10(%ebp),%eax
c0109a18:	8b 55 18             	mov    0x18(%ebp),%edx
c0109a1b:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109a1f:	8b 55 14             	mov    0x14(%ebp),%edx
c0109a22:	89 54 24 08          	mov    %edx,0x8(%esp)
c0109a26:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109a2a:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a2d:	89 04 24             	mov    %eax,(%esp)
c0109a30:	e8 dc 09 00 00       	call   c010a411 <user_mem_check>
c0109a35:	85 c0                	test   %eax,%eax
c0109a37:	75 07                	jne    c0109a40 <copy_from_user+0x31>
        return 0;
c0109a39:	b8 00 00 00 00       	mov    $0x0,%eax
c0109a3e:	eb 1e                	jmp    c0109a5e <copy_from_user+0x4f>
    }
    memcpy(dst, src, len);
c0109a40:	8b 45 14             	mov    0x14(%ebp),%eax
c0109a43:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109a47:	8b 45 10             	mov    0x10(%ebp),%eax
c0109a4a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109a4e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109a51:	89 04 24             	mov    %eax,(%esp)
c0109a54:	e8 35 51 00 00       	call   c010eb8e <memcpy>
    return 1;
c0109a59:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0109a5e:	c9                   	leave  
c0109a5f:	c3                   	ret    

c0109a60 <copy_to_user>:

bool
copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len) {
c0109a60:	55                   	push   %ebp
c0109a61:	89 e5                	mov    %esp,%ebp
c0109a63:	83 ec 18             	sub    $0x18,%esp
    if (!user_mem_check(mm, (uintptr_t)dst, len, 1)) {
c0109a66:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109a69:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0109a70:	00 
c0109a71:	8b 55 14             	mov    0x14(%ebp),%edx
c0109a74:	89 54 24 08          	mov    %edx,0x8(%esp)
c0109a78:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109a7c:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a7f:	89 04 24             	mov    %eax,(%esp)
c0109a82:	e8 8a 09 00 00       	call   c010a411 <user_mem_check>
c0109a87:	85 c0                	test   %eax,%eax
c0109a89:	75 07                	jne    c0109a92 <copy_to_user+0x32>
        return 0;
c0109a8b:	b8 00 00 00 00       	mov    $0x0,%eax
c0109a90:	eb 1e                	jmp    c0109ab0 <copy_to_user+0x50>
    }
    memcpy(dst, src, len);
c0109a92:	8b 45 14             	mov    0x14(%ebp),%eax
c0109a95:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109a99:	8b 45 10             	mov    0x10(%ebp),%eax
c0109a9c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109aa0:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109aa3:	89 04 24             	mov    %eax,(%esp)
c0109aa6:	e8 e3 50 00 00       	call   c010eb8e <memcpy>
    return 1;
c0109aab:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0109ab0:	c9                   	leave  
c0109ab1:	c3                   	ret    

c0109ab2 <vmm_init>:

// vmm_init - initialize virtual memory management
//          - now just call check_vmm to check correctness of vmm
void
vmm_init(void) {
c0109ab2:	55                   	push   %ebp
c0109ab3:	89 e5                	mov    %esp,%ebp
c0109ab5:	83 ec 08             	sub    $0x8,%esp
    check_vmm();
c0109ab8:	e8 02 00 00 00       	call   c0109abf <check_vmm>
}
c0109abd:	c9                   	leave  
c0109abe:	c3                   	ret    

c0109abf <check_vmm>:

// check_vmm - check correctness of vmm
static void
check_vmm(void) {
c0109abf:	55                   	push   %ebp
c0109ac0:	89 e5                	mov    %esp,%ebp
c0109ac2:	83 ec 28             	sub    $0x28,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0109ac5:	e8 24 cb ff ff       	call   c01065ee <nr_free_pages>
c0109aca:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    check_vma_struct();
c0109acd:	e8 13 00 00 00       	call   c0109ae5 <check_vma_struct>
    check_pgfault();
c0109ad2:	e8 a7 04 00 00       	call   c0109f7e <check_pgfault>

//    assert(nr_free_pages_store == nr_free_pages());

    cprintf("check_vmm() succeeded.\n");
c0109ad7:	c7 04 24 38 0a 11 c0 	movl   $0xc0110a38,(%esp)
c0109ade:	e8 f8 7c ff ff       	call   c01017db <cprintf>
}
c0109ae3:	c9                   	leave  
c0109ae4:	c3                   	ret    

c0109ae5 <check_vma_struct>:

static void
check_vma_struct(void) {
c0109ae5:	55                   	push   %ebp
c0109ae6:	89 e5                	mov    %esp,%ebp
c0109ae8:	83 ec 68             	sub    $0x68,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0109aeb:	e8 fe ca ff ff       	call   c01065ee <nr_free_pages>
c0109af0:	89 45 ec             	mov    %eax,-0x14(%ebp)

    struct mm_struct *mm = mm_create();
c0109af3:	e8 1b f8 ff ff       	call   c0109313 <mm_create>
c0109af8:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(mm != NULL);
c0109afb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0109aff:	75 24                	jne    c0109b25 <check_vma_struct+0x40>
c0109b01:	c7 44 24 0c ef 09 11 	movl   $0xc01109ef,0xc(%esp)
c0109b08:	c0 
c0109b09:	c7 44 24 08 5f 09 11 	movl   $0xc011095f,0x8(%esp)
c0109b10:	c0 
c0109b11:	c7 44 24 04 0e 01 00 	movl   $0x10e,0x4(%esp)
c0109b18:	00 
c0109b19:	c7 04 24 74 09 11 c0 	movl   $0xc0110974,(%esp)
c0109b20:	e8 38 87 ff ff       	call   c010225d <__panic>

    int step1 = 10, step2 = step1 * 10;
c0109b25:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%ebp)
c0109b2c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0109b2f:	89 d0                	mov    %edx,%eax
c0109b31:	c1 e0 02             	shl    $0x2,%eax
c0109b34:	01 d0                	add    %edx,%eax
c0109b36:	01 c0                	add    %eax,%eax
c0109b38:	89 45 e0             	mov    %eax,-0x20(%ebp)

    int i;
    for (i = step1; i >= 1; i --) {
c0109b3b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109b3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109b41:	eb 70                	jmp    c0109bb3 <check_vma_struct+0xce>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c0109b43:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109b46:	89 d0                	mov    %edx,%eax
c0109b48:	c1 e0 02             	shl    $0x2,%eax
c0109b4b:	01 d0                	add    %edx,%eax
c0109b4d:	83 c0 02             	add    $0x2,%eax
c0109b50:	89 c1                	mov    %eax,%ecx
c0109b52:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109b55:	89 d0                	mov    %edx,%eax
c0109b57:	c1 e0 02             	shl    $0x2,%eax
c0109b5a:	01 d0                	add    %edx,%eax
c0109b5c:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0109b63:	00 
c0109b64:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0109b68:	89 04 24             	mov    %eax,(%esp)
c0109b6b:	e8 48 f8 ff ff       	call   c01093b8 <vma_create>
c0109b70:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(vma != NULL);
c0109b73:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0109b77:	75 24                	jne    c0109b9d <check_vma_struct+0xb8>
c0109b79:	c7 44 24 0c 50 0a 11 	movl   $0xc0110a50,0xc(%esp)
c0109b80:	c0 
c0109b81:	c7 44 24 08 5f 09 11 	movl   $0xc011095f,0x8(%esp)
c0109b88:	c0 
c0109b89:	c7 44 24 04 15 01 00 	movl   $0x115,0x4(%esp)
c0109b90:	00 
c0109b91:	c7 04 24 74 09 11 c0 	movl   $0xc0110974,(%esp)
c0109b98:	e8 c0 86 ff ff       	call   c010225d <__panic>
        insert_vma_struct(mm, vma);
c0109b9d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109ba0:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109ba4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109ba7:	89 04 24             	mov    %eax,(%esp)
c0109baa:	e8 99 f9 ff ff       	call   c0109548 <insert_vma_struct>
    assert(mm != NULL);

    int step1 = 10, step2 = step1 * 10;

    int i;
    for (i = step1; i >= 1; i --) {
c0109baf:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0109bb3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109bb7:	7f 8a                	jg     c0109b43 <check_vma_struct+0x5e>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c0109bb9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109bbc:	83 c0 01             	add    $0x1,%eax
c0109bbf:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109bc2:	eb 70                	jmp    c0109c34 <check_vma_struct+0x14f>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c0109bc4:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109bc7:	89 d0                	mov    %edx,%eax
c0109bc9:	c1 e0 02             	shl    $0x2,%eax
c0109bcc:	01 d0                	add    %edx,%eax
c0109bce:	83 c0 02             	add    $0x2,%eax
c0109bd1:	89 c1                	mov    %eax,%ecx
c0109bd3:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109bd6:	89 d0                	mov    %edx,%eax
c0109bd8:	c1 e0 02             	shl    $0x2,%eax
c0109bdb:	01 d0                	add    %edx,%eax
c0109bdd:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0109be4:	00 
c0109be5:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0109be9:	89 04 24             	mov    %eax,(%esp)
c0109bec:	e8 c7 f7 ff ff       	call   c01093b8 <vma_create>
c0109bf1:	89 45 d8             	mov    %eax,-0x28(%ebp)
        assert(vma != NULL);
c0109bf4:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0109bf8:	75 24                	jne    c0109c1e <check_vma_struct+0x139>
c0109bfa:	c7 44 24 0c 50 0a 11 	movl   $0xc0110a50,0xc(%esp)
c0109c01:	c0 
c0109c02:	c7 44 24 08 5f 09 11 	movl   $0xc011095f,0x8(%esp)
c0109c09:	c0 
c0109c0a:	c7 44 24 04 1b 01 00 	movl   $0x11b,0x4(%esp)
c0109c11:	00 
c0109c12:	c7 04 24 74 09 11 c0 	movl   $0xc0110974,(%esp)
c0109c19:	e8 3f 86 ff ff       	call   c010225d <__panic>
        insert_vma_struct(mm, vma);
c0109c1e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0109c21:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109c25:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109c28:	89 04 24             	mov    %eax,(%esp)
c0109c2b:	e8 18 f9 ff ff       	call   c0109548 <insert_vma_struct>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c0109c30:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0109c34:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109c37:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0109c3a:	7e 88                	jle    c0109bc4 <check_vma_struct+0xdf>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));
c0109c3c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109c3f:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0109c42:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0109c45:	8b 40 04             	mov    0x4(%eax),%eax
c0109c48:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (i = 1; i <= step2; i ++) {
c0109c4b:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c0109c52:	e9 97 00 00 00       	jmp    c0109cee <check_vma_struct+0x209>
        assert(le != &(mm->mmap_list));
c0109c57:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109c5a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0109c5d:	75 24                	jne    c0109c83 <check_vma_struct+0x19e>
c0109c5f:	c7 44 24 0c 5c 0a 11 	movl   $0xc0110a5c,0xc(%esp)
c0109c66:	c0 
c0109c67:	c7 44 24 08 5f 09 11 	movl   $0xc011095f,0x8(%esp)
c0109c6e:	c0 
c0109c6f:	c7 44 24 04 22 01 00 	movl   $0x122,0x4(%esp)
c0109c76:	00 
c0109c77:	c7 04 24 74 09 11 c0 	movl   $0xc0110974,(%esp)
c0109c7e:	e8 da 85 ff ff       	call   c010225d <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
c0109c83:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109c86:	83 e8 10             	sub    $0x10,%eax
c0109c89:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
c0109c8c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0109c8f:	8b 48 04             	mov    0x4(%eax),%ecx
c0109c92:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109c95:	89 d0                	mov    %edx,%eax
c0109c97:	c1 e0 02             	shl    $0x2,%eax
c0109c9a:	01 d0                	add    %edx,%eax
c0109c9c:	39 c1                	cmp    %eax,%ecx
c0109c9e:	75 17                	jne    c0109cb7 <check_vma_struct+0x1d2>
c0109ca0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0109ca3:	8b 48 08             	mov    0x8(%eax),%ecx
c0109ca6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109ca9:	89 d0                	mov    %edx,%eax
c0109cab:	c1 e0 02             	shl    $0x2,%eax
c0109cae:	01 d0                	add    %edx,%eax
c0109cb0:	83 c0 02             	add    $0x2,%eax
c0109cb3:	39 c1                	cmp    %eax,%ecx
c0109cb5:	74 24                	je     c0109cdb <check_vma_struct+0x1f6>
c0109cb7:	c7 44 24 0c 74 0a 11 	movl   $0xc0110a74,0xc(%esp)
c0109cbe:	c0 
c0109cbf:	c7 44 24 08 5f 09 11 	movl   $0xc011095f,0x8(%esp)
c0109cc6:	c0 
c0109cc7:	c7 44 24 04 24 01 00 	movl   $0x124,0x4(%esp)
c0109cce:	00 
c0109ccf:	c7 04 24 74 09 11 c0 	movl   $0xc0110974,(%esp)
c0109cd6:	e8 82 85 ff ff       	call   c010225d <__panic>
c0109cdb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109cde:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c0109ce1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0109ce4:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c0109ce7:	89 45 f0             	mov    %eax,-0x10(%ebp)
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));

    for (i = 1; i <= step2; i ++) {
c0109cea:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0109cee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109cf1:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0109cf4:	0f 8e 5d ff ff ff    	jle    c0109c57 <check_vma_struct+0x172>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c0109cfa:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
c0109d01:	e9 cd 01 00 00       	jmp    c0109ed3 <check_vma_struct+0x3ee>
        struct vma_struct *vma1 = find_vma(mm, i);
c0109d06:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109d09:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109d0d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109d10:	89 04 24             	mov    %eax,(%esp)
c0109d13:	e8 db f6 ff ff       	call   c01093f3 <find_vma>
c0109d18:	89 45 d0             	mov    %eax,-0x30(%ebp)
        assert(vma1 != NULL);
c0109d1b:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c0109d1f:	75 24                	jne    c0109d45 <check_vma_struct+0x260>
c0109d21:	c7 44 24 0c a9 0a 11 	movl   $0xc0110aa9,0xc(%esp)
c0109d28:	c0 
c0109d29:	c7 44 24 08 5f 09 11 	movl   $0xc011095f,0x8(%esp)
c0109d30:	c0 
c0109d31:	c7 44 24 04 2a 01 00 	movl   $0x12a,0x4(%esp)
c0109d38:	00 
c0109d39:	c7 04 24 74 09 11 c0 	movl   $0xc0110974,(%esp)
c0109d40:	e8 18 85 ff ff       	call   c010225d <__panic>
        struct vma_struct *vma2 = find_vma(mm, i+1);
c0109d45:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109d48:	83 c0 01             	add    $0x1,%eax
c0109d4b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109d4f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109d52:	89 04 24             	mov    %eax,(%esp)
c0109d55:	e8 99 f6 ff ff       	call   c01093f3 <find_vma>
c0109d5a:	89 45 cc             	mov    %eax,-0x34(%ebp)
        assert(vma2 != NULL);
c0109d5d:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0109d61:	75 24                	jne    c0109d87 <check_vma_struct+0x2a2>
c0109d63:	c7 44 24 0c b6 0a 11 	movl   $0xc0110ab6,0xc(%esp)
c0109d6a:	c0 
c0109d6b:	c7 44 24 08 5f 09 11 	movl   $0xc011095f,0x8(%esp)
c0109d72:	c0 
c0109d73:	c7 44 24 04 2c 01 00 	movl   $0x12c,0x4(%esp)
c0109d7a:	00 
c0109d7b:	c7 04 24 74 09 11 c0 	movl   $0xc0110974,(%esp)
c0109d82:	e8 d6 84 ff ff       	call   c010225d <__panic>
        struct vma_struct *vma3 = find_vma(mm, i+2);
c0109d87:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109d8a:	83 c0 02             	add    $0x2,%eax
c0109d8d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109d91:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109d94:	89 04 24             	mov    %eax,(%esp)
c0109d97:	e8 57 f6 ff ff       	call   c01093f3 <find_vma>
c0109d9c:	89 45 c8             	mov    %eax,-0x38(%ebp)
        assert(vma3 == NULL);
c0109d9f:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c0109da3:	74 24                	je     c0109dc9 <check_vma_struct+0x2e4>
c0109da5:	c7 44 24 0c c3 0a 11 	movl   $0xc0110ac3,0xc(%esp)
c0109dac:	c0 
c0109dad:	c7 44 24 08 5f 09 11 	movl   $0xc011095f,0x8(%esp)
c0109db4:	c0 
c0109db5:	c7 44 24 04 2e 01 00 	movl   $0x12e,0x4(%esp)
c0109dbc:	00 
c0109dbd:	c7 04 24 74 09 11 c0 	movl   $0xc0110974,(%esp)
c0109dc4:	e8 94 84 ff ff       	call   c010225d <__panic>
        struct vma_struct *vma4 = find_vma(mm, i+3);
c0109dc9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109dcc:	83 c0 03             	add    $0x3,%eax
c0109dcf:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109dd3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109dd6:	89 04 24             	mov    %eax,(%esp)
c0109dd9:	e8 15 f6 ff ff       	call   c01093f3 <find_vma>
c0109dde:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        assert(vma4 == NULL);
c0109de1:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
c0109de5:	74 24                	je     c0109e0b <check_vma_struct+0x326>
c0109de7:	c7 44 24 0c d0 0a 11 	movl   $0xc0110ad0,0xc(%esp)
c0109dee:	c0 
c0109def:	c7 44 24 08 5f 09 11 	movl   $0xc011095f,0x8(%esp)
c0109df6:	c0 
c0109df7:	c7 44 24 04 30 01 00 	movl   $0x130,0x4(%esp)
c0109dfe:	00 
c0109dff:	c7 04 24 74 09 11 c0 	movl   $0xc0110974,(%esp)
c0109e06:	e8 52 84 ff ff       	call   c010225d <__panic>
        struct vma_struct *vma5 = find_vma(mm, i+4);
c0109e0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109e0e:	83 c0 04             	add    $0x4,%eax
c0109e11:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109e15:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109e18:	89 04 24             	mov    %eax,(%esp)
c0109e1b:	e8 d3 f5 ff ff       	call   c01093f3 <find_vma>
c0109e20:	89 45 c0             	mov    %eax,-0x40(%ebp)
        assert(vma5 == NULL);
c0109e23:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
c0109e27:	74 24                	je     c0109e4d <check_vma_struct+0x368>
c0109e29:	c7 44 24 0c dd 0a 11 	movl   $0xc0110add,0xc(%esp)
c0109e30:	c0 
c0109e31:	c7 44 24 08 5f 09 11 	movl   $0xc011095f,0x8(%esp)
c0109e38:	c0 
c0109e39:	c7 44 24 04 32 01 00 	movl   $0x132,0x4(%esp)
c0109e40:	00 
c0109e41:	c7 04 24 74 09 11 c0 	movl   $0xc0110974,(%esp)
c0109e48:	e8 10 84 ff ff       	call   c010225d <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
c0109e4d:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0109e50:	8b 50 04             	mov    0x4(%eax),%edx
c0109e53:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109e56:	39 c2                	cmp    %eax,%edx
c0109e58:	75 10                	jne    c0109e6a <check_vma_struct+0x385>
c0109e5a:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0109e5d:	8b 50 08             	mov    0x8(%eax),%edx
c0109e60:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109e63:	83 c0 02             	add    $0x2,%eax
c0109e66:	39 c2                	cmp    %eax,%edx
c0109e68:	74 24                	je     c0109e8e <check_vma_struct+0x3a9>
c0109e6a:	c7 44 24 0c ec 0a 11 	movl   $0xc0110aec,0xc(%esp)
c0109e71:	c0 
c0109e72:	c7 44 24 08 5f 09 11 	movl   $0xc011095f,0x8(%esp)
c0109e79:	c0 
c0109e7a:	c7 44 24 04 34 01 00 	movl   $0x134,0x4(%esp)
c0109e81:	00 
c0109e82:	c7 04 24 74 09 11 c0 	movl   $0xc0110974,(%esp)
c0109e89:	e8 cf 83 ff ff       	call   c010225d <__panic>
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
c0109e8e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0109e91:	8b 50 04             	mov    0x4(%eax),%edx
c0109e94:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109e97:	39 c2                	cmp    %eax,%edx
c0109e99:	75 10                	jne    c0109eab <check_vma_struct+0x3c6>
c0109e9b:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0109e9e:	8b 50 08             	mov    0x8(%eax),%edx
c0109ea1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109ea4:	83 c0 02             	add    $0x2,%eax
c0109ea7:	39 c2                	cmp    %eax,%edx
c0109ea9:	74 24                	je     c0109ecf <check_vma_struct+0x3ea>
c0109eab:	c7 44 24 0c 1c 0b 11 	movl   $0xc0110b1c,0xc(%esp)
c0109eb2:	c0 
c0109eb3:	c7 44 24 08 5f 09 11 	movl   $0xc011095f,0x8(%esp)
c0109eba:	c0 
c0109ebb:	c7 44 24 04 35 01 00 	movl   $0x135,0x4(%esp)
c0109ec2:	00 
c0109ec3:	c7 04 24 74 09 11 c0 	movl   $0xc0110974,(%esp)
c0109eca:	e8 8e 83 ff ff       	call   c010225d <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c0109ecf:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
c0109ed3:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0109ed6:	89 d0                	mov    %edx,%eax
c0109ed8:	c1 e0 02             	shl    $0x2,%eax
c0109edb:	01 d0                	add    %edx,%eax
c0109edd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0109ee0:	0f 8d 20 fe ff ff    	jge    c0109d06 <check_vma_struct+0x221>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c0109ee6:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%ebp)
c0109eed:	eb 70                	jmp    c0109f5f <check_vma_struct+0x47a>
        struct vma_struct *vma_below_5= find_vma(mm,i);
c0109eef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109ef2:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109ef6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109ef9:	89 04 24             	mov    %eax,(%esp)
c0109efc:	e8 f2 f4 ff ff       	call   c01093f3 <find_vma>
c0109f01:	89 45 bc             	mov    %eax,-0x44(%ebp)
        if (vma_below_5 != NULL ) {
c0109f04:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0109f08:	74 27                	je     c0109f31 <check_vma_struct+0x44c>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
c0109f0a:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0109f0d:	8b 50 08             	mov    0x8(%eax),%edx
c0109f10:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0109f13:	8b 40 04             	mov    0x4(%eax),%eax
c0109f16:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109f1a:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109f1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109f21:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109f25:	c7 04 24 4c 0b 11 c0 	movl   $0xc0110b4c,(%esp)
c0109f2c:	e8 aa 78 ff ff       	call   c01017db <cprintf>
        }
        assert(vma_below_5 == NULL);
c0109f31:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0109f35:	74 24                	je     c0109f5b <check_vma_struct+0x476>
c0109f37:	c7 44 24 0c 71 0b 11 	movl   $0xc0110b71,0xc(%esp)
c0109f3e:	c0 
c0109f3f:	c7 44 24 08 5f 09 11 	movl   $0xc011095f,0x8(%esp)
c0109f46:	c0 
c0109f47:	c7 44 24 04 3d 01 00 	movl   $0x13d,0x4(%esp)
c0109f4e:	00 
c0109f4f:	c7 04 24 74 09 11 c0 	movl   $0xc0110974,(%esp)
c0109f56:	e8 02 83 ff ff       	call   c010225d <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c0109f5b:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0109f5f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109f63:	79 8a                	jns    c0109eef <check_vma_struct+0x40a>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
        }
        assert(vma_below_5 == NULL);
    }

    mm_destroy(mm);
c0109f65:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109f68:	89 04 24             	mov    %eax,(%esp)
c0109f6b:	e8 08 f7 ff ff       	call   c0109678 <mm_destroy>

//    assert(nr_free_pages_store == nr_free_pages());

    cprintf("check_vma_struct() succeeded!\n");
c0109f70:	c7 04 24 88 0b 11 c0 	movl   $0xc0110b88,(%esp)
c0109f77:	e8 5f 78 ff ff       	call   c01017db <cprintf>
}
c0109f7c:	c9                   	leave  
c0109f7d:	c3                   	ret    

c0109f7e <check_pgfault>:

struct mm_struct *check_mm_struct;

// check_pgfault - check correctness of pgfault handler
static void
check_pgfault(void) {
c0109f7e:	55                   	push   %ebp
c0109f7f:	89 e5                	mov    %esp,%ebp
c0109f81:	83 ec 38             	sub    $0x38,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0109f84:	e8 65 c6 ff ff       	call   c01065ee <nr_free_pages>
c0109f89:	89 45 ec             	mov    %eax,-0x14(%ebp)

    check_mm_struct = mm_create();
c0109f8c:	e8 82 f3 ff ff       	call   c0109313 <mm_create>
c0109f91:	a3 cc 85 1c c0       	mov    %eax,0xc01c85cc
    assert(check_mm_struct != NULL);
c0109f96:	a1 cc 85 1c c0       	mov    0xc01c85cc,%eax
c0109f9b:	85 c0                	test   %eax,%eax
c0109f9d:	75 24                	jne    c0109fc3 <check_pgfault+0x45>
c0109f9f:	c7 44 24 0c a7 0b 11 	movl   $0xc0110ba7,0xc(%esp)
c0109fa6:	c0 
c0109fa7:	c7 44 24 08 5f 09 11 	movl   $0xc011095f,0x8(%esp)
c0109fae:	c0 
c0109faf:	c7 44 24 04 4f 01 00 	movl   $0x14f,0x4(%esp)
c0109fb6:	00 
c0109fb7:	c7 04 24 74 09 11 c0 	movl   $0xc0110974,(%esp)
c0109fbe:	e8 9a 82 ff ff       	call   c010225d <__panic>

    struct mm_struct *mm = check_mm_struct;
c0109fc3:	a1 cc 85 1c c0       	mov    0xc01c85cc,%eax
c0109fc8:	89 45 e8             	mov    %eax,-0x18(%ebp)
    pde_t *pgdir = mm->pgdir = boot_pgdir;
c0109fcb:	8b 15 a4 63 1c c0    	mov    0xc01c63a4,%edx
c0109fd1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109fd4:	89 50 0c             	mov    %edx,0xc(%eax)
c0109fd7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109fda:	8b 40 0c             	mov    0xc(%eax),%eax
c0109fdd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(pgdir[0] == 0);
c0109fe0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109fe3:	8b 00                	mov    (%eax),%eax
c0109fe5:	85 c0                	test   %eax,%eax
c0109fe7:	74 24                	je     c010a00d <check_pgfault+0x8f>
c0109fe9:	c7 44 24 0c bf 0b 11 	movl   $0xc0110bbf,0xc(%esp)
c0109ff0:	c0 
c0109ff1:	c7 44 24 08 5f 09 11 	movl   $0xc011095f,0x8(%esp)
c0109ff8:	c0 
c0109ff9:	c7 44 24 04 53 01 00 	movl   $0x153,0x4(%esp)
c010a000:	00 
c010a001:	c7 04 24 74 09 11 c0 	movl   $0xc0110974,(%esp)
c010a008:	e8 50 82 ff ff       	call   c010225d <__panic>

    struct vma_struct *vma = vma_create(0, PTSIZE, VM_WRITE);
c010a00d:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c010a014:	00 
c010a015:	c7 44 24 04 00 00 40 	movl   $0x400000,0x4(%esp)
c010a01c:	00 
c010a01d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010a024:	e8 8f f3 ff ff       	call   c01093b8 <vma_create>
c010a029:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(vma != NULL);
c010a02c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c010a030:	75 24                	jne    c010a056 <check_pgfault+0xd8>
c010a032:	c7 44 24 0c 50 0a 11 	movl   $0xc0110a50,0xc(%esp)
c010a039:	c0 
c010a03a:	c7 44 24 08 5f 09 11 	movl   $0xc011095f,0x8(%esp)
c010a041:	c0 
c010a042:	c7 44 24 04 56 01 00 	movl   $0x156,0x4(%esp)
c010a049:	00 
c010a04a:	c7 04 24 74 09 11 c0 	movl   $0xc0110974,(%esp)
c010a051:	e8 07 82 ff ff       	call   c010225d <__panic>

    insert_vma_struct(mm, vma);
c010a056:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a059:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a05d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a060:	89 04 24             	mov    %eax,(%esp)
c010a063:	e8 e0 f4 ff ff       	call   c0109548 <insert_vma_struct>

    uintptr_t addr = 0x100;
c010a068:	c7 45 dc 00 01 00 00 	movl   $0x100,-0x24(%ebp)
    assert(find_vma(mm, addr) == vma);
c010a06f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a072:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a076:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a079:	89 04 24             	mov    %eax,(%esp)
c010a07c:	e8 72 f3 ff ff       	call   c01093f3 <find_vma>
c010a081:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010a084:	74 24                	je     c010a0aa <check_pgfault+0x12c>
c010a086:	c7 44 24 0c cd 0b 11 	movl   $0xc0110bcd,0xc(%esp)
c010a08d:	c0 
c010a08e:	c7 44 24 08 5f 09 11 	movl   $0xc011095f,0x8(%esp)
c010a095:	c0 
c010a096:	c7 44 24 04 5b 01 00 	movl   $0x15b,0x4(%esp)
c010a09d:	00 
c010a09e:	c7 04 24 74 09 11 c0 	movl   $0xc0110974,(%esp)
c010a0a5:	e8 b3 81 ff ff       	call   c010225d <__panic>

    int i, sum = 0;
c010a0aa:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    for (i = 0; i < 100; i ++) {
c010a0b1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010a0b8:	eb 17                	jmp    c010a0d1 <check_pgfault+0x153>
        *(char *)(addr + i) = i;
c010a0ba:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a0bd:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a0c0:	01 d0                	add    %edx,%eax
c010a0c2:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a0c5:	88 10                	mov    %dl,(%eax)
        sum += i;
c010a0c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a0ca:	01 45 f0             	add    %eax,-0x10(%ebp)

    uintptr_t addr = 0x100;
    assert(find_vma(mm, addr) == vma);

    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
c010a0cd:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010a0d1:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c010a0d5:	7e e3                	jle    c010a0ba <check_pgfault+0x13c>
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c010a0d7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010a0de:	eb 15                	jmp    c010a0f5 <check_pgfault+0x177>
        sum -= *(char *)(addr + i);
c010a0e0:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a0e3:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a0e6:	01 d0                	add    %edx,%eax
c010a0e8:	0f b6 00             	movzbl (%eax),%eax
c010a0eb:	0f be c0             	movsbl %al,%eax
c010a0ee:	29 45 f0             	sub    %eax,-0x10(%ebp)
    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c010a0f1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010a0f5:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c010a0f9:	7e e5                	jle    c010a0e0 <check_pgfault+0x162>
        sum -= *(char *)(addr + i);
    }
    assert(sum == 0);
c010a0fb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010a0ff:	74 24                	je     c010a125 <check_pgfault+0x1a7>
c010a101:	c7 44 24 0c e7 0b 11 	movl   $0xc0110be7,0xc(%esp)
c010a108:	c0 
c010a109:	c7 44 24 08 5f 09 11 	movl   $0xc011095f,0x8(%esp)
c010a110:	c0 
c010a111:	c7 44 24 04 65 01 00 	movl   $0x165,0x4(%esp)
c010a118:	00 
c010a119:	c7 04 24 74 09 11 c0 	movl   $0xc0110974,(%esp)
c010a120:	e8 38 81 ff ff       	call   c010225d <__panic>

    page_remove(pgdir, ROUNDDOWN(addr, PGSIZE));
c010a125:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a128:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010a12b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010a12e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010a133:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a137:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a13a:	89 04 24             	mov    %eax,(%esp)
c010a13d:	e8 96 d1 ff ff       	call   c01072d8 <page_remove>
    free_page(pa2page(pgdir[0]));
c010a142:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a145:	8b 00                	mov    (%eax),%eax
c010a147:	89 04 24             	mov    %eax,(%esp)
c010a14a:	e8 75 f1 ff ff       	call   c01092c4 <pa2page>
c010a14f:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010a156:	00 
c010a157:	89 04 24             	mov    %eax,(%esp)
c010a15a:	e8 5d c4 ff ff       	call   c01065bc <free_pages>
    pgdir[0] = 0;
c010a15f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a162:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    mm->pgdir = NULL;
c010a168:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a16b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    mm_destroy(mm);
c010a172:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a175:	89 04 24             	mov    %eax,(%esp)
c010a178:	e8 fb f4 ff ff       	call   c0109678 <mm_destroy>
    check_mm_struct = NULL;
c010a17d:	c7 05 cc 85 1c c0 00 	movl   $0x0,0xc01c85cc
c010a184:	00 00 00 

    assert(nr_free_pages_store == nr_free_pages());
c010a187:	e8 62 c4 ff ff       	call   c01065ee <nr_free_pages>
c010a18c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010a18f:	74 24                	je     c010a1b5 <check_pgfault+0x237>
c010a191:	c7 44 24 0c f0 0b 11 	movl   $0xc0110bf0,0xc(%esp)
c010a198:	c0 
c010a199:	c7 44 24 08 5f 09 11 	movl   $0xc011095f,0x8(%esp)
c010a1a0:	c0 
c010a1a1:	c7 44 24 04 6f 01 00 	movl   $0x16f,0x4(%esp)
c010a1a8:	00 
c010a1a9:	c7 04 24 74 09 11 c0 	movl   $0xc0110974,(%esp)
c010a1b0:	e8 a8 80 ff ff       	call   c010225d <__panic>

    cprintf("check_pgfault() succeeded!\n");
c010a1b5:	c7 04 24 17 0c 11 c0 	movl   $0xc0110c17,(%esp)
c010a1bc:	e8 1a 76 ff ff       	call   c01017db <cprintf>
}
c010a1c1:	c9                   	leave  
c010a1c2:	c3                   	ret    

c010a1c3 <do_pgfault>:
 *            was a read (0) or write (1).
 *         -- The U/S flag (bit 2) indicates whether the processor was executing at user mode (1)
 *            or supervisor mode (0) at the time of the exception.
 */
int
do_pgfault(struct mm_struct *mm, uint32_t error_code, uintptr_t addr) {
c010a1c3:	55                   	push   %ebp
c010a1c4:	89 e5                	mov    %esp,%ebp
c010a1c6:	83 ec 38             	sub    $0x38,%esp
    int ret = -E_INVAL;
c010a1c9:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    //try to find a vma which include addr
    struct vma_struct *vma = find_vma(mm, addr);
c010a1d0:	8b 45 10             	mov    0x10(%ebp),%eax
c010a1d3:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a1d7:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1da:	89 04 24             	mov    %eax,(%esp)
c010a1dd:	e8 11 f2 ff ff       	call   c01093f3 <find_vma>
c010a1e2:	89 45 ec             	mov    %eax,-0x14(%ebp)

    pgfault_num++;
c010a1e5:	a1 38 64 1c c0       	mov    0xc01c6438,%eax
c010a1ea:	83 c0 01             	add    $0x1,%eax
c010a1ed:	a3 38 64 1c c0       	mov    %eax,0xc01c6438
    //If the addr is in the range of a mm's vma?
    if (vma == NULL || vma->vm_start > addr) {
c010a1f2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a1f6:	74 0b                	je     c010a203 <do_pgfault+0x40>
c010a1f8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a1fb:	8b 40 04             	mov    0x4(%eax),%eax
c010a1fe:	3b 45 10             	cmp    0x10(%ebp),%eax
c010a201:	76 18                	jbe    c010a21b <do_pgfault+0x58>
        cprintf("not valid addr %x, and  can not find it in vma\n", addr);
c010a203:	8b 45 10             	mov    0x10(%ebp),%eax
c010a206:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a20a:	c7 04 24 34 0c 11 c0 	movl   $0xc0110c34,(%esp)
c010a211:	e8 c5 75 ff ff       	call   c01017db <cprintf>
        goto failed;
c010a216:	e9 f1 01 00 00       	jmp    c010a40c <do_pgfault+0x249>
    }
    //check the error_code
    switch (error_code & 3) {
c010a21b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a21e:	83 e0 03             	and    $0x3,%eax
c010a221:	85 c0                	test   %eax,%eax
c010a223:	74 36                	je     c010a25b <do_pgfault+0x98>
c010a225:	83 f8 01             	cmp    $0x1,%eax
c010a228:	74 20                	je     c010a24a <do_pgfault+0x87>
    default:
            /* error code flag : default is 3 ( W/R=1, P=1): write, present */
    case 2: /* error code flag : (W/R=1, P=0): write, not present */
        if (!(vma->vm_flags & VM_WRITE)) {
c010a22a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a22d:	8b 40 0c             	mov    0xc(%eax),%eax
c010a230:	83 e0 02             	and    $0x2,%eax
c010a233:	85 c0                	test   %eax,%eax
c010a235:	75 11                	jne    c010a248 <do_pgfault+0x85>
            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
c010a237:	c7 04 24 64 0c 11 c0 	movl   $0xc0110c64,(%esp)
c010a23e:	e8 98 75 ff ff       	call   c01017db <cprintf>
            goto failed;
c010a243:	e9 c4 01 00 00       	jmp    c010a40c <do_pgfault+0x249>
        }
        break;
c010a248:	eb 2f                	jmp    c010a279 <do_pgfault+0xb6>
    case 1: /* error code flag : (W/R=0, P=1): read, present */
        cprintf("do_pgfault failed: error code flag = read AND present\n");
c010a24a:	c7 04 24 c4 0c 11 c0 	movl   $0xc0110cc4,(%esp)
c010a251:	e8 85 75 ff ff       	call   c01017db <cprintf>
        goto failed;
c010a256:	e9 b1 01 00 00       	jmp    c010a40c <do_pgfault+0x249>
    case 0: /* error code flag : (W/R=0, P=0): read, not present */
        if (!(vma->vm_flags & (VM_READ | VM_EXEC))) {
c010a25b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a25e:	8b 40 0c             	mov    0xc(%eax),%eax
c010a261:	83 e0 05             	and    $0x5,%eax
c010a264:	85 c0                	test   %eax,%eax
c010a266:	75 11                	jne    c010a279 <do_pgfault+0xb6>
            cprintf("do_pgfault failed: error code flag = read AND not present, but the addr's vma cannot read or exec\n");
c010a268:	c7 04 24 fc 0c 11 c0 	movl   $0xc0110cfc,(%esp)
c010a26f:	e8 67 75 ff ff       	call   c01017db <cprintf>
            goto failed;
c010a274:	e9 93 01 00 00       	jmp    c010a40c <do_pgfault+0x249>
     *    (write an non_existed addr && addr is writable) OR
     *    (read  an non_existed addr && addr is readable)
     * THEN
     *    continue process
     */
    uint32_t perm = PTE_U;
c010a279:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
    if (vma->vm_flags & VM_WRITE) {
c010a280:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a283:	8b 40 0c             	mov    0xc(%eax),%eax
c010a286:	83 e0 02             	and    $0x2,%eax
c010a289:	85 c0                	test   %eax,%eax
c010a28b:	74 04                	je     c010a291 <do_pgfault+0xce>
        perm |= PTE_W;
c010a28d:	83 4d f0 02          	orl    $0x2,-0x10(%ebp)
    }
    addr = ROUNDDOWN(addr, PGSIZE);
c010a291:	8b 45 10             	mov    0x10(%ebp),%eax
c010a294:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010a297:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a29a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010a29f:	89 45 10             	mov    %eax,0x10(%ebp)

    ret = -E_NO_MEM;
c010a2a2:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    pte_t *ptep=NULL;
c010a2a9:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
        }
   }
#endif
    // try to find a pte, if pte's PT(Page Table) isn't existed, then create a PT.
    // (notice the 3th parameter '1')
    if ((ptep = get_pte(mm->pgdir, addr, 1)) == NULL) {
c010a2b0:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2b3:	8b 40 0c             	mov    0xc(%eax),%eax
c010a2b6:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c010a2bd:	00 
c010a2be:	8b 55 10             	mov    0x10(%ebp),%edx
c010a2c1:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a2c5:	89 04 24             	mov    %eax,(%esp)
c010a2c8:	e8 fb c9 ff ff       	call   c0106cc8 <get_pte>
c010a2cd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010a2d0:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010a2d4:	75 11                	jne    c010a2e7 <do_pgfault+0x124>
        cprintf("get_pte in do_pgfault failed\n");
c010a2d6:	c7 04 24 5f 0d 11 c0 	movl   $0xc0110d5f,(%esp)
c010a2dd:	e8 f9 74 ff ff       	call   c01017db <cprintf>
        goto failed;
c010a2e2:	e9 25 01 00 00       	jmp    c010a40c <do_pgfault+0x249>
    }
    
    if (*ptep == 0) { // if the phy addr isn't exist, then alloc a page & map the phy addr with logical addr
c010a2e7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a2ea:	8b 00                	mov    (%eax),%eax
c010a2ec:	85 c0                	test   %eax,%eax
c010a2ee:	75 35                	jne    c010a325 <do_pgfault+0x162>
        if (pgdir_alloc_page(mm->pgdir, addr, perm) == NULL) {
c010a2f0:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2f3:	8b 40 0c             	mov    0xc(%eax),%eax
c010a2f6:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a2f9:	89 54 24 08          	mov    %edx,0x8(%esp)
c010a2fd:	8b 55 10             	mov    0x10(%ebp),%edx
c010a300:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a304:	89 04 24             	mov    %eax,(%esp)
c010a307:	e8 26 d1 ff ff       	call   c0107432 <pgdir_alloc_page>
c010a30c:	85 c0                	test   %eax,%eax
c010a30e:	0f 85 f1 00 00 00    	jne    c010a405 <do_pgfault+0x242>
            cprintf("pgdir_alloc_page in do_pgfault failed\n");
c010a314:	c7 04 24 80 0d 11 c0 	movl   $0xc0110d80,(%esp)
c010a31b:	e8 bb 74 ff ff       	call   c01017db <cprintf>
            goto failed;
c010a320:	e9 e7 00 00 00       	jmp    c010a40c <do_pgfault+0x249>
        }
    }
    else {
        struct Page *page=NULL;
c010a325:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
        cprintf("do pgfault: ptep %x, pte %x\n",ptep, *ptep);
c010a32c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a32f:	8b 00                	mov    (%eax),%eax
c010a331:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a335:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a338:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a33c:	c7 04 24 a7 0d 11 c0 	movl   $0xc0110da7,(%esp)
c010a343:	e8 93 74 ff ff       	call   c01017db <cprintf>
        if (*ptep & PTE_P) {
c010a348:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a34b:	8b 00                	mov    (%eax),%eax
c010a34d:	83 e0 01             	and    $0x1,%eax
c010a350:	85 c0                	test   %eax,%eax
c010a352:	74 1c                	je     c010a370 <do_pgfault+0x1ad>
            //if process write to this existed readonly page (PTE_P means existed), then should be here now.
            //we can implement the delayed memory space copy for fork child process (AKA copy on write, COW).
            //we didn't implement now, we will do it in future.
            panic("error write a non-writable pte");
c010a354:	c7 44 24 08 c4 0d 11 	movl   $0xc0110dc4,0x8(%esp)
c010a35b:	c0 
c010a35c:	c7 44 24 04 08 02 00 	movl   $0x208,0x4(%esp)
c010a363:	00 
c010a364:	c7 04 24 74 09 11 c0 	movl   $0xc0110974,(%esp)
c010a36b:	e8 ed 7e ff ff       	call   c010225d <__panic>
            //page = pte2page(*ptep);
        } else{
           // if this pte is a swap entry, then load data from disk to a page with phy addr
           // and call page_insert to map the phy addr with logical addr
           if(swap_init_ok) {               
c010a370:	a1 2c 64 1c c0       	mov    0xc01c642c,%eax
c010a375:	85 c0                	test   %eax,%eax
c010a377:	74 30                	je     c010a3a9 <do_pgfault+0x1e6>
               if ((ret = swap_in(mm, addr, &page)) != 0) {
c010a379:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010a37c:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a380:	8b 45 10             	mov    0x10(%ebp),%eax
c010a383:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a387:	8b 45 08             	mov    0x8(%ebp),%eax
c010a38a:	89 04 24             	mov    %eax,(%esp)
c010a38d:	e8 43 e1 ff ff       	call   c01084d5 <swap_in>
c010a392:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a395:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a399:	74 26                	je     c010a3c1 <do_pgfault+0x1fe>
                   cprintf("swap_in in do_pgfault failed\n");
c010a39b:	c7 04 24 e3 0d 11 c0 	movl   $0xc0110de3,(%esp)
c010a3a2:	e8 34 74 ff ff       	call   c01017db <cprintf>
                   goto failed;
c010a3a7:	eb 63                	jmp    c010a40c <do_pgfault+0x249>
               }    

           }  
           else {
            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
c010a3a9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a3ac:	8b 00                	mov    (%eax),%eax
c010a3ae:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a3b2:	c7 04 24 04 0e 11 c0 	movl   $0xc0110e04,(%esp)
c010a3b9:	e8 1d 74 ff ff       	call   c01017db <cprintf>
            goto failed;
c010a3be:	90                   	nop
c010a3bf:	eb 4b                	jmp    c010a40c <do_pgfault+0x249>
           }
       } 
       page_insert(mm->pgdir, page, addr, perm);
c010a3c1:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010a3c4:	8b 45 08             	mov    0x8(%ebp),%eax
c010a3c7:	8b 40 0c             	mov    0xc(%eax),%eax
c010a3ca:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010a3cd:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c010a3d1:	8b 4d 10             	mov    0x10(%ebp),%ecx
c010a3d4:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010a3d8:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a3dc:	89 04 24             	mov    %eax,(%esp)
c010a3df:	e8 38 cf ff ff       	call   c010731c <page_insert>
       swap_map_swappable(mm, addr, page, 1);
c010a3e4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a3e7:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010a3ee:	00 
c010a3ef:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a3f3:	8b 45 10             	mov    0x10(%ebp),%eax
c010a3f6:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a3fa:	8b 45 08             	mov    0x8(%ebp),%eax
c010a3fd:	89 04 24             	mov    %eax,(%esp)
c010a400:	e8 07 df ff ff       	call   c010830c <swap_map_swappable>
   }
   ret = 0;
c010a405:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
failed:
    return ret;
c010a40c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010a40f:	c9                   	leave  
c010a410:	c3                   	ret    

c010a411 <user_mem_check>:

bool
user_mem_check(struct mm_struct *mm, uintptr_t addr, size_t len, bool write) {
c010a411:	55                   	push   %ebp
c010a412:	89 e5                	mov    %esp,%ebp
c010a414:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010a417:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a41b:	0f 84 e0 00 00 00    	je     c010a501 <user_mem_check+0xf0>
        if (!USER_ACCESS(addr, addr + len)) {
c010a421:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c010a428:	76 1c                	jbe    c010a446 <user_mem_check+0x35>
c010a42a:	8b 45 10             	mov    0x10(%ebp),%eax
c010a42d:	8b 55 0c             	mov    0xc(%ebp),%edx
c010a430:	01 d0                	add    %edx,%eax
c010a432:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010a435:	76 0f                	jbe    c010a446 <user_mem_check+0x35>
c010a437:	8b 45 10             	mov    0x10(%ebp),%eax
c010a43a:	8b 55 0c             	mov    0xc(%ebp),%edx
c010a43d:	01 d0                	add    %edx,%eax
c010a43f:	3d 00 00 00 b0       	cmp    $0xb0000000,%eax
c010a444:	76 0a                	jbe    c010a450 <user_mem_check+0x3f>
            return 0;
c010a446:	b8 00 00 00 00       	mov    $0x0,%eax
c010a44b:	e9 e2 00 00 00       	jmp    c010a532 <user_mem_check+0x121>
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
c010a450:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a453:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010a456:	8b 45 10             	mov    0x10(%ebp),%eax
c010a459:	8b 55 0c             	mov    0xc(%ebp),%edx
c010a45c:	01 d0                	add    %edx,%eax
c010a45e:	89 45 f8             	mov    %eax,-0x8(%ebp)
        while (start < end) {
c010a461:	e9 88 00 00 00       	jmp    c010a4ee <user_mem_check+0xdd>
            if ((vma = find_vma(mm, start)) == NULL || start < vma->vm_start) {
c010a466:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a469:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a46d:	8b 45 08             	mov    0x8(%ebp),%eax
c010a470:	89 04 24             	mov    %eax,(%esp)
c010a473:	e8 7b ef ff ff       	call   c01093f3 <find_vma>
c010a478:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a47b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a47f:	74 0b                	je     c010a48c <user_mem_check+0x7b>
c010a481:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a484:	8b 40 04             	mov    0x4(%eax),%eax
c010a487:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010a48a:	76 0a                	jbe    c010a496 <user_mem_check+0x85>
                return 0;
c010a48c:	b8 00 00 00 00       	mov    $0x0,%eax
c010a491:	e9 9c 00 00 00       	jmp    c010a532 <user_mem_check+0x121>
            }
            if (!(vma->vm_flags & ((write) ? VM_WRITE : VM_READ))) {
c010a496:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a499:	8b 50 0c             	mov    0xc(%eax),%edx
c010a49c:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010a4a0:	74 07                	je     c010a4a9 <user_mem_check+0x98>
c010a4a2:	b8 02 00 00 00       	mov    $0x2,%eax
c010a4a7:	eb 05                	jmp    c010a4ae <user_mem_check+0x9d>
c010a4a9:	b8 01 00 00 00       	mov    $0x1,%eax
c010a4ae:	21 d0                	and    %edx,%eax
c010a4b0:	85 c0                	test   %eax,%eax
c010a4b2:	75 07                	jne    c010a4bb <user_mem_check+0xaa>
                return 0;
c010a4b4:	b8 00 00 00 00       	mov    $0x0,%eax
c010a4b9:	eb 77                	jmp    c010a532 <user_mem_check+0x121>
            }
            if (write && (vma->vm_flags & VM_STACK)) {
c010a4bb:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010a4bf:	74 24                	je     c010a4e5 <user_mem_check+0xd4>
c010a4c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a4c4:	8b 40 0c             	mov    0xc(%eax),%eax
c010a4c7:	83 e0 08             	and    $0x8,%eax
c010a4ca:	85 c0                	test   %eax,%eax
c010a4cc:	74 17                	je     c010a4e5 <user_mem_check+0xd4>
                if (start < vma->vm_start + PGSIZE) { //check stack start & size
c010a4ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a4d1:	8b 40 04             	mov    0x4(%eax),%eax
c010a4d4:	05 00 10 00 00       	add    $0x1000,%eax
c010a4d9:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010a4dc:	76 07                	jbe    c010a4e5 <user_mem_check+0xd4>
                    return 0;
c010a4de:	b8 00 00 00 00       	mov    $0x0,%eax
c010a4e3:	eb 4d                	jmp    c010a532 <user_mem_check+0x121>
                }
            }
            start = vma->vm_end;
c010a4e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a4e8:	8b 40 08             	mov    0x8(%eax),%eax
c010a4eb:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!USER_ACCESS(addr, addr + len)) {
            return 0;
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
        while (start < end) {
c010a4ee:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a4f1:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c010a4f4:	0f 82 6c ff ff ff    	jb     c010a466 <user_mem_check+0x55>
                    return 0;
                }
            }
            start = vma->vm_end;
        }
        return 1;
c010a4fa:	b8 01 00 00 00       	mov    $0x1,%eax
c010a4ff:	eb 31                	jmp    c010a532 <user_mem_check+0x121>
    }
    return KERN_ACCESS(addr, addr + len);
c010a501:	81 7d 0c ff ff ff bf 	cmpl   $0xbfffffff,0xc(%ebp)
c010a508:	76 23                	jbe    c010a52d <user_mem_check+0x11c>
c010a50a:	8b 45 10             	mov    0x10(%ebp),%eax
c010a50d:	8b 55 0c             	mov    0xc(%ebp),%edx
c010a510:	01 d0                	add    %edx,%eax
c010a512:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010a515:	76 16                	jbe    c010a52d <user_mem_check+0x11c>
c010a517:	8b 45 10             	mov    0x10(%ebp),%eax
c010a51a:	8b 55 0c             	mov    0xc(%ebp),%edx
c010a51d:	01 d0                	add    %edx,%eax
c010a51f:	3d 00 00 00 f8       	cmp    $0xf8000000,%eax
c010a524:	77 07                	ja     c010a52d <user_mem_check+0x11c>
c010a526:	b8 01 00 00 00       	mov    $0x1,%eax
c010a52b:	eb 05                	jmp    c010a532 <user_mem_check+0x121>
c010a52d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a532:	c9                   	leave  
c010a533:	c3                   	ret    

c010a534 <phi_test_sema>:
semaphore_t s[N]; /* 每个哲学家一个信号量 */

struct proc_struct *philosopher_proc_sema[N];

void phi_test_sema(i) /* i：哲学家号码从0到N-1 */
{ 
c010a534:	55                   	push   %ebp
c010a535:	89 e5                	mov    %esp,%ebp
c010a537:	83 ec 18             	sub    $0x18,%esp
    if(state_sema[i]==HUNGRY&&state_sema[LEFT]!=EATING
c010a53a:	8b 45 08             	mov    0x8(%ebp),%eax
c010a53d:	8b 04 85 e0 85 1c c0 	mov    -0x3fe37a20(,%eax,4),%eax
c010a544:	83 f8 01             	cmp    $0x1,%eax
c010a547:	0f 85 85 00 00 00    	jne    c010a5d2 <phi_test_sema+0x9e>
c010a54d:	8b 45 08             	mov    0x8(%ebp),%eax
c010a550:	8d 48 04             	lea    0x4(%eax),%ecx
c010a553:	ba 67 66 66 66       	mov    $0x66666667,%edx
c010a558:	89 c8                	mov    %ecx,%eax
c010a55a:	f7 ea                	imul   %edx
c010a55c:	d1 fa                	sar    %edx
c010a55e:	89 c8                	mov    %ecx,%eax
c010a560:	c1 f8 1f             	sar    $0x1f,%eax
c010a563:	29 c2                	sub    %eax,%edx
c010a565:	89 d0                	mov    %edx,%eax
c010a567:	c1 e0 02             	shl    $0x2,%eax
c010a56a:	01 d0                	add    %edx,%eax
c010a56c:	29 c1                	sub    %eax,%ecx
c010a56e:	89 ca                	mov    %ecx,%edx
c010a570:	8b 04 95 e0 85 1c c0 	mov    -0x3fe37a20(,%edx,4),%eax
c010a577:	83 f8 02             	cmp    $0x2,%eax
c010a57a:	74 56                	je     c010a5d2 <phi_test_sema+0x9e>
            &&state_sema[RIGHT]!=EATING)
c010a57c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a57f:	8d 48 01             	lea    0x1(%eax),%ecx
c010a582:	ba 67 66 66 66       	mov    $0x66666667,%edx
c010a587:	89 c8                	mov    %ecx,%eax
c010a589:	f7 ea                	imul   %edx
c010a58b:	d1 fa                	sar    %edx
c010a58d:	89 c8                	mov    %ecx,%eax
c010a58f:	c1 f8 1f             	sar    $0x1f,%eax
c010a592:	29 c2                	sub    %eax,%edx
c010a594:	89 d0                	mov    %edx,%eax
c010a596:	c1 e0 02             	shl    $0x2,%eax
c010a599:	01 d0                	add    %edx,%eax
c010a59b:	29 c1                	sub    %eax,%ecx
c010a59d:	89 ca                	mov    %ecx,%edx
c010a59f:	8b 04 95 e0 85 1c c0 	mov    -0x3fe37a20(,%edx,4),%eax
c010a5a6:	83 f8 02             	cmp    $0x2,%eax
c010a5a9:	74 27                	je     c010a5d2 <phi_test_sema+0x9e>
    {
        state_sema[i]=EATING;
c010a5ab:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5ae:	c7 04 85 e0 85 1c c0 	movl   $0x2,-0x3fe37a20(,%eax,4)
c010a5b5:	02 00 00 00 
        up(&s[i]);
c010a5b9:	8b 55 08             	mov    0x8(%ebp),%edx
c010a5bc:	89 d0                	mov    %edx,%eax
c010a5be:	01 c0                	add    %eax,%eax
c010a5c0:	01 d0                	add    %edx,%eax
c010a5c2:	c1 e0 02             	shl    $0x2,%eax
c010a5c5:	05 80 86 1c c0       	add    $0xc01c8680,%eax
c010a5ca:	89 04 24             	mov    %eax,(%esp)
c010a5cd:	e8 ea 09 00 00       	call   c010afbc <up>
    }
}
c010a5d2:	c9                   	leave  
c010a5d3:	c3                   	ret    

c010a5d4 <phi_take_forks_sema>:

void phi_take_forks_sema(int i) /* i：哲学家号码从0到N-1 */
{ 
c010a5d4:	55                   	push   %ebp
c010a5d5:	89 e5                	mov    %esp,%ebp
c010a5d7:	83 ec 18             	sub    $0x18,%esp
        down(&mutex); /* 进入临界区 */
c010a5da:	c7 04 24 08 86 1c c0 	movl   $0xc01c8608,(%esp)
c010a5e1:	e8 f1 09 00 00       	call   c010afd7 <down>
        state_sema[i]=HUNGRY; /* 记录下哲学家i饥饿的事实 */
c010a5e6:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5e9:	c7 04 85 e0 85 1c c0 	movl   $0x1,-0x3fe37a20(,%eax,4)
c010a5f0:	01 00 00 00 
        phi_test_sema(i); /* 试图得到两只叉子 */
c010a5f4:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5f7:	89 04 24             	mov    %eax,(%esp)
c010a5fa:	e8 35 ff ff ff       	call   c010a534 <phi_test_sema>
        up(&mutex); /* 离开临界区 */
c010a5ff:	c7 04 24 08 86 1c c0 	movl   $0xc01c8608,(%esp)
c010a606:	e8 b1 09 00 00       	call   c010afbc <up>
        down(&s[i]); /* 如果得不到叉子就阻塞 */
c010a60b:	8b 55 08             	mov    0x8(%ebp),%edx
c010a60e:	89 d0                	mov    %edx,%eax
c010a610:	01 c0                	add    %eax,%eax
c010a612:	01 d0                	add    %edx,%eax
c010a614:	c1 e0 02             	shl    $0x2,%eax
c010a617:	05 80 86 1c c0       	add    $0xc01c8680,%eax
c010a61c:	89 04 24             	mov    %eax,(%esp)
c010a61f:	e8 b3 09 00 00       	call   c010afd7 <down>
}
c010a624:	c9                   	leave  
c010a625:	c3                   	ret    

c010a626 <phi_put_forks_sema>:

void phi_put_forks_sema(int i) /* i：哲学家号码从0到N-1 */
{ 
c010a626:	55                   	push   %ebp
c010a627:	89 e5                	mov    %esp,%ebp
c010a629:	83 ec 18             	sub    $0x18,%esp
        down(&mutex); /* 进入临界区 */
c010a62c:	c7 04 24 08 86 1c c0 	movl   $0xc01c8608,(%esp)
c010a633:	e8 9f 09 00 00       	call   c010afd7 <down>
        state_sema[i]=THINKING; /* 哲学家进餐结束 */
c010a638:	8b 45 08             	mov    0x8(%ebp),%eax
c010a63b:	c7 04 85 e0 85 1c c0 	movl   $0x0,-0x3fe37a20(,%eax,4)
c010a642:	00 00 00 00 
        phi_test_sema(LEFT); /* 看一下左邻居现在是否能进餐 */
c010a646:	8b 45 08             	mov    0x8(%ebp),%eax
c010a649:	8d 48 04             	lea    0x4(%eax),%ecx
c010a64c:	ba 67 66 66 66       	mov    $0x66666667,%edx
c010a651:	89 c8                	mov    %ecx,%eax
c010a653:	f7 ea                	imul   %edx
c010a655:	d1 fa                	sar    %edx
c010a657:	89 c8                	mov    %ecx,%eax
c010a659:	c1 f8 1f             	sar    $0x1f,%eax
c010a65c:	29 c2                	sub    %eax,%edx
c010a65e:	89 d0                	mov    %edx,%eax
c010a660:	c1 e0 02             	shl    $0x2,%eax
c010a663:	01 d0                	add    %edx,%eax
c010a665:	29 c1                	sub    %eax,%ecx
c010a667:	89 ca                	mov    %ecx,%edx
c010a669:	89 14 24             	mov    %edx,(%esp)
c010a66c:	e8 c3 fe ff ff       	call   c010a534 <phi_test_sema>
        phi_test_sema(RIGHT); /* 看一下右邻居现在是否能进餐 */
c010a671:	8b 45 08             	mov    0x8(%ebp),%eax
c010a674:	8d 48 01             	lea    0x1(%eax),%ecx
c010a677:	ba 67 66 66 66       	mov    $0x66666667,%edx
c010a67c:	89 c8                	mov    %ecx,%eax
c010a67e:	f7 ea                	imul   %edx
c010a680:	d1 fa                	sar    %edx
c010a682:	89 c8                	mov    %ecx,%eax
c010a684:	c1 f8 1f             	sar    $0x1f,%eax
c010a687:	29 c2                	sub    %eax,%edx
c010a689:	89 d0                	mov    %edx,%eax
c010a68b:	c1 e0 02             	shl    $0x2,%eax
c010a68e:	01 d0                	add    %edx,%eax
c010a690:	29 c1                	sub    %eax,%ecx
c010a692:	89 ca                	mov    %ecx,%edx
c010a694:	89 14 24             	mov    %edx,(%esp)
c010a697:	e8 98 fe ff ff       	call   c010a534 <phi_test_sema>
        up(&mutex); /* 离开临界区 */
c010a69c:	c7 04 24 08 86 1c c0 	movl   $0xc01c8608,(%esp)
c010a6a3:	e8 14 09 00 00       	call   c010afbc <up>
}
c010a6a8:	c9                   	leave  
c010a6a9:	c3                   	ret    

c010a6aa <philosopher_using_semaphore>:

int philosopher_using_semaphore(void * arg) /* i：哲学家号码，从0到N-1 */
{
c010a6aa:	55                   	push   %ebp
c010a6ab:	89 e5                	mov    %esp,%ebp
c010a6ad:	83 ec 28             	sub    $0x28,%esp
    int i, iter=0;
c010a6b0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    i=(int)arg;
c010a6b7:	8b 45 08             	mov    0x8(%ebp),%eax
c010a6ba:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cprintf("I am No.%d philosopher_sema\n",i);
c010a6bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a6c0:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a6c4:	c7 04 24 2c 0e 11 c0 	movl   $0xc0110e2c,(%esp)
c010a6cb:	e8 0b 71 ff ff       	call   c01017db <cprintf>
    while(iter++<TIMES)
c010a6d0:	eb 62                	jmp    c010a734 <philosopher_using_semaphore+0x8a>
    { /* 无限循环 */
        cprintf("Iter %d, No.%d philosopher_sema is thinking\n",iter,i); /* 哲学家正在思考 */
c010a6d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a6d5:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a6d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a6dc:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a6e0:	c7 04 24 4c 0e 11 c0 	movl   $0xc0110e4c,(%esp)
c010a6e7:	e8 ef 70 ff ff       	call   c01017db <cprintf>
        do_sleep(SLEEP_TIME);
c010a6ec:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c010a6f3:	e8 eb 2c 00 00       	call   c010d3e3 <do_sleep>
        phi_take_forks_sema(i); 
c010a6f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a6fb:	89 04 24             	mov    %eax,(%esp)
c010a6fe:	e8 d1 fe ff ff       	call   c010a5d4 <phi_take_forks_sema>
        /* 需要两只叉子，或者阻塞 */
        cprintf("Iter %d, No.%d philosopher_sema is eating\n",iter,i); /* 进餐 */
c010a703:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a706:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a70a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a70d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a711:	c7 04 24 7c 0e 11 c0 	movl   $0xc0110e7c,(%esp)
c010a718:	e8 be 70 ff ff       	call   c01017db <cprintf>
        do_sleep(SLEEP_TIME);
c010a71d:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c010a724:	e8 ba 2c 00 00       	call   c010d3e3 <do_sleep>
        phi_put_forks_sema(i); 
c010a729:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a72c:	89 04 24             	mov    %eax,(%esp)
c010a72f:	e8 f2 fe ff ff       	call   c010a626 <phi_put_forks_sema>
int philosopher_using_semaphore(void * arg) /* i：哲学家号码，从0到N-1 */
{
    int i, iter=0;
    i=(int)arg;
    cprintf("I am No.%d philosopher_sema\n",i);
    while(iter++<TIMES)
c010a734:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a737:	8d 50 01             	lea    0x1(%eax),%edx
c010a73a:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010a73d:	83 f8 03             	cmp    $0x3,%eax
c010a740:	7e 90                	jle    c010a6d2 <philosopher_using_semaphore+0x28>
        cprintf("Iter %d, No.%d philosopher_sema is eating\n",iter,i); /* 进餐 */
        do_sleep(SLEEP_TIME);
        phi_put_forks_sema(i); 
        /* 把两把叉子同时放回桌子 */
    }
    cprintf("No.%d philosopher_sema quit\n",i);
c010a742:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a745:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a749:	c7 04 24 a7 0e 11 c0 	movl   $0xc0110ea7,(%esp)
c010a750:	e8 86 70 ff ff       	call   c01017db <cprintf>
    return 0;    
c010a755:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a75a:	c9                   	leave  
c010a75b:	c3                   	ret    

c010a75c <phi_test_condvar>:

struct proc_struct *philosopher_proc_condvar[N]; // N philosopher
int state_condvar[N];                            // the philosopher's state: EATING, HUNGARY, THINKING  
monitor_t mt, *mtp=&mt;                                    // mp is mutex semaphore for monitor's procedures

void phi_test_condvar (i) { 
c010a75c:	55                   	push   %ebp
c010a75d:	89 e5                	mov    %esp,%ebp
c010a75f:	83 ec 18             	sub    $0x18,%esp
    if(state_condvar[i]==HUNGRY&&state_condvar[LEFT]!=EATING
c010a762:	8b 45 08             	mov    0x8(%ebp),%eax
c010a765:	8b 04 85 40 86 1c c0 	mov    -0x3fe379c0(,%eax,4),%eax
c010a76c:	83 f8 01             	cmp    $0x1,%eax
c010a76f:	0f 85 b5 00 00 00    	jne    c010a82a <phi_test_condvar+0xce>
c010a775:	8b 45 08             	mov    0x8(%ebp),%eax
c010a778:	8d 48 04             	lea    0x4(%eax),%ecx
c010a77b:	ba 67 66 66 66       	mov    $0x66666667,%edx
c010a780:	89 c8                	mov    %ecx,%eax
c010a782:	f7 ea                	imul   %edx
c010a784:	d1 fa                	sar    %edx
c010a786:	89 c8                	mov    %ecx,%eax
c010a788:	c1 f8 1f             	sar    $0x1f,%eax
c010a78b:	29 c2                	sub    %eax,%edx
c010a78d:	89 d0                	mov    %edx,%eax
c010a78f:	c1 e0 02             	shl    $0x2,%eax
c010a792:	01 d0                	add    %edx,%eax
c010a794:	29 c1                	sub    %eax,%ecx
c010a796:	89 ca                	mov    %ecx,%edx
c010a798:	8b 04 95 40 86 1c c0 	mov    -0x3fe379c0(,%edx,4),%eax
c010a79f:	83 f8 02             	cmp    $0x2,%eax
c010a7a2:	0f 84 82 00 00 00    	je     c010a82a <phi_test_condvar+0xce>
            &&state_condvar[RIGHT]!=EATING) {
c010a7a8:	8b 45 08             	mov    0x8(%ebp),%eax
c010a7ab:	8d 48 01             	lea    0x1(%eax),%ecx
c010a7ae:	ba 67 66 66 66       	mov    $0x66666667,%edx
c010a7b3:	89 c8                	mov    %ecx,%eax
c010a7b5:	f7 ea                	imul   %edx
c010a7b7:	d1 fa                	sar    %edx
c010a7b9:	89 c8                	mov    %ecx,%eax
c010a7bb:	c1 f8 1f             	sar    $0x1f,%eax
c010a7be:	29 c2                	sub    %eax,%edx
c010a7c0:	89 d0                	mov    %edx,%eax
c010a7c2:	c1 e0 02             	shl    $0x2,%eax
c010a7c5:	01 d0                	add    %edx,%eax
c010a7c7:	29 c1                	sub    %eax,%ecx
c010a7c9:	89 ca                	mov    %ecx,%edx
c010a7cb:	8b 04 95 40 86 1c c0 	mov    -0x3fe379c0(,%edx,4),%eax
c010a7d2:	83 f8 02             	cmp    $0x2,%eax
c010a7d5:	74 53                	je     c010a82a <phi_test_condvar+0xce>
        cprintf("phi_test_condvar: state_condvar[%d] will eating\n",i);
c010a7d7:	8b 45 08             	mov    0x8(%ebp),%eax
c010a7da:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a7de:	c7 04 24 c4 0e 11 c0 	movl   $0xc0110ec4,(%esp)
c010a7e5:	e8 f1 6f ff ff       	call   c01017db <cprintf>
        state_condvar[i] = EATING ;
c010a7ea:	8b 45 08             	mov    0x8(%ebp),%eax
c010a7ed:	c7 04 85 40 86 1c c0 	movl   $0x2,-0x3fe379c0(,%eax,4)
c010a7f4:	02 00 00 00 
        cprintf("phi_test_condvar: signal self_cv[%d] \n",i);
c010a7f8:	8b 45 08             	mov    0x8(%ebp),%eax
c010a7fb:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a7ff:	c7 04 24 f8 0e 11 c0 	movl   $0xc0110ef8,(%esp)
c010a806:	e8 d0 6f ff ff       	call   c01017db <cprintf>
        cond_signal(&mtp->cv[i]) ;
c010a80b:	a1 80 4a 13 c0       	mov    0xc0134a80,%eax
c010a810:	8b 48 1c             	mov    0x1c(%eax),%ecx
c010a813:	8b 55 08             	mov    0x8(%ebp),%edx
c010a816:	89 d0                	mov    %edx,%eax
c010a818:	c1 e0 02             	shl    $0x2,%eax
c010a81b:	01 d0                	add    %edx,%eax
c010a81d:	c1 e0 02             	shl    $0x2,%eax
c010a820:	01 c8                	add    %ecx,%eax
c010a822:	89 04 24             	mov    %eax,(%esp)
c010a825:	e8 8f 04 00 00       	call   c010acb9 <cond_signal>
    }
}
c010a82a:	c9                   	leave  
c010a82b:	c3                   	ret    

c010a82c <phi_take_forks_condvar>:


void phi_take_forks_condvar(int i) {
c010a82c:	55                   	push   %ebp
c010a82d:	89 e5                	mov    %esp,%ebp
c010a82f:	83 ec 18             	sub    $0x18,%esp
     down(&(mtp->mutex));
c010a832:	a1 80 4a 13 c0       	mov    0xc0134a80,%eax
c010a837:	89 04 24             	mov    %eax,(%esp)
c010a83a:	e8 98 07 00 00       	call   c010afd7 <down>
//--------into routine in monitor--------------
     // LAB7 EXERCISE1: YOUR CODE
     // I am hungry
     // try to get fork
      // I am hungry
      state_condvar[i]=HUNGRY; 
c010a83f:	8b 45 08             	mov    0x8(%ebp),%eax
c010a842:	c7 04 85 40 86 1c c0 	movl   $0x1,-0x3fe379c0(,%eax,4)
c010a849:	01 00 00 00 
      // try to get fork
      phi_test_condvar(i); 
c010a84d:	8b 45 08             	mov    0x8(%ebp),%eax
c010a850:	89 04 24             	mov    %eax,(%esp)
c010a853:	e8 04 ff ff ff       	call   c010a75c <phi_test_condvar>
      while (state_condvar[i] != EATING) {
c010a858:	eb 32                	jmp    c010a88c <phi_take_forks_condvar+0x60>
          cprintf("phi_take_forks_condvar: %d didn't get fork and will wait\n",i);
c010a85a:	8b 45 08             	mov    0x8(%ebp),%eax
c010a85d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a861:	c7 04 24 20 0f 11 c0 	movl   $0xc0110f20,(%esp)
c010a868:	e8 6e 6f ff ff       	call   c01017db <cprintf>
          cond_wait(&mtp->cv[i]);
c010a86d:	a1 80 4a 13 c0       	mov    0xc0134a80,%eax
c010a872:	8b 48 1c             	mov    0x1c(%eax),%ecx
c010a875:	8b 55 08             	mov    0x8(%ebp),%edx
c010a878:	89 d0                	mov    %edx,%eax
c010a87a:	c1 e0 02             	shl    $0x2,%eax
c010a87d:	01 d0                	add    %edx,%eax
c010a87f:	c1 e0 02             	shl    $0x2,%eax
c010a882:	01 c8                	add    %ecx,%eax
c010a884:	89 04 24             	mov    %eax,(%esp)
c010a887:	e8 cd 04 00 00       	call   c010ad59 <cond_wait>
     // try to get fork
      // I am hungry
      state_condvar[i]=HUNGRY; 
      // try to get fork
      phi_test_condvar(i); 
      while (state_condvar[i] != EATING) {
c010a88c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a88f:	8b 04 85 40 86 1c c0 	mov    -0x3fe379c0(,%eax,4),%eax
c010a896:	83 f8 02             	cmp    $0x2,%eax
c010a899:	75 bf                	jne    c010a85a <phi_take_forks_condvar+0x2e>
          cprintf("phi_take_forks_condvar: %d didn't get fork and will wait\n",i);
          cond_wait(&mtp->cv[i]);
      }
//--------leave routine in monitor--------------
      if(mtp->next_count>0)
c010a89b:	a1 80 4a 13 c0       	mov    0xc0134a80,%eax
c010a8a0:	8b 40 18             	mov    0x18(%eax),%eax
c010a8a3:	85 c0                	test   %eax,%eax
c010a8a5:	7e 12                	jle    c010a8b9 <phi_take_forks_condvar+0x8d>
         up(&(mtp->next));
c010a8a7:	a1 80 4a 13 c0       	mov    0xc0134a80,%eax
c010a8ac:	83 c0 0c             	add    $0xc,%eax
c010a8af:	89 04 24             	mov    %eax,(%esp)
c010a8b2:	e8 05 07 00 00       	call   c010afbc <up>
c010a8b7:	eb 0d                	jmp    c010a8c6 <phi_take_forks_condvar+0x9a>
      else
         up(&(mtp->mutex));
c010a8b9:	a1 80 4a 13 c0       	mov    0xc0134a80,%eax
c010a8be:	89 04 24             	mov    %eax,(%esp)
c010a8c1:	e8 f6 06 00 00       	call   c010afbc <up>
}
c010a8c6:	c9                   	leave  
c010a8c7:	c3                   	ret    

c010a8c8 <phi_put_forks_condvar>:

void phi_put_forks_condvar(int i) {
c010a8c8:	55                   	push   %ebp
c010a8c9:	89 e5                	mov    %esp,%ebp
c010a8cb:	83 ec 18             	sub    $0x18,%esp
     down(&(mtp->mutex));
c010a8ce:	a1 80 4a 13 c0       	mov    0xc0134a80,%eax
c010a8d3:	89 04 24             	mov    %eax,(%esp)
c010a8d6:	e8 fc 06 00 00       	call   c010afd7 <down>
//--------into routine in monitor--------------
     // LAB7 EXERCISE1: YOUR CODE
     // I ate over
     // test left and right neighbors
      // I ate over 
      state_condvar[i]=THINKING;
c010a8db:	8b 45 08             	mov    0x8(%ebp),%eax
c010a8de:	c7 04 85 40 86 1c c0 	movl   $0x0,-0x3fe379c0(,%eax,4)
c010a8e5:	00 00 00 00 
      // test left and right neighbors
      phi_test_condvar(LEFT);
c010a8e9:	8b 45 08             	mov    0x8(%ebp),%eax
c010a8ec:	8d 48 04             	lea    0x4(%eax),%ecx
c010a8ef:	ba 67 66 66 66       	mov    $0x66666667,%edx
c010a8f4:	89 c8                	mov    %ecx,%eax
c010a8f6:	f7 ea                	imul   %edx
c010a8f8:	d1 fa                	sar    %edx
c010a8fa:	89 c8                	mov    %ecx,%eax
c010a8fc:	c1 f8 1f             	sar    $0x1f,%eax
c010a8ff:	29 c2                	sub    %eax,%edx
c010a901:	89 d0                	mov    %edx,%eax
c010a903:	c1 e0 02             	shl    $0x2,%eax
c010a906:	01 d0                	add    %edx,%eax
c010a908:	29 c1                	sub    %eax,%ecx
c010a90a:	89 ca                	mov    %ecx,%edx
c010a90c:	89 14 24             	mov    %edx,(%esp)
c010a90f:	e8 48 fe ff ff       	call   c010a75c <phi_test_condvar>
      phi_test_condvar(RIGHT);
c010a914:	8b 45 08             	mov    0x8(%ebp),%eax
c010a917:	8d 48 01             	lea    0x1(%eax),%ecx
c010a91a:	ba 67 66 66 66       	mov    $0x66666667,%edx
c010a91f:	89 c8                	mov    %ecx,%eax
c010a921:	f7 ea                	imul   %edx
c010a923:	d1 fa                	sar    %edx
c010a925:	89 c8                	mov    %ecx,%eax
c010a927:	c1 f8 1f             	sar    $0x1f,%eax
c010a92a:	29 c2                	sub    %eax,%edx
c010a92c:	89 d0                	mov    %edx,%eax
c010a92e:	c1 e0 02             	shl    $0x2,%eax
c010a931:	01 d0                	add    %edx,%eax
c010a933:	29 c1                	sub    %eax,%ecx
c010a935:	89 ca                	mov    %ecx,%edx
c010a937:	89 14 24             	mov    %edx,(%esp)
c010a93a:	e8 1d fe ff ff       	call   c010a75c <phi_test_condvar>
//--------leave routine in monitor--------------
     if(mtp->next_count>0)
c010a93f:	a1 80 4a 13 c0       	mov    0xc0134a80,%eax
c010a944:	8b 40 18             	mov    0x18(%eax),%eax
c010a947:	85 c0                	test   %eax,%eax
c010a949:	7e 12                	jle    c010a95d <phi_put_forks_condvar+0x95>
        up(&(mtp->next));
c010a94b:	a1 80 4a 13 c0       	mov    0xc0134a80,%eax
c010a950:	83 c0 0c             	add    $0xc,%eax
c010a953:	89 04 24             	mov    %eax,(%esp)
c010a956:	e8 61 06 00 00       	call   c010afbc <up>
c010a95b:	eb 0d                	jmp    c010a96a <phi_put_forks_condvar+0xa2>
     else
        up(&(mtp->mutex));
c010a95d:	a1 80 4a 13 c0       	mov    0xc0134a80,%eax
c010a962:	89 04 24             	mov    %eax,(%esp)
c010a965:	e8 52 06 00 00       	call   c010afbc <up>
}
c010a96a:	c9                   	leave  
c010a96b:	c3                   	ret    

c010a96c <philosopher_using_condvar>:

//---------- philosophers using monitor (condition variable) ----------------------
int philosopher_using_condvar(void * arg) { /* arg is the No. of philosopher 0~N-1*/
c010a96c:	55                   	push   %ebp
c010a96d:	89 e5                	mov    %esp,%ebp
c010a96f:	83 ec 28             	sub    $0x28,%esp
  
    int i, iter=0;
c010a972:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    i=(int)arg;
c010a979:	8b 45 08             	mov    0x8(%ebp),%eax
c010a97c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cprintf("I am No.%d philosopher_condvar\n",i);
c010a97f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a982:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a986:	c7 04 24 5c 0f 11 c0 	movl   $0xc0110f5c,(%esp)
c010a98d:	e8 49 6e ff ff       	call   c01017db <cprintf>
    while(iter++<TIMES)
c010a992:	eb 62                	jmp    c010a9f6 <philosopher_using_condvar+0x8a>
    { /* iterate*/
        cprintf("Iter %d, No.%d philosopher_condvar is thinking\n",iter,i); /* thinking*/
c010a994:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a997:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a99b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a99e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a9a2:	c7 04 24 7c 0f 11 c0 	movl   $0xc0110f7c,(%esp)
c010a9a9:	e8 2d 6e ff ff       	call   c01017db <cprintf>
        do_sleep(SLEEP_TIME);
c010a9ae:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c010a9b5:	e8 29 2a 00 00       	call   c010d3e3 <do_sleep>
        phi_take_forks_condvar(i); 
c010a9ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a9bd:	89 04 24             	mov    %eax,(%esp)
c010a9c0:	e8 67 fe ff ff       	call   c010a82c <phi_take_forks_condvar>
        /* need two forks, maybe blocked */
        cprintf("Iter %d, No.%d philosopher_condvar is eating\n",iter,i); /* eating*/
c010a9c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a9c8:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a9cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a9cf:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a9d3:	c7 04 24 ac 0f 11 c0 	movl   $0xc0110fac,(%esp)
c010a9da:	e8 fc 6d ff ff       	call   c01017db <cprintf>
        do_sleep(SLEEP_TIME);
c010a9df:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c010a9e6:	e8 f8 29 00 00       	call   c010d3e3 <do_sleep>
        phi_put_forks_condvar(i); 
c010a9eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a9ee:	89 04 24             	mov    %eax,(%esp)
c010a9f1:	e8 d2 fe ff ff       	call   c010a8c8 <phi_put_forks_condvar>
int philosopher_using_condvar(void * arg) { /* arg is the No. of philosopher 0~N-1*/
  
    int i, iter=0;
    i=(int)arg;
    cprintf("I am No.%d philosopher_condvar\n",i);
    while(iter++<TIMES)
c010a9f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a9f9:	8d 50 01             	lea    0x1(%eax),%edx
c010a9fc:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010a9ff:	83 f8 03             	cmp    $0x3,%eax
c010aa02:	7e 90                	jle    c010a994 <philosopher_using_condvar+0x28>
        cprintf("Iter %d, No.%d philosopher_condvar is eating\n",iter,i); /* eating*/
        do_sleep(SLEEP_TIME);
        phi_put_forks_condvar(i); 
        /* return two forks back*/
    }
    cprintf("No.%d philosopher_condvar quit\n",i);
c010aa04:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aa07:	89 44 24 04          	mov    %eax,0x4(%esp)
c010aa0b:	c7 04 24 dc 0f 11 c0 	movl   $0xc0110fdc,(%esp)
c010aa12:	e8 c4 6d ff ff       	call   c01017db <cprintf>
    return 0;    
c010aa17:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010aa1c:	c9                   	leave  
c010aa1d:	c3                   	ret    

c010aa1e <check_sync>:

void check_sync(void){
c010aa1e:	55                   	push   %ebp
c010aa1f:	89 e5                	mov    %esp,%ebp
c010aa21:	83 ec 28             	sub    $0x28,%esp

    int i;

    //check semaphore
    sem_init(&mutex, 1);
c010aa24:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010aa2b:	00 
c010aa2c:	c7 04 24 08 86 1c c0 	movl   $0xc01c8608,(%esp)
c010aa33:	e8 11 04 00 00       	call   c010ae49 <sem_init>
    for(i=0;i<N;i++){
c010aa38:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010aa3f:	e9 94 00 00 00       	jmp    c010aad8 <check_sync+0xba>
        sem_init(&s[i], 0);
c010aa44:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010aa47:	89 d0                	mov    %edx,%eax
c010aa49:	01 c0                	add    %eax,%eax
c010aa4b:	01 d0                	add    %edx,%eax
c010aa4d:	c1 e0 02             	shl    $0x2,%eax
c010aa50:	05 80 86 1c c0       	add    $0xc01c8680,%eax
c010aa55:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010aa5c:	00 
c010aa5d:	89 04 24             	mov    %eax,(%esp)
c010aa60:	e8 e4 03 00 00       	call   c010ae49 <sem_init>
        int pid = kernel_thread(philosopher_using_semaphore, (void *)i, 0);
c010aa65:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa68:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010aa6f:	00 
c010aa70:	89 44 24 04          	mov    %eax,0x4(%esp)
c010aa74:	c7 04 24 aa a6 10 c0 	movl   $0xc010a6aa,(%esp)
c010aa7b:	e8 70 14 00 00       	call   c010bef0 <kernel_thread>
c010aa80:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pid <= 0) {
c010aa83:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010aa87:	7f 1c                	jg     c010aaa5 <check_sync+0x87>
            panic("create No.%d philosopher_using_semaphore failed.\n");
c010aa89:	c7 44 24 08 fc 0f 11 	movl   $0xc0110ffc,0x8(%esp)
c010aa90:	c0 
c010aa91:	c7 44 24 04 c0 00 00 	movl   $0xc0,0x4(%esp)
c010aa98:	00 
c010aa99:	c7 04 24 2e 10 11 c0 	movl   $0xc011102e,(%esp)
c010aaa0:	e8 b8 77 ff ff       	call   c010225d <__panic>
        }
        philosopher_proc_sema[i] = find_proc(pid);
c010aaa5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aaa8:	89 04 24             	mov    %eax,(%esp)
c010aaab:	e8 cc 13 00 00       	call   c010be7c <find_proc>
c010aab0:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010aab3:	89 04 95 54 86 1c c0 	mov    %eax,-0x3fe379ac(,%edx,4)
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
c010aaba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aabd:	8b 04 85 54 86 1c c0 	mov    -0x3fe379ac(,%eax,4),%eax
c010aac4:	c7 44 24 04 45 10 11 	movl   $0xc0111045,0x4(%esp)
c010aacb:	c0 
c010aacc:	89 04 24             	mov    %eax,(%esp)
c010aacf:	e8 8f 0f 00 00       	call   c010ba63 <set_proc_name>

    int i;

    //check semaphore
    sem_init(&mutex, 1);
    for(i=0;i<N;i++){
c010aad4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010aad8:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
c010aadc:	0f 8e 62 ff ff ff    	jle    c010aa44 <check_sync+0x26>
        philosopher_proc_sema[i] = find_proc(pid);
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
    }

    //check condition variable
    monitor_init(&mt, N);
c010aae2:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
c010aae9:	00 
c010aaea:	c7 04 24 20 86 1c c0 	movl   $0xc01c8620,(%esp)
c010aaf1:	e8 99 00 00 00       	call   c010ab8f <monitor_init>
    for(i=0;i<N;i++){
c010aaf6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010aafd:	e9 81 00 00 00       	jmp    c010ab83 <check_sync+0x165>
        state_condvar[i]=THINKING;
c010ab02:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ab05:	c7 04 85 40 86 1c c0 	movl   $0x0,-0x3fe379c0(,%eax,4)
c010ab0c:	00 00 00 00 
        int pid = kernel_thread(philosopher_using_condvar, (void *)i, 0);
c010ab10:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ab13:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010ab1a:	00 
c010ab1b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ab1f:	c7 04 24 6c a9 10 c0 	movl   $0xc010a96c,(%esp)
c010ab26:	e8 c5 13 00 00       	call   c010bef0 <kernel_thread>
c010ab2b:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pid <= 0) {
c010ab2e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010ab32:	7f 1c                	jg     c010ab50 <check_sync+0x132>
            panic("create No.%d philosopher_using_condvar failed.\n");
c010ab34:	c7 44 24 08 5c 10 11 	movl   $0xc011105c,0x8(%esp)
c010ab3b:	c0 
c010ab3c:	c7 44 24 04 cc 00 00 	movl   $0xcc,0x4(%esp)
c010ab43:	00 
c010ab44:	c7 04 24 2e 10 11 c0 	movl   $0xc011102e,(%esp)
c010ab4b:	e8 0d 77 ff ff       	call   c010225d <__panic>
        }
        philosopher_proc_condvar[i] = find_proc(pid);
c010ab50:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ab53:	89 04 24             	mov    %eax,(%esp)
c010ab56:	e8 21 13 00 00       	call   c010be7c <find_proc>
c010ab5b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010ab5e:	89 04 95 f4 85 1c c0 	mov    %eax,-0x3fe37a0c(,%edx,4)
        set_proc_name(philosopher_proc_condvar[i], "philosopher_condvar_proc");
c010ab65:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ab68:	8b 04 85 f4 85 1c c0 	mov    -0x3fe37a0c(,%eax,4),%eax
c010ab6f:	c7 44 24 04 8c 10 11 	movl   $0xc011108c,0x4(%esp)
c010ab76:	c0 
c010ab77:	89 04 24             	mov    %eax,(%esp)
c010ab7a:	e8 e4 0e 00 00       	call   c010ba63 <set_proc_name>
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
    }

    //check condition variable
    monitor_init(&mt, N);
    for(i=0;i<N;i++){
c010ab7f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010ab83:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
c010ab87:	0f 8e 75 ff ff ff    	jle    c010ab02 <check_sync+0xe4>
            panic("create No.%d philosopher_using_condvar failed.\n");
        }
        philosopher_proc_condvar[i] = find_proc(pid);
        set_proc_name(philosopher_proc_condvar[i], "philosopher_condvar_proc");
    }
}
c010ab8d:	c9                   	leave  
c010ab8e:	c3                   	ret    

c010ab8f <monitor_init>:
#include <assert.h>


// Initialize monitor.
void     
monitor_init (monitor_t * mtp, size_t num_cv) {
c010ab8f:	55                   	push   %ebp
c010ab90:	89 e5                	mov    %esp,%ebp
c010ab92:	83 ec 28             	sub    $0x28,%esp
    int i;
    assert(num_cv>0);
c010ab95:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010ab99:	75 24                	jne    c010abbf <monitor_init+0x30>
c010ab9b:	c7 44 24 0c a8 10 11 	movl   $0xc01110a8,0xc(%esp)
c010aba2:	c0 
c010aba3:	c7 44 24 08 b1 10 11 	movl   $0xc01110b1,0x8(%esp)
c010abaa:	c0 
c010abab:	c7 44 24 04 0b 00 00 	movl   $0xb,0x4(%esp)
c010abb2:	00 
c010abb3:	c7 04 24 c6 10 11 c0 	movl   $0xc01110c6,(%esp)
c010abba:	e8 9e 76 ff ff       	call   c010225d <__panic>
    mtp->next_count = 0;
c010abbf:	8b 45 08             	mov    0x8(%ebp),%eax
c010abc2:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    mtp->cv = NULL;
c010abc9:	8b 45 08             	mov    0x8(%ebp),%eax
c010abcc:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    sem_init(&(mtp->mutex), 1); //unlocked
c010abd3:	8b 45 08             	mov    0x8(%ebp),%eax
c010abd6:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010abdd:	00 
c010abde:	89 04 24             	mov    %eax,(%esp)
c010abe1:	e8 63 02 00 00       	call   c010ae49 <sem_init>
    sem_init(&(mtp->next), 0);
c010abe6:	8b 45 08             	mov    0x8(%ebp),%eax
c010abe9:	83 c0 0c             	add    $0xc,%eax
c010abec:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010abf3:	00 
c010abf4:	89 04 24             	mov    %eax,(%esp)
c010abf7:	e8 4d 02 00 00       	call   c010ae49 <sem_init>
    mtp->cv =(condvar_t *) kmalloc(sizeof(condvar_t)*num_cv);
c010abfc:	8b 55 0c             	mov    0xc(%ebp),%edx
c010abff:	89 d0                	mov    %edx,%eax
c010ac01:	c1 e0 02             	shl    $0x2,%eax
c010ac04:	01 d0                	add    %edx,%eax
c010ac06:	c1 e0 02             	shl    $0x2,%eax
c010ac09:	89 04 24             	mov    %eax,(%esp)
c010ac0c:	e8 bb b4 ff ff       	call   c01060cc <kmalloc>
c010ac11:	8b 55 08             	mov    0x8(%ebp),%edx
c010ac14:	89 42 1c             	mov    %eax,0x1c(%edx)
    assert(mtp->cv!=NULL);
c010ac17:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac1a:	8b 40 1c             	mov    0x1c(%eax),%eax
c010ac1d:	85 c0                	test   %eax,%eax
c010ac1f:	75 24                	jne    c010ac45 <monitor_init+0xb6>
c010ac21:	c7 44 24 0c da 10 11 	movl   $0xc01110da,0xc(%esp)
c010ac28:	c0 
c010ac29:	c7 44 24 08 b1 10 11 	movl   $0xc01110b1,0x8(%esp)
c010ac30:	c0 
c010ac31:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
c010ac38:	00 
c010ac39:	c7 04 24 c6 10 11 c0 	movl   $0xc01110c6,(%esp)
c010ac40:	e8 18 76 ff ff       	call   c010225d <__panic>
    for(i=0; i<num_cv; i++){
c010ac45:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010ac4c:	eb 61                	jmp    c010acaf <monitor_init+0x120>
        mtp->cv[i].count=0;
c010ac4e:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac51:	8b 48 1c             	mov    0x1c(%eax),%ecx
c010ac54:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010ac57:	89 d0                	mov    %edx,%eax
c010ac59:	c1 e0 02             	shl    $0x2,%eax
c010ac5c:	01 d0                	add    %edx,%eax
c010ac5e:	c1 e0 02             	shl    $0x2,%eax
c010ac61:	01 c8                	add    %ecx,%eax
c010ac63:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        sem_init(&(mtp->cv[i].sem),0);
c010ac6a:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac6d:	8b 48 1c             	mov    0x1c(%eax),%ecx
c010ac70:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010ac73:	89 d0                	mov    %edx,%eax
c010ac75:	c1 e0 02             	shl    $0x2,%eax
c010ac78:	01 d0                	add    %edx,%eax
c010ac7a:	c1 e0 02             	shl    $0x2,%eax
c010ac7d:	01 c8                	add    %ecx,%eax
c010ac7f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010ac86:	00 
c010ac87:	89 04 24             	mov    %eax,(%esp)
c010ac8a:	e8 ba 01 00 00       	call   c010ae49 <sem_init>
        mtp->cv[i].owner=mtp;
c010ac8f:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac92:	8b 48 1c             	mov    0x1c(%eax),%ecx
c010ac95:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010ac98:	89 d0                	mov    %edx,%eax
c010ac9a:	c1 e0 02             	shl    $0x2,%eax
c010ac9d:	01 d0                	add    %edx,%eax
c010ac9f:	c1 e0 02             	shl    $0x2,%eax
c010aca2:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c010aca5:	8b 45 08             	mov    0x8(%ebp),%eax
c010aca8:	89 42 10             	mov    %eax,0x10(%edx)
    mtp->cv = NULL;
    sem_init(&(mtp->mutex), 1); //unlocked
    sem_init(&(mtp->next), 0);
    mtp->cv =(condvar_t *) kmalloc(sizeof(condvar_t)*num_cv);
    assert(mtp->cv!=NULL);
    for(i=0; i<num_cv; i++){
c010acab:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010acaf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010acb2:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010acb5:	72 97                	jb     c010ac4e <monitor_init+0xbf>
        mtp->cv[i].count=0;
        sem_init(&(mtp->cv[i].sem),0);
        mtp->cv[i].owner=mtp;
    }
}
c010acb7:	c9                   	leave  
c010acb8:	c3                   	ret    

c010acb9 <cond_signal>:

// Unlock one of threads waiting on the condition variable. 
void 
cond_signal (condvar_t *cvp) {
c010acb9:	55                   	push   %ebp
c010acba:	89 e5                	mov    %esp,%ebp
c010acbc:	83 ec 18             	sub    $0x18,%esp
   //LAB7 EXERCISE1: YOUR CODE
   cprintf("cond_signal begin: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);  
c010acbf:	8b 45 08             	mov    0x8(%ebp),%eax
c010acc2:	8b 40 10             	mov    0x10(%eax),%eax
c010acc5:	8b 50 18             	mov    0x18(%eax),%edx
c010acc8:	8b 45 08             	mov    0x8(%ebp),%eax
c010accb:	8b 40 0c             	mov    0xc(%eax),%eax
c010acce:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010acd2:	89 44 24 08          	mov    %eax,0x8(%esp)
c010acd6:	8b 45 08             	mov    0x8(%ebp),%eax
c010acd9:	89 44 24 04          	mov    %eax,0x4(%esp)
c010acdd:	c7 04 24 e8 10 11 c0 	movl   $0xc01110e8,(%esp)
c010ace4:	e8 f2 6a ff ff       	call   c01017db <cprintf>
   *             wait(mt.next);
   *             mt.next_count--;
   *          }
   *       }
   */
     if(cvp->count>0) {
c010ace9:	8b 45 08             	mov    0x8(%ebp),%eax
c010acec:	8b 40 0c             	mov    0xc(%eax),%eax
c010acef:	85 c0                	test   %eax,%eax
c010acf1:	7e 3a                	jle    c010ad2d <cond_signal+0x74>
        cvp->owner->next_count ++;
c010acf3:	8b 45 08             	mov    0x8(%ebp),%eax
c010acf6:	8b 40 10             	mov    0x10(%eax),%eax
c010acf9:	8b 50 18             	mov    0x18(%eax),%edx
c010acfc:	83 c2 01             	add    $0x1,%edx
c010acff:	89 50 18             	mov    %edx,0x18(%eax)
        up(&(cvp->sem));
c010ad02:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad05:	89 04 24             	mov    %eax,(%esp)
c010ad08:	e8 af 02 00 00       	call   c010afbc <up>
        down(&(cvp->owner->next));
c010ad0d:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad10:	8b 40 10             	mov    0x10(%eax),%eax
c010ad13:	83 c0 0c             	add    $0xc,%eax
c010ad16:	89 04 24             	mov    %eax,(%esp)
c010ad19:	e8 b9 02 00 00       	call   c010afd7 <down>
        cvp->owner->next_count --;
c010ad1e:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad21:	8b 40 10             	mov    0x10(%eax),%eax
c010ad24:	8b 50 18             	mov    0x18(%eax),%edx
c010ad27:	83 ea 01             	sub    $0x1,%edx
c010ad2a:	89 50 18             	mov    %edx,0x18(%eax)
      }
   cprintf("cond_signal end: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c010ad2d:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad30:	8b 40 10             	mov    0x10(%eax),%eax
c010ad33:	8b 50 18             	mov    0x18(%eax),%edx
c010ad36:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad39:	8b 40 0c             	mov    0xc(%eax),%eax
c010ad3c:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010ad40:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ad44:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad47:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ad4b:	c7 04 24 30 11 11 c0 	movl   $0xc0111130,(%esp)
c010ad52:	e8 84 6a ff ff       	call   c01017db <cprintf>
}
c010ad57:	c9                   	leave  
c010ad58:	c3                   	ret    

c010ad59 <cond_wait>:

// Suspend calling thread on a condition variable waiting for condition Atomically unlocks 
// mutex and suspends calling thread on conditional variable after waking up locks mutex. Notice: mp is mutex semaphore for monitor's procedures
void
cond_wait (condvar_t *cvp) {
c010ad59:	55                   	push   %ebp
c010ad5a:	89 e5                	mov    %esp,%ebp
c010ad5c:	83 ec 18             	sub    $0x18,%esp
    //LAB7 EXERCISE1: YOUR CODE
    cprintf("cond_wait begin:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c010ad5f:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad62:	8b 40 10             	mov    0x10(%eax),%eax
c010ad65:	8b 50 18             	mov    0x18(%eax),%edx
c010ad68:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad6b:	8b 40 0c             	mov    0xc(%eax),%eax
c010ad6e:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010ad72:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ad76:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad79:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ad7d:	c7 04 24 74 11 11 c0 	movl   $0xc0111174,(%esp)
c010ad84:	e8 52 6a ff ff       	call   c01017db <cprintf>
    *         else
    *            signal(mt.mutex);
    *         wait(cv.sem);
    *         cv.count --;
    */
      cvp->count++;
c010ad89:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad8c:	8b 40 0c             	mov    0xc(%eax),%eax
c010ad8f:	8d 50 01             	lea    0x1(%eax),%edx
c010ad92:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad95:	89 50 0c             	mov    %edx,0xc(%eax)
      if(cvp->owner->next_count > 0)
c010ad98:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad9b:	8b 40 10             	mov    0x10(%eax),%eax
c010ad9e:	8b 40 18             	mov    0x18(%eax),%eax
c010ada1:	85 c0                	test   %eax,%eax
c010ada3:	7e 13                	jle    c010adb8 <cond_wait+0x5f>
         up(&(cvp->owner->next));
c010ada5:	8b 45 08             	mov    0x8(%ebp),%eax
c010ada8:	8b 40 10             	mov    0x10(%eax),%eax
c010adab:	83 c0 0c             	add    $0xc,%eax
c010adae:	89 04 24             	mov    %eax,(%esp)
c010adb1:	e8 06 02 00 00       	call   c010afbc <up>
c010adb6:	eb 0e                	jmp    c010adc6 <cond_wait+0x6d>
      else
         up(&(cvp->owner->mutex));
c010adb8:	8b 45 08             	mov    0x8(%ebp),%eax
c010adbb:	8b 40 10             	mov    0x10(%eax),%eax
c010adbe:	89 04 24             	mov    %eax,(%esp)
c010adc1:	e8 f6 01 00 00       	call   c010afbc <up>
      down(&(cvp->sem));
c010adc6:	8b 45 08             	mov    0x8(%ebp),%eax
c010adc9:	89 04 24             	mov    %eax,(%esp)
c010adcc:	e8 06 02 00 00       	call   c010afd7 <down>
      cvp->count --;
c010add1:	8b 45 08             	mov    0x8(%ebp),%eax
c010add4:	8b 40 0c             	mov    0xc(%eax),%eax
c010add7:	8d 50 ff             	lea    -0x1(%eax),%edx
c010adda:	8b 45 08             	mov    0x8(%ebp),%eax
c010addd:	89 50 0c             	mov    %edx,0xc(%eax)
    cprintf("cond_wait end:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c010ade0:	8b 45 08             	mov    0x8(%ebp),%eax
c010ade3:	8b 40 10             	mov    0x10(%eax),%eax
c010ade6:	8b 50 18             	mov    0x18(%eax),%edx
c010ade9:	8b 45 08             	mov    0x8(%ebp),%eax
c010adec:	8b 40 0c             	mov    0xc(%eax),%eax
c010adef:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010adf3:	89 44 24 08          	mov    %eax,0x8(%esp)
c010adf7:	8b 45 08             	mov    0x8(%ebp),%eax
c010adfa:	89 44 24 04          	mov    %eax,0x4(%esp)
c010adfe:	c7 04 24 b8 11 11 c0 	movl   $0xc01111b8,(%esp)
c010ae05:	e8 d1 69 ff ff       	call   c01017db <cprintf>
}
c010ae0a:	c9                   	leave  
c010ae0b:	c3                   	ret    

c010ae0c <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010ae0c:	55                   	push   %ebp
c010ae0d:	89 e5                	mov    %esp,%ebp
c010ae0f:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010ae12:	9c                   	pushf  
c010ae13:	58                   	pop    %eax
c010ae14:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010ae17:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010ae1a:	25 00 02 00 00       	and    $0x200,%eax
c010ae1f:	85 c0                	test   %eax,%eax
c010ae21:	74 0c                	je     c010ae2f <__intr_save+0x23>
        intr_disable();
c010ae23:	e8 8d 86 ff ff       	call   c01034b5 <intr_disable>
        return 1;
c010ae28:	b8 01 00 00 00       	mov    $0x1,%eax
c010ae2d:	eb 05                	jmp    c010ae34 <__intr_save+0x28>
    }
    return 0;
c010ae2f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ae34:	c9                   	leave  
c010ae35:	c3                   	ret    

c010ae36 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010ae36:	55                   	push   %ebp
c010ae37:	89 e5                	mov    %esp,%ebp
c010ae39:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010ae3c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010ae40:	74 05                	je     c010ae47 <__intr_restore+0x11>
        intr_enable();
c010ae42:	e8 68 86 ff ff       	call   c01034af <intr_enable>
    }
}
c010ae47:	c9                   	leave  
c010ae48:	c3                   	ret    

c010ae49 <sem_init>:
#include <proc.h>
#include <sync.h>
#include <assert.h>

void
sem_init(semaphore_t *sem, int value) {
c010ae49:	55                   	push   %ebp
c010ae4a:	89 e5                	mov    %esp,%ebp
c010ae4c:	83 ec 18             	sub    $0x18,%esp
    sem->value = value;
c010ae4f:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae52:	8b 55 0c             	mov    0xc(%ebp),%edx
c010ae55:	89 10                	mov    %edx,(%eax)
    wait_queue_init(&(sem->wait_queue));
c010ae57:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae5a:	83 c0 04             	add    $0x4,%eax
c010ae5d:	89 04 24             	mov    %eax,(%esp)
c010ae60:	e8 33 02 00 00       	call   c010b098 <wait_queue_init>
}
c010ae65:	c9                   	leave  
c010ae66:	c3                   	ret    

c010ae67 <__up>:

static __noinline void __up(semaphore_t *sem, uint32_t wait_state) {
c010ae67:	55                   	push   %ebp
c010ae68:	89 e5                	mov    %esp,%ebp
c010ae6a:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010ae6d:	e8 9a ff ff ff       	call   c010ae0c <__intr_save>
c010ae72:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        wait_t *wait;
        if ((wait = wait_queue_first(&(sem->wait_queue))) == NULL) {
c010ae75:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae78:	83 c0 04             	add    $0x4,%eax
c010ae7b:	89 04 24             	mov    %eax,(%esp)
c010ae7e:	e8 69 04 00 00       	call   c010b2ec <wait_queue_first>
c010ae83:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ae86:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ae8a:	75 0f                	jne    c010ae9b <__up+0x34>
            sem->value ++;
c010ae8c:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae8f:	8b 00                	mov    (%eax),%eax
c010ae91:	8d 50 01             	lea    0x1(%eax),%edx
c010ae94:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae97:	89 10                	mov    %edx,(%eax)
c010ae99:	eb 58                	jmp    c010aef3 <__up+0x8c>
        }
        else {
            assert(wait->proc->wait_state == wait_state);
c010ae9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ae9e:	8b 00                	mov    (%eax),%eax
c010aea0:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010aea6:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010aea9:	74 24                	je     c010aecf <__up+0x68>
c010aeab:	c7 44 24 0c fc 11 11 	movl   $0xc01111fc,0xc(%esp)
c010aeb2:	c0 
c010aeb3:	c7 44 24 08 21 12 11 	movl   $0xc0111221,0x8(%esp)
c010aeba:	c0 
c010aebb:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
c010aec2:	00 
c010aec3:	c7 04 24 36 12 11 c0 	movl   $0xc0111236,(%esp)
c010aeca:	e8 8e 73 ff ff       	call   c010225d <__panic>
            wakeup_wait(&(sem->wait_queue), wait, wait_state, 1);
c010aecf:	8b 45 08             	mov    0x8(%ebp),%eax
c010aed2:	8d 50 04             	lea    0x4(%eax),%edx
c010aed5:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010aedc:	00 
c010aedd:	8b 45 0c             	mov    0xc(%ebp),%eax
c010aee0:	89 44 24 08          	mov    %eax,0x8(%esp)
c010aee4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aee7:	89 44 24 04          	mov    %eax,0x4(%esp)
c010aeeb:	89 14 24             	mov    %edx,(%esp)
c010aeee:	e8 95 04 00 00       	call   c010b388 <wakeup_wait>
        }
    }
    local_intr_restore(intr_flag);
c010aef3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aef6:	89 04 24             	mov    %eax,(%esp)
c010aef9:	e8 38 ff ff ff       	call   c010ae36 <__intr_restore>
}
c010aefe:	c9                   	leave  
c010aeff:	c3                   	ret    

c010af00 <__down>:

static __noinline uint32_t __down(semaphore_t *sem, uint32_t wait_state) {
c010af00:	55                   	push   %ebp
c010af01:	89 e5                	mov    %esp,%ebp
c010af03:	83 ec 38             	sub    $0x38,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010af06:	e8 01 ff ff ff       	call   c010ae0c <__intr_save>
c010af0b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (sem->value > 0) {
c010af0e:	8b 45 08             	mov    0x8(%ebp),%eax
c010af11:	8b 00                	mov    (%eax),%eax
c010af13:	85 c0                	test   %eax,%eax
c010af15:	7e 22                	jle    c010af39 <__down+0x39>
        sem->value --;
c010af17:	8b 45 08             	mov    0x8(%ebp),%eax
c010af1a:	8b 00                	mov    (%eax),%eax
c010af1c:	8d 50 ff             	lea    -0x1(%eax),%edx
c010af1f:	8b 45 08             	mov    0x8(%ebp),%eax
c010af22:	89 10                	mov    %edx,(%eax)
        local_intr_restore(intr_flag);
c010af24:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010af27:	89 04 24             	mov    %eax,(%esp)
c010af2a:	e8 07 ff ff ff       	call   c010ae36 <__intr_restore>
        return 0;
c010af2f:	b8 00 00 00 00       	mov    $0x0,%eax
c010af34:	e9 81 00 00 00       	jmp    c010afba <__down+0xba>
    }
    wait_t __wait, *wait = &__wait;
c010af39:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010af3c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    wait_current_set(&(sem->wait_queue), wait, wait_state);
c010af3f:	8b 45 08             	mov    0x8(%ebp),%eax
c010af42:	8d 50 04             	lea    0x4(%eax),%edx
c010af45:	8b 45 0c             	mov    0xc(%ebp),%eax
c010af48:	89 44 24 08          	mov    %eax,0x8(%esp)
c010af4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010af4f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010af53:	89 14 24             	mov    %edx,(%esp)
c010af56:	e8 34 05 00 00       	call   c010b48f <wait_current_set>
    local_intr_restore(intr_flag);
c010af5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010af5e:	89 04 24             	mov    %eax,(%esp)
c010af61:	e8 d0 fe ff ff       	call   c010ae36 <__intr_restore>

    schedule();
c010af66:	e8 88 2a 00 00       	call   c010d9f3 <schedule>

    local_intr_save(intr_flag);
c010af6b:	e8 9c fe ff ff       	call   c010ae0c <__intr_save>
c010af70:	89 45 f4             	mov    %eax,-0xc(%ebp)
    wait_current_del(&(sem->wait_queue), wait);
c010af73:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010af76:	89 04 24             	mov    %eax,(%esp)
c010af79:	e8 e2 03 00 00       	call   c010b360 <wait_in_queue>
c010af7e:	85 c0                	test   %eax,%eax
c010af80:	74 15                	je     c010af97 <__down+0x97>
c010af82:	8b 45 08             	mov    0x8(%ebp),%eax
c010af85:	8d 50 04             	lea    0x4(%eax),%edx
c010af88:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010af8b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010af8f:	89 14 24             	mov    %edx,(%esp)
c010af92:	e8 c4 01 00 00       	call   c010b15b <wait_queue_del>
    local_intr_restore(intr_flag);
c010af97:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010af9a:	89 04 24             	mov    %eax,(%esp)
c010af9d:	e8 94 fe ff ff       	call   c010ae36 <__intr_restore>

    if (wait->wakeup_flags != wait_state) {
c010afa2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010afa5:	8b 40 04             	mov    0x4(%eax),%eax
c010afa8:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010afab:	74 08                	je     c010afb5 <__down+0xb5>
        return wait->wakeup_flags;
c010afad:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010afb0:	8b 40 04             	mov    0x4(%eax),%eax
c010afb3:	eb 05                	jmp    c010afba <__down+0xba>
    }
    return 0;
c010afb5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010afba:	c9                   	leave  
c010afbb:	c3                   	ret    

c010afbc <up>:

void
up(semaphore_t *sem) {
c010afbc:	55                   	push   %ebp
c010afbd:	89 e5                	mov    %esp,%ebp
c010afbf:	83 ec 18             	sub    $0x18,%esp
    __up(sem, WT_KSEM);
c010afc2:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
c010afc9:	00 
c010afca:	8b 45 08             	mov    0x8(%ebp),%eax
c010afcd:	89 04 24             	mov    %eax,(%esp)
c010afd0:	e8 92 fe ff ff       	call   c010ae67 <__up>
}
c010afd5:	c9                   	leave  
c010afd6:	c3                   	ret    

c010afd7 <down>:

void
down(semaphore_t *sem) {
c010afd7:	55                   	push   %ebp
c010afd8:	89 e5                	mov    %esp,%ebp
c010afda:	83 ec 28             	sub    $0x28,%esp
    uint32_t flags = __down(sem, WT_KSEM);
c010afdd:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
c010afe4:	00 
c010afe5:	8b 45 08             	mov    0x8(%ebp),%eax
c010afe8:	89 04 24             	mov    %eax,(%esp)
c010afeb:	e8 10 ff ff ff       	call   c010af00 <__down>
c010aff0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(flags == 0);
c010aff3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010aff7:	74 24                	je     c010b01d <down+0x46>
c010aff9:	c7 44 24 0c 46 12 11 	movl   $0xc0111246,0xc(%esp)
c010b000:	c0 
c010b001:	c7 44 24 08 21 12 11 	movl   $0xc0111221,0x8(%esp)
c010b008:	c0 
c010b009:	c7 44 24 04 40 00 00 	movl   $0x40,0x4(%esp)
c010b010:	00 
c010b011:	c7 04 24 36 12 11 c0 	movl   $0xc0111236,(%esp)
c010b018:	e8 40 72 ff ff       	call   c010225d <__panic>
}
c010b01d:	c9                   	leave  
c010b01e:	c3                   	ret    

c010b01f <try_down>:

bool
try_down(semaphore_t *sem) {
c010b01f:	55                   	push   %ebp
c010b020:	89 e5                	mov    %esp,%ebp
c010b022:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag, ret = 0;
c010b025:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    local_intr_save(intr_flag);
c010b02c:	e8 db fd ff ff       	call   c010ae0c <__intr_save>
c010b031:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (sem->value > 0) {
c010b034:	8b 45 08             	mov    0x8(%ebp),%eax
c010b037:	8b 00                	mov    (%eax),%eax
c010b039:	85 c0                	test   %eax,%eax
c010b03b:	7e 14                	jle    c010b051 <try_down+0x32>
        sem->value --, ret = 1;
c010b03d:	8b 45 08             	mov    0x8(%ebp),%eax
c010b040:	8b 00                	mov    (%eax),%eax
c010b042:	8d 50 ff             	lea    -0x1(%eax),%edx
c010b045:	8b 45 08             	mov    0x8(%ebp),%eax
c010b048:	89 10                	mov    %edx,(%eax)
c010b04a:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }
    local_intr_restore(intr_flag);
c010b051:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b054:	89 04 24             	mov    %eax,(%esp)
c010b057:	e8 da fd ff ff       	call   c010ae36 <__intr_restore>
    return ret;
c010b05c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b05f:	c9                   	leave  
c010b060:	c3                   	ret    

c010b061 <wait_init>:
#include <sync.h>
#include <wait.h>
#include <proc.h>

void
wait_init(wait_t *wait, struct proc_struct *proc) {
c010b061:	55                   	push   %ebp
c010b062:	89 e5                	mov    %esp,%ebp
c010b064:	83 ec 10             	sub    $0x10,%esp
    wait->proc = proc;
c010b067:	8b 45 08             	mov    0x8(%ebp),%eax
c010b06a:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b06d:	89 10                	mov    %edx,(%eax)
    wait->wakeup_flags = WT_INTERRUPTED;
c010b06f:	8b 45 08             	mov    0x8(%ebp),%eax
c010b072:	c7 40 04 00 00 00 80 	movl   $0x80000000,0x4(%eax)
    list_init(&(wait->wait_link));
c010b079:	8b 45 08             	mov    0x8(%ebp),%eax
c010b07c:	83 c0 0c             	add    $0xc,%eax
c010b07f:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010b082:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b085:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010b088:	89 50 04             	mov    %edx,0x4(%eax)
c010b08b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b08e:	8b 50 04             	mov    0x4(%eax),%edx
c010b091:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b094:	89 10                	mov    %edx,(%eax)
}
c010b096:	c9                   	leave  
c010b097:	c3                   	ret    

c010b098 <wait_queue_init>:

void
wait_queue_init(wait_queue_t *queue) {
c010b098:	55                   	push   %ebp
c010b099:	89 e5                	mov    %esp,%ebp
c010b09b:	83 ec 10             	sub    $0x10,%esp
    list_init(&(queue->wait_head));
c010b09e:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0a1:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010b0a4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b0a7:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010b0aa:	89 50 04             	mov    %edx,0x4(%eax)
c010b0ad:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b0b0:	8b 50 04             	mov    0x4(%eax),%edx
c010b0b3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b0b6:	89 10                	mov    %edx,(%eax)
}
c010b0b8:	c9                   	leave  
c010b0b9:	c3                   	ret    

c010b0ba <wait_queue_add>:

void
wait_queue_add(wait_queue_t *queue, wait_t *wait) {
c010b0ba:	55                   	push   %ebp
c010b0bb:	89 e5                	mov    %esp,%ebp
c010b0bd:	83 ec 38             	sub    $0x38,%esp
    assert(list_empty(&(wait->wait_link)) && wait->proc != NULL);
c010b0c0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b0c3:	83 c0 0c             	add    $0xc,%eax
c010b0c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010b0c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b0cc:	8b 40 04             	mov    0x4(%eax),%eax
c010b0cf:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010b0d2:	0f 94 c0             	sete   %al
c010b0d5:	0f b6 c0             	movzbl %al,%eax
c010b0d8:	85 c0                	test   %eax,%eax
c010b0da:	74 09                	je     c010b0e5 <wait_queue_add+0x2b>
c010b0dc:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b0df:	8b 00                	mov    (%eax),%eax
c010b0e1:	85 c0                	test   %eax,%eax
c010b0e3:	75 24                	jne    c010b109 <wait_queue_add+0x4f>
c010b0e5:	c7 44 24 0c 54 12 11 	movl   $0xc0111254,0xc(%esp)
c010b0ec:	c0 
c010b0ed:	c7 44 24 08 89 12 11 	movl   $0xc0111289,0x8(%esp)
c010b0f4:	c0 
c010b0f5:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
c010b0fc:	00 
c010b0fd:	c7 04 24 9e 12 11 c0 	movl   $0xc011129e,(%esp)
c010b104:	e8 54 71 ff ff       	call   c010225d <__panic>
    wait->wait_queue = queue;
c010b109:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b10c:	8b 55 08             	mov    0x8(%ebp),%edx
c010b10f:	89 50 08             	mov    %edx,0x8(%eax)
    list_add_before(&(queue->wait_head), &(wait->wait_link));
c010b112:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b115:	8d 50 0c             	lea    0xc(%eax),%edx
c010b118:	8b 45 08             	mov    0x8(%ebp),%eax
c010b11b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b11e:	89 55 ec             	mov    %edx,-0x14(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c010b121:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b124:	8b 00                	mov    (%eax),%eax
c010b126:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b129:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010b12c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010b12f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b132:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010b135:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b138:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010b13b:	89 10                	mov    %edx,(%eax)
c010b13d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b140:	8b 10                	mov    (%eax),%edx
c010b142:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b145:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010b148:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b14b:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010b14e:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010b151:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b154:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b157:	89 10                	mov    %edx,(%eax)
}
c010b159:	c9                   	leave  
c010b15a:	c3                   	ret    

c010b15b <wait_queue_del>:

void
wait_queue_del(wait_queue_t *queue, wait_t *wait) {
c010b15b:	55                   	push   %ebp
c010b15c:	89 e5                	mov    %esp,%ebp
c010b15e:	83 ec 38             	sub    $0x38,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c010b161:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b164:	83 c0 0c             	add    $0xc,%eax
c010b167:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010b16a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b16d:	8b 40 04             	mov    0x4(%eax),%eax
c010b170:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010b173:	0f 94 c0             	sete   %al
c010b176:	0f b6 c0             	movzbl %al,%eax
c010b179:	85 c0                	test   %eax,%eax
c010b17b:	75 0b                	jne    c010b188 <wait_queue_del+0x2d>
c010b17d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b180:	8b 40 08             	mov    0x8(%eax),%eax
c010b183:	3b 45 08             	cmp    0x8(%ebp),%eax
c010b186:	74 24                	je     c010b1ac <wait_queue_del+0x51>
c010b188:	c7 44 24 0c b0 12 11 	movl   $0xc01112b0,0xc(%esp)
c010b18f:	c0 
c010b190:	c7 44 24 08 89 12 11 	movl   $0xc0111289,0x8(%esp)
c010b197:	c0 
c010b198:	c7 44 24 04 1c 00 00 	movl   $0x1c,0x4(%esp)
c010b19f:	00 
c010b1a0:	c7 04 24 9e 12 11 c0 	movl   $0xc011129e,(%esp)
c010b1a7:	e8 b1 70 ff ff       	call   c010225d <__panic>
    list_del_init(&(wait->wait_link));
c010b1ac:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b1af:	83 c0 0c             	add    $0xc,%eax
c010b1b2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b1b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b1b8:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010b1bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b1be:	8b 40 04             	mov    0x4(%eax),%eax
c010b1c1:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b1c4:	8b 12                	mov    (%edx),%edx
c010b1c6:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010b1c9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010b1cc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b1cf:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b1d2:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010b1d5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b1d8:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010b1db:	89 10                	mov    %edx,(%eax)
c010b1dd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b1e0:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010b1e3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b1e6:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010b1e9:	89 50 04             	mov    %edx,0x4(%eax)
c010b1ec:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b1ef:	8b 50 04             	mov    0x4(%eax),%edx
c010b1f2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b1f5:	89 10                	mov    %edx,(%eax)
}
c010b1f7:	c9                   	leave  
c010b1f8:	c3                   	ret    

c010b1f9 <wait_queue_next>:

wait_t *
wait_queue_next(wait_queue_t *queue, wait_t *wait) {
c010b1f9:	55                   	push   %ebp
c010b1fa:	89 e5                	mov    %esp,%ebp
c010b1fc:	83 ec 28             	sub    $0x28,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c010b1ff:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b202:	83 c0 0c             	add    $0xc,%eax
c010b205:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010b208:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b20b:	8b 40 04             	mov    0x4(%eax),%eax
c010b20e:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010b211:	0f 94 c0             	sete   %al
c010b214:	0f b6 c0             	movzbl %al,%eax
c010b217:	85 c0                	test   %eax,%eax
c010b219:	75 0b                	jne    c010b226 <wait_queue_next+0x2d>
c010b21b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b21e:	8b 40 08             	mov    0x8(%eax),%eax
c010b221:	3b 45 08             	cmp    0x8(%ebp),%eax
c010b224:	74 24                	je     c010b24a <wait_queue_next+0x51>
c010b226:	c7 44 24 0c b0 12 11 	movl   $0xc01112b0,0xc(%esp)
c010b22d:	c0 
c010b22e:	c7 44 24 08 89 12 11 	movl   $0xc0111289,0x8(%esp)
c010b235:	c0 
c010b236:	c7 44 24 04 22 00 00 	movl   $0x22,0x4(%esp)
c010b23d:	00 
c010b23e:	c7 04 24 9e 12 11 c0 	movl   $0xc011129e,(%esp)
c010b245:	e8 13 70 ff ff       	call   c010225d <__panic>
    list_entry_t *le = list_next(&(wait->wait_link));
c010b24a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b24d:	83 c0 0c             	add    $0xc,%eax
c010b250:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010b253:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b256:	8b 40 04             	mov    0x4(%eax),%eax
c010b259:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (le != &(queue->wait_head)) {
c010b25c:	8b 45 08             	mov    0x8(%ebp),%eax
c010b25f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010b262:	74 08                	je     c010b26c <wait_queue_next+0x73>
        return le2wait(le, wait_link);
c010b264:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b267:	83 e8 0c             	sub    $0xc,%eax
c010b26a:	eb 05                	jmp    c010b271 <wait_queue_next+0x78>
    }
    return NULL;
c010b26c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b271:	c9                   	leave  
c010b272:	c3                   	ret    

c010b273 <wait_queue_prev>:

wait_t *
wait_queue_prev(wait_queue_t *queue, wait_t *wait) {
c010b273:	55                   	push   %ebp
c010b274:	89 e5                	mov    %esp,%ebp
c010b276:	83 ec 28             	sub    $0x28,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c010b279:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b27c:	83 c0 0c             	add    $0xc,%eax
c010b27f:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010b282:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b285:	8b 40 04             	mov    0x4(%eax),%eax
c010b288:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010b28b:	0f 94 c0             	sete   %al
c010b28e:	0f b6 c0             	movzbl %al,%eax
c010b291:	85 c0                	test   %eax,%eax
c010b293:	75 0b                	jne    c010b2a0 <wait_queue_prev+0x2d>
c010b295:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b298:	8b 40 08             	mov    0x8(%eax),%eax
c010b29b:	3b 45 08             	cmp    0x8(%ebp),%eax
c010b29e:	74 24                	je     c010b2c4 <wait_queue_prev+0x51>
c010b2a0:	c7 44 24 0c b0 12 11 	movl   $0xc01112b0,0xc(%esp)
c010b2a7:	c0 
c010b2a8:	c7 44 24 08 89 12 11 	movl   $0xc0111289,0x8(%esp)
c010b2af:	c0 
c010b2b0:	c7 44 24 04 2c 00 00 	movl   $0x2c,0x4(%esp)
c010b2b7:	00 
c010b2b8:	c7 04 24 9e 12 11 c0 	movl   $0xc011129e,(%esp)
c010b2bf:	e8 99 6f ff ff       	call   c010225d <__panic>
    list_entry_t *le = list_prev(&(wait->wait_link));
c010b2c4:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b2c7:	83 c0 0c             	add    $0xc,%eax
c010b2ca:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010b2cd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b2d0:	8b 00                	mov    (%eax),%eax
c010b2d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (le != &(queue->wait_head)) {
c010b2d5:	8b 45 08             	mov    0x8(%ebp),%eax
c010b2d8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010b2db:	74 08                	je     c010b2e5 <wait_queue_prev+0x72>
        return le2wait(le, wait_link);
c010b2dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b2e0:	83 e8 0c             	sub    $0xc,%eax
c010b2e3:	eb 05                	jmp    c010b2ea <wait_queue_prev+0x77>
    }
    return NULL;
c010b2e5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b2ea:	c9                   	leave  
c010b2eb:	c3                   	ret    

c010b2ec <wait_queue_first>:

wait_t *
wait_queue_first(wait_queue_t *queue) {
c010b2ec:	55                   	push   %ebp
c010b2ed:	89 e5                	mov    %esp,%ebp
c010b2ef:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_next(&(queue->wait_head));
c010b2f2:	8b 45 08             	mov    0x8(%ebp),%eax
c010b2f5:	89 45 f8             	mov    %eax,-0x8(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010b2f8:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b2fb:	8b 40 04             	mov    0x4(%eax),%eax
c010b2fe:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(queue->wait_head)) {
c010b301:	8b 45 08             	mov    0x8(%ebp),%eax
c010b304:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010b307:	74 08                	je     c010b311 <wait_queue_first+0x25>
        return le2wait(le, wait_link);
c010b309:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b30c:	83 e8 0c             	sub    $0xc,%eax
c010b30f:	eb 05                	jmp    c010b316 <wait_queue_first+0x2a>
    }
    return NULL;
c010b311:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b316:	c9                   	leave  
c010b317:	c3                   	ret    

c010b318 <wait_queue_last>:

wait_t *
wait_queue_last(wait_queue_t *queue) {
c010b318:	55                   	push   %ebp
c010b319:	89 e5                	mov    %esp,%ebp
c010b31b:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_prev(&(queue->wait_head));
c010b31e:	8b 45 08             	mov    0x8(%ebp),%eax
c010b321:	89 45 f8             	mov    %eax,-0x8(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010b324:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b327:	8b 00                	mov    (%eax),%eax
c010b329:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(queue->wait_head)) {
c010b32c:	8b 45 08             	mov    0x8(%ebp),%eax
c010b32f:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010b332:	74 08                	je     c010b33c <wait_queue_last+0x24>
        return le2wait(le, wait_link);
c010b334:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b337:	83 e8 0c             	sub    $0xc,%eax
c010b33a:	eb 05                	jmp    c010b341 <wait_queue_last+0x29>
    }
    return NULL;
c010b33c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b341:	c9                   	leave  
c010b342:	c3                   	ret    

c010b343 <wait_queue_empty>:

bool
wait_queue_empty(wait_queue_t *queue) {
c010b343:	55                   	push   %ebp
c010b344:	89 e5                	mov    %esp,%ebp
c010b346:	83 ec 10             	sub    $0x10,%esp
    return list_empty(&(queue->wait_head));
c010b349:	8b 45 08             	mov    0x8(%ebp),%eax
c010b34c:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010b34f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b352:	8b 40 04             	mov    0x4(%eax),%eax
c010b355:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c010b358:	0f 94 c0             	sete   %al
c010b35b:	0f b6 c0             	movzbl %al,%eax
}
c010b35e:	c9                   	leave  
c010b35f:	c3                   	ret    

c010b360 <wait_in_queue>:

bool
wait_in_queue(wait_t *wait) {
c010b360:	55                   	push   %ebp
c010b361:	89 e5                	mov    %esp,%ebp
c010b363:	83 ec 10             	sub    $0x10,%esp
    return !list_empty(&(wait->wait_link));
c010b366:	8b 45 08             	mov    0x8(%ebp),%eax
c010b369:	83 c0 0c             	add    $0xc,%eax
c010b36c:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010b36f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b372:	8b 40 04             	mov    0x4(%eax),%eax
c010b375:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c010b378:	0f 94 c0             	sete   %al
c010b37b:	0f b6 c0             	movzbl %al,%eax
c010b37e:	85 c0                	test   %eax,%eax
c010b380:	0f 94 c0             	sete   %al
c010b383:	0f b6 c0             	movzbl %al,%eax
}
c010b386:	c9                   	leave  
c010b387:	c3                   	ret    

c010b388 <wakeup_wait>:

void
wakeup_wait(wait_queue_t *queue, wait_t *wait, uint32_t wakeup_flags, bool del) {
c010b388:	55                   	push   %ebp
c010b389:	89 e5                	mov    %esp,%ebp
c010b38b:	83 ec 18             	sub    $0x18,%esp
    if (del) {
c010b38e:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010b392:	74 12                	je     c010b3a6 <wakeup_wait+0x1e>
        wait_queue_del(queue, wait);
c010b394:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b397:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b39b:	8b 45 08             	mov    0x8(%ebp),%eax
c010b39e:	89 04 24             	mov    %eax,(%esp)
c010b3a1:	e8 b5 fd ff ff       	call   c010b15b <wait_queue_del>
    }
    wait->wakeup_flags = wakeup_flags;
c010b3a6:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b3a9:	8b 55 10             	mov    0x10(%ebp),%edx
c010b3ac:	89 50 04             	mov    %edx,0x4(%eax)
    wakeup_proc(wait->proc);
c010b3af:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b3b2:	8b 00                	mov    (%eax),%eax
c010b3b4:	89 04 24             	mov    %eax,(%esp)
c010b3b7:	e8 9b 25 00 00       	call   c010d957 <wakeup_proc>
}
c010b3bc:	c9                   	leave  
c010b3bd:	c3                   	ret    

c010b3be <wakeup_first>:

void
wakeup_first(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
c010b3be:	55                   	push   %ebp
c010b3bf:	89 e5                	mov    %esp,%ebp
c010b3c1:	83 ec 28             	sub    $0x28,%esp
    wait_t *wait;
    if ((wait = wait_queue_first(queue)) != NULL) {
c010b3c4:	8b 45 08             	mov    0x8(%ebp),%eax
c010b3c7:	89 04 24             	mov    %eax,(%esp)
c010b3ca:	e8 1d ff ff ff       	call   c010b2ec <wait_queue_first>
c010b3cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b3d2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b3d6:	74 20                	je     c010b3f8 <wakeup_first+0x3a>
        wakeup_wait(queue, wait, wakeup_flags, del);
c010b3d8:	8b 45 10             	mov    0x10(%ebp),%eax
c010b3db:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b3df:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b3e2:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b3e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b3e9:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b3ed:	8b 45 08             	mov    0x8(%ebp),%eax
c010b3f0:	89 04 24             	mov    %eax,(%esp)
c010b3f3:	e8 90 ff ff ff       	call   c010b388 <wakeup_wait>
    }
}
c010b3f8:	c9                   	leave  
c010b3f9:	c3                   	ret    

c010b3fa <wakeup_queue>:

void
wakeup_queue(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
c010b3fa:	55                   	push   %ebp
c010b3fb:	89 e5                	mov    %esp,%ebp
c010b3fd:	83 ec 28             	sub    $0x28,%esp
    wait_t *wait;
    if ((wait = wait_queue_first(queue)) != NULL) {
c010b400:	8b 45 08             	mov    0x8(%ebp),%eax
c010b403:	89 04 24             	mov    %eax,(%esp)
c010b406:	e8 e1 fe ff ff       	call   c010b2ec <wait_queue_first>
c010b40b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b40e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b412:	74 79                	je     c010b48d <wakeup_queue+0x93>
        if (del) {
c010b414:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b418:	74 37                	je     c010b451 <wakeup_queue+0x57>
            do {
                wakeup_wait(queue, wait, wakeup_flags, 1);
c010b41a:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010b421:	00 
c010b422:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b425:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b429:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b42c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b430:	8b 45 08             	mov    0x8(%ebp),%eax
c010b433:	89 04 24             	mov    %eax,(%esp)
c010b436:	e8 4d ff ff ff       	call   c010b388 <wakeup_wait>
            } while ((wait = wait_queue_first(queue)) != NULL);
c010b43b:	8b 45 08             	mov    0x8(%ebp),%eax
c010b43e:	89 04 24             	mov    %eax,(%esp)
c010b441:	e8 a6 fe ff ff       	call   c010b2ec <wait_queue_first>
c010b446:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b449:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b44d:	75 cb                	jne    c010b41a <wakeup_queue+0x20>
c010b44f:	eb 3c                	jmp    c010b48d <wakeup_queue+0x93>
        }
        else {
            do {
                wakeup_wait(queue, wait, wakeup_flags, 0);
c010b451:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010b458:	00 
c010b459:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b45c:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b460:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b463:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b467:	8b 45 08             	mov    0x8(%ebp),%eax
c010b46a:	89 04 24             	mov    %eax,(%esp)
c010b46d:	e8 16 ff ff ff       	call   c010b388 <wakeup_wait>
            } while ((wait = wait_queue_next(queue, wait)) != NULL);
c010b472:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b475:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b479:	8b 45 08             	mov    0x8(%ebp),%eax
c010b47c:	89 04 24             	mov    %eax,(%esp)
c010b47f:	e8 75 fd ff ff       	call   c010b1f9 <wait_queue_next>
c010b484:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b487:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b48b:	75 c4                	jne    c010b451 <wakeup_queue+0x57>
        }
    }
}
c010b48d:	c9                   	leave  
c010b48e:	c3                   	ret    

c010b48f <wait_current_set>:

void
wait_current_set(wait_queue_t *queue, wait_t *wait, uint32_t wait_state) {
c010b48f:	55                   	push   %ebp
c010b490:	89 e5                	mov    %esp,%ebp
c010b492:	83 ec 18             	sub    $0x18,%esp
    assert(current != NULL);
c010b495:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c010b49a:	85 c0                	test   %eax,%eax
c010b49c:	75 24                	jne    c010b4c2 <wait_current_set+0x33>
c010b49e:	c7 44 24 0c ed 12 11 	movl   $0xc01112ed,0xc(%esp)
c010b4a5:	c0 
c010b4a6:	c7 44 24 08 89 12 11 	movl   $0xc0111289,0x8(%esp)
c010b4ad:	c0 
c010b4ae:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
c010b4b5:	00 
c010b4b6:	c7 04 24 9e 12 11 c0 	movl   $0xc011129e,(%esp)
c010b4bd:	e8 9b 6d ff ff       	call   c010225d <__panic>
    wait_init(wait, current);
c010b4c2:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c010b4c7:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b4cb:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b4ce:	89 04 24             	mov    %eax,(%esp)
c010b4d1:	e8 8b fb ff ff       	call   c010b061 <wait_init>
    current->state = PROC_SLEEPING;
c010b4d6:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c010b4db:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    current->wait_state = wait_state;
c010b4e1:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c010b4e6:	8b 55 10             	mov    0x10(%ebp),%edx
c010b4e9:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
    wait_queue_add(queue, wait);
c010b4ef:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b4f2:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b4f6:	8b 45 08             	mov    0x8(%ebp),%eax
c010b4f9:	89 04 24             	mov    %eax,(%esp)
c010b4fc:	e8 b9 fb ff ff       	call   c010b0ba <wait_queue_add>
}
c010b501:	c9                   	leave  
c010b502:	c3                   	ret    

c010b503 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010b503:	55                   	push   %ebp
c010b504:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010b506:	8b 55 08             	mov    0x8(%ebp),%edx
c010b509:	a1 f0 84 1c c0       	mov    0xc01c84f0,%eax
c010b50e:	29 c2                	sub    %eax,%edx
c010b510:	89 d0                	mov    %edx,%eax
c010b512:	c1 f8 02             	sar    $0x2,%eax
c010b515:	69 c0 39 8e e3 38    	imul   $0x38e38e39,%eax,%eax
}
c010b51b:	5d                   	pop    %ebp
c010b51c:	c3                   	ret    

c010b51d <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010b51d:	55                   	push   %ebp
c010b51e:	89 e5                	mov    %esp,%ebp
c010b520:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c010b523:	8b 45 08             	mov    0x8(%ebp),%eax
c010b526:	89 04 24             	mov    %eax,(%esp)
c010b529:	e8 d5 ff ff ff       	call   c010b503 <page2ppn>
c010b52e:	c1 e0 0c             	shl    $0xc,%eax
}
c010b531:	c9                   	leave  
c010b532:	c3                   	ret    

c010b533 <page2kva>:
    }
    return &pages[PPN(pa)];
}

static inline void *
page2kva(struct Page *page) {
c010b533:	55                   	push   %ebp
c010b534:	89 e5                	mov    %esp,%ebp
c010b536:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c010b539:	8b 45 08             	mov    0x8(%ebp),%eax
c010b53c:	89 04 24             	mov    %eax,(%esp)
c010b53f:	e8 d9 ff ff ff       	call   c010b51d <page2pa>
c010b544:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b547:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b54a:	c1 e8 0c             	shr    $0xc,%eax
c010b54d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b550:	a1 a0 63 1c c0       	mov    0xc01c63a0,%eax
c010b555:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010b558:	72 23                	jb     c010b57d <page2kva+0x4a>
c010b55a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b55d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b561:	c7 44 24 08 00 13 11 	movl   $0xc0111300,0x8(%esp)
c010b568:	c0 
c010b569:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c010b570:	00 
c010b571:	c7 04 24 23 13 11 c0 	movl   $0xc0111323,(%esp)
c010b578:	e8 e0 6c ff ff       	call   c010225d <__panic>
c010b57d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b580:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010b585:	c9                   	leave  
c010b586:	c3                   	ret    

c010b587 <swapfs_init>:
#include <ide.h>
#include <pmm.h>
#include <assert.h>

void
swapfs_init(void) {
c010b587:	55                   	push   %ebp
c010b588:	89 e5                	mov    %esp,%ebp
c010b58a:	83 ec 18             	sub    $0x18,%esp
    static_assert((PGSIZE % SECTSIZE) == 0);
    if (!ide_device_valid(SWAP_DEV_NO)) {
c010b58d:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010b594:	e8 14 7a ff ff       	call   c0102fad <ide_device_valid>
c010b599:	85 c0                	test   %eax,%eax
c010b59b:	75 1c                	jne    c010b5b9 <swapfs_init+0x32>
        panic("swap fs isn't available.\n");
c010b59d:	c7 44 24 08 31 13 11 	movl   $0xc0111331,0x8(%esp)
c010b5a4:	c0 
c010b5a5:	c7 44 24 04 0d 00 00 	movl   $0xd,0x4(%esp)
c010b5ac:	00 
c010b5ad:	c7 04 24 4b 13 11 c0 	movl   $0xc011134b,(%esp)
c010b5b4:	e8 a4 6c ff ff       	call   c010225d <__panic>
    }
    max_swap_offset = ide_device_size(SWAP_DEV_NO) / (PGSIZE / SECTSIZE);
c010b5b9:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010b5c0:	e8 27 7a ff ff       	call   c0102fec <ide_device_size>
c010b5c5:	c1 e8 03             	shr    $0x3,%eax
c010b5c8:	a3 9c 85 1c c0       	mov    %eax,0xc01c859c
}
c010b5cd:	c9                   	leave  
c010b5ce:	c3                   	ret    

c010b5cf <swapfs_read>:

int
swapfs_read(swap_entry_t entry, struct Page *page) {
c010b5cf:	55                   	push   %ebp
c010b5d0:	89 e5                	mov    %esp,%ebp
c010b5d2:	83 ec 28             	sub    $0x28,%esp
    return ide_read_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c010b5d5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b5d8:	89 04 24             	mov    %eax,(%esp)
c010b5db:	e8 53 ff ff ff       	call   c010b533 <page2kva>
c010b5e0:	8b 55 08             	mov    0x8(%ebp),%edx
c010b5e3:	c1 ea 08             	shr    $0x8,%edx
c010b5e6:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010b5e9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b5ed:	74 0b                	je     c010b5fa <swapfs_read+0x2b>
c010b5ef:	8b 15 9c 85 1c c0    	mov    0xc01c859c,%edx
c010b5f5:	39 55 f4             	cmp    %edx,-0xc(%ebp)
c010b5f8:	72 23                	jb     c010b61d <swapfs_read+0x4e>
c010b5fa:	8b 45 08             	mov    0x8(%ebp),%eax
c010b5fd:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b601:	c7 44 24 08 5c 13 11 	movl   $0xc011135c,0x8(%esp)
c010b608:	c0 
c010b609:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
c010b610:	00 
c010b611:	c7 04 24 4b 13 11 c0 	movl   $0xc011134b,(%esp)
c010b618:	e8 40 6c ff ff       	call   c010225d <__panic>
c010b61d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b620:	c1 e2 03             	shl    $0x3,%edx
c010b623:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c010b62a:	00 
c010b62b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b62f:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b633:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010b63a:	e8 ec 79 ff ff       	call   c010302b <ide_read_secs>
}
c010b63f:	c9                   	leave  
c010b640:	c3                   	ret    

c010b641 <swapfs_write>:

int
swapfs_write(swap_entry_t entry, struct Page *page) {
c010b641:	55                   	push   %ebp
c010b642:	89 e5                	mov    %esp,%ebp
c010b644:	83 ec 28             	sub    $0x28,%esp
    return ide_write_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c010b647:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b64a:	89 04 24             	mov    %eax,(%esp)
c010b64d:	e8 e1 fe ff ff       	call   c010b533 <page2kva>
c010b652:	8b 55 08             	mov    0x8(%ebp),%edx
c010b655:	c1 ea 08             	shr    $0x8,%edx
c010b658:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010b65b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b65f:	74 0b                	je     c010b66c <swapfs_write+0x2b>
c010b661:	8b 15 9c 85 1c c0    	mov    0xc01c859c,%edx
c010b667:	39 55 f4             	cmp    %edx,-0xc(%ebp)
c010b66a:	72 23                	jb     c010b68f <swapfs_write+0x4e>
c010b66c:	8b 45 08             	mov    0x8(%ebp),%eax
c010b66f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b673:	c7 44 24 08 5c 13 11 	movl   $0xc011135c,0x8(%esp)
c010b67a:	c0 
c010b67b:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
c010b682:	00 
c010b683:	c7 04 24 4b 13 11 c0 	movl   $0xc011134b,(%esp)
c010b68a:	e8 ce 6b ff ff       	call   c010225d <__panic>
c010b68f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b692:	c1 e2 03             	shl    $0x3,%edx
c010b695:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c010b69c:	00 
c010b69d:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b6a1:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b6a5:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010b6ac:	e8 bc 7b ff ff       	call   c010326d <ide_write_secs>
}
c010b6b1:	c9                   	leave  
c010b6b2:	c3                   	ret    

c010b6b3 <kernel_thread_entry>:
.text
.globl kernel_thread_entry
kernel_thread_entry:        # void kernel_thread(void)

    pushl %edx              # push arg
c010b6b3:	52                   	push   %edx
    call *%ebx              # call fn
c010b6b4:	ff d3                	call   *%ebx

    pushl %eax              # save the return value of fn(arg)
c010b6b6:	50                   	push   %eax
    call do_exit            # call do_exit to terminate current thread
c010b6b7:	e8 ed 0c 00 00       	call   c010c3a9 <do_exit>

c010b6bc <timer_init>:

#define le2timer(le, member)            \
to_struct((le), timer_t, member)

static inline timer_t *
timer_init(timer_t *timer, struct proc_struct *proc, int expires) {
c010b6bc:	55                   	push   %ebp
c010b6bd:	89 e5                	mov    %esp,%ebp
c010b6bf:	83 ec 10             	sub    $0x10,%esp
    timer->expires = expires;
c010b6c2:	8b 55 10             	mov    0x10(%ebp),%edx
c010b6c5:	8b 45 08             	mov    0x8(%ebp),%eax
c010b6c8:	89 10                	mov    %edx,(%eax)
    timer->proc = proc;
c010b6ca:	8b 45 08             	mov    0x8(%ebp),%eax
c010b6cd:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b6d0:	89 50 04             	mov    %edx,0x4(%eax)
    list_init(&(timer->timer_link));
c010b6d3:	8b 45 08             	mov    0x8(%ebp),%eax
c010b6d6:	83 c0 08             	add    $0x8,%eax
c010b6d9:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010b6dc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b6df:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010b6e2:	89 50 04             	mov    %edx,0x4(%eax)
c010b6e5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b6e8:	8b 50 04             	mov    0x4(%eax),%edx
c010b6eb:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b6ee:	89 10                	mov    %edx,(%eax)
    return timer;
c010b6f0:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010b6f3:	c9                   	leave  
c010b6f4:	c3                   	ret    

c010b6f5 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010b6f5:	55                   	push   %ebp
c010b6f6:	89 e5                	mov    %esp,%ebp
c010b6f8:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010b6fb:	9c                   	pushf  
c010b6fc:	58                   	pop    %eax
c010b6fd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010b700:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010b703:	25 00 02 00 00       	and    $0x200,%eax
c010b708:	85 c0                	test   %eax,%eax
c010b70a:	74 0c                	je     c010b718 <__intr_save+0x23>
        intr_disable();
c010b70c:	e8 a4 7d ff ff       	call   c01034b5 <intr_disable>
        return 1;
c010b711:	b8 01 00 00 00       	mov    $0x1,%eax
c010b716:	eb 05                	jmp    c010b71d <__intr_save+0x28>
    }
    return 0;
c010b718:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b71d:	c9                   	leave  
c010b71e:	c3                   	ret    

c010b71f <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010b71f:	55                   	push   %ebp
c010b720:	89 e5                	mov    %esp,%ebp
c010b722:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010b725:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b729:	74 05                	je     c010b730 <__intr_restore+0x11>
        intr_enable();
c010b72b:	e8 7f 7d ff ff       	call   c01034af <intr_enable>
    }
}
c010b730:	c9                   	leave  
c010b731:	c3                   	ret    

c010b732 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010b732:	55                   	push   %ebp
c010b733:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010b735:	8b 55 08             	mov    0x8(%ebp),%edx
c010b738:	a1 f0 84 1c c0       	mov    0xc01c84f0,%eax
c010b73d:	29 c2                	sub    %eax,%edx
c010b73f:	89 d0                	mov    %edx,%eax
c010b741:	c1 f8 02             	sar    $0x2,%eax
c010b744:	69 c0 39 8e e3 38    	imul   $0x38e38e39,%eax,%eax
}
c010b74a:	5d                   	pop    %ebp
c010b74b:	c3                   	ret    

c010b74c <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010b74c:	55                   	push   %ebp
c010b74d:	89 e5                	mov    %esp,%ebp
c010b74f:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c010b752:	8b 45 08             	mov    0x8(%ebp),%eax
c010b755:	89 04 24             	mov    %eax,(%esp)
c010b758:	e8 d5 ff ff ff       	call   c010b732 <page2ppn>
c010b75d:	c1 e0 0c             	shl    $0xc,%eax
}
c010b760:	c9                   	leave  
c010b761:	c3                   	ret    

c010b762 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c010b762:	55                   	push   %ebp
c010b763:	89 e5                	mov    %esp,%ebp
c010b765:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c010b768:	8b 45 08             	mov    0x8(%ebp),%eax
c010b76b:	c1 e8 0c             	shr    $0xc,%eax
c010b76e:	89 c2                	mov    %eax,%edx
c010b770:	a1 a0 63 1c c0       	mov    0xc01c63a0,%eax
c010b775:	39 c2                	cmp    %eax,%edx
c010b777:	72 1c                	jb     c010b795 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c010b779:	c7 44 24 08 7c 13 11 	movl   $0xc011137c,0x8(%esp)
c010b780:	c0 
c010b781:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c010b788:	00 
c010b789:	c7 04 24 9b 13 11 c0 	movl   $0xc011139b,(%esp)
c010b790:	e8 c8 6a ff ff       	call   c010225d <__panic>
    }
    return &pages[PPN(pa)];
c010b795:	8b 0d f0 84 1c c0    	mov    0xc01c84f0,%ecx
c010b79b:	8b 45 08             	mov    0x8(%ebp),%eax
c010b79e:	c1 e8 0c             	shr    $0xc,%eax
c010b7a1:	89 c2                	mov    %eax,%edx
c010b7a3:	89 d0                	mov    %edx,%eax
c010b7a5:	c1 e0 03             	shl    $0x3,%eax
c010b7a8:	01 d0                	add    %edx,%eax
c010b7aa:	c1 e0 02             	shl    $0x2,%eax
c010b7ad:	01 c8                	add    %ecx,%eax
}
c010b7af:	c9                   	leave  
c010b7b0:	c3                   	ret    

c010b7b1 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c010b7b1:	55                   	push   %ebp
c010b7b2:	89 e5                	mov    %esp,%ebp
c010b7b4:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c010b7b7:	8b 45 08             	mov    0x8(%ebp),%eax
c010b7ba:	89 04 24             	mov    %eax,(%esp)
c010b7bd:	e8 8a ff ff ff       	call   c010b74c <page2pa>
c010b7c2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b7c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b7c8:	c1 e8 0c             	shr    $0xc,%eax
c010b7cb:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b7ce:	a1 a0 63 1c c0       	mov    0xc01c63a0,%eax
c010b7d3:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010b7d6:	72 23                	jb     c010b7fb <page2kva+0x4a>
c010b7d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b7db:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b7df:	c7 44 24 08 ac 13 11 	movl   $0xc01113ac,0x8(%esp)
c010b7e6:	c0 
c010b7e7:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c010b7ee:	00 
c010b7ef:	c7 04 24 9b 13 11 c0 	movl   $0xc011139b,(%esp)
c010b7f6:	e8 62 6a ff ff       	call   c010225d <__panic>
c010b7fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b7fe:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010b803:	c9                   	leave  
c010b804:	c3                   	ret    

c010b805 <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c010b805:	55                   	push   %ebp
c010b806:	89 e5                	mov    %esp,%ebp
c010b808:	83 ec 28             	sub    $0x28,%esp
    return pa2page(PADDR(kva));
c010b80b:	8b 45 08             	mov    0x8(%ebp),%eax
c010b80e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b811:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c010b818:	77 23                	ja     c010b83d <kva2page+0x38>
c010b81a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b81d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b821:	c7 44 24 08 d0 13 11 	movl   $0xc01113d0,0x8(%esp)
c010b828:	c0 
c010b829:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c010b830:	00 
c010b831:	c7 04 24 9b 13 11 c0 	movl   $0xc011139b,(%esp)
c010b838:	e8 20 6a ff ff       	call   c010225d <__panic>
c010b83d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b840:	05 00 00 00 40       	add    $0x40000000,%eax
c010b845:	89 04 24             	mov    %eax,(%esp)
c010b848:	e8 15 ff ff ff       	call   c010b762 <pa2page>
}
c010b84d:	c9                   	leave  
c010b84e:	c3                   	ret    

c010b84f <mm_count_inc>:

static inline int
mm_count_inc(struct mm_struct *mm) {
c010b84f:	55                   	push   %ebp
c010b850:	89 e5                	mov    %esp,%ebp
    mm->mm_count += 1;
c010b852:	8b 45 08             	mov    0x8(%ebp),%eax
c010b855:	8b 40 18             	mov    0x18(%eax),%eax
c010b858:	8d 50 01             	lea    0x1(%eax),%edx
c010b85b:	8b 45 08             	mov    0x8(%ebp),%eax
c010b85e:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c010b861:	8b 45 08             	mov    0x8(%ebp),%eax
c010b864:	8b 40 18             	mov    0x18(%eax),%eax
}
c010b867:	5d                   	pop    %ebp
c010b868:	c3                   	ret    

c010b869 <mm_count_dec>:

static inline int
mm_count_dec(struct mm_struct *mm) {
c010b869:	55                   	push   %ebp
c010b86a:	89 e5                	mov    %esp,%ebp
    mm->mm_count -= 1;
c010b86c:	8b 45 08             	mov    0x8(%ebp),%eax
c010b86f:	8b 40 18             	mov    0x18(%eax),%eax
c010b872:	8d 50 ff             	lea    -0x1(%eax),%edx
c010b875:	8b 45 08             	mov    0x8(%ebp),%eax
c010b878:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c010b87b:	8b 45 08             	mov    0x8(%ebp),%eax
c010b87e:	8b 40 18             	mov    0x18(%eax),%eax
}
c010b881:	5d                   	pop    %ebp
c010b882:	c3                   	ret    

c010b883 <lock_mm>:

static inline void
lock_mm(struct mm_struct *mm) {
c010b883:	55                   	push   %ebp
c010b884:	89 e5                	mov    %esp,%ebp
c010b886:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010b889:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b88d:	74 25                	je     c010b8b4 <lock_mm+0x31>
        down(&(mm->mm_sem));
c010b88f:	8b 45 08             	mov    0x8(%ebp),%eax
c010b892:	83 c0 1c             	add    $0x1c,%eax
c010b895:	89 04 24             	mov    %eax,(%esp)
c010b898:	e8 3a f7 ff ff       	call   c010afd7 <down>
        if (current != NULL) {
c010b89d:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c010b8a2:	85 c0                	test   %eax,%eax
c010b8a4:	74 0e                	je     c010b8b4 <lock_mm+0x31>
            mm->locked_by = current->pid;
c010b8a6:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c010b8ab:	8b 50 04             	mov    0x4(%eax),%edx
c010b8ae:	8b 45 08             	mov    0x8(%ebp),%eax
c010b8b1:	89 50 28             	mov    %edx,0x28(%eax)
        }
    }
}
c010b8b4:	c9                   	leave  
c010b8b5:	c3                   	ret    

c010b8b6 <unlock_mm>:

static inline void
unlock_mm(struct mm_struct *mm) {
c010b8b6:	55                   	push   %ebp
c010b8b7:	89 e5                	mov    %esp,%ebp
c010b8b9:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010b8bc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b8c0:	74 18                	je     c010b8da <unlock_mm+0x24>
        up(&(mm->mm_sem));
c010b8c2:	8b 45 08             	mov    0x8(%ebp),%eax
c010b8c5:	83 c0 1c             	add    $0x1c,%eax
c010b8c8:	89 04 24             	mov    %eax,(%esp)
c010b8cb:	e8 ec f6 ff ff       	call   c010afbc <up>
        mm->locked_by = 0;
c010b8d0:	8b 45 08             	mov    0x8(%ebp),%eax
c010b8d3:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    }
}
c010b8da:	c9                   	leave  
c010b8db:	c3                   	ret    

c010b8dc <alloc_proc>:
void forkrets(struct trapframe *tf);
void switch_to(struct context *from, struct context *to);

// alloc_proc - alloc a proc_struct and init all fields of proc_struct
static struct proc_struct *
alloc_proc(void) {
c010b8dc:	55                   	push   %ebp
c010b8dd:	89 e5                	mov    %esp,%ebp
c010b8df:	83 ec 28             	sub    $0x28,%esp
    struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
c010b8e2:	c7 04 24 c4 00 00 00 	movl   $0xc4,(%esp)
c010b8e9:	e8 de a7 ff ff       	call   c01060cc <kmalloc>
c010b8ee:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (proc != NULL) {
c010b8f1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b8f5:	0f 84 63 01 00 00    	je     c010ba5e <alloc_proc+0x182>
    /*
     * below fields(add in LAB5) in proc_struct need to be initialized	
     *       uint32_t wait_state;                        // waiting state
     *       struct proc_struct *cptr, *yptr, *optr;     // relations between processes
	 */
        proc->state = PROC_UNINIT;
c010b8fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b8fe:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        proc->pid = -1;
c010b904:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b907:	c7 40 04 ff ff ff ff 	movl   $0xffffffff,0x4(%eax)
        proc->runs = 0;
c010b90e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b911:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        proc->kstack = 0;
c010b918:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b91b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        proc->need_resched = 0;
c010b922:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b925:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        proc->parent = NULL;
c010b92c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b92f:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        proc->mm = NULL;
c010b936:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b939:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
        memset(&(proc->context), 0, sizeof(struct context));
c010b940:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b943:	83 c0 1c             	add    $0x1c,%eax
c010b946:	c7 44 24 08 20 00 00 	movl   $0x20,0x8(%esp)
c010b94d:	00 
c010b94e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b955:	00 
c010b956:	89 04 24             	mov    %eax,(%esp)
c010b959:	e8 4e 31 00 00       	call   c010eaac <memset>
        proc->tf = NULL;
c010b95e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b961:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%eax)
        proc->cr3 = boot_cr3;
c010b968:	8b 15 ec 84 1c c0    	mov    0xc01c84ec,%edx
c010b96e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b971:	89 50 40             	mov    %edx,0x40(%eax)
        proc->flags = 0;
c010b974:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b977:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
        memset(proc->name, 0, PROC_NAME_LEN);
c010b97e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b981:	83 c0 48             	add    $0x48,%eax
c010b984:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c010b98b:	00 
c010b98c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b993:	00 
c010b994:	89 04 24             	mov    %eax,(%esp)
c010b997:	e8 10 31 00 00       	call   c010eaac <memset>
        proc->wait_state = 0;
c010b99c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b99f:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%eax)
c010b9a6:	00 00 00 
        proc->cptr = proc->optr = proc->yptr = NULL;
c010b9a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b9ac:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010b9b3:	00 00 00 
c010b9b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b9b9:	8b 90 98 00 00 00    	mov    0x98(%eax),%edx
c010b9bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b9c2:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010b9c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b9cb:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
c010b9d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b9d4:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
        proc->rq = NULL;
c010b9da:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b9dd:	c7 80 a0 00 00 00 00 	movl   $0x0,0xa0(%eax)
c010b9e4:	00 00 00 
        proc->run_link.prev = proc->run_link.next = NULL;
c010b9e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b9ea:	c7 80 a8 00 00 00 00 	movl   $0x0,0xa8(%eax)
c010b9f1:	00 00 00 
c010b9f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b9f7:	8b 90 a8 00 00 00    	mov    0xa8(%eax),%edx
c010b9fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba00:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
        proc->time_slice = 0;
c010ba06:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba09:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
c010ba10:	00 00 00 
        proc->lab6_run_pool.left = proc->lab6_run_pool.right = proc->lab6_run_pool.parent = NULL;
c010ba13:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba16:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
c010ba1d:	00 00 00 
c010ba20:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba23:	8b 90 b0 00 00 00    	mov    0xb0(%eax),%edx
c010ba29:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba2c:	89 90 b8 00 00 00    	mov    %edx,0xb8(%eax)
c010ba32:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba35:	8b 90 b8 00 00 00    	mov    0xb8(%eax),%edx
c010ba3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba3e:	89 90 b4 00 00 00    	mov    %edx,0xb4(%eax)
        proc->lab6_stride = 0;
c010ba44:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba47:	c7 80 bc 00 00 00 00 	movl   $0x0,0xbc(%eax)
c010ba4e:	00 00 00 
        proc->lab6_priority = 0;
c010ba51:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba54:	c7 80 c0 00 00 00 00 	movl   $0x0,0xc0(%eax)
c010ba5b:	00 00 00 
    }
    return proc;
c010ba5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010ba61:	c9                   	leave  
c010ba62:	c3                   	ret    

c010ba63 <set_proc_name>:

// set_proc_name - set the name of proc
char *
set_proc_name(struct proc_struct *proc, const char *name) {
c010ba63:	55                   	push   %ebp
c010ba64:	89 e5                	mov    %esp,%ebp
c010ba66:	83 ec 18             	sub    $0x18,%esp
    memset(proc->name, 0, sizeof(proc->name));
c010ba69:	8b 45 08             	mov    0x8(%ebp),%eax
c010ba6c:	83 c0 48             	add    $0x48,%eax
c010ba6f:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010ba76:	00 
c010ba77:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010ba7e:	00 
c010ba7f:	89 04 24             	mov    %eax,(%esp)
c010ba82:	e8 25 30 00 00       	call   c010eaac <memset>
    return memcpy(proc->name, name, PROC_NAME_LEN);
c010ba87:	8b 45 08             	mov    0x8(%ebp),%eax
c010ba8a:	8d 50 48             	lea    0x48(%eax),%edx
c010ba8d:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c010ba94:	00 
c010ba95:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ba98:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ba9c:	89 14 24             	mov    %edx,(%esp)
c010ba9f:	e8 ea 30 00 00       	call   c010eb8e <memcpy>
}
c010baa4:	c9                   	leave  
c010baa5:	c3                   	ret    

c010baa6 <get_proc_name>:

// get_proc_name - get the name of proc
char *
get_proc_name(struct proc_struct *proc) {
c010baa6:	55                   	push   %ebp
c010baa7:	89 e5                	mov    %esp,%ebp
c010baa9:	83 ec 18             	sub    $0x18,%esp
    static char name[PROC_NAME_LEN + 1];
    memset(name, 0, sizeof(name));
c010baac:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010bab3:	00 
c010bab4:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010babb:	00 
c010babc:	c7 04 24 80 84 1c c0 	movl   $0xc01c8480,(%esp)
c010bac3:	e8 e4 2f 00 00       	call   c010eaac <memset>
    return memcpy(name, proc->name, PROC_NAME_LEN);
c010bac8:	8b 45 08             	mov    0x8(%ebp),%eax
c010bacb:	83 c0 48             	add    $0x48,%eax
c010bace:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c010bad5:	00 
c010bad6:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bada:	c7 04 24 80 84 1c c0 	movl   $0xc01c8480,(%esp)
c010bae1:	e8 a8 30 00 00       	call   c010eb8e <memcpy>
}
c010bae6:	c9                   	leave  
c010bae7:	c3                   	ret    

c010bae8 <set_links>:

// set_links - set the relation links of process
static void
set_links(struct proc_struct *proc) {
c010bae8:	55                   	push   %ebp
c010bae9:	89 e5                	mov    %esp,%ebp
c010baeb:	83 ec 20             	sub    $0x20,%esp
    list_add(&proc_list, &(proc->list_link));
c010baee:	8b 45 08             	mov    0x8(%ebp),%eax
c010baf1:	83 c0 7c             	add    $0x7c,%eax
c010baf4:	c7 45 fc bc 86 1c c0 	movl   $0xc01c86bc,-0x4(%ebp)
c010bafb:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010bafe:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010bb01:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bb04:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010bb07:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010bb0a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bb0d:	8b 40 04             	mov    0x4(%eax),%eax
c010bb10:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010bb13:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010bb16:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010bb19:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010bb1c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010bb1f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010bb22:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010bb25:	89 10                	mov    %edx,(%eax)
c010bb27:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010bb2a:	8b 10                	mov    (%eax),%edx
c010bb2c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bb2f:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010bb32:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bb35:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010bb38:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010bb3b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bb3e:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010bb41:	89 10                	mov    %edx,(%eax)
    proc->yptr = NULL;
c010bb43:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb46:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010bb4d:	00 00 00 
    if ((proc->optr = proc->parent->cptr) != NULL) {
c010bb50:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb53:	8b 40 14             	mov    0x14(%eax),%eax
c010bb56:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c010bb5c:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb5f:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010bb65:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb68:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010bb6e:	85 c0                	test   %eax,%eax
c010bb70:	74 12                	je     c010bb84 <set_links+0x9c>
        proc->optr->yptr = proc;
c010bb72:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb75:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010bb7b:	8b 55 08             	mov    0x8(%ebp),%edx
c010bb7e:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    }
    proc->parent->cptr = proc;
c010bb84:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb87:	8b 40 14             	mov    0x14(%eax),%eax
c010bb8a:	8b 55 08             	mov    0x8(%ebp),%edx
c010bb8d:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    nr_process ++;
c010bb93:	a1 60 84 1c c0       	mov    0xc01c8460,%eax
c010bb98:	83 c0 01             	add    $0x1,%eax
c010bb9b:	a3 60 84 1c c0       	mov    %eax,0xc01c8460
}
c010bba0:	c9                   	leave  
c010bba1:	c3                   	ret    

c010bba2 <remove_links>:

// remove_links - clean the relation links of process
static void
remove_links(struct proc_struct *proc) {
c010bba2:	55                   	push   %ebp
c010bba3:	89 e5                	mov    %esp,%ebp
c010bba5:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->list_link));
c010bba8:	8b 45 08             	mov    0x8(%ebp),%eax
c010bbab:	83 c0 7c             	add    $0x7c,%eax
c010bbae:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010bbb1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010bbb4:	8b 40 04             	mov    0x4(%eax),%eax
c010bbb7:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010bbba:	8b 12                	mov    (%edx),%edx
c010bbbc:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010bbbf:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010bbc2:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010bbc5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010bbc8:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010bbcb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bbce:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010bbd1:	89 10                	mov    %edx,(%eax)
    if (proc->optr != NULL) {
c010bbd3:	8b 45 08             	mov    0x8(%ebp),%eax
c010bbd6:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010bbdc:	85 c0                	test   %eax,%eax
c010bbde:	74 18                	je     c010bbf8 <remove_links+0x56>
        proc->optr->yptr = proc->yptr;
c010bbe0:	8b 45 08             	mov    0x8(%ebp),%eax
c010bbe3:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010bbe9:	8b 55 08             	mov    0x8(%ebp),%edx
c010bbec:	8b 92 98 00 00 00    	mov    0x98(%edx),%edx
c010bbf2:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    }
    if (proc->yptr != NULL) {
c010bbf8:	8b 45 08             	mov    0x8(%ebp),%eax
c010bbfb:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010bc01:	85 c0                	test   %eax,%eax
c010bc03:	74 1a                	je     c010bc1f <remove_links+0x7d>
        proc->yptr->optr = proc->optr;
c010bc05:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc08:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010bc0e:	8b 55 08             	mov    0x8(%ebp),%edx
c010bc11:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010bc17:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010bc1d:	eb 15                	jmp    c010bc34 <remove_links+0x92>
    }
    else {
       proc->parent->cptr = proc->optr;
c010bc1f:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc22:	8b 40 14             	mov    0x14(%eax),%eax
c010bc25:	8b 55 08             	mov    0x8(%ebp),%edx
c010bc28:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010bc2e:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    }
    nr_process --;
c010bc34:	a1 60 84 1c c0       	mov    0xc01c8460,%eax
c010bc39:	83 e8 01             	sub    $0x1,%eax
c010bc3c:	a3 60 84 1c c0       	mov    %eax,0xc01c8460
}
c010bc41:	c9                   	leave  
c010bc42:	c3                   	ret    

c010bc43 <get_pid>:

// get_pid - alloc a unique pid for process
static int
get_pid(void) {
c010bc43:	55                   	push   %ebp
c010bc44:	89 e5                	mov    %esp,%ebp
c010bc46:	83 ec 10             	sub    $0x10,%esp
    static_assert(MAX_PID > MAX_PROCESS);
    struct proc_struct *proc;
    list_entry_t *list = &proc_list, *le;
c010bc49:	c7 45 f8 bc 86 1c c0 	movl   $0xc01c86bc,-0x8(%ebp)
    static int next_safe = MAX_PID, last_pid = MAX_PID;
    if (++ last_pid >= MAX_PID) {
c010bc50:	a1 84 4a 13 c0       	mov    0xc0134a84,%eax
c010bc55:	83 c0 01             	add    $0x1,%eax
c010bc58:	a3 84 4a 13 c0       	mov    %eax,0xc0134a84
c010bc5d:	a1 84 4a 13 c0       	mov    0xc0134a84,%eax
c010bc62:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010bc67:	7e 0c                	jle    c010bc75 <get_pid+0x32>
        last_pid = 1;
c010bc69:	c7 05 84 4a 13 c0 01 	movl   $0x1,0xc0134a84
c010bc70:	00 00 00 
        goto inside;
c010bc73:	eb 13                	jmp    c010bc88 <get_pid+0x45>
    }
    if (last_pid >= next_safe) {
c010bc75:	8b 15 84 4a 13 c0    	mov    0xc0134a84,%edx
c010bc7b:	a1 88 4a 13 c0       	mov    0xc0134a88,%eax
c010bc80:	39 c2                	cmp    %eax,%edx
c010bc82:	0f 8c ac 00 00 00    	jl     c010bd34 <get_pid+0xf1>
    inside:
        next_safe = MAX_PID;
c010bc88:	c7 05 88 4a 13 c0 00 	movl   $0x2000,0xc0134a88
c010bc8f:	20 00 00 
    repeat:
        le = list;
c010bc92:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010bc95:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while ((le = list_next(le)) != list) {
c010bc98:	eb 7f                	jmp    c010bd19 <get_pid+0xd6>
            proc = le2proc(le, list_link);
c010bc9a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010bc9d:	83 e8 7c             	sub    $0x7c,%eax
c010bca0:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (proc->pid == last_pid) {
c010bca3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bca6:	8b 50 04             	mov    0x4(%eax),%edx
c010bca9:	a1 84 4a 13 c0       	mov    0xc0134a84,%eax
c010bcae:	39 c2                	cmp    %eax,%edx
c010bcb0:	75 3e                	jne    c010bcf0 <get_pid+0xad>
                if (++ last_pid >= next_safe) {
c010bcb2:	a1 84 4a 13 c0       	mov    0xc0134a84,%eax
c010bcb7:	83 c0 01             	add    $0x1,%eax
c010bcba:	a3 84 4a 13 c0       	mov    %eax,0xc0134a84
c010bcbf:	8b 15 84 4a 13 c0    	mov    0xc0134a84,%edx
c010bcc5:	a1 88 4a 13 c0       	mov    0xc0134a88,%eax
c010bcca:	39 c2                	cmp    %eax,%edx
c010bccc:	7c 4b                	jl     c010bd19 <get_pid+0xd6>
                    if (last_pid >= MAX_PID) {
c010bcce:	a1 84 4a 13 c0       	mov    0xc0134a84,%eax
c010bcd3:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010bcd8:	7e 0a                	jle    c010bce4 <get_pid+0xa1>
                        last_pid = 1;
c010bcda:	c7 05 84 4a 13 c0 01 	movl   $0x1,0xc0134a84
c010bce1:	00 00 00 
                    }
                    next_safe = MAX_PID;
c010bce4:	c7 05 88 4a 13 c0 00 	movl   $0x2000,0xc0134a88
c010bceb:	20 00 00 
                    goto repeat;
c010bcee:	eb a2                	jmp    c010bc92 <get_pid+0x4f>
                }
            }
            else if (proc->pid > last_pid && next_safe > proc->pid) {
c010bcf0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bcf3:	8b 50 04             	mov    0x4(%eax),%edx
c010bcf6:	a1 84 4a 13 c0       	mov    0xc0134a84,%eax
c010bcfb:	39 c2                	cmp    %eax,%edx
c010bcfd:	7e 1a                	jle    c010bd19 <get_pid+0xd6>
c010bcff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bd02:	8b 50 04             	mov    0x4(%eax),%edx
c010bd05:	a1 88 4a 13 c0       	mov    0xc0134a88,%eax
c010bd0a:	39 c2                	cmp    %eax,%edx
c010bd0c:	7d 0b                	jge    c010bd19 <get_pid+0xd6>
                next_safe = proc->pid;
c010bd0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bd11:	8b 40 04             	mov    0x4(%eax),%eax
c010bd14:	a3 88 4a 13 c0       	mov    %eax,0xc0134a88
c010bd19:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010bd1c:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010bd1f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bd22:	8b 40 04             	mov    0x4(%eax),%eax
    if (last_pid >= next_safe) {
    inside:
        next_safe = MAX_PID;
    repeat:
        le = list;
        while ((le = list_next(le)) != list) {
c010bd25:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010bd28:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010bd2b:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c010bd2e:	0f 85 66 ff ff ff    	jne    c010bc9a <get_pid+0x57>
            else if (proc->pid > last_pid && next_safe > proc->pid) {
                next_safe = proc->pid;
            }
        }
    }
    return last_pid;
c010bd34:	a1 84 4a 13 c0       	mov    0xc0134a84,%eax
}
c010bd39:	c9                   	leave  
c010bd3a:	c3                   	ret    

c010bd3b <proc_run>:

// proc_run - make process "proc" running on cpu
// NOTE: before call switch_to, should load  base addr of "proc"'s new PDT
void
proc_run(struct proc_struct *proc) {
c010bd3b:	55                   	push   %ebp
c010bd3c:	89 e5                	mov    %esp,%ebp
c010bd3e:	83 ec 28             	sub    $0x28,%esp
    if (proc != current) {
c010bd41:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c010bd46:	39 45 08             	cmp    %eax,0x8(%ebp)
c010bd49:	74 63                	je     c010bdae <proc_run+0x73>
        bool intr_flag;
        struct proc_struct *prev = current, *next = proc;
c010bd4b:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c010bd50:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bd53:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd56:	89 45 f0             	mov    %eax,-0x10(%ebp)
        local_intr_save(intr_flag);
c010bd59:	e8 97 f9 ff ff       	call   c010b6f5 <__intr_save>
c010bd5e:	89 45 ec             	mov    %eax,-0x14(%ebp)
        {
            current = proc;
c010bd61:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd64:	a3 48 64 1c c0       	mov    %eax,0xc01c6448
            load_esp0(next->kstack + KSTACKSIZE);
c010bd69:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bd6c:	8b 40 0c             	mov    0xc(%eax),%eax
c010bd6f:	05 00 20 00 00       	add    $0x2000,%eax
c010bd74:	89 04 24             	mov    %eax,(%esp)
c010bd77:	e8 87 a6 ff ff       	call   c0106403 <load_esp0>
            lcr3(next->cr3);
c010bd7c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bd7f:	8b 40 40             	mov    0x40(%eax),%eax
c010bd82:	89 45 e8             	mov    %eax,-0x18(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c010bd85:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bd88:	0f 22 d8             	mov    %eax,%cr3
            switch_to(&(prev->context), &(next->context));
c010bd8b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bd8e:	8d 50 1c             	lea    0x1c(%eax),%edx
c010bd91:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bd94:	83 c0 1c             	add    $0x1c,%eax
c010bd97:	89 54 24 04          	mov    %edx,0x4(%esp)
c010bd9b:	89 04 24             	mov    %eax,(%esp)
c010bd9e:	e8 c0 16 00 00       	call   c010d463 <switch_to>
        }
        local_intr_restore(intr_flag);
c010bda3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bda6:	89 04 24             	mov    %eax,(%esp)
c010bda9:	e8 71 f9 ff ff       	call   c010b71f <__intr_restore>
    }
}
c010bdae:	c9                   	leave  
c010bdaf:	c3                   	ret    

c010bdb0 <forkret>:

// forkret -- the first kernel entry point of a new thread/process
// NOTE: the addr of forkret is setted in copy_thread function
//       after switch_to, the current proc will execute here.
static void
forkret(void) {
c010bdb0:	55                   	push   %ebp
c010bdb1:	89 e5                	mov    %esp,%ebp
c010bdb3:	83 ec 18             	sub    $0x18,%esp
    forkrets(current->tf);
c010bdb6:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c010bdbb:	8b 40 3c             	mov    0x3c(%eax),%eax
c010bdbe:	89 04 24             	mov    %eax,(%esp)
c010bdc1:	e8 49 81 ff ff       	call   c0103f0f <forkrets>
}
c010bdc6:	c9                   	leave  
c010bdc7:	c3                   	ret    

c010bdc8 <hash_proc>:

// hash_proc - add proc into proc hash_list
static void
hash_proc(struct proc_struct *proc) {
c010bdc8:	55                   	push   %ebp
c010bdc9:	89 e5                	mov    %esp,%ebp
c010bdcb:	53                   	push   %ebx
c010bdcc:	83 ec 34             	sub    $0x34,%esp
    list_add(hash_list + pid_hashfn(proc->pid), &(proc->hash_link));
c010bdcf:	8b 45 08             	mov    0x8(%ebp),%eax
c010bdd2:	8d 98 84 00 00 00    	lea    0x84(%eax),%ebx
c010bdd8:	8b 45 08             	mov    0x8(%ebp),%eax
c010bddb:	8b 40 04             	mov    0x4(%eax),%eax
c010bdde:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c010bde5:	00 
c010bde6:	89 04 24             	mov    %eax,(%esp)
c010bde9:	e8 11 22 00 00       	call   c010dfff <hash32>
c010bdee:	c1 e0 03             	shl    $0x3,%eax
c010bdf1:	05 60 64 1c c0       	add    $0xc01c6460,%eax
c010bdf6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bdf9:	89 5d f0             	mov    %ebx,-0x10(%ebp)
c010bdfc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bdff:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010be02:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010be05:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010be08:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010be0b:	8b 40 04             	mov    0x4(%eax),%eax
c010be0e:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010be11:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010be14:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010be17:	89 55 e0             	mov    %edx,-0x20(%ebp)
c010be1a:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010be1d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010be20:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010be23:	89 10                	mov    %edx,(%eax)
c010be25:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010be28:	8b 10                	mov    (%eax),%edx
c010be2a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010be2d:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010be30:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010be33:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010be36:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010be39:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010be3c:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010be3f:	89 10                	mov    %edx,(%eax)
}
c010be41:	83 c4 34             	add    $0x34,%esp
c010be44:	5b                   	pop    %ebx
c010be45:	5d                   	pop    %ebp
c010be46:	c3                   	ret    

c010be47 <unhash_proc>:

// unhash_proc - delete proc from proc hash_list
static void
unhash_proc(struct proc_struct *proc) {
c010be47:	55                   	push   %ebp
c010be48:	89 e5                	mov    %esp,%ebp
c010be4a:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->hash_link));
c010be4d:	8b 45 08             	mov    0x8(%ebp),%eax
c010be50:	05 84 00 00 00       	add    $0x84,%eax
c010be55:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010be58:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010be5b:	8b 40 04             	mov    0x4(%eax),%eax
c010be5e:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010be61:	8b 12                	mov    (%edx),%edx
c010be63:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010be66:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010be69:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010be6c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010be6f:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010be72:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010be75:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010be78:	89 10                	mov    %edx,(%eax)
}
c010be7a:	c9                   	leave  
c010be7b:	c3                   	ret    

c010be7c <find_proc>:

// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
c010be7c:	55                   	push   %ebp
c010be7d:	89 e5                	mov    %esp,%ebp
c010be7f:	83 ec 28             	sub    $0x28,%esp
    if (0 < pid && pid < MAX_PID) {
c010be82:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010be86:	7e 61                	jle    c010bee9 <find_proc+0x6d>
c010be88:	81 7d 08 ff 1f 00 00 	cmpl   $0x1fff,0x8(%ebp)
c010be8f:	7f 58                	jg     c010bee9 <find_proc+0x6d>
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
c010be91:	8b 45 08             	mov    0x8(%ebp),%eax
c010be94:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c010be9b:	00 
c010be9c:	89 04 24             	mov    %eax,(%esp)
c010be9f:	e8 5b 21 00 00       	call   c010dfff <hash32>
c010bea4:	c1 e0 03             	shl    $0x3,%eax
c010bea7:	05 60 64 1c c0       	add    $0xc01c6460,%eax
c010beac:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010beaf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010beb2:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le)) != list) {
c010beb5:	eb 1b                	jmp    c010bed2 <find_proc+0x56>
            struct proc_struct *proc = le2proc(le, hash_link);
c010beb7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010beba:	2d 84 00 00 00       	sub    $0x84,%eax
c010bebf:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (proc->pid == pid) {
c010bec2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bec5:	8b 40 04             	mov    0x4(%eax),%eax
c010bec8:	3b 45 08             	cmp    0x8(%ebp),%eax
c010becb:	75 05                	jne    c010bed2 <find_proc+0x56>
                return proc;
c010becd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bed0:	eb 1c                	jmp    c010beee <find_proc+0x72>
c010bed2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bed5:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010bed8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bedb:	8b 40 04             	mov    0x4(%eax),%eax
// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
    if (0 < pid && pid < MAX_PID) {
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
        while ((le = list_next(le)) != list) {
c010bede:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bee1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bee4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010bee7:	75 ce                	jne    c010beb7 <find_proc+0x3b>
            if (proc->pid == pid) {
                return proc;
            }
        }
    }
    return NULL;
c010bee9:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010beee:	c9                   	leave  
c010beef:	c3                   	ret    

c010bef0 <kernel_thread>:

// kernel_thread - create a kernel thread using "fn" function
// NOTE: the contents of temp trapframe tf will be copied to 
//       proc->tf in do_fork-->copy_thread function
int
kernel_thread(int (*fn)(void *), void *arg, uint32_t clone_flags) {
c010bef0:	55                   	push   %ebp
c010bef1:	89 e5                	mov    %esp,%ebp
c010bef3:	83 ec 68             	sub    $0x68,%esp
    struct trapframe tf;
    memset(&tf, 0, sizeof(struct trapframe));
c010bef6:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
c010befd:	00 
c010befe:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010bf05:	00 
c010bf06:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010bf09:	89 04 24             	mov    %eax,(%esp)
c010bf0c:	e8 9b 2b 00 00       	call   c010eaac <memset>
    tf.tf_cs = KERNEL_CS;
c010bf11:	66 c7 45 e8 08 00    	movw   $0x8,-0x18(%ebp)
    tf.tf_ds = tf.tf_es = tf.tf_ss = KERNEL_DS;
c010bf17:	66 c7 45 f4 10 00    	movw   $0x10,-0xc(%ebp)
c010bf1d:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c010bf21:	66 89 45 d4          	mov    %ax,-0x2c(%ebp)
c010bf25:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
c010bf29:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
    tf.tf_regs.reg_ebx = (uint32_t)fn;
c010bf2d:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf30:	89 45 bc             	mov    %eax,-0x44(%ebp)
    tf.tf_regs.reg_edx = (uint32_t)arg;
c010bf33:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bf36:	89 45 c0             	mov    %eax,-0x40(%ebp)
    tf.tf_eip = (uint32_t)kernel_thread_entry;
c010bf39:	b8 b3 b6 10 c0       	mov    $0xc010b6b3,%eax
c010bf3e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return do_fork(clone_flags | CLONE_VM, 0, &tf);
c010bf41:	8b 45 10             	mov    0x10(%ebp),%eax
c010bf44:	80 cc 01             	or     $0x1,%ah
c010bf47:	89 c2                	mov    %eax,%edx
c010bf49:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010bf4c:	89 44 24 08          	mov    %eax,0x8(%esp)
c010bf50:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010bf57:	00 
c010bf58:	89 14 24             	mov    %edx,(%esp)
c010bf5b:	e8 25 03 00 00       	call   c010c285 <do_fork>
}
c010bf60:	c9                   	leave  
c010bf61:	c3                   	ret    

c010bf62 <setup_kstack>:

// setup_kstack - alloc pages with size KSTACKPAGE as process kernel stack
static int
setup_kstack(struct proc_struct *proc) {
c010bf62:	55                   	push   %ebp
c010bf63:	89 e5                	mov    %esp,%ebp
c010bf65:	83 ec 28             	sub    $0x28,%esp
    struct Page *page = alloc_pages(KSTACKPAGE);
c010bf68:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c010bf6f:	e8 dd a5 ff ff       	call   c0106551 <alloc_pages>
c010bf74:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c010bf77:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bf7b:	74 1a                	je     c010bf97 <setup_kstack+0x35>
        proc->kstack = (uintptr_t)page2kva(page);
c010bf7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf80:	89 04 24             	mov    %eax,(%esp)
c010bf83:	e8 29 f8 ff ff       	call   c010b7b1 <page2kva>
c010bf88:	89 c2                	mov    %eax,%edx
c010bf8a:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf8d:	89 50 0c             	mov    %edx,0xc(%eax)
        return 0;
c010bf90:	b8 00 00 00 00       	mov    $0x0,%eax
c010bf95:	eb 05                	jmp    c010bf9c <setup_kstack+0x3a>
    }
    return -E_NO_MEM;
c010bf97:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c010bf9c:	c9                   	leave  
c010bf9d:	c3                   	ret    

c010bf9e <put_kstack>:

// put_kstack - free the memory space of process kernel stack
static void
put_kstack(struct proc_struct *proc) {
c010bf9e:	55                   	push   %ebp
c010bf9f:	89 e5                	mov    %esp,%ebp
c010bfa1:	83 ec 18             	sub    $0x18,%esp
    free_pages(kva2page((void *)(proc->kstack)), KSTACKPAGE);
c010bfa4:	8b 45 08             	mov    0x8(%ebp),%eax
c010bfa7:	8b 40 0c             	mov    0xc(%eax),%eax
c010bfaa:	89 04 24             	mov    %eax,(%esp)
c010bfad:	e8 53 f8 ff ff       	call   c010b805 <kva2page>
c010bfb2:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c010bfb9:	00 
c010bfba:	89 04 24             	mov    %eax,(%esp)
c010bfbd:	e8 fa a5 ff ff       	call   c01065bc <free_pages>
}
c010bfc2:	c9                   	leave  
c010bfc3:	c3                   	ret    

c010bfc4 <setup_pgdir>:

// setup_pgdir - alloc one page as PDT
static int
setup_pgdir(struct mm_struct *mm) {
c010bfc4:	55                   	push   %ebp
c010bfc5:	89 e5                	mov    %esp,%ebp
c010bfc7:	83 ec 28             	sub    $0x28,%esp
    struct Page *page;
    if ((page = alloc_page()) == NULL) {
c010bfca:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010bfd1:	e8 7b a5 ff ff       	call   c0106551 <alloc_pages>
c010bfd6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bfd9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bfdd:	75 0a                	jne    c010bfe9 <setup_pgdir+0x25>
        return -E_NO_MEM;
c010bfdf:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010bfe4:	e9 80 00 00 00       	jmp    c010c069 <setup_pgdir+0xa5>
    }
    pde_t *pgdir = page2kva(page);
c010bfe9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bfec:	89 04 24             	mov    %eax,(%esp)
c010bfef:	e8 bd f7 ff ff       	call   c010b7b1 <page2kva>
c010bff4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    memcpy(pgdir, boot_pgdir, PGSIZE);
c010bff7:	a1 a4 63 1c c0       	mov    0xc01c63a4,%eax
c010bffc:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c010c003:	00 
c010c004:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c008:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c00b:	89 04 24             	mov    %eax,(%esp)
c010c00e:	e8 7b 2b 00 00       	call   c010eb8e <memcpy>
    pgdir[PDX(VPT)] = PADDR(pgdir) | PTE_P | PTE_W;
c010c013:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c016:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c010c01c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c01f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010c022:	81 7d ec ff ff ff bf 	cmpl   $0xbfffffff,-0x14(%ebp)
c010c029:	77 23                	ja     c010c04e <setup_pgdir+0x8a>
c010c02b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c02e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010c032:	c7 44 24 08 d0 13 11 	movl   $0xc01113d0,0x8(%esp)
c010c039:	c0 
c010c03a:	c7 44 24 04 34 01 00 	movl   $0x134,0x4(%esp)
c010c041:	00 
c010c042:	c7 04 24 f4 13 11 c0 	movl   $0xc01113f4,(%esp)
c010c049:	e8 0f 62 ff ff       	call   c010225d <__panic>
c010c04e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c051:	05 00 00 00 40       	add    $0x40000000,%eax
c010c056:	83 c8 03             	or     $0x3,%eax
c010c059:	89 02                	mov    %eax,(%edx)
    mm->pgdir = pgdir;
c010c05b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c05e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010c061:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c010c064:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c069:	c9                   	leave  
c010c06a:	c3                   	ret    

c010c06b <put_pgdir>:

// put_pgdir - free the memory space of PDT
static void
put_pgdir(struct mm_struct *mm) {
c010c06b:	55                   	push   %ebp
c010c06c:	89 e5                	mov    %esp,%ebp
c010c06e:	83 ec 18             	sub    $0x18,%esp
    free_page(kva2page(mm->pgdir));
c010c071:	8b 45 08             	mov    0x8(%ebp),%eax
c010c074:	8b 40 0c             	mov    0xc(%eax),%eax
c010c077:	89 04 24             	mov    %eax,(%esp)
c010c07a:	e8 86 f7 ff ff       	call   c010b805 <kva2page>
c010c07f:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010c086:	00 
c010c087:	89 04 24             	mov    %eax,(%esp)
c010c08a:	e8 2d a5 ff ff       	call   c01065bc <free_pages>
}
c010c08f:	c9                   	leave  
c010c090:	c3                   	ret    

c010c091 <copy_mm>:

// copy_mm - process "proc" duplicate OR share process "current"'s mm according clone_flags
//         - if clone_flags & CLONE_VM, then "share" ; else "duplicate"
static int
copy_mm(uint32_t clone_flags, struct proc_struct *proc) {
c010c091:	55                   	push   %ebp
c010c092:	89 e5                	mov    %esp,%ebp
c010c094:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm, *oldmm = current->mm;
c010c097:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c010c09c:	8b 40 18             	mov    0x18(%eax),%eax
c010c09f:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* current is a kernel thread */
    if (oldmm == NULL) {
c010c0a2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010c0a6:	75 0a                	jne    c010c0b2 <copy_mm+0x21>
        return 0;
c010c0a8:	b8 00 00 00 00       	mov    $0x0,%eax
c010c0ad:	e9 f9 00 00 00       	jmp    c010c1ab <copy_mm+0x11a>
    }
    if (clone_flags & CLONE_VM) {
c010c0b2:	8b 45 08             	mov    0x8(%ebp),%eax
c010c0b5:	25 00 01 00 00       	and    $0x100,%eax
c010c0ba:	85 c0                	test   %eax,%eax
c010c0bc:	74 08                	je     c010c0c6 <copy_mm+0x35>
        mm = oldmm;
c010c0be:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c0c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
        goto good_mm;
c010c0c4:	eb 78                	jmp    c010c13e <copy_mm+0xad>
    }

    int ret = -E_NO_MEM;
c010c0c6:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
    if ((mm = mm_create()) == NULL) {
c010c0cd:	e8 41 d2 ff ff       	call   c0109313 <mm_create>
c010c0d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c0d5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c0d9:	75 05                	jne    c010c0e0 <copy_mm+0x4f>
        goto bad_mm;
c010c0db:	e9 c8 00 00 00       	jmp    c010c1a8 <copy_mm+0x117>
    }
    if (setup_pgdir(mm) != 0) {
c010c0e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c0e3:	89 04 24             	mov    %eax,(%esp)
c010c0e6:	e8 d9 fe ff ff       	call   c010bfc4 <setup_pgdir>
c010c0eb:	85 c0                	test   %eax,%eax
c010c0ed:	74 05                	je     c010c0f4 <copy_mm+0x63>
        goto bad_pgdir_cleanup_mm;
c010c0ef:	e9 a9 00 00 00       	jmp    c010c19d <copy_mm+0x10c>
    }

    lock_mm(oldmm);
c010c0f4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c0f7:	89 04 24             	mov    %eax,(%esp)
c010c0fa:	e8 84 f7 ff ff       	call   c010b883 <lock_mm>
    {
        ret = dup_mmap(mm, oldmm);
c010c0ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c102:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c106:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c109:	89 04 24             	mov    %eax,(%esp)
c010c10c:	e8 25 d7 ff ff       	call   c0109836 <dup_mmap>
c010c111:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    unlock_mm(oldmm);
c010c114:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c117:	89 04 24             	mov    %eax,(%esp)
c010c11a:	e8 97 f7 ff ff       	call   c010b8b6 <unlock_mm>

    if (ret != 0) {
c010c11f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c123:	74 19                	je     c010c13e <copy_mm+0xad>
        goto bad_dup_cleanup_mmap;
c010c125:	90                   	nop
    mm_count_inc(mm);
    proc->mm = mm;
    proc->cr3 = PADDR(mm->pgdir);
    return 0;
bad_dup_cleanup_mmap:
    exit_mmap(mm);
c010c126:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c129:	89 04 24             	mov    %eax,(%esp)
c010c12c:	e8 06 d8 ff ff       	call   c0109937 <exit_mmap>
    put_pgdir(mm);
c010c131:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c134:	89 04 24             	mov    %eax,(%esp)
c010c137:	e8 2f ff ff ff       	call   c010c06b <put_pgdir>
c010c13c:	eb 5f                	jmp    c010c19d <copy_mm+0x10c>
    if (ret != 0) {
        goto bad_dup_cleanup_mmap;
    }

good_mm:
    mm_count_inc(mm);
c010c13e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c141:	89 04 24             	mov    %eax,(%esp)
c010c144:	e8 06 f7 ff ff       	call   c010b84f <mm_count_inc>
    proc->mm = mm;
c010c149:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c14c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c14f:	89 50 18             	mov    %edx,0x18(%eax)
    proc->cr3 = PADDR(mm->pgdir);
c010c152:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c155:	8b 40 0c             	mov    0xc(%eax),%eax
c010c158:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010c15b:	81 7d e8 ff ff ff bf 	cmpl   $0xbfffffff,-0x18(%ebp)
c010c162:	77 23                	ja     c010c187 <copy_mm+0xf6>
c010c164:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c167:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010c16b:	c7 44 24 08 d0 13 11 	movl   $0xc01113d0,0x8(%esp)
c010c172:	c0 
c010c173:	c7 44 24 04 63 01 00 	movl   $0x163,0x4(%esp)
c010c17a:	00 
c010c17b:	c7 04 24 f4 13 11 c0 	movl   $0xc01113f4,(%esp)
c010c182:	e8 d6 60 ff ff       	call   c010225d <__panic>
c010c187:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c18a:	8d 90 00 00 00 40    	lea    0x40000000(%eax),%edx
c010c190:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c193:	89 50 40             	mov    %edx,0x40(%eax)
    return 0;
c010c196:	b8 00 00 00 00       	mov    $0x0,%eax
c010c19b:	eb 0e                	jmp    c010c1ab <copy_mm+0x11a>
bad_dup_cleanup_mmap:
    exit_mmap(mm);
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010c19d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c1a0:	89 04 24             	mov    %eax,(%esp)
c010c1a3:	e8 d0 d4 ff ff       	call   c0109678 <mm_destroy>
bad_mm:
    return ret;
c010c1a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010c1ab:	c9                   	leave  
c010c1ac:	c3                   	ret    

c010c1ad <copy_thread>:

// copy_thread - setup the trapframe on the  process's kernel stack top and
//             - setup the kernel entry point and stack of process
static void
copy_thread(struct proc_struct *proc, uintptr_t esp, struct trapframe *tf) {
c010c1ad:	55                   	push   %ebp
c010c1ae:	89 e5                	mov    %esp,%ebp
c010c1b0:	57                   	push   %edi
c010c1b1:	56                   	push   %esi
c010c1b2:	53                   	push   %ebx
    proc->tf = (struct trapframe *)(proc->kstack + KSTACKSIZE) - 1;
c010c1b3:	8b 45 08             	mov    0x8(%ebp),%eax
c010c1b6:	8b 40 0c             	mov    0xc(%eax),%eax
c010c1b9:	05 b4 1f 00 00       	add    $0x1fb4,%eax
c010c1be:	89 c2                	mov    %eax,%edx
c010c1c0:	8b 45 08             	mov    0x8(%ebp),%eax
c010c1c3:	89 50 3c             	mov    %edx,0x3c(%eax)
    *(proc->tf) = *tf;
c010c1c6:	8b 45 08             	mov    0x8(%ebp),%eax
c010c1c9:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c1cc:	8b 55 10             	mov    0x10(%ebp),%edx
c010c1cf:	bb 4c 00 00 00       	mov    $0x4c,%ebx
c010c1d4:	89 c1                	mov    %eax,%ecx
c010c1d6:	83 e1 01             	and    $0x1,%ecx
c010c1d9:	85 c9                	test   %ecx,%ecx
c010c1db:	74 0e                	je     c010c1eb <copy_thread+0x3e>
c010c1dd:	0f b6 0a             	movzbl (%edx),%ecx
c010c1e0:	88 08                	mov    %cl,(%eax)
c010c1e2:	83 c0 01             	add    $0x1,%eax
c010c1e5:	83 c2 01             	add    $0x1,%edx
c010c1e8:	83 eb 01             	sub    $0x1,%ebx
c010c1eb:	89 c1                	mov    %eax,%ecx
c010c1ed:	83 e1 02             	and    $0x2,%ecx
c010c1f0:	85 c9                	test   %ecx,%ecx
c010c1f2:	74 0f                	je     c010c203 <copy_thread+0x56>
c010c1f4:	0f b7 0a             	movzwl (%edx),%ecx
c010c1f7:	66 89 08             	mov    %cx,(%eax)
c010c1fa:	83 c0 02             	add    $0x2,%eax
c010c1fd:	83 c2 02             	add    $0x2,%edx
c010c200:	83 eb 02             	sub    $0x2,%ebx
c010c203:	89 d9                	mov    %ebx,%ecx
c010c205:	c1 e9 02             	shr    $0x2,%ecx
c010c208:	89 c7                	mov    %eax,%edi
c010c20a:	89 d6                	mov    %edx,%esi
c010c20c:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010c20e:	89 f2                	mov    %esi,%edx
c010c210:	89 f8                	mov    %edi,%eax
c010c212:	b9 00 00 00 00       	mov    $0x0,%ecx
c010c217:	89 de                	mov    %ebx,%esi
c010c219:	83 e6 02             	and    $0x2,%esi
c010c21c:	85 f6                	test   %esi,%esi
c010c21e:	74 0b                	je     c010c22b <copy_thread+0x7e>
c010c220:	0f b7 34 0a          	movzwl (%edx,%ecx,1),%esi
c010c224:	66 89 34 08          	mov    %si,(%eax,%ecx,1)
c010c228:	83 c1 02             	add    $0x2,%ecx
c010c22b:	83 e3 01             	and    $0x1,%ebx
c010c22e:	85 db                	test   %ebx,%ebx
c010c230:	74 07                	je     c010c239 <copy_thread+0x8c>
c010c232:	0f b6 14 0a          	movzbl (%edx,%ecx,1),%edx
c010c236:	88 14 08             	mov    %dl,(%eax,%ecx,1)
    proc->tf->tf_regs.reg_eax = 0;
c010c239:	8b 45 08             	mov    0x8(%ebp),%eax
c010c23c:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c23f:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    proc->tf->tf_esp = esp;
c010c246:	8b 45 08             	mov    0x8(%ebp),%eax
c010c249:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c24c:	8b 55 0c             	mov    0xc(%ebp),%edx
c010c24f:	89 50 44             	mov    %edx,0x44(%eax)
    proc->tf->tf_eflags |= FL_IF;
c010c252:	8b 45 08             	mov    0x8(%ebp),%eax
c010c255:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c258:	8b 55 08             	mov    0x8(%ebp),%edx
c010c25b:	8b 52 3c             	mov    0x3c(%edx),%edx
c010c25e:	8b 52 40             	mov    0x40(%edx),%edx
c010c261:	80 ce 02             	or     $0x2,%dh
c010c264:	89 50 40             	mov    %edx,0x40(%eax)

    proc->context.eip = (uintptr_t)forkret;
c010c267:	ba b0 bd 10 c0       	mov    $0xc010bdb0,%edx
c010c26c:	8b 45 08             	mov    0x8(%ebp),%eax
c010c26f:	89 50 1c             	mov    %edx,0x1c(%eax)
    proc->context.esp = (uintptr_t)(proc->tf);
c010c272:	8b 45 08             	mov    0x8(%ebp),%eax
c010c275:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c278:	89 c2                	mov    %eax,%edx
c010c27a:	8b 45 08             	mov    0x8(%ebp),%eax
c010c27d:	89 50 20             	mov    %edx,0x20(%eax)
}
c010c280:	5b                   	pop    %ebx
c010c281:	5e                   	pop    %esi
c010c282:	5f                   	pop    %edi
c010c283:	5d                   	pop    %ebp
c010c284:	c3                   	ret    

c010c285 <do_fork>:
 * @clone_flags: used to guide how to clone the child process
 * @stack:       the parent's user stack pointer. if stack==0, It means to fork a kernel thread.
 * @tf:          the trapframe info, which will be copied to child process's proc->tf
 */
int
do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
c010c285:	55                   	push   %ebp
c010c286:	89 e5                	mov    %esp,%ebp
c010c288:	83 ec 28             	sub    $0x28,%esp
    int ret = -E_NO_FREE_PROC;
c010c28b:	c7 45 f4 fb ff ff ff 	movl   $0xfffffffb,-0xc(%ebp)
    struct proc_struct *proc;
    if (nr_process >= MAX_PROCESS) {
c010c292:	a1 60 84 1c c0       	mov    0xc01c8460,%eax
c010c297:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c010c29c:	7e 05                	jle    c010c2a3 <do_fork+0x1e>
        goto fork_out;
c010c29e:	e9 f2 00 00 00       	jmp    c010c395 <do_fork+0x110>
    }
    ret = -E_NO_MEM;
c010c2a3:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    *    set_links:  set the relation links of process.  ALSO SEE: remove_links:  lean the relation links of process 
    *    -------------------
	*    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
    */
    if ((proc = alloc_proc()) == NULL) {
c010c2aa:	e8 2d f6 ff ff       	call   c010b8dc <alloc_proc>
c010c2af:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c2b2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c2b6:	75 05                	jne    c010c2bd <do_fork+0x38>
        goto fork_out;
c010c2b8:	e9 d8 00 00 00       	jmp    c010c395 <do_fork+0x110>
    }

    proc->parent = current;
c010c2bd:	8b 15 48 64 1c c0    	mov    0xc01c6448,%edx
c010c2c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c2c6:	89 50 14             	mov    %edx,0x14(%eax)
    assert(current->wait_state == 0);
c010c2c9:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c010c2ce:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010c2d4:	85 c0                	test   %eax,%eax
c010c2d6:	74 24                	je     c010c2fc <do_fork+0x77>
c010c2d8:	c7 44 24 0c 08 14 11 	movl   $0xc0111408,0xc(%esp)
c010c2df:	c0 
c010c2e0:	c7 44 24 08 21 14 11 	movl   $0xc0111421,0x8(%esp)
c010c2e7:	c0 
c010c2e8:	c7 44 24 04 af 01 00 	movl   $0x1af,0x4(%esp)
c010c2ef:	00 
c010c2f0:	c7 04 24 f4 13 11 c0 	movl   $0xc01113f4,(%esp)
c010c2f7:	e8 61 5f ff ff       	call   c010225d <__panic>

    if (setup_kstack(proc) != 0) {
c010c2fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c2ff:	89 04 24             	mov    %eax,(%esp)
c010c302:	e8 5b fc ff ff       	call   c010bf62 <setup_kstack>
c010c307:	85 c0                	test   %eax,%eax
c010c309:	74 05                	je     c010c310 <do_fork+0x8b>
        goto bad_fork_cleanup_proc;
c010c30b:	e9 8a 00 00 00       	jmp    c010c39a <do_fork+0x115>
    }
    if (copy_mm(clone_flags, proc) != 0) {
c010c310:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c313:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c317:	8b 45 08             	mov    0x8(%ebp),%eax
c010c31a:	89 04 24             	mov    %eax,(%esp)
c010c31d:	e8 6f fd ff ff       	call   c010c091 <copy_mm>
c010c322:	85 c0                	test   %eax,%eax
c010c324:	74 0e                	je     c010c334 <do_fork+0xaf>
        goto bad_fork_cleanup_kstack;
c010c326:	90                   	nop
    ret = proc->pid;
fork_out:
    return ret;

bad_fork_cleanup_kstack:
    put_kstack(proc);
c010c327:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c32a:	89 04 24             	mov    %eax,(%esp)
c010c32d:	e8 6c fc ff ff       	call   c010bf9e <put_kstack>
c010c332:	eb 66                	jmp    c010c39a <do_fork+0x115>
        goto bad_fork_cleanup_proc;
    }
    if (copy_mm(clone_flags, proc) != 0) {
        goto bad_fork_cleanup_kstack;
    }
    copy_thread(proc, stack, tf);
c010c334:	8b 45 10             	mov    0x10(%ebp),%eax
c010c337:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c33b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c33e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c342:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c345:	89 04 24             	mov    %eax,(%esp)
c010c348:	e8 60 fe ff ff       	call   c010c1ad <copy_thread>

    bool intr_flag;
    local_intr_save(intr_flag);
c010c34d:	e8 a3 f3 ff ff       	call   c010b6f5 <__intr_save>
c010c352:	89 45 ec             	mov    %eax,-0x14(%ebp)
    {
        proc->pid = get_pid();
c010c355:	e8 e9 f8 ff ff       	call   c010bc43 <get_pid>
c010c35a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010c35d:	89 42 04             	mov    %eax,0x4(%edx)
        hash_proc(proc);
c010c360:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c363:	89 04 24             	mov    %eax,(%esp)
c010c366:	e8 5d fa ff ff       	call   c010bdc8 <hash_proc>
        set_links(proc);
c010c36b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c36e:	89 04 24             	mov    %eax,(%esp)
c010c371:	e8 72 f7 ff ff       	call   c010bae8 <set_links>

    }
    local_intr_restore(intr_flag);
c010c376:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c379:	89 04 24             	mov    %eax,(%esp)
c010c37c:	e8 9e f3 ff ff       	call   c010b71f <__intr_restore>

    wakeup_proc(proc);
c010c381:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c384:	89 04 24             	mov    %eax,(%esp)
c010c387:	e8 cb 15 00 00       	call   c010d957 <wakeup_proc>

    ret = proc->pid;
c010c38c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c38f:	8b 40 04             	mov    0x4(%eax),%eax
c010c392:	89 45 f4             	mov    %eax,-0xc(%ebp)
fork_out:
    return ret;
c010c395:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c398:	eb 0d                	jmp    c010c3a7 <do_fork+0x122>

bad_fork_cleanup_kstack:
    put_kstack(proc);
bad_fork_cleanup_proc:
    kfree(proc);
c010c39a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c39d:	89 04 24             	mov    %eax,(%esp)
c010c3a0:	e8 42 9d ff ff       	call   c01060e7 <kfree>
    goto fork_out;
c010c3a5:	eb ee                	jmp    c010c395 <do_fork+0x110>
}
c010c3a7:	c9                   	leave  
c010c3a8:	c3                   	ret    

c010c3a9 <do_exit>:
// do_exit - called by sys_exit
//   1. call exit_mmap & put_pgdir & mm_destroy to free the almost all memory space of process
//   2. set process' state as PROC_ZOMBIE, then call wakeup_proc(parent) to ask parent reclaim itself.
//   3. call scheduler to switch to other process
int
do_exit(int error_code) {
c010c3a9:	55                   	push   %ebp
c010c3aa:	89 e5                	mov    %esp,%ebp
c010c3ac:	83 ec 28             	sub    $0x28,%esp
    if (current == idleproc) {
c010c3af:	8b 15 48 64 1c c0    	mov    0xc01c6448,%edx
c010c3b5:	a1 40 64 1c c0       	mov    0xc01c6440,%eax
c010c3ba:	39 c2                	cmp    %eax,%edx
c010c3bc:	75 1c                	jne    c010c3da <do_exit+0x31>
        panic("idleproc exit.\n");
c010c3be:	c7 44 24 08 36 14 11 	movl   $0xc0111436,0x8(%esp)
c010c3c5:	c0 
c010c3c6:	c7 44 24 04 d7 01 00 	movl   $0x1d7,0x4(%esp)
c010c3cd:	00 
c010c3ce:	c7 04 24 f4 13 11 c0 	movl   $0xc01113f4,(%esp)
c010c3d5:	e8 83 5e ff ff       	call   c010225d <__panic>
    }
    if (current == initproc) {
c010c3da:	8b 15 48 64 1c c0    	mov    0xc01c6448,%edx
c010c3e0:	a1 44 64 1c c0       	mov    0xc01c6444,%eax
c010c3e5:	39 c2                	cmp    %eax,%edx
c010c3e7:	75 1c                	jne    c010c405 <do_exit+0x5c>
        panic("initproc exit.\n");
c010c3e9:	c7 44 24 08 46 14 11 	movl   $0xc0111446,0x8(%esp)
c010c3f0:	c0 
c010c3f1:	c7 44 24 04 da 01 00 	movl   $0x1da,0x4(%esp)
c010c3f8:	00 
c010c3f9:	c7 04 24 f4 13 11 c0 	movl   $0xc01113f4,(%esp)
c010c400:	e8 58 5e ff ff       	call   c010225d <__panic>
    }
    
    struct mm_struct *mm = current->mm;
c010c405:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c010c40a:	8b 40 18             	mov    0x18(%eax),%eax
c010c40d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (mm != NULL) {
c010c410:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c414:	74 4a                	je     c010c460 <do_exit+0xb7>
        lcr3(boot_cr3);
c010c416:	a1 ec 84 1c c0       	mov    0xc01c84ec,%eax
c010c41b:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010c41e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c421:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010c424:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c427:	89 04 24             	mov    %eax,(%esp)
c010c42a:	e8 3a f4 ff ff       	call   c010b869 <mm_count_dec>
c010c42f:	85 c0                	test   %eax,%eax
c010c431:	75 21                	jne    c010c454 <do_exit+0xab>
            exit_mmap(mm);
c010c433:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c436:	89 04 24             	mov    %eax,(%esp)
c010c439:	e8 f9 d4 ff ff       	call   c0109937 <exit_mmap>
            put_pgdir(mm);
c010c43e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c441:	89 04 24             	mov    %eax,(%esp)
c010c444:	e8 22 fc ff ff       	call   c010c06b <put_pgdir>
            mm_destroy(mm);
c010c449:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c44c:	89 04 24             	mov    %eax,(%esp)
c010c44f:	e8 24 d2 ff ff       	call   c0109678 <mm_destroy>
        }
        current->mm = NULL;
c010c454:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c010c459:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    current->state = PROC_ZOMBIE;
c010c460:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c010c465:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    current->exit_code = error_code;
c010c46b:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c010c470:	8b 55 08             	mov    0x8(%ebp),%edx
c010c473:	89 90 8c 00 00 00    	mov    %edx,0x8c(%eax)
    
    bool intr_flag;
    struct proc_struct *proc;
    local_intr_save(intr_flag);
c010c479:	e8 77 f2 ff ff       	call   c010b6f5 <__intr_save>
c010c47e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        proc = current->parent;
c010c481:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c010c486:	8b 40 14             	mov    0x14(%eax),%eax
c010c489:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (proc->wait_state == WT_CHILD) {
c010c48c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c48f:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010c495:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010c49a:	75 10                	jne    c010c4ac <do_exit+0x103>
            wakeup_proc(proc);
c010c49c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c49f:	89 04 24             	mov    %eax,(%esp)
c010c4a2:	e8 b0 14 00 00       	call   c010d957 <wakeup_proc>
        }
        while (current->cptr != NULL) {
c010c4a7:	e9 ac 00 00 00       	jmp    c010c558 <do_exit+0x1af>
c010c4ac:	e9 a7 00 00 00       	jmp    c010c558 <do_exit+0x1af>
            proc = current->cptr;
c010c4b1:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c010c4b6:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010c4bc:	89 45 ec             	mov    %eax,-0x14(%ebp)
            current->cptr = proc->optr;
c010c4bf:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c010c4c4:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c4c7:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010c4cd:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    
            proc->yptr = NULL;
c010c4d3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c4d6:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010c4dd:	00 00 00 
            if ((proc->optr = initproc->cptr) != NULL) {
c010c4e0:	a1 44 64 1c c0       	mov    0xc01c6444,%eax
c010c4e5:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c010c4eb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c4ee:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010c4f4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c4f7:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010c4fd:	85 c0                	test   %eax,%eax
c010c4ff:	74 14                	je     c010c515 <do_exit+0x16c>
                initproc->cptr->yptr = proc;
c010c501:	a1 44 64 1c c0       	mov    0xc01c6444,%eax
c010c506:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010c50c:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c50f:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
            }
            proc->parent = initproc;
c010c515:	8b 15 44 64 1c c0    	mov    0xc01c6444,%edx
c010c51b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c51e:	89 50 14             	mov    %edx,0x14(%eax)
            initproc->cptr = proc;
c010c521:	a1 44 64 1c c0       	mov    0xc01c6444,%eax
c010c526:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c529:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
            if (proc->state == PROC_ZOMBIE) {
c010c52f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c532:	8b 00                	mov    (%eax),%eax
c010c534:	83 f8 03             	cmp    $0x3,%eax
c010c537:	75 1f                	jne    c010c558 <do_exit+0x1af>
                if (initproc->wait_state == WT_CHILD) {
c010c539:	a1 44 64 1c c0       	mov    0xc01c6444,%eax
c010c53e:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010c544:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010c549:	75 0d                	jne    c010c558 <do_exit+0x1af>
                    wakeup_proc(initproc);
c010c54b:	a1 44 64 1c c0       	mov    0xc01c6444,%eax
c010c550:	89 04 24             	mov    %eax,(%esp)
c010c553:	e8 ff 13 00 00       	call   c010d957 <wakeup_proc>
    {
        proc = current->parent;
        if (proc->wait_state == WT_CHILD) {
            wakeup_proc(proc);
        }
        while (current->cptr != NULL) {
c010c558:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c010c55d:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010c563:	85 c0                	test   %eax,%eax
c010c565:	0f 85 46 ff ff ff    	jne    c010c4b1 <do_exit+0x108>
                    wakeup_proc(initproc);
                }
            }
        }
    }
    local_intr_restore(intr_flag);
c010c56b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c56e:	89 04 24             	mov    %eax,(%esp)
c010c571:	e8 a9 f1 ff ff       	call   c010b71f <__intr_restore>
    
    schedule();
c010c576:	e8 78 14 00 00       	call   c010d9f3 <schedule>
    panic("do_exit will not return!! %d.\n", current->pid);
c010c57b:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c010c580:	8b 40 04             	mov    0x4(%eax),%eax
c010c583:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010c587:	c7 44 24 08 58 14 11 	movl   $0xc0111458,0x8(%esp)
c010c58e:	c0 
c010c58f:	c7 44 24 04 06 02 00 	movl   $0x206,0x4(%esp)
c010c596:	00 
c010c597:	c7 04 24 f4 13 11 c0 	movl   $0xc01113f4,(%esp)
c010c59e:	e8 ba 5c ff ff       	call   c010225d <__panic>

c010c5a3 <load_icode>:
/* load_icode - load the content of binary program(ELF format) as the new content of current process
 * @binary:  the memory addr of the content of binary program
 * @size:  the size of the content of binary program
 */
static int
load_icode(unsigned char *binary, size_t size) {
c010c5a3:	55                   	push   %ebp
c010c5a4:	89 e5                	mov    %esp,%ebp
c010c5a6:	83 ec 78             	sub    $0x78,%esp
    if (current->mm != NULL) {
c010c5a9:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c010c5ae:	8b 40 18             	mov    0x18(%eax),%eax
c010c5b1:	85 c0                	test   %eax,%eax
c010c5b3:	74 1c                	je     c010c5d1 <load_icode+0x2e>
        panic("load_icode: current->mm must be empty.\n");
c010c5b5:	c7 44 24 08 78 14 11 	movl   $0xc0111478,0x8(%esp)
c010c5bc:	c0 
c010c5bd:	c7 44 24 04 10 02 00 	movl   $0x210,0x4(%esp)
c010c5c4:	00 
c010c5c5:	c7 04 24 f4 13 11 c0 	movl   $0xc01113f4,(%esp)
c010c5cc:	e8 8c 5c ff ff       	call   c010225d <__panic>
    }

    int ret = -E_NO_MEM;
c010c5d1:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    struct mm_struct *mm;
    //(1) create a new mm for current process
    if ((mm = mm_create()) == NULL) {
c010c5d8:	e8 36 cd ff ff       	call   c0109313 <mm_create>
c010c5dd:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010c5e0:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c010c5e4:	75 06                	jne    c010c5ec <load_icode+0x49>
        goto bad_mm;
c010c5e6:	90                   	nop
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
bad_mm:
    goto out;
c010c5e7:	e9 ef 05 00 00       	jmp    c010cbdb <load_icode+0x638>
    //(1) create a new mm for current process
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
    }
    //(2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT
    if (setup_pgdir(mm) != 0) {
c010c5ec:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010c5ef:	89 04 24             	mov    %eax,(%esp)
c010c5f2:	e8 cd f9 ff ff       	call   c010bfc4 <setup_pgdir>
c010c5f7:	85 c0                	test   %eax,%eax
c010c5f9:	74 05                	je     c010c600 <load_icode+0x5d>
        goto bad_pgdir_cleanup_mm;
c010c5fb:	e9 f6 05 00 00       	jmp    c010cbf6 <load_icode+0x653>
    }
    //(3) copy TEXT/DATA section, build BSS parts in binary to memory space of process
    struct Page *page;
    //(3.1) get the file header of the bianry program (ELF format)
    struct elfhdr *elf = (struct elfhdr *)binary;
c010c600:	8b 45 08             	mov    0x8(%ebp),%eax
c010c603:	89 45 cc             	mov    %eax,-0x34(%ebp)
    //(3.2) get the entry of the program section headers of the bianry program (ELF format)
    struct proghdr *ph = (struct proghdr *)(binary + elf->e_phoff);
c010c606:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010c609:	8b 50 1c             	mov    0x1c(%eax),%edx
c010c60c:	8b 45 08             	mov    0x8(%ebp),%eax
c010c60f:	01 d0                	add    %edx,%eax
c010c611:	89 45 ec             	mov    %eax,-0x14(%ebp)
    //(3.3) This program is valid?
    if (elf->e_magic != ELF_MAGIC) {
c010c614:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010c617:	8b 00                	mov    (%eax),%eax
c010c619:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
c010c61e:	74 0c                	je     c010c62c <load_icode+0x89>
        ret = -E_INVAL_ELF;
c010c620:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
        goto bad_elf_cleanup_pgdir;
c010c627:	e9 bf 05 00 00       	jmp    c010cbeb <load_icode+0x648>
    }

    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
c010c62c:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010c62f:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c010c633:	0f b7 c0             	movzwl %ax,%eax
c010c636:	c1 e0 05             	shl    $0x5,%eax
c010c639:	89 c2                	mov    %eax,%edx
c010c63b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c63e:	01 d0                	add    %edx,%eax
c010c640:	89 45 c8             	mov    %eax,-0x38(%ebp)
    for (; ph < ph_end; ph ++) {
c010c643:	e9 13 03 00 00       	jmp    c010c95b <load_icode+0x3b8>
    //(3.4) find every program section headers
        if (ph->p_type != ELF_PT_LOAD) {
c010c648:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c64b:	8b 00                	mov    (%eax),%eax
c010c64d:	83 f8 01             	cmp    $0x1,%eax
c010c650:	74 05                	je     c010c657 <load_icode+0xb4>
            continue ;
c010c652:	e9 00 03 00 00       	jmp    c010c957 <load_icode+0x3b4>
        }
        if (ph->p_filesz > ph->p_memsz) {
c010c657:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c65a:	8b 50 10             	mov    0x10(%eax),%edx
c010c65d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c660:	8b 40 14             	mov    0x14(%eax),%eax
c010c663:	39 c2                	cmp    %eax,%edx
c010c665:	76 0c                	jbe    c010c673 <load_icode+0xd0>
            ret = -E_INVAL_ELF;
c010c667:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
            goto bad_cleanup_mmap;
c010c66e:	e9 6d 05 00 00       	jmp    c010cbe0 <load_icode+0x63d>
        }
        if (ph->p_filesz == 0) {
c010c673:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c676:	8b 40 10             	mov    0x10(%eax),%eax
c010c679:	85 c0                	test   %eax,%eax
c010c67b:	75 05                	jne    c010c682 <load_icode+0xdf>
            continue ;
c010c67d:	e9 d5 02 00 00       	jmp    c010c957 <load_icode+0x3b4>
        }
    //(3.5) call mm_map fun to setup the new vma ( ph->p_va, ph->p_memsz)
        vm_flags = 0, perm = PTE_U;
c010c682:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c010c689:	c7 45 e4 04 00 00 00 	movl   $0x4,-0x1c(%ebp)
        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
c010c690:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c693:	8b 40 18             	mov    0x18(%eax),%eax
c010c696:	83 e0 01             	and    $0x1,%eax
c010c699:	85 c0                	test   %eax,%eax
c010c69b:	74 04                	je     c010c6a1 <load_icode+0xfe>
c010c69d:	83 4d e8 04          	orl    $0x4,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
c010c6a1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c6a4:	8b 40 18             	mov    0x18(%eax),%eax
c010c6a7:	83 e0 02             	and    $0x2,%eax
c010c6aa:	85 c0                	test   %eax,%eax
c010c6ac:	74 04                	je     c010c6b2 <load_icode+0x10f>
c010c6ae:	83 4d e8 02          	orl    $0x2,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
c010c6b2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c6b5:	8b 40 18             	mov    0x18(%eax),%eax
c010c6b8:	83 e0 04             	and    $0x4,%eax
c010c6bb:	85 c0                	test   %eax,%eax
c010c6bd:	74 04                	je     c010c6c3 <load_icode+0x120>
c010c6bf:	83 4d e8 01          	orl    $0x1,-0x18(%ebp)
        if (vm_flags & VM_WRITE) perm |= PTE_W;
c010c6c3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c6c6:	83 e0 02             	and    $0x2,%eax
c010c6c9:	85 c0                	test   %eax,%eax
c010c6cb:	74 04                	je     c010c6d1 <load_icode+0x12e>
c010c6cd:	83 4d e4 02          	orl    $0x2,-0x1c(%ebp)
        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
c010c6d1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c6d4:	8b 50 14             	mov    0x14(%eax),%edx
c010c6d7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c6da:	8b 40 08             	mov    0x8(%eax),%eax
c010c6dd:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010c6e4:	00 
c010c6e5:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010c6e8:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c010c6ec:	89 54 24 08          	mov    %edx,0x8(%esp)
c010c6f0:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c6f4:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010c6f7:	89 04 24             	mov    %eax,(%esp)
c010c6fa:	e8 1b d0 ff ff       	call   c010971a <mm_map>
c010c6ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c702:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c706:	74 05                	je     c010c70d <load_icode+0x16a>
            goto bad_cleanup_mmap;
c010c708:	e9 d3 04 00 00       	jmp    c010cbe0 <load_icode+0x63d>
        }
        unsigned char *from = binary + ph->p_offset;
c010c70d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c710:	8b 50 04             	mov    0x4(%eax),%edx
c010c713:	8b 45 08             	mov    0x8(%ebp),%eax
c010c716:	01 d0                	add    %edx,%eax
c010c718:	89 45 e0             	mov    %eax,-0x20(%ebp)
        size_t off, size;
        uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE);
c010c71b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c71e:	8b 40 08             	mov    0x8(%eax),%eax
c010c721:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010c724:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010c727:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c010c72a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010c72d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010c732:	89 45 d4             	mov    %eax,-0x2c(%ebp)

        ret = -E_NO_MEM;
c010c735:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
c010c73c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c73f:	8b 50 08             	mov    0x8(%eax),%edx
c010c742:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c745:	8b 40 10             	mov    0x10(%eax),%eax
c010c748:	01 d0                	add    %edx,%eax
c010c74a:	89 45 c0             	mov    %eax,-0x40(%ebp)
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
c010c74d:	e9 90 00 00 00       	jmp    c010c7e2 <load_icode+0x23f>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010c752:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010c755:	8b 40 0c             	mov    0xc(%eax),%eax
c010c758:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c75b:	89 54 24 08          	mov    %edx,0x8(%esp)
c010c75f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010c762:	89 54 24 04          	mov    %edx,0x4(%esp)
c010c766:	89 04 24             	mov    %eax,(%esp)
c010c769:	e8 c4 ac ff ff       	call   c0107432 <pgdir_alloc_page>
c010c76e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c771:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c775:	75 05                	jne    c010c77c <load_icode+0x1d9>
                goto bad_cleanup_mmap;
c010c777:	e9 64 04 00 00       	jmp    c010cbe0 <load_icode+0x63d>
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010c77c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010c77f:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010c782:	29 c2                	sub    %eax,%edx
c010c784:	89 d0                	mov    %edx,%eax
c010c786:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010c789:	b8 00 10 00 00       	mov    $0x1000,%eax
c010c78e:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010c791:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010c794:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010c79b:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010c79e:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010c7a1:	73 0d                	jae    c010c7b0 <load_icode+0x20d>
                size -= la - end;
c010c7a3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010c7a6:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010c7a9:	29 c2                	sub    %eax,%edx
c010c7ab:	89 d0                	mov    %edx,%eax
c010c7ad:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memcpy(page2kva(page) + off, from, size);
c010c7b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c7b3:	89 04 24             	mov    %eax,(%esp)
c010c7b6:	e8 f6 ef ff ff       	call   c010b7b1 <page2kva>
c010c7bb:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010c7be:	01 c2                	add    %eax,%edx
c010c7c0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c7c3:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c7c7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c7ca:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c7ce:	89 14 24             	mov    %edx,(%esp)
c010c7d1:	e8 b8 23 00 00       	call   c010eb8e <memcpy>
            start += size, from += size;
c010c7d6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c7d9:	01 45 d8             	add    %eax,-0x28(%ebp)
c010c7dc:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c7df:	01 45 e0             	add    %eax,-0x20(%ebp)
        ret = -E_NO_MEM;

     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
c010c7e2:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010c7e5:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010c7e8:	0f 82 64 ff ff ff    	jb     c010c752 <load_icode+0x1af>
            memcpy(page2kva(page) + off, from, size);
            start += size, from += size;
        }

      //(3.6.2) build BSS section of binary program
        end = ph->p_va + ph->p_memsz;
c010c7ee:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c7f1:	8b 50 08             	mov    0x8(%eax),%edx
c010c7f4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c7f7:	8b 40 14             	mov    0x14(%eax),%eax
c010c7fa:	01 d0                	add    %edx,%eax
c010c7fc:	89 45 c0             	mov    %eax,-0x40(%ebp)
        if (start < la) {
c010c7ff:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010c802:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010c805:	0f 83 b0 00 00 00    	jae    c010c8bb <load_icode+0x318>
            /* ph->p_memsz == ph->p_filesz */
            if (start == end) {
c010c80b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010c80e:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010c811:	75 05                	jne    c010c818 <load_icode+0x275>
                continue ;
c010c813:	e9 3f 01 00 00       	jmp    c010c957 <load_icode+0x3b4>
            }
            off = start + PGSIZE - la, size = PGSIZE - off;
c010c818:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010c81b:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010c81e:	29 c2                	sub    %eax,%edx
c010c820:	89 d0                	mov    %edx,%eax
c010c822:	05 00 10 00 00       	add    $0x1000,%eax
c010c827:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010c82a:	b8 00 10 00 00       	mov    $0x1000,%eax
c010c82f:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010c832:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (end < la) {
c010c835:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010c838:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010c83b:	73 0d                	jae    c010c84a <load_icode+0x2a7>
                size -= la - end;
c010c83d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010c840:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010c843:	29 c2                	sub    %eax,%edx
c010c845:	89 d0                	mov    %edx,%eax
c010c847:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010c84a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c84d:	89 04 24             	mov    %eax,(%esp)
c010c850:	e8 5c ef ff ff       	call   c010b7b1 <page2kva>
c010c855:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010c858:	01 c2                	add    %eax,%edx
c010c85a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c85d:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c861:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c868:	00 
c010c869:	89 14 24             	mov    %edx,(%esp)
c010c86c:	e8 3b 22 00 00       	call   c010eaac <memset>
            start += size;
c010c871:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c874:	01 45 d8             	add    %eax,-0x28(%ebp)
            assert((end < la && start == end) || (end >= la && start == la));
c010c877:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010c87a:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010c87d:	73 08                	jae    c010c887 <load_icode+0x2e4>
c010c87f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010c882:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010c885:	74 34                	je     c010c8bb <load_icode+0x318>
c010c887:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010c88a:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010c88d:	72 08                	jb     c010c897 <load_icode+0x2f4>
c010c88f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010c892:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010c895:	74 24                	je     c010c8bb <load_icode+0x318>
c010c897:	c7 44 24 0c a0 14 11 	movl   $0xc01114a0,0xc(%esp)
c010c89e:	c0 
c010c89f:	c7 44 24 08 21 14 11 	movl   $0xc0111421,0x8(%esp)
c010c8a6:	c0 
c010c8a7:	c7 44 24 04 62 02 00 	movl   $0x262,0x4(%esp)
c010c8ae:	00 
c010c8af:	c7 04 24 f4 13 11 c0 	movl   $0xc01113f4,(%esp)
c010c8b6:	e8 a2 59 ff ff       	call   c010225d <__panic>
        }
        while (start < end) {
c010c8bb:	e9 8b 00 00 00       	jmp    c010c94b <load_icode+0x3a8>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010c8c0:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010c8c3:	8b 40 0c             	mov    0xc(%eax),%eax
c010c8c6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c8c9:	89 54 24 08          	mov    %edx,0x8(%esp)
c010c8cd:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010c8d0:	89 54 24 04          	mov    %edx,0x4(%esp)
c010c8d4:	89 04 24             	mov    %eax,(%esp)
c010c8d7:	e8 56 ab ff ff       	call   c0107432 <pgdir_alloc_page>
c010c8dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c8df:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c8e3:	75 05                	jne    c010c8ea <load_icode+0x347>
                goto bad_cleanup_mmap;
c010c8e5:	e9 f6 02 00 00       	jmp    c010cbe0 <load_icode+0x63d>
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010c8ea:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010c8ed:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010c8f0:	29 c2                	sub    %eax,%edx
c010c8f2:	89 d0                	mov    %edx,%eax
c010c8f4:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010c8f7:	b8 00 10 00 00       	mov    $0x1000,%eax
c010c8fc:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010c8ff:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010c902:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010c909:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010c90c:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010c90f:	73 0d                	jae    c010c91e <load_icode+0x37b>
                size -= la - end;
c010c911:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010c914:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010c917:	29 c2                	sub    %eax,%edx
c010c919:	89 d0                	mov    %edx,%eax
c010c91b:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010c91e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c921:	89 04 24             	mov    %eax,(%esp)
c010c924:	e8 88 ee ff ff       	call   c010b7b1 <page2kva>
c010c929:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010c92c:	01 c2                	add    %eax,%edx
c010c92e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c931:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c935:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c93c:	00 
c010c93d:	89 14 24             	mov    %edx,(%esp)
c010c940:	e8 67 21 00 00       	call   c010eaac <memset>
            start += size;
c010c945:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c948:	01 45 d8             	add    %eax,-0x28(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
            start += size;
            assert((end < la && start == end) || (end >= la && start == la));
        }
        while (start < end) {
c010c94b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010c94e:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010c951:	0f 82 69 ff ff ff    	jb     c010c8c0 <load_icode+0x31d>
        goto bad_elf_cleanup_pgdir;
    }

    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
    for (; ph < ph_end; ph ++) {
c010c957:	83 45 ec 20          	addl   $0x20,-0x14(%ebp)
c010c95b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c95e:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c010c961:	0f 82 e1 fc ff ff    	jb     c010c648 <load_icode+0xa5>
            memset(page2kva(page) + off, 0, size);
            start += size;
        }
    }
    //(4) build user stack memory
    vm_flags = VM_READ | VM_WRITE | VM_STACK;
c010c967:	c7 45 e8 0b 00 00 00 	movl   $0xb,-0x18(%ebp)
    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
c010c96e:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010c975:	00 
c010c976:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c979:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010c97d:	c7 44 24 08 00 00 10 	movl   $0x100000,0x8(%esp)
c010c984:	00 
c010c985:	c7 44 24 04 00 00 f0 	movl   $0xaff00000,0x4(%esp)
c010c98c:	af 
c010c98d:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010c990:	89 04 24             	mov    %eax,(%esp)
c010c993:	e8 82 cd ff ff       	call   c010971a <mm_map>
c010c998:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c99b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c99f:	74 05                	je     c010c9a6 <load_icode+0x403>
        goto bad_cleanup_mmap;
c010c9a1:	e9 3a 02 00 00       	jmp    c010cbe0 <load_icode+0x63d>
    }
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-PGSIZE , PTE_USER) != NULL);
c010c9a6:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010c9a9:	8b 40 0c             	mov    0xc(%eax),%eax
c010c9ac:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010c9b3:	00 
c010c9b4:	c7 44 24 04 00 f0 ff 	movl   $0xaffff000,0x4(%esp)
c010c9bb:	af 
c010c9bc:	89 04 24             	mov    %eax,(%esp)
c010c9bf:	e8 6e aa ff ff       	call   c0107432 <pgdir_alloc_page>
c010c9c4:	85 c0                	test   %eax,%eax
c010c9c6:	75 24                	jne    c010c9ec <load_icode+0x449>
c010c9c8:	c7 44 24 0c dc 14 11 	movl   $0xc01114dc,0xc(%esp)
c010c9cf:	c0 
c010c9d0:	c7 44 24 08 21 14 11 	movl   $0xc0111421,0x8(%esp)
c010c9d7:	c0 
c010c9d8:	c7 44 24 04 75 02 00 	movl   $0x275,0x4(%esp)
c010c9df:	00 
c010c9e0:	c7 04 24 f4 13 11 c0 	movl   $0xc01113f4,(%esp)
c010c9e7:	e8 71 58 ff ff       	call   c010225d <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-2*PGSIZE , PTE_USER) != NULL);
c010c9ec:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010c9ef:	8b 40 0c             	mov    0xc(%eax),%eax
c010c9f2:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010c9f9:	00 
c010c9fa:	c7 44 24 04 00 e0 ff 	movl   $0xafffe000,0x4(%esp)
c010ca01:	af 
c010ca02:	89 04 24             	mov    %eax,(%esp)
c010ca05:	e8 28 aa ff ff       	call   c0107432 <pgdir_alloc_page>
c010ca0a:	85 c0                	test   %eax,%eax
c010ca0c:	75 24                	jne    c010ca32 <load_icode+0x48f>
c010ca0e:	c7 44 24 0c 20 15 11 	movl   $0xc0111520,0xc(%esp)
c010ca15:	c0 
c010ca16:	c7 44 24 08 21 14 11 	movl   $0xc0111421,0x8(%esp)
c010ca1d:	c0 
c010ca1e:	c7 44 24 04 76 02 00 	movl   $0x276,0x4(%esp)
c010ca25:	00 
c010ca26:	c7 04 24 f4 13 11 c0 	movl   $0xc01113f4,(%esp)
c010ca2d:	e8 2b 58 ff ff       	call   c010225d <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-3*PGSIZE , PTE_USER) != NULL);
c010ca32:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010ca35:	8b 40 0c             	mov    0xc(%eax),%eax
c010ca38:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010ca3f:	00 
c010ca40:	c7 44 24 04 00 d0 ff 	movl   $0xafffd000,0x4(%esp)
c010ca47:	af 
c010ca48:	89 04 24             	mov    %eax,(%esp)
c010ca4b:	e8 e2 a9 ff ff       	call   c0107432 <pgdir_alloc_page>
c010ca50:	85 c0                	test   %eax,%eax
c010ca52:	75 24                	jne    c010ca78 <load_icode+0x4d5>
c010ca54:	c7 44 24 0c 64 15 11 	movl   $0xc0111564,0xc(%esp)
c010ca5b:	c0 
c010ca5c:	c7 44 24 08 21 14 11 	movl   $0xc0111421,0x8(%esp)
c010ca63:	c0 
c010ca64:	c7 44 24 04 77 02 00 	movl   $0x277,0x4(%esp)
c010ca6b:	00 
c010ca6c:	c7 04 24 f4 13 11 c0 	movl   $0xc01113f4,(%esp)
c010ca73:	e8 e5 57 ff ff       	call   c010225d <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-4*PGSIZE , PTE_USER) != NULL);
c010ca78:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010ca7b:	8b 40 0c             	mov    0xc(%eax),%eax
c010ca7e:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010ca85:	00 
c010ca86:	c7 44 24 04 00 c0 ff 	movl   $0xafffc000,0x4(%esp)
c010ca8d:	af 
c010ca8e:	89 04 24             	mov    %eax,(%esp)
c010ca91:	e8 9c a9 ff ff       	call   c0107432 <pgdir_alloc_page>
c010ca96:	85 c0                	test   %eax,%eax
c010ca98:	75 24                	jne    c010cabe <load_icode+0x51b>
c010ca9a:	c7 44 24 0c a8 15 11 	movl   $0xc01115a8,0xc(%esp)
c010caa1:	c0 
c010caa2:	c7 44 24 08 21 14 11 	movl   $0xc0111421,0x8(%esp)
c010caa9:	c0 
c010caaa:	c7 44 24 04 78 02 00 	movl   $0x278,0x4(%esp)
c010cab1:	00 
c010cab2:	c7 04 24 f4 13 11 c0 	movl   $0xc01113f4,(%esp)
c010cab9:	e8 9f 57 ff ff       	call   c010225d <__panic>
    
    //(5) set current process's mm, sr3, and set CR3 reg = physical addr of Page Directory
    mm_count_inc(mm);
c010cabe:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010cac1:	89 04 24             	mov    %eax,(%esp)
c010cac4:	e8 86 ed ff ff       	call   c010b84f <mm_count_inc>
    current->mm = mm;
c010cac9:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c010cace:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010cad1:	89 50 18             	mov    %edx,0x18(%eax)
    current->cr3 = PADDR(mm->pgdir);
c010cad4:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c010cad9:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010cadc:	8b 52 0c             	mov    0xc(%edx),%edx
c010cadf:	89 55 b8             	mov    %edx,-0x48(%ebp)
c010cae2:	81 7d b8 ff ff ff bf 	cmpl   $0xbfffffff,-0x48(%ebp)
c010cae9:	77 23                	ja     c010cb0e <load_icode+0x56b>
c010caeb:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010caee:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010caf2:	c7 44 24 08 d0 13 11 	movl   $0xc01113d0,0x8(%esp)
c010caf9:	c0 
c010cafa:	c7 44 24 04 7d 02 00 	movl   $0x27d,0x4(%esp)
c010cb01:	00 
c010cb02:	c7 04 24 f4 13 11 c0 	movl   $0xc01113f4,(%esp)
c010cb09:	e8 4f 57 ff ff       	call   c010225d <__panic>
c010cb0e:	8b 55 b8             	mov    -0x48(%ebp),%edx
c010cb11:	81 c2 00 00 00 40    	add    $0x40000000,%edx
c010cb17:	89 50 40             	mov    %edx,0x40(%eax)
    lcr3(PADDR(mm->pgdir));
c010cb1a:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010cb1d:	8b 40 0c             	mov    0xc(%eax),%eax
c010cb20:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c010cb23:	81 7d b4 ff ff ff bf 	cmpl   $0xbfffffff,-0x4c(%ebp)
c010cb2a:	77 23                	ja     c010cb4f <load_icode+0x5ac>
c010cb2c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010cb2f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010cb33:	c7 44 24 08 d0 13 11 	movl   $0xc01113d0,0x8(%esp)
c010cb3a:	c0 
c010cb3b:	c7 44 24 04 7e 02 00 	movl   $0x27e,0x4(%esp)
c010cb42:	00 
c010cb43:	c7 04 24 f4 13 11 c0 	movl   $0xc01113f4,(%esp)
c010cb4a:	e8 0e 57 ff ff       	call   c010225d <__panic>
c010cb4f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010cb52:	05 00 00 00 40       	add    $0x40000000,%eax
c010cb57:	89 45 ac             	mov    %eax,-0x54(%ebp)
c010cb5a:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010cb5d:	0f 22 d8             	mov    %eax,%cr3

    //(6) setup trapframe for user environment
    struct trapframe *tf = current->tf;
c010cb60:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c010cb65:	8b 40 3c             	mov    0x3c(%eax),%eax
c010cb68:	89 45 b0             	mov    %eax,-0x50(%ebp)
    memset(tf, 0, sizeof(struct trapframe));
c010cb6b:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
c010cb72:	00 
c010cb73:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010cb7a:	00 
c010cb7b:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010cb7e:	89 04 24             	mov    %eax,(%esp)
c010cb81:	e8 26 1f 00 00       	call   c010eaac <memset>
     *          tf_ds=tf_es=tf_ss should be USER_DS segment
     *          tf_esp should be the top addr of user stack (USTACKTOP)
     *          tf_eip should be the entry point of this binary program (elf->e_entry)
     *          tf_eflags should be set to enable computer to produce Interrupt
     */
    tf->tf_cs = USER_CS;
c010cb86:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010cb89:	66 c7 40 3c 1b 00    	movw   $0x1b,0x3c(%eax)
    tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS;
c010cb8f:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010cb92:	66 c7 40 48 23 00    	movw   $0x23,0x48(%eax)
c010cb98:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010cb9b:	0f b7 50 48          	movzwl 0x48(%eax),%edx
c010cb9f:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010cba2:	66 89 50 28          	mov    %dx,0x28(%eax)
c010cba6:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010cba9:	0f b7 50 28          	movzwl 0x28(%eax),%edx
c010cbad:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010cbb0:	66 89 50 2c          	mov    %dx,0x2c(%eax)
    tf->tf_esp = USTACKTOP;
c010cbb4:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010cbb7:	c7 40 44 00 00 00 b0 	movl   $0xb0000000,0x44(%eax)
    tf->tf_eip = elf->e_entry;
c010cbbe:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010cbc1:	8b 50 18             	mov    0x18(%eax),%edx
c010cbc4:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010cbc7:	89 50 38             	mov    %edx,0x38(%eax)
    tf->tf_eflags = FL_IF;
c010cbca:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010cbcd:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
    ret = 0;
c010cbd4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
out:
    return ret;
c010cbdb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cbde:	eb 23                	jmp    c010cc03 <load_icode+0x660>
bad_cleanup_mmap:
    exit_mmap(mm);
c010cbe0:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010cbe3:	89 04 24             	mov    %eax,(%esp)
c010cbe6:	e8 4c cd ff ff       	call   c0109937 <exit_mmap>
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
c010cbeb:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010cbee:	89 04 24             	mov    %eax,(%esp)
c010cbf1:	e8 75 f4 ff ff       	call   c010c06b <put_pgdir>
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010cbf6:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010cbf9:	89 04 24             	mov    %eax,(%esp)
c010cbfc:	e8 77 ca ff ff       	call   c0109678 <mm_destroy>
bad_mm:
    goto out;
c010cc01:	eb d8                	jmp    c010cbdb <load_icode+0x638>
}
c010cc03:	c9                   	leave  
c010cc04:	c3                   	ret    

c010cc05 <do_execve>:

// do_execve - call exit_mmap(mm)&pug_pgdir(mm) to reclaim memory space of current process
//           - call load_icode to setup new memory space accroding binary prog.
int
do_execve(const char *name, size_t len, unsigned char *binary, size_t size) {
c010cc05:	55                   	push   %ebp
c010cc06:	89 e5                	mov    %esp,%ebp
c010cc08:	83 ec 58             	sub    $0x58,%esp
    struct mm_struct *mm = current->mm;
c010cc0b:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c010cc10:	8b 40 18             	mov    0x18(%eax),%eax
c010cc13:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!user_mem_check(mm, (uintptr_t)name, len, 0)) {
c010cc16:	8b 45 08             	mov    0x8(%ebp),%eax
c010cc19:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010cc20:	00 
c010cc21:	8b 55 0c             	mov    0xc(%ebp),%edx
c010cc24:	89 54 24 08          	mov    %edx,0x8(%esp)
c010cc28:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cc2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cc2f:	89 04 24             	mov    %eax,(%esp)
c010cc32:	e8 da d7 ff ff       	call   c010a411 <user_mem_check>
c010cc37:	85 c0                	test   %eax,%eax
c010cc39:	75 0a                	jne    c010cc45 <do_execve+0x40>
        return -E_INVAL;
c010cc3b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010cc40:	e9 f4 00 00 00       	jmp    c010cd39 <do_execve+0x134>
    }
    if (len > PROC_NAME_LEN) {
c010cc45:	83 7d 0c 32          	cmpl   $0x32,0xc(%ebp)
c010cc49:	76 07                	jbe    c010cc52 <do_execve+0x4d>
        len = PROC_NAME_LEN;
c010cc4b:	c7 45 0c 32 00 00 00 	movl   $0x32,0xc(%ebp)
    }

    char local_name[PROC_NAME_LEN + 1];
    memset(local_name, 0, sizeof(local_name));
c010cc52:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010cc59:	00 
c010cc5a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010cc61:	00 
c010cc62:	8d 45 b9             	lea    -0x47(%ebp),%eax
c010cc65:	89 04 24             	mov    %eax,(%esp)
c010cc68:	e8 3f 1e 00 00       	call   c010eaac <memset>
    memcpy(local_name, name, len);
c010cc6d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cc70:	89 44 24 08          	mov    %eax,0x8(%esp)
c010cc74:	8b 45 08             	mov    0x8(%ebp),%eax
c010cc77:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cc7b:	8d 45 b9             	lea    -0x47(%ebp),%eax
c010cc7e:	89 04 24             	mov    %eax,(%esp)
c010cc81:	e8 08 1f 00 00       	call   c010eb8e <memcpy>

    if (mm != NULL) {
c010cc86:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010cc8a:	74 4a                	je     c010ccd6 <do_execve+0xd1>
        lcr3(boot_cr3);
c010cc8c:	a1 ec 84 1c c0       	mov    0xc01c84ec,%eax
c010cc91:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010cc94:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cc97:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010cc9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cc9d:	89 04 24             	mov    %eax,(%esp)
c010cca0:	e8 c4 eb ff ff       	call   c010b869 <mm_count_dec>
c010cca5:	85 c0                	test   %eax,%eax
c010cca7:	75 21                	jne    c010ccca <do_execve+0xc5>
            exit_mmap(mm);
c010cca9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ccac:	89 04 24             	mov    %eax,(%esp)
c010ccaf:	e8 83 cc ff ff       	call   c0109937 <exit_mmap>
            put_pgdir(mm);
c010ccb4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ccb7:	89 04 24             	mov    %eax,(%esp)
c010ccba:	e8 ac f3 ff ff       	call   c010c06b <put_pgdir>
            mm_destroy(mm);
c010ccbf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ccc2:	89 04 24             	mov    %eax,(%esp)
c010ccc5:	e8 ae c9 ff ff       	call   c0109678 <mm_destroy>
        }
        current->mm = NULL;
c010ccca:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c010cccf:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    int ret;
    if ((ret = load_icode(binary, size)) != 0) {
c010ccd6:	8b 45 14             	mov    0x14(%ebp),%eax
c010ccd9:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ccdd:	8b 45 10             	mov    0x10(%ebp),%eax
c010cce0:	89 04 24             	mov    %eax,(%esp)
c010cce3:	e8 bb f8 ff ff       	call   c010c5a3 <load_icode>
c010cce8:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cceb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ccef:	74 2f                	je     c010cd20 <do_execve+0x11b>
        goto execve_exit;
c010ccf1:	90                   	nop
    }
    set_proc_name(current, local_name);
    return 0;

execve_exit:
    do_exit(ret);
c010ccf2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ccf5:	89 04 24             	mov    %eax,(%esp)
c010ccf8:	e8 ac f6 ff ff       	call   c010c3a9 <do_exit>
    panic("already exit: %e.\n", ret);
c010ccfd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cd00:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010cd04:	c7 44 24 08 eb 15 11 	movl   $0xc01115eb,0x8(%esp)
c010cd0b:	c0 
c010cd0c:	c7 44 24 04 c0 02 00 	movl   $0x2c0,0x4(%esp)
c010cd13:	00 
c010cd14:	c7 04 24 f4 13 11 c0 	movl   $0xc01113f4,(%esp)
c010cd1b:	e8 3d 55 ff ff       	call   c010225d <__panic>
    }
    int ret;
    if ((ret = load_icode(binary, size)) != 0) {
        goto execve_exit;
    }
    set_proc_name(current, local_name);
c010cd20:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c010cd25:	8d 55 b9             	lea    -0x47(%ebp),%edx
c010cd28:	89 54 24 04          	mov    %edx,0x4(%esp)
c010cd2c:	89 04 24             	mov    %eax,(%esp)
c010cd2f:	e8 2f ed ff ff       	call   c010ba63 <set_proc_name>
    return 0;
c010cd34:	b8 00 00 00 00       	mov    $0x0,%eax

execve_exit:
    do_exit(ret);
    panic("already exit: %e.\n", ret);
}
c010cd39:	c9                   	leave  
c010cd3a:	c3                   	ret    

c010cd3b <do_yield>:

// do_yield - ask the scheduler to reschedule
int
do_yield(void) {
c010cd3b:	55                   	push   %ebp
c010cd3c:	89 e5                	mov    %esp,%ebp
    current->need_resched = 1;
c010cd3e:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c010cd43:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    return 0;
c010cd4a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010cd4f:	5d                   	pop    %ebp
c010cd50:	c3                   	ret    

c010cd51 <do_wait>:

// do_wait - wait one OR any children with PROC_ZOMBIE state, and free memory space of kernel stack
//         - proc struct of this child.
// NOTE: only after do_wait function, all resources of the child proces are free.
int
do_wait(int pid, int *code_store) {
c010cd51:	55                   	push   %ebp
c010cd52:	89 e5                	mov    %esp,%ebp
c010cd54:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = current->mm;
c010cd57:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c010cd5c:	8b 40 18             	mov    0x18(%eax),%eax
c010cd5f:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (code_store != NULL) {
c010cd62:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010cd66:	74 30                	je     c010cd98 <do_wait+0x47>
        if (!user_mem_check(mm, (uintptr_t)code_store, sizeof(int), 1)) {
c010cd68:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cd6b:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010cd72:	00 
c010cd73:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c010cd7a:	00 
c010cd7b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cd7f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cd82:	89 04 24             	mov    %eax,(%esp)
c010cd85:	e8 87 d6 ff ff       	call   c010a411 <user_mem_check>
c010cd8a:	85 c0                	test   %eax,%eax
c010cd8c:	75 0a                	jne    c010cd98 <do_wait+0x47>
            return -E_INVAL;
c010cd8e:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010cd93:	e9 57 01 00 00       	jmp    c010ceef <do_wait+0x19e>
    }

    struct proc_struct *proc;
    bool intr_flag, haskid;
repeat:
    haskid = 0;
c010cd98:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    if (pid != 0) {
c010cd9f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010cda3:	74 39                	je     c010cdde <do_wait+0x8d>
        proc = find_proc(pid);
c010cda5:	8b 45 08             	mov    0x8(%ebp),%eax
c010cda8:	89 04 24             	mov    %eax,(%esp)
c010cdab:	e8 cc f0 ff ff       	call   c010be7c <find_proc>
c010cdb0:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (proc != NULL && proc->parent == current) {
c010cdb3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010cdb7:	74 5a                	je     c010ce13 <do_wait+0xc2>
c010cdb9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cdbc:	8b 50 14             	mov    0x14(%eax),%edx
c010cdbf:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c010cdc4:	39 c2                	cmp    %eax,%edx
c010cdc6:	75 4b                	jne    c010ce13 <do_wait+0xc2>
            haskid = 1;
c010cdc8:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010cdcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cdd2:	8b 00                	mov    (%eax),%eax
c010cdd4:	83 f8 03             	cmp    $0x3,%eax
c010cdd7:	75 3a                	jne    c010ce13 <do_wait+0xc2>
                goto found;
c010cdd9:	e9 89 00 00 00       	jmp    c010ce67 <do_wait+0x116>
            }
        }
    }
    else {
        proc = current->cptr;
c010cdde:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c010cde3:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010cde9:	89 45 f4             	mov    %eax,-0xc(%ebp)
        for (; proc != NULL; proc = proc->optr) {
c010cdec:	eb 1f                	jmp    c010ce0d <do_wait+0xbc>
            haskid = 1;
c010cdee:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010cdf5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cdf8:	8b 00                	mov    (%eax),%eax
c010cdfa:	83 f8 03             	cmp    $0x3,%eax
c010cdfd:	75 02                	jne    c010ce01 <do_wait+0xb0>
                goto found;
c010cdff:	eb 66                	jmp    c010ce67 <do_wait+0x116>
            }
        }
    }
    else {
        proc = current->cptr;
        for (; proc != NULL; proc = proc->optr) {
c010ce01:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ce04:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010ce0a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ce0d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ce11:	75 db                	jne    c010cdee <do_wait+0x9d>
            if (proc->state == PROC_ZOMBIE) {
                goto found;
            }
        }
    }
    if (haskid) {
c010ce13:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ce17:	74 44                	je     c010ce5d <do_wait+0x10c>
        current->state = PROC_SLEEPING;
c010ce19:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c010ce1e:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        current->wait_state = WT_CHILD;
c010ce24:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c010ce29:	c7 80 90 00 00 00 01 	movl   $0x80000001,0x90(%eax)
c010ce30:	00 00 80 
        schedule();
c010ce33:	e8 bb 0b 00 00       	call   c010d9f3 <schedule>
        if (current->flags & PF_EXITING) {
c010ce38:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c010ce3d:	8b 40 44             	mov    0x44(%eax),%eax
c010ce40:	83 e0 01             	and    $0x1,%eax
c010ce43:	85 c0                	test   %eax,%eax
c010ce45:	74 11                	je     c010ce58 <do_wait+0x107>
            do_exit(-E_KILLED);
c010ce47:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c010ce4e:	e8 56 f5 ff ff       	call   c010c3a9 <do_exit>
        }
        goto repeat;
c010ce53:	e9 40 ff ff ff       	jmp    c010cd98 <do_wait+0x47>
c010ce58:	e9 3b ff ff ff       	jmp    c010cd98 <do_wait+0x47>
    }
    return -E_BAD_PROC;
c010ce5d:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
c010ce62:	e9 88 00 00 00       	jmp    c010ceef <do_wait+0x19e>

found:
    if (proc == idleproc || proc == initproc) {
c010ce67:	a1 40 64 1c c0       	mov    0xc01c6440,%eax
c010ce6c:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010ce6f:	74 0a                	je     c010ce7b <do_wait+0x12a>
c010ce71:	a1 44 64 1c c0       	mov    0xc01c6444,%eax
c010ce76:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010ce79:	75 1c                	jne    c010ce97 <do_wait+0x146>
        panic("wait idleproc or initproc.\n");
c010ce7b:	c7 44 24 08 fe 15 11 	movl   $0xc01115fe,0x8(%esp)
c010ce82:	c0 
c010ce83:	c7 44 24 04 f9 02 00 	movl   $0x2f9,0x4(%esp)
c010ce8a:	00 
c010ce8b:	c7 04 24 f4 13 11 c0 	movl   $0xc01113f4,(%esp)
c010ce92:	e8 c6 53 ff ff       	call   c010225d <__panic>
    }
    if (code_store != NULL) {
c010ce97:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010ce9b:	74 0e                	je     c010ceab <do_wait+0x15a>
        *code_store = proc->exit_code;
c010ce9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cea0:	8b 90 8c 00 00 00    	mov    0x8c(%eax),%edx
c010cea6:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cea9:	89 10                	mov    %edx,(%eax)
    }
    local_intr_save(intr_flag);
c010ceab:	e8 45 e8 ff ff       	call   c010b6f5 <__intr_save>
c010ceb0:	89 45 e8             	mov    %eax,-0x18(%ebp)
    {
        unhash_proc(proc);
c010ceb3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ceb6:	89 04 24             	mov    %eax,(%esp)
c010ceb9:	e8 89 ef ff ff       	call   c010be47 <unhash_proc>
        remove_links(proc);
c010cebe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cec1:	89 04 24             	mov    %eax,(%esp)
c010cec4:	e8 d9 ec ff ff       	call   c010bba2 <remove_links>
    }
    local_intr_restore(intr_flag);
c010cec9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010cecc:	89 04 24             	mov    %eax,(%esp)
c010cecf:	e8 4b e8 ff ff       	call   c010b71f <__intr_restore>
    put_kstack(proc);
c010ced4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ced7:	89 04 24             	mov    %eax,(%esp)
c010ceda:	e8 bf f0 ff ff       	call   c010bf9e <put_kstack>
    kfree(proc);
c010cedf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cee2:	89 04 24             	mov    %eax,(%esp)
c010cee5:	e8 fd 91 ff ff       	call   c01060e7 <kfree>
    return 0;
c010ceea:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ceef:	c9                   	leave  
c010cef0:	c3                   	ret    

c010cef1 <do_kill>:

// do_kill - kill process with pid by set this process's flags with PF_EXITING
int
do_kill(int pid) {
c010cef1:	55                   	push   %ebp
c010cef2:	89 e5                	mov    %esp,%ebp
c010cef4:	83 ec 28             	sub    $0x28,%esp
    struct proc_struct *proc;
    if ((proc = find_proc(pid)) != NULL) {
c010cef7:	8b 45 08             	mov    0x8(%ebp),%eax
c010cefa:	89 04 24             	mov    %eax,(%esp)
c010cefd:	e8 7a ef ff ff       	call   c010be7c <find_proc>
c010cf02:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010cf05:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010cf09:	74 44                	je     c010cf4f <do_kill+0x5e>
        if (!(proc->flags & PF_EXITING)) {
c010cf0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cf0e:	8b 40 44             	mov    0x44(%eax),%eax
c010cf11:	83 e0 01             	and    $0x1,%eax
c010cf14:	85 c0                	test   %eax,%eax
c010cf16:	75 30                	jne    c010cf48 <do_kill+0x57>
            proc->flags |= PF_EXITING;
c010cf18:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cf1b:	8b 40 44             	mov    0x44(%eax),%eax
c010cf1e:	83 c8 01             	or     $0x1,%eax
c010cf21:	89 c2                	mov    %eax,%edx
c010cf23:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cf26:	89 50 44             	mov    %edx,0x44(%eax)
            if (proc->wait_state & WT_INTERRUPTED) {
c010cf29:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cf2c:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010cf32:	85 c0                	test   %eax,%eax
c010cf34:	79 0b                	jns    c010cf41 <do_kill+0x50>
                wakeup_proc(proc);
c010cf36:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cf39:	89 04 24             	mov    %eax,(%esp)
c010cf3c:	e8 16 0a 00 00       	call   c010d957 <wakeup_proc>
            }
            return 0;
c010cf41:	b8 00 00 00 00       	mov    $0x0,%eax
c010cf46:	eb 0c                	jmp    c010cf54 <do_kill+0x63>
        }
        return -E_KILLED;
c010cf48:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
c010cf4d:	eb 05                	jmp    c010cf54 <do_kill+0x63>
    }
    return -E_INVAL;
c010cf4f:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010cf54:	c9                   	leave  
c010cf55:	c3                   	ret    

c010cf56 <kernel_execve>:

// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
static int
kernel_execve(const char *name, unsigned char *binary, size_t size) {
c010cf56:	55                   	push   %ebp
c010cf57:	89 e5                	mov    %esp,%ebp
c010cf59:	57                   	push   %edi
c010cf5a:	56                   	push   %esi
c010cf5b:	53                   	push   %ebx
c010cf5c:	83 ec 2c             	sub    $0x2c,%esp
    int ret, len = strlen(name);
c010cf5f:	8b 45 08             	mov    0x8(%ebp),%eax
c010cf62:	89 04 24             	mov    %eax,(%esp)
c010cf65:	e8 13 18 00 00       	call   c010e77d <strlen>
c010cf6a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    asm volatile (
c010cf6d:	b8 04 00 00 00       	mov    $0x4,%eax
c010cf72:	8b 55 08             	mov    0x8(%ebp),%edx
c010cf75:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c010cf78:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c010cf7b:	8b 75 10             	mov    0x10(%ebp),%esi
c010cf7e:	89 f7                	mov    %esi,%edi
c010cf80:	cd 80                	int    $0x80
c010cf82:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "int %1;"
        : "=a" (ret)
        : "i" (T_SYSCALL), "0" (SYS_exec), "d" (name), "c" (len), "b" (binary), "D" (size)
        : "memory");
    return ret;
c010cf85:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
c010cf88:	83 c4 2c             	add    $0x2c,%esp
c010cf8b:	5b                   	pop    %ebx
c010cf8c:	5e                   	pop    %esi
c010cf8d:	5f                   	pop    %edi
c010cf8e:	5d                   	pop    %ebp
c010cf8f:	c3                   	ret    

c010cf90 <user_main>:

#define KERNEL_EXECVE2(x, xstart, xsize)        __KERNEL_EXECVE2(x, xstart, xsize)

// user_main - kernel thread used to exec a user program
static int
user_main(void *arg) {
c010cf90:	55                   	push   %ebp
c010cf91:	89 e5                	mov    %esp,%ebp
c010cf93:	83 ec 18             	sub    $0x18,%esp
#ifdef TEST
    KERNEL_EXECVE2(TEST, TESTSTART, TESTSIZE);
c010cf96:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c010cf9b:	8b 40 04             	mov    0x4(%eax),%eax
c010cf9e:	c7 44 24 08 1a 16 11 	movl   $0xc011161a,0x8(%esp)
c010cfa5:	c0 
c010cfa6:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cfaa:	c7 04 24 24 16 11 c0 	movl   $0xc0111624,(%esp)
c010cfb1:	e8 25 48 ff ff       	call   c01017db <cprintf>
c010cfb6:	b8 61 79 00 00       	mov    $0x7961,%eax
c010cfbb:	89 44 24 08          	mov    %eax,0x8(%esp)
c010cfbf:	c7 44 24 04 ae 34 15 	movl   $0xc01534ae,0x4(%esp)
c010cfc6:	c0 
c010cfc7:	c7 04 24 1a 16 11 c0 	movl   $0xc011161a,(%esp)
c010cfce:	e8 83 ff ff ff       	call   c010cf56 <kernel_execve>
#else
    KERNEL_EXECVE(exit);
#endif
    panic("user_main execve failed.\n");
c010cfd3:	c7 44 24 08 4b 16 11 	movl   $0xc011164b,0x8(%esp)
c010cfda:	c0 
c010cfdb:	c7 44 24 04 42 03 00 	movl   $0x342,0x4(%esp)
c010cfe2:	00 
c010cfe3:	c7 04 24 f4 13 11 c0 	movl   $0xc01113f4,(%esp)
c010cfea:	e8 6e 52 ff ff       	call   c010225d <__panic>

c010cfef <init_main>:
}

// init_main - the second kernel thread used to create user_main kernel threads
static int
init_main(void *arg) {
c010cfef:	55                   	push   %ebp
c010cff0:	89 e5                	mov    %esp,%ebp
c010cff2:	83 ec 38             	sub    $0x38,%esp
    size_t nr_free_pages_store = nr_free_pages();
c010cff5:	e8 f4 95 ff ff       	call   c01065ee <nr_free_pages>
c010cffa:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t kernel_allocated_store = kallocated();
c010cffd:	e8 ad 8f ff ff       	call   c0105faf <kallocated>
c010d002:	89 45 f0             	mov    %eax,-0x10(%ebp)

    int pid = kernel_thread(user_main, NULL, 0);
c010d005:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010d00c:	00 
c010d00d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d014:	00 
c010d015:	c7 04 24 90 cf 10 c0 	movl   $0xc010cf90,(%esp)
c010d01c:	e8 cf ee ff ff       	call   c010bef0 <kernel_thread>
c010d021:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pid <= 0) {
c010d024:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010d028:	7f 1c                	jg     c010d046 <init_main+0x57>
        panic("create user_main failed.\n");
c010d02a:	c7 44 24 08 65 16 11 	movl   $0xc0111665,0x8(%esp)
c010d031:	c0 
c010d032:	c7 44 24 04 4d 03 00 	movl   $0x34d,0x4(%esp)
c010d039:	00 
c010d03a:	c7 04 24 f4 13 11 c0 	movl   $0xc01113f4,(%esp)
c010d041:	e8 17 52 ff ff       	call   c010225d <__panic>
    }
 extern void check_sync(void);
    check_sync();                // check philosopher sync problem
c010d046:	e8 d3 d9 ff ff       	call   c010aa1e <check_sync>

    while (do_wait(0, NULL) == 0) {
c010d04b:	eb 05                	jmp    c010d052 <init_main+0x63>
        schedule();
c010d04d:	e8 a1 09 00 00       	call   c010d9f3 <schedule>
        panic("create user_main failed.\n");
    }
 extern void check_sync(void);
    check_sync();                // check philosopher sync problem

    while (do_wait(0, NULL) == 0) {
c010d052:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d059:	00 
c010d05a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010d061:	e8 eb fc ff ff       	call   c010cd51 <do_wait>
c010d066:	85 c0                	test   %eax,%eax
c010d068:	74 e3                	je     c010d04d <init_main+0x5e>
        schedule();
    }

    cprintf("all user-mode processes have quit.\n");
c010d06a:	c7 04 24 80 16 11 c0 	movl   $0xc0111680,(%esp)
c010d071:	e8 65 47 ff ff       	call   c01017db <cprintf>
    assert(initproc->cptr == NULL && initproc->yptr == NULL && initproc->optr == NULL);
c010d076:	a1 44 64 1c c0       	mov    0xc01c6444,%eax
c010d07b:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010d081:	85 c0                	test   %eax,%eax
c010d083:	75 1e                	jne    c010d0a3 <init_main+0xb4>
c010d085:	a1 44 64 1c c0       	mov    0xc01c6444,%eax
c010d08a:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010d090:	85 c0                	test   %eax,%eax
c010d092:	75 0f                	jne    c010d0a3 <init_main+0xb4>
c010d094:	a1 44 64 1c c0       	mov    0xc01c6444,%eax
c010d099:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010d09f:	85 c0                	test   %eax,%eax
c010d0a1:	74 24                	je     c010d0c7 <init_main+0xd8>
c010d0a3:	c7 44 24 0c a4 16 11 	movl   $0xc01116a4,0xc(%esp)
c010d0aa:	c0 
c010d0ab:	c7 44 24 08 21 14 11 	movl   $0xc0111421,0x8(%esp)
c010d0b2:	c0 
c010d0b3:	c7 44 24 04 57 03 00 	movl   $0x357,0x4(%esp)
c010d0ba:	00 
c010d0bb:	c7 04 24 f4 13 11 c0 	movl   $0xc01113f4,(%esp)
c010d0c2:	e8 96 51 ff ff       	call   c010225d <__panic>
    assert(nr_process == 2);
c010d0c7:	a1 60 84 1c c0       	mov    0xc01c8460,%eax
c010d0cc:	83 f8 02             	cmp    $0x2,%eax
c010d0cf:	74 24                	je     c010d0f5 <init_main+0x106>
c010d0d1:	c7 44 24 0c ef 16 11 	movl   $0xc01116ef,0xc(%esp)
c010d0d8:	c0 
c010d0d9:	c7 44 24 08 21 14 11 	movl   $0xc0111421,0x8(%esp)
c010d0e0:	c0 
c010d0e1:	c7 44 24 04 58 03 00 	movl   $0x358,0x4(%esp)
c010d0e8:	00 
c010d0e9:	c7 04 24 f4 13 11 c0 	movl   $0xc01113f4,(%esp)
c010d0f0:	e8 68 51 ff ff       	call   c010225d <__panic>
c010d0f5:	c7 45 e8 bc 86 1c c0 	movl   $0xc01c86bc,-0x18(%ebp)
c010d0fc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d0ff:	8b 40 04             	mov    0x4(%eax),%eax
    assert(list_next(&proc_list) == &(initproc->list_link));
c010d102:	8b 15 44 64 1c c0    	mov    0xc01c6444,%edx
c010d108:	83 c2 7c             	add    $0x7c,%edx
c010d10b:	39 d0                	cmp    %edx,%eax
c010d10d:	74 24                	je     c010d133 <init_main+0x144>
c010d10f:	c7 44 24 0c 00 17 11 	movl   $0xc0111700,0xc(%esp)
c010d116:	c0 
c010d117:	c7 44 24 08 21 14 11 	movl   $0xc0111421,0x8(%esp)
c010d11e:	c0 
c010d11f:	c7 44 24 04 59 03 00 	movl   $0x359,0x4(%esp)
c010d126:	00 
c010d127:	c7 04 24 f4 13 11 c0 	movl   $0xc01113f4,(%esp)
c010d12e:	e8 2a 51 ff ff       	call   c010225d <__panic>
c010d133:	c7 45 e4 bc 86 1c c0 	movl   $0xc01c86bc,-0x1c(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010d13a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d13d:	8b 00                	mov    (%eax),%eax
    assert(list_prev(&proc_list) == &(initproc->list_link));
c010d13f:	8b 15 44 64 1c c0    	mov    0xc01c6444,%edx
c010d145:	83 c2 7c             	add    $0x7c,%edx
c010d148:	39 d0                	cmp    %edx,%eax
c010d14a:	74 24                	je     c010d170 <init_main+0x181>
c010d14c:	c7 44 24 0c 30 17 11 	movl   $0xc0111730,0xc(%esp)
c010d153:	c0 
c010d154:	c7 44 24 08 21 14 11 	movl   $0xc0111421,0x8(%esp)
c010d15b:	c0 
c010d15c:	c7 44 24 04 5a 03 00 	movl   $0x35a,0x4(%esp)
c010d163:	00 
c010d164:	c7 04 24 f4 13 11 c0 	movl   $0xc01113f4,(%esp)
c010d16b:	e8 ed 50 ff ff       	call   c010225d <__panic>
    assert(nr_free_pages_store == nr_free_pages());
c010d170:	e8 79 94 ff ff       	call   c01065ee <nr_free_pages>
c010d175:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010d178:	74 24                	je     c010d19e <init_main+0x1af>
c010d17a:	c7 44 24 0c 60 17 11 	movl   $0xc0111760,0xc(%esp)
c010d181:	c0 
c010d182:	c7 44 24 08 21 14 11 	movl   $0xc0111421,0x8(%esp)
c010d189:	c0 
c010d18a:	c7 44 24 04 5b 03 00 	movl   $0x35b,0x4(%esp)
c010d191:	00 
c010d192:	c7 04 24 f4 13 11 c0 	movl   $0xc01113f4,(%esp)
c010d199:	e8 bf 50 ff ff       	call   c010225d <__panic>
    assert(kernel_allocated_store == kallocated());
c010d19e:	e8 0c 8e ff ff       	call   c0105faf <kallocated>
c010d1a3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010d1a6:	74 24                	je     c010d1cc <init_main+0x1dd>
c010d1a8:	c7 44 24 0c 88 17 11 	movl   $0xc0111788,0xc(%esp)
c010d1af:	c0 
c010d1b0:	c7 44 24 08 21 14 11 	movl   $0xc0111421,0x8(%esp)
c010d1b7:	c0 
c010d1b8:	c7 44 24 04 5c 03 00 	movl   $0x35c,0x4(%esp)
c010d1bf:	00 
c010d1c0:	c7 04 24 f4 13 11 c0 	movl   $0xc01113f4,(%esp)
c010d1c7:	e8 91 50 ff ff       	call   c010225d <__panic>
    cprintf("init check memory pass.\n");
c010d1cc:	c7 04 24 af 17 11 c0 	movl   $0xc01117af,(%esp)
c010d1d3:	e8 03 46 ff ff       	call   c01017db <cprintf>
    return 0;
c010d1d8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010d1dd:	c9                   	leave  
c010d1de:	c3                   	ret    

c010d1df <proc_init>:

// proc_init - set up the first kernel thread idleproc "idle" by itself and 
//           - create the second kernel thread init_main
void
proc_init(void) {
c010d1df:	55                   	push   %ebp
c010d1e0:	89 e5                	mov    %esp,%ebp
c010d1e2:	83 ec 28             	sub    $0x28,%esp
c010d1e5:	c7 45 ec bc 86 1c c0 	movl   $0xc01c86bc,-0x14(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010d1ec:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d1ef:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010d1f2:	89 50 04             	mov    %edx,0x4(%eax)
c010d1f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d1f8:	8b 50 04             	mov    0x4(%eax),%edx
c010d1fb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d1fe:	89 10                	mov    %edx,(%eax)
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010d200:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010d207:	eb 26                	jmp    c010d22f <proc_init+0x50>
        list_init(hash_list + i);
c010d209:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d20c:	c1 e0 03             	shl    $0x3,%eax
c010d20f:	05 60 64 1c c0       	add    $0xc01c6460,%eax
c010d214:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010d217:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d21a:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010d21d:	89 50 04             	mov    %edx,0x4(%eax)
c010d220:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d223:	8b 50 04             	mov    0x4(%eax),%edx
c010d226:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d229:	89 10                	mov    %edx,(%eax)
void
proc_init(void) {
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010d22b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010d22f:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c010d236:	7e d1                	jle    c010d209 <proc_init+0x2a>
        list_init(hash_list + i);
    }

    if ((idleproc = alloc_proc()) == NULL) {
c010d238:	e8 9f e6 ff ff       	call   c010b8dc <alloc_proc>
c010d23d:	a3 40 64 1c c0       	mov    %eax,0xc01c6440
c010d242:	a1 40 64 1c c0       	mov    0xc01c6440,%eax
c010d247:	85 c0                	test   %eax,%eax
c010d249:	75 1c                	jne    c010d267 <proc_init+0x88>
        panic("cannot alloc idleproc.\n");
c010d24b:	c7 44 24 08 c8 17 11 	movl   $0xc01117c8,0x8(%esp)
c010d252:	c0 
c010d253:	c7 44 24 04 6d 03 00 	movl   $0x36d,0x4(%esp)
c010d25a:	00 
c010d25b:	c7 04 24 f4 13 11 c0 	movl   $0xc01113f4,(%esp)
c010d262:	e8 f6 4f ff ff       	call   c010225d <__panic>
    }

    idleproc->pid = 0;
c010d267:	a1 40 64 1c c0       	mov    0xc01c6440,%eax
c010d26c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    idleproc->state = PROC_RUNNABLE;
c010d273:	a1 40 64 1c c0       	mov    0xc01c6440,%eax
c010d278:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    idleproc->kstack = (uintptr_t)bootstack;
c010d27e:	a1 40 64 1c c0       	mov    0xc01c6440,%eax
c010d283:	ba 00 20 13 c0       	mov    $0xc0132000,%edx
c010d288:	89 50 0c             	mov    %edx,0xc(%eax)
    idleproc->need_resched = 1;
c010d28b:	a1 40 64 1c c0       	mov    0xc01c6440,%eax
c010d290:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    set_proc_name(idleproc, "idle");
c010d297:	a1 40 64 1c c0       	mov    0xc01c6440,%eax
c010d29c:	c7 44 24 04 e0 17 11 	movl   $0xc01117e0,0x4(%esp)
c010d2a3:	c0 
c010d2a4:	89 04 24             	mov    %eax,(%esp)
c010d2a7:	e8 b7 e7 ff ff       	call   c010ba63 <set_proc_name>
    nr_process ++;
c010d2ac:	a1 60 84 1c c0       	mov    0xc01c8460,%eax
c010d2b1:	83 c0 01             	add    $0x1,%eax
c010d2b4:	a3 60 84 1c c0       	mov    %eax,0xc01c8460

    current = idleproc;
c010d2b9:	a1 40 64 1c c0       	mov    0xc01c6440,%eax
c010d2be:	a3 48 64 1c c0       	mov    %eax,0xc01c6448

    int pid = kernel_thread(init_main, NULL, 0);
c010d2c3:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010d2ca:	00 
c010d2cb:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d2d2:	00 
c010d2d3:	c7 04 24 ef cf 10 c0 	movl   $0xc010cfef,(%esp)
c010d2da:	e8 11 ec ff ff       	call   c010bef0 <kernel_thread>
c010d2df:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pid <= 0) {
c010d2e2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010d2e6:	7f 1c                	jg     c010d304 <proc_init+0x125>
        panic("create init_main failed.\n");
c010d2e8:	c7 44 24 08 e5 17 11 	movl   $0xc01117e5,0x8(%esp)
c010d2ef:	c0 
c010d2f0:	c7 44 24 04 7b 03 00 	movl   $0x37b,0x4(%esp)
c010d2f7:	00 
c010d2f8:	c7 04 24 f4 13 11 c0 	movl   $0xc01113f4,(%esp)
c010d2ff:	e8 59 4f ff ff       	call   c010225d <__panic>
    }

    initproc = find_proc(pid);
c010d304:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d307:	89 04 24             	mov    %eax,(%esp)
c010d30a:	e8 6d eb ff ff       	call   c010be7c <find_proc>
c010d30f:	a3 44 64 1c c0       	mov    %eax,0xc01c6444
    set_proc_name(initproc, "init");
c010d314:	a1 44 64 1c c0       	mov    0xc01c6444,%eax
c010d319:	c7 44 24 04 ff 17 11 	movl   $0xc01117ff,0x4(%esp)
c010d320:	c0 
c010d321:	89 04 24             	mov    %eax,(%esp)
c010d324:	e8 3a e7 ff ff       	call   c010ba63 <set_proc_name>

    assert(idleproc != NULL && idleproc->pid == 0);
c010d329:	a1 40 64 1c c0       	mov    0xc01c6440,%eax
c010d32e:	85 c0                	test   %eax,%eax
c010d330:	74 0c                	je     c010d33e <proc_init+0x15f>
c010d332:	a1 40 64 1c c0       	mov    0xc01c6440,%eax
c010d337:	8b 40 04             	mov    0x4(%eax),%eax
c010d33a:	85 c0                	test   %eax,%eax
c010d33c:	74 24                	je     c010d362 <proc_init+0x183>
c010d33e:	c7 44 24 0c 04 18 11 	movl   $0xc0111804,0xc(%esp)
c010d345:	c0 
c010d346:	c7 44 24 08 21 14 11 	movl   $0xc0111421,0x8(%esp)
c010d34d:	c0 
c010d34e:	c7 44 24 04 81 03 00 	movl   $0x381,0x4(%esp)
c010d355:	00 
c010d356:	c7 04 24 f4 13 11 c0 	movl   $0xc01113f4,(%esp)
c010d35d:	e8 fb 4e ff ff       	call   c010225d <__panic>
    assert(initproc != NULL && initproc->pid == 1);
c010d362:	a1 44 64 1c c0       	mov    0xc01c6444,%eax
c010d367:	85 c0                	test   %eax,%eax
c010d369:	74 0d                	je     c010d378 <proc_init+0x199>
c010d36b:	a1 44 64 1c c0       	mov    0xc01c6444,%eax
c010d370:	8b 40 04             	mov    0x4(%eax),%eax
c010d373:	83 f8 01             	cmp    $0x1,%eax
c010d376:	74 24                	je     c010d39c <proc_init+0x1bd>
c010d378:	c7 44 24 0c 2c 18 11 	movl   $0xc011182c,0xc(%esp)
c010d37f:	c0 
c010d380:	c7 44 24 08 21 14 11 	movl   $0xc0111421,0x8(%esp)
c010d387:	c0 
c010d388:	c7 44 24 04 82 03 00 	movl   $0x382,0x4(%esp)
c010d38f:	00 
c010d390:	c7 04 24 f4 13 11 c0 	movl   $0xc01113f4,(%esp)
c010d397:	e8 c1 4e ff ff       	call   c010225d <__panic>
}
c010d39c:	c9                   	leave  
c010d39d:	c3                   	ret    

c010d39e <cpu_idle>:

// cpu_idle - at the end of kern_init, the first kernel thread idleproc will do below works
void
cpu_idle(void) {
c010d39e:	55                   	push   %ebp
c010d39f:	89 e5                	mov    %esp,%ebp
c010d3a1:	83 ec 08             	sub    $0x8,%esp
    while (1) {
        if (current->need_resched) {
c010d3a4:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c010d3a9:	8b 40 10             	mov    0x10(%eax),%eax
c010d3ac:	85 c0                	test   %eax,%eax
c010d3ae:	74 07                	je     c010d3b7 <cpu_idle+0x19>
            schedule();
c010d3b0:	e8 3e 06 00 00       	call   c010d9f3 <schedule>
        }
    }
c010d3b5:	eb ed                	jmp    c010d3a4 <cpu_idle+0x6>
c010d3b7:	eb eb                	jmp    c010d3a4 <cpu_idle+0x6>

c010d3b9 <lab6_set_priority>:
}

//FOR LAB6, set the process's priority (bigger value will get more CPU time) 
void
lab6_set_priority(uint32_t priority)
{
c010d3b9:	55                   	push   %ebp
c010d3ba:	89 e5                	mov    %esp,%ebp
    if (priority == 0)
c010d3bc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010d3c0:	75 11                	jne    c010d3d3 <lab6_set_priority+0x1a>
        current->lab6_priority = 1;
c010d3c2:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c010d3c7:	c7 80 c0 00 00 00 01 	movl   $0x1,0xc0(%eax)
c010d3ce:	00 00 00 
c010d3d1:	eb 0e                	jmp    c010d3e1 <lab6_set_priority+0x28>
    else current->lab6_priority = priority;
c010d3d3:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c010d3d8:	8b 55 08             	mov    0x8(%ebp),%edx
c010d3db:	89 90 c0 00 00 00    	mov    %edx,0xc0(%eax)
}
c010d3e1:	5d                   	pop    %ebp
c010d3e2:	c3                   	ret    

c010d3e3 <do_sleep>:

// do_sleep - set current process state to sleep and add timer with "time"
//          - then call scheduler. if process run again, delete timer first.
int
do_sleep(unsigned int time) {
c010d3e3:	55                   	push   %ebp
c010d3e4:	89 e5                	mov    %esp,%ebp
c010d3e6:	83 ec 38             	sub    $0x38,%esp
    if (time == 0) {
c010d3e9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010d3ed:	75 07                	jne    c010d3f6 <do_sleep+0x13>
        return 0;
c010d3ef:	b8 00 00 00 00       	mov    $0x0,%eax
c010d3f4:	eb 6b                	jmp    c010d461 <do_sleep+0x7e>
    }
    bool intr_flag;
    local_intr_save(intr_flag);
c010d3f6:	e8 fa e2 ff ff       	call   c010b6f5 <__intr_save>
c010d3fb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    timer_t __timer, *timer = timer_init(&__timer, current, time);
c010d3fe:	8b 55 08             	mov    0x8(%ebp),%edx
c010d401:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c010d406:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d40a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d40e:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010d411:	89 04 24             	mov    %eax,(%esp)
c010d414:	e8 a3 e2 ff ff       	call   c010b6bc <timer_init>
c010d419:	89 45 f0             	mov    %eax,-0x10(%ebp)
    current->state = PROC_SLEEPING;
c010d41c:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c010d421:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    current->wait_state = WT_TIMER;
c010d427:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c010d42c:	c7 80 90 00 00 00 02 	movl   $0x80000002,0x90(%eax)
c010d433:	00 00 80 
    add_timer(timer);
c010d436:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d439:	89 04 24             	mov    %eax,(%esp)
c010d43c:	e8 3d 06 00 00       	call   c010da7e <add_timer>
    local_intr_restore(intr_flag);
c010d441:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d444:	89 04 24             	mov    %eax,(%esp)
c010d447:	e8 d3 e2 ff ff       	call   c010b71f <__intr_restore>

    schedule();
c010d44c:	e8 a2 05 00 00       	call   c010d9f3 <schedule>

    del_timer(timer);
c010d451:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d454:	89 04 24             	mov    %eax,(%esp)
c010d457:	e8 60 07 00 00       	call   c010dbbc <del_timer>
    return 0;
c010d45c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010d461:	c9                   	leave  
c010d462:	c3                   	ret    

c010d463 <switch_to>:
.text
.globl switch_to
switch_to:                      # switch_to(from, to)

    # save from's registers
    movl 4(%esp), %eax          # eax points to from
c010d463:	8b 44 24 04          	mov    0x4(%esp),%eax
    popl 0(%eax)                # save eip !popl
c010d467:	8f 00                	popl   (%eax)
    movl %esp, 4(%eax)
c010d469:	89 60 04             	mov    %esp,0x4(%eax)
    movl %ebx, 8(%eax)
c010d46c:	89 58 08             	mov    %ebx,0x8(%eax)
    movl %ecx, 12(%eax)
c010d46f:	89 48 0c             	mov    %ecx,0xc(%eax)
    movl %edx, 16(%eax)
c010d472:	89 50 10             	mov    %edx,0x10(%eax)
    movl %esi, 20(%eax)
c010d475:	89 70 14             	mov    %esi,0x14(%eax)
    movl %edi, 24(%eax)
c010d478:	89 78 18             	mov    %edi,0x18(%eax)
    movl %ebp, 28(%eax)
c010d47b:	89 68 1c             	mov    %ebp,0x1c(%eax)

    # restore to's registers
    movl 4(%esp), %eax          # not 8(%esp): popped return address already
c010d47e:	8b 44 24 04          	mov    0x4(%esp),%eax
                                # eax now points to to
    movl 28(%eax), %ebp
c010d482:	8b 68 1c             	mov    0x1c(%eax),%ebp
    movl 24(%eax), %edi
c010d485:	8b 78 18             	mov    0x18(%eax),%edi
    movl 20(%eax), %esi
c010d488:	8b 70 14             	mov    0x14(%eax),%esi
    movl 16(%eax), %edx
c010d48b:	8b 50 10             	mov    0x10(%eax),%edx
    movl 12(%eax), %ecx
c010d48e:	8b 48 0c             	mov    0xc(%eax),%ecx
    movl 8(%eax), %ebx
c010d491:	8b 58 08             	mov    0x8(%eax),%ebx
    movl 4(%eax), %esp
c010d494:	8b 60 04             	mov    0x4(%eax),%esp

    pushl 0(%eax)               # push eip
c010d497:	ff 30                	pushl  (%eax)

    ret
c010d499:	c3                   	ret    

c010d49a <skew_heap_merge>:
}

static inline skew_heap_entry_t *
skew_heap_merge(skew_heap_entry_t *a, skew_heap_entry_t *b,
                compare_f comp)
{
c010d49a:	55                   	push   %ebp
c010d49b:	89 e5                	mov    %esp,%ebp
c010d49d:	83 ec 28             	sub    $0x28,%esp
     if (a == NULL) return b;
c010d4a0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010d4a4:	75 08                	jne    c010d4ae <skew_heap_merge+0x14>
c010d4a6:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d4a9:	e9 bd 00 00 00       	jmp    c010d56b <skew_heap_merge+0xd1>
     else if (b == NULL) return a;
c010d4ae:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010d4b2:	75 08                	jne    c010d4bc <skew_heap_merge+0x22>
c010d4b4:	8b 45 08             	mov    0x8(%ebp),%eax
c010d4b7:	e9 af 00 00 00       	jmp    c010d56b <skew_heap_merge+0xd1>
     
     skew_heap_entry_t *l, *r;
     if (comp(a, b) == -1)
c010d4bc:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d4bf:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d4c3:	8b 45 08             	mov    0x8(%ebp),%eax
c010d4c6:	89 04 24             	mov    %eax,(%esp)
c010d4c9:	8b 45 10             	mov    0x10(%ebp),%eax
c010d4cc:	ff d0                	call   *%eax
c010d4ce:	83 f8 ff             	cmp    $0xffffffff,%eax
c010d4d1:	75 4d                	jne    c010d520 <skew_heap_merge+0x86>
     {
          r = a->left;
c010d4d3:	8b 45 08             	mov    0x8(%ebp),%eax
c010d4d6:	8b 40 04             	mov    0x4(%eax),%eax
c010d4d9:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a->right, b, comp);
c010d4dc:	8b 45 08             	mov    0x8(%ebp),%eax
c010d4df:	8b 40 08             	mov    0x8(%eax),%eax
c010d4e2:	8b 55 10             	mov    0x10(%ebp),%edx
c010d4e5:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d4e9:	8b 55 0c             	mov    0xc(%ebp),%edx
c010d4ec:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d4f0:	89 04 24             	mov    %eax,(%esp)
c010d4f3:	e8 a2 ff ff ff       	call   c010d49a <skew_heap_merge>
c010d4f8:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          a->left = l;
c010d4fb:	8b 45 08             	mov    0x8(%ebp),%eax
c010d4fe:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010d501:	89 50 04             	mov    %edx,0x4(%eax)
          a->right = r;
c010d504:	8b 45 08             	mov    0x8(%ebp),%eax
c010d507:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010d50a:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = a;
c010d50d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010d511:	74 08                	je     c010d51b <skew_heap_merge+0x81>
c010d513:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d516:	8b 55 08             	mov    0x8(%ebp),%edx
c010d519:	89 10                	mov    %edx,(%eax)

          return a;
c010d51b:	8b 45 08             	mov    0x8(%ebp),%eax
c010d51e:	eb 4b                	jmp    c010d56b <skew_heap_merge+0xd1>
     }
     else
     {
          r = b->left;
c010d520:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d523:	8b 40 04             	mov    0x4(%eax),%eax
c010d526:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a, b->right, comp);
c010d529:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d52c:	8b 40 08             	mov    0x8(%eax),%eax
c010d52f:	8b 55 10             	mov    0x10(%ebp),%edx
c010d532:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d536:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d53a:	8b 45 08             	mov    0x8(%ebp),%eax
c010d53d:	89 04 24             	mov    %eax,(%esp)
c010d540:	e8 55 ff ff ff       	call   c010d49a <skew_heap_merge>
c010d545:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          b->left = l;
c010d548:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d54b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010d54e:	89 50 04             	mov    %edx,0x4(%eax)
          b->right = r;
c010d551:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d554:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010d557:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = b;
c010d55a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010d55e:	74 08                	je     c010d568 <skew_heap_merge+0xce>
c010d560:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d563:	8b 55 0c             	mov    0xc(%ebp),%edx
c010d566:	89 10                	mov    %edx,(%eax)

          return b;
c010d568:	8b 45 0c             	mov    0xc(%ebp),%eax
     }
}
c010d56b:	c9                   	leave  
c010d56c:	c3                   	ret    

c010d56d <proc_stride_comp_f>:

/* The compare function for two skew_heap_node_t's and the
 * corresponding procs*/
static int
proc_stride_comp_f(void *a, void *b)
{
c010d56d:	55                   	push   %ebp
c010d56e:	89 e5                	mov    %esp,%ebp
c010d570:	83 ec 10             	sub    $0x10,%esp
     struct proc_struct *p = le2proc(a, lab6_run_pool);
c010d573:	8b 45 08             	mov    0x8(%ebp),%eax
c010d576:	2d b0 00 00 00       	sub    $0xb0,%eax
c010d57b:	89 45 fc             	mov    %eax,-0x4(%ebp)
     struct proc_struct *q = le2proc(b, lab6_run_pool);
c010d57e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d581:	2d b0 00 00 00       	sub    $0xb0,%eax
c010d586:	89 45 f8             	mov    %eax,-0x8(%ebp)
     int32_t c = p->lab6_stride - q->lab6_stride;
c010d589:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010d58c:	8b 90 bc 00 00 00    	mov    0xbc(%eax),%edx
c010d592:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010d595:	8b 80 bc 00 00 00    	mov    0xbc(%eax),%eax
c010d59b:	29 c2                	sub    %eax,%edx
c010d59d:	89 d0                	mov    %edx,%eax
c010d59f:	89 45 f4             	mov    %eax,-0xc(%ebp)
     if (c > 0) return 1;
c010d5a2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d5a6:	7e 07                	jle    c010d5af <proc_stride_comp_f+0x42>
c010d5a8:	b8 01 00 00 00       	mov    $0x1,%eax
c010d5ad:	eb 12                	jmp    c010d5c1 <proc_stride_comp_f+0x54>
     else if (c == 0) return 0;
c010d5af:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d5b3:	75 07                	jne    c010d5bc <proc_stride_comp_f+0x4f>
c010d5b5:	b8 00 00 00 00       	mov    $0x0,%eax
c010d5ba:	eb 05                	jmp    c010d5c1 <proc_stride_comp_f+0x54>
     else return -1;
c010d5bc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
c010d5c1:	c9                   	leave  
c010d5c2:	c3                   	ret    

c010d5c3 <stride_init>:
 *   - max_time_slice: no need here, the variable would be assigned by the caller.
 *
 * hint: see proj13.1/libs/list.h for routines of the list structures.
 */
static void
stride_init(struct run_queue *rq) {
c010d5c3:	55                   	push   %ebp
c010d5c4:	89 e5                	mov    %esp,%ebp
c010d5c6:	83 ec 10             	sub    $0x10,%esp
     /* LAB6: YOUR CODE */
     list_init(&(rq->run_list));
c010d5c9:	8b 45 08             	mov    0x8(%ebp),%eax
c010d5cc:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010d5cf:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010d5d2:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010d5d5:	89 50 04             	mov    %edx,0x4(%eax)
c010d5d8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010d5db:	8b 50 04             	mov    0x4(%eax),%edx
c010d5de:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010d5e1:	89 10                	mov    %edx,(%eax)
     rq->lab6_run_pool = NULL;
c010d5e3:	8b 45 08             	mov    0x8(%ebp),%eax
c010d5e6:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
     rq->proc_num = 0;
c010d5ed:	8b 45 08             	mov    0x8(%ebp),%eax
c010d5f0:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
c010d5f7:	c9                   	leave  
c010d5f8:	c3                   	ret    

c010d5f9 <stride_enqueue>:
 * 
 * hint: see proj13.1/libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_enqueue(struct run_queue *rq, struct proc_struct *proc) {
c010d5f9:	55                   	push   %ebp
c010d5fa:	89 e5                	mov    %esp,%ebp
c010d5fc:	83 ec 28             	sub    $0x28,%esp
     /* LAB6: YOUR CODE */
#if USE_SKEW_HEAP
     rq->lab6_run_pool =
          skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
c010d5ff:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d602:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
c010d608:	8b 45 08             	mov    0x8(%ebp),%eax
c010d60b:	8b 40 10             	mov    0x10(%eax),%eax
c010d60e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d611:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010d614:	c7 45 ec 6d d5 10 c0 	movl   $0xc010d56d,-0x14(%ebp)
c010d61b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d61e:	89 45 e8             	mov    %eax,-0x18(%ebp)
     compare_f comp) __attribute__((always_inline));

static inline void
skew_heap_init(skew_heap_entry_t *a)
{
     a->left = a->right = a->parent = NULL;
c010d621:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d624:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c010d62a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d62d:	8b 10                	mov    (%eax),%edx
c010d62f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d632:	89 50 08             	mov    %edx,0x8(%eax)
c010d635:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d638:	8b 50 08             	mov    0x8(%eax),%edx
c010d63b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d63e:	89 50 04             	mov    %edx,0x4(%eax)
static inline skew_heap_entry_t *
skew_heap_insert(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_init(b);
     return skew_heap_merge(a, b, comp);
c010d641:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d644:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d648:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d64b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d64f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d652:	89 04 24             	mov    %eax,(%esp)
c010d655:	e8 40 fe ff ff       	call   c010d49a <skew_heap_merge>
c010d65a:	89 c2                	mov    %eax,%edx
 */
static void
stride_enqueue(struct run_queue *rq, struct proc_struct *proc) {
     /* LAB6: YOUR CODE */
#if USE_SKEW_HEAP
     rq->lab6_run_pool =
c010d65c:	8b 45 08             	mov    0x8(%ebp),%eax
c010d65f:	89 50 10             	mov    %edx,0x10(%eax)
          skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
#else
     assert(list_empty(&(proc->run_link)));
     list_add_before(&(rq->run_list), &(proc->run_link));
#endif
     if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice) {
c010d662:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d665:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010d66b:	85 c0                	test   %eax,%eax
c010d66d:	74 13                	je     c010d682 <stride_enqueue+0x89>
c010d66f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d672:	8b 90 ac 00 00 00    	mov    0xac(%eax),%edx
c010d678:	8b 45 08             	mov    0x8(%ebp),%eax
c010d67b:	8b 40 0c             	mov    0xc(%eax),%eax
c010d67e:	39 c2                	cmp    %eax,%edx
c010d680:	7e 0f                	jle    c010d691 <stride_enqueue+0x98>
          proc->time_slice = rq->max_time_slice;
c010d682:	8b 45 08             	mov    0x8(%ebp),%eax
c010d685:	8b 50 0c             	mov    0xc(%eax),%edx
c010d688:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d68b:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
     }
     proc->rq = rq;
c010d691:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d694:	8b 55 08             	mov    0x8(%ebp),%edx
c010d697:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
     rq->proc_num ++;
c010d69d:	8b 45 08             	mov    0x8(%ebp),%eax
c010d6a0:	8b 40 08             	mov    0x8(%eax),%eax
c010d6a3:	8d 50 01             	lea    0x1(%eax),%edx
c010d6a6:	8b 45 08             	mov    0x8(%ebp),%eax
c010d6a9:	89 50 08             	mov    %edx,0x8(%eax)
}
c010d6ac:	c9                   	leave  
c010d6ad:	c3                   	ret    

c010d6ae <stride_dequeue>:
 *
 * hint: see proj13.1/libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_dequeue(struct run_queue *rq, struct proc_struct *proc) {
c010d6ae:	55                   	push   %ebp
c010d6af:	89 e5                	mov    %esp,%ebp
c010d6b1:	83 ec 38             	sub    $0x38,%esp
     /* LAB6: YOUR CODE */
#if USE_SKEW_HEAP
     rq->lab6_run_pool =
          skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
c010d6b4:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d6b7:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
c010d6bd:	8b 45 08             	mov    0x8(%ebp),%eax
c010d6c0:	8b 40 10             	mov    0x10(%eax),%eax
c010d6c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d6c6:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010d6c9:	c7 45 ec 6d d5 10 c0 	movl   $0xc010d56d,-0x14(%ebp)

static inline skew_heap_entry_t *
skew_heap_remove(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_entry_t *p   = b->parent;
c010d6d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d6d3:	8b 00                	mov    (%eax),%eax
c010d6d5:	89 45 e8             	mov    %eax,-0x18(%ebp)
     skew_heap_entry_t *rep = skew_heap_merge(b->left, b->right, comp);
c010d6d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d6db:	8b 50 08             	mov    0x8(%eax),%edx
c010d6de:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d6e1:	8b 40 04             	mov    0x4(%eax),%eax
c010d6e4:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010d6e7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010d6eb:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d6ef:	89 04 24             	mov    %eax,(%esp)
c010d6f2:	e8 a3 fd ff ff       	call   c010d49a <skew_heap_merge>
c010d6f7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     if (rep) rep->parent = p;
c010d6fa:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010d6fe:	74 08                	je     c010d708 <stride_dequeue+0x5a>
c010d700:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d703:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010d706:	89 10                	mov    %edx,(%eax)
     
     if (p)
c010d708:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010d70c:	74 24                	je     c010d732 <stride_dequeue+0x84>
     {
          if (p->left == b)
c010d70e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d711:	8b 40 04             	mov    0x4(%eax),%eax
c010d714:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010d717:	75 0b                	jne    c010d724 <stride_dequeue+0x76>
               p->left = rep;
c010d719:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d71c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010d71f:	89 50 04             	mov    %edx,0x4(%eax)
c010d722:	eb 09                	jmp    c010d72d <stride_dequeue+0x7f>
          else p->right = rep;
c010d724:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d727:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010d72a:	89 50 08             	mov    %edx,0x8(%eax)
          return a;
c010d72d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d730:	eb 03                	jmp    c010d735 <stride_dequeue+0x87>
     }
     else return rep;
c010d732:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d735:	89 c2                	mov    %eax,%edx
 */
static void
stride_dequeue(struct run_queue *rq, struct proc_struct *proc) {
     /* LAB6: YOUR CODE */
#if USE_SKEW_HEAP
     rq->lab6_run_pool =
c010d737:	8b 45 08             	mov    0x8(%ebp),%eax
c010d73a:	89 50 10             	mov    %edx,0x10(%eax)
          skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
#else
     assert(!list_empty(&(proc->run_link)) && proc->rq == rq);
     list_del_init(&(proc->run_link));
#endif
     rq->proc_num --;
c010d73d:	8b 45 08             	mov    0x8(%ebp),%eax
c010d740:	8b 40 08             	mov    0x8(%eax),%eax
c010d743:	8d 50 ff             	lea    -0x1(%eax),%edx
c010d746:	8b 45 08             	mov    0x8(%ebp),%eax
c010d749:	89 50 08             	mov    %edx,0x8(%eax)
}
c010d74c:	c9                   	leave  
c010d74d:	c3                   	ret    

c010d74e <stride_pick_next>:
 *
 * hint: see proj13.1/libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static struct proc_struct *
stride_pick_next(struct run_queue *rq) {
c010d74e:	55                   	push   %ebp
c010d74f:	89 e5                	mov    %esp,%ebp
c010d751:	53                   	push   %ebx
c010d752:	83 ec 10             	sub    $0x10,%esp
     /* LAB6: YOUR CODE */
#if USE_SKEW_HEAP
     if (rq->lab6_run_pool == NULL) return NULL;
c010d755:	8b 45 08             	mov    0x8(%ebp),%eax
c010d758:	8b 40 10             	mov    0x10(%eax),%eax
c010d75b:	85 c0                	test   %eax,%eax
c010d75d:	75 07                	jne    c010d766 <stride_pick_next+0x18>
c010d75f:	b8 00 00 00 00       	mov    $0x0,%eax
c010d764:	eb 62                	jmp    c010d7c8 <stride_pick_next+0x7a>
     struct proc_struct *p = le2proc(rq->lab6_run_pool, lab6_run_pool);
c010d766:	8b 45 08             	mov    0x8(%ebp),%eax
c010d769:	8b 40 10             	mov    0x10(%eax),%eax
c010d76c:	2d b0 00 00 00       	sub    $0xb0,%eax
c010d771:	89 45 f8             	mov    %eax,-0x8(%ebp)
          if ((int32_t)(p->lab6_stride - q->lab6_stride) > 0)
               p = q;
          le = list_next(le);
     }
#endif
     if (p->lab6_priority == 0)
c010d774:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010d777:	8b 80 c0 00 00 00    	mov    0xc0(%eax),%eax
c010d77d:	85 c0                	test   %eax,%eax
c010d77f:	75 1a                	jne    c010d79b <stride_pick_next+0x4d>
          p->lab6_stride += BIG_STRIDE;
c010d781:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010d784:	8b 80 bc 00 00 00    	mov    0xbc(%eax),%eax
c010d78a:	8d 90 ff ff ff 7f    	lea    0x7fffffff(%eax),%edx
c010d790:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010d793:	89 90 bc 00 00 00    	mov    %edx,0xbc(%eax)
c010d799:	eb 2a                	jmp    c010d7c5 <stride_pick_next+0x77>
     else p->lab6_stride += BIG_STRIDE / p->lab6_priority;
c010d79b:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010d79e:	8b 88 bc 00 00 00    	mov    0xbc(%eax),%ecx
c010d7a4:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010d7a7:	8b 98 c0 00 00 00    	mov    0xc0(%eax),%ebx
c010d7ad:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
c010d7b2:	ba 00 00 00 00       	mov    $0x0,%edx
c010d7b7:	f7 f3                	div    %ebx
c010d7b9:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c010d7bc:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010d7bf:	89 90 bc 00 00 00    	mov    %edx,0xbc(%eax)
     return p;
c010d7c5:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010d7c8:	83 c4 10             	add    $0x10,%esp
c010d7cb:	5b                   	pop    %ebx
c010d7cc:	5d                   	pop    %ebp
c010d7cd:	c3                   	ret    

c010d7ce <stride_proc_tick>:
 * denotes the time slices left for current
 * process. proc->need_resched is the flag variable for process
 * switching.
 */
static void
stride_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
c010d7ce:	55                   	push   %ebp
c010d7cf:	89 e5                	mov    %esp,%ebp
     /* LAB6: YOUR CODE */
     if (proc->time_slice > 0) {
c010d7d1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d7d4:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010d7da:	85 c0                	test   %eax,%eax
c010d7dc:	7e 15                	jle    c010d7f3 <stride_proc_tick+0x25>
          proc->time_slice --;
c010d7de:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d7e1:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010d7e7:	8d 50 ff             	lea    -0x1(%eax),%edx
c010d7ea:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d7ed:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
     }
     if (proc->time_slice == 0) {
c010d7f3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d7f6:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010d7fc:	85 c0                	test   %eax,%eax
c010d7fe:	75 0a                	jne    c010d80a <stride_proc_tick+0x3c>
          proc->need_resched = 1;
c010d800:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d803:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
     }
}
c010d80a:	5d                   	pop    %ebp
c010d80b:	c3                   	ret    

c010d80c <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010d80c:	55                   	push   %ebp
c010d80d:	89 e5                	mov    %esp,%ebp
c010d80f:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010d812:	9c                   	pushf  
c010d813:	58                   	pop    %eax
c010d814:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010d817:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010d81a:	25 00 02 00 00       	and    $0x200,%eax
c010d81f:	85 c0                	test   %eax,%eax
c010d821:	74 0c                	je     c010d82f <__intr_save+0x23>
        intr_disable();
c010d823:	e8 8d 5c ff ff       	call   c01034b5 <intr_disable>
        return 1;
c010d828:	b8 01 00 00 00       	mov    $0x1,%eax
c010d82d:	eb 05                	jmp    c010d834 <__intr_save+0x28>
    }
    return 0;
c010d82f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010d834:	c9                   	leave  
c010d835:	c3                   	ret    

c010d836 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010d836:	55                   	push   %ebp
c010d837:	89 e5                	mov    %esp,%ebp
c010d839:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010d83c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010d840:	74 05                	je     c010d847 <__intr_restore+0x11>
        intr_enable();
c010d842:	e8 68 5c ff ff       	call   c01034af <intr_enable>
    }
}
c010d847:	c9                   	leave  
c010d848:	c3                   	ret    

c010d849 <sched_class_enqueue>:
static struct sched_class *sched_class;

static struct run_queue *rq;

static inline void
sched_class_enqueue(struct proc_struct *proc) {
c010d849:	55                   	push   %ebp
c010d84a:	89 e5                	mov    %esp,%ebp
c010d84c:	83 ec 18             	sub    $0x18,%esp
    if (proc != idleproc) {
c010d84f:	a1 40 64 1c c0       	mov    0xc01c6440,%eax
c010d854:	39 45 08             	cmp    %eax,0x8(%ebp)
c010d857:	74 1a                	je     c010d873 <sched_class_enqueue+0x2a>
        sched_class->enqueue(rq, proc);
c010d859:	a1 bc 84 1c c0       	mov    0xc01c84bc,%eax
c010d85e:	8b 40 08             	mov    0x8(%eax),%eax
c010d861:	8b 15 c0 84 1c c0    	mov    0xc01c84c0,%edx
c010d867:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010d86a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010d86e:	89 14 24             	mov    %edx,(%esp)
c010d871:	ff d0                	call   *%eax
    }
}
c010d873:	c9                   	leave  
c010d874:	c3                   	ret    

c010d875 <sched_class_dequeue>:

static inline void
sched_class_dequeue(struct proc_struct *proc) {
c010d875:	55                   	push   %ebp
c010d876:	89 e5                	mov    %esp,%ebp
c010d878:	83 ec 18             	sub    $0x18,%esp
    sched_class->dequeue(rq, proc);
c010d87b:	a1 bc 84 1c c0       	mov    0xc01c84bc,%eax
c010d880:	8b 40 0c             	mov    0xc(%eax),%eax
c010d883:	8b 15 c0 84 1c c0    	mov    0xc01c84c0,%edx
c010d889:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010d88c:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010d890:	89 14 24             	mov    %edx,(%esp)
c010d893:	ff d0                	call   *%eax
}
c010d895:	c9                   	leave  
c010d896:	c3                   	ret    

c010d897 <sched_class_pick_next>:

static inline struct proc_struct *
sched_class_pick_next(void) {
c010d897:	55                   	push   %ebp
c010d898:	89 e5                	mov    %esp,%ebp
c010d89a:	83 ec 18             	sub    $0x18,%esp
    return sched_class->pick_next(rq);
c010d89d:	a1 bc 84 1c c0       	mov    0xc01c84bc,%eax
c010d8a2:	8b 40 10             	mov    0x10(%eax),%eax
c010d8a5:	8b 15 c0 84 1c c0    	mov    0xc01c84c0,%edx
c010d8ab:	89 14 24             	mov    %edx,(%esp)
c010d8ae:	ff d0                	call   *%eax
}
c010d8b0:	c9                   	leave  
c010d8b1:	c3                   	ret    

c010d8b2 <sched_class_proc_tick>:

static void
sched_class_proc_tick(struct proc_struct *proc) {
c010d8b2:	55                   	push   %ebp
c010d8b3:	89 e5                	mov    %esp,%ebp
c010d8b5:	83 ec 18             	sub    $0x18,%esp
    if (proc != idleproc) {
c010d8b8:	a1 40 64 1c c0       	mov    0xc01c6440,%eax
c010d8bd:	39 45 08             	cmp    %eax,0x8(%ebp)
c010d8c0:	74 1c                	je     c010d8de <sched_class_proc_tick+0x2c>
        sched_class->proc_tick(rq, proc);
c010d8c2:	a1 bc 84 1c c0       	mov    0xc01c84bc,%eax
c010d8c7:	8b 40 14             	mov    0x14(%eax),%eax
c010d8ca:	8b 15 c0 84 1c c0    	mov    0xc01c84c0,%edx
c010d8d0:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010d8d3:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010d8d7:	89 14 24             	mov    %edx,(%esp)
c010d8da:	ff d0                	call   *%eax
c010d8dc:	eb 0a                	jmp    c010d8e8 <sched_class_proc_tick+0x36>
    }
    else {
        proc->need_resched = 1;
c010d8de:	8b 45 08             	mov    0x8(%ebp),%eax
c010d8e1:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    }
}
c010d8e8:	c9                   	leave  
c010d8e9:	c3                   	ret    

c010d8ea <sched_init>:

static struct run_queue __rq;

void
sched_init(void) {
c010d8ea:	55                   	push   %ebp
c010d8eb:	89 e5                	mov    %esp,%ebp
c010d8ed:	83 ec 28             	sub    $0x28,%esp
c010d8f0:	c7 45 f4 b4 84 1c c0 	movl   $0xc01c84b4,-0xc(%ebp)
c010d8f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d8fa:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010d8fd:	89 50 04             	mov    %edx,0x4(%eax)
c010d900:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d903:	8b 50 04             	mov    0x4(%eax),%edx
c010d906:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d909:	89 10                	mov    %edx,(%eax)
    list_init(&timer_list);

    sched_class = &default_sched_class;
c010d90b:	c7 05 bc 84 1c c0 8c 	movl   $0xc0134a8c,0xc01c84bc
c010d912:	4a 13 c0 

    rq = &__rq;
c010d915:	c7 05 c0 84 1c c0 c4 	movl   $0xc01c84c4,0xc01c84c0
c010d91c:	84 1c c0 
    rq->max_time_slice = 20;
c010d91f:	a1 c0 84 1c c0       	mov    0xc01c84c0,%eax
c010d924:	c7 40 0c 14 00 00 00 	movl   $0x14,0xc(%eax)
    sched_class->init(rq);
c010d92b:	a1 bc 84 1c c0       	mov    0xc01c84bc,%eax
c010d930:	8b 40 04             	mov    0x4(%eax),%eax
c010d933:	8b 15 c0 84 1c c0    	mov    0xc01c84c0,%edx
c010d939:	89 14 24             	mov    %edx,(%esp)
c010d93c:	ff d0                	call   *%eax

    cprintf("sched class: %s\n", sched_class->name);
c010d93e:	a1 bc 84 1c c0       	mov    0xc01c84bc,%eax
c010d943:	8b 00                	mov    (%eax),%eax
c010d945:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d949:	c7 04 24 64 18 11 c0 	movl   $0xc0111864,(%esp)
c010d950:	e8 86 3e ff ff       	call   c01017db <cprintf>
}
c010d955:	c9                   	leave  
c010d956:	c3                   	ret    

c010d957 <wakeup_proc>:

void
wakeup_proc(struct proc_struct *proc) {
c010d957:	55                   	push   %ebp
c010d958:	89 e5                	mov    %esp,%ebp
c010d95a:	83 ec 28             	sub    $0x28,%esp
    assert(proc->state != PROC_ZOMBIE);
c010d95d:	8b 45 08             	mov    0x8(%ebp),%eax
c010d960:	8b 00                	mov    (%eax),%eax
c010d962:	83 f8 03             	cmp    $0x3,%eax
c010d965:	75 24                	jne    c010d98b <wakeup_proc+0x34>
c010d967:	c7 44 24 0c 75 18 11 	movl   $0xc0111875,0xc(%esp)
c010d96e:	c0 
c010d96f:	c7 44 24 08 90 18 11 	movl   $0xc0111890,0x8(%esp)
c010d976:	c0 
c010d977:	c7 44 24 04 3b 00 00 	movl   $0x3b,0x4(%esp)
c010d97e:	00 
c010d97f:	c7 04 24 a5 18 11 c0 	movl   $0xc01118a5,(%esp)
c010d986:	e8 d2 48 ff ff       	call   c010225d <__panic>
    bool intr_flag;
    local_intr_save(intr_flag);
c010d98b:	e8 7c fe ff ff       	call   c010d80c <__intr_save>
c010d990:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (proc->state != PROC_RUNNABLE) {
c010d993:	8b 45 08             	mov    0x8(%ebp),%eax
c010d996:	8b 00                	mov    (%eax),%eax
c010d998:	83 f8 02             	cmp    $0x2,%eax
c010d99b:	74 2d                	je     c010d9ca <wakeup_proc+0x73>
            proc->state = PROC_RUNNABLE;
c010d99d:	8b 45 08             	mov    0x8(%ebp),%eax
c010d9a0:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
            proc->wait_state = 0;
c010d9a6:	8b 45 08             	mov    0x8(%ebp),%eax
c010d9a9:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%eax)
c010d9b0:	00 00 00 
            if (proc != current) {
c010d9b3:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c010d9b8:	39 45 08             	cmp    %eax,0x8(%ebp)
c010d9bb:	74 29                	je     c010d9e6 <wakeup_proc+0x8f>
                sched_class_enqueue(proc);
c010d9bd:	8b 45 08             	mov    0x8(%ebp),%eax
c010d9c0:	89 04 24             	mov    %eax,(%esp)
c010d9c3:	e8 81 fe ff ff       	call   c010d849 <sched_class_enqueue>
c010d9c8:	eb 1c                	jmp    c010d9e6 <wakeup_proc+0x8f>
            }
        }
        else {
            warn("wakeup runnable process.\n");
c010d9ca:	c7 44 24 08 bb 18 11 	movl   $0xc01118bb,0x8(%esp)
c010d9d1:	c0 
c010d9d2:	c7 44 24 04 47 00 00 	movl   $0x47,0x4(%esp)
c010d9d9:	00 
c010d9da:	c7 04 24 a5 18 11 c0 	movl   $0xc01118a5,(%esp)
c010d9e1:	e8 e3 48 ff ff       	call   c01022c9 <__warn>
        }
    }
    local_intr_restore(intr_flag);
c010d9e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d9e9:	89 04 24             	mov    %eax,(%esp)
c010d9ec:	e8 45 fe ff ff       	call   c010d836 <__intr_restore>
}
c010d9f1:	c9                   	leave  
c010d9f2:	c3                   	ret    

c010d9f3 <schedule>:

void
schedule(void) {
c010d9f3:	55                   	push   %ebp
c010d9f4:	89 e5                	mov    %esp,%ebp
c010d9f6:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    struct proc_struct *next;
    local_intr_save(intr_flag);
c010d9f9:	e8 0e fe ff ff       	call   c010d80c <__intr_save>
c010d9fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        current->need_resched = 0;
c010da01:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c010da06:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        if (current->state == PROC_RUNNABLE) {
c010da0d:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c010da12:	8b 00                	mov    (%eax),%eax
c010da14:	83 f8 02             	cmp    $0x2,%eax
c010da17:	75 0d                	jne    c010da26 <schedule+0x33>
            sched_class_enqueue(current);
c010da19:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c010da1e:	89 04 24             	mov    %eax,(%esp)
c010da21:	e8 23 fe ff ff       	call   c010d849 <sched_class_enqueue>
        }
        if ((next = sched_class_pick_next()) != NULL) {
c010da26:	e8 6c fe ff ff       	call   c010d897 <sched_class_pick_next>
c010da2b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010da2e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010da32:	74 0b                	je     c010da3f <schedule+0x4c>
            sched_class_dequeue(next);
c010da34:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010da37:	89 04 24             	mov    %eax,(%esp)
c010da3a:	e8 36 fe ff ff       	call   c010d875 <sched_class_dequeue>
        }
        if (next == NULL) {
c010da3f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010da43:	75 08                	jne    c010da4d <schedule+0x5a>
            next = idleproc;
c010da45:	a1 40 64 1c c0       	mov    0xc01c6440,%eax
c010da4a:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        next->runs ++;
c010da4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010da50:	8b 40 08             	mov    0x8(%eax),%eax
c010da53:	8d 50 01             	lea    0x1(%eax),%edx
c010da56:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010da59:	89 50 08             	mov    %edx,0x8(%eax)
        if (next != current) {
c010da5c:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c010da61:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010da64:	74 0b                	je     c010da71 <schedule+0x7e>
            proc_run(next);
c010da66:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010da69:	89 04 24             	mov    %eax,(%esp)
c010da6c:	e8 ca e2 ff ff       	call   c010bd3b <proc_run>
        }
    }
    local_intr_restore(intr_flag);
c010da71:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010da74:	89 04 24             	mov    %eax,(%esp)
c010da77:	e8 ba fd ff ff       	call   c010d836 <__intr_restore>
}
c010da7c:	c9                   	leave  
c010da7d:	c3                   	ret    

c010da7e <add_timer>:

void
add_timer(timer_t *timer) {
c010da7e:	55                   	push   %ebp
c010da7f:	89 e5                	mov    %esp,%ebp
c010da81:	83 ec 48             	sub    $0x48,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010da84:	e8 83 fd ff ff       	call   c010d80c <__intr_save>
c010da89:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        assert(timer->expires > 0 && timer->proc != NULL);
c010da8c:	8b 45 08             	mov    0x8(%ebp),%eax
c010da8f:	8b 00                	mov    (%eax),%eax
c010da91:	85 c0                	test   %eax,%eax
c010da93:	74 0a                	je     c010da9f <add_timer+0x21>
c010da95:	8b 45 08             	mov    0x8(%ebp),%eax
c010da98:	8b 40 04             	mov    0x4(%eax),%eax
c010da9b:	85 c0                	test   %eax,%eax
c010da9d:	75 24                	jne    c010dac3 <add_timer+0x45>
c010da9f:	c7 44 24 0c d8 18 11 	movl   $0xc01118d8,0xc(%esp)
c010daa6:	c0 
c010daa7:	c7 44 24 08 90 18 11 	movl   $0xc0111890,0x8(%esp)
c010daae:	c0 
c010daaf:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c010dab6:	00 
c010dab7:	c7 04 24 a5 18 11 c0 	movl   $0xc01118a5,(%esp)
c010dabe:	e8 9a 47 ff ff       	call   c010225d <__panic>
        assert(list_empty(&(timer->timer_link)));
c010dac3:	8b 45 08             	mov    0x8(%ebp),%eax
c010dac6:	83 c0 08             	add    $0x8,%eax
c010dac9:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010dacc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010dacf:	8b 40 04             	mov    0x4(%eax),%eax
c010dad2:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010dad5:	0f 94 c0             	sete   %al
c010dad8:	0f b6 c0             	movzbl %al,%eax
c010dadb:	85 c0                	test   %eax,%eax
c010dadd:	75 24                	jne    c010db03 <add_timer+0x85>
c010dadf:	c7 44 24 0c 04 19 11 	movl   $0xc0111904,0xc(%esp)
c010dae6:	c0 
c010dae7:	c7 44 24 08 90 18 11 	movl   $0xc0111890,0x8(%esp)
c010daee:	c0 
c010daef:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
c010daf6:	00 
c010daf7:	c7 04 24 a5 18 11 c0 	movl   $0xc01118a5,(%esp)
c010dafe:	e8 5a 47 ff ff       	call   c010225d <__panic>
c010db03:	c7 45 e4 b4 84 1c c0 	movl   $0xc01c84b4,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010db0a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010db0d:	8b 40 04             	mov    0x4(%eax),%eax
        list_entry_t *le = list_next(&timer_list);
c010db10:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while (le != &timer_list) {
c010db13:	eb 4a                	jmp    c010db5f <add_timer+0xe1>
            timer_t *next = le2timer(le, timer_link);
c010db15:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010db18:	83 e8 08             	sub    $0x8,%eax
c010db1b:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (timer->expires < next->expires) {
c010db1e:	8b 45 08             	mov    0x8(%ebp),%eax
c010db21:	8b 10                	mov    (%eax),%edx
c010db23:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010db26:	8b 00                	mov    (%eax),%eax
c010db28:	39 c2                	cmp    %eax,%edx
c010db2a:	73 13                	jae    c010db3f <add_timer+0xc1>
                next->expires -= timer->expires;
c010db2c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010db2f:	8b 10                	mov    (%eax),%edx
c010db31:	8b 45 08             	mov    0x8(%ebp),%eax
c010db34:	8b 00                	mov    (%eax),%eax
c010db36:	29 c2                	sub    %eax,%edx
c010db38:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010db3b:	89 10                	mov    %edx,(%eax)
                break;
c010db3d:	eb 29                	jmp    c010db68 <add_timer+0xea>
            }
            timer->expires -= next->expires;
c010db3f:	8b 45 08             	mov    0x8(%ebp),%eax
c010db42:	8b 10                	mov    (%eax),%edx
c010db44:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010db47:	8b 00                	mov    (%eax),%eax
c010db49:	29 c2                	sub    %eax,%edx
c010db4b:	8b 45 08             	mov    0x8(%ebp),%eax
c010db4e:	89 10                	mov    %edx,(%eax)
c010db50:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010db53:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010db56:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010db59:	8b 40 04             	mov    0x4(%eax),%eax
            le = list_next(le);
c010db5c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    local_intr_save(intr_flag);
    {
        assert(timer->expires > 0 && timer->proc != NULL);
        assert(list_empty(&(timer->timer_link)));
        list_entry_t *le = list_next(&timer_list);
        while (le != &timer_list) {
c010db5f:	81 7d f4 b4 84 1c c0 	cmpl   $0xc01c84b4,-0xc(%ebp)
c010db66:	75 ad                	jne    c010db15 <add_timer+0x97>
                break;
            }
            timer->expires -= next->expires;
            le = list_next(le);
        }
        list_add_before(le, &(timer->timer_link));
c010db68:	8b 45 08             	mov    0x8(%ebp),%eax
c010db6b:	8d 50 08             	lea    0x8(%eax),%edx
c010db6e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010db71:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010db74:	89 55 d8             	mov    %edx,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c010db77:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010db7a:	8b 00                	mov    (%eax),%eax
c010db7c:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010db7f:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010db82:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010db85:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010db88:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010db8b:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010db8e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010db91:	89 10                	mov    %edx,(%eax)
c010db93:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010db96:	8b 10                	mov    (%eax),%edx
c010db98:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010db9b:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010db9e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010dba1:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010dba4:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010dba7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010dbaa:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010dbad:	89 10                	mov    %edx,(%eax)
    }
    local_intr_restore(intr_flag);
c010dbaf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010dbb2:	89 04 24             	mov    %eax,(%esp)
c010dbb5:	e8 7c fc ff ff       	call   c010d836 <__intr_restore>
}
c010dbba:	c9                   	leave  
c010dbbb:	c3                   	ret    

c010dbbc <del_timer>:

void
del_timer(timer_t *timer) {
c010dbbc:	55                   	push   %ebp
c010dbbd:	89 e5                	mov    %esp,%ebp
c010dbbf:	83 ec 48             	sub    $0x48,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010dbc2:	e8 45 fc ff ff       	call   c010d80c <__intr_save>
c010dbc7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (!list_empty(&(timer->timer_link))) {
c010dbca:	8b 45 08             	mov    0x8(%ebp),%eax
c010dbcd:	83 c0 08             	add    $0x8,%eax
c010dbd0:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010dbd3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010dbd6:	8b 40 04             	mov    0x4(%eax),%eax
c010dbd9:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010dbdc:	0f 94 c0             	sete   %al
c010dbdf:	0f b6 c0             	movzbl %al,%eax
c010dbe2:	85 c0                	test   %eax,%eax
c010dbe4:	0f 85 89 00 00 00    	jne    c010dc73 <del_timer+0xb7>
            if (timer->expires != 0) {
c010dbea:	8b 45 08             	mov    0x8(%ebp),%eax
c010dbed:	8b 00                	mov    (%eax),%eax
c010dbef:	85 c0                	test   %eax,%eax
c010dbf1:	74 35                	je     c010dc28 <del_timer+0x6c>
                list_entry_t *le = list_next(&(timer->timer_link));
c010dbf3:	8b 45 08             	mov    0x8(%ebp),%eax
c010dbf6:	83 c0 08             	add    $0x8,%eax
c010dbf9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010dbfc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010dbff:	8b 40 04             	mov    0x4(%eax),%eax
c010dc02:	89 45 f0             	mov    %eax,-0x10(%ebp)
                if (le != &timer_list) {
c010dc05:	81 7d f0 b4 84 1c c0 	cmpl   $0xc01c84b4,-0x10(%ebp)
c010dc0c:	74 1a                	je     c010dc28 <del_timer+0x6c>
                    timer_t *next = le2timer(le, timer_link);
c010dc0e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010dc11:	83 e8 08             	sub    $0x8,%eax
c010dc14:	89 45 ec             	mov    %eax,-0x14(%ebp)
                    next->expires += timer->expires;
c010dc17:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010dc1a:	8b 10                	mov    (%eax),%edx
c010dc1c:	8b 45 08             	mov    0x8(%ebp),%eax
c010dc1f:	8b 00                	mov    (%eax),%eax
c010dc21:	01 c2                	add    %eax,%edx
c010dc23:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010dc26:	89 10                	mov    %edx,(%eax)
                }
            }
            list_del_init(&(timer->timer_link));
c010dc28:	8b 45 08             	mov    0x8(%ebp),%eax
c010dc2b:	83 c0 08             	add    $0x8,%eax
c010dc2e:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010dc31:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010dc34:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010dc37:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010dc3a:	8b 40 04             	mov    0x4(%eax),%eax
c010dc3d:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010dc40:	8b 12                	mov    (%edx),%edx
c010dc42:	89 55 d8             	mov    %edx,-0x28(%ebp)
c010dc45:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010dc48:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010dc4b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010dc4e:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010dc51:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010dc54:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010dc57:	89 10                	mov    %edx,(%eax)
c010dc59:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010dc5c:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010dc5f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010dc62:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010dc65:	89 50 04             	mov    %edx,0x4(%eax)
c010dc68:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010dc6b:	8b 50 04             	mov    0x4(%eax),%edx
c010dc6e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010dc71:	89 10                	mov    %edx,(%eax)
        }
    }
    local_intr_restore(intr_flag);
c010dc73:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dc76:	89 04 24             	mov    %eax,(%esp)
c010dc79:	e8 b8 fb ff ff       	call   c010d836 <__intr_restore>
}
c010dc7e:	c9                   	leave  
c010dc7f:	c3                   	ret    

c010dc80 <run_timer_list>:

void
run_timer_list(void) {
c010dc80:	55                   	push   %ebp
c010dc81:	89 e5                	mov    %esp,%ebp
c010dc83:	83 ec 38             	sub    $0x38,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010dc86:	e8 81 fb ff ff       	call   c010d80c <__intr_save>
c010dc8b:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010dc8e:	c7 45 e4 b4 84 1c c0 	movl   $0xc01c84b4,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010dc95:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010dc98:	8b 40 04             	mov    0x4(%eax),%eax
    {
        list_entry_t *le = list_next(&timer_list);
c010dc9b:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (le != &timer_list) {
c010dc9e:	81 7d f4 b4 84 1c c0 	cmpl   $0xc01c84b4,-0xc(%ebp)
c010dca5:	0f 84 fb 00 00 00    	je     c010dda6 <run_timer_list+0x126>
            timer_t *timer = le2timer(le, timer_link);
c010dcab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dcae:	83 e8 08             	sub    $0x8,%eax
c010dcb1:	89 45 f0             	mov    %eax,-0x10(%ebp)
            assert(timer->expires != 0);
c010dcb4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010dcb7:	8b 00                	mov    (%eax),%eax
c010dcb9:	85 c0                	test   %eax,%eax
c010dcbb:	75 24                	jne    c010dce1 <run_timer_list+0x61>
c010dcbd:	c7 44 24 0c 25 19 11 	movl   $0xc0111925,0xc(%esp)
c010dcc4:	c0 
c010dcc5:	c7 44 24 08 90 18 11 	movl   $0xc0111890,0x8(%esp)
c010dccc:	c0 
c010dccd:	c7 44 24 04 96 00 00 	movl   $0x96,0x4(%esp)
c010dcd4:	00 
c010dcd5:	c7 04 24 a5 18 11 c0 	movl   $0xc01118a5,(%esp)
c010dcdc:	e8 7c 45 ff ff       	call   c010225d <__panic>
            timer->expires --;
c010dce1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010dce4:	8b 00                	mov    (%eax),%eax
c010dce6:	8d 50 ff             	lea    -0x1(%eax),%edx
c010dce9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010dcec:	89 10                	mov    %edx,(%eax)
            while (timer->expires == 0) {
c010dcee:	e9 a6 00 00 00       	jmp    c010dd99 <run_timer_list+0x119>
c010dcf3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dcf6:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010dcf9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010dcfc:	8b 40 04             	mov    0x4(%eax),%eax
                le = list_next(le);
c010dcff:	89 45 f4             	mov    %eax,-0xc(%ebp)
                struct proc_struct *proc = timer->proc;
c010dd02:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010dd05:	8b 40 04             	mov    0x4(%eax),%eax
c010dd08:	89 45 e8             	mov    %eax,-0x18(%ebp)
                if (proc->wait_state != 0) {
c010dd0b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010dd0e:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010dd14:	85 c0                	test   %eax,%eax
c010dd16:	74 31                	je     c010dd49 <run_timer_list+0xc9>
                    assert(proc->wait_state & WT_INTERRUPTED);
c010dd18:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010dd1b:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010dd21:	85 c0                	test   %eax,%eax
c010dd23:	78 4a                	js     c010dd6f <run_timer_list+0xef>
c010dd25:	c7 44 24 0c 3c 19 11 	movl   $0xc011193c,0xc(%esp)
c010dd2c:	c0 
c010dd2d:	c7 44 24 08 90 18 11 	movl   $0xc0111890,0x8(%esp)
c010dd34:	c0 
c010dd35:	c7 44 24 04 9c 00 00 	movl   $0x9c,0x4(%esp)
c010dd3c:	00 
c010dd3d:	c7 04 24 a5 18 11 c0 	movl   $0xc01118a5,(%esp)
c010dd44:	e8 14 45 ff ff       	call   c010225d <__panic>
                }
                else {
                    warn("process %d's wait_state == 0.\n", proc->pid);
c010dd49:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010dd4c:	8b 40 04             	mov    0x4(%eax),%eax
c010dd4f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010dd53:	c7 44 24 08 60 19 11 	movl   $0xc0111960,0x8(%esp)
c010dd5a:	c0 
c010dd5b:	c7 44 24 04 9f 00 00 	movl   $0x9f,0x4(%esp)
c010dd62:	00 
c010dd63:	c7 04 24 a5 18 11 c0 	movl   $0xc01118a5,(%esp)
c010dd6a:	e8 5a 45 ff ff       	call   c01022c9 <__warn>
                }
                wakeup_proc(proc);
c010dd6f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010dd72:	89 04 24             	mov    %eax,(%esp)
c010dd75:	e8 dd fb ff ff       	call   c010d957 <wakeup_proc>
                del_timer(timer);
c010dd7a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010dd7d:	89 04 24             	mov    %eax,(%esp)
c010dd80:	e8 37 fe ff ff       	call   c010dbbc <del_timer>
                if (le == &timer_list) {
c010dd85:	81 7d f4 b4 84 1c c0 	cmpl   $0xc01c84b4,-0xc(%ebp)
c010dd8c:	75 02                	jne    c010dd90 <run_timer_list+0x110>
                    break;
c010dd8e:	eb 16                	jmp    c010dda6 <run_timer_list+0x126>
                }
                timer = le2timer(le, timer_link);
c010dd90:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dd93:	83 e8 08             	sub    $0x8,%eax
c010dd96:	89 45 f0             	mov    %eax,-0x10(%ebp)
        list_entry_t *le = list_next(&timer_list);
        if (le != &timer_list) {
            timer_t *timer = le2timer(le, timer_link);
            assert(timer->expires != 0);
            timer->expires --;
            while (timer->expires == 0) {
c010dd99:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010dd9c:	8b 00                	mov    (%eax),%eax
c010dd9e:	85 c0                	test   %eax,%eax
c010dda0:	0f 84 4d ff ff ff    	je     c010dcf3 <run_timer_list+0x73>
                    break;
                }
                timer = le2timer(le, timer_link);
            }
        }
        sched_class_proc_tick(current);
c010dda6:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c010ddab:	89 04 24             	mov    %eax,(%esp)
c010ddae:	e8 ff fa ff ff       	call   c010d8b2 <sched_class_proc_tick>
    }
    local_intr_restore(intr_flag);
c010ddb3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ddb6:	89 04 24             	mov    %eax,(%esp)
c010ddb9:	e8 78 fa ff ff       	call   c010d836 <__intr_restore>
}
c010ddbe:	c9                   	leave  
c010ddbf:	c3                   	ret    

c010ddc0 <sys_exit>:
#include <pmm.h>
#include <assert.h>
#include <clock.h>

static int
sys_exit(uint32_t arg[]) {
c010ddc0:	55                   	push   %ebp
c010ddc1:	89 e5                	mov    %esp,%ebp
c010ddc3:	83 ec 28             	sub    $0x28,%esp
    int error_code = (int)arg[0];
c010ddc6:	8b 45 08             	mov    0x8(%ebp),%eax
c010ddc9:	8b 00                	mov    (%eax),%eax
c010ddcb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_exit(error_code);
c010ddce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ddd1:	89 04 24             	mov    %eax,(%esp)
c010ddd4:	e8 d0 e5 ff ff       	call   c010c3a9 <do_exit>
}
c010ddd9:	c9                   	leave  
c010ddda:	c3                   	ret    

c010dddb <sys_fork>:

static int
sys_fork(uint32_t arg[]) {
c010dddb:	55                   	push   %ebp
c010dddc:	89 e5                	mov    %esp,%ebp
c010ddde:	83 ec 28             	sub    $0x28,%esp
    struct trapframe *tf = current->tf;
c010dde1:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c010dde6:	8b 40 3c             	mov    0x3c(%eax),%eax
c010dde9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uintptr_t stack = tf->tf_esp;
c010ddec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ddef:	8b 40 44             	mov    0x44(%eax),%eax
c010ddf2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_fork(0, stack, tf);
c010ddf5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ddf8:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ddfc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ddff:	89 44 24 04          	mov    %eax,0x4(%esp)
c010de03:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010de0a:	e8 76 e4 ff ff       	call   c010c285 <do_fork>
}
c010de0f:	c9                   	leave  
c010de10:	c3                   	ret    

c010de11 <sys_wait>:

static int
sys_wait(uint32_t arg[]) {
c010de11:	55                   	push   %ebp
c010de12:	89 e5                	mov    %esp,%ebp
c010de14:	83 ec 28             	sub    $0x28,%esp
    int pid = (int)arg[0];
c010de17:	8b 45 08             	mov    0x8(%ebp),%eax
c010de1a:	8b 00                	mov    (%eax),%eax
c010de1c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int *store = (int *)arg[1];
c010de1f:	8b 45 08             	mov    0x8(%ebp),%eax
c010de22:	83 c0 04             	add    $0x4,%eax
c010de25:	8b 00                	mov    (%eax),%eax
c010de27:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_wait(pid, store);
c010de2a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010de2d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010de31:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010de34:	89 04 24             	mov    %eax,(%esp)
c010de37:	e8 15 ef ff ff       	call   c010cd51 <do_wait>
}
c010de3c:	c9                   	leave  
c010de3d:	c3                   	ret    

c010de3e <sys_exec>:

static int
sys_exec(uint32_t arg[]) {
c010de3e:	55                   	push   %ebp
c010de3f:	89 e5                	mov    %esp,%ebp
c010de41:	83 ec 28             	sub    $0x28,%esp
    const char *name = (const char *)arg[0];
c010de44:	8b 45 08             	mov    0x8(%ebp),%eax
c010de47:	8b 00                	mov    (%eax),%eax
c010de49:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t len = (size_t)arg[1];
c010de4c:	8b 45 08             	mov    0x8(%ebp),%eax
c010de4f:	8b 40 04             	mov    0x4(%eax),%eax
c010de52:	89 45 f0             	mov    %eax,-0x10(%ebp)
    unsigned char *binary = (unsigned char *)arg[2];
c010de55:	8b 45 08             	mov    0x8(%ebp),%eax
c010de58:	83 c0 08             	add    $0x8,%eax
c010de5b:	8b 00                	mov    (%eax),%eax
c010de5d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    size_t size = (size_t)arg[3];
c010de60:	8b 45 08             	mov    0x8(%ebp),%eax
c010de63:	8b 40 0c             	mov    0xc(%eax),%eax
c010de66:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return do_execve(name, len, binary, size);
c010de69:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010de6c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010de70:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010de73:	89 44 24 08          	mov    %eax,0x8(%esp)
c010de77:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010de7a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010de7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010de81:	89 04 24             	mov    %eax,(%esp)
c010de84:	e8 7c ed ff ff       	call   c010cc05 <do_execve>
}
c010de89:	c9                   	leave  
c010de8a:	c3                   	ret    

c010de8b <sys_yield>:

static int
sys_yield(uint32_t arg[]) {
c010de8b:	55                   	push   %ebp
c010de8c:	89 e5                	mov    %esp,%ebp
c010de8e:	83 ec 08             	sub    $0x8,%esp
    return do_yield();
c010de91:	e8 a5 ee ff ff       	call   c010cd3b <do_yield>
}
c010de96:	c9                   	leave  
c010de97:	c3                   	ret    

c010de98 <sys_kill>:

static int
sys_kill(uint32_t arg[]) {
c010de98:	55                   	push   %ebp
c010de99:	89 e5                	mov    %esp,%ebp
c010de9b:	83 ec 28             	sub    $0x28,%esp
    int pid = (int)arg[0];
c010de9e:	8b 45 08             	mov    0x8(%ebp),%eax
c010dea1:	8b 00                	mov    (%eax),%eax
c010dea3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_kill(pid);
c010dea6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dea9:	89 04 24             	mov    %eax,(%esp)
c010deac:	e8 40 f0 ff ff       	call   c010cef1 <do_kill>
}
c010deb1:	c9                   	leave  
c010deb2:	c3                   	ret    

c010deb3 <sys_getpid>:

static int
sys_getpid(uint32_t arg[]) {
c010deb3:	55                   	push   %ebp
c010deb4:	89 e5                	mov    %esp,%ebp
    return current->pid;
c010deb6:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c010debb:	8b 40 04             	mov    0x4(%eax),%eax
}
c010debe:	5d                   	pop    %ebp
c010debf:	c3                   	ret    

c010dec0 <sys_putc>:

static int
sys_putc(uint32_t arg[]) {
c010dec0:	55                   	push   %ebp
c010dec1:	89 e5                	mov    %esp,%ebp
c010dec3:	83 ec 28             	sub    $0x28,%esp
    int c = (int)arg[0];
c010dec6:	8b 45 08             	mov    0x8(%ebp),%eax
c010dec9:	8b 00                	mov    (%eax),%eax
c010decb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cputchar(c);
c010dece:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ded1:	89 04 24             	mov    %eax,(%esp)
c010ded4:	e8 28 39 ff ff       	call   c0101801 <cputchar>
    return 0;
c010ded9:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010dede:	c9                   	leave  
c010dedf:	c3                   	ret    

c010dee0 <sys_pgdir>:

static int
sys_pgdir(uint32_t arg[]) {
c010dee0:	55                   	push   %ebp
c010dee1:	89 e5                	mov    %esp,%ebp
c010dee3:	83 ec 08             	sub    $0x8,%esp
    print_pgdir();
c010dee6:	e8 66 a1 ff ff       	call   c0108051 <print_pgdir>
    return 0;
c010deeb:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010def0:	c9                   	leave  
c010def1:	c3                   	ret    

c010def2 <sys_gettime>:

static uint32_t
sys_gettime(uint32_t arg[]) {
c010def2:	55                   	push   %ebp
c010def3:	89 e5                	mov    %esp,%ebp
    return (int)ticks;
c010def5:	a1 d8 84 1c c0       	mov    0xc01c84d8,%eax
}
c010defa:	5d                   	pop    %ebp
c010defb:	c3                   	ret    

c010defc <sys_lab6_set_priority>:
static uint32_t
sys_lab6_set_priority(uint32_t arg[])
{
c010defc:	55                   	push   %ebp
c010defd:	89 e5                	mov    %esp,%ebp
c010deff:	83 ec 28             	sub    $0x28,%esp
    uint32_t priority = (uint32_t)arg[0];
c010df02:	8b 45 08             	mov    0x8(%ebp),%eax
c010df05:	8b 00                	mov    (%eax),%eax
c010df07:	89 45 f4             	mov    %eax,-0xc(%ebp)
    lab6_set_priority(priority);
c010df0a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010df0d:	89 04 24             	mov    %eax,(%esp)
c010df10:	e8 a4 f4 ff ff       	call   c010d3b9 <lab6_set_priority>
    return 0;
c010df15:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010df1a:	c9                   	leave  
c010df1b:	c3                   	ret    

c010df1c <sys_sleep>:

static int
sys_sleep(uint32_t arg[]) {
c010df1c:	55                   	push   %ebp
c010df1d:	89 e5                	mov    %esp,%ebp
c010df1f:	83 ec 28             	sub    $0x28,%esp
    unsigned int time = (unsigned int)arg[0];
c010df22:	8b 45 08             	mov    0x8(%ebp),%eax
c010df25:	8b 00                	mov    (%eax),%eax
c010df27:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_sleep(time);
c010df2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010df2d:	89 04 24             	mov    %eax,(%esp)
c010df30:	e8 ae f4 ff ff       	call   c010d3e3 <do_sleep>
}
c010df35:	c9                   	leave  
c010df36:	c3                   	ret    

c010df37 <syscall>:
};

#define NUM_SYSCALLS        ((sizeof(syscalls)) / (sizeof(syscalls[0])))

void
syscall(void) {
c010df37:	55                   	push   %ebp
c010df38:	89 e5                	mov    %esp,%ebp
c010df3a:	83 ec 48             	sub    $0x48,%esp
    struct trapframe *tf = current->tf;
c010df3d:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c010df42:	8b 40 3c             	mov    0x3c(%eax),%eax
c010df45:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t arg[5];
    int num = tf->tf_regs.reg_eax;
c010df48:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010df4b:	8b 40 1c             	mov    0x1c(%eax),%eax
c010df4e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (num >= 0 && num < NUM_SYSCALLS) {
c010df51:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010df55:	78 60                	js     c010dfb7 <syscall+0x80>
c010df57:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010df5a:	3d ff 00 00 00       	cmp    $0xff,%eax
c010df5f:	77 56                	ja     c010dfb7 <syscall+0x80>
        if (syscalls[num] != NULL) {
c010df61:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010df64:	8b 04 85 c0 4a 13 c0 	mov    -0x3fecb540(,%eax,4),%eax
c010df6b:	85 c0                	test   %eax,%eax
c010df6d:	74 48                	je     c010dfb7 <syscall+0x80>
            arg[0] = tf->tf_regs.reg_edx;
c010df6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010df72:	8b 40 14             	mov    0x14(%eax),%eax
c010df75:	89 45 dc             	mov    %eax,-0x24(%ebp)
            arg[1] = tf->tf_regs.reg_ecx;
c010df78:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010df7b:	8b 40 18             	mov    0x18(%eax),%eax
c010df7e:	89 45 e0             	mov    %eax,-0x20(%ebp)
            arg[2] = tf->tf_regs.reg_ebx;
c010df81:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010df84:	8b 40 10             	mov    0x10(%eax),%eax
c010df87:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            arg[3] = tf->tf_regs.reg_edi;
c010df8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010df8d:	8b 00                	mov    (%eax),%eax
c010df8f:	89 45 e8             	mov    %eax,-0x18(%ebp)
            arg[4] = tf->tf_regs.reg_esi;
c010df92:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010df95:	8b 40 04             	mov    0x4(%eax),%eax
c010df98:	89 45 ec             	mov    %eax,-0x14(%ebp)
            tf->tf_regs.reg_eax = syscalls[num](arg);
c010df9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010df9e:	8b 04 85 c0 4a 13 c0 	mov    -0x3fecb540(,%eax,4),%eax
c010dfa5:	8d 55 dc             	lea    -0x24(%ebp),%edx
c010dfa8:	89 14 24             	mov    %edx,(%esp)
c010dfab:	ff d0                	call   *%eax
c010dfad:	89 c2                	mov    %eax,%edx
c010dfaf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dfb2:	89 50 1c             	mov    %edx,0x1c(%eax)
            return ;
c010dfb5:	eb 46                	jmp    c010dffd <syscall+0xc6>
        }
    }
    print_trapframe(tf);
c010dfb7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dfba:	89 04 24             	mov    %eax,(%esp)
c010dfbd:	e8 b1 58 ff ff       	call   c0103873 <print_trapframe>
    panic("undefined syscall %d, pid = %d, name = %s.\n",
c010dfc2:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c010dfc7:	8d 50 48             	lea    0x48(%eax),%edx
c010dfca:	a1 48 64 1c c0       	mov    0xc01c6448,%eax
c010dfcf:	8b 40 04             	mov    0x4(%eax),%eax
c010dfd2:	89 54 24 14          	mov    %edx,0x14(%esp)
c010dfd6:	89 44 24 10          	mov    %eax,0x10(%esp)
c010dfda:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010dfdd:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010dfe1:	c7 44 24 08 80 19 11 	movl   $0xc0111980,0x8(%esp)
c010dfe8:	c0 
c010dfe9:	c7 44 24 04 79 00 00 	movl   $0x79,0x4(%esp)
c010dff0:	00 
c010dff1:	c7 04 24 ac 19 11 c0 	movl   $0xc01119ac,(%esp)
c010dff8:	e8 60 42 ff ff       	call   c010225d <__panic>
            num, current->pid, current->name);
}
c010dffd:	c9                   	leave  
c010dffe:	c3                   	ret    

c010dfff <hash32>:
 * @bits:   the number of bits in a return value
 *
 * High bits are more random, so we use them.
 * */
uint32_t
hash32(uint32_t val, unsigned int bits) {
c010dfff:	55                   	push   %ebp
c010e000:	89 e5                	mov    %esp,%ebp
c010e002:	83 ec 10             	sub    $0x10,%esp
    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
c010e005:	8b 45 08             	mov    0x8(%ebp),%eax
c010e008:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
c010e00e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (hash >> (32 - bits));
c010e011:	b8 20 00 00 00       	mov    $0x20,%eax
c010e016:	2b 45 0c             	sub    0xc(%ebp),%eax
c010e019:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010e01c:	89 c1                	mov    %eax,%ecx
c010e01e:	d3 ea                	shr    %cl,%edx
c010e020:	89 d0                	mov    %edx,%eax
}
c010e022:	c9                   	leave  
c010e023:	c3                   	ret    

c010e024 <printnum>:
 * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
 * @padc:       character that padded on the left if the actual width is less than @width
 * */
static void
printnum(void (*putch)(int, void*), void *putdat,
        unsigned long long num, unsigned base, int width, int padc) {
c010e024:	55                   	push   %ebp
c010e025:	89 e5                	mov    %esp,%ebp
c010e027:	83 ec 58             	sub    $0x58,%esp
c010e02a:	8b 45 10             	mov    0x10(%ebp),%eax
c010e02d:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010e030:	8b 45 14             	mov    0x14(%ebp),%eax
c010e033:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    unsigned long long result = num;
c010e036:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010e039:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010e03c:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010e03f:	89 55 ec             	mov    %edx,-0x14(%ebp)
    unsigned mod = do_div(result, base);
c010e042:	8b 45 18             	mov    0x18(%ebp),%eax
c010e045:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010e048:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e04b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010e04e:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010e051:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010e054:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e057:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e05a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010e05e:	74 1c                	je     c010e07c <printnum+0x58>
c010e060:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e063:	ba 00 00 00 00       	mov    $0x0,%edx
c010e068:	f7 75 e4             	divl   -0x1c(%ebp)
c010e06b:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010e06e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e071:	ba 00 00 00 00       	mov    $0x0,%edx
c010e076:	f7 75 e4             	divl   -0x1c(%ebp)
c010e079:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010e07c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e07f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010e082:	f7 75 e4             	divl   -0x1c(%ebp)
c010e085:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010e088:	89 55 dc             	mov    %edx,-0x24(%ebp)
c010e08b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e08e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010e091:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010e094:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010e097:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010e09a:	89 45 d8             	mov    %eax,-0x28(%ebp)

    // first recursively print all preceding (more significant) digits
    if (num >= base) {
c010e09d:	8b 45 18             	mov    0x18(%ebp),%eax
c010e0a0:	ba 00 00 00 00       	mov    $0x0,%edx
c010e0a5:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010e0a8:	77 56                	ja     c010e100 <printnum+0xdc>
c010e0aa:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010e0ad:	72 05                	jb     c010e0b4 <printnum+0x90>
c010e0af:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c010e0b2:	77 4c                	ja     c010e100 <printnum+0xdc>
        printnum(putch, putdat, result, base, width - 1, padc);
c010e0b4:	8b 45 1c             	mov    0x1c(%ebp),%eax
c010e0b7:	8d 50 ff             	lea    -0x1(%eax),%edx
c010e0ba:	8b 45 20             	mov    0x20(%ebp),%eax
c010e0bd:	89 44 24 18          	mov    %eax,0x18(%esp)
c010e0c1:	89 54 24 14          	mov    %edx,0x14(%esp)
c010e0c5:	8b 45 18             	mov    0x18(%ebp),%eax
c010e0c8:	89 44 24 10          	mov    %eax,0x10(%esp)
c010e0cc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e0cf:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010e0d2:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e0d6:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010e0da:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e0dd:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e0e1:	8b 45 08             	mov    0x8(%ebp),%eax
c010e0e4:	89 04 24             	mov    %eax,(%esp)
c010e0e7:	e8 38 ff ff ff       	call   c010e024 <printnum>
c010e0ec:	eb 1c                	jmp    c010e10a <printnum+0xe6>
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
            putch(padc, putdat);
c010e0ee:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e0f1:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e0f5:	8b 45 20             	mov    0x20(%ebp),%eax
c010e0f8:	89 04 24             	mov    %eax,(%esp)
c010e0fb:	8b 45 08             	mov    0x8(%ebp),%eax
c010e0fe:	ff d0                	call   *%eax
    // first recursively print all preceding (more significant) digits
    if (num >= base) {
        printnum(putch, putdat, result, base, width - 1, padc);
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
c010e100:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
c010e104:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c010e108:	7f e4                	jg     c010e0ee <printnum+0xca>
            putch(padc, putdat);
    }
    // then print this (the least significant) digit
    putch("0123456789abcdef"[mod], putdat);
c010e10a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010e10d:	05 e4 1a 11 c0       	add    $0xc0111ae4,%eax
c010e112:	0f b6 00             	movzbl (%eax),%eax
c010e115:	0f be c0             	movsbl %al,%eax
c010e118:	8b 55 0c             	mov    0xc(%ebp),%edx
c010e11b:	89 54 24 04          	mov    %edx,0x4(%esp)
c010e11f:	89 04 24             	mov    %eax,(%esp)
c010e122:	8b 45 08             	mov    0x8(%ebp),%eax
c010e125:	ff d0                	call   *%eax
}
c010e127:	c9                   	leave  
c010e128:	c3                   	ret    

c010e129 <getuint>:
 * getuint - get an unsigned int of various possible sizes from a varargs list
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static unsigned long long
getuint(va_list *ap, int lflag) {
c010e129:	55                   	push   %ebp
c010e12a:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c010e12c:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c010e130:	7e 14                	jle    c010e146 <getuint+0x1d>
        return va_arg(*ap, unsigned long long);
c010e132:	8b 45 08             	mov    0x8(%ebp),%eax
c010e135:	8b 00                	mov    (%eax),%eax
c010e137:	8d 48 08             	lea    0x8(%eax),%ecx
c010e13a:	8b 55 08             	mov    0x8(%ebp),%edx
c010e13d:	89 0a                	mov    %ecx,(%edx)
c010e13f:	8b 50 04             	mov    0x4(%eax),%edx
c010e142:	8b 00                	mov    (%eax),%eax
c010e144:	eb 30                	jmp    c010e176 <getuint+0x4d>
    }
    else if (lflag) {
c010e146:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010e14a:	74 16                	je     c010e162 <getuint+0x39>
        return va_arg(*ap, unsigned long);
c010e14c:	8b 45 08             	mov    0x8(%ebp),%eax
c010e14f:	8b 00                	mov    (%eax),%eax
c010e151:	8d 48 04             	lea    0x4(%eax),%ecx
c010e154:	8b 55 08             	mov    0x8(%ebp),%edx
c010e157:	89 0a                	mov    %ecx,(%edx)
c010e159:	8b 00                	mov    (%eax),%eax
c010e15b:	ba 00 00 00 00       	mov    $0x0,%edx
c010e160:	eb 14                	jmp    c010e176 <getuint+0x4d>
    }
    else {
        return va_arg(*ap, unsigned int);
c010e162:	8b 45 08             	mov    0x8(%ebp),%eax
c010e165:	8b 00                	mov    (%eax),%eax
c010e167:	8d 48 04             	lea    0x4(%eax),%ecx
c010e16a:	8b 55 08             	mov    0x8(%ebp),%edx
c010e16d:	89 0a                	mov    %ecx,(%edx)
c010e16f:	8b 00                	mov    (%eax),%eax
c010e171:	ba 00 00 00 00       	mov    $0x0,%edx
    }
}
c010e176:	5d                   	pop    %ebp
c010e177:	c3                   	ret    

c010e178 <getint>:
 * getint - same as getuint but signed, we can't use getuint because of sign extension
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static long long
getint(va_list *ap, int lflag) {
c010e178:	55                   	push   %ebp
c010e179:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c010e17b:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c010e17f:	7e 14                	jle    c010e195 <getint+0x1d>
        return va_arg(*ap, long long);
c010e181:	8b 45 08             	mov    0x8(%ebp),%eax
c010e184:	8b 00                	mov    (%eax),%eax
c010e186:	8d 48 08             	lea    0x8(%eax),%ecx
c010e189:	8b 55 08             	mov    0x8(%ebp),%edx
c010e18c:	89 0a                	mov    %ecx,(%edx)
c010e18e:	8b 50 04             	mov    0x4(%eax),%edx
c010e191:	8b 00                	mov    (%eax),%eax
c010e193:	eb 28                	jmp    c010e1bd <getint+0x45>
    }
    else if (lflag) {
c010e195:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010e199:	74 12                	je     c010e1ad <getint+0x35>
        return va_arg(*ap, long);
c010e19b:	8b 45 08             	mov    0x8(%ebp),%eax
c010e19e:	8b 00                	mov    (%eax),%eax
c010e1a0:	8d 48 04             	lea    0x4(%eax),%ecx
c010e1a3:	8b 55 08             	mov    0x8(%ebp),%edx
c010e1a6:	89 0a                	mov    %ecx,(%edx)
c010e1a8:	8b 00                	mov    (%eax),%eax
c010e1aa:	99                   	cltd   
c010e1ab:	eb 10                	jmp    c010e1bd <getint+0x45>
    }
    else {
        return va_arg(*ap, int);
c010e1ad:	8b 45 08             	mov    0x8(%ebp),%eax
c010e1b0:	8b 00                	mov    (%eax),%eax
c010e1b2:	8d 48 04             	lea    0x4(%eax),%ecx
c010e1b5:	8b 55 08             	mov    0x8(%ebp),%edx
c010e1b8:	89 0a                	mov    %ecx,(%edx)
c010e1ba:	8b 00                	mov    (%eax),%eax
c010e1bc:	99                   	cltd   
    }
}
c010e1bd:	5d                   	pop    %ebp
c010e1be:	c3                   	ret    

c010e1bf <printfmt>:
 * @putch:      specified putch function, print a single character
 * @putdat:     used by @putch function
 * @fmt:        the format string to use
 * */
void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
c010e1bf:	55                   	push   %ebp
c010e1c0:	89 e5                	mov    %esp,%ebp
c010e1c2:	83 ec 28             	sub    $0x28,%esp
    va_list ap;

    va_start(ap, fmt);
c010e1c5:	8d 45 14             	lea    0x14(%ebp),%eax
c010e1c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vprintfmt(putch, putdat, fmt, ap);
c010e1cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e1ce:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010e1d2:	8b 45 10             	mov    0x10(%ebp),%eax
c010e1d5:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e1d9:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e1dc:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e1e0:	8b 45 08             	mov    0x8(%ebp),%eax
c010e1e3:	89 04 24             	mov    %eax,(%esp)
c010e1e6:	e8 02 00 00 00       	call   c010e1ed <vprintfmt>
    va_end(ap);
}
c010e1eb:	c9                   	leave  
c010e1ec:	c3                   	ret    

c010e1ed <vprintfmt>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want printfmt() instead.
 * */
void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
c010e1ed:	55                   	push   %ebp
c010e1ee:	89 e5                	mov    %esp,%ebp
c010e1f0:	56                   	push   %esi
c010e1f1:	53                   	push   %ebx
c010e1f2:	83 ec 40             	sub    $0x40,%esp
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010e1f5:	eb 18                	jmp    c010e20f <vprintfmt+0x22>
            if (ch == '\0') {
c010e1f7:	85 db                	test   %ebx,%ebx
c010e1f9:	75 05                	jne    c010e200 <vprintfmt+0x13>
                return;
c010e1fb:	e9 d1 03 00 00       	jmp    c010e5d1 <vprintfmt+0x3e4>
            }
            putch(ch, putdat);
c010e200:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e203:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e207:	89 1c 24             	mov    %ebx,(%esp)
c010e20a:	8b 45 08             	mov    0x8(%ebp),%eax
c010e20d:	ff d0                	call   *%eax
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010e20f:	8b 45 10             	mov    0x10(%ebp),%eax
c010e212:	8d 50 01             	lea    0x1(%eax),%edx
c010e215:	89 55 10             	mov    %edx,0x10(%ebp)
c010e218:	0f b6 00             	movzbl (%eax),%eax
c010e21b:	0f b6 d8             	movzbl %al,%ebx
c010e21e:	83 fb 25             	cmp    $0x25,%ebx
c010e221:	75 d4                	jne    c010e1f7 <vprintfmt+0xa>
            }
            putch(ch, putdat);
        }

        // Process a %-escape sequence
        char padc = ' ';
c010e223:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
        width = precision = -1;
c010e227:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
c010e22e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e231:	89 45 e8             	mov    %eax,-0x18(%ebp)
        lflag = altflag = 0;
c010e234:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010e23b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010e23e:	89 45 e0             	mov    %eax,-0x20(%ebp)

    reswitch:
        switch (ch = *(unsigned char *)fmt ++) {
c010e241:	8b 45 10             	mov    0x10(%ebp),%eax
c010e244:	8d 50 01             	lea    0x1(%eax),%edx
c010e247:	89 55 10             	mov    %edx,0x10(%ebp)
c010e24a:	0f b6 00             	movzbl (%eax),%eax
c010e24d:	0f b6 d8             	movzbl %al,%ebx
c010e250:	8d 43 dd             	lea    -0x23(%ebx),%eax
c010e253:	83 f8 55             	cmp    $0x55,%eax
c010e256:	0f 87 44 03 00 00    	ja     c010e5a0 <vprintfmt+0x3b3>
c010e25c:	8b 04 85 08 1b 11 c0 	mov    -0x3feee4f8(,%eax,4),%eax
c010e263:	ff e0                	jmp    *%eax

        // flag to pad on the right
        case '-':
            padc = '-';
c010e265:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
            goto reswitch;
c010e269:	eb d6                	jmp    c010e241 <vprintfmt+0x54>

        // flag to pad with 0's instead of spaces
        case '0':
            padc = '0';
c010e26b:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
            goto reswitch;
c010e26f:	eb d0                	jmp    c010e241 <vprintfmt+0x54>

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c010e271:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
                precision = precision * 10 + ch - '0';
c010e278:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010e27b:	89 d0                	mov    %edx,%eax
c010e27d:	c1 e0 02             	shl    $0x2,%eax
c010e280:	01 d0                	add    %edx,%eax
c010e282:	01 c0                	add    %eax,%eax
c010e284:	01 d8                	add    %ebx,%eax
c010e286:	83 e8 30             	sub    $0x30,%eax
c010e289:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                ch = *fmt;
c010e28c:	8b 45 10             	mov    0x10(%ebp),%eax
c010e28f:	0f b6 00             	movzbl (%eax),%eax
c010e292:	0f be d8             	movsbl %al,%ebx
                if (ch < '0' || ch > '9') {
c010e295:	83 fb 2f             	cmp    $0x2f,%ebx
c010e298:	7e 0b                	jle    c010e2a5 <vprintfmt+0xb8>
c010e29a:	83 fb 39             	cmp    $0x39,%ebx
c010e29d:	7f 06                	jg     c010e2a5 <vprintfmt+0xb8>
            padc = '0';
            goto reswitch;

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c010e29f:	83 45 10 01          	addl   $0x1,0x10(%ebp)
                precision = precision * 10 + ch - '0';
                ch = *fmt;
                if (ch < '0' || ch > '9') {
                    break;
                }
            }
c010e2a3:	eb d3                	jmp    c010e278 <vprintfmt+0x8b>
            goto process_precision;
c010e2a5:	eb 33                	jmp    c010e2da <vprintfmt+0xed>

        case '*':
            precision = va_arg(ap, int);
c010e2a7:	8b 45 14             	mov    0x14(%ebp),%eax
c010e2aa:	8d 50 04             	lea    0x4(%eax),%edx
c010e2ad:	89 55 14             	mov    %edx,0x14(%ebp)
c010e2b0:	8b 00                	mov    (%eax),%eax
c010e2b2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            goto process_precision;
c010e2b5:	eb 23                	jmp    c010e2da <vprintfmt+0xed>

        case '.':
            if (width < 0)
c010e2b7:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010e2bb:	79 0c                	jns    c010e2c9 <vprintfmt+0xdc>
                width = 0;
c010e2bd:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
            goto reswitch;
c010e2c4:	e9 78 ff ff ff       	jmp    c010e241 <vprintfmt+0x54>
c010e2c9:	e9 73 ff ff ff       	jmp    c010e241 <vprintfmt+0x54>

        case '#':
            altflag = 1;
c010e2ce:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
            goto reswitch;
c010e2d5:	e9 67 ff ff ff       	jmp    c010e241 <vprintfmt+0x54>

        process_precision:
            if (width < 0)
c010e2da:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010e2de:	79 12                	jns    c010e2f2 <vprintfmt+0x105>
                width = precision, precision = -1;
c010e2e0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e2e3:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010e2e6:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
            goto reswitch;
c010e2ed:	e9 4f ff ff ff       	jmp    c010e241 <vprintfmt+0x54>
c010e2f2:	e9 4a ff ff ff       	jmp    c010e241 <vprintfmt+0x54>

        // long flag (doubled for long long)
        case 'l':
            lflag ++;
c010e2f7:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
            goto reswitch;
c010e2fb:	e9 41 ff ff ff       	jmp    c010e241 <vprintfmt+0x54>

        // character
        case 'c':
            putch(va_arg(ap, int), putdat);
c010e300:	8b 45 14             	mov    0x14(%ebp),%eax
c010e303:	8d 50 04             	lea    0x4(%eax),%edx
c010e306:	89 55 14             	mov    %edx,0x14(%ebp)
c010e309:	8b 00                	mov    (%eax),%eax
c010e30b:	8b 55 0c             	mov    0xc(%ebp),%edx
c010e30e:	89 54 24 04          	mov    %edx,0x4(%esp)
c010e312:	89 04 24             	mov    %eax,(%esp)
c010e315:	8b 45 08             	mov    0x8(%ebp),%eax
c010e318:	ff d0                	call   *%eax
            break;
c010e31a:	e9 ac 02 00 00       	jmp    c010e5cb <vprintfmt+0x3de>

        // error message
        case 'e':
            err = va_arg(ap, int);
c010e31f:	8b 45 14             	mov    0x14(%ebp),%eax
c010e322:	8d 50 04             	lea    0x4(%eax),%edx
c010e325:	89 55 14             	mov    %edx,0x14(%ebp)
c010e328:	8b 18                	mov    (%eax),%ebx
            if (err < 0) {
c010e32a:	85 db                	test   %ebx,%ebx
c010e32c:	79 02                	jns    c010e330 <vprintfmt+0x143>
                err = -err;
c010e32e:	f7 db                	neg    %ebx
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
c010e330:	83 fb 18             	cmp    $0x18,%ebx
c010e333:	7f 0b                	jg     c010e340 <vprintfmt+0x153>
c010e335:	8b 34 9d 80 1a 11 c0 	mov    -0x3feee580(,%ebx,4),%esi
c010e33c:	85 f6                	test   %esi,%esi
c010e33e:	75 23                	jne    c010e363 <vprintfmt+0x176>
                printfmt(putch, putdat, "error %d", err);
c010e340:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c010e344:	c7 44 24 08 f5 1a 11 	movl   $0xc0111af5,0x8(%esp)
c010e34b:	c0 
c010e34c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e34f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e353:	8b 45 08             	mov    0x8(%ebp),%eax
c010e356:	89 04 24             	mov    %eax,(%esp)
c010e359:	e8 61 fe ff ff       	call   c010e1bf <printfmt>
            }
            else {
                printfmt(putch, putdat, "%s", p);
            }
            break;
c010e35e:	e9 68 02 00 00       	jmp    c010e5cb <vprintfmt+0x3de>
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
                printfmt(putch, putdat, "error %d", err);
            }
            else {
                printfmt(putch, putdat, "%s", p);
c010e363:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010e367:	c7 44 24 08 fe 1a 11 	movl   $0xc0111afe,0x8(%esp)
c010e36e:	c0 
c010e36f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e372:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e376:	8b 45 08             	mov    0x8(%ebp),%eax
c010e379:	89 04 24             	mov    %eax,(%esp)
c010e37c:	e8 3e fe ff ff       	call   c010e1bf <printfmt>
            }
            break;
c010e381:	e9 45 02 00 00       	jmp    c010e5cb <vprintfmt+0x3de>

        // string
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
c010e386:	8b 45 14             	mov    0x14(%ebp),%eax
c010e389:	8d 50 04             	lea    0x4(%eax),%edx
c010e38c:	89 55 14             	mov    %edx,0x14(%ebp)
c010e38f:	8b 30                	mov    (%eax),%esi
c010e391:	85 f6                	test   %esi,%esi
c010e393:	75 05                	jne    c010e39a <vprintfmt+0x1ad>
                p = "(null)";
c010e395:	be 01 1b 11 c0       	mov    $0xc0111b01,%esi
            }
            if (width > 0 && padc != '-') {
c010e39a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010e39e:	7e 3e                	jle    c010e3de <vprintfmt+0x1f1>
c010e3a0:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
c010e3a4:	74 38                	je     c010e3de <vprintfmt+0x1f1>
                for (width -= strnlen(p, precision); width > 0; width --) {
c010e3a6:	8b 5d e8             	mov    -0x18(%ebp),%ebx
c010e3a9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e3ac:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e3b0:	89 34 24             	mov    %esi,(%esp)
c010e3b3:	e8 ed 03 00 00       	call   c010e7a5 <strnlen>
c010e3b8:	29 c3                	sub    %eax,%ebx
c010e3ba:	89 d8                	mov    %ebx,%eax
c010e3bc:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010e3bf:	eb 17                	jmp    c010e3d8 <vprintfmt+0x1eb>
                    putch(padc, putdat);
c010e3c1:	0f be 45 db          	movsbl -0x25(%ebp),%eax
c010e3c5:	8b 55 0c             	mov    0xc(%ebp),%edx
c010e3c8:	89 54 24 04          	mov    %edx,0x4(%esp)
c010e3cc:	89 04 24             	mov    %eax,(%esp)
c010e3cf:	8b 45 08             	mov    0x8(%ebp),%eax
c010e3d2:	ff d0                	call   *%eax
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
                p = "(null)";
            }
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
c010e3d4:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010e3d8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010e3dc:	7f e3                	jg     c010e3c1 <vprintfmt+0x1d4>
                    putch(padc, putdat);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c010e3de:	eb 38                	jmp    c010e418 <vprintfmt+0x22b>
                if (altflag && (ch < ' ' || ch > '~')) {
c010e3e0:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010e3e4:	74 1f                	je     c010e405 <vprintfmt+0x218>
c010e3e6:	83 fb 1f             	cmp    $0x1f,%ebx
c010e3e9:	7e 05                	jle    c010e3f0 <vprintfmt+0x203>
c010e3eb:	83 fb 7e             	cmp    $0x7e,%ebx
c010e3ee:	7e 15                	jle    c010e405 <vprintfmt+0x218>
                    putch('?', putdat);
c010e3f0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e3f3:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e3f7:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
c010e3fe:	8b 45 08             	mov    0x8(%ebp),%eax
c010e401:	ff d0                	call   *%eax
c010e403:	eb 0f                	jmp    c010e414 <vprintfmt+0x227>
                }
                else {
                    putch(ch, putdat);
c010e405:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e408:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e40c:	89 1c 24             	mov    %ebx,(%esp)
c010e40f:	8b 45 08             	mov    0x8(%ebp),%eax
c010e412:	ff d0                	call   *%eax
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
                    putch(padc, putdat);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c010e414:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010e418:	89 f0                	mov    %esi,%eax
c010e41a:	8d 70 01             	lea    0x1(%eax),%esi
c010e41d:	0f b6 00             	movzbl (%eax),%eax
c010e420:	0f be d8             	movsbl %al,%ebx
c010e423:	85 db                	test   %ebx,%ebx
c010e425:	74 10                	je     c010e437 <vprintfmt+0x24a>
c010e427:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010e42b:	78 b3                	js     c010e3e0 <vprintfmt+0x1f3>
c010e42d:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
c010e431:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010e435:	79 a9                	jns    c010e3e0 <vprintfmt+0x1f3>
                }
                else {
                    putch(ch, putdat);
                }
            }
            for (; width > 0; width --) {
c010e437:	eb 17                	jmp    c010e450 <vprintfmt+0x263>
                putch(' ', putdat);
c010e439:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e43c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e440:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c010e447:	8b 45 08             	mov    0x8(%ebp),%eax
c010e44a:	ff d0                	call   *%eax
                }
                else {
                    putch(ch, putdat);
                }
            }
            for (; width > 0; width --) {
c010e44c:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010e450:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010e454:	7f e3                	jg     c010e439 <vprintfmt+0x24c>
                putch(' ', putdat);
            }
            break;
c010e456:	e9 70 01 00 00       	jmp    c010e5cb <vprintfmt+0x3de>

        // (signed) decimal
        case 'd':
            num = getint(&ap, lflag);
c010e45b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e45e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e462:	8d 45 14             	lea    0x14(%ebp),%eax
c010e465:	89 04 24             	mov    %eax,(%esp)
c010e468:	e8 0b fd ff ff       	call   c010e178 <getint>
c010e46d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010e470:	89 55 f4             	mov    %edx,-0xc(%ebp)
            if ((long long)num < 0) {
c010e473:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e476:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010e479:	85 d2                	test   %edx,%edx
c010e47b:	79 26                	jns    c010e4a3 <vprintfmt+0x2b6>
                putch('-', putdat);
c010e47d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e480:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e484:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
c010e48b:	8b 45 08             	mov    0x8(%ebp),%eax
c010e48e:	ff d0                	call   *%eax
                num = -(long long)num;
c010e490:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e493:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010e496:	f7 d8                	neg    %eax
c010e498:	83 d2 00             	adc    $0x0,%edx
c010e49b:	f7 da                	neg    %edx
c010e49d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010e4a0:	89 55 f4             	mov    %edx,-0xc(%ebp)
            }
            base = 10;
c010e4a3:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c010e4aa:	e9 a8 00 00 00       	jmp    c010e557 <vprintfmt+0x36a>

        // unsigned decimal
        case 'u':
            num = getuint(&ap, lflag);
c010e4af:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e4b2:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e4b6:	8d 45 14             	lea    0x14(%ebp),%eax
c010e4b9:	89 04 24             	mov    %eax,(%esp)
c010e4bc:	e8 68 fc ff ff       	call   c010e129 <getuint>
c010e4c1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010e4c4:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 10;
c010e4c7:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c010e4ce:	e9 84 00 00 00       	jmp    c010e557 <vprintfmt+0x36a>

        // (unsigned) octal
        case 'o':
            num = getuint(&ap, lflag);
c010e4d3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e4d6:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e4da:	8d 45 14             	lea    0x14(%ebp),%eax
c010e4dd:	89 04 24             	mov    %eax,(%esp)
c010e4e0:	e8 44 fc ff ff       	call   c010e129 <getuint>
c010e4e5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010e4e8:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 8;
c010e4eb:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
            goto number;
c010e4f2:	eb 63                	jmp    c010e557 <vprintfmt+0x36a>

        // pointer
        case 'p':
            putch('0', putdat);
c010e4f4:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e4f7:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e4fb:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
c010e502:	8b 45 08             	mov    0x8(%ebp),%eax
c010e505:	ff d0                	call   *%eax
            putch('x', putdat);
c010e507:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e50a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e50e:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
c010e515:	8b 45 08             	mov    0x8(%ebp),%eax
c010e518:	ff d0                	call   *%eax
            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
c010e51a:	8b 45 14             	mov    0x14(%ebp),%eax
c010e51d:	8d 50 04             	lea    0x4(%eax),%edx
c010e520:	89 55 14             	mov    %edx,0x14(%ebp)
c010e523:	8b 00                	mov    (%eax),%eax
c010e525:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010e528:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            base = 16;
c010e52f:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
            goto number;
c010e536:	eb 1f                	jmp    c010e557 <vprintfmt+0x36a>

        // (unsigned) hexadecimal
        case 'x':
            num = getuint(&ap, lflag);
c010e538:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e53b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e53f:	8d 45 14             	lea    0x14(%ebp),%eax
c010e542:	89 04 24             	mov    %eax,(%esp)
c010e545:	e8 df fb ff ff       	call   c010e129 <getuint>
c010e54a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010e54d:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 16;
c010e550:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
        number:
            printnum(putch, putdat, num, base, width, padc);
c010e557:	0f be 55 db          	movsbl -0x25(%ebp),%edx
c010e55b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e55e:	89 54 24 18          	mov    %edx,0x18(%esp)
c010e562:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010e565:	89 54 24 14          	mov    %edx,0x14(%esp)
c010e569:	89 44 24 10          	mov    %eax,0x10(%esp)
c010e56d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e570:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010e573:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e577:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010e57b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e57e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e582:	8b 45 08             	mov    0x8(%ebp),%eax
c010e585:	89 04 24             	mov    %eax,(%esp)
c010e588:	e8 97 fa ff ff       	call   c010e024 <printnum>
            break;
c010e58d:	eb 3c                	jmp    c010e5cb <vprintfmt+0x3de>

        // escaped '%' character
        case '%':
            putch(ch, putdat);
c010e58f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e592:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e596:	89 1c 24             	mov    %ebx,(%esp)
c010e599:	8b 45 08             	mov    0x8(%ebp),%eax
c010e59c:	ff d0                	call   *%eax
            break;
c010e59e:	eb 2b                	jmp    c010e5cb <vprintfmt+0x3de>

        // unrecognized escape sequence - just print it literally
        default:
            putch('%', putdat);
c010e5a0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e5a3:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e5a7:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
c010e5ae:	8b 45 08             	mov    0x8(%ebp),%eax
c010e5b1:	ff d0                	call   *%eax
            for (fmt --; fmt[-1] != '%'; fmt --)
c010e5b3:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010e5b7:	eb 04                	jmp    c010e5bd <vprintfmt+0x3d0>
c010e5b9:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010e5bd:	8b 45 10             	mov    0x10(%ebp),%eax
c010e5c0:	83 e8 01             	sub    $0x1,%eax
c010e5c3:	0f b6 00             	movzbl (%eax),%eax
c010e5c6:	3c 25                	cmp    $0x25,%al
c010e5c8:	75 ef                	jne    c010e5b9 <vprintfmt+0x3cc>
                /* do nothing */;
            break;
c010e5ca:	90                   	nop
        }
    }
c010e5cb:	90                   	nop
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010e5cc:	e9 3e fc ff ff       	jmp    c010e20f <vprintfmt+0x22>
            for (fmt --; fmt[-1] != '%'; fmt --)
                /* do nothing */;
            break;
        }
    }
}
c010e5d1:	83 c4 40             	add    $0x40,%esp
c010e5d4:	5b                   	pop    %ebx
c010e5d5:	5e                   	pop    %esi
c010e5d6:	5d                   	pop    %ebp
c010e5d7:	c3                   	ret    

c010e5d8 <sprintputch>:
 * sprintputch - 'print' a single character in a buffer
 * @ch:         the character will be printed
 * @b:          the buffer to place the character @ch
 * */
static void
sprintputch(int ch, struct sprintbuf *b) {
c010e5d8:	55                   	push   %ebp
c010e5d9:	89 e5                	mov    %esp,%ebp
    b->cnt ++;
c010e5db:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e5de:	8b 40 08             	mov    0x8(%eax),%eax
c010e5e1:	8d 50 01             	lea    0x1(%eax),%edx
c010e5e4:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e5e7:	89 50 08             	mov    %edx,0x8(%eax)
    if (b->buf < b->ebuf) {
c010e5ea:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e5ed:	8b 10                	mov    (%eax),%edx
c010e5ef:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e5f2:	8b 40 04             	mov    0x4(%eax),%eax
c010e5f5:	39 c2                	cmp    %eax,%edx
c010e5f7:	73 12                	jae    c010e60b <sprintputch+0x33>
        *b->buf ++ = ch;
c010e5f9:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e5fc:	8b 00                	mov    (%eax),%eax
c010e5fe:	8d 48 01             	lea    0x1(%eax),%ecx
c010e601:	8b 55 0c             	mov    0xc(%ebp),%edx
c010e604:	89 0a                	mov    %ecx,(%edx)
c010e606:	8b 55 08             	mov    0x8(%ebp),%edx
c010e609:	88 10                	mov    %dl,(%eax)
    }
}
c010e60b:	5d                   	pop    %ebp
c010e60c:	c3                   	ret    

c010e60d <snprintf>:
 * @str:        the buffer to place the result into
 * @size:       the size of buffer, including the trailing null space
 * @fmt:        the format string to use
 * */
int
snprintf(char *str, size_t size, const char *fmt, ...) {
c010e60d:	55                   	push   %ebp
c010e60e:	89 e5                	mov    %esp,%ebp
c010e610:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c010e613:	8d 45 14             	lea    0x14(%ebp),%eax
c010e616:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vsnprintf(str, size, fmt, ap);
c010e619:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e61c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010e620:	8b 45 10             	mov    0x10(%ebp),%eax
c010e623:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e627:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e62a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e62e:	8b 45 08             	mov    0x8(%ebp),%eax
c010e631:	89 04 24             	mov    %eax,(%esp)
c010e634:	e8 08 00 00 00       	call   c010e641 <vsnprintf>
c010e639:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c010e63c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010e63f:	c9                   	leave  
c010e640:	c3                   	ret    

c010e641 <vsnprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want snprintf() instead.
 * */
int
vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
c010e641:	55                   	push   %ebp
c010e642:	89 e5                	mov    %esp,%ebp
c010e644:	83 ec 28             	sub    $0x28,%esp
    struct sprintbuf b = {str, str + size - 1, 0};
c010e647:	8b 45 08             	mov    0x8(%ebp),%eax
c010e64a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010e64d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e650:	8d 50 ff             	lea    -0x1(%eax),%edx
c010e653:	8b 45 08             	mov    0x8(%ebp),%eax
c010e656:	01 d0                	add    %edx,%eax
c010e658:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010e65b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (str == NULL || b.buf > b.ebuf) {
c010e662:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010e666:	74 0a                	je     c010e672 <vsnprintf+0x31>
c010e668:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010e66b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e66e:	39 c2                	cmp    %eax,%edx
c010e670:	76 07                	jbe    c010e679 <vsnprintf+0x38>
        return -E_INVAL;
c010e672:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010e677:	eb 2a                	jmp    c010e6a3 <vsnprintf+0x62>
    }
    // print the string to the buffer
    vprintfmt((void*)sprintputch, &b, fmt, ap);
c010e679:	8b 45 14             	mov    0x14(%ebp),%eax
c010e67c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010e680:	8b 45 10             	mov    0x10(%ebp),%eax
c010e683:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e687:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010e68a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e68e:	c7 04 24 d8 e5 10 c0 	movl   $0xc010e5d8,(%esp)
c010e695:	e8 53 fb ff ff       	call   c010e1ed <vprintfmt>
    // null terminate the buffer
    *b.buf = '\0';
c010e69a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e69d:	c6 00 00             	movb   $0x0,(%eax)
    return b.cnt;
c010e6a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010e6a3:	c9                   	leave  
c010e6a4:	c3                   	ret    

c010e6a5 <rand>:
 * rand - returns a pseudo-random integer
 *
 * The rand() function return a value in the range [0, RAND_MAX].
 * */
int
rand(void) {
c010e6a5:	55                   	push   %ebp
c010e6a6:	89 e5                	mov    %esp,%ebp
c010e6a8:	57                   	push   %edi
c010e6a9:	56                   	push   %esi
c010e6aa:	53                   	push   %ebx
c010e6ab:	83 ec 24             	sub    $0x24,%esp
    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
c010e6ae:	a1 c0 4e 13 c0       	mov    0xc0134ec0,%eax
c010e6b3:	8b 15 c4 4e 13 c0    	mov    0xc0134ec4,%edx
c010e6b9:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
c010e6bf:	6b f0 05             	imul   $0x5,%eax,%esi
c010e6c2:	01 f7                	add    %esi,%edi
c010e6c4:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
c010e6c9:	f7 e6                	mul    %esi
c010e6cb:	8d 34 17             	lea    (%edi,%edx,1),%esi
c010e6ce:	89 f2                	mov    %esi,%edx
c010e6d0:	83 c0 0b             	add    $0xb,%eax
c010e6d3:	83 d2 00             	adc    $0x0,%edx
c010e6d6:	89 c7                	mov    %eax,%edi
c010e6d8:	83 e7 ff             	and    $0xffffffff,%edi
c010e6db:	89 f9                	mov    %edi,%ecx
c010e6dd:	0f b7 da             	movzwl %dx,%ebx
c010e6e0:	89 0d c0 4e 13 c0    	mov    %ecx,0xc0134ec0
c010e6e6:	89 1d c4 4e 13 c0    	mov    %ebx,0xc0134ec4
    unsigned long long result = (next >> 12);
c010e6ec:	a1 c0 4e 13 c0       	mov    0xc0134ec0,%eax
c010e6f1:	8b 15 c4 4e 13 c0    	mov    0xc0134ec4,%edx
c010e6f7:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c010e6fb:	c1 ea 0c             	shr    $0xc,%edx
c010e6fe:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010e701:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    return (int)do_div(result, RAND_MAX + 1);
c010e704:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
c010e70b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e70e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010e711:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010e714:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010e717:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e71a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010e71d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010e721:	74 1c                	je     c010e73f <rand+0x9a>
c010e723:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e726:	ba 00 00 00 00       	mov    $0x0,%edx
c010e72b:	f7 75 dc             	divl   -0x24(%ebp)
c010e72e:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010e731:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e734:	ba 00 00 00 00       	mov    $0x0,%edx
c010e739:	f7 75 dc             	divl   -0x24(%ebp)
c010e73c:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010e73f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010e742:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010e745:	f7 75 dc             	divl   -0x24(%ebp)
c010e748:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010e74b:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010e74e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010e751:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010e754:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010e757:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010e75a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
}
c010e75d:	83 c4 24             	add    $0x24,%esp
c010e760:	5b                   	pop    %ebx
c010e761:	5e                   	pop    %esi
c010e762:	5f                   	pop    %edi
c010e763:	5d                   	pop    %ebp
c010e764:	c3                   	ret    

c010e765 <srand>:
/* *
 * srand - seed the random number generator with the given number
 * @seed:   the required seed number
 * */
void
srand(unsigned int seed) {
c010e765:	55                   	push   %ebp
c010e766:	89 e5                	mov    %esp,%ebp
    next = seed;
c010e768:	8b 45 08             	mov    0x8(%ebp),%eax
c010e76b:	ba 00 00 00 00       	mov    $0x0,%edx
c010e770:	a3 c0 4e 13 c0       	mov    %eax,0xc0134ec0
c010e775:	89 15 c4 4e 13 c0    	mov    %edx,0xc0134ec4
}
c010e77b:	5d                   	pop    %ebp
c010e77c:	c3                   	ret    

c010e77d <strlen>:
 * @s:      the input string
 *
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
c010e77d:	55                   	push   %ebp
c010e77e:	89 e5                	mov    %esp,%ebp
c010e780:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c010e783:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*s ++ != '\0') {
c010e78a:	eb 04                	jmp    c010e790 <strlen+0x13>
        cnt ++;
c010e78c:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
    size_t cnt = 0;
    while (*s ++ != '\0') {
c010e790:	8b 45 08             	mov    0x8(%ebp),%eax
c010e793:	8d 50 01             	lea    0x1(%eax),%edx
c010e796:	89 55 08             	mov    %edx,0x8(%ebp)
c010e799:	0f b6 00             	movzbl (%eax),%eax
c010e79c:	84 c0                	test   %al,%al
c010e79e:	75 ec                	jne    c010e78c <strlen+0xf>
        cnt ++;
    }
    return cnt;
c010e7a0:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010e7a3:	c9                   	leave  
c010e7a4:	c3                   	ret    

c010e7a5 <strnlen>:
 * The return value is strlen(s), if that is less than @len, or
 * @len if there is no '\0' character among the first @len characters
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
c010e7a5:	55                   	push   %ebp
c010e7a6:	89 e5                	mov    %esp,%ebp
c010e7a8:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c010e7ab:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (cnt < len && *s ++ != '\0') {
c010e7b2:	eb 04                	jmp    c010e7b8 <strnlen+0x13>
        cnt ++;
c010e7b4:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
    size_t cnt = 0;
    while (cnt < len && *s ++ != '\0') {
c010e7b8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e7bb:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010e7be:	73 10                	jae    c010e7d0 <strnlen+0x2b>
c010e7c0:	8b 45 08             	mov    0x8(%ebp),%eax
c010e7c3:	8d 50 01             	lea    0x1(%eax),%edx
c010e7c6:	89 55 08             	mov    %edx,0x8(%ebp)
c010e7c9:	0f b6 00             	movzbl (%eax),%eax
c010e7cc:	84 c0                	test   %al,%al
c010e7ce:	75 e4                	jne    c010e7b4 <strnlen+0xf>
        cnt ++;
    }
    return cnt;
c010e7d0:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010e7d3:	c9                   	leave  
c010e7d4:	c3                   	ret    

c010e7d5 <strcpy>:
 * To avoid overflows, the size of array pointed by @dst should be long enough to
 * contain the same string as @src (including the terminating null character), and
 * should not overlap in memory with @src.
 * */
char *
strcpy(char *dst, const char *src) {
c010e7d5:	55                   	push   %ebp
c010e7d6:	89 e5                	mov    %esp,%ebp
c010e7d8:	57                   	push   %edi
c010e7d9:	56                   	push   %esi
c010e7da:	83 ec 20             	sub    $0x20,%esp
c010e7dd:	8b 45 08             	mov    0x8(%ebp),%eax
c010e7e0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e7e3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e7e6:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCPY
#define __HAVE_ARCH_STRCPY
static inline char *
__strcpy(char *dst, const char *src) {
    int d0, d1, d2;
    asm volatile (
c010e7e9:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010e7ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e7ef:	89 d1                	mov    %edx,%ecx
c010e7f1:	89 c2                	mov    %eax,%edx
c010e7f3:	89 ce                	mov    %ecx,%esi
c010e7f5:	89 d7                	mov    %edx,%edi
c010e7f7:	ac                   	lods   %ds:(%esi),%al
c010e7f8:	aa                   	stos   %al,%es:(%edi)
c010e7f9:	84 c0                	test   %al,%al
c010e7fb:	75 fa                	jne    c010e7f7 <strcpy+0x22>
c010e7fd:	89 fa                	mov    %edi,%edx
c010e7ff:	89 f1                	mov    %esi,%ecx
c010e801:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c010e804:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010e807:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        "stosb;"
        "testb %%al, %%al;"
        "jne 1b;"
        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
        : "0" (src), "1" (dst) : "memory");
    return dst;
c010e80a:	8b 45 f4             	mov    -0xc(%ebp),%eax
    char *p = dst;
    while ((*p ++ = *src ++) != '\0')
        /* nothing */;
    return dst;
#endif /* __HAVE_ARCH_STRCPY */
}
c010e80d:	83 c4 20             	add    $0x20,%esp
c010e810:	5e                   	pop    %esi
c010e811:	5f                   	pop    %edi
c010e812:	5d                   	pop    %ebp
c010e813:	c3                   	ret    

c010e814 <strncpy>:
 * @len:    maximum number of characters to be copied from @src
 *
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
c010e814:	55                   	push   %ebp
c010e815:	89 e5                	mov    %esp,%ebp
c010e817:	83 ec 10             	sub    $0x10,%esp
    char *p = dst;
c010e81a:	8b 45 08             	mov    0x8(%ebp),%eax
c010e81d:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (len > 0) {
c010e820:	eb 21                	jmp    c010e843 <strncpy+0x2f>
        if ((*p = *src) != '\0') {
c010e822:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e825:	0f b6 10             	movzbl (%eax),%edx
c010e828:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e82b:	88 10                	mov    %dl,(%eax)
c010e82d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e830:	0f b6 00             	movzbl (%eax),%eax
c010e833:	84 c0                	test   %al,%al
c010e835:	74 04                	je     c010e83b <strncpy+0x27>
            src ++;
c010e837:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        }
        p ++, len --;
c010e83b:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010e83f:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
    char *p = dst;
    while (len > 0) {
c010e843:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010e847:	75 d9                	jne    c010e822 <strncpy+0xe>
        if ((*p = *src) != '\0') {
            src ++;
        }
        p ++, len --;
    }
    return dst;
c010e849:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010e84c:	c9                   	leave  
c010e84d:	c3                   	ret    

c010e84e <strcmp>:
 * - A value greater than zero indicates that the first character that does
 *   not match has a greater value in @s1 than in @s2;
 * - And a value less than zero indicates the opposite.
 * */
int
strcmp(const char *s1, const char *s2) {
c010e84e:	55                   	push   %ebp
c010e84f:	89 e5                	mov    %esp,%ebp
c010e851:	57                   	push   %edi
c010e852:	56                   	push   %esi
c010e853:	83 ec 20             	sub    $0x20,%esp
c010e856:	8b 45 08             	mov    0x8(%ebp),%eax
c010e859:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e85c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e85f:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCMP
#define __HAVE_ARCH_STRCMP
static inline int
__strcmp(const char *s1, const char *s2) {
    int d0, d1, ret;
    asm volatile (
c010e862:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010e865:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e868:	89 d1                	mov    %edx,%ecx
c010e86a:	89 c2                	mov    %eax,%edx
c010e86c:	89 ce                	mov    %ecx,%esi
c010e86e:	89 d7                	mov    %edx,%edi
c010e870:	ac                   	lods   %ds:(%esi),%al
c010e871:	ae                   	scas   %es:(%edi),%al
c010e872:	75 08                	jne    c010e87c <strcmp+0x2e>
c010e874:	84 c0                	test   %al,%al
c010e876:	75 f8                	jne    c010e870 <strcmp+0x22>
c010e878:	31 c0                	xor    %eax,%eax
c010e87a:	eb 04                	jmp    c010e880 <strcmp+0x32>
c010e87c:	19 c0                	sbb    %eax,%eax
c010e87e:	0c 01                	or     $0x1,%al
c010e880:	89 fa                	mov    %edi,%edx
c010e882:	89 f1                	mov    %esi,%ecx
c010e884:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010e887:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c010e88a:	89 55 e4             	mov    %edx,-0x1c(%ebp)
        "orb $1, %%al;"
        "3:"
        : "=a" (ret), "=&S" (d0), "=&D" (d1)
        : "1" (s1), "2" (s2)
        : "memory");
    return ret;
c010e88d:	8b 45 ec             	mov    -0x14(%ebp),%eax
    while (*s1 != '\0' && *s1 == *s2) {
        s1 ++, s2 ++;
    }
    return (int)((unsigned char)*s1 - (unsigned char)*s2);
#endif /* __HAVE_ARCH_STRCMP */
}
c010e890:	83 c4 20             	add    $0x20,%esp
c010e893:	5e                   	pop    %esi
c010e894:	5f                   	pop    %edi
c010e895:	5d                   	pop    %ebp
c010e896:	c3                   	ret    

c010e897 <strncmp>:
 * they are equal to each other, it continues with the following pairs until
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
c010e897:	55                   	push   %ebp
c010e898:	89 e5                	mov    %esp,%ebp
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c010e89a:	eb 0c                	jmp    c010e8a8 <strncmp+0x11>
        n --, s1 ++, s2 ++;
c010e89c:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010e8a0:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010e8a4:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c010e8a8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010e8ac:	74 1a                	je     c010e8c8 <strncmp+0x31>
c010e8ae:	8b 45 08             	mov    0x8(%ebp),%eax
c010e8b1:	0f b6 00             	movzbl (%eax),%eax
c010e8b4:	84 c0                	test   %al,%al
c010e8b6:	74 10                	je     c010e8c8 <strncmp+0x31>
c010e8b8:	8b 45 08             	mov    0x8(%ebp),%eax
c010e8bb:	0f b6 10             	movzbl (%eax),%edx
c010e8be:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e8c1:	0f b6 00             	movzbl (%eax),%eax
c010e8c4:	38 c2                	cmp    %al,%dl
c010e8c6:	74 d4                	je     c010e89c <strncmp+0x5>
        n --, s1 ++, s2 ++;
    }
    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
c010e8c8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010e8cc:	74 18                	je     c010e8e6 <strncmp+0x4f>
c010e8ce:	8b 45 08             	mov    0x8(%ebp),%eax
c010e8d1:	0f b6 00             	movzbl (%eax),%eax
c010e8d4:	0f b6 d0             	movzbl %al,%edx
c010e8d7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e8da:	0f b6 00             	movzbl (%eax),%eax
c010e8dd:	0f b6 c0             	movzbl %al,%eax
c010e8e0:	29 c2                	sub    %eax,%edx
c010e8e2:	89 d0                	mov    %edx,%eax
c010e8e4:	eb 05                	jmp    c010e8eb <strncmp+0x54>
c010e8e6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010e8eb:	5d                   	pop    %ebp
c010e8ec:	c3                   	ret    

c010e8ed <strchr>:
 *
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
c010e8ed:	55                   	push   %ebp
c010e8ee:	89 e5                	mov    %esp,%ebp
c010e8f0:	83 ec 04             	sub    $0x4,%esp
c010e8f3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e8f6:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c010e8f9:	eb 14                	jmp    c010e90f <strchr+0x22>
        if (*s == c) {
c010e8fb:	8b 45 08             	mov    0x8(%ebp),%eax
c010e8fe:	0f b6 00             	movzbl (%eax),%eax
c010e901:	3a 45 fc             	cmp    -0x4(%ebp),%al
c010e904:	75 05                	jne    c010e90b <strchr+0x1e>
            return (char *)s;
c010e906:	8b 45 08             	mov    0x8(%ebp),%eax
c010e909:	eb 13                	jmp    c010e91e <strchr+0x31>
        }
        s ++;
c010e90b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
    while (*s != '\0') {
c010e90f:	8b 45 08             	mov    0x8(%ebp),%eax
c010e912:	0f b6 00             	movzbl (%eax),%eax
c010e915:	84 c0                	test   %al,%al
c010e917:	75 e2                	jne    c010e8fb <strchr+0xe>
        if (*s == c) {
            return (char *)s;
        }
        s ++;
    }
    return NULL;
c010e919:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010e91e:	c9                   	leave  
c010e91f:	c3                   	ret    

c010e920 <strfind>:
 * The strfind() function is like strchr() except that if @c is
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
c010e920:	55                   	push   %ebp
c010e921:	89 e5                	mov    %esp,%ebp
c010e923:	83 ec 04             	sub    $0x4,%esp
c010e926:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e929:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c010e92c:	eb 11                	jmp    c010e93f <strfind+0x1f>
        if (*s == c) {
c010e92e:	8b 45 08             	mov    0x8(%ebp),%eax
c010e931:	0f b6 00             	movzbl (%eax),%eax
c010e934:	3a 45 fc             	cmp    -0x4(%ebp),%al
c010e937:	75 02                	jne    c010e93b <strfind+0x1b>
            break;
c010e939:	eb 0e                	jmp    c010e949 <strfind+0x29>
        }
        s ++;
c010e93b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
    while (*s != '\0') {
c010e93f:	8b 45 08             	mov    0x8(%ebp),%eax
c010e942:	0f b6 00             	movzbl (%eax),%eax
c010e945:	84 c0                	test   %al,%al
c010e947:	75 e5                	jne    c010e92e <strfind+0xe>
        if (*s == c) {
            break;
        }
        s ++;
    }
    return (char *)s;
c010e949:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010e94c:	c9                   	leave  
c010e94d:	c3                   	ret    

c010e94e <strtol>:
 * an optional "0x" or "0X" prefix.
 *
 * The strtol() function returns the converted integral number as a long int value.
 * */
long
strtol(const char *s, char **endptr, int base) {
c010e94e:	55                   	push   %ebp
c010e94f:	89 e5                	mov    %esp,%ebp
c010e951:	83 ec 10             	sub    $0x10,%esp
    int neg = 0;
c010e954:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    long val = 0;
c010e95b:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c010e962:	eb 04                	jmp    c010e968 <strtol+0x1a>
        s ++;
c010e964:	83 45 08 01          	addl   $0x1,0x8(%ebp)
strtol(const char *s, char **endptr, int base) {
    int neg = 0;
    long val = 0;

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c010e968:	8b 45 08             	mov    0x8(%ebp),%eax
c010e96b:	0f b6 00             	movzbl (%eax),%eax
c010e96e:	3c 20                	cmp    $0x20,%al
c010e970:	74 f2                	je     c010e964 <strtol+0x16>
c010e972:	8b 45 08             	mov    0x8(%ebp),%eax
c010e975:	0f b6 00             	movzbl (%eax),%eax
c010e978:	3c 09                	cmp    $0x9,%al
c010e97a:	74 e8                	je     c010e964 <strtol+0x16>
        s ++;
    }

    // plus/minus sign
    if (*s == '+') {
c010e97c:	8b 45 08             	mov    0x8(%ebp),%eax
c010e97f:	0f b6 00             	movzbl (%eax),%eax
c010e982:	3c 2b                	cmp    $0x2b,%al
c010e984:	75 06                	jne    c010e98c <strtol+0x3e>
        s ++;
c010e986:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010e98a:	eb 15                	jmp    c010e9a1 <strtol+0x53>
    }
    else if (*s == '-') {
c010e98c:	8b 45 08             	mov    0x8(%ebp),%eax
c010e98f:	0f b6 00             	movzbl (%eax),%eax
c010e992:	3c 2d                	cmp    $0x2d,%al
c010e994:	75 0b                	jne    c010e9a1 <strtol+0x53>
        s ++, neg = 1;
c010e996:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010e99a:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
    }

    // hex or octal base prefix
    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
c010e9a1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010e9a5:	74 06                	je     c010e9ad <strtol+0x5f>
c010e9a7:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
c010e9ab:	75 24                	jne    c010e9d1 <strtol+0x83>
c010e9ad:	8b 45 08             	mov    0x8(%ebp),%eax
c010e9b0:	0f b6 00             	movzbl (%eax),%eax
c010e9b3:	3c 30                	cmp    $0x30,%al
c010e9b5:	75 1a                	jne    c010e9d1 <strtol+0x83>
c010e9b7:	8b 45 08             	mov    0x8(%ebp),%eax
c010e9ba:	83 c0 01             	add    $0x1,%eax
c010e9bd:	0f b6 00             	movzbl (%eax),%eax
c010e9c0:	3c 78                	cmp    $0x78,%al
c010e9c2:	75 0d                	jne    c010e9d1 <strtol+0x83>
        s += 2, base = 16;
c010e9c4:	83 45 08 02          	addl   $0x2,0x8(%ebp)
c010e9c8:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
c010e9cf:	eb 2a                	jmp    c010e9fb <strtol+0xad>
    }
    else if (base == 0 && s[0] == '0') {
c010e9d1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010e9d5:	75 17                	jne    c010e9ee <strtol+0xa0>
c010e9d7:	8b 45 08             	mov    0x8(%ebp),%eax
c010e9da:	0f b6 00             	movzbl (%eax),%eax
c010e9dd:	3c 30                	cmp    $0x30,%al
c010e9df:	75 0d                	jne    c010e9ee <strtol+0xa0>
        s ++, base = 8;
c010e9e1:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010e9e5:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
c010e9ec:	eb 0d                	jmp    c010e9fb <strtol+0xad>
    }
    else if (base == 0) {
c010e9ee:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010e9f2:	75 07                	jne    c010e9fb <strtol+0xad>
        base = 10;
c010e9f4:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

    // digits
    while (1) {
        int dig;

        if (*s >= '0' && *s <= '9') {
c010e9fb:	8b 45 08             	mov    0x8(%ebp),%eax
c010e9fe:	0f b6 00             	movzbl (%eax),%eax
c010ea01:	3c 2f                	cmp    $0x2f,%al
c010ea03:	7e 1b                	jle    c010ea20 <strtol+0xd2>
c010ea05:	8b 45 08             	mov    0x8(%ebp),%eax
c010ea08:	0f b6 00             	movzbl (%eax),%eax
c010ea0b:	3c 39                	cmp    $0x39,%al
c010ea0d:	7f 11                	jg     c010ea20 <strtol+0xd2>
            dig = *s - '0';
c010ea0f:	8b 45 08             	mov    0x8(%ebp),%eax
c010ea12:	0f b6 00             	movzbl (%eax),%eax
c010ea15:	0f be c0             	movsbl %al,%eax
c010ea18:	83 e8 30             	sub    $0x30,%eax
c010ea1b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ea1e:	eb 48                	jmp    c010ea68 <strtol+0x11a>
        }
        else if (*s >= 'a' && *s <= 'z') {
c010ea20:	8b 45 08             	mov    0x8(%ebp),%eax
c010ea23:	0f b6 00             	movzbl (%eax),%eax
c010ea26:	3c 60                	cmp    $0x60,%al
c010ea28:	7e 1b                	jle    c010ea45 <strtol+0xf7>
c010ea2a:	8b 45 08             	mov    0x8(%ebp),%eax
c010ea2d:	0f b6 00             	movzbl (%eax),%eax
c010ea30:	3c 7a                	cmp    $0x7a,%al
c010ea32:	7f 11                	jg     c010ea45 <strtol+0xf7>
            dig = *s - 'a' + 10;
c010ea34:	8b 45 08             	mov    0x8(%ebp),%eax
c010ea37:	0f b6 00             	movzbl (%eax),%eax
c010ea3a:	0f be c0             	movsbl %al,%eax
c010ea3d:	83 e8 57             	sub    $0x57,%eax
c010ea40:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ea43:	eb 23                	jmp    c010ea68 <strtol+0x11a>
        }
        else if (*s >= 'A' && *s <= 'Z') {
c010ea45:	8b 45 08             	mov    0x8(%ebp),%eax
c010ea48:	0f b6 00             	movzbl (%eax),%eax
c010ea4b:	3c 40                	cmp    $0x40,%al
c010ea4d:	7e 3d                	jle    c010ea8c <strtol+0x13e>
c010ea4f:	8b 45 08             	mov    0x8(%ebp),%eax
c010ea52:	0f b6 00             	movzbl (%eax),%eax
c010ea55:	3c 5a                	cmp    $0x5a,%al
c010ea57:	7f 33                	jg     c010ea8c <strtol+0x13e>
            dig = *s - 'A' + 10;
c010ea59:	8b 45 08             	mov    0x8(%ebp),%eax
c010ea5c:	0f b6 00             	movzbl (%eax),%eax
c010ea5f:	0f be c0             	movsbl %al,%eax
c010ea62:	83 e8 37             	sub    $0x37,%eax
c010ea65:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        else {
            break;
        }
        if (dig >= base) {
c010ea68:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ea6b:	3b 45 10             	cmp    0x10(%ebp),%eax
c010ea6e:	7c 02                	jl     c010ea72 <strtol+0x124>
            break;
c010ea70:	eb 1a                	jmp    c010ea8c <strtol+0x13e>
        }
        s ++, val = (val * base) + dig;
c010ea72:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010ea76:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010ea79:	0f af 45 10          	imul   0x10(%ebp),%eax
c010ea7d:	89 c2                	mov    %eax,%edx
c010ea7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ea82:	01 d0                	add    %edx,%eax
c010ea84:	89 45 f8             	mov    %eax,-0x8(%ebp)
        // we don't properly detect overflow!
    }
c010ea87:	e9 6f ff ff ff       	jmp    c010e9fb <strtol+0xad>

    if (endptr) {
c010ea8c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010ea90:	74 08                	je     c010ea9a <strtol+0x14c>
        *endptr = (char *) s;
c010ea92:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ea95:	8b 55 08             	mov    0x8(%ebp),%edx
c010ea98:	89 10                	mov    %edx,(%eax)
    }
    return (neg ? -val : val);
c010ea9a:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c010ea9e:	74 07                	je     c010eaa7 <strtol+0x159>
c010eaa0:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010eaa3:	f7 d8                	neg    %eax
c010eaa5:	eb 03                	jmp    c010eaaa <strtol+0x15c>
c010eaa7:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010eaaa:	c9                   	leave  
c010eaab:	c3                   	ret    

c010eaac <memset>:
 * @n:      number of bytes to be set to the value
 *
 * The memset() function returns @s.
 * */
void *
memset(void *s, char c, size_t n) {
c010eaac:	55                   	push   %ebp
c010eaad:	89 e5                	mov    %esp,%ebp
c010eaaf:	57                   	push   %edi
c010eab0:	83 ec 24             	sub    $0x24,%esp
c010eab3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010eab6:	88 45 d8             	mov    %al,-0x28(%ebp)
#ifdef __HAVE_ARCH_MEMSET
    return __memset(s, c, n);
c010eab9:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
c010eabd:	8b 55 08             	mov    0x8(%ebp),%edx
c010eac0:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010eac3:	88 45 f7             	mov    %al,-0x9(%ebp)
c010eac6:	8b 45 10             	mov    0x10(%ebp),%eax
c010eac9:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_MEMSET
#define __HAVE_ARCH_MEMSET
static inline void *
__memset(void *s, char c, size_t n) {
    int d0, d1;
    asm volatile (
c010eacc:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010eacf:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c010ead3:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010ead6:	89 d7                	mov    %edx,%edi
c010ead8:	f3 aa                	rep stos %al,%es:(%edi)
c010eada:	89 fa                	mov    %edi,%edx
c010eadc:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c010eadf:	89 55 e8             	mov    %edx,-0x18(%ebp)
        "rep; stosb;"
        : "=&c" (d0), "=&D" (d1)
        : "0" (n), "a" (c), "1" (s)
        : "memory");
    return s;
c010eae2:	8b 45 f8             	mov    -0x8(%ebp),%eax
    while (n -- > 0) {
        *p ++ = c;
    }
    return s;
#endif /* __HAVE_ARCH_MEMSET */
}
c010eae5:	83 c4 24             	add    $0x24,%esp
c010eae8:	5f                   	pop    %edi
c010eae9:	5d                   	pop    %ebp
c010eaea:	c3                   	ret    

c010eaeb <memmove>:
 * @n:      number of bytes to copy
 *
 * The memmove() function returns @dst.
 * */
void *
memmove(void *dst, const void *src, size_t n) {
c010eaeb:	55                   	push   %ebp
c010eaec:	89 e5                	mov    %esp,%ebp
c010eaee:	57                   	push   %edi
c010eaef:	56                   	push   %esi
c010eaf0:	53                   	push   %ebx
c010eaf1:	83 ec 30             	sub    $0x30,%esp
c010eaf4:	8b 45 08             	mov    0x8(%ebp),%eax
c010eaf7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010eafa:	8b 45 0c             	mov    0xc(%ebp),%eax
c010eafd:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010eb00:	8b 45 10             	mov    0x10(%ebp),%eax
c010eb03:	89 45 e8             	mov    %eax,-0x18(%ebp)

#ifndef __HAVE_ARCH_MEMMOVE
#define __HAVE_ARCH_MEMMOVE
static inline void *
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
c010eb06:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eb09:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010eb0c:	73 42                	jae    c010eb50 <memmove+0x65>
c010eb0e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eb11:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010eb14:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010eb17:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010eb1a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010eb1d:	89 45 dc             	mov    %eax,-0x24(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c010eb20:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010eb23:	c1 e8 02             	shr    $0x2,%eax
c010eb26:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c010eb28:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010eb2b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010eb2e:	89 d7                	mov    %edx,%edi
c010eb30:	89 c6                	mov    %eax,%esi
c010eb32:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010eb34:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c010eb37:	83 e1 03             	and    $0x3,%ecx
c010eb3a:	74 02                	je     c010eb3e <memmove+0x53>
c010eb3c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010eb3e:	89 f0                	mov    %esi,%eax
c010eb40:	89 fa                	mov    %edi,%edx
c010eb42:	89 4d d8             	mov    %ecx,-0x28(%ebp)
c010eb45:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010eb48:	89 45 d0             	mov    %eax,-0x30(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c010eb4b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010eb4e:	eb 36                	jmp    c010eb86 <memmove+0x9b>
    asm volatile (
        "std;"
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
c010eb50:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010eb53:	8d 50 ff             	lea    -0x1(%eax),%edx
c010eb56:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010eb59:	01 c2                	add    %eax,%edx
c010eb5b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010eb5e:	8d 48 ff             	lea    -0x1(%eax),%ecx
c010eb61:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eb64:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
        return __memcpy(dst, src, n);
    }
    int d0, d1, d2;
    asm volatile (
c010eb67:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010eb6a:	89 c1                	mov    %eax,%ecx
c010eb6c:	89 d8                	mov    %ebx,%eax
c010eb6e:	89 d6                	mov    %edx,%esi
c010eb70:	89 c7                	mov    %eax,%edi
c010eb72:	fd                   	std    
c010eb73:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010eb75:	fc                   	cld    
c010eb76:	89 f8                	mov    %edi,%eax
c010eb78:	89 f2                	mov    %esi,%edx
c010eb7a:	89 4d cc             	mov    %ecx,-0x34(%ebp)
c010eb7d:	89 55 c8             	mov    %edx,-0x38(%ebp)
c010eb80:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
        : "memory");
    return dst;
c010eb83:	8b 45 f0             	mov    -0x10(%ebp),%eax
            *d ++ = *s ++;
        }
    }
    return dst;
#endif /* __HAVE_ARCH_MEMMOVE */
}
c010eb86:	83 c4 30             	add    $0x30,%esp
c010eb89:	5b                   	pop    %ebx
c010eb8a:	5e                   	pop    %esi
c010eb8b:	5f                   	pop    %edi
c010eb8c:	5d                   	pop    %ebp
c010eb8d:	c3                   	ret    

c010eb8e <memcpy>:
 * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
 * by both @src and @dst, should be at least @n bytes, and should not overlap
 * (for overlapping memory area, memmove is a safer approach).
 * */
void *
memcpy(void *dst, const void *src, size_t n) {
c010eb8e:	55                   	push   %ebp
c010eb8f:	89 e5                	mov    %esp,%ebp
c010eb91:	57                   	push   %edi
c010eb92:	56                   	push   %esi
c010eb93:	83 ec 20             	sub    $0x20,%esp
c010eb96:	8b 45 08             	mov    0x8(%ebp),%eax
c010eb99:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010eb9c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010eb9f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010eba2:	8b 45 10             	mov    0x10(%ebp),%eax
c010eba5:	89 45 ec             	mov    %eax,-0x14(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c010eba8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ebab:	c1 e8 02             	shr    $0x2,%eax
c010ebae:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c010ebb0:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010ebb3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ebb6:	89 d7                	mov    %edx,%edi
c010ebb8:	89 c6                	mov    %eax,%esi
c010ebba:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010ebbc:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010ebbf:	83 e1 03             	and    $0x3,%ecx
c010ebc2:	74 02                	je     c010ebc6 <memcpy+0x38>
c010ebc4:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010ebc6:	89 f0                	mov    %esi,%eax
c010ebc8:	89 fa                	mov    %edi,%edx
c010ebca:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c010ebcd:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010ebd0:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c010ebd3:	8b 45 f4             	mov    -0xc(%ebp),%eax
    while (n -- > 0) {
        *d ++ = *s ++;
    }
    return dst;
#endif /* __HAVE_ARCH_MEMCPY */
}
c010ebd6:	83 c4 20             	add    $0x20,%esp
c010ebd9:	5e                   	pop    %esi
c010ebda:	5f                   	pop    %edi
c010ebdb:	5d                   	pop    %ebp
c010ebdc:	c3                   	ret    

c010ebdd <memcmp>:
 *   match in both memory blocks has a greater value in @v1 than in @v2
 *   as if evaluated as unsigned char values;
 * - And a value less than zero indicates the opposite.
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
c010ebdd:	55                   	push   %ebp
c010ebde:	89 e5                	mov    %esp,%ebp
c010ebe0:	83 ec 10             	sub    $0x10,%esp
    const char *s1 = (const char *)v1;
c010ebe3:	8b 45 08             	mov    0x8(%ebp),%eax
c010ebe6:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s2 = (const char *)v2;
c010ebe9:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ebec:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (n -- > 0) {
c010ebef:	eb 30                	jmp    c010ec21 <memcmp+0x44>
        if (*s1 != *s2) {
c010ebf1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010ebf4:	0f b6 10             	movzbl (%eax),%edx
c010ebf7:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010ebfa:	0f b6 00             	movzbl (%eax),%eax
c010ebfd:	38 c2                	cmp    %al,%dl
c010ebff:	74 18                	je     c010ec19 <memcmp+0x3c>
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
c010ec01:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010ec04:	0f b6 00             	movzbl (%eax),%eax
c010ec07:	0f b6 d0             	movzbl %al,%edx
c010ec0a:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010ec0d:	0f b6 00             	movzbl (%eax),%eax
c010ec10:	0f b6 c0             	movzbl %al,%eax
c010ec13:	29 c2                	sub    %eax,%edx
c010ec15:	89 d0                	mov    %edx,%eax
c010ec17:	eb 1a                	jmp    c010ec33 <memcmp+0x56>
        }
        s1 ++, s2 ++;
c010ec19:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010ec1d:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
    const char *s1 = (const char *)v1;
    const char *s2 = (const char *)v2;
    while (n -- > 0) {
c010ec21:	8b 45 10             	mov    0x10(%ebp),%eax
c010ec24:	8d 50 ff             	lea    -0x1(%eax),%edx
c010ec27:	89 55 10             	mov    %edx,0x10(%ebp)
c010ec2a:	85 c0                	test   %eax,%eax
c010ec2c:	75 c3                	jne    c010ebf1 <memcmp+0x14>
        if (*s1 != *s2) {
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
        }
        s1 ++, s2 ++;
    }
    return 0;
c010ec2e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ec33:	c9                   	leave  
c010ec34:	c3                   	ret    
