
bin/kernel:     file format elf32-i386


Disassembly of section .text:

c0100000 <kern_entry>:
.text
.globl kern_entry
kern_entry:
    # reload temperate gdt (second time) to remap all physical memory
    # virtual_addr 0~4G=linear_addr&physical_addr -KERNBASE~4G-KERNBASE 
    lgdt REALLOC(__gdtdesc)
c0100000:	0f 01 15 18 e0 14 00 	lgdtl  0x14e018
    movl $KERNEL_DS, %eax
c0100007:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c010000c:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c010000e:	8e c0                	mov    %eax,%es
    movw %ax, %ss
c0100010:	8e d0                	mov    %eax,%ss

    ljmp $KERNEL_CS, $relocated
c0100012:	ea 19 00 10 c0 08 00 	ljmp   $0x8,$0xc0100019

c0100019 <relocated>:

relocated:

    # set ebp, esp
    movl $0x0, %ebp
c0100019:	bd 00 00 00 00       	mov    $0x0,%ebp
    # the kernel stack region is from bootstack -- bootstacktop,
    # the kernel stack size is KSTACKSIZE (8KB)defined in memlayout.h
    movl $bootstacktop, %esp
c010001e:	bc 00 e0 14 c0       	mov    $0xc014e000,%esp
    # now kernel stack is ready , call the first C function
    call kern_init
c0100023:	e8 02 00 00 00       	call   c010002a <kern_init>

c0100028 <spin>:

# should never get here
spin:
    jmp spin
c0100028:	eb fe                	jmp    c0100028 <spin>

c010002a <kern_init>:
int kern_init(void) __attribute__((noreturn));

static void lab1_switch_test(void);

int
kern_init(void) {
c010002a:	55                   	push   %ebp
c010002b:	89 e5                	mov    %esp,%ebp
c010002d:	83 ec 28             	sub    $0x28,%esp
    extern char edata[], end[];
    memset(edata, 0, end - edata);
c0100030:	ba 04 32 15 c0       	mov    $0xc0153204,%edx
c0100035:	b8 d0 ee 14 c0       	mov    $0xc014eed0,%eax
c010003a:	29 c2                	sub    %eax,%edx
c010003c:	89 d0                	mov    %edx,%eax
c010003e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100042:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0100049:	00 
c010004a:	c7 04 24 d0 ee 14 c0 	movl   $0xc014eed0,(%esp)
c0100051:	e8 ef 54 01 00       	call   c0115545 <memset>

    cons_init();                // init the console
c0100056:	e8 7d 17 00 00       	call   c01017d8 <cons_init>

    const char *message = "(THU.CST) os is loading ...";
c010005b:	c7 45 f4 e0 56 11 c0 	movl   $0xc01156e0,-0xc(%ebp)
    cprintf("%s\n\n", message);
c0100062:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100065:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100069:	c7 04 24 fc 56 11 c0 	movl   $0xc01156fc,(%esp)
c0100070:	e8 f0 02 00 00       	call   c0100365 <cprintf>

    print_kerninfo();
c0100075:	e8 f8 09 00 00       	call   c0100a72 <print_kerninfo>

    grade_backtrace();
c010007a:	e8 a7 00 00 00       	call   c0100126 <grade_backtrace>

    pmm_init();                 // init physical memory management
c010007f:	e8 23 57 00 00       	call   c01057a7 <pmm_init>

    pic_init();                 // init interrupt controller
c0100084:	e8 2d 21 00 00       	call   c01021b6 <pic_init>
    idt_init();                 // init interrupt descriptor table
c0100089:	e8 7f 22 00 00       	call   c010230d <idt_init>

    vmm_init();                 // init virtual memory management
c010008e:	e8 32 86 00 00       	call   c01086c5 <vmm_init>
    sched_init();               // init scheduler
c0100093:	e8 d9 e4 00 00       	call   c010e571 <sched_init>
    proc_init();                // init process table
c0100098:	e8 7a dd 00 00       	call   c010de17 <proc_init>
    
    ide_init();                 // init ide devices
c010009d:	e8 67 18 00 00       	call   c0101909 <ide_init>
    swap_init();                // init swap
c01000a2:	e8 b8 6d 00 00       	call   c0106e5f <swap_init>
    fs_init();                  // init fs
c01000a7:	e8 81 af 00 00       	call   c010b02d <fs_init>
    
    clock_init();               // init clock interrupt
c01000ac:	e8 dd 0e 00 00       	call   c0100f8e <clock_init>
    intr_enable();              // enable irq interrupt
c01000b1:	e8 6e 20 00 00       	call   c0102124 <intr_enable>

    //LAB1: CAHLLENGE 1 If you try to do it, uncomment lab1_switch_test()
    // user/kernel mode switch test
    //lab1_switch_test();
    
    cpu_idle();                 // run idle process
c01000b6:	e8 6a df 00 00       	call   c010e025 <cpu_idle>

c01000bb <grade_backtrace2>:
}

void __attribute__((noinline))
grade_backtrace2(int arg0, int arg1, int arg2, int arg3) {
c01000bb:	55                   	push   %ebp
c01000bc:	89 e5                	mov    %esp,%ebp
c01000be:	83 ec 18             	sub    $0x18,%esp
    mon_backtrace(0, NULL, NULL);
c01000c1:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01000c8:	00 
c01000c9:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01000d0:	00 
c01000d1:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c01000d8:	e8 d9 0d 00 00       	call   c0100eb6 <mon_backtrace>
}
c01000dd:	c9                   	leave  
c01000de:	c3                   	ret    

c01000df <grade_backtrace1>:

void __attribute__((noinline))
grade_backtrace1(int arg0, int arg1) {
c01000df:	55                   	push   %ebp
c01000e0:	89 e5                	mov    %esp,%ebp
c01000e2:	53                   	push   %ebx
c01000e3:	83 ec 14             	sub    $0x14,%esp
    grade_backtrace2(arg0, (int)&arg0, arg1, (int)&arg1);
c01000e6:	8d 5d 0c             	lea    0xc(%ebp),%ebx
c01000e9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c01000ec:	8d 55 08             	lea    0x8(%ebp),%edx
c01000ef:	8b 45 08             	mov    0x8(%ebp),%eax
c01000f2:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c01000f6:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01000fa:	89 54 24 04          	mov    %edx,0x4(%esp)
c01000fe:	89 04 24             	mov    %eax,(%esp)
c0100101:	e8 b5 ff ff ff       	call   c01000bb <grade_backtrace2>
}
c0100106:	83 c4 14             	add    $0x14,%esp
c0100109:	5b                   	pop    %ebx
c010010a:	5d                   	pop    %ebp
c010010b:	c3                   	ret    

c010010c <grade_backtrace0>:

void __attribute__((noinline))
grade_backtrace0(int arg0, int arg1, int arg2) {
c010010c:	55                   	push   %ebp
c010010d:	89 e5                	mov    %esp,%ebp
c010010f:	83 ec 18             	sub    $0x18,%esp
    grade_backtrace1(arg0, arg2);
c0100112:	8b 45 10             	mov    0x10(%ebp),%eax
c0100115:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100119:	8b 45 08             	mov    0x8(%ebp),%eax
c010011c:	89 04 24             	mov    %eax,(%esp)
c010011f:	e8 bb ff ff ff       	call   c01000df <grade_backtrace1>
}
c0100124:	c9                   	leave  
c0100125:	c3                   	ret    

c0100126 <grade_backtrace>:

void
grade_backtrace(void) {
c0100126:	55                   	push   %ebp
c0100127:	89 e5                	mov    %esp,%ebp
c0100129:	83 ec 18             	sub    $0x18,%esp
    grade_backtrace0(0, (int)kern_init, 0xffff0000);
c010012c:	b8 2a 00 10 c0       	mov    $0xc010002a,%eax
c0100131:	c7 44 24 08 00 00 ff 	movl   $0xffff0000,0x8(%esp)
c0100138:	ff 
c0100139:	89 44 24 04          	mov    %eax,0x4(%esp)
c010013d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100144:	e8 c3 ff ff ff       	call   c010010c <grade_backtrace0>
}
c0100149:	c9                   	leave  
c010014a:	c3                   	ret    

c010014b <lab1_print_cur_status>:

static void
lab1_print_cur_status(void) {
c010014b:	55                   	push   %ebp
c010014c:	89 e5                	mov    %esp,%ebp
c010014e:	83 ec 28             	sub    $0x28,%esp
    static int round = 0;
    uint16_t reg1, reg2, reg3, reg4;
    asm volatile (
c0100151:	8c 4d f6             	mov    %cs,-0xa(%ebp)
c0100154:	8c 5d f4             	mov    %ds,-0xc(%ebp)
c0100157:	8c 45 f2             	mov    %es,-0xe(%ebp)
c010015a:	8c 55 f0             	mov    %ss,-0x10(%ebp)
            "mov %%cs, %0;"
            "mov %%ds, %1;"
            "mov %%es, %2;"
            "mov %%ss, %3;"
            : "=m"(reg1), "=m"(reg2), "=m"(reg3), "=m"(reg4));
    cprintf("%d: @ring %d\n", round, reg1 & 3);
c010015d:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100161:	0f b7 c0             	movzwl %ax,%eax
c0100164:	83 e0 03             	and    $0x3,%eax
c0100167:	89 c2                	mov    %eax,%edx
c0100169:	a1 e0 ee 14 c0       	mov    0xc014eee0,%eax
c010016e:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100172:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100176:	c7 04 24 01 57 11 c0 	movl   $0xc0115701,(%esp)
c010017d:	e8 e3 01 00 00       	call   c0100365 <cprintf>
    cprintf("%d:  cs = %x\n", round, reg1);
c0100182:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100186:	0f b7 d0             	movzwl %ax,%edx
c0100189:	a1 e0 ee 14 c0       	mov    0xc014eee0,%eax
c010018e:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100192:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100196:	c7 04 24 0f 57 11 c0 	movl   $0xc011570f,(%esp)
c010019d:	e8 c3 01 00 00       	call   c0100365 <cprintf>
    cprintf("%d:  ds = %x\n", round, reg2);
c01001a2:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c01001a6:	0f b7 d0             	movzwl %ax,%edx
c01001a9:	a1 e0 ee 14 c0       	mov    0xc014eee0,%eax
c01001ae:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001b2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001b6:	c7 04 24 1d 57 11 c0 	movl   $0xc011571d,(%esp)
c01001bd:	e8 a3 01 00 00       	call   c0100365 <cprintf>
    cprintf("%d:  es = %x\n", round, reg3);
c01001c2:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01001c6:	0f b7 d0             	movzwl %ax,%edx
c01001c9:	a1 e0 ee 14 c0       	mov    0xc014eee0,%eax
c01001ce:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001d2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001d6:	c7 04 24 2b 57 11 c0 	movl   $0xc011572b,(%esp)
c01001dd:	e8 83 01 00 00       	call   c0100365 <cprintf>
    cprintf("%d:  ss = %x\n", round, reg4);
c01001e2:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c01001e6:	0f b7 d0             	movzwl %ax,%edx
c01001e9:	a1 e0 ee 14 c0       	mov    0xc014eee0,%eax
c01001ee:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001f2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001f6:	c7 04 24 39 57 11 c0 	movl   $0xc0115739,(%esp)
c01001fd:	e8 63 01 00 00       	call   c0100365 <cprintf>
    round ++;
c0100202:	a1 e0 ee 14 c0       	mov    0xc014eee0,%eax
c0100207:	83 c0 01             	add    $0x1,%eax
c010020a:	a3 e0 ee 14 c0       	mov    %eax,0xc014eee0
}
c010020f:	c9                   	leave  
c0100210:	c3                   	ret    

c0100211 <lab1_switch_to_user>:

static void
lab1_switch_to_user(void) {
c0100211:	55                   	push   %ebp
c0100212:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 : TODO
}
c0100214:	5d                   	pop    %ebp
c0100215:	c3                   	ret    

c0100216 <lab1_switch_to_kernel>:

static void
lab1_switch_to_kernel(void) {
c0100216:	55                   	push   %ebp
c0100217:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 :  TODO
}
c0100219:	5d                   	pop    %ebp
c010021a:	c3                   	ret    

c010021b <lab1_switch_test>:

static void
lab1_switch_test(void) {
c010021b:	55                   	push   %ebp
c010021c:	89 e5                	mov    %esp,%ebp
c010021e:	83 ec 18             	sub    $0x18,%esp
    lab1_print_cur_status();
c0100221:	e8 25 ff ff ff       	call   c010014b <lab1_print_cur_status>
    cprintf("+++ switch to  user  mode +++\n");
c0100226:	c7 04 24 48 57 11 c0 	movl   $0xc0115748,(%esp)
c010022d:	e8 33 01 00 00       	call   c0100365 <cprintf>
    lab1_switch_to_user();
c0100232:	e8 da ff ff ff       	call   c0100211 <lab1_switch_to_user>
    lab1_print_cur_status();
c0100237:	e8 0f ff ff ff       	call   c010014b <lab1_print_cur_status>
    cprintf("+++ switch to kernel mode +++\n");
c010023c:	c7 04 24 68 57 11 c0 	movl   $0xc0115768,(%esp)
c0100243:	e8 1d 01 00 00       	call   c0100365 <cprintf>
    lab1_switch_to_kernel();
c0100248:	e8 c9 ff ff ff       	call   c0100216 <lab1_switch_to_kernel>
    lab1_print_cur_status();
c010024d:	e8 f9 fe ff ff       	call   c010014b <lab1_print_cur_status>
}
c0100252:	c9                   	leave  
c0100253:	c3                   	ret    

c0100254 <readline>:
 * The readline() function returns the text of the line read. If some errors
 * are happened, NULL is returned. The return value is a global variable,
 * thus it should be copied before it is used.
 * */
char *
readline(const char *prompt) {
c0100254:	55                   	push   %ebp
c0100255:	89 e5                	mov    %esp,%ebp
c0100257:	83 ec 28             	sub    $0x28,%esp
    if (prompt != NULL) {
c010025a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010025e:	74 13                	je     c0100273 <readline+0x1f>
        cprintf("%s", prompt);
c0100260:	8b 45 08             	mov    0x8(%ebp),%eax
c0100263:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100267:	c7 04 24 87 57 11 c0 	movl   $0xc0115787,(%esp)
c010026e:	e8 f2 00 00 00       	call   c0100365 <cprintf>
    }
    int i = 0, c;
c0100273:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        c = getchar();
c010027a:	e8 6e 01 00 00       	call   c01003ed <getchar>
c010027f:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (c < 0) {
c0100282:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100286:	79 07                	jns    c010028f <readline+0x3b>
            return NULL;
c0100288:	b8 00 00 00 00       	mov    $0x0,%eax
c010028d:	eb 79                	jmp    c0100308 <readline+0xb4>
        }
        else if (c >= ' ' && i < BUFSIZE - 1) {
c010028f:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c0100293:	7e 28                	jle    c01002bd <readline+0x69>
c0100295:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
c010029c:	7f 1f                	jg     c01002bd <readline+0x69>
            cputchar(c);
c010029e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002a1:	89 04 24             	mov    %eax,(%esp)
c01002a4:	e8 e2 00 00 00       	call   c010038b <cputchar>
            buf[i ++] = c;
c01002a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01002ac:	8d 50 01             	lea    0x1(%eax),%edx
c01002af:	89 55 f4             	mov    %edx,-0xc(%ebp)
c01002b2:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01002b5:	88 90 00 ef 14 c0    	mov    %dl,-0x3feb1100(%eax)
c01002bb:	eb 46                	jmp    c0100303 <readline+0xaf>
        }
        else if (c == '\b' && i > 0) {
c01002bd:	83 7d f0 08          	cmpl   $0x8,-0x10(%ebp)
c01002c1:	75 17                	jne    c01002da <readline+0x86>
c01002c3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01002c7:	7e 11                	jle    c01002da <readline+0x86>
            cputchar(c);
c01002c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002cc:	89 04 24             	mov    %eax,(%esp)
c01002cf:	e8 b7 00 00 00       	call   c010038b <cputchar>
            i --;
c01002d4:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01002d8:	eb 29                	jmp    c0100303 <readline+0xaf>
        }
        else if (c == '\n' || c == '\r') {
c01002da:	83 7d f0 0a          	cmpl   $0xa,-0x10(%ebp)
c01002de:	74 06                	je     c01002e6 <readline+0x92>
c01002e0:	83 7d f0 0d          	cmpl   $0xd,-0x10(%ebp)
c01002e4:	75 1d                	jne    c0100303 <readline+0xaf>
            cputchar(c);
c01002e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002e9:	89 04 24             	mov    %eax,(%esp)
c01002ec:	e8 9a 00 00 00       	call   c010038b <cputchar>
            buf[i] = '\0';
c01002f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01002f4:	05 00 ef 14 c0       	add    $0xc014ef00,%eax
c01002f9:	c6 00 00             	movb   $0x0,(%eax)
            return buf;
c01002fc:	b8 00 ef 14 c0       	mov    $0xc014ef00,%eax
c0100301:	eb 05                	jmp    c0100308 <readline+0xb4>
        }
    }
c0100303:	e9 72 ff ff ff       	jmp    c010027a <readline+0x26>
}
c0100308:	c9                   	leave  
c0100309:	c3                   	ret    

c010030a <cputch>:
/* *
 * cputch - writes a single character @c to stdout, and it will
 * increace the value of counter pointed by @cnt.
 * */
static void
cputch(int c, int *cnt) {
c010030a:	55                   	push   %ebp
c010030b:	89 e5                	mov    %esp,%ebp
c010030d:	83 ec 18             	sub    $0x18,%esp
    cons_putc(c);
c0100310:	8b 45 08             	mov    0x8(%ebp),%eax
c0100313:	89 04 24             	mov    %eax,(%esp)
c0100316:	e8 e9 14 00 00       	call   c0101804 <cons_putc>
    (*cnt) ++;
c010031b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010031e:	8b 00                	mov    (%eax),%eax
c0100320:	8d 50 01             	lea    0x1(%eax),%edx
c0100323:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100326:	89 10                	mov    %edx,(%eax)
}
c0100328:	c9                   	leave  
c0100329:	c3                   	ret    

c010032a <vcprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want cprintf() instead.
 * */
int
vcprintf(const char *fmt, va_list ap) {
c010032a:	55                   	push   %ebp
c010032b:	89 e5                	mov    %esp,%ebp
c010032d:	83 ec 38             	sub    $0x38,%esp
    int cnt = 0;
c0100330:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    vprintfmt((void*)cputch, NO_FD, &cnt, fmt, ap);
c0100337:	8b 45 0c             	mov    0xc(%ebp),%eax
c010033a:	89 44 24 10          	mov    %eax,0x10(%esp)
c010033e:	8b 45 08             	mov    0x8(%ebp),%eax
c0100341:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0100345:	8d 45 f4             	lea    -0xc(%ebp),%eax
c0100348:	89 44 24 08          	mov    %eax,0x8(%esp)
c010034c:	c7 44 24 04 d9 6a ff 	movl   $0xffff6ad9,0x4(%esp)
c0100353:	ff 
c0100354:	c7 04 24 0a 03 10 c0 	movl   $0xc010030a,(%esp)
c010035b:	e8 95 48 01 00       	call   c0114bf5 <vprintfmt>
    return cnt;
c0100360:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100363:	c9                   	leave  
c0100364:	c3                   	ret    

c0100365 <cprintf>:
 *
 * The return value is the number of characters which would be
 * written to stdout.
 * */
int
cprintf(const char *fmt, ...) {
c0100365:	55                   	push   %ebp
c0100366:	89 e5                	mov    %esp,%ebp
c0100368:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c010036b:	8d 45 0c             	lea    0xc(%ebp),%eax
c010036e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vcprintf(fmt, ap);
c0100371:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100374:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100378:	8b 45 08             	mov    0x8(%ebp),%eax
c010037b:	89 04 24             	mov    %eax,(%esp)
c010037e:	e8 a7 ff ff ff       	call   c010032a <vcprintf>
c0100383:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c0100386:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100389:	c9                   	leave  
c010038a:	c3                   	ret    

c010038b <cputchar>:

/* cputchar - writes a single character to stdout */
void
cputchar(int c) {
c010038b:	55                   	push   %ebp
c010038c:	89 e5                	mov    %esp,%ebp
c010038e:	83 ec 18             	sub    $0x18,%esp
    cons_putc(c);
c0100391:	8b 45 08             	mov    0x8(%ebp),%eax
c0100394:	89 04 24             	mov    %eax,(%esp)
c0100397:	e8 68 14 00 00       	call   c0101804 <cons_putc>
}
c010039c:	c9                   	leave  
c010039d:	c3                   	ret    

c010039e <cputs>:
/* *
 * cputs- writes the string pointed by @str to stdout and
 * appends a newline character.
 * */
int
cputs(const char *str) {
c010039e:	55                   	push   %ebp
c010039f:	89 e5                	mov    %esp,%ebp
c01003a1:	83 ec 28             	sub    $0x28,%esp
    int cnt = 0;
c01003a4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    char c;
    while ((c = *str ++) != '\0') {
c01003ab:	eb 13                	jmp    c01003c0 <cputs+0x22>
        cputch(c, &cnt);
c01003ad:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
c01003b1:	8d 55 f0             	lea    -0x10(%ebp),%edx
c01003b4:	89 54 24 04          	mov    %edx,0x4(%esp)
c01003b8:	89 04 24             	mov    %eax,(%esp)
c01003bb:	e8 4a ff ff ff       	call   c010030a <cputch>
 * */
int
cputs(const char *str) {
    int cnt = 0;
    char c;
    while ((c = *str ++) != '\0') {
c01003c0:	8b 45 08             	mov    0x8(%ebp),%eax
c01003c3:	8d 50 01             	lea    0x1(%eax),%edx
c01003c6:	89 55 08             	mov    %edx,0x8(%ebp)
c01003c9:	0f b6 00             	movzbl (%eax),%eax
c01003cc:	88 45 f7             	mov    %al,-0x9(%ebp)
c01003cf:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
c01003d3:	75 d8                	jne    c01003ad <cputs+0xf>
        cputch(c, &cnt);
    }
    cputch('\n', &cnt);
c01003d5:	8d 45 f0             	lea    -0x10(%ebp),%eax
c01003d8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01003dc:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c01003e3:	e8 22 ff ff ff       	call   c010030a <cputch>
    return cnt;
c01003e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01003eb:	c9                   	leave  
c01003ec:	c3                   	ret    

c01003ed <getchar>:

/* getchar - reads a single non-zero character from stdin */
int
getchar(void) {
c01003ed:	55                   	push   %ebp
c01003ee:	89 e5                	mov    %esp,%ebp
c01003f0:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = cons_getc()) == 0)
c01003f3:	e8 48 14 00 00       	call   c0101840 <cons_getc>
c01003f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01003fb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01003ff:	74 f2                	je     c01003f3 <getchar+0x6>
        /* do nothing */;
    return c;
c0100401:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100404:	c9                   	leave  
c0100405:	c3                   	ret    

c0100406 <strdup>:
#include <string.h>
#include <kmalloc.h>

char *
strdup(const char *src) {
c0100406:	55                   	push   %ebp
c0100407:	89 e5                	mov    %esp,%ebp
c0100409:	83 ec 28             	sub    $0x28,%esp
    char *dst;
    size_t len = strlen(src);
c010040c:	8b 45 08             	mov    0x8(%ebp),%eax
c010040f:	89 04 24             	mov    %eax,(%esp)
c0100412:	e8 d8 4d 01 00       	call   c01151ef <strlen>
c0100417:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if ((dst = kmalloc(len + 1)) != NULL) {
c010041a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010041d:	83 c0 01             	add    $0x1,%eax
c0100420:	89 04 24             	mov    %eax,(%esp)
c0100423:	e8 b7 48 00 00       	call   c0104cdf <kmalloc>
c0100428:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010042b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010042f:	74 24                	je     c0100455 <strdup+0x4f>
        memcpy(dst, src, len);
c0100431:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100434:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100438:	8b 45 08             	mov    0x8(%ebp),%eax
c010043b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010043f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100442:	89 04 24             	mov    %eax,(%esp)
c0100445:	e8 dd 51 01 00       	call   c0115627 <memcpy>
        dst[len] = '\0';
c010044a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010044d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100450:	01 d0                	add    %edx,%eax
c0100452:	c6 00 00             	movb   $0x0,(%eax)
    }
    return dst;
c0100455:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0100458:	c9                   	leave  
c0100459:	c3                   	ret    

c010045a <stradd>:

char *
stradd(const char *src1, const char *src2) {
c010045a:	55                   	push   %ebp
c010045b:	89 e5                	mov    %esp,%ebp
c010045d:	83 ec 28             	sub    $0x28,%esp
    char *ret, *dst;
    size_t len1 = strlen(src1), len2 = strlen(src2);
c0100460:	8b 45 08             	mov    0x8(%ebp),%eax
c0100463:	89 04 24             	mov    %eax,(%esp)
c0100466:	e8 84 4d 01 00       	call   c01151ef <strlen>
c010046b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010046e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100471:	89 04 24             	mov    %eax,(%esp)
c0100474:	e8 76 4d 01 00       	call   c01151ef <strlen>
c0100479:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = dst = kmalloc(len1 + len2 + 1)) != NULL) {
c010047c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010047f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100482:	01 d0                	add    %edx,%eax
c0100484:	83 c0 01             	add    $0x1,%eax
c0100487:	89 04 24             	mov    %eax,(%esp)
c010048a:	e8 50 48 00 00       	call   c0104cdf <kmalloc>
c010048f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0100492:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100495:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0100498:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010049c:	74 44                	je     c01004e2 <stradd+0x88>
        memcpy(dst, src1, len1), dst += len1;
c010049e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01004a1:	89 44 24 08          	mov    %eax,0x8(%esp)
c01004a5:	8b 45 08             	mov    0x8(%ebp),%eax
c01004a8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01004ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01004af:	89 04 24             	mov    %eax,(%esp)
c01004b2:	e8 70 51 01 00       	call   c0115627 <memcpy>
c01004b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01004ba:	01 45 ec             	add    %eax,-0x14(%ebp)
        memcpy(dst, src2, len2), dst += len2;
c01004bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004c0:	89 44 24 08          	mov    %eax,0x8(%esp)
c01004c4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004c7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01004cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01004ce:	89 04 24             	mov    %eax,(%esp)
c01004d1:	e8 51 51 01 00       	call   c0115627 <memcpy>
c01004d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004d9:	01 45 ec             	add    %eax,-0x14(%ebp)
        *dst = '\0';
c01004dc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01004df:	c6 00 00             	movb   $0x0,(%eax)
    }
    return ret;
c01004e2:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
c01004e5:	c9                   	leave  
c01004e6:	c3                   	ret    

c01004e7 <stab_binsearch>:
 *      stab_binsearch(stabs, &left, &right, N_SO, 0xf0100184);
 * will exit setting left = 118, right = 554.
 * */
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
c01004e7:	55                   	push   %ebp
c01004e8:	89 e5                	mov    %esp,%ebp
c01004ea:	83 ec 20             	sub    $0x20,%esp
    int l = *region_left, r = *region_right, any_matches = 0;
c01004ed:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004f0:	8b 00                	mov    (%eax),%eax
c01004f2:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01004f5:	8b 45 10             	mov    0x10(%ebp),%eax
c01004f8:	8b 00                	mov    (%eax),%eax
c01004fa:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01004fd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    while (l <= r) {
c0100504:	e9 d2 00 00 00       	jmp    c01005db <stab_binsearch+0xf4>
        int true_m = (l + r) / 2, m = true_m;
c0100509:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010050c:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010050f:	01 d0                	add    %edx,%eax
c0100511:	89 c2                	mov    %eax,%edx
c0100513:	c1 ea 1f             	shr    $0x1f,%edx
c0100516:	01 d0                	add    %edx,%eax
c0100518:	d1 f8                	sar    %eax
c010051a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010051d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100520:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c0100523:	eb 04                	jmp    c0100529 <stab_binsearch+0x42>
            m --;
c0100525:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)

    while (l <= r) {
        int true_m = (l + r) / 2, m = true_m;

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c0100529:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010052c:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010052f:	7c 1f                	jl     c0100550 <stab_binsearch+0x69>
c0100531:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100534:	89 d0                	mov    %edx,%eax
c0100536:	01 c0                	add    %eax,%eax
c0100538:	01 d0                	add    %edx,%eax
c010053a:	c1 e0 02             	shl    $0x2,%eax
c010053d:	89 c2                	mov    %eax,%edx
c010053f:	8b 45 08             	mov    0x8(%ebp),%eax
c0100542:	01 d0                	add    %edx,%eax
c0100544:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100548:	0f b6 c0             	movzbl %al,%eax
c010054b:	3b 45 14             	cmp    0x14(%ebp),%eax
c010054e:	75 d5                	jne    c0100525 <stab_binsearch+0x3e>
            m --;
        }
        if (m < l) {    // no match in [l, m]
c0100550:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100553:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100556:	7d 0b                	jge    c0100563 <stab_binsearch+0x7c>
            l = true_m + 1;
c0100558:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010055b:	83 c0 01             	add    $0x1,%eax
c010055e:	89 45 fc             	mov    %eax,-0x4(%ebp)
            continue;
c0100561:	eb 78                	jmp    c01005db <stab_binsearch+0xf4>
        }

        // actual binary search
        any_matches = 1;
c0100563:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        if (stabs[m].n_value < addr) {
c010056a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010056d:	89 d0                	mov    %edx,%eax
c010056f:	01 c0                	add    %eax,%eax
c0100571:	01 d0                	add    %edx,%eax
c0100573:	c1 e0 02             	shl    $0x2,%eax
c0100576:	89 c2                	mov    %eax,%edx
c0100578:	8b 45 08             	mov    0x8(%ebp),%eax
c010057b:	01 d0                	add    %edx,%eax
c010057d:	8b 40 08             	mov    0x8(%eax),%eax
c0100580:	3b 45 18             	cmp    0x18(%ebp),%eax
c0100583:	73 13                	jae    c0100598 <stab_binsearch+0xb1>
            *region_left = m;
c0100585:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100588:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010058b:	89 10                	mov    %edx,(%eax)
            l = true_m + 1;
c010058d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100590:	83 c0 01             	add    $0x1,%eax
c0100593:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0100596:	eb 43                	jmp    c01005db <stab_binsearch+0xf4>
        } else if (stabs[m].n_value > addr) {
c0100598:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010059b:	89 d0                	mov    %edx,%eax
c010059d:	01 c0                	add    %eax,%eax
c010059f:	01 d0                	add    %edx,%eax
c01005a1:	c1 e0 02             	shl    $0x2,%eax
c01005a4:	89 c2                	mov    %eax,%edx
c01005a6:	8b 45 08             	mov    0x8(%ebp),%eax
c01005a9:	01 d0                	add    %edx,%eax
c01005ab:	8b 40 08             	mov    0x8(%eax),%eax
c01005ae:	3b 45 18             	cmp    0x18(%ebp),%eax
c01005b1:	76 16                	jbe    c01005c9 <stab_binsearch+0xe2>
            *region_right = m - 1;
c01005b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005b6:	8d 50 ff             	lea    -0x1(%eax),%edx
c01005b9:	8b 45 10             	mov    0x10(%ebp),%eax
c01005bc:	89 10                	mov    %edx,(%eax)
            r = m - 1;
c01005be:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005c1:	83 e8 01             	sub    $0x1,%eax
c01005c4:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01005c7:	eb 12                	jmp    c01005db <stab_binsearch+0xf4>
        } else {
            // exact match for 'addr', but continue loop to find
            // *region_right
            *region_left = m;
c01005c9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01005cc:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01005cf:	89 10                	mov    %edx,(%eax)
            l = m;
c01005d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005d4:	89 45 fc             	mov    %eax,-0x4(%ebp)
            addr ++;
c01005d7:	83 45 18 01          	addl   $0x1,0x18(%ebp)
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
    int l = *region_left, r = *region_right, any_matches = 0;

    while (l <= r) {
c01005db:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01005de:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c01005e1:	0f 8e 22 ff ff ff    	jle    c0100509 <stab_binsearch+0x22>
            l = m;
            addr ++;
        }
    }

    if (!any_matches) {
c01005e7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01005eb:	75 0f                	jne    c01005fc <stab_binsearch+0x115>
        *region_right = *region_left - 1;
c01005ed:	8b 45 0c             	mov    0xc(%ebp),%eax
c01005f0:	8b 00                	mov    (%eax),%eax
c01005f2:	8d 50 ff             	lea    -0x1(%eax),%edx
c01005f5:	8b 45 10             	mov    0x10(%ebp),%eax
c01005f8:	89 10                	mov    %edx,(%eax)
c01005fa:	eb 3f                	jmp    c010063b <stab_binsearch+0x154>
    }
    else {
        // find rightmost region containing 'addr'
        l = *region_right;
c01005fc:	8b 45 10             	mov    0x10(%ebp),%eax
c01005ff:	8b 00                	mov    (%eax),%eax
c0100601:	89 45 fc             	mov    %eax,-0x4(%ebp)
        for (; l > *region_left && stabs[l].n_type != type; l --)
c0100604:	eb 04                	jmp    c010060a <stab_binsearch+0x123>
c0100606:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
c010060a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010060d:	8b 00                	mov    (%eax),%eax
c010060f:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100612:	7d 1f                	jge    c0100633 <stab_binsearch+0x14c>
c0100614:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100617:	89 d0                	mov    %edx,%eax
c0100619:	01 c0                	add    %eax,%eax
c010061b:	01 d0                	add    %edx,%eax
c010061d:	c1 e0 02             	shl    $0x2,%eax
c0100620:	89 c2                	mov    %eax,%edx
c0100622:	8b 45 08             	mov    0x8(%ebp),%eax
c0100625:	01 d0                	add    %edx,%eax
c0100627:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c010062b:	0f b6 c0             	movzbl %al,%eax
c010062e:	3b 45 14             	cmp    0x14(%ebp),%eax
c0100631:	75 d3                	jne    c0100606 <stab_binsearch+0x11f>
            /* do nothing */;
        *region_left = l;
c0100633:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100636:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100639:	89 10                	mov    %edx,(%eax)
    }
}
c010063b:	c9                   	leave  
c010063c:	c3                   	ret    

c010063d <debuginfo_eip>:
 * the specified instruction address, @addr.  Returns 0 if information
 * was found, and negative if not.  But even if it returns negative it
 * has stored some information into '*info'.
 * */
int
debuginfo_eip(uintptr_t addr, struct eipdebuginfo *info) {
c010063d:	55                   	push   %ebp
c010063e:	89 e5                	mov    %esp,%ebp
c0100640:	83 ec 58             	sub    $0x58,%esp
    const struct stab *stabs, *stab_end;
    const char *stabstr, *stabstr_end;

    info->eip_file = "<unknown>";
c0100643:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100646:	c7 00 8c 57 11 c0    	movl   $0xc011578c,(%eax)
    info->eip_line = 0;
c010064c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010064f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    info->eip_fn_name = "<unknown>";
c0100656:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100659:	c7 40 08 8c 57 11 c0 	movl   $0xc011578c,0x8(%eax)
    info->eip_fn_namelen = 9;
c0100660:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100663:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
    info->eip_fn_addr = addr;
c010066a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010066d:	8b 55 08             	mov    0x8(%ebp),%edx
c0100670:	89 50 10             	mov    %edx,0x10(%eax)
    info->eip_fn_narg = 0;
c0100673:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100676:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

    // find the relevant set of stabs
    if (addr >= KERNBASE) {
c010067d:	81 7d 08 ff ff ff bf 	cmpl   $0xbfffffff,0x8(%ebp)
c0100684:	76 21                	jbe    c01006a7 <debuginfo_eip+0x6a>
        stabs = __STAB_BEGIN__;
c0100686:	c7 45 f4 c0 9d 11 c0 	movl   $0xc0119dc0,-0xc(%ebp)
        stab_end = __STAB_END__;
c010068d:	c7 45 f0 74 f6 13 c0 	movl   $0xc013f674,-0x10(%ebp)
        stabstr = __STABSTR_BEGIN__;
c0100694:	c7 45 ec 75 f6 13 c0 	movl   $0xc013f675,-0x14(%ebp)
        stabstr_end = __STABSTR_END__;
c010069b:	c7 45 e8 a3 bf 14 c0 	movl   $0xc014bfa3,-0x18(%ebp)
c01006a2:	e9 ea 00 00 00       	jmp    c0100791 <debuginfo_eip+0x154>
    }
    else {
        // user-program linker script, tools/user.ld puts the information about the
        // program's stabs (included __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__,
        // and __STABSTR_END__) in a structure located at virtual address USTAB.
        const struct userstabdata *usd = (struct userstabdata *)USTAB;
c01006a7:	c7 45 e4 00 00 20 00 	movl   $0x200000,-0x1c(%ebp)

        // make sure that debugger (current process) can access this memory
        struct mm_struct *mm;
        if (current == NULL || (mm = current->mm) == NULL) {
c01006ae:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c01006b3:	85 c0                	test   %eax,%eax
c01006b5:	74 11                	je     c01006c8 <debuginfo_eip+0x8b>
c01006b7:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c01006bc:	8b 40 18             	mov    0x18(%eax),%eax
c01006bf:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01006c2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01006c6:	75 0a                	jne    c01006d2 <debuginfo_eip+0x95>
            return -1;
c01006c8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01006cd:	e9 9e 03 00 00       	jmp    c0100a70 <debuginfo_eip+0x433>
        }
        if (!user_mem_check(mm, (uintptr_t)usd, sizeof(struct userstabdata), 0)) {
c01006d2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01006d5:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01006dc:	00 
c01006dd:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c01006e4:	00 
c01006e5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01006e9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01006ec:	89 04 24             	mov    %eax,(%esp)
c01006ef:	e8 30 89 00 00       	call   c0109024 <user_mem_check>
c01006f4:	85 c0                	test   %eax,%eax
c01006f6:	75 0a                	jne    c0100702 <debuginfo_eip+0xc5>
            return -1;
c01006f8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01006fd:	e9 6e 03 00 00       	jmp    c0100a70 <debuginfo_eip+0x433>
        }

        stabs = usd->stabs;
c0100702:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100705:	8b 00                	mov    (%eax),%eax
c0100707:	89 45 f4             	mov    %eax,-0xc(%ebp)
        stab_end = usd->stab_end;
c010070a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010070d:	8b 40 04             	mov    0x4(%eax),%eax
c0100710:	89 45 f0             	mov    %eax,-0x10(%ebp)
        stabstr = usd->stabstr;
c0100713:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100716:	8b 40 08             	mov    0x8(%eax),%eax
c0100719:	89 45 ec             	mov    %eax,-0x14(%ebp)
        stabstr_end = usd->stabstr_end;
c010071c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010071f:	8b 40 0c             	mov    0xc(%eax),%eax
c0100722:	89 45 e8             	mov    %eax,-0x18(%ebp)

        // make sure the STABS and string table memory is valid
        if (!user_mem_check(mm, (uintptr_t)stabs, (uintptr_t)stab_end - (uintptr_t)stabs, 0)) {
c0100725:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100728:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010072b:	29 c2                	sub    %eax,%edx
c010072d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100730:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0100737:	00 
c0100738:	89 54 24 08          	mov    %edx,0x8(%esp)
c010073c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100740:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0100743:	89 04 24             	mov    %eax,(%esp)
c0100746:	e8 d9 88 00 00       	call   c0109024 <user_mem_check>
c010074b:	85 c0                	test   %eax,%eax
c010074d:	75 0a                	jne    c0100759 <debuginfo_eip+0x11c>
            return -1;
c010074f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100754:	e9 17 03 00 00       	jmp    c0100a70 <debuginfo_eip+0x433>
        }
        if (!user_mem_check(mm, (uintptr_t)stabstr, stabstr_end - stabstr, 0)) {
c0100759:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010075c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010075f:	29 c2                	sub    %eax,%edx
c0100761:	89 d0                	mov    %edx,%eax
c0100763:	89 c2                	mov    %eax,%edx
c0100765:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100768:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010076f:	00 
c0100770:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100774:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100778:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010077b:	89 04 24             	mov    %eax,(%esp)
c010077e:	e8 a1 88 00 00       	call   c0109024 <user_mem_check>
c0100783:	85 c0                	test   %eax,%eax
c0100785:	75 0a                	jne    c0100791 <debuginfo_eip+0x154>
            return -1;
c0100787:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010078c:	e9 df 02 00 00       	jmp    c0100a70 <debuginfo_eip+0x433>
        }
    }

    // String table validity checks
    if (stabstr_end <= stabstr || stabstr_end[-1] != 0) {
c0100791:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100794:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0100797:	76 0d                	jbe    c01007a6 <debuginfo_eip+0x169>
c0100799:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010079c:	83 e8 01             	sub    $0x1,%eax
c010079f:	0f b6 00             	movzbl (%eax),%eax
c01007a2:	84 c0                	test   %al,%al
c01007a4:	74 0a                	je     c01007b0 <debuginfo_eip+0x173>
        return -1;
c01007a6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01007ab:	e9 c0 02 00 00       	jmp    c0100a70 <debuginfo_eip+0x433>
    // 'eip'.  First, we find the basic source file containing 'eip'.
    // Then, we look in that source file for the function.  Then we look
    // for the line number.

    // Search the entire set of stabs for the source file (type N_SO).
    int lfile = 0, rfile = (stab_end - stabs) - 1;
c01007b0:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01007b7:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01007ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007bd:	29 c2                	sub    %eax,%edx
c01007bf:	89 d0                	mov    %edx,%eax
c01007c1:	c1 f8 02             	sar    $0x2,%eax
c01007c4:	69 c0 ab aa aa aa    	imul   $0xaaaaaaab,%eax,%eax
c01007ca:	83 e8 01             	sub    $0x1,%eax
c01007cd:	89 45 d8             	mov    %eax,-0x28(%ebp)
    stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
c01007d0:	8b 45 08             	mov    0x8(%ebp),%eax
c01007d3:	89 44 24 10          	mov    %eax,0x10(%esp)
c01007d7:	c7 44 24 0c 64 00 00 	movl   $0x64,0xc(%esp)
c01007de:	00 
c01007df:	8d 45 d8             	lea    -0x28(%ebp),%eax
c01007e2:	89 44 24 08          	mov    %eax,0x8(%esp)
c01007e6:	8d 45 dc             	lea    -0x24(%ebp),%eax
c01007e9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01007ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007f0:	89 04 24             	mov    %eax,(%esp)
c01007f3:	e8 ef fc ff ff       	call   c01004e7 <stab_binsearch>
    if (lfile == 0)
c01007f8:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01007fb:	85 c0                	test   %eax,%eax
c01007fd:	75 0a                	jne    c0100809 <debuginfo_eip+0x1cc>
        return -1;
c01007ff:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100804:	e9 67 02 00 00       	jmp    c0100a70 <debuginfo_eip+0x433>

    // Search within that file's stabs for the function definition
    // (N_FUN).
    int lfun = lfile, rfun = rfile;
c0100809:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010080c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c010080f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0100812:	89 45 d0             	mov    %eax,-0x30(%ebp)
    int lline, rline;
    stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
c0100815:	8b 45 08             	mov    0x8(%ebp),%eax
c0100818:	89 44 24 10          	mov    %eax,0x10(%esp)
c010081c:	c7 44 24 0c 24 00 00 	movl   $0x24,0xc(%esp)
c0100823:	00 
c0100824:	8d 45 d0             	lea    -0x30(%ebp),%eax
c0100827:	89 44 24 08          	mov    %eax,0x8(%esp)
c010082b:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010082e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100832:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100835:	89 04 24             	mov    %eax,(%esp)
c0100838:	e8 aa fc ff ff       	call   c01004e7 <stab_binsearch>

    if (lfun <= rfun) {
c010083d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0100840:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0100843:	39 c2                	cmp    %eax,%edx
c0100845:	7f 7c                	jg     c01008c3 <debuginfo_eip+0x286>
        // stabs[lfun] points to the function name
        // in the string table, but check bounds just in case.
        if (stabs[lfun].n_strx < stabstr_end - stabstr) {
c0100847:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010084a:	89 c2                	mov    %eax,%edx
c010084c:	89 d0                	mov    %edx,%eax
c010084e:	01 c0                	add    %eax,%eax
c0100850:	01 d0                	add    %edx,%eax
c0100852:	c1 e0 02             	shl    $0x2,%eax
c0100855:	89 c2                	mov    %eax,%edx
c0100857:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010085a:	01 d0                	add    %edx,%eax
c010085c:	8b 10                	mov    (%eax),%edx
c010085e:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0100861:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100864:	29 c1                	sub    %eax,%ecx
c0100866:	89 c8                	mov    %ecx,%eax
c0100868:	39 c2                	cmp    %eax,%edx
c010086a:	73 22                	jae    c010088e <debuginfo_eip+0x251>
            info->eip_fn_name = stabstr + stabs[lfun].n_strx;
c010086c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010086f:	89 c2                	mov    %eax,%edx
c0100871:	89 d0                	mov    %edx,%eax
c0100873:	01 c0                	add    %eax,%eax
c0100875:	01 d0                	add    %edx,%eax
c0100877:	c1 e0 02             	shl    $0x2,%eax
c010087a:	89 c2                	mov    %eax,%edx
c010087c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010087f:	01 d0                	add    %edx,%eax
c0100881:	8b 10                	mov    (%eax),%edx
c0100883:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100886:	01 c2                	add    %eax,%edx
c0100888:	8b 45 0c             	mov    0xc(%ebp),%eax
c010088b:	89 50 08             	mov    %edx,0x8(%eax)
        }
        info->eip_fn_addr = stabs[lfun].n_value;
c010088e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100891:	89 c2                	mov    %eax,%edx
c0100893:	89 d0                	mov    %edx,%eax
c0100895:	01 c0                	add    %eax,%eax
c0100897:	01 d0                	add    %edx,%eax
c0100899:	c1 e0 02             	shl    $0x2,%eax
c010089c:	89 c2                	mov    %eax,%edx
c010089e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01008a1:	01 d0                	add    %edx,%eax
c01008a3:	8b 50 08             	mov    0x8(%eax),%edx
c01008a6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008a9:	89 50 10             	mov    %edx,0x10(%eax)
        addr -= info->eip_fn_addr;
c01008ac:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008af:	8b 40 10             	mov    0x10(%eax),%eax
c01008b2:	29 45 08             	sub    %eax,0x8(%ebp)
        // Search within the function definition for the line number.
        lline = lfun;
c01008b5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01008b8:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfun;
c01008bb:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01008be:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01008c1:	eb 15                	jmp    c01008d8 <debuginfo_eip+0x29b>
    } else {
        // Couldn't find function stab!  Maybe we're in an assembly
        // file.  Search the whole file for the line number.
        info->eip_fn_addr = addr;
c01008c3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008c6:	8b 55 08             	mov    0x8(%ebp),%edx
c01008c9:	89 50 10             	mov    %edx,0x10(%eax)
        lline = lfile;
c01008cc:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01008cf:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfile;
c01008d2:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01008d5:	89 45 c8             	mov    %eax,-0x38(%ebp)
    }
    info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
c01008d8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008db:	8b 40 08             	mov    0x8(%eax),%eax
c01008de:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
c01008e5:	00 
c01008e6:	89 04 24             	mov    %eax,(%esp)
c01008e9:	e8 cb 4a 01 00       	call   c01153b9 <strfind>
c01008ee:	89 c2                	mov    %eax,%edx
c01008f0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008f3:	8b 40 08             	mov    0x8(%eax),%eax
c01008f6:	29 c2                	sub    %eax,%edx
c01008f8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008fb:	89 50 0c             	mov    %edx,0xc(%eax)

    // Search within [lline, rline] for the line number stab.
    // If found, set info->eip_line to the right line number.
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
c01008fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0100901:	89 44 24 10          	mov    %eax,0x10(%esp)
c0100905:	c7 44 24 0c 44 00 00 	movl   $0x44,0xc(%esp)
c010090c:	00 
c010090d:	8d 45 c8             	lea    -0x38(%ebp),%eax
c0100910:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100914:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0100917:	89 44 24 04          	mov    %eax,0x4(%esp)
c010091b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010091e:	89 04 24             	mov    %eax,(%esp)
c0100921:	e8 c1 fb ff ff       	call   c01004e7 <stab_binsearch>
    if (lline <= rline) {
c0100926:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100929:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010092c:	39 c2                	cmp    %eax,%edx
c010092e:	7f 24                	jg     c0100954 <debuginfo_eip+0x317>
        info->eip_line = stabs[rline].n_desc;
c0100930:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0100933:	89 c2                	mov    %eax,%edx
c0100935:	89 d0                	mov    %edx,%eax
c0100937:	01 c0                	add    %eax,%eax
c0100939:	01 d0                	add    %edx,%eax
c010093b:	c1 e0 02             	shl    $0x2,%eax
c010093e:	89 c2                	mov    %eax,%edx
c0100940:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100943:	01 d0                	add    %edx,%eax
c0100945:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c0100949:	0f b7 d0             	movzwl %ax,%edx
c010094c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010094f:	89 50 04             	mov    %edx,0x4(%eax)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c0100952:	eb 13                	jmp    c0100967 <debuginfo_eip+0x32a>
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
    if (lline <= rline) {
        info->eip_line = stabs[rline].n_desc;
    } else {
        return -1;
c0100954:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100959:	e9 12 01 00 00       	jmp    c0100a70 <debuginfo_eip+0x433>
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
           && stabs[lline].n_type != N_SOL
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
        lline --;
c010095e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100961:	83 e8 01             	sub    $0x1,%eax
c0100964:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c0100967:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010096a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010096d:	39 c2                	cmp    %eax,%edx
c010096f:	7c 56                	jl     c01009c7 <debuginfo_eip+0x38a>
           && stabs[lline].n_type != N_SOL
c0100971:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100974:	89 c2                	mov    %eax,%edx
c0100976:	89 d0                	mov    %edx,%eax
c0100978:	01 c0                	add    %eax,%eax
c010097a:	01 d0                	add    %edx,%eax
c010097c:	c1 e0 02             	shl    $0x2,%eax
c010097f:	89 c2                	mov    %eax,%edx
c0100981:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100984:	01 d0                	add    %edx,%eax
c0100986:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c010098a:	3c 84                	cmp    $0x84,%al
c010098c:	74 39                	je     c01009c7 <debuginfo_eip+0x38a>
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
c010098e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100991:	89 c2                	mov    %eax,%edx
c0100993:	89 d0                	mov    %edx,%eax
c0100995:	01 c0                	add    %eax,%eax
c0100997:	01 d0                	add    %edx,%eax
c0100999:	c1 e0 02             	shl    $0x2,%eax
c010099c:	89 c2                	mov    %eax,%edx
c010099e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009a1:	01 d0                	add    %edx,%eax
c01009a3:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c01009a7:	3c 64                	cmp    $0x64,%al
c01009a9:	75 b3                	jne    c010095e <debuginfo_eip+0x321>
c01009ab:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01009ae:	89 c2                	mov    %eax,%edx
c01009b0:	89 d0                	mov    %edx,%eax
c01009b2:	01 c0                	add    %eax,%eax
c01009b4:	01 d0                	add    %edx,%eax
c01009b6:	c1 e0 02             	shl    $0x2,%eax
c01009b9:	89 c2                	mov    %eax,%edx
c01009bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009be:	01 d0                	add    %edx,%eax
c01009c0:	8b 40 08             	mov    0x8(%eax),%eax
c01009c3:	85 c0                	test   %eax,%eax
c01009c5:	74 97                	je     c010095e <debuginfo_eip+0x321>
        lline --;
    }
    if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr) {
c01009c7:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01009ca:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01009cd:	39 c2                	cmp    %eax,%edx
c01009cf:	7c 46                	jl     c0100a17 <debuginfo_eip+0x3da>
c01009d1:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01009d4:	89 c2                	mov    %eax,%edx
c01009d6:	89 d0                	mov    %edx,%eax
c01009d8:	01 c0                	add    %eax,%eax
c01009da:	01 d0                	add    %edx,%eax
c01009dc:	c1 e0 02             	shl    $0x2,%eax
c01009df:	89 c2                	mov    %eax,%edx
c01009e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009e4:	01 d0                	add    %edx,%eax
c01009e6:	8b 10                	mov    (%eax),%edx
c01009e8:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c01009eb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01009ee:	29 c1                	sub    %eax,%ecx
c01009f0:	89 c8                	mov    %ecx,%eax
c01009f2:	39 c2                	cmp    %eax,%edx
c01009f4:	73 21                	jae    c0100a17 <debuginfo_eip+0x3da>
        info->eip_file = stabstr + stabs[lline].n_strx;
c01009f6:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01009f9:	89 c2                	mov    %eax,%edx
c01009fb:	89 d0                	mov    %edx,%eax
c01009fd:	01 c0                	add    %eax,%eax
c01009ff:	01 d0                	add    %edx,%eax
c0100a01:	c1 e0 02             	shl    $0x2,%eax
c0100a04:	89 c2                	mov    %eax,%edx
c0100a06:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a09:	01 d0                	add    %edx,%eax
c0100a0b:	8b 10                	mov    (%eax),%edx
c0100a0d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100a10:	01 c2                	add    %eax,%edx
c0100a12:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100a15:	89 10                	mov    %edx,(%eax)
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
c0100a17:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0100a1a:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0100a1d:	39 c2                	cmp    %eax,%edx
c0100a1f:	7d 4a                	jge    c0100a6b <debuginfo_eip+0x42e>
        for (lline = lfun + 1;
c0100a21:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100a24:	83 c0 01             	add    $0x1,%eax
c0100a27:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0100a2a:	eb 18                	jmp    c0100a44 <debuginfo_eip+0x407>
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
            info->eip_fn_narg ++;
c0100a2c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100a2f:	8b 40 14             	mov    0x14(%eax),%eax
c0100a32:	8d 50 01             	lea    0x1(%eax),%edx
c0100a35:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100a38:	89 50 14             	mov    %edx,0x14(%eax)
    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
c0100a3b:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100a3e:	83 c0 01             	add    $0x1,%eax
c0100a41:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0100a44:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100a47:	8b 45 d0             	mov    -0x30(%ebp),%eax
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
c0100a4a:	39 c2                	cmp    %eax,%edx
c0100a4c:	7d 1d                	jge    c0100a6b <debuginfo_eip+0x42e>
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0100a4e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100a51:	89 c2                	mov    %eax,%edx
c0100a53:	89 d0                	mov    %edx,%eax
c0100a55:	01 c0                	add    %eax,%eax
c0100a57:	01 d0                	add    %edx,%eax
c0100a59:	c1 e0 02             	shl    $0x2,%eax
c0100a5c:	89 c2                	mov    %eax,%edx
c0100a5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a61:	01 d0                	add    %edx,%eax
c0100a63:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100a67:	3c a0                	cmp    $0xa0,%al
c0100a69:	74 c1                	je     c0100a2c <debuginfo_eip+0x3ef>
             lline ++) {
            info->eip_fn_narg ++;
        }
    }
    return 0;
c0100a6b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100a70:	c9                   	leave  
c0100a71:	c3                   	ret    

c0100a72 <print_kerninfo>:
 * print_kerninfo - print the information about kernel, including the location
 * of kernel entry, the start addresses of data and text segements, the start
 * address of free memory and how many memory that kernel has used.
 * */
void
print_kerninfo(void) {
c0100a72:	55                   	push   %ebp
c0100a73:	89 e5                	mov    %esp,%ebp
c0100a75:	83 ec 18             	sub    $0x18,%esp
    extern char etext[], edata[], end[], kern_init[];
    cprintf("Special kernel symbols:\n");
c0100a78:	c7 04 24 96 57 11 c0 	movl   $0xc0115796,(%esp)
c0100a7f:	e8 e1 f8 ff ff       	call   c0100365 <cprintf>
    cprintf("  entry  0x%08x (phys)\n", kern_init);
c0100a84:	c7 44 24 04 2a 00 10 	movl   $0xc010002a,0x4(%esp)
c0100a8b:	c0 
c0100a8c:	c7 04 24 af 57 11 c0 	movl   $0xc01157af,(%esp)
c0100a93:	e8 cd f8 ff ff       	call   c0100365 <cprintf>
    cprintf("  etext  0x%08x (phys)\n", etext);
c0100a98:	c7 44 24 04 ce 56 11 	movl   $0xc01156ce,0x4(%esp)
c0100a9f:	c0 
c0100aa0:	c7 04 24 c7 57 11 c0 	movl   $0xc01157c7,(%esp)
c0100aa7:	e8 b9 f8 ff ff       	call   c0100365 <cprintf>
    cprintf("  edata  0x%08x (phys)\n", edata);
c0100aac:	c7 44 24 04 d0 ee 14 	movl   $0xc014eed0,0x4(%esp)
c0100ab3:	c0 
c0100ab4:	c7 04 24 df 57 11 c0 	movl   $0xc01157df,(%esp)
c0100abb:	e8 a5 f8 ff ff       	call   c0100365 <cprintf>
    cprintf("  end    0x%08x (phys)\n", end);
c0100ac0:	c7 44 24 04 04 32 15 	movl   $0xc0153204,0x4(%esp)
c0100ac7:	c0 
c0100ac8:	c7 04 24 f7 57 11 c0 	movl   $0xc01157f7,(%esp)
c0100acf:	e8 91 f8 ff ff       	call   c0100365 <cprintf>
    cprintf("Kernel executable memory footprint: %dKB\n", (end - kern_init + 1023)/1024);
c0100ad4:	b8 04 32 15 c0       	mov    $0xc0153204,%eax
c0100ad9:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c0100adf:	b8 2a 00 10 c0       	mov    $0xc010002a,%eax
c0100ae4:	29 c2                	sub    %eax,%edx
c0100ae6:	89 d0                	mov    %edx,%eax
c0100ae8:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c0100aee:	85 c0                	test   %eax,%eax
c0100af0:	0f 48 c2             	cmovs  %edx,%eax
c0100af3:	c1 f8 0a             	sar    $0xa,%eax
c0100af6:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100afa:	c7 04 24 10 58 11 c0 	movl   $0xc0115810,(%esp)
c0100b01:	e8 5f f8 ff ff       	call   c0100365 <cprintf>
}
c0100b06:	c9                   	leave  
c0100b07:	c3                   	ret    

c0100b08 <print_debuginfo>:
/* *
 * print_debuginfo - read and print the stat information for the address @eip,
 * and info.eip_fn_addr should be the first address of the related function.
 * */
void
print_debuginfo(uintptr_t eip) {
c0100b08:	55                   	push   %ebp
c0100b09:	89 e5                	mov    %esp,%ebp
c0100b0b:	81 ec 48 01 00 00    	sub    $0x148,%esp
    struct eipdebuginfo info;
    if (debuginfo_eip(eip, &info) != 0) {
c0100b11:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0100b14:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b18:	8b 45 08             	mov    0x8(%ebp),%eax
c0100b1b:	89 04 24             	mov    %eax,(%esp)
c0100b1e:	e8 1a fb ff ff       	call   c010063d <debuginfo_eip>
c0100b23:	85 c0                	test   %eax,%eax
c0100b25:	74 15                	je     c0100b3c <print_debuginfo+0x34>
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
c0100b27:	8b 45 08             	mov    0x8(%ebp),%eax
c0100b2a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b2e:	c7 04 24 3a 58 11 c0 	movl   $0xc011583a,(%esp)
c0100b35:	e8 2b f8 ff ff       	call   c0100365 <cprintf>
c0100b3a:	eb 6d                	jmp    c0100ba9 <print_debuginfo+0xa1>
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100b3c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100b43:	eb 1c                	jmp    c0100b61 <print_debuginfo+0x59>
            fnname[j] = info.eip_fn_name[j];
c0100b45:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0100b48:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b4b:	01 d0                	add    %edx,%eax
c0100b4d:	0f b6 00             	movzbl (%eax),%eax
c0100b50:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100b56:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100b59:	01 ca                	add    %ecx,%edx
c0100b5b:	88 02                	mov    %al,(%edx)
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100b5d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100b61:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100b64:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0100b67:	7f dc                	jg     c0100b45 <print_debuginfo+0x3d>
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
c0100b69:	8d 95 dc fe ff ff    	lea    -0x124(%ebp),%edx
c0100b6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b72:	01 d0                	add    %edx,%eax
c0100b74:	c6 00 00             	movb   $0x0,(%eax)
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
                fnname, eip - info.eip_fn_addr);
c0100b77:	8b 45 ec             	mov    -0x14(%ebp),%eax
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
c0100b7a:	8b 55 08             	mov    0x8(%ebp),%edx
c0100b7d:	89 d1                	mov    %edx,%ecx
c0100b7f:	29 c1                	sub    %eax,%ecx
c0100b81:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0100b84:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100b87:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0100b8b:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100b91:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0100b95:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100b99:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b9d:	c7 04 24 56 58 11 c0 	movl   $0xc0115856,(%esp)
c0100ba4:	e8 bc f7 ff ff       	call   c0100365 <cprintf>
                fnname, eip - info.eip_fn_addr);
    }
}
c0100ba9:	c9                   	leave  
c0100baa:	c3                   	ret    

c0100bab <read_eip>:

static __noinline uint32_t
read_eip(void) {
c0100bab:	55                   	push   %ebp
c0100bac:	89 e5                	mov    %esp,%ebp
c0100bae:	83 ec 10             	sub    $0x10,%esp
    uint32_t eip;
    asm volatile("movl 4(%%ebp), %0" : "=r" (eip));
c0100bb1:	8b 45 04             	mov    0x4(%ebp),%eax
c0100bb4:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eip;
c0100bb7:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0100bba:	c9                   	leave  
c0100bbb:	c3                   	ret    

c0100bbc <print_stackframe>:
 *
 * Note that, the length of ebp-chain is limited. In boot/bootasm.S, before jumping
 * to the kernel entry, the value of ebp has been set to zero, that's the boundary.
 * */
void
print_stackframe(void) {
c0100bbc:	55                   	push   %ebp
c0100bbd:	89 e5                	mov    %esp,%ebp
c0100bbf:	83 ec 38             	sub    $0x38,%esp
}

static inline uint32_t
read_ebp(void) {
    uint32_t ebp;
    asm volatile ("movl %%ebp, %0" : "=r" (ebp));
c0100bc2:	89 e8                	mov    %ebp,%eax
c0100bc4:	89 45 e0             	mov    %eax,-0x20(%ebp)
    return ebp;
c0100bc7:	8b 45 e0             	mov    -0x20(%ebp),%eax
      *    (3.4) call print_debuginfo(eip-1) to print the C calling function name and line number, etc.
      *    (3.5) popup a calling stackframe
      *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
      *                   the calling funciton's ebp = ss:[ebp]
      */
    uint32_t ebp = read_ebp(), eip = read_eip();
c0100bca:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100bcd:	e8 d9 ff ff ff       	call   c0100bab <read_eip>
c0100bd2:	89 45 f0             	mov    %eax,-0x10(%ebp)

    int i, j;
    for (i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i ++) {
c0100bd5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0100bdc:	e9 88 00 00 00       	jmp    c0100c69 <print_stackframe+0xad>
        cprintf("ebp:0x%08x eip:0x%08x args:", ebp, eip);
c0100be1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100be4:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100be8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100beb:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100bef:	c7 04 24 68 58 11 c0 	movl   $0xc0115868,(%esp)
c0100bf6:	e8 6a f7 ff ff       	call   c0100365 <cprintf>
        uint32_t *args = (uint32_t *)ebp + 2;
c0100bfb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100bfe:	83 c0 08             	add    $0x8,%eax
c0100c01:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        for (j = 0; j < 4; j ++) {
c0100c04:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0100c0b:	eb 25                	jmp    c0100c32 <print_stackframe+0x76>
            cprintf("0x%08x ", args[j]);
c0100c0d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100c10:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0100c17:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100c1a:	01 d0                	add    %edx,%eax
c0100c1c:	8b 00                	mov    (%eax),%eax
c0100c1e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100c22:	c7 04 24 84 58 11 c0 	movl   $0xc0115884,(%esp)
c0100c29:	e8 37 f7 ff ff       	call   c0100365 <cprintf>

    int i, j;
    for (i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i ++) {
        cprintf("ebp:0x%08x eip:0x%08x args:", ebp, eip);
        uint32_t *args = (uint32_t *)ebp + 2;
        for (j = 0; j < 4; j ++) {
c0100c2e:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
c0100c32:	83 7d e8 03          	cmpl   $0x3,-0x18(%ebp)
c0100c36:	7e d5                	jle    c0100c0d <print_stackframe+0x51>
            cprintf("0x%08x ", args[j]);
        }
        cprintf("\n");
c0100c38:	c7 04 24 8c 58 11 c0 	movl   $0xc011588c,(%esp)
c0100c3f:	e8 21 f7 ff ff       	call   c0100365 <cprintf>
        print_debuginfo(eip - 1);
c0100c44:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100c47:	83 e8 01             	sub    $0x1,%eax
c0100c4a:	89 04 24             	mov    %eax,(%esp)
c0100c4d:	e8 b6 fe ff ff       	call   c0100b08 <print_debuginfo>
        eip = ((uint32_t *)ebp)[1];
c0100c52:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c55:	83 c0 04             	add    $0x4,%eax
c0100c58:	8b 00                	mov    (%eax),%eax
c0100c5a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        ebp = ((uint32_t *)ebp)[0];
c0100c5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c60:	8b 00                	mov    (%eax),%eax
c0100c62:	89 45 f4             	mov    %eax,-0xc(%ebp)
      *                   the calling funciton's ebp = ss:[ebp]
      */
    uint32_t ebp = read_ebp(), eip = read_eip();

    int i, j;
    for (i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i ++) {
c0100c65:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0100c69:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100c6d:	74 0a                	je     c0100c79 <print_stackframe+0xbd>
c0100c6f:	83 7d ec 13          	cmpl   $0x13,-0x14(%ebp)
c0100c73:	0f 8e 68 ff ff ff    	jle    c0100be1 <print_stackframe+0x25>
        cprintf("\n");
        print_debuginfo(eip - 1);
        eip = ((uint32_t *)ebp)[1];
        ebp = ((uint32_t *)ebp)[0];
    }
}
c0100c79:	c9                   	leave  
c0100c7a:	c3                   	ret    

c0100c7b <parse>:
#define MAXARGS         16
#define WHITESPACE      " \t\n\r"

/* parse - parse the command buffer into whitespace-separated arguments */
static int
parse(char *buf, char **argv) {
c0100c7b:	55                   	push   %ebp
c0100c7c:	89 e5                	mov    %esp,%ebp
c0100c7e:	83 ec 28             	sub    $0x28,%esp
    int argc = 0;
c0100c81:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100c88:	eb 0c                	jmp    c0100c96 <parse+0x1b>
            *buf ++ = '\0';
c0100c8a:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c8d:	8d 50 01             	lea    0x1(%eax),%edx
c0100c90:	89 55 08             	mov    %edx,0x8(%ebp)
c0100c93:	c6 00 00             	movb   $0x0,(%eax)
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100c96:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c99:	0f b6 00             	movzbl (%eax),%eax
c0100c9c:	84 c0                	test   %al,%al
c0100c9e:	74 1d                	je     c0100cbd <parse+0x42>
c0100ca0:	8b 45 08             	mov    0x8(%ebp),%eax
c0100ca3:	0f b6 00             	movzbl (%eax),%eax
c0100ca6:	0f be c0             	movsbl %al,%eax
c0100ca9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100cad:	c7 04 24 10 59 11 c0 	movl   $0xc0115910,(%esp)
c0100cb4:	e8 cd 46 01 00       	call   c0115386 <strchr>
c0100cb9:	85 c0                	test   %eax,%eax
c0100cbb:	75 cd                	jne    c0100c8a <parse+0xf>
            *buf ++ = '\0';
        }
        if (*buf == '\0') {
c0100cbd:	8b 45 08             	mov    0x8(%ebp),%eax
c0100cc0:	0f b6 00             	movzbl (%eax),%eax
c0100cc3:	84 c0                	test   %al,%al
c0100cc5:	75 02                	jne    c0100cc9 <parse+0x4e>
            break;
c0100cc7:	eb 67                	jmp    c0100d30 <parse+0xb5>
        }

        // save and scan past next arg
        if (argc == MAXARGS - 1) {
c0100cc9:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
c0100ccd:	75 14                	jne    c0100ce3 <parse+0x68>
            cprintf("Too many arguments (max %d).\n", MAXARGS);
c0100ccf:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
c0100cd6:	00 
c0100cd7:	c7 04 24 15 59 11 c0 	movl   $0xc0115915,(%esp)
c0100cde:	e8 82 f6 ff ff       	call   c0100365 <cprintf>
        }
        argv[argc ++] = buf;
c0100ce3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100ce6:	8d 50 01             	lea    0x1(%eax),%edx
c0100ce9:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0100cec:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0100cf3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100cf6:	01 c2                	add    %eax,%edx
c0100cf8:	8b 45 08             	mov    0x8(%ebp),%eax
c0100cfb:	89 02                	mov    %eax,(%edx)
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100cfd:	eb 04                	jmp    c0100d03 <parse+0x88>
            buf ++;
c0100cff:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        // save and scan past next arg
        if (argc == MAXARGS - 1) {
            cprintf("Too many arguments (max %d).\n", MAXARGS);
        }
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100d03:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d06:	0f b6 00             	movzbl (%eax),%eax
c0100d09:	84 c0                	test   %al,%al
c0100d0b:	74 1d                	je     c0100d2a <parse+0xaf>
c0100d0d:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d10:	0f b6 00             	movzbl (%eax),%eax
c0100d13:	0f be c0             	movsbl %al,%eax
c0100d16:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100d1a:	c7 04 24 10 59 11 c0 	movl   $0xc0115910,(%esp)
c0100d21:	e8 60 46 01 00       	call   c0115386 <strchr>
c0100d26:	85 c0                	test   %eax,%eax
c0100d28:	74 d5                	je     c0100cff <parse+0x84>
            buf ++;
        }
    }
c0100d2a:	90                   	nop
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100d2b:	e9 66 ff ff ff       	jmp    c0100c96 <parse+0x1b>
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
            buf ++;
        }
    }
    return argc;
c0100d30:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100d33:	c9                   	leave  
c0100d34:	c3                   	ret    

c0100d35 <runcmd>:
/* *
 * runcmd - parse the input string, split it into separated arguments
 * and then lookup and invoke some related commands/
 * */
static int
runcmd(char *buf, struct trapframe *tf) {
c0100d35:	55                   	push   %ebp
c0100d36:	89 e5                	mov    %esp,%ebp
c0100d38:	83 ec 68             	sub    $0x68,%esp
    char *argv[MAXARGS];
    int argc = parse(buf, argv);
c0100d3b:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0100d3e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100d42:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d45:	89 04 24             	mov    %eax,(%esp)
c0100d48:	e8 2e ff ff ff       	call   c0100c7b <parse>
c0100d4d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (argc == 0) {
c0100d50:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100d54:	75 0a                	jne    c0100d60 <runcmd+0x2b>
        return 0;
c0100d56:	b8 00 00 00 00       	mov    $0x0,%eax
c0100d5b:	e9 85 00 00 00       	jmp    c0100de5 <runcmd+0xb0>
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100d60:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100d67:	eb 5c                	jmp    c0100dc5 <runcmd+0x90>
        if (strcmp(commands[i].name, argv[0]) == 0) {
c0100d69:	8b 4d b0             	mov    -0x50(%ebp),%ecx
c0100d6c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d6f:	89 d0                	mov    %edx,%eax
c0100d71:	01 c0                	add    %eax,%eax
c0100d73:	01 d0                	add    %edx,%eax
c0100d75:	c1 e0 02             	shl    $0x2,%eax
c0100d78:	05 20 e0 14 c0       	add    $0xc014e020,%eax
c0100d7d:	8b 00                	mov    (%eax),%eax
c0100d7f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0100d83:	89 04 24             	mov    %eax,(%esp)
c0100d86:	e8 5c 45 01 00       	call   c01152e7 <strcmp>
c0100d8b:	85 c0                	test   %eax,%eax
c0100d8d:	75 32                	jne    c0100dc1 <runcmd+0x8c>
            return commands[i].func(argc - 1, argv + 1, tf);
c0100d8f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d92:	89 d0                	mov    %edx,%eax
c0100d94:	01 c0                	add    %eax,%eax
c0100d96:	01 d0                	add    %edx,%eax
c0100d98:	c1 e0 02             	shl    $0x2,%eax
c0100d9b:	05 20 e0 14 c0       	add    $0xc014e020,%eax
c0100da0:	8b 40 08             	mov    0x8(%eax),%eax
c0100da3:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100da6:	8d 4a ff             	lea    -0x1(%edx),%ecx
c0100da9:	8b 55 0c             	mov    0xc(%ebp),%edx
c0100dac:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100db0:	8d 55 b0             	lea    -0x50(%ebp),%edx
c0100db3:	83 c2 04             	add    $0x4,%edx
c0100db6:	89 54 24 04          	mov    %edx,0x4(%esp)
c0100dba:	89 0c 24             	mov    %ecx,(%esp)
c0100dbd:	ff d0                	call   *%eax
c0100dbf:	eb 24                	jmp    c0100de5 <runcmd+0xb0>
    int argc = parse(buf, argv);
    if (argc == 0) {
        return 0;
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100dc1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100dc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100dc8:	83 f8 02             	cmp    $0x2,%eax
c0100dcb:	76 9c                	jbe    c0100d69 <runcmd+0x34>
        if (strcmp(commands[i].name, argv[0]) == 0) {
            return commands[i].func(argc - 1, argv + 1, tf);
        }
    }
    cprintf("Unknown command '%s'\n", argv[0]);
c0100dcd:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0100dd0:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100dd4:	c7 04 24 33 59 11 c0 	movl   $0xc0115933,(%esp)
c0100ddb:	e8 85 f5 ff ff       	call   c0100365 <cprintf>
    return 0;
c0100de0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100de5:	c9                   	leave  
c0100de6:	c3                   	ret    

c0100de7 <kmonitor>:

/***** Implementations of basic kernel monitor commands *****/

void
kmonitor(struct trapframe *tf) {
c0100de7:	55                   	push   %ebp
c0100de8:	89 e5                	mov    %esp,%ebp
c0100dea:	83 ec 28             	sub    $0x28,%esp
    cprintf("Welcome to the kernel debug monitor!!\n");
c0100ded:	c7 04 24 4c 59 11 c0 	movl   $0xc011594c,(%esp)
c0100df4:	e8 6c f5 ff ff       	call   c0100365 <cprintf>
    cprintf("Type 'help' for a list of commands.\n");
c0100df9:	c7 04 24 74 59 11 c0 	movl   $0xc0115974,(%esp)
c0100e00:	e8 60 f5 ff ff       	call   c0100365 <cprintf>

    if (tf != NULL) {
c0100e05:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100e09:	74 0b                	je     c0100e16 <kmonitor+0x2f>
        print_trapframe(tf);
c0100e0b:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e0e:	89 04 24             	mov    %eax,(%esp)
c0100e11:	e8 ac 16 00 00       	call   c01024c2 <print_trapframe>
    }

    char *buf;
    while (1) {
        if ((buf = readline("K> ")) != NULL) {
c0100e16:	c7 04 24 99 59 11 c0 	movl   $0xc0115999,(%esp)
c0100e1d:	e8 32 f4 ff ff       	call   c0100254 <readline>
c0100e22:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100e25:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100e29:	74 18                	je     c0100e43 <kmonitor+0x5c>
            if (runcmd(buf, tf) < 0) {
c0100e2b:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e2e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e32:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100e35:	89 04 24             	mov    %eax,(%esp)
c0100e38:	e8 f8 fe ff ff       	call   c0100d35 <runcmd>
c0100e3d:	85 c0                	test   %eax,%eax
c0100e3f:	79 02                	jns    c0100e43 <kmonitor+0x5c>
                break;
c0100e41:	eb 02                	jmp    c0100e45 <kmonitor+0x5e>
            }
        }
    }
c0100e43:	eb d1                	jmp    c0100e16 <kmonitor+0x2f>
}
c0100e45:	c9                   	leave  
c0100e46:	c3                   	ret    

c0100e47 <mon_help>:

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
c0100e47:	55                   	push   %ebp
c0100e48:	89 e5                	mov    %esp,%ebp
c0100e4a:	83 ec 28             	sub    $0x28,%esp
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100e4d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100e54:	eb 3f                	jmp    c0100e95 <mon_help+0x4e>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
c0100e56:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100e59:	89 d0                	mov    %edx,%eax
c0100e5b:	01 c0                	add    %eax,%eax
c0100e5d:	01 d0                	add    %edx,%eax
c0100e5f:	c1 e0 02             	shl    $0x2,%eax
c0100e62:	05 20 e0 14 c0       	add    $0xc014e020,%eax
c0100e67:	8b 48 04             	mov    0x4(%eax),%ecx
c0100e6a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100e6d:	89 d0                	mov    %edx,%eax
c0100e6f:	01 c0                	add    %eax,%eax
c0100e71:	01 d0                	add    %edx,%eax
c0100e73:	c1 e0 02             	shl    $0x2,%eax
c0100e76:	05 20 e0 14 c0       	add    $0xc014e020,%eax
c0100e7b:	8b 00                	mov    (%eax),%eax
c0100e7d:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0100e81:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e85:	c7 04 24 9d 59 11 c0 	movl   $0xc011599d,(%esp)
c0100e8c:	e8 d4 f4 ff ff       	call   c0100365 <cprintf>

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100e91:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100e95:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100e98:	83 f8 02             	cmp    $0x2,%eax
c0100e9b:	76 b9                	jbe    c0100e56 <mon_help+0xf>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
    }
    return 0;
c0100e9d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100ea2:	c9                   	leave  
c0100ea3:	c3                   	ret    

c0100ea4 <mon_kerninfo>:
/* *
 * mon_kerninfo - call print_kerninfo in kern/debug/kdebug.c to
 * print the memory occupancy in kernel.
 * */
int
mon_kerninfo(int argc, char **argv, struct trapframe *tf) {
c0100ea4:	55                   	push   %ebp
c0100ea5:	89 e5                	mov    %esp,%ebp
c0100ea7:	83 ec 08             	sub    $0x8,%esp
    print_kerninfo();
c0100eaa:	e8 c3 fb ff ff       	call   c0100a72 <print_kerninfo>
    return 0;
c0100eaf:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100eb4:	c9                   	leave  
c0100eb5:	c3                   	ret    

c0100eb6 <mon_backtrace>:
/* *
 * mon_backtrace - call print_stackframe in kern/debug/kdebug.c to
 * print a backtrace of the stack.
 * */
int
mon_backtrace(int argc, char **argv, struct trapframe *tf) {
c0100eb6:	55                   	push   %ebp
c0100eb7:	89 e5                	mov    %esp,%ebp
c0100eb9:	83 ec 08             	sub    $0x8,%esp
    print_stackframe();
c0100ebc:	e8 fb fc ff ff       	call   c0100bbc <print_stackframe>
    return 0;
c0100ec1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100ec6:	c9                   	leave  
c0100ec7:	c3                   	ret    

c0100ec8 <__panic>:
/* *
 * __panic - __panic is called on unresolvable fatal errors. it prints
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
c0100ec8:	55                   	push   %ebp
c0100ec9:	89 e5                	mov    %esp,%ebp
c0100ecb:	83 ec 28             	sub    $0x28,%esp
    if (is_panic) {
c0100ece:	a1 00 f3 14 c0       	mov    0xc014f300,%eax
c0100ed3:	85 c0                	test   %eax,%eax
c0100ed5:	74 02                	je     c0100ed9 <__panic+0x11>
        goto panic_dead;
c0100ed7:	eb 48                	jmp    c0100f21 <__panic+0x59>
    }
    is_panic = 1;
c0100ed9:	c7 05 00 f3 14 c0 01 	movl   $0x1,0xc014f300
c0100ee0:	00 00 00 

    // print the 'message'
    va_list ap;
    va_start(ap, fmt);
c0100ee3:	8d 45 14             	lea    0x14(%ebp),%eax
c0100ee6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel panic at %s:%d:\n    ", file, line);
c0100ee9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100eec:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100ef0:	8b 45 08             	mov    0x8(%ebp),%eax
c0100ef3:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100ef7:	c7 04 24 a6 59 11 c0 	movl   $0xc01159a6,(%esp)
c0100efe:	e8 62 f4 ff ff       	call   c0100365 <cprintf>
    vcprintf(fmt, ap);
c0100f03:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100f06:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100f0a:	8b 45 10             	mov    0x10(%ebp),%eax
c0100f0d:	89 04 24             	mov    %eax,(%esp)
c0100f10:	e8 15 f4 ff ff       	call   c010032a <vcprintf>
    cprintf("\n");
c0100f15:	c7 04 24 c2 59 11 c0 	movl   $0xc01159c2,(%esp)
c0100f1c:	e8 44 f4 ff ff       	call   c0100365 <cprintf>
    va_end(ap);

panic_dead:
    intr_disable();
c0100f21:	e8 04 12 00 00       	call   c010212a <intr_disable>
    while (1) {
        kmonitor(NULL);
c0100f26:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100f2d:	e8 b5 fe ff ff       	call   c0100de7 <kmonitor>
    }
c0100f32:	eb f2                	jmp    c0100f26 <__panic+0x5e>

c0100f34 <__warn>:
}

/* __warn - like panic, but don't */
void
__warn(const char *file, int line, const char *fmt, ...) {
c0100f34:	55                   	push   %ebp
c0100f35:	89 e5                	mov    %esp,%ebp
c0100f37:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    va_start(ap, fmt);
c0100f3a:	8d 45 14             	lea    0x14(%ebp),%eax
c0100f3d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel warning at %s:%d:\n    ", file, line);
c0100f40:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100f43:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100f47:	8b 45 08             	mov    0x8(%ebp),%eax
c0100f4a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100f4e:	c7 04 24 c4 59 11 c0 	movl   $0xc01159c4,(%esp)
c0100f55:	e8 0b f4 ff ff       	call   c0100365 <cprintf>
    vcprintf(fmt, ap);
c0100f5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100f5d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100f61:	8b 45 10             	mov    0x10(%ebp),%eax
c0100f64:	89 04 24             	mov    %eax,(%esp)
c0100f67:	e8 be f3 ff ff       	call   c010032a <vcprintf>
    cprintf("\n");
c0100f6c:	c7 04 24 c2 59 11 c0 	movl   $0xc01159c2,(%esp)
c0100f73:	e8 ed f3 ff ff       	call   c0100365 <cprintf>
    va_end(ap);
}
c0100f78:	c9                   	leave  
c0100f79:	c3                   	ret    

c0100f7a <is_kernel_panic>:

bool
is_kernel_panic(void) {
c0100f7a:	55                   	push   %ebp
c0100f7b:	89 e5                	mov    %esp,%ebp
    return is_panic;
c0100f7d:	a1 00 f3 14 c0       	mov    0xc014f300,%eax
}
c0100f82:	5d                   	pop    %ebp
c0100f83:	c3                   	ret    

c0100f84 <SYSTEM_READ_TIMER>:
#define TIMER_RATEGEN   0x04                    // mode 2, rate generator
#define TIMER_16BIT     0x30                    // r/w counter 16 bits, LSB first

volatile size_t ticks;

long SYSTEM_READ_TIMER( void ){
c0100f84:	55                   	push   %ebp
c0100f85:	89 e5                	mov    %esp,%ebp
    return ticks;
c0100f87:	a1 10 30 15 c0       	mov    0xc0153010,%eax
}
c0100f8c:	5d                   	pop    %ebp
c0100f8d:	c3                   	ret    

c0100f8e <clock_init>:
/* *
 * clock_init - initialize 8253 clock to interrupt 100 times per second,
 * and then enable IRQ_TIMER.
 * */
void
clock_init(void) {
c0100f8e:	55                   	push   %ebp
c0100f8f:	89 e5                	mov    %esp,%ebp
c0100f91:	83 ec 28             	sub    $0x28,%esp
c0100f94:	66 c7 45 f6 43 00    	movw   $0x43,-0xa(%ebp)
c0100f9a:	c6 45 f5 34          	movb   $0x34,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0100f9e:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0100fa2:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0100fa6:	ee                   	out    %al,(%dx)
c0100fa7:	66 c7 45 f2 40 00    	movw   $0x40,-0xe(%ebp)
c0100fad:	c6 45 f1 9c          	movb   $0x9c,-0xf(%ebp)
c0100fb1:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0100fb5:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0100fb9:	ee                   	out    %al,(%dx)
c0100fba:	66 c7 45 ee 40 00    	movw   $0x40,-0x12(%ebp)
c0100fc0:	c6 45 ed 2e          	movb   $0x2e,-0x13(%ebp)
c0100fc4:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0100fc8:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0100fcc:	ee                   	out    %al,(%dx)
    outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
    outb(IO_TIMER1, TIMER_DIV(100) % 256);
    outb(IO_TIMER1, TIMER_DIV(100) / 256);

    // initialize time counter 'ticks' to zero
    ticks = 0;
c0100fcd:	c7 05 10 30 15 c0 00 	movl   $0x0,0xc0153010
c0100fd4:	00 00 00 

    cprintf("++ setup timer interrupts\n");
c0100fd7:	c7 04 24 e2 59 11 c0 	movl   $0xc01159e2,(%esp)
c0100fde:	e8 82 f3 ff ff       	call   c0100365 <cprintf>
    pic_enable(IRQ_TIMER);
c0100fe3:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100fea:	e8 99 11 00 00       	call   c0102188 <pic_enable>
}
c0100fef:	c9                   	leave  
c0100ff0:	c3                   	ret    

c0100ff1 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0100ff1:	55                   	push   %ebp
c0100ff2:	89 e5                	mov    %esp,%ebp
c0100ff4:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0100ff7:	9c                   	pushf  
c0100ff8:	58                   	pop    %eax
c0100ff9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0100ffc:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0100fff:	25 00 02 00 00       	and    $0x200,%eax
c0101004:	85 c0                	test   %eax,%eax
c0101006:	74 0c                	je     c0101014 <__intr_save+0x23>
        intr_disable();
c0101008:	e8 1d 11 00 00       	call   c010212a <intr_disable>
        return 1;
c010100d:	b8 01 00 00 00       	mov    $0x1,%eax
c0101012:	eb 05                	jmp    c0101019 <__intr_save+0x28>
    }
    return 0;
c0101014:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101019:	c9                   	leave  
c010101a:	c3                   	ret    

c010101b <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010101b:	55                   	push   %ebp
c010101c:	89 e5                	mov    %esp,%ebp
c010101e:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0101021:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0101025:	74 05                	je     c010102c <__intr_restore+0x11>
        intr_enable();
c0101027:	e8 f8 10 00 00       	call   c0102124 <intr_enable>
    }
}
c010102c:	c9                   	leave  
c010102d:	c3                   	ret    

c010102e <delay>:
#include <memlayout.h>
#include <sync.h>

/* stupid I/O delay routine necessitated by historical PC design flaws */
static void
delay(void) {
c010102e:	55                   	push   %ebp
c010102f:	89 e5                	mov    %esp,%ebp
c0101031:	83 ec 10             	sub    $0x10,%esp
c0101034:	66 c7 45 fe 84 00    	movw   $0x84,-0x2(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010103a:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c010103e:	89 c2                	mov    %eax,%edx
c0101040:	ec                   	in     (%dx),%al
c0101041:	88 45 fd             	mov    %al,-0x3(%ebp)
c0101044:	66 c7 45 fa 84 00    	movw   $0x84,-0x6(%ebp)
c010104a:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c010104e:	89 c2                	mov    %eax,%edx
c0101050:	ec                   	in     (%dx),%al
c0101051:	88 45 f9             	mov    %al,-0x7(%ebp)
c0101054:	66 c7 45 f6 84 00    	movw   $0x84,-0xa(%ebp)
c010105a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010105e:	89 c2                	mov    %eax,%edx
c0101060:	ec                   	in     (%dx),%al
c0101061:	88 45 f5             	mov    %al,-0xb(%ebp)
c0101064:	66 c7 45 f2 84 00    	movw   $0x84,-0xe(%ebp)
c010106a:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c010106e:	89 c2                	mov    %eax,%edx
c0101070:	ec                   	in     (%dx),%al
c0101071:	88 45 f1             	mov    %al,-0xf(%ebp)
    inb(0x84);
    inb(0x84);
    inb(0x84);
    inb(0x84);
}
c0101074:	c9                   	leave  
c0101075:	c3                   	ret    

c0101076 <cga_init>:
static uint16_t addr_6845;

/* TEXT-mode CGA/VGA display output */

static void
cga_init(void) {
c0101076:	55                   	push   %ebp
c0101077:	89 e5                	mov    %esp,%ebp
c0101079:	83 ec 20             	sub    $0x20,%esp
    volatile uint16_t *cp = (uint16_t *)(CGA_BUF + KERNBASE);
c010107c:	c7 45 fc 00 80 0b c0 	movl   $0xc00b8000,-0x4(%ebp)
    uint16_t was = *cp;
c0101083:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101086:	0f b7 00             	movzwl (%eax),%eax
c0101089:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    *cp = (uint16_t) 0xA55A;
c010108d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101090:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
    if (*cp != 0xA55A) {
c0101095:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101098:	0f b7 00             	movzwl (%eax),%eax
c010109b:	66 3d 5a a5          	cmp    $0xa55a,%ax
c010109f:	74 12                	je     c01010b3 <cga_init+0x3d>
        cp = (uint16_t*)(MONO_BUF + KERNBASE);
c01010a1:	c7 45 fc 00 00 0b c0 	movl   $0xc00b0000,-0x4(%ebp)
        addr_6845 = MONO_BASE;
c01010a8:	66 c7 05 26 f3 14 c0 	movw   $0x3b4,0xc014f326
c01010af:	b4 03 
c01010b1:	eb 13                	jmp    c01010c6 <cga_init+0x50>
    } else {
        *cp = was;
c01010b3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01010b6:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01010ba:	66 89 10             	mov    %dx,(%eax)
        addr_6845 = CGA_BASE;
c01010bd:	66 c7 05 26 f3 14 c0 	movw   $0x3d4,0xc014f326
c01010c4:	d4 03 
    }

    // Extract cursor location
    uint32_t pos;
    outb(addr_6845, 14);
c01010c6:	0f b7 05 26 f3 14 c0 	movzwl 0xc014f326,%eax
c01010cd:	0f b7 c0             	movzwl %ax,%eax
c01010d0:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c01010d4:	c6 45 f1 0e          	movb   $0xe,-0xf(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01010d8:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c01010dc:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01010e0:	ee                   	out    %al,(%dx)
    pos = inb(addr_6845 + 1) << 8;
c01010e1:	0f b7 05 26 f3 14 c0 	movzwl 0xc014f326,%eax
c01010e8:	83 c0 01             	add    $0x1,%eax
c01010eb:	0f b7 c0             	movzwl %ax,%eax
c01010ee:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01010f2:	0f b7 45 ee          	movzwl -0x12(%ebp),%eax
c01010f6:	89 c2                	mov    %eax,%edx
c01010f8:	ec                   	in     (%dx),%al
c01010f9:	88 45 ed             	mov    %al,-0x13(%ebp)
    return data;
c01010fc:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101100:	0f b6 c0             	movzbl %al,%eax
c0101103:	c1 e0 08             	shl    $0x8,%eax
c0101106:	89 45 f4             	mov    %eax,-0xc(%ebp)
    outb(addr_6845, 15);
c0101109:	0f b7 05 26 f3 14 c0 	movzwl 0xc014f326,%eax
c0101110:	0f b7 c0             	movzwl %ax,%eax
c0101113:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c0101117:	c6 45 e9 0f          	movb   $0xf,-0x17(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010111b:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c010111f:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101123:	ee                   	out    %al,(%dx)
    pos |= inb(addr_6845 + 1);
c0101124:	0f b7 05 26 f3 14 c0 	movzwl 0xc014f326,%eax
c010112b:	83 c0 01             	add    $0x1,%eax
c010112e:	0f b7 c0             	movzwl %ax,%eax
c0101131:	66 89 45 e6          	mov    %ax,-0x1a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101135:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c0101139:	89 c2                	mov    %eax,%edx
c010113b:	ec                   	in     (%dx),%al
c010113c:	88 45 e5             	mov    %al,-0x1b(%ebp)
    return data;
c010113f:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0101143:	0f b6 c0             	movzbl %al,%eax
c0101146:	09 45 f4             	or     %eax,-0xc(%ebp)

    crt_buf = (uint16_t*) cp;
c0101149:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010114c:	a3 20 f3 14 c0       	mov    %eax,0xc014f320
    crt_pos = pos;
c0101151:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101154:	66 a3 24 f3 14 c0    	mov    %ax,0xc014f324
}
c010115a:	c9                   	leave  
c010115b:	c3                   	ret    

c010115c <serial_init>:

static bool serial_exists = 0;

static void
serial_init(void) {
c010115c:	55                   	push   %ebp
c010115d:	89 e5                	mov    %esp,%ebp
c010115f:	83 ec 48             	sub    $0x48,%esp
c0101162:	66 c7 45 f6 fa 03    	movw   $0x3fa,-0xa(%ebp)
c0101168:	c6 45 f5 00          	movb   $0x0,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010116c:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0101170:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101174:	ee                   	out    %al,(%dx)
c0101175:	66 c7 45 f2 fb 03    	movw   $0x3fb,-0xe(%ebp)
c010117b:	c6 45 f1 80          	movb   $0x80,-0xf(%ebp)
c010117f:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0101183:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101187:	ee                   	out    %al,(%dx)
c0101188:	66 c7 45 ee f8 03    	movw   $0x3f8,-0x12(%ebp)
c010118e:	c6 45 ed 0c          	movb   $0xc,-0x13(%ebp)
c0101192:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101196:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c010119a:	ee                   	out    %al,(%dx)
c010119b:	66 c7 45 ea f9 03    	movw   $0x3f9,-0x16(%ebp)
c01011a1:	c6 45 e9 00          	movb   $0x0,-0x17(%ebp)
c01011a5:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c01011a9:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c01011ad:	ee                   	out    %al,(%dx)
c01011ae:	66 c7 45 e6 fb 03    	movw   $0x3fb,-0x1a(%ebp)
c01011b4:	c6 45 e5 03          	movb   $0x3,-0x1b(%ebp)
c01011b8:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c01011bc:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c01011c0:	ee                   	out    %al,(%dx)
c01011c1:	66 c7 45 e2 fc 03    	movw   $0x3fc,-0x1e(%ebp)
c01011c7:	c6 45 e1 00          	movb   $0x0,-0x1f(%ebp)
c01011cb:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c01011cf:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c01011d3:	ee                   	out    %al,(%dx)
c01011d4:	66 c7 45 de f9 03    	movw   $0x3f9,-0x22(%ebp)
c01011da:	c6 45 dd 01          	movb   $0x1,-0x23(%ebp)
c01011de:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c01011e2:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c01011e6:	ee                   	out    %al,(%dx)
c01011e7:	66 c7 45 da fd 03    	movw   $0x3fd,-0x26(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01011ed:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c01011f1:	89 c2                	mov    %eax,%edx
c01011f3:	ec                   	in     (%dx),%al
c01011f4:	88 45 d9             	mov    %al,-0x27(%ebp)
    return data;
c01011f7:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
    // Enable rcv interrupts
    outb(COM1 + COM_IER, COM_IER_RDI);

    // Clear any preexisting overrun indications and interrupts
    // Serial port doesn't exist if COM_LSR returns 0xFF
    serial_exists = (inb(COM1 + COM_LSR) != 0xFF);
c01011fb:	3c ff                	cmp    $0xff,%al
c01011fd:	0f 95 c0             	setne  %al
c0101200:	0f b6 c0             	movzbl %al,%eax
c0101203:	a3 28 f3 14 c0       	mov    %eax,0xc014f328
c0101208:	66 c7 45 d6 fa 03    	movw   $0x3fa,-0x2a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010120e:	0f b7 45 d6          	movzwl -0x2a(%ebp),%eax
c0101212:	89 c2                	mov    %eax,%edx
c0101214:	ec                   	in     (%dx),%al
c0101215:	88 45 d5             	mov    %al,-0x2b(%ebp)
c0101218:	66 c7 45 d2 f8 03    	movw   $0x3f8,-0x2e(%ebp)
c010121e:	0f b7 45 d2          	movzwl -0x2e(%ebp),%eax
c0101222:	89 c2                	mov    %eax,%edx
c0101224:	ec                   	in     (%dx),%al
c0101225:	88 45 d1             	mov    %al,-0x2f(%ebp)
    (void) inb(COM1+COM_IIR);
    (void) inb(COM1+COM_RX);

    if (serial_exists) {
c0101228:	a1 28 f3 14 c0       	mov    0xc014f328,%eax
c010122d:	85 c0                	test   %eax,%eax
c010122f:	74 0c                	je     c010123d <serial_init+0xe1>
        pic_enable(IRQ_COM1);
c0101231:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c0101238:	e8 4b 0f 00 00       	call   c0102188 <pic_enable>
    }
}
c010123d:	c9                   	leave  
c010123e:	c3                   	ret    

c010123f <lpt_putc_sub>:

static void
lpt_putc_sub(int c) {
c010123f:	55                   	push   %ebp
c0101240:	89 e5                	mov    %esp,%ebp
c0101242:	83 ec 20             	sub    $0x20,%esp
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c0101245:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c010124c:	eb 09                	jmp    c0101257 <lpt_putc_sub+0x18>
        delay();
c010124e:	e8 db fd ff ff       	call   c010102e <delay>
}

static void
lpt_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c0101253:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0101257:	66 c7 45 fa 79 03    	movw   $0x379,-0x6(%ebp)
c010125d:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0101261:	89 c2                	mov    %eax,%edx
c0101263:	ec                   	in     (%dx),%al
c0101264:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c0101267:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c010126b:	84 c0                	test   %al,%al
c010126d:	78 09                	js     c0101278 <lpt_putc_sub+0x39>
c010126f:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c0101276:	7e d6                	jle    c010124e <lpt_putc_sub+0xf>
        delay();
    }
    outb(LPTPORT + 0, c);
c0101278:	8b 45 08             	mov    0x8(%ebp),%eax
c010127b:	0f b6 c0             	movzbl %al,%eax
c010127e:	66 c7 45 f6 78 03    	movw   $0x378,-0xa(%ebp)
c0101284:	88 45 f5             	mov    %al,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101287:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c010128b:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c010128f:	ee                   	out    %al,(%dx)
c0101290:	66 c7 45 f2 7a 03    	movw   $0x37a,-0xe(%ebp)
c0101296:	c6 45 f1 0d          	movb   $0xd,-0xf(%ebp)
c010129a:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c010129e:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01012a2:	ee                   	out    %al,(%dx)
c01012a3:	66 c7 45 ee 7a 03    	movw   $0x37a,-0x12(%ebp)
c01012a9:	c6 45 ed 08          	movb   $0x8,-0x13(%ebp)
c01012ad:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c01012b1:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01012b5:	ee                   	out    %al,(%dx)
    outb(LPTPORT + 2, 0x08 | 0x04 | 0x01);
    outb(LPTPORT + 2, 0x08);
}
c01012b6:	c9                   	leave  
c01012b7:	c3                   	ret    

c01012b8 <lpt_putc>:

/* lpt_putc - copy console output to parallel port */
static void
lpt_putc(int c) {
c01012b8:	55                   	push   %ebp
c01012b9:	89 e5                	mov    %esp,%ebp
c01012bb:	83 ec 04             	sub    $0x4,%esp
    if (c != '\b') {
c01012be:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c01012c2:	74 0d                	je     c01012d1 <lpt_putc+0x19>
        lpt_putc_sub(c);
c01012c4:	8b 45 08             	mov    0x8(%ebp),%eax
c01012c7:	89 04 24             	mov    %eax,(%esp)
c01012ca:	e8 70 ff ff ff       	call   c010123f <lpt_putc_sub>
c01012cf:	eb 24                	jmp    c01012f5 <lpt_putc+0x3d>
    }
    else {
        lpt_putc_sub('\b');
c01012d1:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01012d8:	e8 62 ff ff ff       	call   c010123f <lpt_putc_sub>
        lpt_putc_sub(' ');
c01012dd:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c01012e4:	e8 56 ff ff ff       	call   c010123f <lpt_putc_sub>
        lpt_putc_sub('\b');
c01012e9:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01012f0:	e8 4a ff ff ff       	call   c010123f <lpt_putc_sub>
    }
}
c01012f5:	c9                   	leave  
c01012f6:	c3                   	ret    

c01012f7 <cga_putc>:

/* cga_putc - print character to console */
static void
cga_putc(int c) {
c01012f7:	55                   	push   %ebp
c01012f8:	89 e5                	mov    %esp,%ebp
c01012fa:	53                   	push   %ebx
c01012fb:	83 ec 34             	sub    $0x34,%esp
    // set black on white
    if (!(c & ~0xFF)) {
c01012fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0101301:	b0 00                	mov    $0x0,%al
c0101303:	85 c0                	test   %eax,%eax
c0101305:	75 07                	jne    c010130e <cga_putc+0x17>
        c |= 0x0700;
c0101307:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)
    }

    switch (c & 0xff) {
c010130e:	8b 45 08             	mov    0x8(%ebp),%eax
c0101311:	0f b6 c0             	movzbl %al,%eax
c0101314:	83 f8 0a             	cmp    $0xa,%eax
c0101317:	74 4c                	je     c0101365 <cga_putc+0x6e>
c0101319:	83 f8 0d             	cmp    $0xd,%eax
c010131c:	74 57                	je     c0101375 <cga_putc+0x7e>
c010131e:	83 f8 08             	cmp    $0x8,%eax
c0101321:	0f 85 88 00 00 00    	jne    c01013af <cga_putc+0xb8>
    case '\b':
        if (crt_pos > 0) {
c0101327:	0f b7 05 24 f3 14 c0 	movzwl 0xc014f324,%eax
c010132e:	66 85 c0             	test   %ax,%ax
c0101331:	74 30                	je     c0101363 <cga_putc+0x6c>
            crt_pos --;
c0101333:	0f b7 05 24 f3 14 c0 	movzwl 0xc014f324,%eax
c010133a:	83 e8 01             	sub    $0x1,%eax
c010133d:	66 a3 24 f3 14 c0    	mov    %ax,0xc014f324
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
c0101343:	a1 20 f3 14 c0       	mov    0xc014f320,%eax
c0101348:	0f b7 15 24 f3 14 c0 	movzwl 0xc014f324,%edx
c010134f:	0f b7 d2             	movzwl %dx,%edx
c0101352:	01 d2                	add    %edx,%edx
c0101354:	01 c2                	add    %eax,%edx
c0101356:	8b 45 08             	mov    0x8(%ebp),%eax
c0101359:	b0 00                	mov    $0x0,%al
c010135b:	83 c8 20             	or     $0x20,%eax
c010135e:	66 89 02             	mov    %ax,(%edx)
        }
        break;
c0101361:	eb 72                	jmp    c01013d5 <cga_putc+0xde>
c0101363:	eb 70                	jmp    c01013d5 <cga_putc+0xde>
    case '\n':
        crt_pos += CRT_COLS;
c0101365:	0f b7 05 24 f3 14 c0 	movzwl 0xc014f324,%eax
c010136c:	83 c0 50             	add    $0x50,%eax
c010136f:	66 a3 24 f3 14 c0    	mov    %ax,0xc014f324
    case '\r':
        crt_pos -= (crt_pos % CRT_COLS);
c0101375:	0f b7 1d 24 f3 14 c0 	movzwl 0xc014f324,%ebx
c010137c:	0f b7 0d 24 f3 14 c0 	movzwl 0xc014f324,%ecx
c0101383:	0f b7 c1             	movzwl %cx,%eax
c0101386:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
c010138c:	c1 e8 10             	shr    $0x10,%eax
c010138f:	89 c2                	mov    %eax,%edx
c0101391:	66 c1 ea 06          	shr    $0x6,%dx
c0101395:	89 d0                	mov    %edx,%eax
c0101397:	c1 e0 02             	shl    $0x2,%eax
c010139a:	01 d0                	add    %edx,%eax
c010139c:	c1 e0 04             	shl    $0x4,%eax
c010139f:	29 c1                	sub    %eax,%ecx
c01013a1:	89 ca                	mov    %ecx,%edx
c01013a3:	89 d8                	mov    %ebx,%eax
c01013a5:	29 d0                	sub    %edx,%eax
c01013a7:	66 a3 24 f3 14 c0    	mov    %ax,0xc014f324
        break;
c01013ad:	eb 26                	jmp    c01013d5 <cga_putc+0xde>
    default:
        crt_buf[crt_pos ++] = c;     // write the character
c01013af:	8b 0d 20 f3 14 c0    	mov    0xc014f320,%ecx
c01013b5:	0f b7 05 24 f3 14 c0 	movzwl 0xc014f324,%eax
c01013bc:	8d 50 01             	lea    0x1(%eax),%edx
c01013bf:	66 89 15 24 f3 14 c0 	mov    %dx,0xc014f324
c01013c6:	0f b7 c0             	movzwl %ax,%eax
c01013c9:	01 c0                	add    %eax,%eax
c01013cb:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c01013ce:	8b 45 08             	mov    0x8(%ebp),%eax
c01013d1:	66 89 02             	mov    %ax,(%edx)
        break;
c01013d4:	90                   	nop
    }

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
c01013d5:	0f b7 05 24 f3 14 c0 	movzwl 0xc014f324,%eax
c01013dc:	66 3d cf 07          	cmp    $0x7cf,%ax
c01013e0:	76 5b                	jbe    c010143d <cga_putc+0x146>
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
c01013e2:	a1 20 f3 14 c0       	mov    0xc014f320,%eax
c01013e7:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
c01013ed:	a1 20 f3 14 c0       	mov    0xc014f320,%eax
c01013f2:	c7 44 24 08 00 0f 00 	movl   $0xf00,0x8(%esp)
c01013f9:	00 
c01013fa:	89 54 24 04          	mov    %edx,0x4(%esp)
c01013fe:	89 04 24             	mov    %eax,(%esp)
c0101401:	e8 7e 41 01 00       	call   c0115584 <memmove>
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0101406:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
c010140d:	eb 15                	jmp    c0101424 <cga_putc+0x12d>
            crt_buf[i] = 0x0700 | ' ';
c010140f:	a1 20 f3 14 c0       	mov    0xc014f320,%eax
c0101414:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101417:	01 d2                	add    %edx,%edx
c0101419:	01 d0                	add    %edx,%eax
c010141b:	66 c7 00 20 07       	movw   $0x720,(%eax)

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0101420:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101424:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
c010142b:	7e e2                	jle    c010140f <cga_putc+0x118>
            crt_buf[i] = 0x0700 | ' ';
        }
        crt_pos -= CRT_COLS;
c010142d:	0f b7 05 24 f3 14 c0 	movzwl 0xc014f324,%eax
c0101434:	83 e8 50             	sub    $0x50,%eax
c0101437:	66 a3 24 f3 14 c0    	mov    %ax,0xc014f324
    }

    // move that little blinky thing
    outb(addr_6845, 14);
c010143d:	0f b7 05 26 f3 14 c0 	movzwl 0xc014f326,%eax
c0101444:	0f b7 c0             	movzwl %ax,%eax
c0101447:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c010144b:	c6 45 f1 0e          	movb   $0xe,-0xf(%ebp)
c010144f:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0101453:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101457:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos >> 8);
c0101458:	0f b7 05 24 f3 14 c0 	movzwl 0xc014f324,%eax
c010145f:	66 c1 e8 08          	shr    $0x8,%ax
c0101463:	0f b6 c0             	movzbl %al,%eax
c0101466:	0f b7 15 26 f3 14 c0 	movzwl 0xc014f326,%edx
c010146d:	83 c2 01             	add    $0x1,%edx
c0101470:	0f b7 d2             	movzwl %dx,%edx
c0101473:	66 89 55 ee          	mov    %dx,-0x12(%ebp)
c0101477:	88 45 ed             	mov    %al,-0x13(%ebp)
c010147a:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c010147e:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101482:	ee                   	out    %al,(%dx)
    outb(addr_6845, 15);
c0101483:	0f b7 05 26 f3 14 c0 	movzwl 0xc014f326,%eax
c010148a:	0f b7 c0             	movzwl %ax,%eax
c010148d:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c0101491:	c6 45 e9 0f          	movb   $0xf,-0x17(%ebp)
c0101495:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101499:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010149d:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos);
c010149e:	0f b7 05 24 f3 14 c0 	movzwl 0xc014f324,%eax
c01014a5:	0f b6 c0             	movzbl %al,%eax
c01014a8:	0f b7 15 26 f3 14 c0 	movzwl 0xc014f326,%edx
c01014af:	83 c2 01             	add    $0x1,%edx
c01014b2:	0f b7 d2             	movzwl %dx,%edx
c01014b5:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c01014b9:	88 45 e5             	mov    %al,-0x1b(%ebp)
c01014bc:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c01014c0:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c01014c4:	ee                   	out    %al,(%dx)
}
c01014c5:	83 c4 34             	add    $0x34,%esp
c01014c8:	5b                   	pop    %ebx
c01014c9:	5d                   	pop    %ebp
c01014ca:	c3                   	ret    

c01014cb <serial_putc_sub>:

static void
serial_putc_sub(int c) {
c01014cb:	55                   	push   %ebp
c01014cc:	89 e5                	mov    %esp,%ebp
c01014ce:	83 ec 10             	sub    $0x10,%esp
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c01014d1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c01014d8:	eb 09                	jmp    c01014e3 <serial_putc_sub+0x18>
        delay();
c01014da:	e8 4f fb ff ff       	call   c010102e <delay>
}

static void
serial_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c01014df:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01014e3:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01014e9:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01014ed:	89 c2                	mov    %eax,%edx
c01014ef:	ec                   	in     (%dx),%al
c01014f0:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c01014f3:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01014f7:	0f b6 c0             	movzbl %al,%eax
c01014fa:	83 e0 20             	and    $0x20,%eax
c01014fd:	85 c0                	test   %eax,%eax
c01014ff:	75 09                	jne    c010150a <serial_putc_sub+0x3f>
c0101501:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c0101508:	7e d0                	jle    c01014da <serial_putc_sub+0xf>
        delay();
    }
    outb(COM1 + COM_TX, c);
c010150a:	8b 45 08             	mov    0x8(%ebp),%eax
c010150d:	0f b6 c0             	movzbl %al,%eax
c0101510:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
c0101516:	88 45 f5             	mov    %al,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101519:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c010151d:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101521:	ee                   	out    %al,(%dx)
}
c0101522:	c9                   	leave  
c0101523:	c3                   	ret    

c0101524 <serial_putc>:

/* serial_putc - print character to serial port */
static void
serial_putc(int c) {
c0101524:	55                   	push   %ebp
c0101525:	89 e5                	mov    %esp,%ebp
c0101527:	83 ec 04             	sub    $0x4,%esp
    if (c != '\b') {
c010152a:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c010152e:	74 0d                	je     c010153d <serial_putc+0x19>
        serial_putc_sub(c);
c0101530:	8b 45 08             	mov    0x8(%ebp),%eax
c0101533:	89 04 24             	mov    %eax,(%esp)
c0101536:	e8 90 ff ff ff       	call   c01014cb <serial_putc_sub>
c010153b:	eb 24                	jmp    c0101561 <serial_putc+0x3d>
    }
    else {
        serial_putc_sub('\b');
c010153d:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c0101544:	e8 82 ff ff ff       	call   c01014cb <serial_putc_sub>
        serial_putc_sub(' ');
c0101549:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c0101550:	e8 76 ff ff ff       	call   c01014cb <serial_putc_sub>
        serial_putc_sub('\b');
c0101555:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c010155c:	e8 6a ff ff ff       	call   c01014cb <serial_putc_sub>
    }
}
c0101561:	c9                   	leave  
c0101562:	c3                   	ret    

c0101563 <cons_intr>:
/* *
 * cons_intr - called by device interrupt routines to feed input
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
c0101563:	55                   	push   %ebp
c0101564:	89 e5                	mov    %esp,%ebp
c0101566:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = (*proc)()) != -1) {
c0101569:	eb 33                	jmp    c010159e <cons_intr+0x3b>
        if (c != 0) {
c010156b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010156f:	74 2d                	je     c010159e <cons_intr+0x3b>
            cons.buf[cons.wpos ++] = c;
c0101571:	a1 44 f5 14 c0       	mov    0xc014f544,%eax
c0101576:	8d 50 01             	lea    0x1(%eax),%edx
c0101579:	89 15 44 f5 14 c0    	mov    %edx,0xc014f544
c010157f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101582:	88 90 40 f3 14 c0    	mov    %dl,-0x3feb0cc0(%eax)
            if (cons.wpos == CONSBUFSIZE) {
c0101588:	a1 44 f5 14 c0       	mov    0xc014f544,%eax
c010158d:	3d 00 02 00 00       	cmp    $0x200,%eax
c0101592:	75 0a                	jne    c010159e <cons_intr+0x3b>
                cons.wpos = 0;
c0101594:	c7 05 44 f5 14 c0 00 	movl   $0x0,0xc014f544
c010159b:	00 00 00 
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
    int c;
    while ((c = (*proc)()) != -1) {
c010159e:	8b 45 08             	mov    0x8(%ebp),%eax
c01015a1:	ff d0                	call   *%eax
c01015a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01015a6:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c01015aa:	75 bf                	jne    c010156b <cons_intr+0x8>
            if (cons.wpos == CONSBUFSIZE) {
                cons.wpos = 0;
            }
        }
    }
}
c01015ac:	c9                   	leave  
c01015ad:	c3                   	ret    

c01015ae <serial_proc_data>:

/* serial_proc_data - get data from serial port */
static int
serial_proc_data(void) {
c01015ae:	55                   	push   %ebp
c01015af:	89 e5                	mov    %esp,%ebp
c01015b1:	83 ec 10             	sub    $0x10,%esp
c01015b4:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01015ba:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01015be:	89 c2                	mov    %eax,%edx
c01015c0:	ec                   	in     (%dx),%al
c01015c1:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c01015c4:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
    if (!(inb(COM1 + COM_LSR) & COM_LSR_DATA)) {
c01015c8:	0f b6 c0             	movzbl %al,%eax
c01015cb:	83 e0 01             	and    $0x1,%eax
c01015ce:	85 c0                	test   %eax,%eax
c01015d0:	75 07                	jne    c01015d9 <serial_proc_data+0x2b>
        return -1;
c01015d2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01015d7:	eb 2a                	jmp    c0101603 <serial_proc_data+0x55>
c01015d9:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01015df:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01015e3:	89 c2                	mov    %eax,%edx
c01015e5:	ec                   	in     (%dx),%al
c01015e6:	88 45 f5             	mov    %al,-0xb(%ebp)
    return data;
c01015e9:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
    }
    int c = inb(COM1 + COM_RX);
c01015ed:	0f b6 c0             	movzbl %al,%eax
c01015f0:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (c == 127) {
c01015f3:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
c01015f7:	75 07                	jne    c0101600 <serial_proc_data+0x52>
        c = '\b';
c01015f9:	c7 45 fc 08 00 00 00 	movl   $0x8,-0x4(%ebp)
    }
    return c;
c0101600:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0101603:	c9                   	leave  
c0101604:	c3                   	ret    

c0101605 <serial_intr>:

/* serial_intr - try to feed input characters from serial port */
void
serial_intr(void) {
c0101605:	55                   	push   %ebp
c0101606:	89 e5                	mov    %esp,%ebp
c0101608:	83 ec 18             	sub    $0x18,%esp
    if (serial_exists) {
c010160b:	a1 28 f3 14 c0       	mov    0xc014f328,%eax
c0101610:	85 c0                	test   %eax,%eax
c0101612:	74 0c                	je     c0101620 <serial_intr+0x1b>
        cons_intr(serial_proc_data);
c0101614:	c7 04 24 ae 15 10 c0 	movl   $0xc01015ae,(%esp)
c010161b:	e8 43 ff ff ff       	call   c0101563 <cons_intr>
    }
}
c0101620:	c9                   	leave  
c0101621:	c3                   	ret    

c0101622 <kbd_proc_data>:
 *
 * The kbd_proc_data() function gets data from the keyboard.
 * If we finish a character, return it, else 0. And return -1 if no data.
 * */
static int
kbd_proc_data(void) {
c0101622:	55                   	push   %ebp
c0101623:	89 e5                	mov    %esp,%ebp
c0101625:	83 ec 38             	sub    $0x38,%esp
c0101628:	66 c7 45 f0 64 00    	movw   $0x64,-0x10(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010162e:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101632:	89 c2                	mov    %eax,%edx
c0101634:	ec                   	in     (%dx),%al
c0101635:	88 45 ef             	mov    %al,-0x11(%ebp)
    return data;
c0101638:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
    int c;
    uint8_t data;
    static uint32_t shift;

    if ((inb(KBSTATP) & KBS_DIB) == 0) {
c010163c:	0f b6 c0             	movzbl %al,%eax
c010163f:	83 e0 01             	and    $0x1,%eax
c0101642:	85 c0                	test   %eax,%eax
c0101644:	75 0a                	jne    c0101650 <kbd_proc_data+0x2e>
        return -1;
c0101646:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010164b:	e9 59 01 00 00       	jmp    c01017a9 <kbd_proc_data+0x187>
c0101650:	66 c7 45 ec 60 00    	movw   $0x60,-0x14(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101656:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c010165a:	89 c2                	mov    %eax,%edx
c010165c:	ec                   	in     (%dx),%al
c010165d:	88 45 eb             	mov    %al,-0x15(%ebp)
    return data;
c0101660:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
    }

    data = inb(KBDATAP);
c0101664:	88 45 f3             	mov    %al,-0xd(%ebp)

    if (data == 0xE0) {
c0101667:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
c010166b:	75 17                	jne    c0101684 <kbd_proc_data+0x62>
        // E0 escape character
        shift |= E0ESC;
c010166d:	a1 48 f5 14 c0       	mov    0xc014f548,%eax
c0101672:	83 c8 40             	or     $0x40,%eax
c0101675:	a3 48 f5 14 c0       	mov    %eax,0xc014f548
        return 0;
c010167a:	b8 00 00 00 00       	mov    $0x0,%eax
c010167f:	e9 25 01 00 00       	jmp    c01017a9 <kbd_proc_data+0x187>
    } else if (data & 0x80) {
c0101684:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101688:	84 c0                	test   %al,%al
c010168a:	79 47                	jns    c01016d3 <kbd_proc_data+0xb1>
        // Key released
        data = (shift & E0ESC ? data : data & 0x7F);
c010168c:	a1 48 f5 14 c0       	mov    0xc014f548,%eax
c0101691:	83 e0 40             	and    $0x40,%eax
c0101694:	85 c0                	test   %eax,%eax
c0101696:	75 09                	jne    c01016a1 <kbd_proc_data+0x7f>
c0101698:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c010169c:	83 e0 7f             	and    $0x7f,%eax
c010169f:	eb 04                	jmp    c01016a5 <kbd_proc_data+0x83>
c01016a1:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01016a5:	88 45 f3             	mov    %al,-0xd(%ebp)
        shift &= ~(shiftcode[data] | E0ESC);
c01016a8:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01016ac:	0f b6 80 60 e0 14 c0 	movzbl -0x3feb1fa0(%eax),%eax
c01016b3:	83 c8 40             	or     $0x40,%eax
c01016b6:	0f b6 c0             	movzbl %al,%eax
c01016b9:	f7 d0                	not    %eax
c01016bb:	89 c2                	mov    %eax,%edx
c01016bd:	a1 48 f5 14 c0       	mov    0xc014f548,%eax
c01016c2:	21 d0                	and    %edx,%eax
c01016c4:	a3 48 f5 14 c0       	mov    %eax,0xc014f548
        return 0;
c01016c9:	b8 00 00 00 00       	mov    $0x0,%eax
c01016ce:	e9 d6 00 00 00       	jmp    c01017a9 <kbd_proc_data+0x187>
    } else if (shift & E0ESC) {
c01016d3:	a1 48 f5 14 c0       	mov    0xc014f548,%eax
c01016d8:	83 e0 40             	and    $0x40,%eax
c01016db:	85 c0                	test   %eax,%eax
c01016dd:	74 11                	je     c01016f0 <kbd_proc_data+0xce>
        // Last character was an E0 escape; or with 0x80
        data |= 0x80;
c01016df:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
        shift &= ~E0ESC;
c01016e3:	a1 48 f5 14 c0       	mov    0xc014f548,%eax
c01016e8:	83 e0 bf             	and    $0xffffffbf,%eax
c01016eb:	a3 48 f5 14 c0       	mov    %eax,0xc014f548
    }

    shift |= shiftcode[data];
c01016f0:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01016f4:	0f b6 80 60 e0 14 c0 	movzbl -0x3feb1fa0(%eax),%eax
c01016fb:	0f b6 d0             	movzbl %al,%edx
c01016fe:	a1 48 f5 14 c0       	mov    0xc014f548,%eax
c0101703:	09 d0                	or     %edx,%eax
c0101705:	a3 48 f5 14 c0       	mov    %eax,0xc014f548
    shift ^= togglecode[data];
c010170a:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c010170e:	0f b6 80 60 e1 14 c0 	movzbl -0x3feb1ea0(%eax),%eax
c0101715:	0f b6 d0             	movzbl %al,%edx
c0101718:	a1 48 f5 14 c0       	mov    0xc014f548,%eax
c010171d:	31 d0                	xor    %edx,%eax
c010171f:	a3 48 f5 14 c0       	mov    %eax,0xc014f548

    c = charcode[shift & (CTL | SHIFT)][data];
c0101724:	a1 48 f5 14 c0       	mov    0xc014f548,%eax
c0101729:	83 e0 03             	and    $0x3,%eax
c010172c:	8b 14 85 60 e5 14 c0 	mov    -0x3feb1aa0(,%eax,4),%edx
c0101733:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101737:	01 d0                	add    %edx,%eax
c0101739:	0f b6 00             	movzbl (%eax),%eax
c010173c:	0f b6 c0             	movzbl %al,%eax
c010173f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (shift & CAPSLOCK) {
c0101742:	a1 48 f5 14 c0       	mov    0xc014f548,%eax
c0101747:	83 e0 08             	and    $0x8,%eax
c010174a:	85 c0                	test   %eax,%eax
c010174c:	74 22                	je     c0101770 <kbd_proc_data+0x14e>
        if ('a' <= c && c <= 'z')
c010174e:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
c0101752:	7e 0c                	jle    c0101760 <kbd_proc_data+0x13e>
c0101754:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
c0101758:	7f 06                	jg     c0101760 <kbd_proc_data+0x13e>
            c += 'A' - 'a';
c010175a:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
c010175e:	eb 10                	jmp    c0101770 <kbd_proc_data+0x14e>
        else if ('A' <= c && c <= 'Z')
c0101760:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
c0101764:	7e 0a                	jle    c0101770 <kbd_proc_data+0x14e>
c0101766:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
c010176a:	7f 04                	jg     c0101770 <kbd_proc_data+0x14e>
            c += 'a' - 'A';
c010176c:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
    }

    // Process special keys
    // Ctrl-Alt-Del: reboot
    if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
c0101770:	a1 48 f5 14 c0       	mov    0xc014f548,%eax
c0101775:	f7 d0                	not    %eax
c0101777:	83 e0 06             	and    $0x6,%eax
c010177a:	85 c0                	test   %eax,%eax
c010177c:	75 28                	jne    c01017a6 <kbd_proc_data+0x184>
c010177e:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
c0101785:	75 1f                	jne    c01017a6 <kbd_proc_data+0x184>
        cprintf("Rebooting!\n");
c0101787:	c7 04 24 fd 59 11 c0 	movl   $0xc01159fd,(%esp)
c010178e:	e8 d2 eb ff ff       	call   c0100365 <cprintf>
c0101793:	66 c7 45 e8 92 00    	movw   $0x92,-0x18(%ebp)
c0101799:	c6 45 e7 03          	movb   $0x3,-0x19(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010179d:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
c01017a1:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c01017a5:	ee                   	out    %al,(%dx)
        outb(0x92, 0x3); // courtesy of Chris Frost
    }
    return c;
c01017a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01017a9:	c9                   	leave  
c01017aa:	c3                   	ret    

c01017ab <kbd_intr>:

/* kbd_intr - try to feed input characters from keyboard */
static void
kbd_intr(void) {
c01017ab:	55                   	push   %ebp
c01017ac:	89 e5                	mov    %esp,%ebp
c01017ae:	83 ec 18             	sub    $0x18,%esp
    cons_intr(kbd_proc_data);
c01017b1:	c7 04 24 22 16 10 c0 	movl   $0xc0101622,(%esp)
c01017b8:	e8 a6 fd ff ff       	call   c0101563 <cons_intr>
}
c01017bd:	c9                   	leave  
c01017be:	c3                   	ret    

c01017bf <kbd_init>:

static void
kbd_init(void) {
c01017bf:	55                   	push   %ebp
c01017c0:	89 e5                	mov    %esp,%ebp
c01017c2:	83 ec 18             	sub    $0x18,%esp
    // drain the kbd buffer
    kbd_intr();
c01017c5:	e8 e1 ff ff ff       	call   c01017ab <kbd_intr>
    pic_enable(IRQ_KBD);
c01017ca:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01017d1:	e8 b2 09 00 00       	call   c0102188 <pic_enable>
}
c01017d6:	c9                   	leave  
c01017d7:	c3                   	ret    

c01017d8 <cons_init>:

/* cons_init - initializes the console devices */
void
cons_init(void) {
c01017d8:	55                   	push   %ebp
c01017d9:	89 e5                	mov    %esp,%ebp
c01017db:	83 ec 18             	sub    $0x18,%esp
    cga_init();
c01017de:	e8 93 f8 ff ff       	call   c0101076 <cga_init>
    serial_init();
c01017e3:	e8 74 f9 ff ff       	call   c010115c <serial_init>
    kbd_init();
c01017e8:	e8 d2 ff ff ff       	call   c01017bf <kbd_init>
    if (!serial_exists) {
c01017ed:	a1 28 f3 14 c0       	mov    0xc014f328,%eax
c01017f2:	85 c0                	test   %eax,%eax
c01017f4:	75 0c                	jne    c0101802 <cons_init+0x2a>
        cprintf("serial port does not exist!!\n");
c01017f6:	c7 04 24 09 5a 11 c0 	movl   $0xc0115a09,(%esp)
c01017fd:	e8 63 eb ff ff       	call   c0100365 <cprintf>
    }
}
c0101802:	c9                   	leave  
c0101803:	c3                   	ret    

c0101804 <cons_putc>:

/* cons_putc - print a single character @c to console devices */
void
cons_putc(int c) {
c0101804:	55                   	push   %ebp
c0101805:	89 e5                	mov    %esp,%ebp
c0101807:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010180a:	e8 e2 f7 ff ff       	call   c0100ff1 <__intr_save>
c010180f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        lpt_putc(c);
c0101812:	8b 45 08             	mov    0x8(%ebp),%eax
c0101815:	89 04 24             	mov    %eax,(%esp)
c0101818:	e8 9b fa ff ff       	call   c01012b8 <lpt_putc>
        cga_putc(c);
c010181d:	8b 45 08             	mov    0x8(%ebp),%eax
c0101820:	89 04 24             	mov    %eax,(%esp)
c0101823:	e8 cf fa ff ff       	call   c01012f7 <cga_putc>
        serial_putc(c);
c0101828:	8b 45 08             	mov    0x8(%ebp),%eax
c010182b:	89 04 24             	mov    %eax,(%esp)
c010182e:	e8 f1 fc ff ff       	call   c0101524 <serial_putc>
    }
    local_intr_restore(intr_flag);
c0101833:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101836:	89 04 24             	mov    %eax,(%esp)
c0101839:	e8 dd f7 ff ff       	call   c010101b <__intr_restore>
}
c010183e:	c9                   	leave  
c010183f:	c3                   	ret    

c0101840 <cons_getc>:
/* *
 * cons_getc - return the next input character from console,
 * or 0 if none waiting.
 * */
int
cons_getc(void) {
c0101840:	55                   	push   %ebp
c0101841:	89 e5                	mov    %esp,%ebp
c0101843:	83 ec 28             	sub    $0x28,%esp
    int c = 0;
c0101846:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c010184d:	e8 9f f7 ff ff       	call   c0100ff1 <__intr_save>
c0101852:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        // poll for any pending input characters,
        // so that this function works even when interrupts are disabled
        // (e.g., when called from the kernel monitor).
        serial_intr();
c0101855:	e8 ab fd ff ff       	call   c0101605 <serial_intr>
        kbd_intr();
c010185a:	e8 4c ff ff ff       	call   c01017ab <kbd_intr>

        // grab the next character from the input buffer.
        if (cons.rpos != cons.wpos) {
c010185f:	8b 15 40 f5 14 c0    	mov    0xc014f540,%edx
c0101865:	a1 44 f5 14 c0       	mov    0xc014f544,%eax
c010186a:	39 c2                	cmp    %eax,%edx
c010186c:	74 31                	je     c010189f <cons_getc+0x5f>
            c = cons.buf[cons.rpos ++];
c010186e:	a1 40 f5 14 c0       	mov    0xc014f540,%eax
c0101873:	8d 50 01             	lea    0x1(%eax),%edx
c0101876:	89 15 40 f5 14 c0    	mov    %edx,0xc014f540
c010187c:	0f b6 80 40 f3 14 c0 	movzbl -0x3feb0cc0(%eax),%eax
c0101883:	0f b6 c0             	movzbl %al,%eax
c0101886:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (cons.rpos == CONSBUFSIZE) {
c0101889:	a1 40 f5 14 c0       	mov    0xc014f540,%eax
c010188e:	3d 00 02 00 00       	cmp    $0x200,%eax
c0101893:	75 0a                	jne    c010189f <cons_getc+0x5f>
                cons.rpos = 0;
c0101895:	c7 05 40 f5 14 c0 00 	movl   $0x0,0xc014f540
c010189c:	00 00 00 
            }
        }
    }
    local_intr_restore(intr_flag);
c010189f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01018a2:	89 04 24             	mov    %eax,(%esp)
c01018a5:	e8 71 f7 ff ff       	call   c010101b <__intr_restore>
    return c;
c01018aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01018ad:	c9                   	leave  
c01018ae:	c3                   	ret    

c01018af <ide_wait_ready>:
    unsigned int size;          // Size in Sectors
    unsigned char model[41];    // Model in String
} ide_devices[MAX_IDE];

static int
ide_wait_ready(unsigned short iobase, bool check_error) {
c01018af:	55                   	push   %ebp
c01018b0:	89 e5                	mov    %esp,%ebp
c01018b2:	83 ec 14             	sub    $0x14,%esp
c01018b5:	8b 45 08             	mov    0x8(%ebp),%eax
c01018b8:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    int r;
    while ((r = inb(iobase + ISA_STATUS)) & IDE_BSY)
c01018bc:	90                   	nop
c01018bd:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c01018c1:	83 c0 07             	add    $0x7,%eax
c01018c4:	0f b7 c0             	movzwl %ax,%eax
c01018c7:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01018cb:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01018cf:	89 c2                	mov    %eax,%edx
c01018d1:	ec                   	in     (%dx),%al
c01018d2:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c01018d5:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01018d9:	0f b6 c0             	movzbl %al,%eax
c01018dc:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01018df:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01018e2:	25 80 00 00 00       	and    $0x80,%eax
c01018e7:	85 c0                	test   %eax,%eax
c01018e9:	75 d2                	jne    c01018bd <ide_wait_ready+0xe>
        /* nothing */;
    if (check_error && (r & (IDE_DF | IDE_ERR)) != 0) {
c01018eb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01018ef:	74 11                	je     c0101902 <ide_wait_ready+0x53>
c01018f1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01018f4:	83 e0 21             	and    $0x21,%eax
c01018f7:	85 c0                	test   %eax,%eax
c01018f9:	74 07                	je     c0101902 <ide_wait_ready+0x53>
        return -1;
c01018fb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101900:	eb 05                	jmp    c0101907 <ide_wait_ready+0x58>
    }
    return 0;
c0101902:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101907:	c9                   	leave  
c0101908:	c3                   	ret    

c0101909 <ide_init>:

void
ide_init(void) {
c0101909:	55                   	push   %ebp
c010190a:	89 e5                	mov    %esp,%ebp
c010190c:	57                   	push   %edi
c010190d:	53                   	push   %ebx
c010190e:	81 ec 50 02 00 00    	sub    $0x250,%esp
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c0101914:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%ebp)
c010191a:	e9 d6 02 00 00       	jmp    c0101bf5 <ide_init+0x2ec>
        /* assume that no device here */
        ide_devices[ideno].valid = 0;
c010191f:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101923:	c1 e0 03             	shl    $0x3,%eax
c0101926:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010192d:	29 c2                	sub    %eax,%edx
c010192f:	8d 82 60 f5 14 c0    	lea    -0x3feb0aa0(%edx),%eax
c0101935:	c6 00 00             	movb   $0x0,(%eax)

        iobase = IO_BASE(ideno);
c0101938:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010193c:	66 d1 e8             	shr    %ax
c010193f:	0f b7 c0             	movzwl %ax,%eax
c0101942:	0f b7 04 85 28 5a 11 	movzwl -0x3feea5d8(,%eax,4),%eax
c0101949:	c0 
c010194a:	66 89 45 ea          	mov    %ax,-0x16(%ebp)

        /* wait device ready */
        ide_wait_ready(iobase, 0);
c010194e:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101952:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101959:	00 
c010195a:	89 04 24             	mov    %eax,(%esp)
c010195d:	e8 4d ff ff ff       	call   c01018af <ide_wait_ready>

        /* step1: select drive */
        outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4));
c0101962:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101966:	83 e0 01             	and    $0x1,%eax
c0101969:	c1 e0 04             	shl    $0x4,%eax
c010196c:	83 c8 e0             	or     $0xffffffe0,%eax
c010196f:	0f b6 c0             	movzbl %al,%eax
c0101972:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101976:	83 c2 06             	add    $0x6,%edx
c0101979:	0f b7 d2             	movzwl %dx,%edx
c010197c:	66 89 55 d2          	mov    %dx,-0x2e(%ebp)
c0101980:	88 45 d1             	mov    %al,-0x2f(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101983:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c0101987:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c010198b:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c010198c:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101990:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101997:	00 
c0101998:	89 04 24             	mov    %eax,(%esp)
c010199b:	e8 0f ff ff ff       	call   c01018af <ide_wait_ready>

        /* step2: send ATA identify command */
        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
c01019a0:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01019a4:	83 c0 07             	add    $0x7,%eax
c01019a7:	0f b7 c0             	movzwl %ax,%eax
c01019aa:	66 89 45 ce          	mov    %ax,-0x32(%ebp)
c01019ae:	c6 45 cd ec          	movb   $0xec,-0x33(%ebp)
c01019b2:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
c01019b6:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
c01019ba:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c01019bb:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01019bf:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01019c6:	00 
c01019c7:	89 04 24             	mov    %eax,(%esp)
c01019ca:	e8 e0 fe ff ff       	call   c01018af <ide_wait_ready>

        /* step3: polling */
        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
c01019cf:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01019d3:	83 c0 07             	add    $0x7,%eax
c01019d6:	0f b7 c0             	movzwl %ax,%eax
c01019d9:	66 89 45 ca          	mov    %ax,-0x36(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01019dd:	0f b7 45 ca          	movzwl -0x36(%ebp),%eax
c01019e1:	89 c2                	mov    %eax,%edx
c01019e3:	ec                   	in     (%dx),%al
c01019e4:	88 45 c9             	mov    %al,-0x37(%ebp)
    return data;
c01019e7:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c01019eb:	84 c0                	test   %al,%al
c01019ed:	0f 84 f7 01 00 00    	je     c0101bea <ide_init+0x2e1>
c01019f3:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01019f7:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01019fe:	00 
c01019ff:	89 04 24             	mov    %eax,(%esp)
c0101a02:	e8 a8 fe ff ff       	call   c01018af <ide_wait_ready>
c0101a07:	85 c0                	test   %eax,%eax
c0101a09:	0f 85 db 01 00 00    	jne    c0101bea <ide_init+0x2e1>
            continue ;
        }

        /* device is ok */
        ide_devices[ideno].valid = 1;
c0101a0f:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101a13:	c1 e0 03             	shl    $0x3,%eax
c0101a16:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101a1d:	29 c2                	sub    %eax,%edx
c0101a1f:	8d 82 60 f5 14 c0    	lea    -0x3feb0aa0(%edx),%eax
c0101a25:	c6 00 01             	movb   $0x1,(%eax)

        /* read identification space of the device */
        unsigned int buffer[128];
        insl(iobase + ISA_DATA, buffer, sizeof(buffer) / sizeof(unsigned int));
c0101a28:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101a2c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0101a2f:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c0101a35:	89 45 c0             	mov    %eax,-0x40(%ebp)
c0101a38:	c7 45 bc 80 00 00 00 	movl   $0x80,-0x44(%ebp)
    return data;
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0101a3f:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0101a42:	8b 4d c0             	mov    -0x40(%ebp),%ecx
c0101a45:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0101a48:	89 cb                	mov    %ecx,%ebx
c0101a4a:	89 df                	mov    %ebx,%edi
c0101a4c:	89 c1                	mov    %eax,%ecx
c0101a4e:	fc                   	cld    
c0101a4f:	f2 6d                	repnz insl (%dx),%es:(%edi)
c0101a51:	89 c8                	mov    %ecx,%eax
c0101a53:	89 fb                	mov    %edi,%ebx
c0101a55:	89 5d c0             	mov    %ebx,-0x40(%ebp)
c0101a58:	89 45 bc             	mov    %eax,-0x44(%ebp)

        unsigned char *ident = (unsigned char *)buffer;
c0101a5b:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c0101a61:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        unsigned int sectors;
        unsigned int cmdsets = *(unsigned int *)(ident + IDE_IDENT_CMDSETS);
c0101a64:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101a67:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
c0101a6d:	89 45 e0             	mov    %eax,-0x20(%ebp)
        /* device use 48-bits or 28-bits addressing */
        if (cmdsets & (1 << 26)) {
c0101a70:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0101a73:	25 00 00 00 04       	and    $0x4000000,%eax
c0101a78:	85 c0                	test   %eax,%eax
c0101a7a:	74 0e                	je     c0101a8a <ide_init+0x181>
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA_EXT);
c0101a7c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101a7f:	8b 80 c8 00 00 00    	mov    0xc8(%eax),%eax
c0101a85:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0101a88:	eb 09                	jmp    c0101a93 <ide_init+0x18a>
        }
        else {
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA);
c0101a8a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101a8d:	8b 40 78             	mov    0x78(%eax),%eax
c0101a90:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
        ide_devices[ideno].sets = cmdsets;
c0101a93:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101a97:	c1 e0 03             	shl    $0x3,%eax
c0101a9a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101aa1:	29 c2                	sub    %eax,%edx
c0101aa3:	81 c2 60 f5 14 c0    	add    $0xc014f560,%edx
c0101aa9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0101aac:	89 42 04             	mov    %eax,0x4(%edx)
        ide_devices[ideno].size = sectors;
c0101aaf:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101ab3:	c1 e0 03             	shl    $0x3,%eax
c0101ab6:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101abd:	29 c2                	sub    %eax,%edx
c0101abf:	81 c2 60 f5 14 c0    	add    $0xc014f560,%edx
c0101ac5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101ac8:	89 42 08             	mov    %eax,0x8(%edx)

        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);
c0101acb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101ace:	83 c0 62             	add    $0x62,%eax
c0101ad1:	0f b7 00             	movzwl (%eax),%eax
c0101ad4:	0f b7 c0             	movzwl %ax,%eax
c0101ad7:	25 00 02 00 00       	and    $0x200,%eax
c0101adc:	85 c0                	test   %eax,%eax
c0101ade:	75 24                	jne    c0101b04 <ide_init+0x1fb>
c0101ae0:	c7 44 24 0c 30 5a 11 	movl   $0xc0115a30,0xc(%esp)
c0101ae7:	c0 
c0101ae8:	c7 44 24 08 73 5a 11 	movl   $0xc0115a73,0x8(%esp)
c0101aef:	c0 
c0101af0:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
c0101af7:	00 
c0101af8:	c7 04 24 88 5a 11 c0 	movl   $0xc0115a88,(%esp)
c0101aff:	e8 c4 f3 ff ff       	call   c0100ec8 <__panic>

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
c0101b04:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101b08:	c1 e0 03             	shl    $0x3,%eax
c0101b0b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101b12:	29 c2                	sub    %eax,%edx
c0101b14:	8d 82 60 f5 14 c0    	lea    -0x3feb0aa0(%edx),%eax
c0101b1a:	83 c0 0c             	add    $0xc,%eax
c0101b1d:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0101b20:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101b23:	83 c0 36             	add    $0x36,%eax
c0101b26:	89 45 d8             	mov    %eax,-0x28(%ebp)
        unsigned int i, length = 40;
c0101b29:	c7 45 d4 28 00 00 00 	movl   $0x28,-0x2c(%ebp)
        for (i = 0; i < length; i += 2) {
c0101b30:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0101b37:	eb 34                	jmp    c0101b6d <ide_init+0x264>
            model[i] = data[i + 1], model[i + 1] = data[i];
c0101b39:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b3c:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101b3f:	01 c2                	add    %eax,%edx
c0101b41:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b44:	8d 48 01             	lea    0x1(%eax),%ecx
c0101b47:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0101b4a:	01 c8                	add    %ecx,%eax
c0101b4c:	0f b6 00             	movzbl (%eax),%eax
c0101b4f:	88 02                	mov    %al,(%edx)
c0101b51:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b54:	8d 50 01             	lea    0x1(%eax),%edx
c0101b57:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101b5a:	01 c2                	add    %eax,%edx
c0101b5c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b5f:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c0101b62:	01 c8                	add    %ecx,%eax
c0101b64:	0f b6 00             	movzbl (%eax),%eax
c0101b67:	88 02                	mov    %al,(%edx)
        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
        unsigned int i, length = 40;
        for (i = 0; i < length; i += 2) {
c0101b69:	83 45 ec 02          	addl   $0x2,-0x14(%ebp)
c0101b6d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b70:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0101b73:	72 c4                	jb     c0101b39 <ide_init+0x230>
            model[i] = data[i + 1], model[i + 1] = data[i];
        }
        do {
            model[i] = '\0';
c0101b75:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b78:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101b7b:	01 d0                	add    %edx,%eax
c0101b7d:	c6 00 00             	movb   $0x0,(%eax)
        } while (i -- > 0 && model[i] == ' ');
c0101b80:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b83:	8d 50 ff             	lea    -0x1(%eax),%edx
c0101b86:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0101b89:	85 c0                	test   %eax,%eax
c0101b8b:	74 0f                	je     c0101b9c <ide_init+0x293>
c0101b8d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b90:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101b93:	01 d0                	add    %edx,%eax
c0101b95:	0f b6 00             	movzbl (%eax),%eax
c0101b98:	3c 20                	cmp    $0x20,%al
c0101b9a:	74 d9                	je     c0101b75 <ide_init+0x26c>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
c0101b9c:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101ba0:	c1 e0 03             	shl    $0x3,%eax
c0101ba3:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101baa:	29 c2                	sub    %eax,%edx
c0101bac:	8d 82 60 f5 14 c0    	lea    -0x3feb0aa0(%edx),%eax
c0101bb2:	8d 48 0c             	lea    0xc(%eax),%ecx
c0101bb5:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101bb9:	c1 e0 03             	shl    $0x3,%eax
c0101bbc:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101bc3:	29 c2                	sub    %eax,%edx
c0101bc5:	8d 82 60 f5 14 c0    	lea    -0x3feb0aa0(%edx),%eax
c0101bcb:	8b 50 08             	mov    0x8(%eax),%edx
c0101bce:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101bd2:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0101bd6:	89 54 24 08          	mov    %edx,0x8(%esp)
c0101bda:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101bde:	c7 04 24 9a 5a 11 c0 	movl   $0xc0115a9a,(%esp)
c0101be5:	e8 7b e7 ff ff       	call   c0100365 <cprintf>

void
ide_init(void) {
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c0101bea:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101bee:	83 c0 01             	add    $0x1,%eax
c0101bf1:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
c0101bf5:	66 83 7d f6 03       	cmpw   $0x3,-0xa(%ebp)
c0101bfa:	0f 86 1f fd ff ff    	jbe    c010191f <ide_init+0x16>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
    }

    // enable ide interrupt
    pic_enable(IRQ_IDE1);
c0101c00:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
c0101c07:	e8 7c 05 00 00       	call   c0102188 <pic_enable>
    pic_enable(IRQ_IDE2);
c0101c0c:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
c0101c13:	e8 70 05 00 00       	call   c0102188 <pic_enable>
}
c0101c18:	81 c4 50 02 00 00    	add    $0x250,%esp
c0101c1e:	5b                   	pop    %ebx
c0101c1f:	5f                   	pop    %edi
c0101c20:	5d                   	pop    %ebp
c0101c21:	c3                   	ret    

c0101c22 <ide_device_valid>:

bool
ide_device_valid(unsigned short ideno) {
c0101c22:	55                   	push   %ebp
c0101c23:	89 e5                	mov    %esp,%ebp
c0101c25:	83 ec 04             	sub    $0x4,%esp
c0101c28:	8b 45 08             	mov    0x8(%ebp),%eax
c0101c2b:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return VALID_IDE(ideno);
c0101c2f:	66 83 7d fc 03       	cmpw   $0x3,-0x4(%ebp)
c0101c34:	77 24                	ja     c0101c5a <ide_device_valid+0x38>
c0101c36:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101c3a:	c1 e0 03             	shl    $0x3,%eax
c0101c3d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101c44:	29 c2                	sub    %eax,%edx
c0101c46:	8d 82 60 f5 14 c0    	lea    -0x3feb0aa0(%edx),%eax
c0101c4c:	0f b6 00             	movzbl (%eax),%eax
c0101c4f:	84 c0                	test   %al,%al
c0101c51:	74 07                	je     c0101c5a <ide_device_valid+0x38>
c0101c53:	b8 01 00 00 00       	mov    $0x1,%eax
c0101c58:	eb 05                	jmp    c0101c5f <ide_device_valid+0x3d>
c0101c5a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101c5f:	c9                   	leave  
c0101c60:	c3                   	ret    

c0101c61 <ide_device_size>:

size_t
ide_device_size(unsigned short ideno) {
c0101c61:	55                   	push   %ebp
c0101c62:	89 e5                	mov    %esp,%ebp
c0101c64:	83 ec 08             	sub    $0x8,%esp
c0101c67:	8b 45 08             	mov    0x8(%ebp),%eax
c0101c6a:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    if (ide_device_valid(ideno)) {
c0101c6e:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101c72:	89 04 24             	mov    %eax,(%esp)
c0101c75:	e8 a8 ff ff ff       	call   c0101c22 <ide_device_valid>
c0101c7a:	85 c0                	test   %eax,%eax
c0101c7c:	74 1b                	je     c0101c99 <ide_device_size+0x38>
        return ide_devices[ideno].size;
c0101c7e:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101c82:	c1 e0 03             	shl    $0x3,%eax
c0101c85:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101c8c:	29 c2                	sub    %eax,%edx
c0101c8e:	8d 82 60 f5 14 c0    	lea    -0x3feb0aa0(%edx),%eax
c0101c94:	8b 40 08             	mov    0x8(%eax),%eax
c0101c97:	eb 05                	jmp    c0101c9e <ide_device_size+0x3d>
    }
    return 0;
c0101c99:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101c9e:	c9                   	leave  
c0101c9f:	c3                   	ret    

c0101ca0 <ide_read_secs>:

int
ide_read_secs(unsigned short ideno, uint32_t secno, void *dst, size_t nsecs) {
c0101ca0:	55                   	push   %ebp
c0101ca1:	89 e5                	mov    %esp,%ebp
c0101ca3:	57                   	push   %edi
c0101ca4:	53                   	push   %ebx
c0101ca5:	83 ec 50             	sub    $0x50,%esp
c0101ca8:	8b 45 08             	mov    0x8(%ebp),%eax
c0101cab:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101caf:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0101cb6:	77 24                	ja     c0101cdc <ide_read_secs+0x3c>
c0101cb8:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c0101cbd:	77 1d                	ja     c0101cdc <ide_read_secs+0x3c>
c0101cbf:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101cc3:	c1 e0 03             	shl    $0x3,%eax
c0101cc6:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101ccd:	29 c2                	sub    %eax,%edx
c0101ccf:	8d 82 60 f5 14 c0    	lea    -0x3feb0aa0(%edx),%eax
c0101cd5:	0f b6 00             	movzbl (%eax),%eax
c0101cd8:	84 c0                	test   %al,%al
c0101cda:	75 24                	jne    c0101d00 <ide_read_secs+0x60>
c0101cdc:	c7 44 24 0c b8 5a 11 	movl   $0xc0115ab8,0xc(%esp)
c0101ce3:	c0 
c0101ce4:	c7 44 24 08 73 5a 11 	movl   $0xc0115a73,0x8(%esp)
c0101ceb:	c0 
c0101cec:	c7 44 24 04 9f 00 00 	movl   $0x9f,0x4(%esp)
c0101cf3:	00 
c0101cf4:	c7 04 24 88 5a 11 c0 	movl   $0xc0115a88,(%esp)
c0101cfb:	e8 c8 f1 ff ff       	call   c0100ec8 <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c0101d00:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c0101d07:	77 0f                	ja     c0101d18 <ide_read_secs+0x78>
c0101d09:	8b 45 14             	mov    0x14(%ebp),%eax
c0101d0c:	8b 55 0c             	mov    0xc(%ebp),%edx
c0101d0f:	01 d0                	add    %edx,%eax
c0101d11:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c0101d16:	76 24                	jbe    c0101d3c <ide_read_secs+0x9c>
c0101d18:	c7 44 24 0c e0 5a 11 	movl   $0xc0115ae0,0xc(%esp)
c0101d1f:	c0 
c0101d20:	c7 44 24 08 73 5a 11 	movl   $0xc0115a73,0x8(%esp)
c0101d27:	c0 
c0101d28:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c0101d2f:	00 
c0101d30:	c7 04 24 88 5a 11 c0 	movl   $0xc0115a88,(%esp)
c0101d37:	e8 8c f1 ff ff       	call   c0100ec8 <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c0101d3c:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101d40:	66 d1 e8             	shr    %ax
c0101d43:	0f b7 c0             	movzwl %ax,%eax
c0101d46:	0f b7 04 85 28 5a 11 	movzwl -0x3feea5d8(,%eax,4),%eax
c0101d4d:	c0 
c0101d4e:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101d52:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101d56:	66 d1 e8             	shr    %ax
c0101d59:	0f b7 c0             	movzwl %ax,%eax
c0101d5c:	0f b7 04 85 2a 5a 11 	movzwl -0x3feea5d6(,%eax,4),%eax
c0101d63:	c0 
c0101d64:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c0101d68:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101d6c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101d73:	00 
c0101d74:	89 04 24             	mov    %eax,(%esp)
c0101d77:	e8 33 fb ff ff       	call   c01018af <ide_wait_ready>

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0101d7c:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101d80:	83 c0 02             	add    $0x2,%eax
c0101d83:	0f b7 c0             	movzwl %ax,%eax
c0101d86:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0101d8a:	c6 45 ed 00          	movb   $0x0,-0x13(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101d8e:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101d92:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101d96:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0101d97:	8b 45 14             	mov    0x14(%ebp),%eax
c0101d9a:	0f b6 c0             	movzbl %al,%eax
c0101d9d:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101da1:	83 c2 02             	add    $0x2,%edx
c0101da4:	0f b7 d2             	movzwl %dx,%edx
c0101da7:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0101dab:	88 45 e9             	mov    %al,-0x17(%ebp)
c0101dae:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101db2:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101db6:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0101db7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101dba:	0f b6 c0             	movzbl %al,%eax
c0101dbd:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101dc1:	83 c2 03             	add    $0x3,%edx
c0101dc4:	0f b7 d2             	movzwl %dx,%edx
c0101dc7:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0101dcb:	88 45 e5             	mov    %al,-0x1b(%ebp)
c0101dce:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0101dd2:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0101dd6:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c0101dd7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101dda:	c1 e8 08             	shr    $0x8,%eax
c0101ddd:	0f b6 c0             	movzbl %al,%eax
c0101de0:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101de4:	83 c2 04             	add    $0x4,%edx
c0101de7:	0f b7 d2             	movzwl %dx,%edx
c0101dea:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c0101dee:	88 45 e1             	mov    %al,-0x1f(%ebp)
c0101df1:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0101df5:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101df9:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c0101dfa:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101dfd:	c1 e8 10             	shr    $0x10,%eax
c0101e00:	0f b6 c0             	movzbl %al,%eax
c0101e03:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101e07:	83 c2 05             	add    $0x5,%edx
c0101e0a:	0f b7 d2             	movzwl %dx,%edx
c0101e0d:	66 89 55 de          	mov    %dx,-0x22(%ebp)
c0101e11:	88 45 dd             	mov    %al,-0x23(%ebp)
c0101e14:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0101e18:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0101e1c:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c0101e1d:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101e21:	83 e0 01             	and    $0x1,%eax
c0101e24:	c1 e0 04             	shl    $0x4,%eax
c0101e27:	89 c2                	mov    %eax,%edx
c0101e29:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101e2c:	c1 e8 18             	shr    $0x18,%eax
c0101e2f:	83 e0 0f             	and    $0xf,%eax
c0101e32:	09 d0                	or     %edx,%eax
c0101e34:	83 c8 e0             	or     $0xffffffe0,%eax
c0101e37:	0f b6 c0             	movzbl %al,%eax
c0101e3a:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101e3e:	83 c2 06             	add    $0x6,%edx
c0101e41:	0f b7 d2             	movzwl %dx,%edx
c0101e44:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c0101e48:	88 45 d9             	mov    %al,-0x27(%ebp)
c0101e4b:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0101e4f:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0101e53:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);
c0101e54:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101e58:	83 c0 07             	add    $0x7,%eax
c0101e5b:	0f b7 c0             	movzwl %ax,%eax
c0101e5e:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
c0101e62:	c6 45 d5 20          	movb   $0x20,-0x2b(%ebp)
c0101e66:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c0101e6a:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c0101e6e:	ee                   	out    %al,(%dx)

    int ret = 0;
c0101e6f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101e76:	eb 5a                	jmp    c0101ed2 <ide_read_secs+0x232>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c0101e78:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101e7c:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0101e83:	00 
c0101e84:	89 04 24             	mov    %eax,(%esp)
c0101e87:	e8 23 fa ff ff       	call   c01018af <ide_wait_ready>
c0101e8c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101e8f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101e93:	74 02                	je     c0101e97 <ide_read_secs+0x1f7>
            goto out;
c0101e95:	eb 41                	jmp    c0101ed8 <ide_read_secs+0x238>
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
c0101e97:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101e9b:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0101e9e:	8b 45 10             	mov    0x10(%ebp),%eax
c0101ea1:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0101ea4:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
    return data;
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0101eab:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0101eae:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c0101eb1:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0101eb4:	89 cb                	mov    %ecx,%ebx
c0101eb6:	89 df                	mov    %ebx,%edi
c0101eb8:	89 c1                	mov    %eax,%ecx
c0101eba:	fc                   	cld    
c0101ebb:	f2 6d                	repnz insl (%dx),%es:(%edi)
c0101ebd:	89 c8                	mov    %ecx,%eax
c0101ebf:	89 fb                	mov    %edi,%ebx
c0101ec1:	89 5d cc             	mov    %ebx,-0x34(%ebp)
c0101ec4:	89 45 c8             	mov    %eax,-0x38(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);

    int ret = 0;
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101ec7:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0101ecb:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c0101ed2:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0101ed6:	75 a0                	jne    c0101e78 <ide_read_secs+0x1d8>
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c0101ed8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101edb:	83 c4 50             	add    $0x50,%esp
c0101ede:	5b                   	pop    %ebx
c0101edf:	5f                   	pop    %edi
c0101ee0:	5d                   	pop    %ebp
c0101ee1:	c3                   	ret    

c0101ee2 <ide_write_secs>:

int
ide_write_secs(unsigned short ideno, uint32_t secno, const void *src, size_t nsecs) {
c0101ee2:	55                   	push   %ebp
c0101ee3:	89 e5                	mov    %esp,%ebp
c0101ee5:	56                   	push   %esi
c0101ee6:	53                   	push   %ebx
c0101ee7:	83 ec 50             	sub    $0x50,%esp
c0101eea:	8b 45 08             	mov    0x8(%ebp),%eax
c0101eed:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101ef1:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0101ef8:	77 24                	ja     c0101f1e <ide_write_secs+0x3c>
c0101efa:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c0101eff:	77 1d                	ja     c0101f1e <ide_write_secs+0x3c>
c0101f01:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101f05:	c1 e0 03             	shl    $0x3,%eax
c0101f08:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101f0f:	29 c2                	sub    %eax,%edx
c0101f11:	8d 82 60 f5 14 c0    	lea    -0x3feb0aa0(%edx),%eax
c0101f17:	0f b6 00             	movzbl (%eax),%eax
c0101f1a:	84 c0                	test   %al,%al
c0101f1c:	75 24                	jne    c0101f42 <ide_write_secs+0x60>
c0101f1e:	c7 44 24 0c b8 5a 11 	movl   $0xc0115ab8,0xc(%esp)
c0101f25:	c0 
c0101f26:	c7 44 24 08 73 5a 11 	movl   $0xc0115a73,0x8(%esp)
c0101f2d:	c0 
c0101f2e:	c7 44 24 04 bc 00 00 	movl   $0xbc,0x4(%esp)
c0101f35:	00 
c0101f36:	c7 04 24 88 5a 11 c0 	movl   $0xc0115a88,(%esp)
c0101f3d:	e8 86 ef ff ff       	call   c0100ec8 <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c0101f42:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c0101f49:	77 0f                	ja     c0101f5a <ide_write_secs+0x78>
c0101f4b:	8b 45 14             	mov    0x14(%ebp),%eax
c0101f4e:	8b 55 0c             	mov    0xc(%ebp),%edx
c0101f51:	01 d0                	add    %edx,%eax
c0101f53:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c0101f58:	76 24                	jbe    c0101f7e <ide_write_secs+0x9c>
c0101f5a:	c7 44 24 0c e0 5a 11 	movl   $0xc0115ae0,0xc(%esp)
c0101f61:	c0 
c0101f62:	c7 44 24 08 73 5a 11 	movl   $0xc0115a73,0x8(%esp)
c0101f69:	c0 
c0101f6a:	c7 44 24 04 bd 00 00 	movl   $0xbd,0x4(%esp)
c0101f71:	00 
c0101f72:	c7 04 24 88 5a 11 c0 	movl   $0xc0115a88,(%esp)
c0101f79:	e8 4a ef ff ff       	call   c0100ec8 <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c0101f7e:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101f82:	66 d1 e8             	shr    %ax
c0101f85:	0f b7 c0             	movzwl %ax,%eax
c0101f88:	0f b7 04 85 28 5a 11 	movzwl -0x3feea5d8(,%eax,4),%eax
c0101f8f:	c0 
c0101f90:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101f94:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101f98:	66 d1 e8             	shr    %ax
c0101f9b:	0f b7 c0             	movzwl %ax,%eax
c0101f9e:	0f b7 04 85 2a 5a 11 	movzwl -0x3feea5d6(,%eax,4),%eax
c0101fa5:	c0 
c0101fa6:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c0101faa:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101fae:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101fb5:	00 
c0101fb6:	89 04 24             	mov    %eax,(%esp)
c0101fb9:	e8 f1 f8 ff ff       	call   c01018af <ide_wait_ready>

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0101fbe:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101fc2:	83 c0 02             	add    $0x2,%eax
c0101fc5:	0f b7 c0             	movzwl %ax,%eax
c0101fc8:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0101fcc:	c6 45 ed 00          	movb   $0x0,-0x13(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101fd0:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101fd4:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101fd8:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0101fd9:	8b 45 14             	mov    0x14(%ebp),%eax
c0101fdc:	0f b6 c0             	movzbl %al,%eax
c0101fdf:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101fe3:	83 c2 02             	add    $0x2,%edx
c0101fe6:	0f b7 d2             	movzwl %dx,%edx
c0101fe9:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0101fed:	88 45 e9             	mov    %al,-0x17(%ebp)
c0101ff0:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101ff4:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101ff8:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0101ff9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101ffc:	0f b6 c0             	movzbl %al,%eax
c0101fff:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102003:	83 c2 03             	add    $0x3,%edx
c0102006:	0f b7 d2             	movzwl %dx,%edx
c0102009:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c010200d:	88 45 e5             	mov    %al,-0x1b(%ebp)
c0102010:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0102014:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0102018:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c0102019:	8b 45 0c             	mov    0xc(%ebp),%eax
c010201c:	c1 e8 08             	shr    $0x8,%eax
c010201f:	0f b6 c0             	movzbl %al,%eax
c0102022:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102026:	83 c2 04             	add    $0x4,%edx
c0102029:	0f b7 d2             	movzwl %dx,%edx
c010202c:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c0102030:	88 45 e1             	mov    %al,-0x1f(%ebp)
c0102033:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0102037:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c010203b:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c010203c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010203f:	c1 e8 10             	shr    $0x10,%eax
c0102042:	0f b6 c0             	movzbl %al,%eax
c0102045:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102049:	83 c2 05             	add    $0x5,%edx
c010204c:	0f b7 d2             	movzwl %dx,%edx
c010204f:	66 89 55 de          	mov    %dx,-0x22(%ebp)
c0102053:	88 45 dd             	mov    %al,-0x23(%ebp)
c0102056:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c010205a:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c010205e:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c010205f:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0102063:	83 e0 01             	and    $0x1,%eax
c0102066:	c1 e0 04             	shl    $0x4,%eax
c0102069:	89 c2                	mov    %eax,%edx
c010206b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010206e:	c1 e8 18             	shr    $0x18,%eax
c0102071:	83 e0 0f             	and    $0xf,%eax
c0102074:	09 d0                	or     %edx,%eax
c0102076:	83 c8 e0             	or     $0xffffffe0,%eax
c0102079:	0f b6 c0             	movzbl %al,%eax
c010207c:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102080:	83 c2 06             	add    $0x6,%edx
c0102083:	0f b7 d2             	movzwl %dx,%edx
c0102086:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c010208a:	88 45 d9             	mov    %al,-0x27(%ebp)
c010208d:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0102091:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0102095:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);
c0102096:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c010209a:	83 c0 07             	add    $0x7,%eax
c010209d:	0f b7 c0             	movzwl %ax,%eax
c01020a0:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
c01020a4:	c6 45 d5 30          	movb   $0x30,-0x2b(%ebp)
c01020a8:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c01020ac:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c01020b0:	ee                   	out    %al,(%dx)

    int ret = 0;
c01020b1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c01020b8:	eb 5a                	jmp    c0102114 <ide_write_secs+0x232>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c01020ba:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01020be:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01020c5:	00 
c01020c6:	89 04 24             	mov    %eax,(%esp)
c01020c9:	e8 e1 f7 ff ff       	call   c01018af <ide_wait_ready>
c01020ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01020d1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01020d5:	74 02                	je     c01020d9 <ide_write_secs+0x1f7>
            goto out;
c01020d7:	eb 41                	jmp    c010211a <ide_write_secs+0x238>
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
c01020d9:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01020dd:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01020e0:	8b 45 10             	mov    0x10(%ebp),%eax
c01020e3:	89 45 cc             	mov    %eax,-0x34(%ebp)
c01020e6:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
    asm volatile ("outw %0, %1" :: "a" (data), "d" (port) : "memory");
}

static inline void
outsl(uint32_t port, const void *addr, int cnt) {
    asm volatile (
c01020ed:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01020f0:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c01020f3:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01020f6:	89 cb                	mov    %ecx,%ebx
c01020f8:	89 de                	mov    %ebx,%esi
c01020fa:	89 c1                	mov    %eax,%ecx
c01020fc:	fc                   	cld    
c01020fd:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
c01020ff:	89 c8                	mov    %ecx,%eax
c0102101:	89 f3                	mov    %esi,%ebx
c0102103:	89 5d cc             	mov    %ebx,-0x34(%ebp)
c0102106:	89 45 c8             	mov    %eax,-0x38(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);

    int ret = 0;
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c0102109:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c010210d:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c0102114:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0102118:	75 a0                	jne    c01020ba <ide_write_secs+0x1d8>
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c010211a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010211d:	83 c4 50             	add    $0x50,%esp
c0102120:	5b                   	pop    %ebx
c0102121:	5e                   	pop    %esi
c0102122:	5d                   	pop    %ebp
c0102123:	c3                   	ret    

c0102124 <intr_enable>:
#include <x86.h>
#include <intr.h>

/* intr_enable - enable irq interrupt */
void
intr_enable(void) {
c0102124:	55                   	push   %ebp
c0102125:	89 e5                	mov    %esp,%ebp
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
}

static inline void
sti(void) {
    asm volatile ("sti");
c0102127:	fb                   	sti    
    sti();
}
c0102128:	5d                   	pop    %ebp
c0102129:	c3                   	ret    

c010212a <intr_disable>:

/* intr_disable - disable irq interrupt */
void
intr_disable(void) {
c010212a:	55                   	push   %ebp
c010212b:	89 e5                	mov    %esp,%ebp
}

static inline void
cli(void) {
    asm volatile ("cli" ::: "memory");
c010212d:	fa                   	cli    
    cli();
}
c010212e:	5d                   	pop    %ebp
c010212f:	c3                   	ret    

c0102130 <pic_setmask>:
// Initial IRQ mask has interrupt 2 enabled (for slave 8259A).
static uint16_t irq_mask = 0xFFFF & ~(1 << IRQ_SLAVE);
static bool did_init = 0;

static void
pic_setmask(uint16_t mask) {
c0102130:	55                   	push   %ebp
c0102131:	89 e5                	mov    %esp,%ebp
c0102133:	83 ec 14             	sub    $0x14,%esp
c0102136:	8b 45 08             	mov    0x8(%ebp),%eax
c0102139:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    irq_mask = mask;
c010213d:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102141:	66 a3 70 e5 14 c0    	mov    %ax,0xc014e570
    if (did_init) {
c0102147:	a1 40 f6 14 c0       	mov    0xc014f640,%eax
c010214c:	85 c0                	test   %eax,%eax
c010214e:	74 36                	je     c0102186 <pic_setmask+0x56>
        outb(IO_PIC1 + 1, mask);
c0102150:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102154:	0f b6 c0             	movzbl %al,%eax
c0102157:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c010215d:	88 45 fd             	mov    %al,-0x3(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102160:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
c0102164:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c0102168:	ee                   	out    %al,(%dx)
        outb(IO_PIC2 + 1, mask >> 8);
c0102169:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c010216d:	66 c1 e8 08          	shr    $0x8,%ax
c0102171:	0f b6 c0             	movzbl %al,%eax
c0102174:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
c010217a:	88 45 f9             	mov    %al,-0x7(%ebp)
c010217d:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c0102181:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0102185:	ee                   	out    %al,(%dx)
    }
}
c0102186:	c9                   	leave  
c0102187:	c3                   	ret    

c0102188 <pic_enable>:

void
pic_enable(unsigned int irq) {
c0102188:	55                   	push   %ebp
c0102189:	89 e5                	mov    %esp,%ebp
c010218b:	83 ec 04             	sub    $0x4,%esp
    pic_setmask(irq_mask & ~(1 << irq));
c010218e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102191:	ba 01 00 00 00       	mov    $0x1,%edx
c0102196:	89 c1                	mov    %eax,%ecx
c0102198:	d3 e2                	shl    %cl,%edx
c010219a:	89 d0                	mov    %edx,%eax
c010219c:	f7 d0                	not    %eax
c010219e:	89 c2                	mov    %eax,%edx
c01021a0:	0f b7 05 70 e5 14 c0 	movzwl 0xc014e570,%eax
c01021a7:	21 d0                	and    %edx,%eax
c01021a9:	0f b7 c0             	movzwl %ax,%eax
c01021ac:	89 04 24             	mov    %eax,(%esp)
c01021af:	e8 7c ff ff ff       	call   c0102130 <pic_setmask>
}
c01021b4:	c9                   	leave  
c01021b5:	c3                   	ret    

c01021b6 <pic_init>:

/* pic_init - initialize the 8259A interrupt controllers */
void
pic_init(void) {
c01021b6:	55                   	push   %ebp
c01021b7:	89 e5                	mov    %esp,%ebp
c01021b9:	83 ec 44             	sub    $0x44,%esp
    did_init = 1;
c01021bc:	c7 05 40 f6 14 c0 01 	movl   $0x1,0xc014f640
c01021c3:	00 00 00 
c01021c6:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c01021cc:	c6 45 fd ff          	movb   $0xff,-0x3(%ebp)
c01021d0:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
c01021d4:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c01021d8:	ee                   	out    %al,(%dx)
c01021d9:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
c01021df:	c6 45 f9 ff          	movb   $0xff,-0x7(%ebp)
c01021e3:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01021e7:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01021eb:	ee                   	out    %al,(%dx)
c01021ec:	66 c7 45 f6 20 00    	movw   $0x20,-0xa(%ebp)
c01021f2:	c6 45 f5 11          	movb   $0x11,-0xb(%ebp)
c01021f6:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c01021fa:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01021fe:	ee                   	out    %al,(%dx)
c01021ff:	66 c7 45 f2 21 00    	movw   $0x21,-0xe(%ebp)
c0102205:	c6 45 f1 20          	movb   $0x20,-0xf(%ebp)
c0102209:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c010220d:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102211:	ee                   	out    %al,(%dx)
c0102212:	66 c7 45 ee 21 00    	movw   $0x21,-0x12(%ebp)
c0102218:	c6 45 ed 04          	movb   $0x4,-0x13(%ebp)
c010221c:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0102220:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0102224:	ee                   	out    %al,(%dx)
c0102225:	66 c7 45 ea 21 00    	movw   $0x21,-0x16(%ebp)
c010222b:	c6 45 e9 03          	movb   $0x3,-0x17(%ebp)
c010222f:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0102233:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0102237:	ee                   	out    %al,(%dx)
c0102238:	66 c7 45 e6 a0 00    	movw   $0xa0,-0x1a(%ebp)
c010223e:	c6 45 e5 11          	movb   $0x11,-0x1b(%ebp)
c0102242:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0102246:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c010224a:	ee                   	out    %al,(%dx)
c010224b:	66 c7 45 e2 a1 00    	movw   $0xa1,-0x1e(%ebp)
c0102251:	c6 45 e1 28          	movb   $0x28,-0x1f(%ebp)
c0102255:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0102259:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c010225d:	ee                   	out    %al,(%dx)
c010225e:	66 c7 45 de a1 00    	movw   $0xa1,-0x22(%ebp)
c0102264:	c6 45 dd 02          	movb   $0x2,-0x23(%ebp)
c0102268:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c010226c:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0102270:	ee                   	out    %al,(%dx)
c0102271:	66 c7 45 da a1 00    	movw   $0xa1,-0x26(%ebp)
c0102277:	c6 45 d9 03          	movb   $0x3,-0x27(%ebp)
c010227b:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c010227f:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0102283:	ee                   	out    %al,(%dx)
c0102284:	66 c7 45 d6 20 00    	movw   $0x20,-0x2a(%ebp)
c010228a:	c6 45 d5 68          	movb   $0x68,-0x2b(%ebp)
c010228e:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c0102292:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c0102296:	ee                   	out    %al,(%dx)
c0102297:	66 c7 45 d2 20 00    	movw   $0x20,-0x2e(%ebp)
c010229d:	c6 45 d1 0a          	movb   $0xa,-0x2f(%ebp)
c01022a1:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c01022a5:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c01022a9:	ee                   	out    %al,(%dx)
c01022aa:	66 c7 45 ce a0 00    	movw   $0xa0,-0x32(%ebp)
c01022b0:	c6 45 cd 68          	movb   $0x68,-0x33(%ebp)
c01022b4:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
c01022b8:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
c01022bc:	ee                   	out    %al,(%dx)
c01022bd:	66 c7 45 ca a0 00    	movw   $0xa0,-0x36(%ebp)
c01022c3:	c6 45 c9 0a          	movb   $0xa,-0x37(%ebp)
c01022c7:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c01022cb:	0f b7 55 ca          	movzwl -0x36(%ebp),%edx
c01022cf:	ee                   	out    %al,(%dx)
    outb(IO_PIC1, 0x0a);    // read IRR by default

    outb(IO_PIC2, 0x68);    // OCW3
    outb(IO_PIC2, 0x0a);    // OCW3

    if (irq_mask != 0xFFFF) {
c01022d0:	0f b7 05 70 e5 14 c0 	movzwl 0xc014e570,%eax
c01022d7:	66 83 f8 ff          	cmp    $0xffff,%ax
c01022db:	74 12                	je     c01022ef <pic_init+0x139>
        pic_setmask(irq_mask);
c01022dd:	0f b7 05 70 e5 14 c0 	movzwl 0xc014e570,%eax
c01022e4:	0f b7 c0             	movzwl %ax,%eax
c01022e7:	89 04 24             	mov    %eax,(%esp)
c01022ea:	e8 41 fe ff ff       	call   c0102130 <pic_setmask>
    }
}
c01022ef:	c9                   	leave  
c01022f0:	c3                   	ret    

c01022f1 <print_ticks>:
#include <sync.h>
#include <proc.h>

#define TICK_NUM 100

static void print_ticks() {
c01022f1:	55                   	push   %ebp
c01022f2:	89 e5                	mov    %esp,%ebp
c01022f4:	83 ec 18             	sub    $0x18,%esp
    cprintf("%d ticks\n",TICK_NUM);
c01022f7:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c01022fe:	00 
c01022ff:	c7 04 24 20 5b 11 c0 	movl   $0xc0115b20,(%esp)
c0102306:	e8 5a e0 ff ff       	call   c0100365 <cprintf>
#ifdef DEBUG_GRADE
    cprintf("End of Test.\n");
    panic("EOT: kernel seems ok.");
#endif
}
c010230b:	c9                   	leave  
c010230c:	c3                   	ret    

c010230d <idt_init>:
    sizeof(idt) - 1, (uintptr_t)idt
};

/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
void
idt_init(void) {
c010230d:	55                   	push   %ebp
c010230e:	89 e5                	mov    %esp,%ebp
c0102310:	83 ec 10             	sub    $0x10,%esp
     /* LAB5 YOUR CODE */ 
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
    extern uintptr_t __vectors[];
    int i;
    for (i = 0; i < sizeof(idt) / sizeof(struct gatedesc); i ++) {
c0102313:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c010231a:	e9 c3 00 00 00       	jmp    c01023e2 <idt_init+0xd5>
        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
c010231f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102322:	8b 04 85 00 e6 14 c0 	mov    -0x3feb1a00(,%eax,4),%eax
c0102329:	89 c2                	mov    %eax,%edx
c010232b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010232e:	66 89 14 c5 60 f6 14 	mov    %dx,-0x3feb09a0(,%eax,8)
c0102335:	c0 
c0102336:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102339:	66 c7 04 c5 62 f6 14 	movw   $0x8,-0x3feb099e(,%eax,8)
c0102340:	c0 08 00 
c0102343:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102346:	0f b6 14 c5 64 f6 14 	movzbl -0x3feb099c(,%eax,8),%edx
c010234d:	c0 
c010234e:	83 e2 e0             	and    $0xffffffe0,%edx
c0102351:	88 14 c5 64 f6 14 c0 	mov    %dl,-0x3feb099c(,%eax,8)
c0102358:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010235b:	0f b6 14 c5 64 f6 14 	movzbl -0x3feb099c(,%eax,8),%edx
c0102362:	c0 
c0102363:	83 e2 1f             	and    $0x1f,%edx
c0102366:	88 14 c5 64 f6 14 c0 	mov    %dl,-0x3feb099c(,%eax,8)
c010236d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102370:	0f b6 14 c5 65 f6 14 	movzbl -0x3feb099b(,%eax,8),%edx
c0102377:	c0 
c0102378:	83 e2 f0             	and    $0xfffffff0,%edx
c010237b:	83 ca 0e             	or     $0xe,%edx
c010237e:	88 14 c5 65 f6 14 c0 	mov    %dl,-0x3feb099b(,%eax,8)
c0102385:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102388:	0f b6 14 c5 65 f6 14 	movzbl -0x3feb099b(,%eax,8),%edx
c010238f:	c0 
c0102390:	83 e2 ef             	and    $0xffffffef,%edx
c0102393:	88 14 c5 65 f6 14 c0 	mov    %dl,-0x3feb099b(,%eax,8)
c010239a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010239d:	0f b6 14 c5 65 f6 14 	movzbl -0x3feb099b(,%eax,8),%edx
c01023a4:	c0 
c01023a5:	83 e2 9f             	and    $0xffffff9f,%edx
c01023a8:	88 14 c5 65 f6 14 c0 	mov    %dl,-0x3feb099b(,%eax,8)
c01023af:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023b2:	0f b6 14 c5 65 f6 14 	movzbl -0x3feb099b(,%eax,8),%edx
c01023b9:	c0 
c01023ba:	83 ca 80             	or     $0xffffff80,%edx
c01023bd:	88 14 c5 65 f6 14 c0 	mov    %dl,-0x3feb099b(,%eax,8)
c01023c4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023c7:	8b 04 85 00 e6 14 c0 	mov    -0x3feb1a00(,%eax,4),%eax
c01023ce:	c1 e8 10             	shr    $0x10,%eax
c01023d1:	89 c2                	mov    %eax,%edx
c01023d3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023d6:	66 89 14 c5 66 f6 14 	mov    %dx,-0x3feb099a(,%eax,8)
c01023dd:	c0 
     /* LAB5 YOUR CODE */ 
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
    extern uintptr_t __vectors[];
    int i;
    for (i = 0; i < sizeof(idt) / sizeof(struct gatedesc); i ++) {
c01023de:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01023e2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023e5:	3d ff 00 00 00       	cmp    $0xff,%eax
c01023ea:	0f 86 2f ff ff ff    	jbe    c010231f <idt_init+0x12>
        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
    }
    SETGATE(idt[T_SYSCALL], 1, GD_KTEXT, __vectors[T_SYSCALL], DPL_USER);
c01023f0:	a1 00 e8 14 c0       	mov    0xc014e800,%eax
c01023f5:	66 a3 60 fa 14 c0    	mov    %ax,0xc014fa60
c01023fb:	66 c7 05 62 fa 14 c0 	movw   $0x8,0xc014fa62
c0102402:	08 00 
c0102404:	0f b6 05 64 fa 14 c0 	movzbl 0xc014fa64,%eax
c010240b:	83 e0 e0             	and    $0xffffffe0,%eax
c010240e:	a2 64 fa 14 c0       	mov    %al,0xc014fa64
c0102413:	0f b6 05 64 fa 14 c0 	movzbl 0xc014fa64,%eax
c010241a:	83 e0 1f             	and    $0x1f,%eax
c010241d:	a2 64 fa 14 c0       	mov    %al,0xc014fa64
c0102422:	0f b6 05 65 fa 14 c0 	movzbl 0xc014fa65,%eax
c0102429:	83 c8 0f             	or     $0xf,%eax
c010242c:	a2 65 fa 14 c0       	mov    %al,0xc014fa65
c0102431:	0f b6 05 65 fa 14 c0 	movzbl 0xc014fa65,%eax
c0102438:	83 e0 ef             	and    $0xffffffef,%eax
c010243b:	a2 65 fa 14 c0       	mov    %al,0xc014fa65
c0102440:	0f b6 05 65 fa 14 c0 	movzbl 0xc014fa65,%eax
c0102447:	83 c8 60             	or     $0x60,%eax
c010244a:	a2 65 fa 14 c0       	mov    %al,0xc014fa65
c010244f:	0f b6 05 65 fa 14 c0 	movzbl 0xc014fa65,%eax
c0102456:	83 c8 80             	or     $0xffffff80,%eax
c0102459:	a2 65 fa 14 c0       	mov    %al,0xc014fa65
c010245e:	a1 00 e8 14 c0       	mov    0xc014e800,%eax
c0102463:	c1 e8 10             	shr    $0x10,%eax
c0102466:	66 a3 66 fa 14 c0    	mov    %ax,0xc014fa66
c010246c:	c7 45 f8 80 e5 14 c0 	movl   $0xc014e580,-0x8(%ebp)
    }
}

static inline void
lidt(struct pseudodesc *pd) {
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
c0102473:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0102476:	0f 01 18             	lidtl  (%eax)
    lidt(&idt_pd);
}
c0102479:	c9                   	leave  
c010247a:	c3                   	ret    

c010247b <trapname>:

static const char *
trapname(int trapno) {
c010247b:	55                   	push   %ebp
c010247c:	89 e5                	mov    %esp,%ebp
        "Alignment Check",
        "Machine-Check",
        "SIMD Floating-Point Exception"
    };

    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
c010247e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102481:	83 f8 13             	cmp    $0x13,%eax
c0102484:	77 0c                	ja     c0102492 <trapname+0x17>
        return excnames[trapno];
c0102486:	8b 45 08             	mov    0x8(%ebp),%eax
c0102489:	8b 04 85 a0 5f 11 c0 	mov    -0x3feea060(,%eax,4),%eax
c0102490:	eb 18                	jmp    c01024aa <trapname+0x2f>
    }
    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
c0102492:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
c0102496:	7e 0d                	jle    c01024a5 <trapname+0x2a>
c0102498:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c010249c:	7f 07                	jg     c01024a5 <trapname+0x2a>
        return "Hardware Interrupt";
c010249e:	b8 2a 5b 11 c0       	mov    $0xc0115b2a,%eax
c01024a3:	eb 05                	jmp    c01024aa <trapname+0x2f>
    }
    return "(unknown trap)";
c01024a5:	b8 3d 5b 11 c0       	mov    $0xc0115b3d,%eax
}
c01024aa:	5d                   	pop    %ebp
c01024ab:	c3                   	ret    

c01024ac <trap_in_kernel>:

/* trap_in_kernel - test if trap happened in kernel */
bool
trap_in_kernel(struct trapframe *tf) {
c01024ac:	55                   	push   %ebp
c01024ad:	89 e5                	mov    %esp,%ebp
    return (tf->tf_cs == (uint16_t)KERNEL_CS);
c01024af:	8b 45 08             	mov    0x8(%ebp),%eax
c01024b2:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c01024b6:	66 83 f8 08          	cmp    $0x8,%ax
c01024ba:	0f 94 c0             	sete   %al
c01024bd:	0f b6 c0             	movzbl %al,%eax
}
c01024c0:	5d                   	pop    %ebp
c01024c1:	c3                   	ret    

c01024c2 <print_trapframe>:
    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
};

void
print_trapframe(struct trapframe *tf) {
c01024c2:	55                   	push   %ebp
c01024c3:	89 e5                	mov    %esp,%ebp
c01024c5:	83 ec 28             	sub    $0x28,%esp
    cprintf("trapframe at %p\n", tf);
c01024c8:	8b 45 08             	mov    0x8(%ebp),%eax
c01024cb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01024cf:	c7 04 24 7e 5b 11 c0 	movl   $0xc0115b7e,(%esp)
c01024d6:	e8 8a de ff ff       	call   c0100365 <cprintf>
    print_regs(&tf->tf_regs);
c01024db:	8b 45 08             	mov    0x8(%ebp),%eax
c01024de:	89 04 24             	mov    %eax,(%esp)
c01024e1:	e8 a1 01 00 00       	call   c0102687 <print_regs>
    cprintf("  ds   0x----%04x\n", tf->tf_ds);
c01024e6:	8b 45 08             	mov    0x8(%ebp),%eax
c01024e9:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c01024ed:	0f b7 c0             	movzwl %ax,%eax
c01024f0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01024f4:	c7 04 24 8f 5b 11 c0 	movl   $0xc0115b8f,(%esp)
c01024fb:	e8 65 de ff ff       	call   c0100365 <cprintf>
    cprintf("  es   0x----%04x\n", tf->tf_es);
c0102500:	8b 45 08             	mov    0x8(%ebp),%eax
c0102503:	0f b7 40 28          	movzwl 0x28(%eax),%eax
c0102507:	0f b7 c0             	movzwl %ax,%eax
c010250a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010250e:	c7 04 24 a2 5b 11 c0 	movl   $0xc0115ba2,(%esp)
c0102515:	e8 4b de ff ff       	call   c0100365 <cprintf>
    cprintf("  fs   0x----%04x\n", tf->tf_fs);
c010251a:	8b 45 08             	mov    0x8(%ebp),%eax
c010251d:	0f b7 40 24          	movzwl 0x24(%eax),%eax
c0102521:	0f b7 c0             	movzwl %ax,%eax
c0102524:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102528:	c7 04 24 b5 5b 11 c0 	movl   $0xc0115bb5,(%esp)
c010252f:	e8 31 de ff ff       	call   c0100365 <cprintf>
    cprintf("  gs   0x----%04x\n", tf->tf_gs);
c0102534:	8b 45 08             	mov    0x8(%ebp),%eax
c0102537:	0f b7 40 20          	movzwl 0x20(%eax),%eax
c010253b:	0f b7 c0             	movzwl %ax,%eax
c010253e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102542:	c7 04 24 c8 5b 11 c0 	movl   $0xc0115bc8,(%esp)
c0102549:	e8 17 de ff ff       	call   c0100365 <cprintf>
    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
c010254e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102551:	8b 40 30             	mov    0x30(%eax),%eax
c0102554:	89 04 24             	mov    %eax,(%esp)
c0102557:	e8 1f ff ff ff       	call   c010247b <trapname>
c010255c:	8b 55 08             	mov    0x8(%ebp),%edx
c010255f:	8b 52 30             	mov    0x30(%edx),%edx
c0102562:	89 44 24 08          	mov    %eax,0x8(%esp)
c0102566:	89 54 24 04          	mov    %edx,0x4(%esp)
c010256a:	c7 04 24 db 5b 11 c0 	movl   $0xc0115bdb,(%esp)
c0102571:	e8 ef dd ff ff       	call   c0100365 <cprintf>
    cprintf("  err  0x%08x\n", tf->tf_err);
c0102576:	8b 45 08             	mov    0x8(%ebp),%eax
c0102579:	8b 40 34             	mov    0x34(%eax),%eax
c010257c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102580:	c7 04 24 ed 5b 11 c0 	movl   $0xc0115bed,(%esp)
c0102587:	e8 d9 dd ff ff       	call   c0100365 <cprintf>
    cprintf("  eip  0x%08x\n", tf->tf_eip);
c010258c:	8b 45 08             	mov    0x8(%ebp),%eax
c010258f:	8b 40 38             	mov    0x38(%eax),%eax
c0102592:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102596:	c7 04 24 fc 5b 11 c0 	movl   $0xc0115bfc,(%esp)
c010259d:	e8 c3 dd ff ff       	call   c0100365 <cprintf>
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
c01025a2:	8b 45 08             	mov    0x8(%ebp),%eax
c01025a5:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c01025a9:	0f b7 c0             	movzwl %ax,%eax
c01025ac:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025b0:	c7 04 24 0b 5c 11 c0 	movl   $0xc0115c0b,(%esp)
c01025b7:	e8 a9 dd ff ff       	call   c0100365 <cprintf>
    cprintf("  flag 0x%08x ", tf->tf_eflags);
c01025bc:	8b 45 08             	mov    0x8(%ebp),%eax
c01025bf:	8b 40 40             	mov    0x40(%eax),%eax
c01025c2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025c6:	c7 04 24 1e 5c 11 c0 	movl   $0xc0115c1e,(%esp)
c01025cd:	e8 93 dd ff ff       	call   c0100365 <cprintf>

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c01025d2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01025d9:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c01025e0:	eb 3e                	jmp    c0102620 <print_trapframe+0x15e>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
c01025e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01025e5:	8b 50 40             	mov    0x40(%eax),%edx
c01025e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01025eb:	21 d0                	and    %edx,%eax
c01025ed:	85 c0                	test   %eax,%eax
c01025ef:	74 28                	je     c0102619 <print_trapframe+0x157>
c01025f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01025f4:	8b 04 85 a0 e5 14 c0 	mov    -0x3feb1a60(,%eax,4),%eax
c01025fb:	85 c0                	test   %eax,%eax
c01025fd:	74 1a                	je     c0102619 <print_trapframe+0x157>
            cprintf("%s,", IA32flags[i]);
c01025ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102602:	8b 04 85 a0 e5 14 c0 	mov    -0x3feb1a60(,%eax,4),%eax
c0102609:	89 44 24 04          	mov    %eax,0x4(%esp)
c010260d:	c7 04 24 2d 5c 11 c0 	movl   $0xc0115c2d,(%esp)
c0102614:	e8 4c dd ff ff       	call   c0100365 <cprintf>
    cprintf("  eip  0x%08x\n", tf->tf_eip);
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
    cprintf("  flag 0x%08x ", tf->tf_eflags);

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c0102619:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010261d:	d1 65 f0             	shll   -0x10(%ebp)
c0102620:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102623:	83 f8 17             	cmp    $0x17,%eax
c0102626:	76 ba                	jbe    c01025e2 <print_trapframe+0x120>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
            cprintf("%s,", IA32flags[i]);
        }
    }
    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
c0102628:	8b 45 08             	mov    0x8(%ebp),%eax
c010262b:	8b 40 40             	mov    0x40(%eax),%eax
c010262e:	25 00 30 00 00       	and    $0x3000,%eax
c0102633:	c1 e8 0c             	shr    $0xc,%eax
c0102636:	89 44 24 04          	mov    %eax,0x4(%esp)
c010263a:	c7 04 24 31 5c 11 c0 	movl   $0xc0115c31,(%esp)
c0102641:	e8 1f dd ff ff       	call   c0100365 <cprintf>

    if (!trap_in_kernel(tf)) {
c0102646:	8b 45 08             	mov    0x8(%ebp),%eax
c0102649:	89 04 24             	mov    %eax,(%esp)
c010264c:	e8 5b fe ff ff       	call   c01024ac <trap_in_kernel>
c0102651:	85 c0                	test   %eax,%eax
c0102653:	75 30                	jne    c0102685 <print_trapframe+0x1c3>
        cprintf("  esp  0x%08x\n", tf->tf_esp);
c0102655:	8b 45 08             	mov    0x8(%ebp),%eax
c0102658:	8b 40 44             	mov    0x44(%eax),%eax
c010265b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010265f:	c7 04 24 3a 5c 11 c0 	movl   $0xc0115c3a,(%esp)
c0102666:	e8 fa dc ff ff       	call   c0100365 <cprintf>
        cprintf("  ss   0x----%04x\n", tf->tf_ss);
c010266b:	8b 45 08             	mov    0x8(%ebp),%eax
c010266e:	0f b7 40 48          	movzwl 0x48(%eax),%eax
c0102672:	0f b7 c0             	movzwl %ax,%eax
c0102675:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102679:	c7 04 24 49 5c 11 c0 	movl   $0xc0115c49,(%esp)
c0102680:	e8 e0 dc ff ff       	call   c0100365 <cprintf>
    }
}
c0102685:	c9                   	leave  
c0102686:	c3                   	ret    

c0102687 <print_regs>:

void
print_regs(struct pushregs *regs) {
c0102687:	55                   	push   %ebp
c0102688:	89 e5                	mov    %esp,%ebp
c010268a:	83 ec 18             	sub    $0x18,%esp
    cprintf("  edi  0x%08x\n", regs->reg_edi);
c010268d:	8b 45 08             	mov    0x8(%ebp),%eax
c0102690:	8b 00                	mov    (%eax),%eax
c0102692:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102696:	c7 04 24 5c 5c 11 c0 	movl   $0xc0115c5c,(%esp)
c010269d:	e8 c3 dc ff ff       	call   c0100365 <cprintf>
    cprintf("  esi  0x%08x\n", regs->reg_esi);
c01026a2:	8b 45 08             	mov    0x8(%ebp),%eax
c01026a5:	8b 40 04             	mov    0x4(%eax),%eax
c01026a8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026ac:	c7 04 24 6b 5c 11 c0 	movl   $0xc0115c6b,(%esp)
c01026b3:	e8 ad dc ff ff       	call   c0100365 <cprintf>
    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
c01026b8:	8b 45 08             	mov    0x8(%ebp),%eax
c01026bb:	8b 40 08             	mov    0x8(%eax),%eax
c01026be:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026c2:	c7 04 24 7a 5c 11 c0 	movl   $0xc0115c7a,(%esp)
c01026c9:	e8 97 dc ff ff       	call   c0100365 <cprintf>
    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
c01026ce:	8b 45 08             	mov    0x8(%ebp),%eax
c01026d1:	8b 40 0c             	mov    0xc(%eax),%eax
c01026d4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026d8:	c7 04 24 89 5c 11 c0 	movl   $0xc0115c89,(%esp)
c01026df:	e8 81 dc ff ff       	call   c0100365 <cprintf>
    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
c01026e4:	8b 45 08             	mov    0x8(%ebp),%eax
c01026e7:	8b 40 10             	mov    0x10(%eax),%eax
c01026ea:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026ee:	c7 04 24 98 5c 11 c0 	movl   $0xc0115c98,(%esp)
c01026f5:	e8 6b dc ff ff       	call   c0100365 <cprintf>
    cprintf("  edx  0x%08x\n", regs->reg_edx);
c01026fa:	8b 45 08             	mov    0x8(%ebp),%eax
c01026fd:	8b 40 14             	mov    0x14(%eax),%eax
c0102700:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102704:	c7 04 24 a7 5c 11 c0 	movl   $0xc0115ca7,(%esp)
c010270b:	e8 55 dc ff ff       	call   c0100365 <cprintf>
    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
c0102710:	8b 45 08             	mov    0x8(%ebp),%eax
c0102713:	8b 40 18             	mov    0x18(%eax),%eax
c0102716:	89 44 24 04          	mov    %eax,0x4(%esp)
c010271a:	c7 04 24 b6 5c 11 c0 	movl   $0xc0115cb6,(%esp)
c0102721:	e8 3f dc ff ff       	call   c0100365 <cprintf>
    cprintf("  eax  0x%08x\n", regs->reg_eax);
c0102726:	8b 45 08             	mov    0x8(%ebp),%eax
c0102729:	8b 40 1c             	mov    0x1c(%eax),%eax
c010272c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102730:	c7 04 24 c5 5c 11 c0 	movl   $0xc0115cc5,(%esp)
c0102737:	e8 29 dc ff ff       	call   c0100365 <cprintf>
}
c010273c:	c9                   	leave  
c010273d:	c3                   	ret    

c010273e <print_pgfault>:

static inline void
print_pgfault(struct trapframe *tf) {
c010273e:	55                   	push   %ebp
c010273f:	89 e5                	mov    %esp,%ebp
c0102741:	53                   	push   %ebx
c0102742:	83 ec 34             	sub    $0x34,%esp
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
c0102745:	8b 45 08             	mov    0x8(%ebp),%eax
c0102748:	8b 40 34             	mov    0x34(%eax),%eax
c010274b:	83 e0 01             	and    $0x1,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c010274e:	85 c0                	test   %eax,%eax
c0102750:	74 07                	je     c0102759 <print_pgfault+0x1b>
c0102752:	b9 d4 5c 11 c0       	mov    $0xc0115cd4,%ecx
c0102757:	eb 05                	jmp    c010275e <print_pgfault+0x20>
c0102759:	b9 e5 5c 11 c0       	mov    $0xc0115ce5,%ecx
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
c010275e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102761:	8b 40 34             	mov    0x34(%eax),%eax
c0102764:	83 e0 02             	and    $0x2,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0102767:	85 c0                	test   %eax,%eax
c0102769:	74 07                	je     c0102772 <print_pgfault+0x34>
c010276b:	ba 57 00 00 00       	mov    $0x57,%edx
c0102770:	eb 05                	jmp    c0102777 <print_pgfault+0x39>
c0102772:	ba 52 00 00 00       	mov    $0x52,%edx
            (tf->tf_err & 4) ? 'U' : 'K',
c0102777:	8b 45 08             	mov    0x8(%ebp),%eax
c010277a:	8b 40 34             	mov    0x34(%eax),%eax
c010277d:	83 e0 04             	and    $0x4,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0102780:	85 c0                	test   %eax,%eax
c0102782:	74 07                	je     c010278b <print_pgfault+0x4d>
c0102784:	b8 55 00 00 00       	mov    $0x55,%eax
c0102789:	eb 05                	jmp    c0102790 <print_pgfault+0x52>
c010278b:	b8 4b 00 00 00       	mov    $0x4b,%eax
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c0102790:	0f 20 d3             	mov    %cr2,%ebx
c0102793:	89 5d f4             	mov    %ebx,-0xc(%ebp)
    return cr2;
c0102796:	8b 5d f4             	mov    -0xc(%ebp),%ebx
c0102799:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c010279d:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01027a1:	89 44 24 08          	mov    %eax,0x8(%esp)
c01027a5:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c01027a9:	c7 04 24 f4 5c 11 c0 	movl   $0xc0115cf4,(%esp)
c01027b0:	e8 b0 db ff ff       	call   c0100365 <cprintf>
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
}
c01027b5:	83 c4 34             	add    $0x34,%esp
c01027b8:	5b                   	pop    %ebx
c01027b9:	5d                   	pop    %ebp
c01027ba:	c3                   	ret    

c01027bb <pgfault_handler>:

static int
pgfault_handler(struct trapframe *tf) {
c01027bb:	55                   	push   %ebp
c01027bc:	89 e5                	mov    %esp,%ebp
c01027be:	83 ec 28             	sub    $0x28,%esp
    extern struct mm_struct *check_mm_struct;
    if(check_mm_struct !=NULL) { //used for test check_swap
c01027c1:	a1 0c 31 15 c0       	mov    0xc015310c,%eax
c01027c6:	85 c0                	test   %eax,%eax
c01027c8:	74 0b                	je     c01027d5 <pgfault_handler+0x1a>
            print_pgfault(tf);
c01027ca:	8b 45 08             	mov    0x8(%ebp),%eax
c01027cd:	89 04 24             	mov    %eax,(%esp)
c01027d0:	e8 69 ff ff ff       	call   c010273e <print_pgfault>
        }
    struct mm_struct *mm;
    if (check_mm_struct != NULL) {
c01027d5:	a1 0c 31 15 c0       	mov    0xc015310c,%eax
c01027da:	85 c0                	test   %eax,%eax
c01027dc:	74 3d                	je     c010281b <pgfault_handler+0x60>
        assert(current == idleproc);
c01027de:	8b 15 28 ff 14 c0    	mov    0xc014ff28,%edx
c01027e4:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c01027e9:	39 c2                	cmp    %eax,%edx
c01027eb:	74 24                	je     c0102811 <pgfault_handler+0x56>
c01027ed:	c7 44 24 0c 17 5d 11 	movl   $0xc0115d17,0xc(%esp)
c01027f4:	c0 
c01027f5:	c7 44 24 08 2b 5d 11 	movl   $0xc0115d2b,0x8(%esp)
c01027fc:	c0 
c01027fd:	c7 44 24 04 b0 00 00 	movl   $0xb0,0x4(%esp)
c0102804:	00 
c0102805:	c7 04 24 40 5d 11 c0 	movl   $0xc0115d40,(%esp)
c010280c:	e8 b7 e6 ff ff       	call   c0100ec8 <__panic>
        mm = check_mm_struct;
c0102811:	a1 0c 31 15 c0       	mov    0xc015310c,%eax
c0102816:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0102819:	eb 46                	jmp    c0102861 <pgfault_handler+0xa6>
    }
    else {
        if (current == NULL) {
c010281b:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c0102820:	85 c0                	test   %eax,%eax
c0102822:	75 32                	jne    c0102856 <pgfault_handler+0x9b>
            print_trapframe(tf);
c0102824:	8b 45 08             	mov    0x8(%ebp),%eax
c0102827:	89 04 24             	mov    %eax,(%esp)
c010282a:	e8 93 fc ff ff       	call   c01024c2 <print_trapframe>
            print_pgfault(tf);
c010282f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102832:	89 04 24             	mov    %eax,(%esp)
c0102835:	e8 04 ff ff ff       	call   c010273e <print_pgfault>
            panic("unhandled page fault.\n");
c010283a:	c7 44 24 08 51 5d 11 	movl   $0xc0115d51,0x8(%esp)
c0102841:	c0 
c0102842:	c7 44 24 04 b7 00 00 	movl   $0xb7,0x4(%esp)
c0102849:	00 
c010284a:	c7 04 24 40 5d 11 c0 	movl   $0xc0115d40,(%esp)
c0102851:	e8 72 e6 ff ff       	call   c0100ec8 <__panic>
        }
        mm = current->mm;
c0102856:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010285b:	8b 40 18             	mov    0x18(%eax),%eax
c010285e:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c0102861:	0f 20 d0             	mov    %cr2,%eax
c0102864:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr2;
c0102867:	8b 45 f0             	mov    -0x10(%ebp),%eax
    }
    return do_pgfault(mm, tf->tf_err, rcr2());
c010286a:	89 c2                	mov    %eax,%edx
c010286c:	8b 45 08             	mov    0x8(%ebp),%eax
c010286f:	8b 40 34             	mov    0x34(%eax),%eax
c0102872:	89 54 24 08          	mov    %edx,0x8(%esp)
c0102876:	89 44 24 04          	mov    %eax,0x4(%esp)
c010287a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010287d:	89 04 24             	mov    %eax,(%esp)
c0102880:	e8 51 65 00 00       	call   c0108dd6 <do_pgfault>
}
c0102885:	c9                   	leave  
c0102886:	c3                   	ret    

c0102887 <trap_dispatch>:

static volatile int in_swap_tick_event = 0;
extern struct mm_struct *check_mm_struct;

static void
trap_dispatch(struct trapframe *tf) {
c0102887:	55                   	push   %ebp
c0102888:	89 e5                	mov    %esp,%ebp
c010288a:	83 ec 28             	sub    $0x28,%esp
    char c;

    int ret=0;
c010288d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    switch (tf->tf_trapno) {
c0102894:	8b 45 08             	mov    0x8(%ebp),%eax
c0102897:	8b 40 30             	mov    0x30(%eax),%eax
c010289a:	83 f8 2f             	cmp    $0x2f,%eax
c010289d:	77 38                	ja     c01028d7 <trap_dispatch+0x50>
c010289f:	83 f8 2e             	cmp    $0x2e,%eax
c01028a2:	0f 83 cb 01 00 00    	jae    c0102a73 <trap_dispatch+0x1ec>
c01028a8:	83 f8 20             	cmp    $0x20,%eax
c01028ab:	0f 84 07 01 00 00    	je     c01029b8 <trap_dispatch+0x131>
c01028b1:	83 f8 20             	cmp    $0x20,%eax
c01028b4:	77 0a                	ja     c01028c0 <trap_dispatch+0x39>
c01028b6:	83 f8 0e             	cmp    $0xe,%eax
c01028b9:	74 3e                	je     c01028f9 <trap_dispatch+0x72>
c01028bb:	e9 6b 01 00 00       	jmp    c0102a2b <trap_dispatch+0x1a4>
c01028c0:	83 f8 21             	cmp    $0x21,%eax
c01028c3:	0f 84 30 01 00 00    	je     c01029f9 <trap_dispatch+0x172>
c01028c9:	83 f8 24             	cmp    $0x24,%eax
c01028cc:	0f 84 27 01 00 00    	je     c01029f9 <trap_dispatch+0x172>
c01028d2:	e9 54 01 00 00       	jmp    c0102a2b <trap_dispatch+0x1a4>
c01028d7:	83 f8 78             	cmp    $0x78,%eax
c01028da:	0f 82 4b 01 00 00    	jb     c0102a2b <trap_dispatch+0x1a4>
c01028e0:	83 f8 79             	cmp    $0x79,%eax
c01028e3:	0f 86 26 01 00 00    	jbe    c0102a0f <trap_dispatch+0x188>
c01028e9:	3d 80 00 00 00       	cmp    $0x80,%eax
c01028ee:	0f 84 ba 00 00 00    	je     c01029ae <trap_dispatch+0x127>
c01028f4:	e9 32 01 00 00       	jmp    c0102a2b <trap_dispatch+0x1a4>
    case T_PGFLT:  //page fault
        if ((ret = pgfault_handler(tf)) != 0) {
c01028f9:	8b 45 08             	mov    0x8(%ebp),%eax
c01028fc:	89 04 24             	mov    %eax,(%esp)
c01028ff:	e8 b7 fe ff ff       	call   c01027bb <pgfault_handler>
c0102904:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0102907:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010290b:	0f 84 98 00 00 00    	je     c01029a9 <trap_dispatch+0x122>
            print_trapframe(tf);
c0102911:	8b 45 08             	mov    0x8(%ebp),%eax
c0102914:	89 04 24             	mov    %eax,(%esp)
c0102917:	e8 a6 fb ff ff       	call   c01024c2 <print_trapframe>
            if (current == NULL) {
c010291c:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c0102921:	85 c0                	test   %eax,%eax
c0102923:	75 23                	jne    c0102948 <trap_dispatch+0xc1>
                panic("handle pgfault failed. ret=%d\n", ret);
c0102925:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102928:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010292c:	c7 44 24 08 68 5d 11 	movl   $0xc0115d68,0x8(%esp)
c0102933:	c0 
c0102934:	c7 44 24 04 cc 00 00 	movl   $0xcc,0x4(%esp)
c010293b:	00 
c010293c:	c7 04 24 40 5d 11 c0 	movl   $0xc0115d40,(%esp)
c0102943:	e8 80 e5 ff ff       	call   c0100ec8 <__panic>
            }
            else {
                if (trap_in_kernel(tf)) {
c0102948:	8b 45 08             	mov    0x8(%ebp),%eax
c010294b:	89 04 24             	mov    %eax,(%esp)
c010294e:	e8 59 fb ff ff       	call   c01024ac <trap_in_kernel>
c0102953:	85 c0                	test   %eax,%eax
c0102955:	74 23                	je     c010297a <trap_dispatch+0xf3>
                    panic("handle pgfault failed in kernel mode. ret=%d\n", ret);
c0102957:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010295a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010295e:	c7 44 24 08 88 5d 11 	movl   $0xc0115d88,0x8(%esp)
c0102965:	c0 
c0102966:	c7 44 24 04 d0 00 00 	movl   $0xd0,0x4(%esp)
c010296d:	00 
c010296e:	c7 04 24 40 5d 11 c0 	movl   $0xc0115d40,(%esp)
c0102975:	e8 4e e5 ff ff       	call   c0100ec8 <__panic>
                }
                cprintf("killed by kernel.\n");
c010297a:	c7 04 24 b6 5d 11 c0 	movl   $0xc0115db6,(%esp)
c0102981:	e8 df d9 ff ff       	call   c0100365 <cprintf>
                panic("handle user mode pgfault failed. ret=%d\n", ret); 
c0102986:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102989:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010298d:	c7 44 24 08 cc 5d 11 	movl   $0xc0115dcc,0x8(%esp)
c0102994:	c0 
c0102995:	c7 44 24 04 d3 00 00 	movl   $0xd3,0x4(%esp)
c010299c:	00 
c010299d:	c7 04 24 40 5d 11 c0 	movl   $0xc0115d40,(%esp)
c01029a4:	e8 1f e5 ff ff       	call   c0100ec8 <__panic>
                do_exit(-E_KILLED);
            }
        }
        break;
c01029a9:	e9 c6 00 00 00       	jmp    c0102a74 <trap_dispatch+0x1ed>
    case T_SYSCALL:
        syscall();
c01029ae:	e8 c9 c3 00 00       	call   c010ed7c <syscall>
        break;
c01029b3:	e9 bc 00 00 00       	jmp    c0102a74 <trap_dispatch+0x1ed>
	     *----------------------
	     * you should update your lab5 code (just add ONE or TWO lines of code):
         *    Every tick, you should update the system time, iterate the timers, and trigger the timers which are end to call scheduler.
         *    You can use one funcitons to finish all these things.
         */
        ticks ++;
c01029b8:	a1 10 30 15 c0       	mov    0xc0153010,%eax
c01029bd:	83 c0 01             	add    $0x1,%eax
c01029c0:	a3 10 30 15 c0       	mov    %eax,0xc0153010
        assert(current != NULL);
c01029c5:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c01029ca:	85 c0                	test   %eax,%eax
c01029cc:	75 24                	jne    c01029f2 <trap_dispatch+0x16b>
c01029ce:	c7 44 24 0c f5 5d 11 	movl   $0xc0115df5,0xc(%esp)
c01029d5:	c0 
c01029d6:	c7 44 24 08 2b 5d 11 	movl   $0xc0115d2b,0x8(%esp)
c01029dd:	c0 
c01029de:	c7 44 24 04 f3 00 00 	movl   $0xf3,0x4(%esp)
c01029e5:	00 
c01029e6:	c7 04 24 40 5d 11 c0 	movl   $0xc0115d40,(%esp)
c01029ed:	e8 d6 e4 ff ff       	call   c0100ec8 <__panic>
        run_timer_list();
c01029f2:	e8 10 bf 00 00       	call   c010e907 <run_timer_list>
        break;
c01029f7:	eb 7b                	jmp    c0102a74 <trap_dispatch+0x1ed>
    case IRQ_OFFSET + IRQ_COM1:
        //c = cons_getc();
        //cprintf("serial [%03d] %c\n", c, c);
        //break;
    case IRQ_OFFSET + IRQ_KBD:
        c = cons_getc();
c01029f9:	e8 42 ee ff ff       	call   c0101840 <cons_getc>
c01029fe:	88 45 f3             	mov    %al,-0xd(%ebp)
        //cprintf("kbd [%03d] %c\n", c, c);
        {
          extern void dev_stdin_write(char c);
          dev_stdin_write(c);
c0102a01:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c0102a05:	89 04 24             	mov    %eax,(%esp)
c0102a08:	e8 77 e6 00 00       	call   c0111084 <dev_stdin_write>
        }
        break;
c0102a0d:	eb 65                	jmp    c0102a74 <trap_dispatch+0x1ed>
    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
    case T_SWITCH_TOU:
    case T_SWITCH_TOK:
        panic("T_SWITCH_** ??\n");
c0102a0f:	c7 44 24 08 05 5e 11 	movl   $0xc0115e05,0x8(%esp)
c0102a16:	c0 
c0102a17:	c7 44 24 04 05 01 00 	movl   $0x105,0x4(%esp)
c0102a1e:	00 
c0102a1f:	c7 04 24 40 5d 11 c0 	movl   $0xc0115d40,(%esp)
c0102a26:	e8 9d e4 ff ff       	call   c0100ec8 <__panic>
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
    default:
        print_trapframe(tf);
c0102a2b:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a2e:	89 04 24             	mov    %eax,(%esp)
c0102a31:	e8 8c fa ff ff       	call   c01024c2 <print_trapframe>
        if (current != NULL) {
c0102a36:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c0102a3b:	85 c0                	test   %eax,%eax
c0102a3d:	74 18                	je     c0102a57 <trap_dispatch+0x1d0>
            cprintf("unhandled trap.\n");
c0102a3f:	c7 04 24 15 5e 11 c0 	movl   $0xc0115e15,(%esp)
c0102a46:	e8 1a d9 ff ff       	call   c0100365 <cprintf>
            do_exit(-E_KILLED);
c0102a4b:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c0102a52:	e8 dd a0 00 00       	call   c010cb34 <do_exit>
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");
c0102a57:	c7 44 24 08 26 5e 11 	movl   $0xc0115e26,0x8(%esp)
c0102a5e:	c0 
c0102a5f:	c7 44 24 04 12 01 00 	movl   $0x112,0x4(%esp)
c0102a66:	00 
c0102a67:	c7 04 24 40 5d 11 c0 	movl   $0xc0115d40,(%esp)
c0102a6e:	e8 55 e4 ff ff       	call   c0100ec8 <__panic>
        panic("T_SWITCH_** ??\n");
        break;
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
c0102a73:	90                   	nop
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");

    }
}
c0102a74:	c9                   	leave  
c0102a75:	c3                   	ret    

c0102a76 <trap>:
 * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
 * the code in kern/trap/trapentry.S restores the old CPU state saved in the
 * trapframe and then uses the iret instruction to return from the exception.
 * */
void
trap(struct trapframe *tf) {
c0102a76:	55                   	push   %ebp
c0102a77:	89 e5                	mov    %esp,%ebp
c0102a79:	83 ec 28             	sub    $0x28,%esp
    // dispatch based on what type of trap occurred
    // used for previous projects
    if (current == NULL) {
c0102a7c:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c0102a81:	85 c0                	test   %eax,%eax
c0102a83:	75 0d                	jne    c0102a92 <trap+0x1c>
        trap_dispatch(tf);
c0102a85:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a88:	89 04 24             	mov    %eax,(%esp)
c0102a8b:	e8 f7 fd ff ff       	call   c0102887 <trap_dispatch>
c0102a90:	eb 6c                	jmp    c0102afe <trap+0x88>
    }
    else {
        // keep a trapframe chain in stack
        struct trapframe *otf = current->tf;
c0102a92:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c0102a97:	8b 40 3c             	mov    0x3c(%eax),%eax
c0102a9a:	89 45 f4             	mov    %eax,-0xc(%ebp)
        current->tf = tf;
c0102a9d:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c0102aa2:	8b 55 08             	mov    0x8(%ebp),%edx
c0102aa5:	89 50 3c             	mov    %edx,0x3c(%eax)
    
        bool in_kernel = trap_in_kernel(tf);
c0102aa8:	8b 45 08             	mov    0x8(%ebp),%eax
c0102aab:	89 04 24             	mov    %eax,(%esp)
c0102aae:	e8 f9 f9 ff ff       	call   c01024ac <trap_in_kernel>
c0102ab3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
        trap_dispatch(tf);
c0102ab6:	8b 45 08             	mov    0x8(%ebp),%eax
c0102ab9:	89 04 24             	mov    %eax,(%esp)
c0102abc:	e8 c6 fd ff ff       	call   c0102887 <trap_dispatch>
    
        current->tf = otf;
c0102ac1:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c0102ac6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102ac9:	89 50 3c             	mov    %edx,0x3c(%eax)
        if (!in_kernel) {
c0102acc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0102ad0:	75 2c                	jne    c0102afe <trap+0x88>
            if (current->flags & PF_EXITING) {
c0102ad2:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c0102ad7:	8b 40 44             	mov    0x44(%eax),%eax
c0102ada:	83 e0 01             	and    $0x1,%eax
c0102add:	85 c0                	test   %eax,%eax
c0102adf:	74 0c                	je     c0102aed <trap+0x77>
                do_exit(-E_KILLED);
c0102ae1:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c0102ae8:	e8 47 a0 00 00       	call   c010cb34 <do_exit>
            }
            if (current->need_resched) {
c0102aed:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c0102af2:	8b 40 10             	mov    0x10(%eax),%eax
c0102af5:	85 c0                	test   %eax,%eax
c0102af7:	74 05                	je     c0102afe <trap+0x88>
                schedule();
c0102af9:	e8 7c bb 00 00       	call   c010e67a <schedule>
            }
        }
    }
}
c0102afe:	c9                   	leave  
c0102aff:	c3                   	ret    

c0102b00 <__alltraps>:
.text
.globl __alltraps
__alltraps:
    # push registers to build a trap frame
    # therefore make the stack look like a struct trapframe
    pushl %ds
c0102b00:	1e                   	push   %ds
    pushl %es
c0102b01:	06                   	push   %es
    pushl %fs
c0102b02:	0f a0                	push   %fs
    pushl %gs
c0102b04:	0f a8                	push   %gs
    pushal
c0102b06:	60                   	pusha  

    # load GD_KDATA into %ds and %es to set up data segments for kernel
    movl $GD_KDATA, %eax
c0102b07:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c0102b0c:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c0102b0e:	8e c0                	mov    %eax,%es

    # push %esp to pass a pointer to the trapframe as an argument to trap()
    pushl %esp
c0102b10:	54                   	push   %esp

    # call trap(tf), where tf=%esp
    call trap
c0102b11:	e8 60 ff ff ff       	call   c0102a76 <trap>

    # pop the pushed stack pointer
    popl %esp
c0102b16:	5c                   	pop    %esp

c0102b17 <__trapret>:

    # return falls through to trapret...
.globl __trapret
__trapret:
    # restore registers from stack
    popal
c0102b17:	61                   	popa   

    # restore %ds, %es, %fs and %gs
    popl %gs
c0102b18:	0f a9                	pop    %gs
    popl %fs
c0102b1a:	0f a1                	pop    %fs
    popl %es
c0102b1c:	07                   	pop    %es
    popl %ds
c0102b1d:	1f                   	pop    %ds

    # get rid of the trap number and error code
    addl $0x8, %esp
c0102b1e:	83 c4 08             	add    $0x8,%esp
    iret
c0102b21:	cf                   	iret   

c0102b22 <forkrets>:

.globl forkrets
forkrets:
    # set stack to this new process's trapframe
    movl 4(%esp), %esp
c0102b22:	8b 64 24 04          	mov    0x4(%esp),%esp
    jmp __trapret
c0102b26:	e9 ec ff ff ff       	jmp    c0102b17 <__trapret>

c0102b2b <vector0>:
# handler
.text
.globl __alltraps
.globl vector0
vector0:
  pushl $0
c0102b2b:	6a 00                	push   $0x0
  pushl $0
c0102b2d:	6a 00                	push   $0x0
  jmp __alltraps
c0102b2f:	e9 cc ff ff ff       	jmp    c0102b00 <__alltraps>

c0102b34 <vector1>:
.globl vector1
vector1:
  pushl $0
c0102b34:	6a 00                	push   $0x0
  pushl $1
c0102b36:	6a 01                	push   $0x1
  jmp __alltraps
c0102b38:	e9 c3 ff ff ff       	jmp    c0102b00 <__alltraps>

c0102b3d <vector2>:
.globl vector2
vector2:
  pushl $0
c0102b3d:	6a 00                	push   $0x0
  pushl $2
c0102b3f:	6a 02                	push   $0x2
  jmp __alltraps
c0102b41:	e9 ba ff ff ff       	jmp    c0102b00 <__alltraps>

c0102b46 <vector3>:
.globl vector3
vector3:
  pushl $0
c0102b46:	6a 00                	push   $0x0
  pushl $3
c0102b48:	6a 03                	push   $0x3
  jmp __alltraps
c0102b4a:	e9 b1 ff ff ff       	jmp    c0102b00 <__alltraps>

c0102b4f <vector4>:
.globl vector4
vector4:
  pushl $0
c0102b4f:	6a 00                	push   $0x0
  pushl $4
c0102b51:	6a 04                	push   $0x4
  jmp __alltraps
c0102b53:	e9 a8 ff ff ff       	jmp    c0102b00 <__alltraps>

c0102b58 <vector5>:
.globl vector5
vector5:
  pushl $0
c0102b58:	6a 00                	push   $0x0
  pushl $5
c0102b5a:	6a 05                	push   $0x5
  jmp __alltraps
c0102b5c:	e9 9f ff ff ff       	jmp    c0102b00 <__alltraps>

c0102b61 <vector6>:
.globl vector6
vector6:
  pushl $0
c0102b61:	6a 00                	push   $0x0
  pushl $6
c0102b63:	6a 06                	push   $0x6
  jmp __alltraps
c0102b65:	e9 96 ff ff ff       	jmp    c0102b00 <__alltraps>

c0102b6a <vector7>:
.globl vector7
vector7:
  pushl $0
c0102b6a:	6a 00                	push   $0x0
  pushl $7
c0102b6c:	6a 07                	push   $0x7
  jmp __alltraps
c0102b6e:	e9 8d ff ff ff       	jmp    c0102b00 <__alltraps>

c0102b73 <vector8>:
.globl vector8
vector8:
  pushl $8
c0102b73:	6a 08                	push   $0x8
  jmp __alltraps
c0102b75:	e9 86 ff ff ff       	jmp    c0102b00 <__alltraps>

c0102b7a <vector9>:
.globl vector9
vector9:
  pushl $9
c0102b7a:	6a 09                	push   $0x9
  jmp __alltraps
c0102b7c:	e9 7f ff ff ff       	jmp    c0102b00 <__alltraps>

c0102b81 <vector10>:
.globl vector10
vector10:
  pushl $10
c0102b81:	6a 0a                	push   $0xa
  jmp __alltraps
c0102b83:	e9 78 ff ff ff       	jmp    c0102b00 <__alltraps>

c0102b88 <vector11>:
.globl vector11
vector11:
  pushl $11
c0102b88:	6a 0b                	push   $0xb
  jmp __alltraps
c0102b8a:	e9 71 ff ff ff       	jmp    c0102b00 <__alltraps>

c0102b8f <vector12>:
.globl vector12
vector12:
  pushl $12
c0102b8f:	6a 0c                	push   $0xc
  jmp __alltraps
c0102b91:	e9 6a ff ff ff       	jmp    c0102b00 <__alltraps>

c0102b96 <vector13>:
.globl vector13
vector13:
  pushl $13
c0102b96:	6a 0d                	push   $0xd
  jmp __alltraps
c0102b98:	e9 63 ff ff ff       	jmp    c0102b00 <__alltraps>

c0102b9d <vector14>:
.globl vector14
vector14:
  pushl $14
c0102b9d:	6a 0e                	push   $0xe
  jmp __alltraps
c0102b9f:	e9 5c ff ff ff       	jmp    c0102b00 <__alltraps>

c0102ba4 <vector15>:
.globl vector15
vector15:
  pushl $0
c0102ba4:	6a 00                	push   $0x0
  pushl $15
c0102ba6:	6a 0f                	push   $0xf
  jmp __alltraps
c0102ba8:	e9 53 ff ff ff       	jmp    c0102b00 <__alltraps>

c0102bad <vector16>:
.globl vector16
vector16:
  pushl $0
c0102bad:	6a 00                	push   $0x0
  pushl $16
c0102baf:	6a 10                	push   $0x10
  jmp __alltraps
c0102bb1:	e9 4a ff ff ff       	jmp    c0102b00 <__alltraps>

c0102bb6 <vector17>:
.globl vector17
vector17:
  pushl $17
c0102bb6:	6a 11                	push   $0x11
  jmp __alltraps
c0102bb8:	e9 43 ff ff ff       	jmp    c0102b00 <__alltraps>

c0102bbd <vector18>:
.globl vector18
vector18:
  pushl $0
c0102bbd:	6a 00                	push   $0x0
  pushl $18
c0102bbf:	6a 12                	push   $0x12
  jmp __alltraps
c0102bc1:	e9 3a ff ff ff       	jmp    c0102b00 <__alltraps>

c0102bc6 <vector19>:
.globl vector19
vector19:
  pushl $0
c0102bc6:	6a 00                	push   $0x0
  pushl $19
c0102bc8:	6a 13                	push   $0x13
  jmp __alltraps
c0102bca:	e9 31 ff ff ff       	jmp    c0102b00 <__alltraps>

c0102bcf <vector20>:
.globl vector20
vector20:
  pushl $0
c0102bcf:	6a 00                	push   $0x0
  pushl $20
c0102bd1:	6a 14                	push   $0x14
  jmp __alltraps
c0102bd3:	e9 28 ff ff ff       	jmp    c0102b00 <__alltraps>

c0102bd8 <vector21>:
.globl vector21
vector21:
  pushl $0
c0102bd8:	6a 00                	push   $0x0
  pushl $21
c0102bda:	6a 15                	push   $0x15
  jmp __alltraps
c0102bdc:	e9 1f ff ff ff       	jmp    c0102b00 <__alltraps>

c0102be1 <vector22>:
.globl vector22
vector22:
  pushl $0
c0102be1:	6a 00                	push   $0x0
  pushl $22
c0102be3:	6a 16                	push   $0x16
  jmp __alltraps
c0102be5:	e9 16 ff ff ff       	jmp    c0102b00 <__alltraps>

c0102bea <vector23>:
.globl vector23
vector23:
  pushl $0
c0102bea:	6a 00                	push   $0x0
  pushl $23
c0102bec:	6a 17                	push   $0x17
  jmp __alltraps
c0102bee:	e9 0d ff ff ff       	jmp    c0102b00 <__alltraps>

c0102bf3 <vector24>:
.globl vector24
vector24:
  pushl $0
c0102bf3:	6a 00                	push   $0x0
  pushl $24
c0102bf5:	6a 18                	push   $0x18
  jmp __alltraps
c0102bf7:	e9 04 ff ff ff       	jmp    c0102b00 <__alltraps>

c0102bfc <vector25>:
.globl vector25
vector25:
  pushl $0
c0102bfc:	6a 00                	push   $0x0
  pushl $25
c0102bfe:	6a 19                	push   $0x19
  jmp __alltraps
c0102c00:	e9 fb fe ff ff       	jmp    c0102b00 <__alltraps>

c0102c05 <vector26>:
.globl vector26
vector26:
  pushl $0
c0102c05:	6a 00                	push   $0x0
  pushl $26
c0102c07:	6a 1a                	push   $0x1a
  jmp __alltraps
c0102c09:	e9 f2 fe ff ff       	jmp    c0102b00 <__alltraps>

c0102c0e <vector27>:
.globl vector27
vector27:
  pushl $0
c0102c0e:	6a 00                	push   $0x0
  pushl $27
c0102c10:	6a 1b                	push   $0x1b
  jmp __alltraps
c0102c12:	e9 e9 fe ff ff       	jmp    c0102b00 <__alltraps>

c0102c17 <vector28>:
.globl vector28
vector28:
  pushl $0
c0102c17:	6a 00                	push   $0x0
  pushl $28
c0102c19:	6a 1c                	push   $0x1c
  jmp __alltraps
c0102c1b:	e9 e0 fe ff ff       	jmp    c0102b00 <__alltraps>

c0102c20 <vector29>:
.globl vector29
vector29:
  pushl $0
c0102c20:	6a 00                	push   $0x0
  pushl $29
c0102c22:	6a 1d                	push   $0x1d
  jmp __alltraps
c0102c24:	e9 d7 fe ff ff       	jmp    c0102b00 <__alltraps>

c0102c29 <vector30>:
.globl vector30
vector30:
  pushl $0
c0102c29:	6a 00                	push   $0x0
  pushl $30
c0102c2b:	6a 1e                	push   $0x1e
  jmp __alltraps
c0102c2d:	e9 ce fe ff ff       	jmp    c0102b00 <__alltraps>

c0102c32 <vector31>:
.globl vector31
vector31:
  pushl $0
c0102c32:	6a 00                	push   $0x0
  pushl $31
c0102c34:	6a 1f                	push   $0x1f
  jmp __alltraps
c0102c36:	e9 c5 fe ff ff       	jmp    c0102b00 <__alltraps>

c0102c3b <vector32>:
.globl vector32
vector32:
  pushl $0
c0102c3b:	6a 00                	push   $0x0
  pushl $32
c0102c3d:	6a 20                	push   $0x20
  jmp __alltraps
c0102c3f:	e9 bc fe ff ff       	jmp    c0102b00 <__alltraps>

c0102c44 <vector33>:
.globl vector33
vector33:
  pushl $0
c0102c44:	6a 00                	push   $0x0
  pushl $33
c0102c46:	6a 21                	push   $0x21
  jmp __alltraps
c0102c48:	e9 b3 fe ff ff       	jmp    c0102b00 <__alltraps>

c0102c4d <vector34>:
.globl vector34
vector34:
  pushl $0
c0102c4d:	6a 00                	push   $0x0
  pushl $34
c0102c4f:	6a 22                	push   $0x22
  jmp __alltraps
c0102c51:	e9 aa fe ff ff       	jmp    c0102b00 <__alltraps>

c0102c56 <vector35>:
.globl vector35
vector35:
  pushl $0
c0102c56:	6a 00                	push   $0x0
  pushl $35
c0102c58:	6a 23                	push   $0x23
  jmp __alltraps
c0102c5a:	e9 a1 fe ff ff       	jmp    c0102b00 <__alltraps>

c0102c5f <vector36>:
.globl vector36
vector36:
  pushl $0
c0102c5f:	6a 00                	push   $0x0
  pushl $36
c0102c61:	6a 24                	push   $0x24
  jmp __alltraps
c0102c63:	e9 98 fe ff ff       	jmp    c0102b00 <__alltraps>

c0102c68 <vector37>:
.globl vector37
vector37:
  pushl $0
c0102c68:	6a 00                	push   $0x0
  pushl $37
c0102c6a:	6a 25                	push   $0x25
  jmp __alltraps
c0102c6c:	e9 8f fe ff ff       	jmp    c0102b00 <__alltraps>

c0102c71 <vector38>:
.globl vector38
vector38:
  pushl $0
c0102c71:	6a 00                	push   $0x0
  pushl $38
c0102c73:	6a 26                	push   $0x26
  jmp __alltraps
c0102c75:	e9 86 fe ff ff       	jmp    c0102b00 <__alltraps>

c0102c7a <vector39>:
.globl vector39
vector39:
  pushl $0
c0102c7a:	6a 00                	push   $0x0
  pushl $39
c0102c7c:	6a 27                	push   $0x27
  jmp __alltraps
c0102c7e:	e9 7d fe ff ff       	jmp    c0102b00 <__alltraps>

c0102c83 <vector40>:
.globl vector40
vector40:
  pushl $0
c0102c83:	6a 00                	push   $0x0
  pushl $40
c0102c85:	6a 28                	push   $0x28
  jmp __alltraps
c0102c87:	e9 74 fe ff ff       	jmp    c0102b00 <__alltraps>

c0102c8c <vector41>:
.globl vector41
vector41:
  pushl $0
c0102c8c:	6a 00                	push   $0x0
  pushl $41
c0102c8e:	6a 29                	push   $0x29
  jmp __alltraps
c0102c90:	e9 6b fe ff ff       	jmp    c0102b00 <__alltraps>

c0102c95 <vector42>:
.globl vector42
vector42:
  pushl $0
c0102c95:	6a 00                	push   $0x0
  pushl $42
c0102c97:	6a 2a                	push   $0x2a
  jmp __alltraps
c0102c99:	e9 62 fe ff ff       	jmp    c0102b00 <__alltraps>

c0102c9e <vector43>:
.globl vector43
vector43:
  pushl $0
c0102c9e:	6a 00                	push   $0x0
  pushl $43
c0102ca0:	6a 2b                	push   $0x2b
  jmp __alltraps
c0102ca2:	e9 59 fe ff ff       	jmp    c0102b00 <__alltraps>

c0102ca7 <vector44>:
.globl vector44
vector44:
  pushl $0
c0102ca7:	6a 00                	push   $0x0
  pushl $44
c0102ca9:	6a 2c                	push   $0x2c
  jmp __alltraps
c0102cab:	e9 50 fe ff ff       	jmp    c0102b00 <__alltraps>

c0102cb0 <vector45>:
.globl vector45
vector45:
  pushl $0
c0102cb0:	6a 00                	push   $0x0
  pushl $45
c0102cb2:	6a 2d                	push   $0x2d
  jmp __alltraps
c0102cb4:	e9 47 fe ff ff       	jmp    c0102b00 <__alltraps>

c0102cb9 <vector46>:
.globl vector46
vector46:
  pushl $0
c0102cb9:	6a 00                	push   $0x0
  pushl $46
c0102cbb:	6a 2e                	push   $0x2e
  jmp __alltraps
c0102cbd:	e9 3e fe ff ff       	jmp    c0102b00 <__alltraps>

c0102cc2 <vector47>:
.globl vector47
vector47:
  pushl $0
c0102cc2:	6a 00                	push   $0x0
  pushl $47
c0102cc4:	6a 2f                	push   $0x2f
  jmp __alltraps
c0102cc6:	e9 35 fe ff ff       	jmp    c0102b00 <__alltraps>

c0102ccb <vector48>:
.globl vector48
vector48:
  pushl $0
c0102ccb:	6a 00                	push   $0x0
  pushl $48
c0102ccd:	6a 30                	push   $0x30
  jmp __alltraps
c0102ccf:	e9 2c fe ff ff       	jmp    c0102b00 <__alltraps>

c0102cd4 <vector49>:
.globl vector49
vector49:
  pushl $0
c0102cd4:	6a 00                	push   $0x0
  pushl $49
c0102cd6:	6a 31                	push   $0x31
  jmp __alltraps
c0102cd8:	e9 23 fe ff ff       	jmp    c0102b00 <__alltraps>

c0102cdd <vector50>:
.globl vector50
vector50:
  pushl $0
c0102cdd:	6a 00                	push   $0x0
  pushl $50
c0102cdf:	6a 32                	push   $0x32
  jmp __alltraps
c0102ce1:	e9 1a fe ff ff       	jmp    c0102b00 <__alltraps>

c0102ce6 <vector51>:
.globl vector51
vector51:
  pushl $0
c0102ce6:	6a 00                	push   $0x0
  pushl $51
c0102ce8:	6a 33                	push   $0x33
  jmp __alltraps
c0102cea:	e9 11 fe ff ff       	jmp    c0102b00 <__alltraps>

c0102cef <vector52>:
.globl vector52
vector52:
  pushl $0
c0102cef:	6a 00                	push   $0x0
  pushl $52
c0102cf1:	6a 34                	push   $0x34
  jmp __alltraps
c0102cf3:	e9 08 fe ff ff       	jmp    c0102b00 <__alltraps>

c0102cf8 <vector53>:
.globl vector53
vector53:
  pushl $0
c0102cf8:	6a 00                	push   $0x0
  pushl $53
c0102cfa:	6a 35                	push   $0x35
  jmp __alltraps
c0102cfc:	e9 ff fd ff ff       	jmp    c0102b00 <__alltraps>

c0102d01 <vector54>:
.globl vector54
vector54:
  pushl $0
c0102d01:	6a 00                	push   $0x0
  pushl $54
c0102d03:	6a 36                	push   $0x36
  jmp __alltraps
c0102d05:	e9 f6 fd ff ff       	jmp    c0102b00 <__alltraps>

c0102d0a <vector55>:
.globl vector55
vector55:
  pushl $0
c0102d0a:	6a 00                	push   $0x0
  pushl $55
c0102d0c:	6a 37                	push   $0x37
  jmp __alltraps
c0102d0e:	e9 ed fd ff ff       	jmp    c0102b00 <__alltraps>

c0102d13 <vector56>:
.globl vector56
vector56:
  pushl $0
c0102d13:	6a 00                	push   $0x0
  pushl $56
c0102d15:	6a 38                	push   $0x38
  jmp __alltraps
c0102d17:	e9 e4 fd ff ff       	jmp    c0102b00 <__alltraps>

c0102d1c <vector57>:
.globl vector57
vector57:
  pushl $0
c0102d1c:	6a 00                	push   $0x0
  pushl $57
c0102d1e:	6a 39                	push   $0x39
  jmp __alltraps
c0102d20:	e9 db fd ff ff       	jmp    c0102b00 <__alltraps>

c0102d25 <vector58>:
.globl vector58
vector58:
  pushl $0
c0102d25:	6a 00                	push   $0x0
  pushl $58
c0102d27:	6a 3a                	push   $0x3a
  jmp __alltraps
c0102d29:	e9 d2 fd ff ff       	jmp    c0102b00 <__alltraps>

c0102d2e <vector59>:
.globl vector59
vector59:
  pushl $0
c0102d2e:	6a 00                	push   $0x0
  pushl $59
c0102d30:	6a 3b                	push   $0x3b
  jmp __alltraps
c0102d32:	e9 c9 fd ff ff       	jmp    c0102b00 <__alltraps>

c0102d37 <vector60>:
.globl vector60
vector60:
  pushl $0
c0102d37:	6a 00                	push   $0x0
  pushl $60
c0102d39:	6a 3c                	push   $0x3c
  jmp __alltraps
c0102d3b:	e9 c0 fd ff ff       	jmp    c0102b00 <__alltraps>

c0102d40 <vector61>:
.globl vector61
vector61:
  pushl $0
c0102d40:	6a 00                	push   $0x0
  pushl $61
c0102d42:	6a 3d                	push   $0x3d
  jmp __alltraps
c0102d44:	e9 b7 fd ff ff       	jmp    c0102b00 <__alltraps>

c0102d49 <vector62>:
.globl vector62
vector62:
  pushl $0
c0102d49:	6a 00                	push   $0x0
  pushl $62
c0102d4b:	6a 3e                	push   $0x3e
  jmp __alltraps
c0102d4d:	e9 ae fd ff ff       	jmp    c0102b00 <__alltraps>

c0102d52 <vector63>:
.globl vector63
vector63:
  pushl $0
c0102d52:	6a 00                	push   $0x0
  pushl $63
c0102d54:	6a 3f                	push   $0x3f
  jmp __alltraps
c0102d56:	e9 a5 fd ff ff       	jmp    c0102b00 <__alltraps>

c0102d5b <vector64>:
.globl vector64
vector64:
  pushl $0
c0102d5b:	6a 00                	push   $0x0
  pushl $64
c0102d5d:	6a 40                	push   $0x40
  jmp __alltraps
c0102d5f:	e9 9c fd ff ff       	jmp    c0102b00 <__alltraps>

c0102d64 <vector65>:
.globl vector65
vector65:
  pushl $0
c0102d64:	6a 00                	push   $0x0
  pushl $65
c0102d66:	6a 41                	push   $0x41
  jmp __alltraps
c0102d68:	e9 93 fd ff ff       	jmp    c0102b00 <__alltraps>

c0102d6d <vector66>:
.globl vector66
vector66:
  pushl $0
c0102d6d:	6a 00                	push   $0x0
  pushl $66
c0102d6f:	6a 42                	push   $0x42
  jmp __alltraps
c0102d71:	e9 8a fd ff ff       	jmp    c0102b00 <__alltraps>

c0102d76 <vector67>:
.globl vector67
vector67:
  pushl $0
c0102d76:	6a 00                	push   $0x0
  pushl $67
c0102d78:	6a 43                	push   $0x43
  jmp __alltraps
c0102d7a:	e9 81 fd ff ff       	jmp    c0102b00 <__alltraps>

c0102d7f <vector68>:
.globl vector68
vector68:
  pushl $0
c0102d7f:	6a 00                	push   $0x0
  pushl $68
c0102d81:	6a 44                	push   $0x44
  jmp __alltraps
c0102d83:	e9 78 fd ff ff       	jmp    c0102b00 <__alltraps>

c0102d88 <vector69>:
.globl vector69
vector69:
  pushl $0
c0102d88:	6a 00                	push   $0x0
  pushl $69
c0102d8a:	6a 45                	push   $0x45
  jmp __alltraps
c0102d8c:	e9 6f fd ff ff       	jmp    c0102b00 <__alltraps>

c0102d91 <vector70>:
.globl vector70
vector70:
  pushl $0
c0102d91:	6a 00                	push   $0x0
  pushl $70
c0102d93:	6a 46                	push   $0x46
  jmp __alltraps
c0102d95:	e9 66 fd ff ff       	jmp    c0102b00 <__alltraps>

c0102d9a <vector71>:
.globl vector71
vector71:
  pushl $0
c0102d9a:	6a 00                	push   $0x0
  pushl $71
c0102d9c:	6a 47                	push   $0x47
  jmp __alltraps
c0102d9e:	e9 5d fd ff ff       	jmp    c0102b00 <__alltraps>

c0102da3 <vector72>:
.globl vector72
vector72:
  pushl $0
c0102da3:	6a 00                	push   $0x0
  pushl $72
c0102da5:	6a 48                	push   $0x48
  jmp __alltraps
c0102da7:	e9 54 fd ff ff       	jmp    c0102b00 <__alltraps>

c0102dac <vector73>:
.globl vector73
vector73:
  pushl $0
c0102dac:	6a 00                	push   $0x0
  pushl $73
c0102dae:	6a 49                	push   $0x49
  jmp __alltraps
c0102db0:	e9 4b fd ff ff       	jmp    c0102b00 <__alltraps>

c0102db5 <vector74>:
.globl vector74
vector74:
  pushl $0
c0102db5:	6a 00                	push   $0x0
  pushl $74
c0102db7:	6a 4a                	push   $0x4a
  jmp __alltraps
c0102db9:	e9 42 fd ff ff       	jmp    c0102b00 <__alltraps>

c0102dbe <vector75>:
.globl vector75
vector75:
  pushl $0
c0102dbe:	6a 00                	push   $0x0
  pushl $75
c0102dc0:	6a 4b                	push   $0x4b
  jmp __alltraps
c0102dc2:	e9 39 fd ff ff       	jmp    c0102b00 <__alltraps>

c0102dc7 <vector76>:
.globl vector76
vector76:
  pushl $0
c0102dc7:	6a 00                	push   $0x0
  pushl $76
c0102dc9:	6a 4c                	push   $0x4c
  jmp __alltraps
c0102dcb:	e9 30 fd ff ff       	jmp    c0102b00 <__alltraps>

c0102dd0 <vector77>:
.globl vector77
vector77:
  pushl $0
c0102dd0:	6a 00                	push   $0x0
  pushl $77
c0102dd2:	6a 4d                	push   $0x4d
  jmp __alltraps
c0102dd4:	e9 27 fd ff ff       	jmp    c0102b00 <__alltraps>

c0102dd9 <vector78>:
.globl vector78
vector78:
  pushl $0
c0102dd9:	6a 00                	push   $0x0
  pushl $78
c0102ddb:	6a 4e                	push   $0x4e
  jmp __alltraps
c0102ddd:	e9 1e fd ff ff       	jmp    c0102b00 <__alltraps>

c0102de2 <vector79>:
.globl vector79
vector79:
  pushl $0
c0102de2:	6a 00                	push   $0x0
  pushl $79
c0102de4:	6a 4f                	push   $0x4f
  jmp __alltraps
c0102de6:	e9 15 fd ff ff       	jmp    c0102b00 <__alltraps>

c0102deb <vector80>:
.globl vector80
vector80:
  pushl $0
c0102deb:	6a 00                	push   $0x0
  pushl $80
c0102ded:	6a 50                	push   $0x50
  jmp __alltraps
c0102def:	e9 0c fd ff ff       	jmp    c0102b00 <__alltraps>

c0102df4 <vector81>:
.globl vector81
vector81:
  pushl $0
c0102df4:	6a 00                	push   $0x0
  pushl $81
c0102df6:	6a 51                	push   $0x51
  jmp __alltraps
c0102df8:	e9 03 fd ff ff       	jmp    c0102b00 <__alltraps>

c0102dfd <vector82>:
.globl vector82
vector82:
  pushl $0
c0102dfd:	6a 00                	push   $0x0
  pushl $82
c0102dff:	6a 52                	push   $0x52
  jmp __alltraps
c0102e01:	e9 fa fc ff ff       	jmp    c0102b00 <__alltraps>

c0102e06 <vector83>:
.globl vector83
vector83:
  pushl $0
c0102e06:	6a 00                	push   $0x0
  pushl $83
c0102e08:	6a 53                	push   $0x53
  jmp __alltraps
c0102e0a:	e9 f1 fc ff ff       	jmp    c0102b00 <__alltraps>

c0102e0f <vector84>:
.globl vector84
vector84:
  pushl $0
c0102e0f:	6a 00                	push   $0x0
  pushl $84
c0102e11:	6a 54                	push   $0x54
  jmp __alltraps
c0102e13:	e9 e8 fc ff ff       	jmp    c0102b00 <__alltraps>

c0102e18 <vector85>:
.globl vector85
vector85:
  pushl $0
c0102e18:	6a 00                	push   $0x0
  pushl $85
c0102e1a:	6a 55                	push   $0x55
  jmp __alltraps
c0102e1c:	e9 df fc ff ff       	jmp    c0102b00 <__alltraps>

c0102e21 <vector86>:
.globl vector86
vector86:
  pushl $0
c0102e21:	6a 00                	push   $0x0
  pushl $86
c0102e23:	6a 56                	push   $0x56
  jmp __alltraps
c0102e25:	e9 d6 fc ff ff       	jmp    c0102b00 <__alltraps>

c0102e2a <vector87>:
.globl vector87
vector87:
  pushl $0
c0102e2a:	6a 00                	push   $0x0
  pushl $87
c0102e2c:	6a 57                	push   $0x57
  jmp __alltraps
c0102e2e:	e9 cd fc ff ff       	jmp    c0102b00 <__alltraps>

c0102e33 <vector88>:
.globl vector88
vector88:
  pushl $0
c0102e33:	6a 00                	push   $0x0
  pushl $88
c0102e35:	6a 58                	push   $0x58
  jmp __alltraps
c0102e37:	e9 c4 fc ff ff       	jmp    c0102b00 <__alltraps>

c0102e3c <vector89>:
.globl vector89
vector89:
  pushl $0
c0102e3c:	6a 00                	push   $0x0
  pushl $89
c0102e3e:	6a 59                	push   $0x59
  jmp __alltraps
c0102e40:	e9 bb fc ff ff       	jmp    c0102b00 <__alltraps>

c0102e45 <vector90>:
.globl vector90
vector90:
  pushl $0
c0102e45:	6a 00                	push   $0x0
  pushl $90
c0102e47:	6a 5a                	push   $0x5a
  jmp __alltraps
c0102e49:	e9 b2 fc ff ff       	jmp    c0102b00 <__alltraps>

c0102e4e <vector91>:
.globl vector91
vector91:
  pushl $0
c0102e4e:	6a 00                	push   $0x0
  pushl $91
c0102e50:	6a 5b                	push   $0x5b
  jmp __alltraps
c0102e52:	e9 a9 fc ff ff       	jmp    c0102b00 <__alltraps>

c0102e57 <vector92>:
.globl vector92
vector92:
  pushl $0
c0102e57:	6a 00                	push   $0x0
  pushl $92
c0102e59:	6a 5c                	push   $0x5c
  jmp __alltraps
c0102e5b:	e9 a0 fc ff ff       	jmp    c0102b00 <__alltraps>

c0102e60 <vector93>:
.globl vector93
vector93:
  pushl $0
c0102e60:	6a 00                	push   $0x0
  pushl $93
c0102e62:	6a 5d                	push   $0x5d
  jmp __alltraps
c0102e64:	e9 97 fc ff ff       	jmp    c0102b00 <__alltraps>

c0102e69 <vector94>:
.globl vector94
vector94:
  pushl $0
c0102e69:	6a 00                	push   $0x0
  pushl $94
c0102e6b:	6a 5e                	push   $0x5e
  jmp __alltraps
c0102e6d:	e9 8e fc ff ff       	jmp    c0102b00 <__alltraps>

c0102e72 <vector95>:
.globl vector95
vector95:
  pushl $0
c0102e72:	6a 00                	push   $0x0
  pushl $95
c0102e74:	6a 5f                	push   $0x5f
  jmp __alltraps
c0102e76:	e9 85 fc ff ff       	jmp    c0102b00 <__alltraps>

c0102e7b <vector96>:
.globl vector96
vector96:
  pushl $0
c0102e7b:	6a 00                	push   $0x0
  pushl $96
c0102e7d:	6a 60                	push   $0x60
  jmp __alltraps
c0102e7f:	e9 7c fc ff ff       	jmp    c0102b00 <__alltraps>

c0102e84 <vector97>:
.globl vector97
vector97:
  pushl $0
c0102e84:	6a 00                	push   $0x0
  pushl $97
c0102e86:	6a 61                	push   $0x61
  jmp __alltraps
c0102e88:	e9 73 fc ff ff       	jmp    c0102b00 <__alltraps>

c0102e8d <vector98>:
.globl vector98
vector98:
  pushl $0
c0102e8d:	6a 00                	push   $0x0
  pushl $98
c0102e8f:	6a 62                	push   $0x62
  jmp __alltraps
c0102e91:	e9 6a fc ff ff       	jmp    c0102b00 <__alltraps>

c0102e96 <vector99>:
.globl vector99
vector99:
  pushl $0
c0102e96:	6a 00                	push   $0x0
  pushl $99
c0102e98:	6a 63                	push   $0x63
  jmp __alltraps
c0102e9a:	e9 61 fc ff ff       	jmp    c0102b00 <__alltraps>

c0102e9f <vector100>:
.globl vector100
vector100:
  pushl $0
c0102e9f:	6a 00                	push   $0x0
  pushl $100
c0102ea1:	6a 64                	push   $0x64
  jmp __alltraps
c0102ea3:	e9 58 fc ff ff       	jmp    c0102b00 <__alltraps>

c0102ea8 <vector101>:
.globl vector101
vector101:
  pushl $0
c0102ea8:	6a 00                	push   $0x0
  pushl $101
c0102eaa:	6a 65                	push   $0x65
  jmp __alltraps
c0102eac:	e9 4f fc ff ff       	jmp    c0102b00 <__alltraps>

c0102eb1 <vector102>:
.globl vector102
vector102:
  pushl $0
c0102eb1:	6a 00                	push   $0x0
  pushl $102
c0102eb3:	6a 66                	push   $0x66
  jmp __alltraps
c0102eb5:	e9 46 fc ff ff       	jmp    c0102b00 <__alltraps>

c0102eba <vector103>:
.globl vector103
vector103:
  pushl $0
c0102eba:	6a 00                	push   $0x0
  pushl $103
c0102ebc:	6a 67                	push   $0x67
  jmp __alltraps
c0102ebe:	e9 3d fc ff ff       	jmp    c0102b00 <__alltraps>

c0102ec3 <vector104>:
.globl vector104
vector104:
  pushl $0
c0102ec3:	6a 00                	push   $0x0
  pushl $104
c0102ec5:	6a 68                	push   $0x68
  jmp __alltraps
c0102ec7:	e9 34 fc ff ff       	jmp    c0102b00 <__alltraps>

c0102ecc <vector105>:
.globl vector105
vector105:
  pushl $0
c0102ecc:	6a 00                	push   $0x0
  pushl $105
c0102ece:	6a 69                	push   $0x69
  jmp __alltraps
c0102ed0:	e9 2b fc ff ff       	jmp    c0102b00 <__alltraps>

c0102ed5 <vector106>:
.globl vector106
vector106:
  pushl $0
c0102ed5:	6a 00                	push   $0x0
  pushl $106
c0102ed7:	6a 6a                	push   $0x6a
  jmp __alltraps
c0102ed9:	e9 22 fc ff ff       	jmp    c0102b00 <__alltraps>

c0102ede <vector107>:
.globl vector107
vector107:
  pushl $0
c0102ede:	6a 00                	push   $0x0
  pushl $107
c0102ee0:	6a 6b                	push   $0x6b
  jmp __alltraps
c0102ee2:	e9 19 fc ff ff       	jmp    c0102b00 <__alltraps>

c0102ee7 <vector108>:
.globl vector108
vector108:
  pushl $0
c0102ee7:	6a 00                	push   $0x0
  pushl $108
c0102ee9:	6a 6c                	push   $0x6c
  jmp __alltraps
c0102eeb:	e9 10 fc ff ff       	jmp    c0102b00 <__alltraps>

c0102ef0 <vector109>:
.globl vector109
vector109:
  pushl $0
c0102ef0:	6a 00                	push   $0x0
  pushl $109
c0102ef2:	6a 6d                	push   $0x6d
  jmp __alltraps
c0102ef4:	e9 07 fc ff ff       	jmp    c0102b00 <__alltraps>

c0102ef9 <vector110>:
.globl vector110
vector110:
  pushl $0
c0102ef9:	6a 00                	push   $0x0
  pushl $110
c0102efb:	6a 6e                	push   $0x6e
  jmp __alltraps
c0102efd:	e9 fe fb ff ff       	jmp    c0102b00 <__alltraps>

c0102f02 <vector111>:
.globl vector111
vector111:
  pushl $0
c0102f02:	6a 00                	push   $0x0
  pushl $111
c0102f04:	6a 6f                	push   $0x6f
  jmp __alltraps
c0102f06:	e9 f5 fb ff ff       	jmp    c0102b00 <__alltraps>

c0102f0b <vector112>:
.globl vector112
vector112:
  pushl $0
c0102f0b:	6a 00                	push   $0x0
  pushl $112
c0102f0d:	6a 70                	push   $0x70
  jmp __alltraps
c0102f0f:	e9 ec fb ff ff       	jmp    c0102b00 <__alltraps>

c0102f14 <vector113>:
.globl vector113
vector113:
  pushl $0
c0102f14:	6a 00                	push   $0x0
  pushl $113
c0102f16:	6a 71                	push   $0x71
  jmp __alltraps
c0102f18:	e9 e3 fb ff ff       	jmp    c0102b00 <__alltraps>

c0102f1d <vector114>:
.globl vector114
vector114:
  pushl $0
c0102f1d:	6a 00                	push   $0x0
  pushl $114
c0102f1f:	6a 72                	push   $0x72
  jmp __alltraps
c0102f21:	e9 da fb ff ff       	jmp    c0102b00 <__alltraps>

c0102f26 <vector115>:
.globl vector115
vector115:
  pushl $0
c0102f26:	6a 00                	push   $0x0
  pushl $115
c0102f28:	6a 73                	push   $0x73
  jmp __alltraps
c0102f2a:	e9 d1 fb ff ff       	jmp    c0102b00 <__alltraps>

c0102f2f <vector116>:
.globl vector116
vector116:
  pushl $0
c0102f2f:	6a 00                	push   $0x0
  pushl $116
c0102f31:	6a 74                	push   $0x74
  jmp __alltraps
c0102f33:	e9 c8 fb ff ff       	jmp    c0102b00 <__alltraps>

c0102f38 <vector117>:
.globl vector117
vector117:
  pushl $0
c0102f38:	6a 00                	push   $0x0
  pushl $117
c0102f3a:	6a 75                	push   $0x75
  jmp __alltraps
c0102f3c:	e9 bf fb ff ff       	jmp    c0102b00 <__alltraps>

c0102f41 <vector118>:
.globl vector118
vector118:
  pushl $0
c0102f41:	6a 00                	push   $0x0
  pushl $118
c0102f43:	6a 76                	push   $0x76
  jmp __alltraps
c0102f45:	e9 b6 fb ff ff       	jmp    c0102b00 <__alltraps>

c0102f4a <vector119>:
.globl vector119
vector119:
  pushl $0
c0102f4a:	6a 00                	push   $0x0
  pushl $119
c0102f4c:	6a 77                	push   $0x77
  jmp __alltraps
c0102f4e:	e9 ad fb ff ff       	jmp    c0102b00 <__alltraps>

c0102f53 <vector120>:
.globl vector120
vector120:
  pushl $0
c0102f53:	6a 00                	push   $0x0
  pushl $120
c0102f55:	6a 78                	push   $0x78
  jmp __alltraps
c0102f57:	e9 a4 fb ff ff       	jmp    c0102b00 <__alltraps>

c0102f5c <vector121>:
.globl vector121
vector121:
  pushl $0
c0102f5c:	6a 00                	push   $0x0
  pushl $121
c0102f5e:	6a 79                	push   $0x79
  jmp __alltraps
c0102f60:	e9 9b fb ff ff       	jmp    c0102b00 <__alltraps>

c0102f65 <vector122>:
.globl vector122
vector122:
  pushl $0
c0102f65:	6a 00                	push   $0x0
  pushl $122
c0102f67:	6a 7a                	push   $0x7a
  jmp __alltraps
c0102f69:	e9 92 fb ff ff       	jmp    c0102b00 <__alltraps>

c0102f6e <vector123>:
.globl vector123
vector123:
  pushl $0
c0102f6e:	6a 00                	push   $0x0
  pushl $123
c0102f70:	6a 7b                	push   $0x7b
  jmp __alltraps
c0102f72:	e9 89 fb ff ff       	jmp    c0102b00 <__alltraps>

c0102f77 <vector124>:
.globl vector124
vector124:
  pushl $0
c0102f77:	6a 00                	push   $0x0
  pushl $124
c0102f79:	6a 7c                	push   $0x7c
  jmp __alltraps
c0102f7b:	e9 80 fb ff ff       	jmp    c0102b00 <__alltraps>

c0102f80 <vector125>:
.globl vector125
vector125:
  pushl $0
c0102f80:	6a 00                	push   $0x0
  pushl $125
c0102f82:	6a 7d                	push   $0x7d
  jmp __alltraps
c0102f84:	e9 77 fb ff ff       	jmp    c0102b00 <__alltraps>

c0102f89 <vector126>:
.globl vector126
vector126:
  pushl $0
c0102f89:	6a 00                	push   $0x0
  pushl $126
c0102f8b:	6a 7e                	push   $0x7e
  jmp __alltraps
c0102f8d:	e9 6e fb ff ff       	jmp    c0102b00 <__alltraps>

c0102f92 <vector127>:
.globl vector127
vector127:
  pushl $0
c0102f92:	6a 00                	push   $0x0
  pushl $127
c0102f94:	6a 7f                	push   $0x7f
  jmp __alltraps
c0102f96:	e9 65 fb ff ff       	jmp    c0102b00 <__alltraps>

c0102f9b <vector128>:
.globl vector128
vector128:
  pushl $0
c0102f9b:	6a 00                	push   $0x0
  pushl $128
c0102f9d:	68 80 00 00 00       	push   $0x80
  jmp __alltraps
c0102fa2:	e9 59 fb ff ff       	jmp    c0102b00 <__alltraps>

c0102fa7 <vector129>:
.globl vector129
vector129:
  pushl $0
c0102fa7:	6a 00                	push   $0x0
  pushl $129
c0102fa9:	68 81 00 00 00       	push   $0x81
  jmp __alltraps
c0102fae:	e9 4d fb ff ff       	jmp    c0102b00 <__alltraps>

c0102fb3 <vector130>:
.globl vector130
vector130:
  pushl $0
c0102fb3:	6a 00                	push   $0x0
  pushl $130
c0102fb5:	68 82 00 00 00       	push   $0x82
  jmp __alltraps
c0102fba:	e9 41 fb ff ff       	jmp    c0102b00 <__alltraps>

c0102fbf <vector131>:
.globl vector131
vector131:
  pushl $0
c0102fbf:	6a 00                	push   $0x0
  pushl $131
c0102fc1:	68 83 00 00 00       	push   $0x83
  jmp __alltraps
c0102fc6:	e9 35 fb ff ff       	jmp    c0102b00 <__alltraps>

c0102fcb <vector132>:
.globl vector132
vector132:
  pushl $0
c0102fcb:	6a 00                	push   $0x0
  pushl $132
c0102fcd:	68 84 00 00 00       	push   $0x84
  jmp __alltraps
c0102fd2:	e9 29 fb ff ff       	jmp    c0102b00 <__alltraps>

c0102fd7 <vector133>:
.globl vector133
vector133:
  pushl $0
c0102fd7:	6a 00                	push   $0x0
  pushl $133
c0102fd9:	68 85 00 00 00       	push   $0x85
  jmp __alltraps
c0102fde:	e9 1d fb ff ff       	jmp    c0102b00 <__alltraps>

c0102fe3 <vector134>:
.globl vector134
vector134:
  pushl $0
c0102fe3:	6a 00                	push   $0x0
  pushl $134
c0102fe5:	68 86 00 00 00       	push   $0x86
  jmp __alltraps
c0102fea:	e9 11 fb ff ff       	jmp    c0102b00 <__alltraps>

c0102fef <vector135>:
.globl vector135
vector135:
  pushl $0
c0102fef:	6a 00                	push   $0x0
  pushl $135
c0102ff1:	68 87 00 00 00       	push   $0x87
  jmp __alltraps
c0102ff6:	e9 05 fb ff ff       	jmp    c0102b00 <__alltraps>

c0102ffb <vector136>:
.globl vector136
vector136:
  pushl $0
c0102ffb:	6a 00                	push   $0x0
  pushl $136
c0102ffd:	68 88 00 00 00       	push   $0x88
  jmp __alltraps
c0103002:	e9 f9 fa ff ff       	jmp    c0102b00 <__alltraps>

c0103007 <vector137>:
.globl vector137
vector137:
  pushl $0
c0103007:	6a 00                	push   $0x0
  pushl $137
c0103009:	68 89 00 00 00       	push   $0x89
  jmp __alltraps
c010300e:	e9 ed fa ff ff       	jmp    c0102b00 <__alltraps>

c0103013 <vector138>:
.globl vector138
vector138:
  pushl $0
c0103013:	6a 00                	push   $0x0
  pushl $138
c0103015:	68 8a 00 00 00       	push   $0x8a
  jmp __alltraps
c010301a:	e9 e1 fa ff ff       	jmp    c0102b00 <__alltraps>

c010301f <vector139>:
.globl vector139
vector139:
  pushl $0
c010301f:	6a 00                	push   $0x0
  pushl $139
c0103021:	68 8b 00 00 00       	push   $0x8b
  jmp __alltraps
c0103026:	e9 d5 fa ff ff       	jmp    c0102b00 <__alltraps>

c010302b <vector140>:
.globl vector140
vector140:
  pushl $0
c010302b:	6a 00                	push   $0x0
  pushl $140
c010302d:	68 8c 00 00 00       	push   $0x8c
  jmp __alltraps
c0103032:	e9 c9 fa ff ff       	jmp    c0102b00 <__alltraps>

c0103037 <vector141>:
.globl vector141
vector141:
  pushl $0
c0103037:	6a 00                	push   $0x0
  pushl $141
c0103039:	68 8d 00 00 00       	push   $0x8d
  jmp __alltraps
c010303e:	e9 bd fa ff ff       	jmp    c0102b00 <__alltraps>

c0103043 <vector142>:
.globl vector142
vector142:
  pushl $0
c0103043:	6a 00                	push   $0x0
  pushl $142
c0103045:	68 8e 00 00 00       	push   $0x8e
  jmp __alltraps
c010304a:	e9 b1 fa ff ff       	jmp    c0102b00 <__alltraps>

c010304f <vector143>:
.globl vector143
vector143:
  pushl $0
c010304f:	6a 00                	push   $0x0
  pushl $143
c0103051:	68 8f 00 00 00       	push   $0x8f
  jmp __alltraps
c0103056:	e9 a5 fa ff ff       	jmp    c0102b00 <__alltraps>

c010305b <vector144>:
.globl vector144
vector144:
  pushl $0
c010305b:	6a 00                	push   $0x0
  pushl $144
c010305d:	68 90 00 00 00       	push   $0x90
  jmp __alltraps
c0103062:	e9 99 fa ff ff       	jmp    c0102b00 <__alltraps>

c0103067 <vector145>:
.globl vector145
vector145:
  pushl $0
c0103067:	6a 00                	push   $0x0
  pushl $145
c0103069:	68 91 00 00 00       	push   $0x91
  jmp __alltraps
c010306e:	e9 8d fa ff ff       	jmp    c0102b00 <__alltraps>

c0103073 <vector146>:
.globl vector146
vector146:
  pushl $0
c0103073:	6a 00                	push   $0x0
  pushl $146
c0103075:	68 92 00 00 00       	push   $0x92
  jmp __alltraps
c010307a:	e9 81 fa ff ff       	jmp    c0102b00 <__alltraps>

c010307f <vector147>:
.globl vector147
vector147:
  pushl $0
c010307f:	6a 00                	push   $0x0
  pushl $147
c0103081:	68 93 00 00 00       	push   $0x93
  jmp __alltraps
c0103086:	e9 75 fa ff ff       	jmp    c0102b00 <__alltraps>

c010308b <vector148>:
.globl vector148
vector148:
  pushl $0
c010308b:	6a 00                	push   $0x0
  pushl $148
c010308d:	68 94 00 00 00       	push   $0x94
  jmp __alltraps
c0103092:	e9 69 fa ff ff       	jmp    c0102b00 <__alltraps>

c0103097 <vector149>:
.globl vector149
vector149:
  pushl $0
c0103097:	6a 00                	push   $0x0
  pushl $149
c0103099:	68 95 00 00 00       	push   $0x95
  jmp __alltraps
c010309e:	e9 5d fa ff ff       	jmp    c0102b00 <__alltraps>

c01030a3 <vector150>:
.globl vector150
vector150:
  pushl $0
c01030a3:	6a 00                	push   $0x0
  pushl $150
c01030a5:	68 96 00 00 00       	push   $0x96
  jmp __alltraps
c01030aa:	e9 51 fa ff ff       	jmp    c0102b00 <__alltraps>

c01030af <vector151>:
.globl vector151
vector151:
  pushl $0
c01030af:	6a 00                	push   $0x0
  pushl $151
c01030b1:	68 97 00 00 00       	push   $0x97
  jmp __alltraps
c01030b6:	e9 45 fa ff ff       	jmp    c0102b00 <__alltraps>

c01030bb <vector152>:
.globl vector152
vector152:
  pushl $0
c01030bb:	6a 00                	push   $0x0
  pushl $152
c01030bd:	68 98 00 00 00       	push   $0x98
  jmp __alltraps
c01030c2:	e9 39 fa ff ff       	jmp    c0102b00 <__alltraps>

c01030c7 <vector153>:
.globl vector153
vector153:
  pushl $0
c01030c7:	6a 00                	push   $0x0
  pushl $153
c01030c9:	68 99 00 00 00       	push   $0x99
  jmp __alltraps
c01030ce:	e9 2d fa ff ff       	jmp    c0102b00 <__alltraps>

c01030d3 <vector154>:
.globl vector154
vector154:
  pushl $0
c01030d3:	6a 00                	push   $0x0
  pushl $154
c01030d5:	68 9a 00 00 00       	push   $0x9a
  jmp __alltraps
c01030da:	e9 21 fa ff ff       	jmp    c0102b00 <__alltraps>

c01030df <vector155>:
.globl vector155
vector155:
  pushl $0
c01030df:	6a 00                	push   $0x0
  pushl $155
c01030e1:	68 9b 00 00 00       	push   $0x9b
  jmp __alltraps
c01030e6:	e9 15 fa ff ff       	jmp    c0102b00 <__alltraps>

c01030eb <vector156>:
.globl vector156
vector156:
  pushl $0
c01030eb:	6a 00                	push   $0x0
  pushl $156
c01030ed:	68 9c 00 00 00       	push   $0x9c
  jmp __alltraps
c01030f2:	e9 09 fa ff ff       	jmp    c0102b00 <__alltraps>

c01030f7 <vector157>:
.globl vector157
vector157:
  pushl $0
c01030f7:	6a 00                	push   $0x0
  pushl $157
c01030f9:	68 9d 00 00 00       	push   $0x9d
  jmp __alltraps
c01030fe:	e9 fd f9 ff ff       	jmp    c0102b00 <__alltraps>

c0103103 <vector158>:
.globl vector158
vector158:
  pushl $0
c0103103:	6a 00                	push   $0x0
  pushl $158
c0103105:	68 9e 00 00 00       	push   $0x9e
  jmp __alltraps
c010310a:	e9 f1 f9 ff ff       	jmp    c0102b00 <__alltraps>

c010310f <vector159>:
.globl vector159
vector159:
  pushl $0
c010310f:	6a 00                	push   $0x0
  pushl $159
c0103111:	68 9f 00 00 00       	push   $0x9f
  jmp __alltraps
c0103116:	e9 e5 f9 ff ff       	jmp    c0102b00 <__alltraps>

c010311b <vector160>:
.globl vector160
vector160:
  pushl $0
c010311b:	6a 00                	push   $0x0
  pushl $160
c010311d:	68 a0 00 00 00       	push   $0xa0
  jmp __alltraps
c0103122:	e9 d9 f9 ff ff       	jmp    c0102b00 <__alltraps>

c0103127 <vector161>:
.globl vector161
vector161:
  pushl $0
c0103127:	6a 00                	push   $0x0
  pushl $161
c0103129:	68 a1 00 00 00       	push   $0xa1
  jmp __alltraps
c010312e:	e9 cd f9 ff ff       	jmp    c0102b00 <__alltraps>

c0103133 <vector162>:
.globl vector162
vector162:
  pushl $0
c0103133:	6a 00                	push   $0x0
  pushl $162
c0103135:	68 a2 00 00 00       	push   $0xa2
  jmp __alltraps
c010313a:	e9 c1 f9 ff ff       	jmp    c0102b00 <__alltraps>

c010313f <vector163>:
.globl vector163
vector163:
  pushl $0
c010313f:	6a 00                	push   $0x0
  pushl $163
c0103141:	68 a3 00 00 00       	push   $0xa3
  jmp __alltraps
c0103146:	e9 b5 f9 ff ff       	jmp    c0102b00 <__alltraps>

c010314b <vector164>:
.globl vector164
vector164:
  pushl $0
c010314b:	6a 00                	push   $0x0
  pushl $164
c010314d:	68 a4 00 00 00       	push   $0xa4
  jmp __alltraps
c0103152:	e9 a9 f9 ff ff       	jmp    c0102b00 <__alltraps>

c0103157 <vector165>:
.globl vector165
vector165:
  pushl $0
c0103157:	6a 00                	push   $0x0
  pushl $165
c0103159:	68 a5 00 00 00       	push   $0xa5
  jmp __alltraps
c010315e:	e9 9d f9 ff ff       	jmp    c0102b00 <__alltraps>

c0103163 <vector166>:
.globl vector166
vector166:
  pushl $0
c0103163:	6a 00                	push   $0x0
  pushl $166
c0103165:	68 a6 00 00 00       	push   $0xa6
  jmp __alltraps
c010316a:	e9 91 f9 ff ff       	jmp    c0102b00 <__alltraps>

c010316f <vector167>:
.globl vector167
vector167:
  pushl $0
c010316f:	6a 00                	push   $0x0
  pushl $167
c0103171:	68 a7 00 00 00       	push   $0xa7
  jmp __alltraps
c0103176:	e9 85 f9 ff ff       	jmp    c0102b00 <__alltraps>

c010317b <vector168>:
.globl vector168
vector168:
  pushl $0
c010317b:	6a 00                	push   $0x0
  pushl $168
c010317d:	68 a8 00 00 00       	push   $0xa8
  jmp __alltraps
c0103182:	e9 79 f9 ff ff       	jmp    c0102b00 <__alltraps>

c0103187 <vector169>:
.globl vector169
vector169:
  pushl $0
c0103187:	6a 00                	push   $0x0
  pushl $169
c0103189:	68 a9 00 00 00       	push   $0xa9
  jmp __alltraps
c010318e:	e9 6d f9 ff ff       	jmp    c0102b00 <__alltraps>

c0103193 <vector170>:
.globl vector170
vector170:
  pushl $0
c0103193:	6a 00                	push   $0x0
  pushl $170
c0103195:	68 aa 00 00 00       	push   $0xaa
  jmp __alltraps
c010319a:	e9 61 f9 ff ff       	jmp    c0102b00 <__alltraps>

c010319f <vector171>:
.globl vector171
vector171:
  pushl $0
c010319f:	6a 00                	push   $0x0
  pushl $171
c01031a1:	68 ab 00 00 00       	push   $0xab
  jmp __alltraps
c01031a6:	e9 55 f9 ff ff       	jmp    c0102b00 <__alltraps>

c01031ab <vector172>:
.globl vector172
vector172:
  pushl $0
c01031ab:	6a 00                	push   $0x0
  pushl $172
c01031ad:	68 ac 00 00 00       	push   $0xac
  jmp __alltraps
c01031b2:	e9 49 f9 ff ff       	jmp    c0102b00 <__alltraps>

c01031b7 <vector173>:
.globl vector173
vector173:
  pushl $0
c01031b7:	6a 00                	push   $0x0
  pushl $173
c01031b9:	68 ad 00 00 00       	push   $0xad
  jmp __alltraps
c01031be:	e9 3d f9 ff ff       	jmp    c0102b00 <__alltraps>

c01031c3 <vector174>:
.globl vector174
vector174:
  pushl $0
c01031c3:	6a 00                	push   $0x0
  pushl $174
c01031c5:	68 ae 00 00 00       	push   $0xae
  jmp __alltraps
c01031ca:	e9 31 f9 ff ff       	jmp    c0102b00 <__alltraps>

c01031cf <vector175>:
.globl vector175
vector175:
  pushl $0
c01031cf:	6a 00                	push   $0x0
  pushl $175
c01031d1:	68 af 00 00 00       	push   $0xaf
  jmp __alltraps
c01031d6:	e9 25 f9 ff ff       	jmp    c0102b00 <__alltraps>

c01031db <vector176>:
.globl vector176
vector176:
  pushl $0
c01031db:	6a 00                	push   $0x0
  pushl $176
c01031dd:	68 b0 00 00 00       	push   $0xb0
  jmp __alltraps
c01031e2:	e9 19 f9 ff ff       	jmp    c0102b00 <__alltraps>

c01031e7 <vector177>:
.globl vector177
vector177:
  pushl $0
c01031e7:	6a 00                	push   $0x0
  pushl $177
c01031e9:	68 b1 00 00 00       	push   $0xb1
  jmp __alltraps
c01031ee:	e9 0d f9 ff ff       	jmp    c0102b00 <__alltraps>

c01031f3 <vector178>:
.globl vector178
vector178:
  pushl $0
c01031f3:	6a 00                	push   $0x0
  pushl $178
c01031f5:	68 b2 00 00 00       	push   $0xb2
  jmp __alltraps
c01031fa:	e9 01 f9 ff ff       	jmp    c0102b00 <__alltraps>

c01031ff <vector179>:
.globl vector179
vector179:
  pushl $0
c01031ff:	6a 00                	push   $0x0
  pushl $179
c0103201:	68 b3 00 00 00       	push   $0xb3
  jmp __alltraps
c0103206:	e9 f5 f8 ff ff       	jmp    c0102b00 <__alltraps>

c010320b <vector180>:
.globl vector180
vector180:
  pushl $0
c010320b:	6a 00                	push   $0x0
  pushl $180
c010320d:	68 b4 00 00 00       	push   $0xb4
  jmp __alltraps
c0103212:	e9 e9 f8 ff ff       	jmp    c0102b00 <__alltraps>

c0103217 <vector181>:
.globl vector181
vector181:
  pushl $0
c0103217:	6a 00                	push   $0x0
  pushl $181
c0103219:	68 b5 00 00 00       	push   $0xb5
  jmp __alltraps
c010321e:	e9 dd f8 ff ff       	jmp    c0102b00 <__alltraps>

c0103223 <vector182>:
.globl vector182
vector182:
  pushl $0
c0103223:	6a 00                	push   $0x0
  pushl $182
c0103225:	68 b6 00 00 00       	push   $0xb6
  jmp __alltraps
c010322a:	e9 d1 f8 ff ff       	jmp    c0102b00 <__alltraps>

c010322f <vector183>:
.globl vector183
vector183:
  pushl $0
c010322f:	6a 00                	push   $0x0
  pushl $183
c0103231:	68 b7 00 00 00       	push   $0xb7
  jmp __alltraps
c0103236:	e9 c5 f8 ff ff       	jmp    c0102b00 <__alltraps>

c010323b <vector184>:
.globl vector184
vector184:
  pushl $0
c010323b:	6a 00                	push   $0x0
  pushl $184
c010323d:	68 b8 00 00 00       	push   $0xb8
  jmp __alltraps
c0103242:	e9 b9 f8 ff ff       	jmp    c0102b00 <__alltraps>

c0103247 <vector185>:
.globl vector185
vector185:
  pushl $0
c0103247:	6a 00                	push   $0x0
  pushl $185
c0103249:	68 b9 00 00 00       	push   $0xb9
  jmp __alltraps
c010324e:	e9 ad f8 ff ff       	jmp    c0102b00 <__alltraps>

c0103253 <vector186>:
.globl vector186
vector186:
  pushl $0
c0103253:	6a 00                	push   $0x0
  pushl $186
c0103255:	68 ba 00 00 00       	push   $0xba
  jmp __alltraps
c010325a:	e9 a1 f8 ff ff       	jmp    c0102b00 <__alltraps>

c010325f <vector187>:
.globl vector187
vector187:
  pushl $0
c010325f:	6a 00                	push   $0x0
  pushl $187
c0103261:	68 bb 00 00 00       	push   $0xbb
  jmp __alltraps
c0103266:	e9 95 f8 ff ff       	jmp    c0102b00 <__alltraps>

c010326b <vector188>:
.globl vector188
vector188:
  pushl $0
c010326b:	6a 00                	push   $0x0
  pushl $188
c010326d:	68 bc 00 00 00       	push   $0xbc
  jmp __alltraps
c0103272:	e9 89 f8 ff ff       	jmp    c0102b00 <__alltraps>

c0103277 <vector189>:
.globl vector189
vector189:
  pushl $0
c0103277:	6a 00                	push   $0x0
  pushl $189
c0103279:	68 bd 00 00 00       	push   $0xbd
  jmp __alltraps
c010327e:	e9 7d f8 ff ff       	jmp    c0102b00 <__alltraps>

c0103283 <vector190>:
.globl vector190
vector190:
  pushl $0
c0103283:	6a 00                	push   $0x0
  pushl $190
c0103285:	68 be 00 00 00       	push   $0xbe
  jmp __alltraps
c010328a:	e9 71 f8 ff ff       	jmp    c0102b00 <__alltraps>

c010328f <vector191>:
.globl vector191
vector191:
  pushl $0
c010328f:	6a 00                	push   $0x0
  pushl $191
c0103291:	68 bf 00 00 00       	push   $0xbf
  jmp __alltraps
c0103296:	e9 65 f8 ff ff       	jmp    c0102b00 <__alltraps>

c010329b <vector192>:
.globl vector192
vector192:
  pushl $0
c010329b:	6a 00                	push   $0x0
  pushl $192
c010329d:	68 c0 00 00 00       	push   $0xc0
  jmp __alltraps
c01032a2:	e9 59 f8 ff ff       	jmp    c0102b00 <__alltraps>

c01032a7 <vector193>:
.globl vector193
vector193:
  pushl $0
c01032a7:	6a 00                	push   $0x0
  pushl $193
c01032a9:	68 c1 00 00 00       	push   $0xc1
  jmp __alltraps
c01032ae:	e9 4d f8 ff ff       	jmp    c0102b00 <__alltraps>

c01032b3 <vector194>:
.globl vector194
vector194:
  pushl $0
c01032b3:	6a 00                	push   $0x0
  pushl $194
c01032b5:	68 c2 00 00 00       	push   $0xc2
  jmp __alltraps
c01032ba:	e9 41 f8 ff ff       	jmp    c0102b00 <__alltraps>

c01032bf <vector195>:
.globl vector195
vector195:
  pushl $0
c01032bf:	6a 00                	push   $0x0
  pushl $195
c01032c1:	68 c3 00 00 00       	push   $0xc3
  jmp __alltraps
c01032c6:	e9 35 f8 ff ff       	jmp    c0102b00 <__alltraps>

c01032cb <vector196>:
.globl vector196
vector196:
  pushl $0
c01032cb:	6a 00                	push   $0x0
  pushl $196
c01032cd:	68 c4 00 00 00       	push   $0xc4
  jmp __alltraps
c01032d2:	e9 29 f8 ff ff       	jmp    c0102b00 <__alltraps>

c01032d7 <vector197>:
.globl vector197
vector197:
  pushl $0
c01032d7:	6a 00                	push   $0x0
  pushl $197
c01032d9:	68 c5 00 00 00       	push   $0xc5
  jmp __alltraps
c01032de:	e9 1d f8 ff ff       	jmp    c0102b00 <__alltraps>

c01032e3 <vector198>:
.globl vector198
vector198:
  pushl $0
c01032e3:	6a 00                	push   $0x0
  pushl $198
c01032e5:	68 c6 00 00 00       	push   $0xc6
  jmp __alltraps
c01032ea:	e9 11 f8 ff ff       	jmp    c0102b00 <__alltraps>

c01032ef <vector199>:
.globl vector199
vector199:
  pushl $0
c01032ef:	6a 00                	push   $0x0
  pushl $199
c01032f1:	68 c7 00 00 00       	push   $0xc7
  jmp __alltraps
c01032f6:	e9 05 f8 ff ff       	jmp    c0102b00 <__alltraps>

c01032fb <vector200>:
.globl vector200
vector200:
  pushl $0
c01032fb:	6a 00                	push   $0x0
  pushl $200
c01032fd:	68 c8 00 00 00       	push   $0xc8
  jmp __alltraps
c0103302:	e9 f9 f7 ff ff       	jmp    c0102b00 <__alltraps>

c0103307 <vector201>:
.globl vector201
vector201:
  pushl $0
c0103307:	6a 00                	push   $0x0
  pushl $201
c0103309:	68 c9 00 00 00       	push   $0xc9
  jmp __alltraps
c010330e:	e9 ed f7 ff ff       	jmp    c0102b00 <__alltraps>

c0103313 <vector202>:
.globl vector202
vector202:
  pushl $0
c0103313:	6a 00                	push   $0x0
  pushl $202
c0103315:	68 ca 00 00 00       	push   $0xca
  jmp __alltraps
c010331a:	e9 e1 f7 ff ff       	jmp    c0102b00 <__alltraps>

c010331f <vector203>:
.globl vector203
vector203:
  pushl $0
c010331f:	6a 00                	push   $0x0
  pushl $203
c0103321:	68 cb 00 00 00       	push   $0xcb
  jmp __alltraps
c0103326:	e9 d5 f7 ff ff       	jmp    c0102b00 <__alltraps>

c010332b <vector204>:
.globl vector204
vector204:
  pushl $0
c010332b:	6a 00                	push   $0x0
  pushl $204
c010332d:	68 cc 00 00 00       	push   $0xcc
  jmp __alltraps
c0103332:	e9 c9 f7 ff ff       	jmp    c0102b00 <__alltraps>

c0103337 <vector205>:
.globl vector205
vector205:
  pushl $0
c0103337:	6a 00                	push   $0x0
  pushl $205
c0103339:	68 cd 00 00 00       	push   $0xcd
  jmp __alltraps
c010333e:	e9 bd f7 ff ff       	jmp    c0102b00 <__alltraps>

c0103343 <vector206>:
.globl vector206
vector206:
  pushl $0
c0103343:	6a 00                	push   $0x0
  pushl $206
c0103345:	68 ce 00 00 00       	push   $0xce
  jmp __alltraps
c010334a:	e9 b1 f7 ff ff       	jmp    c0102b00 <__alltraps>

c010334f <vector207>:
.globl vector207
vector207:
  pushl $0
c010334f:	6a 00                	push   $0x0
  pushl $207
c0103351:	68 cf 00 00 00       	push   $0xcf
  jmp __alltraps
c0103356:	e9 a5 f7 ff ff       	jmp    c0102b00 <__alltraps>

c010335b <vector208>:
.globl vector208
vector208:
  pushl $0
c010335b:	6a 00                	push   $0x0
  pushl $208
c010335d:	68 d0 00 00 00       	push   $0xd0
  jmp __alltraps
c0103362:	e9 99 f7 ff ff       	jmp    c0102b00 <__alltraps>

c0103367 <vector209>:
.globl vector209
vector209:
  pushl $0
c0103367:	6a 00                	push   $0x0
  pushl $209
c0103369:	68 d1 00 00 00       	push   $0xd1
  jmp __alltraps
c010336e:	e9 8d f7 ff ff       	jmp    c0102b00 <__alltraps>

c0103373 <vector210>:
.globl vector210
vector210:
  pushl $0
c0103373:	6a 00                	push   $0x0
  pushl $210
c0103375:	68 d2 00 00 00       	push   $0xd2
  jmp __alltraps
c010337a:	e9 81 f7 ff ff       	jmp    c0102b00 <__alltraps>

c010337f <vector211>:
.globl vector211
vector211:
  pushl $0
c010337f:	6a 00                	push   $0x0
  pushl $211
c0103381:	68 d3 00 00 00       	push   $0xd3
  jmp __alltraps
c0103386:	e9 75 f7 ff ff       	jmp    c0102b00 <__alltraps>

c010338b <vector212>:
.globl vector212
vector212:
  pushl $0
c010338b:	6a 00                	push   $0x0
  pushl $212
c010338d:	68 d4 00 00 00       	push   $0xd4
  jmp __alltraps
c0103392:	e9 69 f7 ff ff       	jmp    c0102b00 <__alltraps>

c0103397 <vector213>:
.globl vector213
vector213:
  pushl $0
c0103397:	6a 00                	push   $0x0
  pushl $213
c0103399:	68 d5 00 00 00       	push   $0xd5
  jmp __alltraps
c010339e:	e9 5d f7 ff ff       	jmp    c0102b00 <__alltraps>

c01033a3 <vector214>:
.globl vector214
vector214:
  pushl $0
c01033a3:	6a 00                	push   $0x0
  pushl $214
c01033a5:	68 d6 00 00 00       	push   $0xd6
  jmp __alltraps
c01033aa:	e9 51 f7 ff ff       	jmp    c0102b00 <__alltraps>

c01033af <vector215>:
.globl vector215
vector215:
  pushl $0
c01033af:	6a 00                	push   $0x0
  pushl $215
c01033b1:	68 d7 00 00 00       	push   $0xd7
  jmp __alltraps
c01033b6:	e9 45 f7 ff ff       	jmp    c0102b00 <__alltraps>

c01033bb <vector216>:
.globl vector216
vector216:
  pushl $0
c01033bb:	6a 00                	push   $0x0
  pushl $216
c01033bd:	68 d8 00 00 00       	push   $0xd8
  jmp __alltraps
c01033c2:	e9 39 f7 ff ff       	jmp    c0102b00 <__alltraps>

c01033c7 <vector217>:
.globl vector217
vector217:
  pushl $0
c01033c7:	6a 00                	push   $0x0
  pushl $217
c01033c9:	68 d9 00 00 00       	push   $0xd9
  jmp __alltraps
c01033ce:	e9 2d f7 ff ff       	jmp    c0102b00 <__alltraps>

c01033d3 <vector218>:
.globl vector218
vector218:
  pushl $0
c01033d3:	6a 00                	push   $0x0
  pushl $218
c01033d5:	68 da 00 00 00       	push   $0xda
  jmp __alltraps
c01033da:	e9 21 f7 ff ff       	jmp    c0102b00 <__alltraps>

c01033df <vector219>:
.globl vector219
vector219:
  pushl $0
c01033df:	6a 00                	push   $0x0
  pushl $219
c01033e1:	68 db 00 00 00       	push   $0xdb
  jmp __alltraps
c01033e6:	e9 15 f7 ff ff       	jmp    c0102b00 <__alltraps>

c01033eb <vector220>:
.globl vector220
vector220:
  pushl $0
c01033eb:	6a 00                	push   $0x0
  pushl $220
c01033ed:	68 dc 00 00 00       	push   $0xdc
  jmp __alltraps
c01033f2:	e9 09 f7 ff ff       	jmp    c0102b00 <__alltraps>

c01033f7 <vector221>:
.globl vector221
vector221:
  pushl $0
c01033f7:	6a 00                	push   $0x0
  pushl $221
c01033f9:	68 dd 00 00 00       	push   $0xdd
  jmp __alltraps
c01033fe:	e9 fd f6 ff ff       	jmp    c0102b00 <__alltraps>

c0103403 <vector222>:
.globl vector222
vector222:
  pushl $0
c0103403:	6a 00                	push   $0x0
  pushl $222
c0103405:	68 de 00 00 00       	push   $0xde
  jmp __alltraps
c010340a:	e9 f1 f6 ff ff       	jmp    c0102b00 <__alltraps>

c010340f <vector223>:
.globl vector223
vector223:
  pushl $0
c010340f:	6a 00                	push   $0x0
  pushl $223
c0103411:	68 df 00 00 00       	push   $0xdf
  jmp __alltraps
c0103416:	e9 e5 f6 ff ff       	jmp    c0102b00 <__alltraps>

c010341b <vector224>:
.globl vector224
vector224:
  pushl $0
c010341b:	6a 00                	push   $0x0
  pushl $224
c010341d:	68 e0 00 00 00       	push   $0xe0
  jmp __alltraps
c0103422:	e9 d9 f6 ff ff       	jmp    c0102b00 <__alltraps>

c0103427 <vector225>:
.globl vector225
vector225:
  pushl $0
c0103427:	6a 00                	push   $0x0
  pushl $225
c0103429:	68 e1 00 00 00       	push   $0xe1
  jmp __alltraps
c010342e:	e9 cd f6 ff ff       	jmp    c0102b00 <__alltraps>

c0103433 <vector226>:
.globl vector226
vector226:
  pushl $0
c0103433:	6a 00                	push   $0x0
  pushl $226
c0103435:	68 e2 00 00 00       	push   $0xe2
  jmp __alltraps
c010343a:	e9 c1 f6 ff ff       	jmp    c0102b00 <__alltraps>

c010343f <vector227>:
.globl vector227
vector227:
  pushl $0
c010343f:	6a 00                	push   $0x0
  pushl $227
c0103441:	68 e3 00 00 00       	push   $0xe3
  jmp __alltraps
c0103446:	e9 b5 f6 ff ff       	jmp    c0102b00 <__alltraps>

c010344b <vector228>:
.globl vector228
vector228:
  pushl $0
c010344b:	6a 00                	push   $0x0
  pushl $228
c010344d:	68 e4 00 00 00       	push   $0xe4
  jmp __alltraps
c0103452:	e9 a9 f6 ff ff       	jmp    c0102b00 <__alltraps>

c0103457 <vector229>:
.globl vector229
vector229:
  pushl $0
c0103457:	6a 00                	push   $0x0
  pushl $229
c0103459:	68 e5 00 00 00       	push   $0xe5
  jmp __alltraps
c010345e:	e9 9d f6 ff ff       	jmp    c0102b00 <__alltraps>

c0103463 <vector230>:
.globl vector230
vector230:
  pushl $0
c0103463:	6a 00                	push   $0x0
  pushl $230
c0103465:	68 e6 00 00 00       	push   $0xe6
  jmp __alltraps
c010346a:	e9 91 f6 ff ff       	jmp    c0102b00 <__alltraps>

c010346f <vector231>:
.globl vector231
vector231:
  pushl $0
c010346f:	6a 00                	push   $0x0
  pushl $231
c0103471:	68 e7 00 00 00       	push   $0xe7
  jmp __alltraps
c0103476:	e9 85 f6 ff ff       	jmp    c0102b00 <__alltraps>

c010347b <vector232>:
.globl vector232
vector232:
  pushl $0
c010347b:	6a 00                	push   $0x0
  pushl $232
c010347d:	68 e8 00 00 00       	push   $0xe8
  jmp __alltraps
c0103482:	e9 79 f6 ff ff       	jmp    c0102b00 <__alltraps>

c0103487 <vector233>:
.globl vector233
vector233:
  pushl $0
c0103487:	6a 00                	push   $0x0
  pushl $233
c0103489:	68 e9 00 00 00       	push   $0xe9
  jmp __alltraps
c010348e:	e9 6d f6 ff ff       	jmp    c0102b00 <__alltraps>

c0103493 <vector234>:
.globl vector234
vector234:
  pushl $0
c0103493:	6a 00                	push   $0x0
  pushl $234
c0103495:	68 ea 00 00 00       	push   $0xea
  jmp __alltraps
c010349a:	e9 61 f6 ff ff       	jmp    c0102b00 <__alltraps>

c010349f <vector235>:
.globl vector235
vector235:
  pushl $0
c010349f:	6a 00                	push   $0x0
  pushl $235
c01034a1:	68 eb 00 00 00       	push   $0xeb
  jmp __alltraps
c01034a6:	e9 55 f6 ff ff       	jmp    c0102b00 <__alltraps>

c01034ab <vector236>:
.globl vector236
vector236:
  pushl $0
c01034ab:	6a 00                	push   $0x0
  pushl $236
c01034ad:	68 ec 00 00 00       	push   $0xec
  jmp __alltraps
c01034b2:	e9 49 f6 ff ff       	jmp    c0102b00 <__alltraps>

c01034b7 <vector237>:
.globl vector237
vector237:
  pushl $0
c01034b7:	6a 00                	push   $0x0
  pushl $237
c01034b9:	68 ed 00 00 00       	push   $0xed
  jmp __alltraps
c01034be:	e9 3d f6 ff ff       	jmp    c0102b00 <__alltraps>

c01034c3 <vector238>:
.globl vector238
vector238:
  pushl $0
c01034c3:	6a 00                	push   $0x0
  pushl $238
c01034c5:	68 ee 00 00 00       	push   $0xee
  jmp __alltraps
c01034ca:	e9 31 f6 ff ff       	jmp    c0102b00 <__alltraps>

c01034cf <vector239>:
.globl vector239
vector239:
  pushl $0
c01034cf:	6a 00                	push   $0x0
  pushl $239
c01034d1:	68 ef 00 00 00       	push   $0xef
  jmp __alltraps
c01034d6:	e9 25 f6 ff ff       	jmp    c0102b00 <__alltraps>

c01034db <vector240>:
.globl vector240
vector240:
  pushl $0
c01034db:	6a 00                	push   $0x0
  pushl $240
c01034dd:	68 f0 00 00 00       	push   $0xf0
  jmp __alltraps
c01034e2:	e9 19 f6 ff ff       	jmp    c0102b00 <__alltraps>

c01034e7 <vector241>:
.globl vector241
vector241:
  pushl $0
c01034e7:	6a 00                	push   $0x0
  pushl $241
c01034e9:	68 f1 00 00 00       	push   $0xf1
  jmp __alltraps
c01034ee:	e9 0d f6 ff ff       	jmp    c0102b00 <__alltraps>

c01034f3 <vector242>:
.globl vector242
vector242:
  pushl $0
c01034f3:	6a 00                	push   $0x0
  pushl $242
c01034f5:	68 f2 00 00 00       	push   $0xf2
  jmp __alltraps
c01034fa:	e9 01 f6 ff ff       	jmp    c0102b00 <__alltraps>

c01034ff <vector243>:
.globl vector243
vector243:
  pushl $0
c01034ff:	6a 00                	push   $0x0
  pushl $243
c0103501:	68 f3 00 00 00       	push   $0xf3
  jmp __alltraps
c0103506:	e9 f5 f5 ff ff       	jmp    c0102b00 <__alltraps>

c010350b <vector244>:
.globl vector244
vector244:
  pushl $0
c010350b:	6a 00                	push   $0x0
  pushl $244
c010350d:	68 f4 00 00 00       	push   $0xf4
  jmp __alltraps
c0103512:	e9 e9 f5 ff ff       	jmp    c0102b00 <__alltraps>

c0103517 <vector245>:
.globl vector245
vector245:
  pushl $0
c0103517:	6a 00                	push   $0x0
  pushl $245
c0103519:	68 f5 00 00 00       	push   $0xf5
  jmp __alltraps
c010351e:	e9 dd f5 ff ff       	jmp    c0102b00 <__alltraps>

c0103523 <vector246>:
.globl vector246
vector246:
  pushl $0
c0103523:	6a 00                	push   $0x0
  pushl $246
c0103525:	68 f6 00 00 00       	push   $0xf6
  jmp __alltraps
c010352a:	e9 d1 f5 ff ff       	jmp    c0102b00 <__alltraps>

c010352f <vector247>:
.globl vector247
vector247:
  pushl $0
c010352f:	6a 00                	push   $0x0
  pushl $247
c0103531:	68 f7 00 00 00       	push   $0xf7
  jmp __alltraps
c0103536:	e9 c5 f5 ff ff       	jmp    c0102b00 <__alltraps>

c010353b <vector248>:
.globl vector248
vector248:
  pushl $0
c010353b:	6a 00                	push   $0x0
  pushl $248
c010353d:	68 f8 00 00 00       	push   $0xf8
  jmp __alltraps
c0103542:	e9 b9 f5 ff ff       	jmp    c0102b00 <__alltraps>

c0103547 <vector249>:
.globl vector249
vector249:
  pushl $0
c0103547:	6a 00                	push   $0x0
  pushl $249
c0103549:	68 f9 00 00 00       	push   $0xf9
  jmp __alltraps
c010354e:	e9 ad f5 ff ff       	jmp    c0102b00 <__alltraps>

c0103553 <vector250>:
.globl vector250
vector250:
  pushl $0
c0103553:	6a 00                	push   $0x0
  pushl $250
c0103555:	68 fa 00 00 00       	push   $0xfa
  jmp __alltraps
c010355a:	e9 a1 f5 ff ff       	jmp    c0102b00 <__alltraps>

c010355f <vector251>:
.globl vector251
vector251:
  pushl $0
c010355f:	6a 00                	push   $0x0
  pushl $251
c0103561:	68 fb 00 00 00       	push   $0xfb
  jmp __alltraps
c0103566:	e9 95 f5 ff ff       	jmp    c0102b00 <__alltraps>

c010356b <vector252>:
.globl vector252
vector252:
  pushl $0
c010356b:	6a 00                	push   $0x0
  pushl $252
c010356d:	68 fc 00 00 00       	push   $0xfc
  jmp __alltraps
c0103572:	e9 89 f5 ff ff       	jmp    c0102b00 <__alltraps>

c0103577 <vector253>:
.globl vector253
vector253:
  pushl $0
c0103577:	6a 00                	push   $0x0
  pushl $253
c0103579:	68 fd 00 00 00       	push   $0xfd
  jmp __alltraps
c010357e:	e9 7d f5 ff ff       	jmp    c0102b00 <__alltraps>

c0103583 <vector254>:
.globl vector254
vector254:
  pushl $0
c0103583:	6a 00                	push   $0x0
  pushl $254
c0103585:	68 fe 00 00 00       	push   $0xfe
  jmp __alltraps
c010358a:	e9 71 f5 ff ff       	jmp    c0102b00 <__alltraps>

c010358f <vector255>:
.globl vector255
vector255:
  pushl $0
c010358f:	6a 00                	push   $0x0
  pushl $255
c0103591:	68 ff 00 00 00       	push   $0xff
  jmp __alltraps
c0103596:	e9 65 f5 ff ff       	jmp    c0102b00 <__alltraps>

c010359b <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010359b:	55                   	push   %ebp
c010359c:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010359e:	8b 55 08             	mov    0x8(%ebp),%edx
c01035a1:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c01035a6:	29 c2                	sub    %eax,%edx
c01035a8:	89 d0                	mov    %edx,%eax
c01035aa:	c1 f8 02             	sar    $0x2,%eax
c01035ad:	69 c0 39 8e e3 38    	imul   $0x38e38e39,%eax,%eax
}
c01035b3:	5d                   	pop    %ebp
c01035b4:	c3                   	ret    

c01035b5 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c01035b5:	55                   	push   %ebp
c01035b6:	89 e5                	mov    %esp,%ebp
c01035b8:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c01035bb:	8b 45 08             	mov    0x8(%ebp),%eax
c01035be:	89 04 24             	mov    %eax,(%esp)
c01035c1:	e8 d5 ff ff ff       	call   c010359b <page2ppn>
c01035c6:	c1 e0 0c             	shl    $0xc,%eax
}
c01035c9:	c9                   	leave  
c01035ca:	c3                   	ret    

c01035cb <page_ref>:
pde2page(pde_t pde) {
    return pa2page(PDE_ADDR(pde));
}

static inline int
page_ref(struct Page *page) {
c01035cb:	55                   	push   %ebp
c01035cc:	89 e5                	mov    %esp,%ebp
    return page->ref;
c01035ce:	8b 45 08             	mov    0x8(%ebp),%eax
c01035d1:	8b 00                	mov    (%eax),%eax
}
c01035d3:	5d                   	pop    %ebp
c01035d4:	c3                   	ret    

c01035d5 <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c01035d5:	55                   	push   %ebp
c01035d6:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c01035d8:	8b 45 08             	mov    0x8(%ebp),%eax
c01035db:	8b 55 0c             	mov    0xc(%ebp),%edx
c01035de:	89 10                	mov    %edx,(%eax)
}
c01035e0:	5d                   	pop    %ebp
c01035e1:	c3                   	ret    

c01035e2 <default_init>:

#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
default_init(void) {
c01035e2:	55                   	push   %ebp
c01035e3:	89 e5                	mov    %esp,%ebp
c01035e5:	83 ec 10             	sub    $0x10,%esp
c01035e8:	c7 45 fc 14 30 15 c0 	movl   $0xc0153014,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01035ef:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01035f2:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01035f5:	89 50 04             	mov    %edx,0x4(%eax)
c01035f8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01035fb:	8b 50 04             	mov    0x4(%eax),%edx
c01035fe:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103601:	89 10                	mov    %edx,(%eax)
    list_init(&free_list);
    nr_free = 0;
c0103603:	c7 05 1c 30 15 c0 00 	movl   $0x0,0xc015301c
c010360a:	00 00 00 
}
c010360d:	c9                   	leave  
c010360e:	c3                   	ret    

c010360f <default_init_memmap>:

static void
default_init_memmap(struct Page *base, size_t n) {
c010360f:	55                   	push   %ebp
c0103610:	89 e5                	mov    %esp,%ebp
c0103612:	83 ec 48             	sub    $0x48,%esp
    assert(n > 0);
c0103615:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0103619:	75 24                	jne    c010363f <default_init_memmap+0x30>
c010361b:	c7 44 24 0c f0 5f 11 	movl   $0xc0115ff0,0xc(%esp)
c0103622:	c0 
c0103623:	c7 44 24 08 f6 5f 11 	movl   $0xc0115ff6,0x8(%esp)
c010362a:	c0 
c010362b:	c7 44 24 04 46 00 00 	movl   $0x46,0x4(%esp)
c0103632:	00 
c0103633:	c7 04 24 0b 60 11 c0 	movl   $0xc011600b,(%esp)
c010363a:	e8 89 d8 ff ff       	call   c0100ec8 <__panic>
    struct Page *p = base;
c010363f:	8b 45 08             	mov    0x8(%ebp),%eax
c0103642:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c0103645:	e9 dc 00 00 00       	jmp    c0103726 <default_init_memmap+0x117>
        assert(PageReserved(p));
c010364a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010364d:	83 c0 04             	add    $0x4,%eax
c0103650:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0103657:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010365a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010365d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0103660:	0f a3 10             	bt     %edx,(%eax)
c0103663:	19 c0                	sbb    %eax,%eax
c0103665:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return oldbit != 0;
c0103668:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010366c:	0f 95 c0             	setne  %al
c010366f:	0f b6 c0             	movzbl %al,%eax
c0103672:	85 c0                	test   %eax,%eax
c0103674:	75 24                	jne    c010369a <default_init_memmap+0x8b>
c0103676:	c7 44 24 0c 21 60 11 	movl   $0xc0116021,0xc(%esp)
c010367d:	c0 
c010367e:	c7 44 24 08 f6 5f 11 	movl   $0xc0115ff6,0x8(%esp)
c0103685:	c0 
c0103686:	c7 44 24 04 49 00 00 	movl   $0x49,0x4(%esp)
c010368d:	00 
c010368e:	c7 04 24 0b 60 11 c0 	movl   $0xc011600b,(%esp)
c0103695:	e8 2e d8 ff ff       	call   c0100ec8 <__panic>
        p->flags = 0;
c010369a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010369d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        SetPageProperty(p);
c01036a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036a7:	83 c0 04             	add    $0x4,%eax
c01036aa:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
c01036b1:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01036b4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01036b7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01036ba:	0f ab 10             	bts    %edx,(%eax)
        p->property = 0;
c01036bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036c0:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        set_page_ref(p, 0);
c01036c7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01036ce:	00 
c01036cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036d2:	89 04 24             	mov    %eax,(%esp)
c01036d5:	e8 fb fe ff ff       	call   c01035d5 <set_page_ref>
        list_add_before(&free_list, &(p->page_link));
c01036da:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036dd:	83 c0 10             	add    $0x10,%eax
c01036e0:	c7 45 dc 14 30 15 c0 	movl   $0xc0153014,-0x24(%ebp)
c01036e7:	89 45 d8             	mov    %eax,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c01036ea:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01036ed:	8b 00                	mov    (%eax),%eax
c01036ef:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01036f2:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c01036f5:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01036f8:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01036fb:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01036fe:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103701:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0103704:	89 10                	mov    %edx,(%eax)
c0103706:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103709:	8b 10                	mov    (%eax),%edx
c010370b:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010370e:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0103711:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0103714:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0103717:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010371a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010371d:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0103720:	89 10                	mov    %edx,(%eax)

static void
default_init_memmap(struct Page *base, size_t n) {
    assert(n > 0);
    struct Page *p = base;
    for (; p != base + n; p ++) {
c0103722:	83 45 f4 24          	addl   $0x24,-0xc(%ebp)
c0103726:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103729:	89 d0                	mov    %edx,%eax
c010372b:	c1 e0 03             	shl    $0x3,%eax
c010372e:	01 d0                	add    %edx,%eax
c0103730:	c1 e0 02             	shl    $0x2,%eax
c0103733:	89 c2                	mov    %eax,%edx
c0103735:	8b 45 08             	mov    0x8(%ebp),%eax
c0103738:	01 d0                	add    %edx,%eax
c010373a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010373d:	0f 85 07 ff ff ff    	jne    c010364a <default_init_memmap+0x3b>
        SetPageProperty(p);
        p->property = 0;
        set_page_ref(p, 0);
        list_add_before(&free_list, &(p->page_link));
    }
    nr_free += n;
c0103743:	8b 15 1c 30 15 c0    	mov    0xc015301c,%edx
c0103749:	8b 45 0c             	mov    0xc(%ebp),%eax
c010374c:	01 d0                	add    %edx,%eax
c010374e:	a3 1c 30 15 c0       	mov    %eax,0xc015301c
    //first block
    base->property = n;
c0103753:	8b 45 08             	mov    0x8(%ebp),%eax
c0103756:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103759:	89 50 08             	mov    %edx,0x8(%eax)
}
c010375c:	c9                   	leave  
c010375d:	c3                   	ret    

c010375e <default_alloc_pages>:

static struct Page *
default_alloc_pages(size_t n) {
c010375e:	55                   	push   %ebp
c010375f:	89 e5                	mov    %esp,%ebp
c0103761:	83 ec 68             	sub    $0x68,%esp
    assert(n > 0);
c0103764:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0103768:	75 24                	jne    c010378e <default_alloc_pages+0x30>
c010376a:	c7 44 24 0c f0 5f 11 	movl   $0xc0115ff0,0xc(%esp)
c0103771:	c0 
c0103772:	c7 44 24 08 f6 5f 11 	movl   $0xc0115ff6,0x8(%esp)
c0103779:	c0 
c010377a:	c7 44 24 04 57 00 00 	movl   $0x57,0x4(%esp)
c0103781:	00 
c0103782:	c7 04 24 0b 60 11 c0 	movl   $0xc011600b,(%esp)
c0103789:	e8 3a d7 ff ff       	call   c0100ec8 <__panic>
    if (n > nr_free) {
c010378e:	a1 1c 30 15 c0       	mov    0xc015301c,%eax
c0103793:	3b 45 08             	cmp    0x8(%ebp),%eax
c0103796:	73 0a                	jae    c01037a2 <default_alloc_pages+0x44>
        return NULL;
c0103798:	b8 00 00 00 00       	mov    $0x0,%eax
c010379d:	e9 37 01 00 00       	jmp    c01038d9 <default_alloc_pages+0x17b>
    }
    list_entry_t *le, *len;
    le = &free_list;
c01037a2:	c7 45 f4 14 30 15 c0 	movl   $0xc0153014,-0xc(%ebp)

    while((le=list_next(le)) != &free_list) {
c01037a9:	e9 0a 01 00 00       	jmp    c01038b8 <default_alloc_pages+0x15a>
      struct Page *p = le2page(le, page_link);
c01037ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037b1:	83 e8 10             	sub    $0x10,%eax
c01037b4:	89 45 ec             	mov    %eax,-0x14(%ebp)
      if(p->property >= n){
c01037b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01037ba:	8b 40 08             	mov    0x8(%eax),%eax
c01037bd:	3b 45 08             	cmp    0x8(%ebp),%eax
c01037c0:	0f 82 f2 00 00 00    	jb     c01038b8 <default_alloc_pages+0x15a>
        int i;
        for(i=0;i<n;i++){
c01037c6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c01037cd:	eb 7c                	jmp    c010384b <default_alloc_pages+0xed>
c01037cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037d2:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01037d5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01037d8:	8b 40 04             	mov    0x4(%eax),%eax
          len = list_next(le);
c01037db:	89 45 e8             	mov    %eax,-0x18(%ebp)
          struct Page *pp = le2page(le, page_link);
c01037de:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037e1:	83 e8 10             	sub    $0x10,%eax
c01037e4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
          SetPageReserved(pp);
c01037e7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01037ea:	83 c0 04             	add    $0x4,%eax
c01037ed:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01037f4:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01037f7:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01037fa:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01037fd:	0f ab 10             	bts    %edx,(%eax)
          ClearPageProperty(pp);
c0103800:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103803:	83 c0 04             	add    $0x4,%eax
c0103806:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
c010380d:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0103810:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103813:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0103816:	0f b3 10             	btr    %edx,(%eax)
c0103819:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010381c:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010381f:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103822:	8b 40 04             	mov    0x4(%eax),%eax
c0103825:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0103828:	8b 12                	mov    (%edx),%edx
c010382a:	89 55 c8             	mov    %edx,-0x38(%ebp)
c010382d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0103830:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0103833:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0103836:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0103839:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010383c:	8b 55 c8             	mov    -0x38(%ebp),%edx
c010383f:	89 10                	mov    %edx,(%eax)
          list_del(le);
          le = len;
c0103841:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103844:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while((le=list_next(le)) != &free_list) {
      struct Page *p = le2page(le, page_link);
      if(p->property >= n){
        int i;
        for(i=0;i<n;i++){
c0103847:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c010384b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010384e:	3b 45 08             	cmp    0x8(%ebp),%eax
c0103851:	0f 82 78 ff ff ff    	jb     c01037cf <default_alloc_pages+0x71>
          SetPageReserved(pp);
          ClearPageProperty(pp);
          list_del(le);
          le = len;
        }
        if(p->property>n){
c0103857:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010385a:	8b 40 08             	mov    0x8(%eax),%eax
c010385d:	3b 45 08             	cmp    0x8(%ebp),%eax
c0103860:	76 12                	jbe    c0103874 <default_alloc_pages+0x116>
          (le2page(le,page_link))->property = p->property - n;
c0103862:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103865:	8d 50 f0             	lea    -0x10(%eax),%edx
c0103868:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010386b:	8b 40 08             	mov    0x8(%eax),%eax
c010386e:	2b 45 08             	sub    0x8(%ebp),%eax
c0103871:	89 42 08             	mov    %eax,0x8(%edx)
        }
        ClearPageProperty(p);
c0103874:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103877:	83 c0 04             	add    $0x4,%eax
c010387a:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c0103881:	89 45 bc             	mov    %eax,-0x44(%ebp)
c0103884:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0103887:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010388a:	0f b3 10             	btr    %edx,(%eax)
        SetPageReserved(p);
c010388d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103890:	83 c0 04             	add    $0x4,%eax
c0103893:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
c010389a:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c010389d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01038a0:	8b 55 b8             	mov    -0x48(%ebp),%edx
c01038a3:	0f ab 10             	bts    %edx,(%eax)
        nr_free -= n;
c01038a6:	a1 1c 30 15 c0       	mov    0xc015301c,%eax
c01038ab:	2b 45 08             	sub    0x8(%ebp),%eax
c01038ae:	a3 1c 30 15 c0       	mov    %eax,0xc015301c
        return p;
c01038b3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01038b6:	eb 21                	jmp    c01038d9 <default_alloc_pages+0x17b>
c01038b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01038bb:	89 45 b0             	mov    %eax,-0x50(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01038be:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01038c1:	8b 40 04             	mov    0x4(%eax),%eax
        return NULL;
    }
    list_entry_t *le, *len;
    le = &free_list;

    while((le=list_next(le)) != &free_list) {
c01038c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01038c7:	81 7d f4 14 30 15 c0 	cmpl   $0xc0153014,-0xc(%ebp)
c01038ce:	0f 85 da fe ff ff    	jne    c01037ae <default_alloc_pages+0x50>
        SetPageReserved(p);
        nr_free -= n;
        return p;
      }
    }
    return NULL;
c01038d4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01038d9:	c9                   	leave  
c01038da:	c3                   	ret    

c01038db <default_free_pages>:

static void
default_free_pages(struct Page *base, size_t n) {
c01038db:	55                   	push   %ebp
c01038dc:	89 e5                	mov    %esp,%ebp
c01038de:	83 ec 68             	sub    $0x68,%esp
    assert(n > 0);
c01038e1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01038e5:	75 24                	jne    c010390b <default_free_pages+0x30>
c01038e7:	c7 44 24 0c f0 5f 11 	movl   $0xc0115ff0,0xc(%esp)
c01038ee:	c0 
c01038ef:	c7 44 24 08 f6 5f 11 	movl   $0xc0115ff6,0x8(%esp)
c01038f6:	c0 
c01038f7:	c7 44 24 04 78 00 00 	movl   $0x78,0x4(%esp)
c01038fe:	00 
c01038ff:	c7 04 24 0b 60 11 c0 	movl   $0xc011600b,(%esp)
c0103906:	e8 bd d5 ff ff       	call   c0100ec8 <__panic>
    assert(PageReserved(base));
c010390b:	8b 45 08             	mov    0x8(%ebp),%eax
c010390e:	83 c0 04             	add    $0x4,%eax
c0103911:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0103918:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010391b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010391e:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0103921:	0f a3 10             	bt     %edx,(%eax)
c0103924:	19 c0                	sbb    %eax,%eax
c0103926:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return oldbit != 0;
c0103929:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010392d:	0f 95 c0             	setne  %al
c0103930:	0f b6 c0             	movzbl %al,%eax
c0103933:	85 c0                	test   %eax,%eax
c0103935:	75 24                	jne    c010395b <default_free_pages+0x80>
c0103937:	c7 44 24 0c 31 60 11 	movl   $0xc0116031,0xc(%esp)
c010393e:	c0 
c010393f:	c7 44 24 08 f6 5f 11 	movl   $0xc0115ff6,0x8(%esp)
c0103946:	c0 
c0103947:	c7 44 24 04 79 00 00 	movl   $0x79,0x4(%esp)
c010394e:	00 
c010394f:	c7 04 24 0b 60 11 c0 	movl   $0xc011600b,(%esp)
c0103956:	e8 6d d5 ff ff       	call   c0100ec8 <__panic>

    list_entry_t *le = &free_list;
c010395b:	c7 45 f4 14 30 15 c0 	movl   $0xc0153014,-0xc(%ebp)
    struct Page * p;
    while((le=list_next(le)) != &free_list) {
c0103962:	eb 13                	jmp    c0103977 <default_free_pages+0x9c>
      p = le2page(le, page_link);
c0103964:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103967:	83 e8 10             	sub    $0x10,%eax
c010396a:	89 45 f0             	mov    %eax,-0x10(%ebp)
      if(p>base){
c010396d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103970:	3b 45 08             	cmp    0x8(%ebp),%eax
c0103973:	76 02                	jbe    c0103977 <default_free_pages+0x9c>
        break;
c0103975:	eb 18                	jmp    c010398f <default_free_pages+0xb4>
c0103977:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010397a:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010397d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103980:	8b 40 04             	mov    0x4(%eax),%eax
    assert(n > 0);
    assert(PageReserved(base));

    list_entry_t *le = &free_list;
    struct Page * p;
    while((le=list_next(le)) != &free_list) {
c0103983:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103986:	81 7d f4 14 30 15 c0 	cmpl   $0xc0153014,-0xc(%ebp)
c010398d:	75 d5                	jne    c0103964 <default_free_pages+0x89>
      if(p>base){
        break;
      }
    }
    //list_add_before(le, base->page_link);
    for(p=base;p<base+n;p++){
c010398f:	8b 45 08             	mov    0x8(%ebp),%eax
c0103992:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103995:	eb 4b                	jmp    c01039e2 <default_free_pages+0x107>
      list_add_before(le, &(p->page_link));
c0103997:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010399a:	8d 50 10             	lea    0x10(%eax),%edx
c010399d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01039a0:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01039a3:	89 55 d8             	mov    %edx,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c01039a6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01039a9:	8b 00                	mov    (%eax),%eax
c01039ab:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01039ae:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c01039b1:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01039b4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01039b7:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01039ba:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01039bd:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01039c0:	89 10                	mov    %edx,(%eax)
c01039c2:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01039c5:	8b 10                	mov    (%eax),%edx
c01039c7:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01039ca:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c01039cd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01039d0:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01039d3:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01039d6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01039d9:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01039dc:	89 10                	mov    %edx,(%eax)
      if(p>base){
        break;
      }
    }
    //list_add_before(le, base->page_link);
    for(p=base;p<base+n;p++){
c01039de:	83 45 f0 24          	addl   $0x24,-0x10(%ebp)
c01039e2:	8b 55 0c             	mov    0xc(%ebp),%edx
c01039e5:	89 d0                	mov    %edx,%eax
c01039e7:	c1 e0 03             	shl    $0x3,%eax
c01039ea:	01 d0                	add    %edx,%eax
c01039ec:	c1 e0 02             	shl    $0x2,%eax
c01039ef:	89 c2                	mov    %eax,%edx
c01039f1:	8b 45 08             	mov    0x8(%ebp),%eax
c01039f4:	01 d0                	add    %edx,%eax
c01039f6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01039f9:	77 9c                	ja     c0103997 <default_free_pages+0xbc>
      list_add_before(le, &(p->page_link));
    }
    base->flags = 0;
c01039fb:	8b 45 08             	mov    0x8(%ebp),%eax
c01039fe:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    set_page_ref(base, 0);
c0103a05:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0103a0c:	00 
c0103a0d:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a10:	89 04 24             	mov    %eax,(%esp)
c0103a13:	e8 bd fb ff ff       	call   c01035d5 <set_page_ref>
    ClearPageProperty(base);
c0103a18:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a1b:	83 c0 04             	add    $0x4,%eax
c0103a1e:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
c0103a25:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0103a28:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0103a2b:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0103a2e:	0f b3 10             	btr    %edx,(%eax)
    SetPageProperty(base);
c0103a31:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a34:	83 c0 04             	add    $0x4,%eax
c0103a37:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c0103a3e:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0103a41:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0103a44:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0103a47:	0f ab 10             	bts    %edx,(%eax)
    base->property = n;
c0103a4a:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a4d:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103a50:	89 50 08             	mov    %edx,0x8(%eax)
    
    p = le2page(le,page_link) ;
c0103a53:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a56:	83 e8 10             	sub    $0x10,%eax
c0103a59:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if( base+n == p ){
c0103a5c:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103a5f:	89 d0                	mov    %edx,%eax
c0103a61:	c1 e0 03             	shl    $0x3,%eax
c0103a64:	01 d0                	add    %edx,%eax
c0103a66:	c1 e0 02             	shl    $0x2,%eax
c0103a69:	89 c2                	mov    %eax,%edx
c0103a6b:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a6e:	01 d0                	add    %edx,%eax
c0103a70:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103a73:	75 1e                	jne    c0103a93 <default_free_pages+0x1b8>
      base->property += p->property;
c0103a75:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a78:	8b 50 08             	mov    0x8(%eax),%edx
c0103a7b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103a7e:	8b 40 08             	mov    0x8(%eax),%eax
c0103a81:	01 c2                	add    %eax,%edx
c0103a83:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a86:	89 50 08             	mov    %edx,0x8(%eax)
      p->property = 0;
c0103a89:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103a8c:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    }
    le = list_prev(&(base->page_link));
c0103a93:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a96:	83 c0 10             	add    $0x10,%eax
c0103a99:	89 45 b8             	mov    %eax,-0x48(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0103a9c:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0103a9f:	8b 00                	mov    (%eax),%eax
c0103aa1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    p = le2page(le, page_link);
c0103aa4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103aa7:	83 e8 10             	sub    $0x10,%eax
c0103aaa:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(le!=&free_list && p==base-1){
c0103aad:	81 7d f4 14 30 15 c0 	cmpl   $0xc0153014,-0xc(%ebp)
c0103ab4:	74 57                	je     c0103b0d <default_free_pages+0x232>
c0103ab6:	8b 45 08             	mov    0x8(%ebp),%eax
c0103ab9:	83 e8 24             	sub    $0x24,%eax
c0103abc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103abf:	75 4c                	jne    c0103b0d <default_free_pages+0x232>
      while(le!=&free_list){
c0103ac1:	eb 41                	jmp    c0103b04 <default_free_pages+0x229>
        if(p->property){
c0103ac3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103ac6:	8b 40 08             	mov    0x8(%eax),%eax
c0103ac9:	85 c0                	test   %eax,%eax
c0103acb:	74 20                	je     c0103aed <default_free_pages+0x212>
          p->property += base->property;
c0103acd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103ad0:	8b 50 08             	mov    0x8(%eax),%edx
c0103ad3:	8b 45 08             	mov    0x8(%ebp),%eax
c0103ad6:	8b 40 08             	mov    0x8(%eax),%eax
c0103ad9:	01 c2                	add    %eax,%edx
c0103adb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103ade:	89 50 08             	mov    %edx,0x8(%eax)
          base->property = 0;
c0103ae1:	8b 45 08             	mov    0x8(%ebp),%eax
c0103ae4:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
          break;
c0103aeb:	eb 20                	jmp    c0103b0d <default_free_pages+0x232>
c0103aed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103af0:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c0103af3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0103af6:	8b 00                	mov    (%eax),%eax
        }
        le = list_prev(le);
c0103af8:	89 45 f4             	mov    %eax,-0xc(%ebp)
        p = le2page(le,page_link);
c0103afb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103afe:	83 e8 10             	sub    $0x10,%eax
c0103b01:	89 45 f0             	mov    %eax,-0x10(%ebp)
      p->property = 0;
    }
    le = list_prev(&(base->page_link));
    p = le2page(le, page_link);
    if(le!=&free_list && p==base-1){
      while(le!=&free_list){
c0103b04:	81 7d f4 14 30 15 c0 	cmpl   $0xc0153014,-0xc(%ebp)
c0103b0b:	75 b6                	jne    c0103ac3 <default_free_pages+0x1e8>
        le = list_prev(le);
        p = le2page(le,page_link);
      }
    }

    nr_free += n;
c0103b0d:	8b 15 1c 30 15 c0    	mov    0xc015301c,%edx
c0103b13:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103b16:	01 d0                	add    %edx,%eax
c0103b18:	a3 1c 30 15 c0       	mov    %eax,0xc015301c
    return ;
c0103b1d:	90                   	nop
}
c0103b1e:	c9                   	leave  
c0103b1f:	c3                   	ret    

c0103b20 <default_nr_free_pages>:

static size_t
default_nr_free_pages(void) {
c0103b20:	55                   	push   %ebp
c0103b21:	89 e5                	mov    %esp,%ebp
    return nr_free;
c0103b23:	a1 1c 30 15 c0       	mov    0xc015301c,%eax
}
c0103b28:	5d                   	pop    %ebp
c0103b29:	c3                   	ret    

c0103b2a <basic_check>:

static void
basic_check(void) {
c0103b2a:	55                   	push   %ebp
c0103b2b:	89 e5                	mov    %esp,%ebp
c0103b2d:	83 ec 48             	sub    $0x48,%esp
    struct Page *p0, *p1, *p2;
    p0 = p1 = p2 = NULL;
c0103b30:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0103b37:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103b3a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103b3d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103b40:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert((p0 = alloc_page()) != NULL);
c0103b43:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103b4a:	e8 15 16 00 00       	call   c0105164 <alloc_pages>
c0103b4f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103b52:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0103b56:	75 24                	jne    c0103b7c <basic_check+0x52>
c0103b58:	c7 44 24 0c 44 60 11 	movl   $0xc0116044,0xc(%esp)
c0103b5f:	c0 
c0103b60:	c7 44 24 08 f6 5f 11 	movl   $0xc0115ff6,0x8(%esp)
c0103b67:	c0 
c0103b68:	c7 44 24 04 ad 00 00 	movl   $0xad,0x4(%esp)
c0103b6f:	00 
c0103b70:	c7 04 24 0b 60 11 c0 	movl   $0xc011600b,(%esp)
c0103b77:	e8 4c d3 ff ff       	call   c0100ec8 <__panic>
    assert((p1 = alloc_page()) != NULL);
c0103b7c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103b83:	e8 dc 15 00 00       	call   c0105164 <alloc_pages>
c0103b88:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103b8b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0103b8f:	75 24                	jne    c0103bb5 <basic_check+0x8b>
c0103b91:	c7 44 24 0c 60 60 11 	movl   $0xc0116060,0xc(%esp)
c0103b98:	c0 
c0103b99:	c7 44 24 08 f6 5f 11 	movl   $0xc0115ff6,0x8(%esp)
c0103ba0:	c0 
c0103ba1:	c7 44 24 04 ae 00 00 	movl   $0xae,0x4(%esp)
c0103ba8:	00 
c0103ba9:	c7 04 24 0b 60 11 c0 	movl   $0xc011600b,(%esp)
c0103bb0:	e8 13 d3 ff ff       	call   c0100ec8 <__panic>
    assert((p2 = alloc_page()) != NULL);
c0103bb5:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103bbc:	e8 a3 15 00 00       	call   c0105164 <alloc_pages>
c0103bc1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103bc4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103bc8:	75 24                	jne    c0103bee <basic_check+0xc4>
c0103bca:	c7 44 24 0c 7c 60 11 	movl   $0xc011607c,0xc(%esp)
c0103bd1:	c0 
c0103bd2:	c7 44 24 08 f6 5f 11 	movl   $0xc0115ff6,0x8(%esp)
c0103bd9:	c0 
c0103bda:	c7 44 24 04 af 00 00 	movl   $0xaf,0x4(%esp)
c0103be1:	00 
c0103be2:	c7 04 24 0b 60 11 c0 	movl   $0xc011600b,(%esp)
c0103be9:	e8 da d2 ff ff       	call   c0100ec8 <__panic>

    assert(p0 != p1 && p0 != p2 && p1 != p2);
c0103bee:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103bf1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103bf4:	74 10                	je     c0103c06 <basic_check+0xdc>
c0103bf6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103bf9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103bfc:	74 08                	je     c0103c06 <basic_check+0xdc>
c0103bfe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103c01:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103c04:	75 24                	jne    c0103c2a <basic_check+0x100>
c0103c06:	c7 44 24 0c 98 60 11 	movl   $0xc0116098,0xc(%esp)
c0103c0d:	c0 
c0103c0e:	c7 44 24 08 f6 5f 11 	movl   $0xc0115ff6,0x8(%esp)
c0103c15:	c0 
c0103c16:	c7 44 24 04 b1 00 00 	movl   $0xb1,0x4(%esp)
c0103c1d:	00 
c0103c1e:	c7 04 24 0b 60 11 c0 	movl   $0xc011600b,(%esp)
c0103c25:	e8 9e d2 ff ff       	call   c0100ec8 <__panic>
    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
c0103c2a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103c2d:	89 04 24             	mov    %eax,(%esp)
c0103c30:	e8 96 f9 ff ff       	call   c01035cb <page_ref>
c0103c35:	85 c0                	test   %eax,%eax
c0103c37:	75 1e                	jne    c0103c57 <basic_check+0x12d>
c0103c39:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103c3c:	89 04 24             	mov    %eax,(%esp)
c0103c3f:	e8 87 f9 ff ff       	call   c01035cb <page_ref>
c0103c44:	85 c0                	test   %eax,%eax
c0103c46:	75 0f                	jne    c0103c57 <basic_check+0x12d>
c0103c48:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c4b:	89 04 24             	mov    %eax,(%esp)
c0103c4e:	e8 78 f9 ff ff       	call   c01035cb <page_ref>
c0103c53:	85 c0                	test   %eax,%eax
c0103c55:	74 24                	je     c0103c7b <basic_check+0x151>
c0103c57:	c7 44 24 0c bc 60 11 	movl   $0xc01160bc,0xc(%esp)
c0103c5e:	c0 
c0103c5f:	c7 44 24 08 f6 5f 11 	movl   $0xc0115ff6,0x8(%esp)
c0103c66:	c0 
c0103c67:	c7 44 24 04 b2 00 00 	movl   $0xb2,0x4(%esp)
c0103c6e:	00 
c0103c6f:	c7 04 24 0b 60 11 c0 	movl   $0xc011600b,(%esp)
c0103c76:	e8 4d d2 ff ff       	call   c0100ec8 <__panic>

    assert(page2pa(p0) < npage * PGSIZE);
c0103c7b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103c7e:	89 04 24             	mov    %eax,(%esp)
c0103c81:	e8 2f f9 ff ff       	call   c01035b5 <page2pa>
c0103c86:	8b 15 80 fe 14 c0    	mov    0xc014fe80,%edx
c0103c8c:	c1 e2 0c             	shl    $0xc,%edx
c0103c8f:	39 d0                	cmp    %edx,%eax
c0103c91:	72 24                	jb     c0103cb7 <basic_check+0x18d>
c0103c93:	c7 44 24 0c f8 60 11 	movl   $0xc01160f8,0xc(%esp)
c0103c9a:	c0 
c0103c9b:	c7 44 24 08 f6 5f 11 	movl   $0xc0115ff6,0x8(%esp)
c0103ca2:	c0 
c0103ca3:	c7 44 24 04 b4 00 00 	movl   $0xb4,0x4(%esp)
c0103caa:	00 
c0103cab:	c7 04 24 0b 60 11 c0 	movl   $0xc011600b,(%esp)
c0103cb2:	e8 11 d2 ff ff       	call   c0100ec8 <__panic>
    assert(page2pa(p1) < npage * PGSIZE);
c0103cb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103cba:	89 04 24             	mov    %eax,(%esp)
c0103cbd:	e8 f3 f8 ff ff       	call   c01035b5 <page2pa>
c0103cc2:	8b 15 80 fe 14 c0    	mov    0xc014fe80,%edx
c0103cc8:	c1 e2 0c             	shl    $0xc,%edx
c0103ccb:	39 d0                	cmp    %edx,%eax
c0103ccd:	72 24                	jb     c0103cf3 <basic_check+0x1c9>
c0103ccf:	c7 44 24 0c 15 61 11 	movl   $0xc0116115,0xc(%esp)
c0103cd6:	c0 
c0103cd7:	c7 44 24 08 f6 5f 11 	movl   $0xc0115ff6,0x8(%esp)
c0103cde:	c0 
c0103cdf:	c7 44 24 04 b5 00 00 	movl   $0xb5,0x4(%esp)
c0103ce6:	00 
c0103ce7:	c7 04 24 0b 60 11 c0 	movl   $0xc011600b,(%esp)
c0103cee:	e8 d5 d1 ff ff       	call   c0100ec8 <__panic>
    assert(page2pa(p2) < npage * PGSIZE);
c0103cf3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103cf6:	89 04 24             	mov    %eax,(%esp)
c0103cf9:	e8 b7 f8 ff ff       	call   c01035b5 <page2pa>
c0103cfe:	8b 15 80 fe 14 c0    	mov    0xc014fe80,%edx
c0103d04:	c1 e2 0c             	shl    $0xc,%edx
c0103d07:	39 d0                	cmp    %edx,%eax
c0103d09:	72 24                	jb     c0103d2f <basic_check+0x205>
c0103d0b:	c7 44 24 0c 32 61 11 	movl   $0xc0116132,0xc(%esp)
c0103d12:	c0 
c0103d13:	c7 44 24 08 f6 5f 11 	movl   $0xc0115ff6,0x8(%esp)
c0103d1a:	c0 
c0103d1b:	c7 44 24 04 b6 00 00 	movl   $0xb6,0x4(%esp)
c0103d22:	00 
c0103d23:	c7 04 24 0b 60 11 c0 	movl   $0xc011600b,(%esp)
c0103d2a:	e8 99 d1 ff ff       	call   c0100ec8 <__panic>

    list_entry_t free_list_store = free_list;
c0103d2f:	a1 14 30 15 c0       	mov    0xc0153014,%eax
c0103d34:	8b 15 18 30 15 c0    	mov    0xc0153018,%edx
c0103d3a:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0103d3d:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0103d40:	c7 45 e0 14 30 15 c0 	movl   $0xc0153014,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0103d47:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103d4a:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0103d4d:	89 50 04             	mov    %edx,0x4(%eax)
c0103d50:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103d53:	8b 50 04             	mov    0x4(%eax),%edx
c0103d56:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103d59:	89 10                	mov    %edx,(%eax)
c0103d5b:	c7 45 dc 14 30 15 c0 	movl   $0xc0153014,-0x24(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0103d62:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103d65:	8b 40 04             	mov    0x4(%eax),%eax
c0103d68:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0103d6b:	0f 94 c0             	sete   %al
c0103d6e:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c0103d71:	85 c0                	test   %eax,%eax
c0103d73:	75 24                	jne    c0103d99 <basic_check+0x26f>
c0103d75:	c7 44 24 0c 4f 61 11 	movl   $0xc011614f,0xc(%esp)
c0103d7c:	c0 
c0103d7d:	c7 44 24 08 f6 5f 11 	movl   $0xc0115ff6,0x8(%esp)
c0103d84:	c0 
c0103d85:	c7 44 24 04 ba 00 00 	movl   $0xba,0x4(%esp)
c0103d8c:	00 
c0103d8d:	c7 04 24 0b 60 11 c0 	movl   $0xc011600b,(%esp)
c0103d94:	e8 2f d1 ff ff       	call   c0100ec8 <__panic>

    unsigned int nr_free_store = nr_free;
c0103d99:	a1 1c 30 15 c0       	mov    0xc015301c,%eax
c0103d9e:	89 45 e8             	mov    %eax,-0x18(%ebp)
    nr_free = 0;
c0103da1:	c7 05 1c 30 15 c0 00 	movl   $0x0,0xc015301c
c0103da8:	00 00 00 

    assert(alloc_page() == NULL);
c0103dab:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103db2:	e8 ad 13 00 00       	call   c0105164 <alloc_pages>
c0103db7:	85 c0                	test   %eax,%eax
c0103db9:	74 24                	je     c0103ddf <basic_check+0x2b5>
c0103dbb:	c7 44 24 0c 66 61 11 	movl   $0xc0116166,0xc(%esp)
c0103dc2:	c0 
c0103dc3:	c7 44 24 08 f6 5f 11 	movl   $0xc0115ff6,0x8(%esp)
c0103dca:	c0 
c0103dcb:	c7 44 24 04 bf 00 00 	movl   $0xbf,0x4(%esp)
c0103dd2:	00 
c0103dd3:	c7 04 24 0b 60 11 c0 	movl   $0xc011600b,(%esp)
c0103dda:	e8 e9 d0 ff ff       	call   c0100ec8 <__panic>

    free_page(p0);
c0103ddf:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103de6:	00 
c0103de7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103dea:	89 04 24             	mov    %eax,(%esp)
c0103ded:	e8 dd 13 00 00       	call   c01051cf <free_pages>
    free_page(p1);
c0103df2:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103df9:	00 
c0103dfa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103dfd:	89 04 24             	mov    %eax,(%esp)
c0103e00:	e8 ca 13 00 00       	call   c01051cf <free_pages>
    free_page(p2);
c0103e05:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103e0c:	00 
c0103e0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103e10:	89 04 24             	mov    %eax,(%esp)
c0103e13:	e8 b7 13 00 00       	call   c01051cf <free_pages>
    assert(nr_free == 3);
c0103e18:	a1 1c 30 15 c0       	mov    0xc015301c,%eax
c0103e1d:	83 f8 03             	cmp    $0x3,%eax
c0103e20:	74 24                	je     c0103e46 <basic_check+0x31c>
c0103e22:	c7 44 24 0c 7b 61 11 	movl   $0xc011617b,0xc(%esp)
c0103e29:	c0 
c0103e2a:	c7 44 24 08 f6 5f 11 	movl   $0xc0115ff6,0x8(%esp)
c0103e31:	c0 
c0103e32:	c7 44 24 04 c4 00 00 	movl   $0xc4,0x4(%esp)
c0103e39:	00 
c0103e3a:	c7 04 24 0b 60 11 c0 	movl   $0xc011600b,(%esp)
c0103e41:	e8 82 d0 ff ff       	call   c0100ec8 <__panic>

    assert((p0 = alloc_page()) != NULL);
c0103e46:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103e4d:	e8 12 13 00 00       	call   c0105164 <alloc_pages>
c0103e52:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103e55:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0103e59:	75 24                	jne    c0103e7f <basic_check+0x355>
c0103e5b:	c7 44 24 0c 44 60 11 	movl   $0xc0116044,0xc(%esp)
c0103e62:	c0 
c0103e63:	c7 44 24 08 f6 5f 11 	movl   $0xc0115ff6,0x8(%esp)
c0103e6a:	c0 
c0103e6b:	c7 44 24 04 c6 00 00 	movl   $0xc6,0x4(%esp)
c0103e72:	00 
c0103e73:	c7 04 24 0b 60 11 c0 	movl   $0xc011600b,(%esp)
c0103e7a:	e8 49 d0 ff ff       	call   c0100ec8 <__panic>
    assert((p1 = alloc_page()) != NULL);
c0103e7f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103e86:	e8 d9 12 00 00       	call   c0105164 <alloc_pages>
c0103e8b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103e8e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0103e92:	75 24                	jne    c0103eb8 <basic_check+0x38e>
c0103e94:	c7 44 24 0c 60 60 11 	movl   $0xc0116060,0xc(%esp)
c0103e9b:	c0 
c0103e9c:	c7 44 24 08 f6 5f 11 	movl   $0xc0115ff6,0x8(%esp)
c0103ea3:	c0 
c0103ea4:	c7 44 24 04 c7 00 00 	movl   $0xc7,0x4(%esp)
c0103eab:	00 
c0103eac:	c7 04 24 0b 60 11 c0 	movl   $0xc011600b,(%esp)
c0103eb3:	e8 10 d0 ff ff       	call   c0100ec8 <__panic>
    assert((p2 = alloc_page()) != NULL);
c0103eb8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103ebf:	e8 a0 12 00 00       	call   c0105164 <alloc_pages>
c0103ec4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103ec7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103ecb:	75 24                	jne    c0103ef1 <basic_check+0x3c7>
c0103ecd:	c7 44 24 0c 7c 60 11 	movl   $0xc011607c,0xc(%esp)
c0103ed4:	c0 
c0103ed5:	c7 44 24 08 f6 5f 11 	movl   $0xc0115ff6,0x8(%esp)
c0103edc:	c0 
c0103edd:	c7 44 24 04 c8 00 00 	movl   $0xc8,0x4(%esp)
c0103ee4:	00 
c0103ee5:	c7 04 24 0b 60 11 c0 	movl   $0xc011600b,(%esp)
c0103eec:	e8 d7 cf ff ff       	call   c0100ec8 <__panic>

    assert(alloc_page() == NULL);
c0103ef1:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103ef8:	e8 67 12 00 00       	call   c0105164 <alloc_pages>
c0103efd:	85 c0                	test   %eax,%eax
c0103eff:	74 24                	je     c0103f25 <basic_check+0x3fb>
c0103f01:	c7 44 24 0c 66 61 11 	movl   $0xc0116166,0xc(%esp)
c0103f08:	c0 
c0103f09:	c7 44 24 08 f6 5f 11 	movl   $0xc0115ff6,0x8(%esp)
c0103f10:	c0 
c0103f11:	c7 44 24 04 ca 00 00 	movl   $0xca,0x4(%esp)
c0103f18:	00 
c0103f19:	c7 04 24 0b 60 11 c0 	movl   $0xc011600b,(%esp)
c0103f20:	e8 a3 cf ff ff       	call   c0100ec8 <__panic>

    free_page(p0);
c0103f25:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103f2c:	00 
c0103f2d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103f30:	89 04 24             	mov    %eax,(%esp)
c0103f33:	e8 97 12 00 00       	call   c01051cf <free_pages>
c0103f38:	c7 45 d8 14 30 15 c0 	movl   $0xc0153014,-0x28(%ebp)
c0103f3f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0103f42:	8b 40 04             	mov    0x4(%eax),%eax
c0103f45:	39 45 d8             	cmp    %eax,-0x28(%ebp)
c0103f48:	0f 94 c0             	sete   %al
c0103f4b:	0f b6 c0             	movzbl %al,%eax
    assert(!list_empty(&free_list));
c0103f4e:	85 c0                	test   %eax,%eax
c0103f50:	74 24                	je     c0103f76 <basic_check+0x44c>
c0103f52:	c7 44 24 0c 88 61 11 	movl   $0xc0116188,0xc(%esp)
c0103f59:	c0 
c0103f5a:	c7 44 24 08 f6 5f 11 	movl   $0xc0115ff6,0x8(%esp)
c0103f61:	c0 
c0103f62:	c7 44 24 04 cd 00 00 	movl   $0xcd,0x4(%esp)
c0103f69:	00 
c0103f6a:	c7 04 24 0b 60 11 c0 	movl   $0xc011600b,(%esp)
c0103f71:	e8 52 cf ff ff       	call   c0100ec8 <__panic>

    struct Page *p;
    assert((p = alloc_page()) == p0);
c0103f76:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103f7d:	e8 e2 11 00 00       	call   c0105164 <alloc_pages>
c0103f82:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0103f85:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103f88:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0103f8b:	74 24                	je     c0103fb1 <basic_check+0x487>
c0103f8d:	c7 44 24 0c a0 61 11 	movl   $0xc01161a0,0xc(%esp)
c0103f94:	c0 
c0103f95:	c7 44 24 08 f6 5f 11 	movl   $0xc0115ff6,0x8(%esp)
c0103f9c:	c0 
c0103f9d:	c7 44 24 04 d0 00 00 	movl   $0xd0,0x4(%esp)
c0103fa4:	00 
c0103fa5:	c7 04 24 0b 60 11 c0 	movl   $0xc011600b,(%esp)
c0103fac:	e8 17 cf ff ff       	call   c0100ec8 <__panic>
    assert(alloc_page() == NULL);
c0103fb1:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103fb8:	e8 a7 11 00 00       	call   c0105164 <alloc_pages>
c0103fbd:	85 c0                	test   %eax,%eax
c0103fbf:	74 24                	je     c0103fe5 <basic_check+0x4bb>
c0103fc1:	c7 44 24 0c 66 61 11 	movl   $0xc0116166,0xc(%esp)
c0103fc8:	c0 
c0103fc9:	c7 44 24 08 f6 5f 11 	movl   $0xc0115ff6,0x8(%esp)
c0103fd0:	c0 
c0103fd1:	c7 44 24 04 d1 00 00 	movl   $0xd1,0x4(%esp)
c0103fd8:	00 
c0103fd9:	c7 04 24 0b 60 11 c0 	movl   $0xc011600b,(%esp)
c0103fe0:	e8 e3 ce ff ff       	call   c0100ec8 <__panic>

    assert(nr_free == 0);
c0103fe5:	a1 1c 30 15 c0       	mov    0xc015301c,%eax
c0103fea:	85 c0                	test   %eax,%eax
c0103fec:	74 24                	je     c0104012 <basic_check+0x4e8>
c0103fee:	c7 44 24 0c b9 61 11 	movl   $0xc01161b9,0xc(%esp)
c0103ff5:	c0 
c0103ff6:	c7 44 24 08 f6 5f 11 	movl   $0xc0115ff6,0x8(%esp)
c0103ffd:	c0 
c0103ffe:	c7 44 24 04 d3 00 00 	movl   $0xd3,0x4(%esp)
c0104005:	00 
c0104006:	c7 04 24 0b 60 11 c0 	movl   $0xc011600b,(%esp)
c010400d:	e8 b6 ce ff ff       	call   c0100ec8 <__panic>
    free_list = free_list_store;
c0104012:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0104015:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0104018:	a3 14 30 15 c0       	mov    %eax,0xc0153014
c010401d:	89 15 18 30 15 c0    	mov    %edx,0xc0153018
    nr_free = nr_free_store;
c0104023:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104026:	a3 1c 30 15 c0       	mov    %eax,0xc015301c

    free_page(p);
c010402b:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104032:	00 
c0104033:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104036:	89 04 24             	mov    %eax,(%esp)
c0104039:	e8 91 11 00 00       	call   c01051cf <free_pages>
    free_page(p1);
c010403e:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104045:	00 
c0104046:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104049:	89 04 24             	mov    %eax,(%esp)
c010404c:	e8 7e 11 00 00       	call   c01051cf <free_pages>
    free_page(p2);
c0104051:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104058:	00 
c0104059:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010405c:	89 04 24             	mov    %eax,(%esp)
c010405f:	e8 6b 11 00 00       	call   c01051cf <free_pages>
}
c0104064:	c9                   	leave  
c0104065:	c3                   	ret    

c0104066 <default_check>:

// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1) 
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
c0104066:	55                   	push   %ebp
c0104067:	89 e5                	mov    %esp,%ebp
c0104069:	53                   	push   %ebx
c010406a:	81 ec 94 00 00 00    	sub    $0x94,%esp
    int count = 0, total = 0;
c0104070:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0104077:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    list_entry_t *le = &free_list;
c010407e:	c7 45 ec 14 30 15 c0 	movl   $0xc0153014,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0104085:	eb 6b                	jmp    c01040f2 <default_check+0x8c>
        struct Page *p = le2page(le, page_link);
c0104087:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010408a:	83 e8 10             	sub    $0x10,%eax
c010408d:	89 45 e8             	mov    %eax,-0x18(%ebp)
        assert(PageProperty(p));
c0104090:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104093:	83 c0 04             	add    $0x4,%eax
c0104096:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%ebp)
c010409d:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01040a0:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01040a3:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01040a6:	0f a3 10             	bt     %edx,(%eax)
c01040a9:	19 c0                	sbb    %eax,%eax
c01040ab:	89 45 c8             	mov    %eax,-0x38(%ebp)
    return oldbit != 0;
c01040ae:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c01040b2:	0f 95 c0             	setne  %al
c01040b5:	0f b6 c0             	movzbl %al,%eax
c01040b8:	85 c0                	test   %eax,%eax
c01040ba:	75 24                	jne    c01040e0 <default_check+0x7a>
c01040bc:	c7 44 24 0c c6 61 11 	movl   $0xc01161c6,0xc(%esp)
c01040c3:	c0 
c01040c4:	c7 44 24 08 f6 5f 11 	movl   $0xc0115ff6,0x8(%esp)
c01040cb:	c0 
c01040cc:	c7 44 24 04 e4 00 00 	movl   $0xe4,0x4(%esp)
c01040d3:	00 
c01040d4:	c7 04 24 0b 60 11 c0 	movl   $0xc011600b,(%esp)
c01040db:	e8 e8 cd ff ff       	call   c0100ec8 <__panic>
        count ++, total += p->property;
c01040e0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01040e4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01040e7:	8b 50 08             	mov    0x8(%eax),%edx
c01040ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01040ed:	01 d0                	add    %edx,%eax
c01040ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01040f2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01040f5:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01040f8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01040fb:	8b 40 04             	mov    0x4(%eax),%eax
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
    int count = 0, total = 0;
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c01040fe:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0104101:	81 7d ec 14 30 15 c0 	cmpl   $0xc0153014,-0x14(%ebp)
c0104108:	0f 85 79 ff ff ff    	jne    c0104087 <default_check+0x21>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
    }
    assert(total == nr_free_pages());
c010410e:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c0104111:	e8 eb 10 00 00       	call   c0105201 <nr_free_pages>
c0104116:	39 c3                	cmp    %eax,%ebx
c0104118:	74 24                	je     c010413e <default_check+0xd8>
c010411a:	c7 44 24 0c d6 61 11 	movl   $0xc01161d6,0xc(%esp)
c0104121:	c0 
c0104122:	c7 44 24 08 f6 5f 11 	movl   $0xc0115ff6,0x8(%esp)
c0104129:	c0 
c010412a:	c7 44 24 04 e7 00 00 	movl   $0xe7,0x4(%esp)
c0104131:	00 
c0104132:	c7 04 24 0b 60 11 c0 	movl   $0xc011600b,(%esp)
c0104139:	e8 8a cd ff ff       	call   c0100ec8 <__panic>

    basic_check();
c010413e:	e8 e7 f9 ff ff       	call   c0103b2a <basic_check>

    struct Page *p0 = alloc_pages(5), *p1, *p2;
c0104143:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c010414a:	e8 15 10 00 00       	call   c0105164 <alloc_pages>
c010414f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(p0 != NULL);
c0104152:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0104156:	75 24                	jne    c010417c <default_check+0x116>
c0104158:	c7 44 24 0c ef 61 11 	movl   $0xc01161ef,0xc(%esp)
c010415f:	c0 
c0104160:	c7 44 24 08 f6 5f 11 	movl   $0xc0115ff6,0x8(%esp)
c0104167:	c0 
c0104168:	c7 44 24 04 ec 00 00 	movl   $0xec,0x4(%esp)
c010416f:	00 
c0104170:	c7 04 24 0b 60 11 c0 	movl   $0xc011600b,(%esp)
c0104177:	e8 4c cd ff ff       	call   c0100ec8 <__panic>
    assert(!PageProperty(p0));
c010417c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010417f:	83 c0 04             	add    $0x4,%eax
c0104182:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c0104189:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010418c:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010418f:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0104192:	0f a3 10             	bt     %edx,(%eax)
c0104195:	19 c0                	sbb    %eax,%eax
c0104197:	89 45 b8             	mov    %eax,-0x48(%ebp)
    return oldbit != 0;
c010419a:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c010419e:	0f 95 c0             	setne  %al
c01041a1:	0f b6 c0             	movzbl %al,%eax
c01041a4:	85 c0                	test   %eax,%eax
c01041a6:	74 24                	je     c01041cc <default_check+0x166>
c01041a8:	c7 44 24 0c fa 61 11 	movl   $0xc01161fa,0xc(%esp)
c01041af:	c0 
c01041b0:	c7 44 24 08 f6 5f 11 	movl   $0xc0115ff6,0x8(%esp)
c01041b7:	c0 
c01041b8:	c7 44 24 04 ed 00 00 	movl   $0xed,0x4(%esp)
c01041bf:	00 
c01041c0:	c7 04 24 0b 60 11 c0 	movl   $0xc011600b,(%esp)
c01041c7:	e8 fc cc ff ff       	call   c0100ec8 <__panic>

    list_entry_t free_list_store = free_list;
c01041cc:	a1 14 30 15 c0       	mov    0xc0153014,%eax
c01041d1:	8b 15 18 30 15 c0    	mov    0xc0153018,%edx
c01041d7:	89 45 80             	mov    %eax,-0x80(%ebp)
c01041da:	89 55 84             	mov    %edx,-0x7c(%ebp)
c01041dd:	c7 45 b4 14 30 15 c0 	movl   $0xc0153014,-0x4c(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01041e4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01041e7:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01041ea:	89 50 04             	mov    %edx,0x4(%eax)
c01041ed:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01041f0:	8b 50 04             	mov    0x4(%eax),%edx
c01041f3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01041f6:	89 10                	mov    %edx,(%eax)
c01041f8:	c7 45 b0 14 30 15 c0 	movl   $0xc0153014,-0x50(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c01041ff:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0104202:	8b 40 04             	mov    0x4(%eax),%eax
c0104205:	39 45 b0             	cmp    %eax,-0x50(%ebp)
c0104208:	0f 94 c0             	sete   %al
c010420b:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c010420e:	85 c0                	test   %eax,%eax
c0104210:	75 24                	jne    c0104236 <default_check+0x1d0>
c0104212:	c7 44 24 0c 4f 61 11 	movl   $0xc011614f,0xc(%esp)
c0104219:	c0 
c010421a:	c7 44 24 08 f6 5f 11 	movl   $0xc0115ff6,0x8(%esp)
c0104221:	c0 
c0104222:	c7 44 24 04 f1 00 00 	movl   $0xf1,0x4(%esp)
c0104229:	00 
c010422a:	c7 04 24 0b 60 11 c0 	movl   $0xc011600b,(%esp)
c0104231:	e8 92 cc ff ff       	call   c0100ec8 <__panic>
    assert(alloc_page() == NULL);
c0104236:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010423d:	e8 22 0f 00 00       	call   c0105164 <alloc_pages>
c0104242:	85 c0                	test   %eax,%eax
c0104244:	74 24                	je     c010426a <default_check+0x204>
c0104246:	c7 44 24 0c 66 61 11 	movl   $0xc0116166,0xc(%esp)
c010424d:	c0 
c010424e:	c7 44 24 08 f6 5f 11 	movl   $0xc0115ff6,0x8(%esp)
c0104255:	c0 
c0104256:	c7 44 24 04 f2 00 00 	movl   $0xf2,0x4(%esp)
c010425d:	00 
c010425e:	c7 04 24 0b 60 11 c0 	movl   $0xc011600b,(%esp)
c0104265:	e8 5e cc ff ff       	call   c0100ec8 <__panic>

    unsigned int nr_free_store = nr_free;
c010426a:	a1 1c 30 15 c0       	mov    0xc015301c,%eax
c010426f:	89 45 e0             	mov    %eax,-0x20(%ebp)
    nr_free = 0;
c0104272:	c7 05 1c 30 15 c0 00 	movl   $0x0,0xc015301c
c0104279:	00 00 00 

    free_pages(p0 + 2, 3);
c010427c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010427f:	83 c0 48             	add    $0x48,%eax
c0104282:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c0104289:	00 
c010428a:	89 04 24             	mov    %eax,(%esp)
c010428d:	e8 3d 0f 00 00       	call   c01051cf <free_pages>
    assert(alloc_pages(4) == NULL);
c0104292:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c0104299:	e8 c6 0e 00 00       	call   c0105164 <alloc_pages>
c010429e:	85 c0                	test   %eax,%eax
c01042a0:	74 24                	je     c01042c6 <default_check+0x260>
c01042a2:	c7 44 24 0c 0c 62 11 	movl   $0xc011620c,0xc(%esp)
c01042a9:	c0 
c01042aa:	c7 44 24 08 f6 5f 11 	movl   $0xc0115ff6,0x8(%esp)
c01042b1:	c0 
c01042b2:	c7 44 24 04 f8 00 00 	movl   $0xf8,0x4(%esp)
c01042b9:	00 
c01042ba:	c7 04 24 0b 60 11 c0 	movl   $0xc011600b,(%esp)
c01042c1:	e8 02 cc ff ff       	call   c0100ec8 <__panic>
    assert(PageProperty(p0 + 2) && p0[2].property == 3);
c01042c6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01042c9:	83 c0 48             	add    $0x48,%eax
c01042cc:	83 c0 04             	add    $0x4,%eax
c01042cf:	c7 45 ac 01 00 00 00 	movl   $0x1,-0x54(%ebp)
c01042d6:	89 45 a8             	mov    %eax,-0x58(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01042d9:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01042dc:	8b 55 ac             	mov    -0x54(%ebp),%edx
c01042df:	0f a3 10             	bt     %edx,(%eax)
c01042e2:	19 c0                	sbb    %eax,%eax
c01042e4:	89 45 a4             	mov    %eax,-0x5c(%ebp)
    return oldbit != 0;
c01042e7:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
c01042eb:	0f 95 c0             	setne  %al
c01042ee:	0f b6 c0             	movzbl %al,%eax
c01042f1:	85 c0                	test   %eax,%eax
c01042f3:	74 0e                	je     c0104303 <default_check+0x29d>
c01042f5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01042f8:	83 c0 48             	add    $0x48,%eax
c01042fb:	8b 40 08             	mov    0x8(%eax),%eax
c01042fe:	83 f8 03             	cmp    $0x3,%eax
c0104301:	74 24                	je     c0104327 <default_check+0x2c1>
c0104303:	c7 44 24 0c 24 62 11 	movl   $0xc0116224,0xc(%esp)
c010430a:	c0 
c010430b:	c7 44 24 08 f6 5f 11 	movl   $0xc0115ff6,0x8(%esp)
c0104312:	c0 
c0104313:	c7 44 24 04 f9 00 00 	movl   $0xf9,0x4(%esp)
c010431a:	00 
c010431b:	c7 04 24 0b 60 11 c0 	movl   $0xc011600b,(%esp)
c0104322:	e8 a1 cb ff ff       	call   c0100ec8 <__panic>
    assert((p1 = alloc_pages(3)) != NULL);
c0104327:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
c010432e:	e8 31 0e 00 00       	call   c0105164 <alloc_pages>
c0104333:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0104336:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010433a:	75 24                	jne    c0104360 <default_check+0x2fa>
c010433c:	c7 44 24 0c 50 62 11 	movl   $0xc0116250,0xc(%esp)
c0104343:	c0 
c0104344:	c7 44 24 08 f6 5f 11 	movl   $0xc0115ff6,0x8(%esp)
c010434b:	c0 
c010434c:	c7 44 24 04 fa 00 00 	movl   $0xfa,0x4(%esp)
c0104353:	00 
c0104354:	c7 04 24 0b 60 11 c0 	movl   $0xc011600b,(%esp)
c010435b:	e8 68 cb ff ff       	call   c0100ec8 <__panic>
    assert(alloc_page() == NULL);
c0104360:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104367:	e8 f8 0d 00 00       	call   c0105164 <alloc_pages>
c010436c:	85 c0                	test   %eax,%eax
c010436e:	74 24                	je     c0104394 <default_check+0x32e>
c0104370:	c7 44 24 0c 66 61 11 	movl   $0xc0116166,0xc(%esp)
c0104377:	c0 
c0104378:	c7 44 24 08 f6 5f 11 	movl   $0xc0115ff6,0x8(%esp)
c010437f:	c0 
c0104380:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
c0104387:	00 
c0104388:	c7 04 24 0b 60 11 c0 	movl   $0xc011600b,(%esp)
c010438f:	e8 34 cb ff ff       	call   c0100ec8 <__panic>
    assert(p0 + 2 == p1);
c0104394:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104397:	83 c0 48             	add    $0x48,%eax
c010439a:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c010439d:	74 24                	je     c01043c3 <default_check+0x35d>
c010439f:	c7 44 24 0c 6e 62 11 	movl   $0xc011626e,0xc(%esp)
c01043a6:	c0 
c01043a7:	c7 44 24 08 f6 5f 11 	movl   $0xc0115ff6,0x8(%esp)
c01043ae:	c0 
c01043af:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
c01043b6:	00 
c01043b7:	c7 04 24 0b 60 11 c0 	movl   $0xc011600b,(%esp)
c01043be:	e8 05 cb ff ff       	call   c0100ec8 <__panic>

    p2 = p0 + 1;
c01043c3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01043c6:	83 c0 24             	add    $0x24,%eax
c01043c9:	89 45 d8             	mov    %eax,-0x28(%ebp)
    free_page(p0);
c01043cc:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01043d3:	00 
c01043d4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01043d7:	89 04 24             	mov    %eax,(%esp)
c01043da:	e8 f0 0d 00 00       	call   c01051cf <free_pages>
    free_pages(p1, 3);
c01043df:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c01043e6:	00 
c01043e7:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01043ea:	89 04 24             	mov    %eax,(%esp)
c01043ed:	e8 dd 0d 00 00       	call   c01051cf <free_pages>
    assert(PageProperty(p0) && p0->property == 1);
c01043f2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01043f5:	83 c0 04             	add    $0x4,%eax
c01043f8:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
c01043ff:	89 45 9c             	mov    %eax,-0x64(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0104402:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0104405:	8b 55 a0             	mov    -0x60(%ebp),%edx
c0104408:	0f a3 10             	bt     %edx,(%eax)
c010440b:	19 c0                	sbb    %eax,%eax
c010440d:	89 45 98             	mov    %eax,-0x68(%ebp)
    return oldbit != 0;
c0104410:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
c0104414:	0f 95 c0             	setne  %al
c0104417:	0f b6 c0             	movzbl %al,%eax
c010441a:	85 c0                	test   %eax,%eax
c010441c:	74 0b                	je     c0104429 <default_check+0x3c3>
c010441e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104421:	8b 40 08             	mov    0x8(%eax),%eax
c0104424:	83 f8 01             	cmp    $0x1,%eax
c0104427:	74 24                	je     c010444d <default_check+0x3e7>
c0104429:	c7 44 24 0c 7c 62 11 	movl   $0xc011627c,0xc(%esp)
c0104430:	c0 
c0104431:	c7 44 24 08 f6 5f 11 	movl   $0xc0115ff6,0x8(%esp)
c0104438:	c0 
c0104439:	c7 44 24 04 01 01 00 	movl   $0x101,0x4(%esp)
c0104440:	00 
c0104441:	c7 04 24 0b 60 11 c0 	movl   $0xc011600b,(%esp)
c0104448:	e8 7b ca ff ff       	call   c0100ec8 <__panic>
    assert(PageProperty(p1) && p1->property == 3);
c010444d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104450:	83 c0 04             	add    $0x4,%eax
c0104453:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
c010445a:	89 45 90             	mov    %eax,-0x70(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010445d:	8b 45 90             	mov    -0x70(%ebp),%eax
c0104460:	8b 55 94             	mov    -0x6c(%ebp),%edx
c0104463:	0f a3 10             	bt     %edx,(%eax)
c0104466:	19 c0                	sbb    %eax,%eax
c0104468:	89 45 8c             	mov    %eax,-0x74(%ebp)
    return oldbit != 0;
c010446b:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
c010446f:	0f 95 c0             	setne  %al
c0104472:	0f b6 c0             	movzbl %al,%eax
c0104475:	85 c0                	test   %eax,%eax
c0104477:	74 0b                	je     c0104484 <default_check+0x41e>
c0104479:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010447c:	8b 40 08             	mov    0x8(%eax),%eax
c010447f:	83 f8 03             	cmp    $0x3,%eax
c0104482:	74 24                	je     c01044a8 <default_check+0x442>
c0104484:	c7 44 24 0c a4 62 11 	movl   $0xc01162a4,0xc(%esp)
c010448b:	c0 
c010448c:	c7 44 24 08 f6 5f 11 	movl   $0xc0115ff6,0x8(%esp)
c0104493:	c0 
c0104494:	c7 44 24 04 02 01 00 	movl   $0x102,0x4(%esp)
c010449b:	00 
c010449c:	c7 04 24 0b 60 11 c0 	movl   $0xc011600b,(%esp)
c01044a3:	e8 20 ca ff ff       	call   c0100ec8 <__panic>

    assert((p0 = alloc_page()) == p2 - 1);
c01044a8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01044af:	e8 b0 0c 00 00       	call   c0105164 <alloc_pages>
c01044b4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01044b7:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01044ba:	83 e8 24             	sub    $0x24,%eax
c01044bd:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c01044c0:	74 24                	je     c01044e6 <default_check+0x480>
c01044c2:	c7 44 24 0c ca 62 11 	movl   $0xc01162ca,0xc(%esp)
c01044c9:	c0 
c01044ca:	c7 44 24 08 f6 5f 11 	movl   $0xc0115ff6,0x8(%esp)
c01044d1:	c0 
c01044d2:	c7 44 24 04 04 01 00 	movl   $0x104,0x4(%esp)
c01044d9:	00 
c01044da:	c7 04 24 0b 60 11 c0 	movl   $0xc011600b,(%esp)
c01044e1:	e8 e2 c9 ff ff       	call   c0100ec8 <__panic>
    free_page(p0);
c01044e6:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01044ed:	00 
c01044ee:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01044f1:	89 04 24             	mov    %eax,(%esp)
c01044f4:	e8 d6 0c 00 00       	call   c01051cf <free_pages>
    assert((p0 = alloc_pages(2)) == p2 + 1);
c01044f9:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c0104500:	e8 5f 0c 00 00       	call   c0105164 <alloc_pages>
c0104505:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0104508:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010450b:	83 c0 24             	add    $0x24,%eax
c010450e:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c0104511:	74 24                	je     c0104537 <default_check+0x4d1>
c0104513:	c7 44 24 0c e8 62 11 	movl   $0xc01162e8,0xc(%esp)
c010451a:	c0 
c010451b:	c7 44 24 08 f6 5f 11 	movl   $0xc0115ff6,0x8(%esp)
c0104522:	c0 
c0104523:	c7 44 24 04 06 01 00 	movl   $0x106,0x4(%esp)
c010452a:	00 
c010452b:	c7 04 24 0b 60 11 c0 	movl   $0xc011600b,(%esp)
c0104532:	e8 91 c9 ff ff       	call   c0100ec8 <__panic>

    free_pages(p0, 2);
c0104537:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c010453e:	00 
c010453f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104542:	89 04 24             	mov    %eax,(%esp)
c0104545:	e8 85 0c 00 00       	call   c01051cf <free_pages>
    free_page(p2);
c010454a:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104551:	00 
c0104552:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104555:	89 04 24             	mov    %eax,(%esp)
c0104558:	e8 72 0c 00 00       	call   c01051cf <free_pages>

    assert((p0 = alloc_pages(5)) != NULL);
c010455d:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c0104564:	e8 fb 0b 00 00       	call   c0105164 <alloc_pages>
c0104569:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010456c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0104570:	75 24                	jne    c0104596 <default_check+0x530>
c0104572:	c7 44 24 0c 08 63 11 	movl   $0xc0116308,0xc(%esp)
c0104579:	c0 
c010457a:	c7 44 24 08 f6 5f 11 	movl   $0xc0115ff6,0x8(%esp)
c0104581:	c0 
c0104582:	c7 44 24 04 0b 01 00 	movl   $0x10b,0x4(%esp)
c0104589:	00 
c010458a:	c7 04 24 0b 60 11 c0 	movl   $0xc011600b,(%esp)
c0104591:	e8 32 c9 ff ff       	call   c0100ec8 <__panic>
    assert(alloc_page() == NULL);
c0104596:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010459d:	e8 c2 0b 00 00       	call   c0105164 <alloc_pages>
c01045a2:	85 c0                	test   %eax,%eax
c01045a4:	74 24                	je     c01045ca <default_check+0x564>
c01045a6:	c7 44 24 0c 66 61 11 	movl   $0xc0116166,0xc(%esp)
c01045ad:	c0 
c01045ae:	c7 44 24 08 f6 5f 11 	movl   $0xc0115ff6,0x8(%esp)
c01045b5:	c0 
c01045b6:	c7 44 24 04 0c 01 00 	movl   $0x10c,0x4(%esp)
c01045bd:	00 
c01045be:	c7 04 24 0b 60 11 c0 	movl   $0xc011600b,(%esp)
c01045c5:	e8 fe c8 ff ff       	call   c0100ec8 <__panic>

    assert(nr_free == 0);
c01045ca:	a1 1c 30 15 c0       	mov    0xc015301c,%eax
c01045cf:	85 c0                	test   %eax,%eax
c01045d1:	74 24                	je     c01045f7 <default_check+0x591>
c01045d3:	c7 44 24 0c b9 61 11 	movl   $0xc01161b9,0xc(%esp)
c01045da:	c0 
c01045db:	c7 44 24 08 f6 5f 11 	movl   $0xc0115ff6,0x8(%esp)
c01045e2:	c0 
c01045e3:	c7 44 24 04 0e 01 00 	movl   $0x10e,0x4(%esp)
c01045ea:	00 
c01045eb:	c7 04 24 0b 60 11 c0 	movl   $0xc011600b,(%esp)
c01045f2:	e8 d1 c8 ff ff       	call   c0100ec8 <__panic>
    nr_free = nr_free_store;
c01045f7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01045fa:	a3 1c 30 15 c0       	mov    %eax,0xc015301c

    free_list = free_list_store;
c01045ff:	8b 45 80             	mov    -0x80(%ebp),%eax
c0104602:	8b 55 84             	mov    -0x7c(%ebp),%edx
c0104605:	a3 14 30 15 c0       	mov    %eax,0xc0153014
c010460a:	89 15 18 30 15 c0    	mov    %edx,0xc0153018
    free_pages(p0, 5);
c0104610:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
c0104617:	00 
c0104618:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010461b:	89 04 24             	mov    %eax,(%esp)
c010461e:	e8 ac 0b 00 00       	call   c01051cf <free_pages>

    le = &free_list;
c0104623:	c7 45 ec 14 30 15 c0 	movl   $0xc0153014,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c010462a:	eb 1d                	jmp    c0104649 <default_check+0x5e3>
        struct Page *p = le2page(le, page_link);
c010462c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010462f:	83 e8 10             	sub    $0x10,%eax
c0104632:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        count --, total -= p->property;
c0104635:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0104639:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010463c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010463f:	8b 40 08             	mov    0x8(%eax),%eax
c0104642:	29 c2                	sub    %eax,%edx
c0104644:	89 d0                	mov    %edx,%eax
c0104646:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104649:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010464c:	89 45 88             	mov    %eax,-0x78(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010464f:	8b 45 88             	mov    -0x78(%ebp),%eax
c0104652:	8b 40 04             	mov    0x4(%eax),%eax

    free_list = free_list_store;
    free_pages(p0, 5);

    le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c0104655:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0104658:	81 7d ec 14 30 15 c0 	cmpl   $0xc0153014,-0x14(%ebp)
c010465f:	75 cb                	jne    c010462c <default_check+0x5c6>
        struct Page *p = le2page(le, page_link);
        count --, total -= p->property;
    }
    assert(count == 0);
c0104661:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104665:	74 24                	je     c010468b <default_check+0x625>
c0104667:	c7 44 24 0c 26 63 11 	movl   $0xc0116326,0xc(%esp)
c010466e:	c0 
c010466f:	c7 44 24 08 f6 5f 11 	movl   $0xc0115ff6,0x8(%esp)
c0104676:	c0 
c0104677:	c7 44 24 04 19 01 00 	movl   $0x119,0x4(%esp)
c010467e:	00 
c010467f:	c7 04 24 0b 60 11 c0 	movl   $0xc011600b,(%esp)
c0104686:	e8 3d c8 ff ff       	call   c0100ec8 <__panic>
    assert(total == 0);
c010468b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010468f:	74 24                	je     c01046b5 <default_check+0x64f>
c0104691:	c7 44 24 0c 31 63 11 	movl   $0xc0116331,0xc(%esp)
c0104698:	c0 
c0104699:	c7 44 24 08 f6 5f 11 	movl   $0xc0115ff6,0x8(%esp)
c01046a0:	c0 
c01046a1:	c7 44 24 04 1a 01 00 	movl   $0x11a,0x4(%esp)
c01046a8:	00 
c01046a9:	c7 04 24 0b 60 11 c0 	movl   $0xc011600b,(%esp)
c01046b0:	e8 13 c8 ff ff       	call   c0100ec8 <__panic>
}
c01046b5:	81 c4 94 00 00 00    	add    $0x94,%esp
c01046bb:	5b                   	pop    %ebx
c01046bc:	5d                   	pop    %ebp
c01046bd:	c3                   	ret    

c01046be <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c01046be:	55                   	push   %ebp
c01046bf:	89 e5                	mov    %esp,%ebp
c01046c1:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c01046c4:	9c                   	pushf  
c01046c5:	58                   	pop    %eax
c01046c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c01046c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c01046cc:	25 00 02 00 00       	and    $0x200,%eax
c01046d1:	85 c0                	test   %eax,%eax
c01046d3:	74 0c                	je     c01046e1 <__intr_save+0x23>
        intr_disable();
c01046d5:	e8 50 da ff ff       	call   c010212a <intr_disable>
        return 1;
c01046da:	b8 01 00 00 00       	mov    $0x1,%eax
c01046df:	eb 05                	jmp    c01046e6 <__intr_save+0x28>
    }
    return 0;
c01046e1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01046e6:	c9                   	leave  
c01046e7:	c3                   	ret    

c01046e8 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c01046e8:	55                   	push   %ebp
c01046e9:	89 e5                	mov    %esp,%ebp
c01046eb:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c01046ee:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01046f2:	74 05                	je     c01046f9 <__intr_restore+0x11>
        intr_enable();
c01046f4:	e8 2b da ff ff       	call   c0102124 <intr_enable>
    }
}
c01046f9:	c9                   	leave  
c01046fa:	c3                   	ret    

c01046fb <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c01046fb:	55                   	push   %ebp
c01046fc:	89 e5                	mov    %esp,%ebp
    return page - pages;
c01046fe:	8b 55 08             	mov    0x8(%ebp),%edx
c0104701:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c0104706:	29 c2                	sub    %eax,%edx
c0104708:	89 d0                	mov    %edx,%eax
c010470a:	c1 f8 02             	sar    $0x2,%eax
c010470d:	69 c0 39 8e e3 38    	imul   $0x38e38e39,%eax,%eax
}
c0104713:	5d                   	pop    %ebp
c0104714:	c3                   	ret    

c0104715 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0104715:	55                   	push   %ebp
c0104716:	89 e5                	mov    %esp,%ebp
c0104718:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c010471b:	8b 45 08             	mov    0x8(%ebp),%eax
c010471e:	89 04 24             	mov    %eax,(%esp)
c0104721:	e8 d5 ff ff ff       	call   c01046fb <page2ppn>
c0104726:	c1 e0 0c             	shl    $0xc,%eax
}
c0104729:	c9                   	leave  
c010472a:	c3                   	ret    

c010472b <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c010472b:	55                   	push   %ebp
c010472c:	89 e5                	mov    %esp,%ebp
c010472e:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0104731:	8b 45 08             	mov    0x8(%ebp),%eax
c0104734:	c1 e8 0c             	shr    $0xc,%eax
c0104737:	89 c2                	mov    %eax,%edx
c0104739:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c010473e:	39 c2                	cmp    %eax,%edx
c0104740:	72 1c                	jb     c010475e <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0104742:	c7 44 24 08 6c 63 11 	movl   $0xc011636c,0x8(%esp)
c0104749:	c0 
c010474a:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0104751:	00 
c0104752:	c7 04 24 8b 63 11 c0 	movl   $0xc011638b,(%esp)
c0104759:	e8 6a c7 ff ff       	call   c0100ec8 <__panic>
    }
    return &pages[PPN(pa)];
c010475e:	8b 0d 28 30 15 c0    	mov    0xc0153028,%ecx
c0104764:	8b 45 08             	mov    0x8(%ebp),%eax
c0104767:	c1 e8 0c             	shr    $0xc,%eax
c010476a:	89 c2                	mov    %eax,%edx
c010476c:	89 d0                	mov    %edx,%eax
c010476e:	c1 e0 03             	shl    $0x3,%eax
c0104771:	01 d0                	add    %edx,%eax
c0104773:	c1 e0 02             	shl    $0x2,%eax
c0104776:	01 c8                	add    %ecx,%eax
}
c0104778:	c9                   	leave  
c0104779:	c3                   	ret    

c010477a <page2kva>:

static inline void *
page2kva(struct Page *page) {
c010477a:	55                   	push   %ebp
c010477b:	89 e5                	mov    %esp,%ebp
c010477d:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c0104780:	8b 45 08             	mov    0x8(%ebp),%eax
c0104783:	89 04 24             	mov    %eax,(%esp)
c0104786:	e8 8a ff ff ff       	call   c0104715 <page2pa>
c010478b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010478e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104791:	c1 e8 0c             	shr    $0xc,%eax
c0104794:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104797:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c010479c:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010479f:	72 23                	jb     c01047c4 <page2kva+0x4a>
c01047a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01047a4:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01047a8:	c7 44 24 08 9c 63 11 	movl   $0xc011639c,0x8(%esp)
c01047af:	c0 
c01047b0:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c01047b7:	00 
c01047b8:	c7 04 24 8b 63 11 c0 	movl   $0xc011638b,(%esp)
c01047bf:	e8 04 c7 ff ff       	call   c0100ec8 <__panic>
c01047c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01047c7:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c01047cc:	c9                   	leave  
c01047cd:	c3                   	ret    

c01047ce <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c01047ce:	55                   	push   %ebp
c01047cf:	89 e5                	mov    %esp,%ebp
c01047d1:	83 ec 28             	sub    $0x28,%esp
    return pa2page(PADDR(kva));
c01047d4:	8b 45 08             	mov    0x8(%ebp),%eax
c01047d7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01047da:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c01047e1:	77 23                	ja     c0104806 <kva2page+0x38>
c01047e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01047e6:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01047ea:	c7 44 24 08 c0 63 11 	movl   $0xc01163c0,0x8(%esp)
c01047f1:	c0 
c01047f2:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c01047f9:	00 
c01047fa:	c7 04 24 8b 63 11 c0 	movl   $0xc011638b,(%esp)
c0104801:	e8 c2 c6 ff ff       	call   c0100ec8 <__panic>
c0104806:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104809:	05 00 00 00 40       	add    $0x40000000,%eax
c010480e:	89 04 24             	mov    %eax,(%esp)
c0104811:	e8 15 ff ff ff       	call   c010472b <pa2page>
}
c0104816:	c9                   	leave  
c0104817:	c3                   	ret    

c0104818 <__slob_get_free_pages>:
static slob_t *slobfree = &arena;
static bigblock_t *bigblocks;


static void* __slob_get_free_pages(gfp_t gfp, int order)
{
c0104818:	55                   	push   %ebp
c0104819:	89 e5                	mov    %esp,%ebp
c010481b:	83 ec 28             	sub    $0x28,%esp
  struct Page * page = alloc_pages(1 << order);
c010481e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104821:	ba 01 00 00 00       	mov    $0x1,%edx
c0104826:	89 c1                	mov    %eax,%ecx
c0104828:	d3 e2                	shl    %cl,%edx
c010482a:	89 d0                	mov    %edx,%eax
c010482c:	89 04 24             	mov    %eax,(%esp)
c010482f:	e8 30 09 00 00       	call   c0105164 <alloc_pages>
c0104834:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(!page)
c0104837:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010483b:	75 07                	jne    c0104844 <__slob_get_free_pages+0x2c>
    return NULL;
c010483d:	b8 00 00 00 00       	mov    $0x0,%eax
c0104842:	eb 0b                	jmp    c010484f <__slob_get_free_pages+0x37>
  return page2kva(page);
c0104844:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104847:	89 04 24             	mov    %eax,(%esp)
c010484a:	e8 2b ff ff ff       	call   c010477a <page2kva>
}
c010484f:	c9                   	leave  
c0104850:	c3                   	ret    

c0104851 <__slob_free_pages>:

#define __slob_get_free_page(gfp) __slob_get_free_pages(gfp, 0)

static inline void __slob_free_pages(unsigned long kva, int order)
{
c0104851:	55                   	push   %ebp
c0104852:	89 e5                	mov    %esp,%ebp
c0104854:	53                   	push   %ebx
c0104855:	83 ec 14             	sub    $0x14,%esp
  free_pages(kva2page(kva), 1 << order);
c0104858:	8b 45 0c             	mov    0xc(%ebp),%eax
c010485b:	ba 01 00 00 00       	mov    $0x1,%edx
c0104860:	89 c1                	mov    %eax,%ecx
c0104862:	d3 e2                	shl    %cl,%edx
c0104864:	89 d0                	mov    %edx,%eax
c0104866:	89 c3                	mov    %eax,%ebx
c0104868:	8b 45 08             	mov    0x8(%ebp),%eax
c010486b:	89 04 24             	mov    %eax,(%esp)
c010486e:	e8 5b ff ff ff       	call   c01047ce <kva2page>
c0104873:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c0104877:	89 04 24             	mov    %eax,(%esp)
c010487a:	e8 50 09 00 00       	call   c01051cf <free_pages>
}
c010487f:	83 c4 14             	add    $0x14,%esp
c0104882:	5b                   	pop    %ebx
c0104883:	5d                   	pop    %ebp
c0104884:	c3                   	ret    

c0104885 <slob_alloc>:

static void slob_free(void *b, int size);

static void *slob_alloc(size_t size, gfp_t gfp, int align)
{
c0104885:	55                   	push   %ebp
c0104886:	89 e5                	mov    %esp,%ebp
c0104888:	83 ec 38             	sub    $0x38,%esp
  assert( (size + SLOB_UNIT) < PAGE_SIZE );
c010488b:	8b 45 08             	mov    0x8(%ebp),%eax
c010488e:	83 c0 08             	add    $0x8,%eax
c0104891:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c0104896:	76 24                	jbe    c01048bc <slob_alloc+0x37>
c0104898:	c7 44 24 0c e4 63 11 	movl   $0xc01163e4,0xc(%esp)
c010489f:	c0 
c01048a0:	c7 44 24 08 03 64 11 	movl   $0xc0116403,0x8(%esp)
c01048a7:	c0 
c01048a8:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c01048af:	00 
c01048b0:	c7 04 24 18 64 11 c0 	movl   $0xc0116418,(%esp)
c01048b7:	e8 0c c6 ff ff       	call   c0100ec8 <__panic>

	slob_t *prev, *cur, *aligned = 0;
c01048bc:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
c01048c3:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c01048ca:	8b 45 08             	mov    0x8(%ebp),%eax
c01048cd:	83 c0 07             	add    $0x7,%eax
c01048d0:	c1 e8 03             	shr    $0x3,%eax
c01048d3:	89 45 e0             	mov    %eax,-0x20(%ebp)
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
c01048d6:	e8 e3 fd ff ff       	call   c01046be <__intr_save>
c01048db:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	prev = slobfree;
c01048de:	a1 08 ea 14 c0       	mov    0xc014ea08,%eax
c01048e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c01048e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01048e9:	8b 40 04             	mov    0x4(%eax),%eax
c01048ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (align) {
c01048ef:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01048f3:	74 25                	je     c010491a <slob_alloc+0x95>
			aligned = (slob_t *)ALIGN((unsigned long)cur, align);
c01048f5:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01048f8:	8b 45 10             	mov    0x10(%ebp),%eax
c01048fb:	01 d0                	add    %edx,%eax
c01048fd:	8d 50 ff             	lea    -0x1(%eax),%edx
c0104900:	8b 45 10             	mov    0x10(%ebp),%eax
c0104903:	f7 d8                	neg    %eax
c0104905:	21 d0                	and    %edx,%eax
c0104907:	89 45 ec             	mov    %eax,-0x14(%ebp)
			delta = aligned - cur;
c010490a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010490d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104910:	29 c2                	sub    %eax,%edx
c0104912:	89 d0                	mov    %edx,%eax
c0104914:	c1 f8 03             	sar    $0x3,%eax
c0104917:	89 45 e8             	mov    %eax,-0x18(%ebp)
		}
		if (cur->units >= units + delta) { /* room enough? */
c010491a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010491d:	8b 00                	mov    (%eax),%eax
c010491f:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0104922:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0104925:	01 ca                	add    %ecx,%edx
c0104927:	39 d0                	cmp    %edx,%eax
c0104929:	0f 8c aa 00 00 00    	jl     c01049d9 <slob_alloc+0x154>
			if (delta) { /* need to fragment head to align? */
c010492f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0104933:	74 38                	je     c010496d <slob_alloc+0xe8>
				aligned->units = cur->units - delta;
c0104935:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104938:	8b 00                	mov    (%eax),%eax
c010493a:	2b 45 e8             	sub    -0x18(%ebp),%eax
c010493d:	89 c2                	mov    %eax,%edx
c010493f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104942:	89 10                	mov    %edx,(%eax)
				aligned->next = cur->next;
c0104944:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104947:	8b 50 04             	mov    0x4(%eax),%edx
c010494a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010494d:	89 50 04             	mov    %edx,0x4(%eax)
				cur->next = aligned;
c0104950:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104953:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0104956:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = delta;
c0104959:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010495c:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010495f:	89 10                	mov    %edx,(%eax)
				prev = cur;
c0104961:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104964:	89 45 f4             	mov    %eax,-0xc(%ebp)
				cur = aligned;
c0104967:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010496a:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}

			if (cur->units == units) /* exact fit? */
c010496d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104970:	8b 00                	mov    (%eax),%eax
c0104972:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0104975:	75 0e                	jne    c0104985 <slob_alloc+0x100>
				prev->next = cur->next; /* unlink */
c0104977:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010497a:	8b 50 04             	mov    0x4(%eax),%edx
c010497d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104980:	89 50 04             	mov    %edx,0x4(%eax)
c0104983:	eb 3c                	jmp    c01049c1 <slob_alloc+0x13c>
			else { /* fragment */
				prev->next = cur + units;
c0104985:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104988:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010498f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104992:	01 c2                	add    %eax,%edx
c0104994:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104997:	89 50 04             	mov    %edx,0x4(%eax)
				prev->next->units = cur->units - units;
c010499a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010499d:	8b 40 04             	mov    0x4(%eax),%eax
c01049a0:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01049a3:	8b 12                	mov    (%edx),%edx
c01049a5:	2b 55 e0             	sub    -0x20(%ebp),%edx
c01049a8:	89 10                	mov    %edx,(%eax)
				prev->next->next = cur->next;
c01049aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01049ad:	8b 40 04             	mov    0x4(%eax),%eax
c01049b0:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01049b3:	8b 52 04             	mov    0x4(%edx),%edx
c01049b6:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = units;
c01049b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01049bc:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01049bf:	89 10                	mov    %edx,(%eax)
			}

			slobfree = prev;
c01049c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01049c4:	a3 08 ea 14 c0       	mov    %eax,0xc014ea08
			spin_unlock_irqrestore(&slob_lock, flags);
c01049c9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01049cc:	89 04 24             	mov    %eax,(%esp)
c01049cf:	e8 14 fd ff ff       	call   c01046e8 <__intr_restore>
			return cur;
c01049d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01049d7:	eb 7f                	jmp    c0104a58 <slob_alloc+0x1d3>
		}
		if (cur == slobfree) {
c01049d9:	a1 08 ea 14 c0       	mov    0xc014ea08,%eax
c01049de:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c01049e1:	75 61                	jne    c0104a44 <slob_alloc+0x1bf>
			spin_unlock_irqrestore(&slob_lock, flags);
c01049e3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01049e6:	89 04 24             	mov    %eax,(%esp)
c01049e9:	e8 fa fc ff ff       	call   c01046e8 <__intr_restore>

			if (size == PAGE_SIZE) /* trying to shrink arena? */
c01049ee:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c01049f5:	75 07                	jne    c01049fe <slob_alloc+0x179>
				return 0;
c01049f7:	b8 00 00 00 00       	mov    $0x0,%eax
c01049fc:	eb 5a                	jmp    c0104a58 <slob_alloc+0x1d3>

			cur = (slob_t *)__slob_get_free_page(gfp);
c01049fe:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104a05:	00 
c0104a06:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104a09:	89 04 24             	mov    %eax,(%esp)
c0104a0c:	e8 07 fe ff ff       	call   c0104818 <__slob_get_free_pages>
c0104a11:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (!cur)
c0104a14:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104a18:	75 07                	jne    c0104a21 <slob_alloc+0x19c>
				return 0;
c0104a1a:	b8 00 00 00 00       	mov    $0x0,%eax
c0104a1f:	eb 37                	jmp    c0104a58 <slob_alloc+0x1d3>

			slob_free(cur, PAGE_SIZE);
c0104a21:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0104a28:	00 
c0104a29:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a2c:	89 04 24             	mov    %eax,(%esp)
c0104a2f:	e8 26 00 00 00       	call   c0104a5a <slob_free>
			spin_lock_irqsave(&slob_lock, flags);
c0104a34:	e8 85 fc ff ff       	call   c01046be <__intr_save>
c0104a39:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			cur = slobfree;
c0104a3c:	a1 08 ea 14 c0       	mov    0xc014ea08,%eax
c0104a41:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
	prev = slobfree;
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c0104a44:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a47:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104a4a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a4d:	8b 40 04             	mov    0x4(%eax),%eax
c0104a50:	89 45 f0             	mov    %eax,-0x10(%ebp)

			slob_free(cur, PAGE_SIZE);
			spin_lock_irqsave(&slob_lock, flags);
			cur = slobfree;
		}
	}
c0104a53:	e9 97 fe ff ff       	jmp    c01048ef <slob_alloc+0x6a>
}
c0104a58:	c9                   	leave  
c0104a59:	c3                   	ret    

c0104a5a <slob_free>:

static void slob_free(void *block, int size)
{
c0104a5a:	55                   	push   %ebp
c0104a5b:	89 e5                	mov    %esp,%ebp
c0104a5d:	83 ec 28             	sub    $0x28,%esp
	slob_t *cur, *b = (slob_t *)block;
c0104a60:	8b 45 08             	mov    0x8(%ebp),%eax
c0104a63:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c0104a66:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104a6a:	75 05                	jne    c0104a71 <slob_free+0x17>
		return;
c0104a6c:	e9 ff 00 00 00       	jmp    c0104b70 <slob_free+0x116>

	if (size)
c0104a71:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0104a75:	74 10                	je     c0104a87 <slob_free+0x2d>
		b->units = SLOB_UNITS(size);
c0104a77:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104a7a:	83 c0 07             	add    $0x7,%eax
c0104a7d:	c1 e8 03             	shr    $0x3,%eax
c0104a80:	89 c2                	mov    %eax,%edx
c0104a82:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a85:	89 10                	mov    %edx,(%eax)

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
c0104a87:	e8 32 fc ff ff       	call   c01046be <__intr_save>
c0104a8c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0104a8f:	a1 08 ea 14 c0       	mov    0xc014ea08,%eax
c0104a94:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104a97:	eb 27                	jmp    c0104ac0 <slob_free+0x66>
		if (cur >= cur->next && (b > cur || b < cur->next))
c0104a99:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a9c:	8b 40 04             	mov    0x4(%eax),%eax
c0104a9f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104aa2:	77 13                	ja     c0104ab7 <slob_free+0x5d>
c0104aa4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104aa7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104aaa:	77 27                	ja     c0104ad3 <slob_free+0x79>
c0104aac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104aaf:	8b 40 04             	mov    0x4(%eax),%eax
c0104ab2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104ab5:	77 1c                	ja     c0104ad3 <slob_free+0x79>
	if (size)
		b->units = SLOB_UNITS(size);

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0104ab7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104aba:	8b 40 04             	mov    0x4(%eax),%eax
c0104abd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104ac0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ac3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104ac6:	76 d1                	jbe    c0104a99 <slob_free+0x3f>
c0104ac8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104acb:	8b 40 04             	mov    0x4(%eax),%eax
c0104ace:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104ad1:	76 c6                	jbe    c0104a99 <slob_free+0x3f>
		if (cur >= cur->next && (b > cur || b < cur->next))
			break;

	if (b + b->units == cur->next) {
c0104ad3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ad6:	8b 00                	mov    (%eax),%eax
c0104ad8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104adf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ae2:	01 c2                	add    %eax,%edx
c0104ae4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ae7:	8b 40 04             	mov    0x4(%eax),%eax
c0104aea:	39 c2                	cmp    %eax,%edx
c0104aec:	75 25                	jne    c0104b13 <slob_free+0xb9>
		b->units += cur->next->units;
c0104aee:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104af1:	8b 10                	mov    (%eax),%edx
c0104af3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104af6:	8b 40 04             	mov    0x4(%eax),%eax
c0104af9:	8b 00                	mov    (%eax),%eax
c0104afb:	01 c2                	add    %eax,%edx
c0104afd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b00:	89 10                	mov    %edx,(%eax)
		b->next = cur->next->next;
c0104b02:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b05:	8b 40 04             	mov    0x4(%eax),%eax
c0104b08:	8b 50 04             	mov    0x4(%eax),%edx
c0104b0b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b0e:	89 50 04             	mov    %edx,0x4(%eax)
c0104b11:	eb 0c                	jmp    c0104b1f <slob_free+0xc5>
	} else
		b->next = cur->next;
c0104b13:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b16:	8b 50 04             	mov    0x4(%eax),%edx
c0104b19:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b1c:	89 50 04             	mov    %edx,0x4(%eax)

	if (cur + cur->units == b) {
c0104b1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b22:	8b 00                	mov    (%eax),%eax
c0104b24:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104b2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b2e:	01 d0                	add    %edx,%eax
c0104b30:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104b33:	75 1f                	jne    c0104b54 <slob_free+0xfa>
		cur->units += b->units;
c0104b35:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b38:	8b 10                	mov    (%eax),%edx
c0104b3a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b3d:	8b 00                	mov    (%eax),%eax
c0104b3f:	01 c2                	add    %eax,%edx
c0104b41:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b44:	89 10                	mov    %edx,(%eax)
		cur->next = b->next;
c0104b46:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b49:	8b 50 04             	mov    0x4(%eax),%edx
c0104b4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b4f:	89 50 04             	mov    %edx,0x4(%eax)
c0104b52:	eb 09                	jmp    c0104b5d <slob_free+0x103>
	} else
		cur->next = b;
c0104b54:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b57:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104b5a:	89 50 04             	mov    %edx,0x4(%eax)

	slobfree = cur;
c0104b5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b60:	a3 08 ea 14 c0       	mov    %eax,0xc014ea08

	spin_unlock_irqrestore(&slob_lock, flags);
c0104b65:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104b68:	89 04 24             	mov    %eax,(%esp)
c0104b6b:	e8 78 fb ff ff       	call   c01046e8 <__intr_restore>
}
c0104b70:	c9                   	leave  
c0104b71:	c3                   	ret    

c0104b72 <check_slab>:



void check_slab(void) {
c0104b72:	55                   	push   %ebp
c0104b73:	89 e5                	mov    %esp,%ebp
c0104b75:	83 ec 18             	sub    $0x18,%esp
  cprintf("check_slab() success\n");
c0104b78:	c7 04 24 2a 64 11 c0 	movl   $0xc011642a,(%esp)
c0104b7f:	e8 e1 b7 ff ff       	call   c0100365 <cprintf>
}
c0104b84:	c9                   	leave  
c0104b85:	c3                   	ret    

c0104b86 <slab_init>:

void
slab_init(void) {
c0104b86:	55                   	push   %ebp
c0104b87:	89 e5                	mov    %esp,%ebp
c0104b89:	83 ec 18             	sub    $0x18,%esp
  cprintf("use SLOB allocator\n");
c0104b8c:	c7 04 24 40 64 11 c0 	movl   $0xc0116440,(%esp)
c0104b93:	e8 cd b7 ff ff       	call   c0100365 <cprintf>
  check_slab();
c0104b98:	e8 d5 ff ff ff       	call   c0104b72 <check_slab>
}
c0104b9d:	c9                   	leave  
c0104b9e:	c3                   	ret    

c0104b9f <kmalloc_init>:

inline void 
kmalloc_init(void) {
c0104b9f:	55                   	push   %ebp
c0104ba0:	89 e5                	mov    %esp,%ebp
c0104ba2:	83 ec 18             	sub    $0x18,%esp
    slab_init();
c0104ba5:	e8 dc ff ff ff       	call   c0104b86 <slab_init>
    cprintf("kmalloc_init() succeeded!\n");
c0104baa:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c0104bb1:	e8 af b7 ff ff       	call   c0100365 <cprintf>
}
c0104bb6:	c9                   	leave  
c0104bb7:	c3                   	ret    

c0104bb8 <slab_allocated>:

size_t
slab_allocated(void) {
c0104bb8:	55                   	push   %ebp
c0104bb9:	89 e5                	mov    %esp,%ebp
  return 0;
c0104bbb:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104bc0:	5d                   	pop    %ebp
c0104bc1:	c3                   	ret    

c0104bc2 <kallocated>:

size_t
kallocated(void) {
c0104bc2:	55                   	push   %ebp
c0104bc3:	89 e5                	mov    %esp,%ebp
   return slab_allocated();
c0104bc5:	e8 ee ff ff ff       	call   c0104bb8 <slab_allocated>
}
c0104bca:	5d                   	pop    %ebp
c0104bcb:	c3                   	ret    

c0104bcc <find_order>:

static int find_order(int size)
{
c0104bcc:	55                   	push   %ebp
c0104bcd:	89 e5                	mov    %esp,%ebp
c0104bcf:	83 ec 10             	sub    $0x10,%esp
	int order = 0;
c0104bd2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for ( ; size > 4096 ; size >>=1)
c0104bd9:	eb 07                	jmp    c0104be2 <find_order+0x16>
		order++;
c0104bdb:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
}

static int find_order(int size)
{
	int order = 0;
	for ( ; size > 4096 ; size >>=1)
c0104bdf:	d1 7d 08             	sarl   0x8(%ebp)
c0104be2:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c0104be9:	7f f0                	jg     c0104bdb <find_order+0xf>
		order++;
	return order;
c0104beb:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0104bee:	c9                   	leave  
c0104bef:	c3                   	ret    

c0104bf0 <__kmalloc>:

static void *__kmalloc(size_t size, gfp_t gfp)
{
c0104bf0:	55                   	push   %ebp
c0104bf1:	89 e5                	mov    %esp,%ebp
c0104bf3:	83 ec 28             	sub    $0x28,%esp
	slob_t *m;
	bigblock_t *bb;
	unsigned long flags;

	if (size < PAGE_SIZE - SLOB_UNIT) {
c0104bf6:	81 7d 08 f7 0f 00 00 	cmpl   $0xff7,0x8(%ebp)
c0104bfd:	77 38                	ja     c0104c37 <__kmalloc+0x47>
		m = slob_alloc(size + SLOB_UNIT, gfp, 0);
c0104bff:	8b 45 08             	mov    0x8(%ebp),%eax
c0104c02:	8d 50 08             	lea    0x8(%eax),%edx
c0104c05:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0104c0c:	00 
c0104c0d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104c10:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104c14:	89 14 24             	mov    %edx,(%esp)
c0104c17:	e8 69 fc ff ff       	call   c0104885 <slob_alloc>
c0104c1c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		return m ? (void *)(m + 1) : 0;
c0104c1f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104c23:	74 08                	je     c0104c2d <__kmalloc+0x3d>
c0104c25:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c28:	83 c0 08             	add    $0x8,%eax
c0104c2b:	eb 05                	jmp    c0104c32 <__kmalloc+0x42>
c0104c2d:	b8 00 00 00 00       	mov    $0x0,%eax
c0104c32:	e9 a6 00 00 00       	jmp    c0104cdd <__kmalloc+0xed>
	}

	bb = slob_alloc(sizeof(bigblock_t), gfp, 0);
c0104c37:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0104c3e:	00 
c0104c3f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104c42:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104c46:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c0104c4d:	e8 33 fc ff ff       	call   c0104885 <slob_alloc>
c0104c52:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!bb)
c0104c55:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104c59:	75 07                	jne    c0104c62 <__kmalloc+0x72>
		return 0;
c0104c5b:	b8 00 00 00 00       	mov    $0x0,%eax
c0104c60:	eb 7b                	jmp    c0104cdd <__kmalloc+0xed>

	bb->order = find_order(size);
c0104c62:	8b 45 08             	mov    0x8(%ebp),%eax
c0104c65:	89 04 24             	mov    %eax,(%esp)
c0104c68:	e8 5f ff ff ff       	call   c0104bcc <find_order>
c0104c6d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104c70:	89 02                	mov    %eax,(%edx)
	bb->pages = (void *)__slob_get_free_pages(gfp, bb->order);
c0104c72:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c75:	8b 00                	mov    (%eax),%eax
c0104c77:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104c7b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104c7e:	89 04 24             	mov    %eax,(%esp)
c0104c81:	e8 92 fb ff ff       	call   c0104818 <__slob_get_free_pages>
c0104c86:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104c89:	89 42 04             	mov    %eax,0x4(%edx)

	if (bb->pages) {
c0104c8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c8f:	8b 40 04             	mov    0x4(%eax),%eax
c0104c92:	85 c0                	test   %eax,%eax
c0104c94:	74 2f                	je     c0104cc5 <__kmalloc+0xd5>
		spin_lock_irqsave(&block_lock, flags);
c0104c96:	e8 23 fa ff ff       	call   c01046be <__intr_save>
c0104c9b:	89 45 ec             	mov    %eax,-0x14(%ebp)
		bb->next = bigblocks;
c0104c9e:	8b 15 64 fe 14 c0    	mov    0xc014fe64,%edx
c0104ca4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ca7:	89 50 08             	mov    %edx,0x8(%eax)
		bigblocks = bb;
c0104caa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104cad:	a3 64 fe 14 c0       	mov    %eax,0xc014fe64
		spin_unlock_irqrestore(&block_lock, flags);
c0104cb2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104cb5:	89 04 24             	mov    %eax,(%esp)
c0104cb8:	e8 2b fa ff ff       	call   c01046e8 <__intr_restore>
		return bb->pages;
c0104cbd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104cc0:	8b 40 04             	mov    0x4(%eax),%eax
c0104cc3:	eb 18                	jmp    c0104cdd <__kmalloc+0xed>
	}

	slob_free(bb, sizeof(bigblock_t));
c0104cc5:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
c0104ccc:	00 
c0104ccd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104cd0:	89 04 24             	mov    %eax,(%esp)
c0104cd3:	e8 82 fd ff ff       	call   c0104a5a <slob_free>
	return 0;
c0104cd8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104cdd:	c9                   	leave  
c0104cde:	c3                   	ret    

c0104cdf <kmalloc>:

void *
kmalloc(size_t size)
{
c0104cdf:	55                   	push   %ebp
c0104ce0:	89 e5                	mov    %esp,%ebp
c0104ce2:	83 ec 18             	sub    $0x18,%esp
  return __kmalloc(size, 0);
c0104ce5:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104cec:	00 
c0104ced:	8b 45 08             	mov    0x8(%ebp),%eax
c0104cf0:	89 04 24             	mov    %eax,(%esp)
c0104cf3:	e8 f8 fe ff ff       	call   c0104bf0 <__kmalloc>
}
c0104cf8:	c9                   	leave  
c0104cf9:	c3                   	ret    

c0104cfa <kfree>:


void kfree(void *block)
{
c0104cfa:	55                   	push   %ebp
c0104cfb:	89 e5                	mov    %esp,%ebp
c0104cfd:	83 ec 28             	sub    $0x28,%esp
	bigblock_t *bb, **last = &bigblocks;
c0104d00:	c7 45 f0 64 fe 14 c0 	movl   $0xc014fe64,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c0104d07:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104d0b:	75 05                	jne    c0104d12 <kfree+0x18>
		return;
c0104d0d:	e9 a2 00 00 00       	jmp    c0104db4 <kfree+0xba>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0104d12:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d15:	25 ff 0f 00 00       	and    $0xfff,%eax
c0104d1a:	85 c0                	test   %eax,%eax
c0104d1c:	75 7f                	jne    c0104d9d <kfree+0xa3>
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
c0104d1e:	e8 9b f9 ff ff       	call   c01046be <__intr_save>
c0104d23:	89 45 ec             	mov    %eax,-0x14(%ebp)
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c0104d26:	a1 64 fe 14 c0       	mov    0xc014fe64,%eax
c0104d2b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104d2e:	eb 5c                	jmp    c0104d8c <kfree+0x92>
			if (bb->pages == block) {
c0104d30:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d33:	8b 40 04             	mov    0x4(%eax),%eax
c0104d36:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104d39:	75 3f                	jne    c0104d7a <kfree+0x80>
				*last = bb->next;
c0104d3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d3e:	8b 50 08             	mov    0x8(%eax),%edx
c0104d41:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104d44:	89 10                	mov    %edx,(%eax)
				spin_unlock_irqrestore(&block_lock, flags);
c0104d46:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104d49:	89 04 24             	mov    %eax,(%esp)
c0104d4c:	e8 97 f9 ff ff       	call   c01046e8 <__intr_restore>
				__slob_free_pages((unsigned long)block, bb->order);
c0104d51:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d54:	8b 10                	mov    (%eax),%edx
c0104d56:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d59:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104d5d:	89 04 24             	mov    %eax,(%esp)
c0104d60:	e8 ec fa ff ff       	call   c0104851 <__slob_free_pages>
				slob_free(bb, sizeof(bigblock_t));
c0104d65:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
c0104d6c:	00 
c0104d6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d70:	89 04 24             	mov    %eax,(%esp)
c0104d73:	e8 e2 fc ff ff       	call   c0104a5a <slob_free>
				return;
c0104d78:	eb 3a                	jmp    c0104db4 <kfree+0xba>
		return;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c0104d7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d7d:	83 c0 08             	add    $0x8,%eax
c0104d80:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104d83:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d86:	8b 40 08             	mov    0x8(%eax),%eax
c0104d89:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104d8c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104d90:	75 9e                	jne    c0104d30 <kfree+0x36>
				__slob_free_pages((unsigned long)block, bb->order);
				slob_free(bb, sizeof(bigblock_t));
				return;
			}
		}
		spin_unlock_irqrestore(&block_lock, flags);
c0104d92:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104d95:	89 04 24             	mov    %eax,(%esp)
c0104d98:	e8 4b f9 ff ff       	call   c01046e8 <__intr_restore>
	}

	slob_free((slob_t *)block - 1, 0);
c0104d9d:	8b 45 08             	mov    0x8(%ebp),%eax
c0104da0:	83 e8 08             	sub    $0x8,%eax
c0104da3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104daa:	00 
c0104dab:	89 04 24             	mov    %eax,(%esp)
c0104dae:	e8 a7 fc ff ff       	call   c0104a5a <slob_free>
	return;
c0104db3:	90                   	nop
}
c0104db4:	c9                   	leave  
c0104db5:	c3                   	ret    

c0104db6 <ksize>:


unsigned int ksize(const void *block)
{
c0104db6:	55                   	push   %ebp
c0104db7:	89 e5                	mov    %esp,%ebp
c0104db9:	83 ec 28             	sub    $0x28,%esp
	bigblock_t *bb;
	unsigned long flags;

	if (!block)
c0104dbc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104dc0:	75 07                	jne    c0104dc9 <ksize+0x13>
		return 0;
c0104dc2:	b8 00 00 00 00       	mov    $0x0,%eax
c0104dc7:	eb 6b                	jmp    c0104e34 <ksize+0x7e>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0104dc9:	8b 45 08             	mov    0x8(%ebp),%eax
c0104dcc:	25 ff 0f 00 00       	and    $0xfff,%eax
c0104dd1:	85 c0                	test   %eax,%eax
c0104dd3:	75 54                	jne    c0104e29 <ksize+0x73>
		spin_lock_irqsave(&block_lock, flags);
c0104dd5:	e8 e4 f8 ff ff       	call   c01046be <__intr_save>
c0104dda:	89 45 f0             	mov    %eax,-0x10(%ebp)
		for (bb = bigblocks; bb; bb = bb->next)
c0104ddd:	a1 64 fe 14 c0       	mov    0xc014fe64,%eax
c0104de2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104de5:	eb 31                	jmp    c0104e18 <ksize+0x62>
			if (bb->pages == block) {
c0104de7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104dea:	8b 40 04             	mov    0x4(%eax),%eax
c0104ded:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104df0:	75 1d                	jne    c0104e0f <ksize+0x59>
				spin_unlock_irqrestore(&slob_lock, flags);
c0104df2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104df5:	89 04 24             	mov    %eax,(%esp)
c0104df8:	e8 eb f8 ff ff       	call   c01046e8 <__intr_restore>
				return PAGE_SIZE << bb->order;
c0104dfd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e00:	8b 00                	mov    (%eax),%eax
c0104e02:	ba 00 10 00 00       	mov    $0x1000,%edx
c0104e07:	89 c1                	mov    %eax,%ecx
c0104e09:	d3 e2                	shl    %cl,%edx
c0104e0b:	89 d0                	mov    %edx,%eax
c0104e0d:	eb 25                	jmp    c0104e34 <ksize+0x7e>
	if (!block)
		return 0;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; bb = bb->next)
c0104e0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e12:	8b 40 08             	mov    0x8(%eax),%eax
c0104e15:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104e18:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104e1c:	75 c9                	jne    c0104de7 <ksize+0x31>
			if (bb->pages == block) {
				spin_unlock_irqrestore(&slob_lock, flags);
				return PAGE_SIZE << bb->order;
			}
		spin_unlock_irqrestore(&block_lock, flags);
c0104e1e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e21:	89 04 24             	mov    %eax,(%esp)
c0104e24:	e8 bf f8 ff ff       	call   c01046e8 <__intr_restore>
	}

	return ((slob_t *)block - 1)->units * SLOB_UNIT;
c0104e29:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e2c:	83 e8 08             	sub    $0x8,%eax
c0104e2f:	8b 00                	mov    (%eax),%eax
c0104e31:	c1 e0 03             	shl    $0x3,%eax
}
c0104e34:	c9                   	leave  
c0104e35:	c3                   	ret    

c0104e36 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0104e36:	55                   	push   %ebp
c0104e37:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0104e39:	8b 55 08             	mov    0x8(%ebp),%edx
c0104e3c:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c0104e41:	29 c2                	sub    %eax,%edx
c0104e43:	89 d0                	mov    %edx,%eax
c0104e45:	c1 f8 02             	sar    $0x2,%eax
c0104e48:	69 c0 39 8e e3 38    	imul   $0x38e38e39,%eax,%eax
}
c0104e4e:	5d                   	pop    %ebp
c0104e4f:	c3                   	ret    

c0104e50 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0104e50:	55                   	push   %ebp
c0104e51:	89 e5                	mov    %esp,%ebp
c0104e53:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c0104e56:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e59:	89 04 24             	mov    %eax,(%esp)
c0104e5c:	e8 d5 ff ff ff       	call   c0104e36 <page2ppn>
c0104e61:	c1 e0 0c             	shl    $0xc,%eax
}
c0104e64:	c9                   	leave  
c0104e65:	c3                   	ret    

c0104e66 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0104e66:	55                   	push   %ebp
c0104e67:	89 e5                	mov    %esp,%ebp
c0104e69:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0104e6c:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e6f:	c1 e8 0c             	shr    $0xc,%eax
c0104e72:	89 c2                	mov    %eax,%edx
c0104e74:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c0104e79:	39 c2                	cmp    %eax,%edx
c0104e7b:	72 1c                	jb     c0104e99 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0104e7d:	c7 44 24 08 70 64 11 	movl   $0xc0116470,0x8(%esp)
c0104e84:	c0 
c0104e85:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0104e8c:	00 
c0104e8d:	c7 04 24 8f 64 11 c0 	movl   $0xc011648f,(%esp)
c0104e94:	e8 2f c0 ff ff       	call   c0100ec8 <__panic>
    }
    return &pages[PPN(pa)];
c0104e99:	8b 0d 28 30 15 c0    	mov    0xc0153028,%ecx
c0104e9f:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ea2:	c1 e8 0c             	shr    $0xc,%eax
c0104ea5:	89 c2                	mov    %eax,%edx
c0104ea7:	89 d0                	mov    %edx,%eax
c0104ea9:	c1 e0 03             	shl    $0x3,%eax
c0104eac:	01 d0                	add    %edx,%eax
c0104eae:	c1 e0 02             	shl    $0x2,%eax
c0104eb1:	01 c8                	add    %ecx,%eax
}
c0104eb3:	c9                   	leave  
c0104eb4:	c3                   	ret    

c0104eb5 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0104eb5:	55                   	push   %ebp
c0104eb6:	89 e5                	mov    %esp,%ebp
c0104eb8:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c0104ebb:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ebe:	89 04 24             	mov    %eax,(%esp)
c0104ec1:	e8 8a ff ff ff       	call   c0104e50 <page2pa>
c0104ec6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104ec9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ecc:	c1 e8 0c             	shr    $0xc,%eax
c0104ecf:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104ed2:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c0104ed7:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104eda:	72 23                	jb     c0104eff <page2kva+0x4a>
c0104edc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104edf:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0104ee3:	c7 44 24 08 a0 64 11 	movl   $0xc01164a0,0x8(%esp)
c0104eea:	c0 
c0104eeb:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c0104ef2:	00 
c0104ef3:	c7 04 24 8f 64 11 c0 	movl   $0xc011648f,(%esp)
c0104efa:	e8 c9 bf ff ff       	call   c0100ec8 <__panic>
c0104eff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104f02:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0104f07:	c9                   	leave  
c0104f08:	c3                   	ret    

c0104f09 <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c0104f09:	55                   	push   %ebp
c0104f0a:	89 e5                	mov    %esp,%ebp
c0104f0c:	83 ec 18             	sub    $0x18,%esp
    if (!(pte & PTE_P)) {
c0104f0f:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f12:	83 e0 01             	and    $0x1,%eax
c0104f15:	85 c0                	test   %eax,%eax
c0104f17:	75 1c                	jne    c0104f35 <pte2page+0x2c>
        panic("pte2page called with invalid pte");
c0104f19:	c7 44 24 08 c4 64 11 	movl   $0xc01164c4,0x8(%esp)
c0104f20:	c0 
c0104f21:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c0104f28:	00 
c0104f29:	c7 04 24 8f 64 11 c0 	movl   $0xc011648f,(%esp)
c0104f30:	e8 93 bf ff ff       	call   c0100ec8 <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c0104f35:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f38:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0104f3d:	89 04 24             	mov    %eax,(%esp)
c0104f40:	e8 21 ff ff ff       	call   c0104e66 <pa2page>
}
c0104f45:	c9                   	leave  
c0104f46:	c3                   	ret    

c0104f47 <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c0104f47:	55                   	push   %ebp
c0104f48:	89 e5                	mov    %esp,%ebp
c0104f4a:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c0104f4d:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f50:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0104f55:	89 04 24             	mov    %eax,(%esp)
c0104f58:	e8 09 ff ff ff       	call   c0104e66 <pa2page>
}
c0104f5d:	c9                   	leave  
c0104f5e:	c3                   	ret    

c0104f5f <page_ref>:

static inline int
page_ref(struct Page *page) {
c0104f5f:	55                   	push   %ebp
c0104f60:	89 e5                	mov    %esp,%ebp
    return page->ref;
c0104f62:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f65:	8b 00                	mov    (%eax),%eax
}
c0104f67:	5d                   	pop    %ebp
c0104f68:	c3                   	ret    

c0104f69 <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c0104f69:	55                   	push   %ebp
c0104f6a:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c0104f6c:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f6f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104f72:	89 10                	mov    %edx,(%eax)
}
c0104f74:	5d                   	pop    %ebp
c0104f75:	c3                   	ret    

c0104f76 <page_ref_inc>:

static inline int
page_ref_inc(struct Page *page) {
c0104f76:	55                   	push   %ebp
c0104f77:	89 e5                	mov    %esp,%ebp
    page->ref += 1;
c0104f79:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f7c:	8b 00                	mov    (%eax),%eax
c0104f7e:	8d 50 01             	lea    0x1(%eax),%edx
c0104f81:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f84:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0104f86:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f89:	8b 00                	mov    (%eax),%eax
}
c0104f8b:	5d                   	pop    %ebp
c0104f8c:	c3                   	ret    

c0104f8d <page_ref_dec>:

static inline int
page_ref_dec(struct Page *page) {
c0104f8d:	55                   	push   %ebp
c0104f8e:	89 e5                	mov    %esp,%ebp
    page->ref -= 1;
c0104f90:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f93:	8b 00                	mov    (%eax),%eax
c0104f95:	8d 50 ff             	lea    -0x1(%eax),%edx
c0104f98:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f9b:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0104f9d:	8b 45 08             	mov    0x8(%ebp),%eax
c0104fa0:	8b 00                	mov    (%eax),%eax
}
c0104fa2:	5d                   	pop    %ebp
c0104fa3:	c3                   	ret    

c0104fa4 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0104fa4:	55                   	push   %ebp
c0104fa5:	89 e5                	mov    %esp,%ebp
c0104fa7:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0104faa:	9c                   	pushf  
c0104fab:	58                   	pop    %eax
c0104fac:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0104faf:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0104fb2:	25 00 02 00 00       	and    $0x200,%eax
c0104fb7:	85 c0                	test   %eax,%eax
c0104fb9:	74 0c                	je     c0104fc7 <__intr_save+0x23>
        intr_disable();
c0104fbb:	e8 6a d1 ff ff       	call   c010212a <intr_disable>
        return 1;
c0104fc0:	b8 01 00 00 00       	mov    $0x1,%eax
c0104fc5:	eb 05                	jmp    c0104fcc <__intr_save+0x28>
    }
    return 0;
c0104fc7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104fcc:	c9                   	leave  
c0104fcd:	c3                   	ret    

c0104fce <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0104fce:	55                   	push   %ebp
c0104fcf:	89 e5                	mov    %esp,%ebp
c0104fd1:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0104fd4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104fd8:	74 05                	je     c0104fdf <__intr_restore+0x11>
        intr_enable();
c0104fda:	e8 45 d1 ff ff       	call   c0102124 <intr_enable>
    }
}
c0104fdf:	c9                   	leave  
c0104fe0:	c3                   	ret    

c0104fe1 <lgdt>:
/* *
 * lgdt - load the global descriptor table register and reset the
 * data/code segement registers for kernel.
 * */
static inline void
lgdt(struct pseudodesc *pd) {
c0104fe1:	55                   	push   %ebp
c0104fe2:	89 e5                	mov    %esp,%ebp
    asm volatile ("lgdt (%0)" :: "r" (pd));
c0104fe4:	8b 45 08             	mov    0x8(%ebp),%eax
c0104fe7:	0f 01 10             	lgdtl  (%eax)
    asm volatile ("movw %%ax, %%gs" :: "a" (USER_DS));
c0104fea:	b8 23 00 00 00       	mov    $0x23,%eax
c0104fef:	8e e8                	mov    %eax,%gs
    asm volatile ("movw %%ax, %%fs" :: "a" (USER_DS));
c0104ff1:	b8 23 00 00 00       	mov    $0x23,%eax
c0104ff6:	8e e0                	mov    %eax,%fs
    asm volatile ("movw %%ax, %%es" :: "a" (KERNEL_DS));
c0104ff8:	b8 10 00 00 00       	mov    $0x10,%eax
c0104ffd:	8e c0                	mov    %eax,%es
    asm volatile ("movw %%ax, %%ds" :: "a" (KERNEL_DS));
c0104fff:	b8 10 00 00 00       	mov    $0x10,%eax
c0105004:	8e d8                	mov    %eax,%ds
    asm volatile ("movw %%ax, %%ss" :: "a" (KERNEL_DS));
c0105006:	b8 10 00 00 00       	mov    $0x10,%eax
c010500b:	8e d0                	mov    %eax,%ss
    // reload cs
    asm volatile ("ljmp %0, $1f\n 1:\n" :: "i" (KERNEL_CS));
c010500d:	ea 14 50 10 c0 08 00 	ljmp   $0x8,$0xc0105014
}
c0105014:	5d                   	pop    %ebp
c0105015:	c3                   	ret    

c0105016 <load_esp0>:
 * load_esp0 - change the ESP0 in default task state segment,
 * so that we can use different kernel stack when we trap frame
 * user to kernel.
 * */
void
load_esp0(uintptr_t esp0) {
c0105016:	55                   	push   %ebp
c0105017:	89 e5                	mov    %esp,%ebp
    ts.ts_esp0 = esp0;
c0105019:	8b 45 08             	mov    0x8(%ebp),%eax
c010501c:	a3 a4 fe 14 c0       	mov    %eax,0xc014fea4
}
c0105021:	5d                   	pop    %ebp
c0105022:	c3                   	ret    

c0105023 <gdt_init>:

/* gdt_init - initialize the default GDT and TSS */
static void
gdt_init(void) {
c0105023:	55                   	push   %ebp
c0105024:	89 e5                	mov    %esp,%ebp
c0105026:	83 ec 14             	sub    $0x14,%esp
    // set boot kernel stack and default SS0
    load_esp0((uintptr_t)bootstacktop);
c0105029:	b8 00 e0 14 c0       	mov    $0xc014e000,%eax
c010502e:	89 04 24             	mov    %eax,(%esp)
c0105031:	e8 e0 ff ff ff       	call   c0105016 <load_esp0>
    ts.ts_ss0 = KERNEL_DS;
c0105036:	66 c7 05 a8 fe 14 c0 	movw   $0x10,0xc014fea8
c010503d:	10 00 

    // initialize the TSS filed of the gdt
    gdt[SEG_TSS] = SEGTSS(STS_T32A, (uintptr_t)&ts, sizeof(ts), DPL_KERNEL);
c010503f:	66 c7 05 48 ea 14 c0 	movw   $0x68,0xc014ea48
c0105046:	68 00 
c0105048:	b8 a0 fe 14 c0       	mov    $0xc014fea0,%eax
c010504d:	66 a3 4a ea 14 c0    	mov    %ax,0xc014ea4a
c0105053:	b8 a0 fe 14 c0       	mov    $0xc014fea0,%eax
c0105058:	c1 e8 10             	shr    $0x10,%eax
c010505b:	a2 4c ea 14 c0       	mov    %al,0xc014ea4c
c0105060:	0f b6 05 4d ea 14 c0 	movzbl 0xc014ea4d,%eax
c0105067:	83 e0 f0             	and    $0xfffffff0,%eax
c010506a:	83 c8 09             	or     $0x9,%eax
c010506d:	a2 4d ea 14 c0       	mov    %al,0xc014ea4d
c0105072:	0f b6 05 4d ea 14 c0 	movzbl 0xc014ea4d,%eax
c0105079:	83 e0 ef             	and    $0xffffffef,%eax
c010507c:	a2 4d ea 14 c0       	mov    %al,0xc014ea4d
c0105081:	0f b6 05 4d ea 14 c0 	movzbl 0xc014ea4d,%eax
c0105088:	83 e0 9f             	and    $0xffffff9f,%eax
c010508b:	a2 4d ea 14 c0       	mov    %al,0xc014ea4d
c0105090:	0f b6 05 4d ea 14 c0 	movzbl 0xc014ea4d,%eax
c0105097:	83 c8 80             	or     $0xffffff80,%eax
c010509a:	a2 4d ea 14 c0       	mov    %al,0xc014ea4d
c010509f:	0f b6 05 4e ea 14 c0 	movzbl 0xc014ea4e,%eax
c01050a6:	83 e0 f0             	and    $0xfffffff0,%eax
c01050a9:	a2 4e ea 14 c0       	mov    %al,0xc014ea4e
c01050ae:	0f b6 05 4e ea 14 c0 	movzbl 0xc014ea4e,%eax
c01050b5:	83 e0 ef             	and    $0xffffffef,%eax
c01050b8:	a2 4e ea 14 c0       	mov    %al,0xc014ea4e
c01050bd:	0f b6 05 4e ea 14 c0 	movzbl 0xc014ea4e,%eax
c01050c4:	83 e0 df             	and    $0xffffffdf,%eax
c01050c7:	a2 4e ea 14 c0       	mov    %al,0xc014ea4e
c01050cc:	0f b6 05 4e ea 14 c0 	movzbl 0xc014ea4e,%eax
c01050d3:	83 c8 40             	or     $0x40,%eax
c01050d6:	a2 4e ea 14 c0       	mov    %al,0xc014ea4e
c01050db:	0f b6 05 4e ea 14 c0 	movzbl 0xc014ea4e,%eax
c01050e2:	83 e0 7f             	and    $0x7f,%eax
c01050e5:	a2 4e ea 14 c0       	mov    %al,0xc014ea4e
c01050ea:	b8 a0 fe 14 c0       	mov    $0xc014fea0,%eax
c01050ef:	c1 e8 18             	shr    $0x18,%eax
c01050f2:	a2 4f ea 14 c0       	mov    %al,0xc014ea4f

    // reload all segment registers
    lgdt(&gdt_pd);
c01050f7:	c7 04 24 50 ea 14 c0 	movl   $0xc014ea50,(%esp)
c01050fe:	e8 de fe ff ff       	call   c0104fe1 <lgdt>
c0105103:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
    asm volatile ("cli" ::: "memory");
}

static inline void
ltr(uint16_t sel) {
    asm volatile ("ltr %0" :: "r" (sel) : "memory");
c0105109:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c010510d:	0f 00 d8             	ltr    %ax

    // load the TSS
    ltr(GD_TSS);
}
c0105110:	c9                   	leave  
c0105111:	c3                   	ret    

c0105112 <init_pmm_manager>:

//init_pmm_manager - initialize a pmm_manager instance
static void
init_pmm_manager(void) {
c0105112:	55                   	push   %ebp
c0105113:	89 e5                	mov    %esp,%ebp
c0105115:	83 ec 18             	sub    $0x18,%esp
    pmm_manager = &default_pmm_manager;
c0105118:	c7 05 20 30 15 c0 50 	movl   $0xc0116350,0xc0153020
c010511f:	63 11 c0 
    cprintf("memory management: %s\n", pmm_manager->name);
c0105122:	a1 20 30 15 c0       	mov    0xc0153020,%eax
c0105127:	8b 00                	mov    (%eax),%eax
c0105129:	89 44 24 04          	mov    %eax,0x4(%esp)
c010512d:	c7 04 24 f0 64 11 c0 	movl   $0xc01164f0,(%esp)
c0105134:	e8 2c b2 ff ff       	call   c0100365 <cprintf>
    pmm_manager->init();
c0105139:	a1 20 30 15 c0       	mov    0xc0153020,%eax
c010513e:	8b 40 04             	mov    0x4(%eax),%eax
c0105141:	ff d0                	call   *%eax
}
c0105143:	c9                   	leave  
c0105144:	c3                   	ret    

c0105145 <init_memmap>:

//init_memmap - call pmm->init_memmap to build Page struct for free memory  
static void
init_memmap(struct Page *base, size_t n) {
c0105145:	55                   	push   %ebp
c0105146:	89 e5                	mov    %esp,%ebp
c0105148:	83 ec 18             	sub    $0x18,%esp
    pmm_manager->init_memmap(base, n);
c010514b:	a1 20 30 15 c0       	mov    0xc0153020,%eax
c0105150:	8b 40 08             	mov    0x8(%eax),%eax
c0105153:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105156:	89 54 24 04          	mov    %edx,0x4(%esp)
c010515a:	8b 55 08             	mov    0x8(%ebp),%edx
c010515d:	89 14 24             	mov    %edx,(%esp)
c0105160:	ff d0                	call   *%eax
}
c0105162:	c9                   	leave  
c0105163:	c3                   	ret    

c0105164 <alloc_pages>:

//alloc_pages - call pmm->alloc_pages to allocate a continuous n*PAGESIZE memory 
struct Page *
alloc_pages(size_t n) {
c0105164:	55                   	push   %ebp
c0105165:	89 e5                	mov    %esp,%ebp
c0105167:	83 ec 28             	sub    $0x28,%esp
    struct Page *page=NULL;
c010516a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    
    while (1)
    {
         local_intr_save(intr_flag);
c0105171:	e8 2e fe ff ff       	call   c0104fa4 <__intr_save>
c0105176:	89 45 f0             	mov    %eax,-0x10(%ebp)
         {
              page = pmm_manager->alloc_pages(n);
c0105179:	a1 20 30 15 c0       	mov    0xc0153020,%eax
c010517e:	8b 40 0c             	mov    0xc(%eax),%eax
c0105181:	8b 55 08             	mov    0x8(%ebp),%edx
c0105184:	89 14 24             	mov    %edx,(%esp)
c0105187:	ff d0                	call   *%eax
c0105189:	89 45 f4             	mov    %eax,-0xc(%ebp)
         }
         local_intr_restore(intr_flag);
c010518c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010518f:	89 04 24             	mov    %eax,(%esp)
c0105192:	e8 37 fe ff ff       	call   c0104fce <__intr_restore>

         if (page != NULL || n > 1 || swap_init_ok == 0) break;
c0105197:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010519b:	75 2d                	jne    c01051ca <alloc_pages+0x66>
c010519d:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c01051a1:	77 27                	ja     c01051ca <alloc_pages+0x66>
c01051a3:	a1 0c ff 14 c0       	mov    0xc014ff0c,%eax
c01051a8:	85 c0                	test   %eax,%eax
c01051aa:	74 1e                	je     c01051ca <alloc_pages+0x66>
         
         extern struct mm_struct *check_mm_struct;
         //cprintf("page %x, call swap_out in alloc_pages %d\n",page, n);
         swap_out(check_mm_struct, n, 0);
c01051ac:	8b 55 08             	mov    0x8(%ebp),%edx
c01051af:	a1 0c 31 15 c0       	mov    0xc015310c,%eax
c01051b4:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01051bb:	00 
c01051bc:	89 54 24 04          	mov    %edx,0x4(%esp)
c01051c0:	89 04 24             	mov    %eax,(%esp)
c01051c3:	e8 a3 1d 00 00       	call   c0106f6b <swap_out>
    }
c01051c8:	eb a7                	jmp    c0105171 <alloc_pages+0xd>
    //cprintf("n %d,get page %x, No %d in alloc_pages\n",n,page,(page-pages));
    return page;
c01051ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01051cd:	c9                   	leave  
c01051ce:	c3                   	ret    

c01051cf <free_pages>:

//free_pages - call pmm->free_pages to free a continuous n*PAGESIZE memory 
void
free_pages(struct Page *base, size_t n) {
c01051cf:	55                   	push   %ebp
c01051d0:	89 e5                	mov    %esp,%ebp
c01051d2:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c01051d5:	e8 ca fd ff ff       	call   c0104fa4 <__intr_save>
c01051da:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        pmm_manager->free_pages(base, n);
c01051dd:	a1 20 30 15 c0       	mov    0xc0153020,%eax
c01051e2:	8b 40 10             	mov    0x10(%eax),%eax
c01051e5:	8b 55 0c             	mov    0xc(%ebp),%edx
c01051e8:	89 54 24 04          	mov    %edx,0x4(%esp)
c01051ec:	8b 55 08             	mov    0x8(%ebp),%edx
c01051ef:	89 14 24             	mov    %edx,(%esp)
c01051f2:	ff d0                	call   *%eax
    }
    local_intr_restore(intr_flag);
c01051f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01051f7:	89 04 24             	mov    %eax,(%esp)
c01051fa:	e8 cf fd ff ff       	call   c0104fce <__intr_restore>
}
c01051ff:	c9                   	leave  
c0105200:	c3                   	ret    

c0105201 <nr_free_pages>:

//nr_free_pages - call pmm->nr_free_pages to get the size (nr*PAGESIZE) 
//of current free memory
size_t
nr_free_pages(void) {
c0105201:	55                   	push   %ebp
c0105202:	89 e5                	mov    %esp,%ebp
c0105204:	83 ec 28             	sub    $0x28,%esp
    size_t ret;
    bool intr_flag;
    local_intr_save(intr_flag);
c0105207:	e8 98 fd ff ff       	call   c0104fa4 <__intr_save>
c010520c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        ret = pmm_manager->nr_free_pages();
c010520f:	a1 20 30 15 c0       	mov    0xc0153020,%eax
c0105214:	8b 40 14             	mov    0x14(%eax),%eax
c0105217:	ff d0                	call   *%eax
c0105219:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    local_intr_restore(intr_flag);
c010521c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010521f:	89 04 24             	mov    %eax,(%esp)
c0105222:	e8 a7 fd ff ff       	call   c0104fce <__intr_restore>
    return ret;
c0105227:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010522a:	c9                   	leave  
c010522b:	c3                   	ret    

c010522c <page_init>:

/* pmm_init - initialize the physical memory management */
static void
page_init(void) {
c010522c:	55                   	push   %ebp
c010522d:	89 e5                	mov    %esp,%ebp
c010522f:	57                   	push   %edi
c0105230:	56                   	push   %esi
c0105231:	53                   	push   %ebx
c0105232:	81 ec 9c 00 00 00    	sub    $0x9c,%esp
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
c0105238:	c7 45 c4 00 80 00 c0 	movl   $0xc0008000,-0x3c(%ebp)
    uint64_t maxpa = 0;
c010523f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c0105246:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    cprintf("e820map:\n");
c010524d:	c7 04 24 07 65 11 c0 	movl   $0xc0116507,(%esp)
c0105254:	e8 0c b1 ff ff       	call   c0100365 <cprintf>
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c0105259:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0105260:	e9 15 01 00 00       	jmp    c010537a <page_init+0x14e>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c0105265:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105268:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010526b:	89 d0                	mov    %edx,%eax
c010526d:	c1 e0 02             	shl    $0x2,%eax
c0105270:	01 d0                	add    %edx,%eax
c0105272:	c1 e0 02             	shl    $0x2,%eax
c0105275:	01 c8                	add    %ecx,%eax
c0105277:	8b 50 08             	mov    0x8(%eax),%edx
c010527a:	8b 40 04             	mov    0x4(%eax),%eax
c010527d:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0105280:	89 55 bc             	mov    %edx,-0x44(%ebp)
c0105283:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105286:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105289:	89 d0                	mov    %edx,%eax
c010528b:	c1 e0 02             	shl    $0x2,%eax
c010528e:	01 d0                	add    %edx,%eax
c0105290:	c1 e0 02             	shl    $0x2,%eax
c0105293:	01 c8                	add    %ecx,%eax
c0105295:	8b 48 0c             	mov    0xc(%eax),%ecx
c0105298:	8b 58 10             	mov    0x10(%eax),%ebx
c010529b:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010529e:	8b 55 bc             	mov    -0x44(%ebp),%edx
c01052a1:	01 c8                	add    %ecx,%eax
c01052a3:	11 da                	adc    %ebx,%edx
c01052a5:	89 45 b0             	mov    %eax,-0x50(%ebp)
c01052a8:	89 55 b4             	mov    %edx,-0x4c(%ebp)
        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
c01052ab:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01052ae:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01052b1:	89 d0                	mov    %edx,%eax
c01052b3:	c1 e0 02             	shl    $0x2,%eax
c01052b6:	01 d0                	add    %edx,%eax
c01052b8:	c1 e0 02             	shl    $0x2,%eax
c01052bb:	01 c8                	add    %ecx,%eax
c01052bd:	83 c0 14             	add    $0x14,%eax
c01052c0:	8b 00                	mov    (%eax),%eax
c01052c2:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
c01052c8:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01052cb:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01052ce:	83 c0 ff             	add    $0xffffffff,%eax
c01052d1:	83 d2 ff             	adc    $0xffffffff,%edx
c01052d4:	89 c6                	mov    %eax,%esi
c01052d6:	89 d7                	mov    %edx,%edi
c01052d8:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01052db:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01052de:	89 d0                	mov    %edx,%eax
c01052e0:	c1 e0 02             	shl    $0x2,%eax
c01052e3:	01 d0                	add    %edx,%eax
c01052e5:	c1 e0 02             	shl    $0x2,%eax
c01052e8:	01 c8                	add    %ecx,%eax
c01052ea:	8b 48 0c             	mov    0xc(%eax),%ecx
c01052ed:	8b 58 10             	mov    0x10(%eax),%ebx
c01052f0:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
c01052f6:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c01052fa:	89 74 24 14          	mov    %esi,0x14(%esp)
c01052fe:	89 7c 24 18          	mov    %edi,0x18(%esp)
c0105302:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0105305:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0105308:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010530c:	89 54 24 10          	mov    %edx,0x10(%esp)
c0105310:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0105314:	89 5c 24 08          	mov    %ebx,0x8(%esp)
c0105318:	c7 04 24 14 65 11 c0 	movl   $0xc0116514,(%esp)
c010531f:	e8 41 b0 ff ff       	call   c0100365 <cprintf>
                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
        if (memmap->map[i].type == E820_ARM) {
c0105324:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105327:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010532a:	89 d0                	mov    %edx,%eax
c010532c:	c1 e0 02             	shl    $0x2,%eax
c010532f:	01 d0                	add    %edx,%eax
c0105331:	c1 e0 02             	shl    $0x2,%eax
c0105334:	01 c8                	add    %ecx,%eax
c0105336:	83 c0 14             	add    $0x14,%eax
c0105339:	8b 00                	mov    (%eax),%eax
c010533b:	83 f8 01             	cmp    $0x1,%eax
c010533e:	75 36                	jne    c0105376 <page_init+0x14a>
            if (maxpa < end && begin < KMEMSIZE) {
c0105340:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105343:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105346:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c0105349:	77 2b                	ja     c0105376 <page_init+0x14a>
c010534b:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c010534e:	72 05                	jb     c0105355 <page_init+0x129>
c0105350:	3b 45 b0             	cmp    -0x50(%ebp),%eax
c0105353:	73 21                	jae    c0105376 <page_init+0x14a>
c0105355:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0105359:	77 1b                	ja     c0105376 <page_init+0x14a>
c010535b:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c010535f:	72 09                	jb     c010536a <page_init+0x13e>
c0105361:	81 7d b8 ff ff ff 37 	cmpl   $0x37ffffff,-0x48(%ebp)
c0105368:	77 0c                	ja     c0105376 <page_init+0x14a>
                maxpa = end;
c010536a:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010536d:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0105370:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0105373:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
    uint64_t maxpa = 0;

    cprintf("e820map:\n");
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c0105376:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c010537a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010537d:	8b 00                	mov    (%eax),%eax
c010537f:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c0105382:	0f 8f dd fe ff ff    	jg     c0105265 <page_init+0x39>
            if (maxpa < end && begin < KMEMSIZE) {
                maxpa = end;
            }
        }
    }
    if (maxpa > KMEMSIZE) {
c0105388:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010538c:	72 1d                	jb     c01053ab <page_init+0x17f>
c010538e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0105392:	77 09                	ja     c010539d <page_init+0x171>
c0105394:	81 7d e0 00 00 00 38 	cmpl   $0x38000000,-0x20(%ebp)
c010539b:	76 0e                	jbe    c01053ab <page_init+0x17f>
        maxpa = KMEMSIZE;
c010539d:	c7 45 e0 00 00 00 38 	movl   $0x38000000,-0x20(%ebp)
c01053a4:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    }

    extern char end[];

    npage = maxpa / PGSIZE;
c01053ab:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01053ae:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01053b1:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c01053b5:	c1 ea 0c             	shr    $0xc,%edx
c01053b8:	a3 80 fe 14 c0       	mov    %eax,0xc014fe80
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
c01053bd:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
c01053c4:	b8 04 32 15 c0       	mov    $0xc0153204,%eax
c01053c9:	8d 50 ff             	lea    -0x1(%eax),%edx
c01053cc:	8b 45 ac             	mov    -0x54(%ebp),%eax
c01053cf:	01 d0                	add    %edx,%eax
c01053d1:	89 45 a8             	mov    %eax,-0x58(%ebp)
c01053d4:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01053d7:	ba 00 00 00 00       	mov    $0x0,%edx
c01053dc:	f7 75 ac             	divl   -0x54(%ebp)
c01053df:	89 d0                	mov    %edx,%eax
c01053e1:	8b 55 a8             	mov    -0x58(%ebp),%edx
c01053e4:	29 c2                	sub    %eax,%edx
c01053e6:	89 d0                	mov    %edx,%eax
c01053e8:	a3 28 30 15 c0       	mov    %eax,0xc0153028

    for (i = 0; i < npage; i ++) {
c01053ed:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01053f4:	eb 2f                	jmp    c0105425 <page_init+0x1f9>
        SetPageReserved(pages + i);
c01053f6:	8b 0d 28 30 15 c0    	mov    0xc0153028,%ecx
c01053fc:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01053ff:	89 d0                	mov    %edx,%eax
c0105401:	c1 e0 03             	shl    $0x3,%eax
c0105404:	01 d0                	add    %edx,%eax
c0105406:	c1 e0 02             	shl    $0x2,%eax
c0105409:	01 c8                	add    %ecx,%eax
c010540b:	83 c0 04             	add    $0x4,%eax
c010540e:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
c0105415:	89 45 8c             	mov    %eax,-0x74(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0105418:	8b 45 8c             	mov    -0x74(%ebp),%eax
c010541b:	8b 55 90             	mov    -0x70(%ebp),%edx
c010541e:	0f ab 10             	bts    %edx,(%eax)
    extern char end[];

    npage = maxpa / PGSIZE;
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);

    for (i = 0; i < npage; i ++) {
c0105421:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c0105425:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105428:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c010542d:	39 c2                	cmp    %eax,%edx
c010542f:	72 c5                	jb     c01053f6 <page_init+0x1ca>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
c0105431:	8b 15 80 fe 14 c0    	mov    0xc014fe80,%edx
c0105437:	89 d0                	mov    %edx,%eax
c0105439:	c1 e0 03             	shl    $0x3,%eax
c010543c:	01 d0                	add    %edx,%eax
c010543e:	c1 e0 02             	shl    $0x2,%eax
c0105441:	89 c2                	mov    %eax,%edx
c0105443:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c0105448:	01 d0                	add    %edx,%eax
c010544a:	89 45 a4             	mov    %eax,-0x5c(%ebp)
c010544d:	81 7d a4 ff ff ff bf 	cmpl   $0xbfffffff,-0x5c(%ebp)
c0105454:	77 23                	ja     c0105479 <page_init+0x24d>
c0105456:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0105459:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010545d:	c7 44 24 08 44 65 11 	movl   $0xc0116544,0x8(%esp)
c0105464:	c0 
c0105465:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
c010546c:	00 
c010546d:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c0105474:	e8 4f ba ff ff       	call   c0100ec8 <__panic>
c0105479:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010547c:	05 00 00 00 40       	add    $0x40000000,%eax
c0105481:	89 45 a0             	mov    %eax,-0x60(%ebp)

    for (i = 0; i < memmap->nr_map; i ++) {
c0105484:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010548b:	e9 74 01 00 00       	jmp    c0105604 <page_init+0x3d8>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c0105490:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105493:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105496:	89 d0                	mov    %edx,%eax
c0105498:	c1 e0 02             	shl    $0x2,%eax
c010549b:	01 d0                	add    %edx,%eax
c010549d:	c1 e0 02             	shl    $0x2,%eax
c01054a0:	01 c8                	add    %ecx,%eax
c01054a2:	8b 50 08             	mov    0x8(%eax),%edx
c01054a5:	8b 40 04             	mov    0x4(%eax),%eax
c01054a8:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01054ab:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c01054ae:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01054b1:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01054b4:	89 d0                	mov    %edx,%eax
c01054b6:	c1 e0 02             	shl    $0x2,%eax
c01054b9:	01 d0                	add    %edx,%eax
c01054bb:	c1 e0 02             	shl    $0x2,%eax
c01054be:	01 c8                	add    %ecx,%eax
c01054c0:	8b 48 0c             	mov    0xc(%eax),%ecx
c01054c3:	8b 58 10             	mov    0x10(%eax),%ebx
c01054c6:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01054c9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01054cc:	01 c8                	add    %ecx,%eax
c01054ce:	11 da                	adc    %ebx,%edx
c01054d0:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01054d3:	89 55 cc             	mov    %edx,-0x34(%ebp)
        if (memmap->map[i].type == E820_ARM) {
c01054d6:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01054d9:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01054dc:	89 d0                	mov    %edx,%eax
c01054de:	c1 e0 02             	shl    $0x2,%eax
c01054e1:	01 d0                	add    %edx,%eax
c01054e3:	c1 e0 02             	shl    $0x2,%eax
c01054e6:	01 c8                	add    %ecx,%eax
c01054e8:	83 c0 14             	add    $0x14,%eax
c01054eb:	8b 00                	mov    (%eax),%eax
c01054ed:	83 f8 01             	cmp    $0x1,%eax
c01054f0:	0f 85 0a 01 00 00    	jne    c0105600 <page_init+0x3d4>
            if (begin < freemem) {
c01054f6:	8b 45 a0             	mov    -0x60(%ebp),%eax
c01054f9:	ba 00 00 00 00       	mov    $0x0,%edx
c01054fe:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c0105501:	72 17                	jb     c010551a <page_init+0x2ee>
c0105503:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c0105506:	77 05                	ja     c010550d <page_init+0x2e1>
c0105508:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c010550b:	76 0d                	jbe    c010551a <page_init+0x2ee>
                begin = freemem;
c010550d:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0105510:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0105513:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
            }
            if (end > KMEMSIZE) {
c010551a:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c010551e:	72 1d                	jb     c010553d <page_init+0x311>
c0105520:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0105524:	77 09                	ja     c010552f <page_init+0x303>
c0105526:	81 7d c8 00 00 00 38 	cmpl   $0x38000000,-0x38(%ebp)
c010552d:	76 0e                	jbe    c010553d <page_init+0x311>
                end = KMEMSIZE;
c010552f:	c7 45 c8 00 00 00 38 	movl   $0x38000000,-0x38(%ebp)
c0105536:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
            }
            if (begin < end) {
c010553d:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105540:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0105543:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0105546:	0f 87 b4 00 00 00    	ja     c0105600 <page_init+0x3d4>
c010554c:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c010554f:	72 09                	jb     c010555a <page_init+0x32e>
c0105551:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c0105554:	0f 83 a6 00 00 00    	jae    c0105600 <page_init+0x3d4>
                begin = ROUNDUP(begin, PGSIZE);
c010555a:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
c0105561:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0105564:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0105567:	01 d0                	add    %edx,%eax
c0105569:	83 e8 01             	sub    $0x1,%eax
c010556c:	89 45 98             	mov    %eax,-0x68(%ebp)
c010556f:	8b 45 98             	mov    -0x68(%ebp),%eax
c0105572:	ba 00 00 00 00       	mov    $0x0,%edx
c0105577:	f7 75 9c             	divl   -0x64(%ebp)
c010557a:	89 d0                	mov    %edx,%eax
c010557c:	8b 55 98             	mov    -0x68(%ebp),%edx
c010557f:	29 c2                	sub    %eax,%edx
c0105581:	89 d0                	mov    %edx,%eax
c0105583:	ba 00 00 00 00       	mov    $0x0,%edx
c0105588:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010558b:	89 55 d4             	mov    %edx,-0x2c(%ebp)
                end = ROUNDDOWN(end, PGSIZE);
c010558e:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0105591:	89 45 94             	mov    %eax,-0x6c(%ebp)
c0105594:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0105597:	ba 00 00 00 00       	mov    $0x0,%edx
c010559c:	89 c7                	mov    %eax,%edi
c010559e:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
c01055a4:	89 7d 80             	mov    %edi,-0x80(%ebp)
c01055a7:	89 d0                	mov    %edx,%eax
c01055a9:	83 e0 00             	and    $0x0,%eax
c01055ac:	89 45 84             	mov    %eax,-0x7c(%ebp)
c01055af:	8b 45 80             	mov    -0x80(%ebp),%eax
c01055b2:	8b 55 84             	mov    -0x7c(%ebp),%edx
c01055b5:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01055b8:	89 55 cc             	mov    %edx,-0x34(%ebp)
                if (begin < end) {
c01055bb:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01055be:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01055c1:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c01055c4:	77 3a                	ja     c0105600 <page_init+0x3d4>
c01055c6:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c01055c9:	72 05                	jb     c01055d0 <page_init+0x3a4>
c01055cb:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c01055ce:	73 30                	jae    c0105600 <page_init+0x3d4>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
c01055d0:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c01055d3:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
c01055d6:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01055d9:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01055dc:	29 c8                	sub    %ecx,%eax
c01055de:	19 da                	sbb    %ebx,%edx
c01055e0:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c01055e4:	c1 ea 0c             	shr    $0xc,%edx
c01055e7:	89 c3                	mov    %eax,%ebx
c01055e9:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01055ec:	89 04 24             	mov    %eax,(%esp)
c01055ef:	e8 72 f8 ff ff       	call   c0104e66 <pa2page>
c01055f4:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c01055f8:	89 04 24             	mov    %eax,(%esp)
c01055fb:	e8 45 fb ff ff       	call   c0105145 <init_memmap>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);

    for (i = 0; i < memmap->nr_map; i ++) {
c0105600:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c0105604:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0105607:	8b 00                	mov    (%eax),%eax
c0105609:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c010560c:	0f 8f 7e fe ff ff    	jg     c0105490 <page_init+0x264>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
                }
            }
        }
    }
}
c0105612:	81 c4 9c 00 00 00    	add    $0x9c,%esp
c0105618:	5b                   	pop    %ebx
c0105619:	5e                   	pop    %esi
c010561a:	5f                   	pop    %edi
c010561b:	5d                   	pop    %ebp
c010561c:	c3                   	ret    

c010561d <enable_paging>:

static void
enable_paging(void) {
c010561d:	55                   	push   %ebp
c010561e:	89 e5                	mov    %esp,%ebp
c0105620:	83 ec 10             	sub    $0x10,%esp
    lcr3(boot_cr3);
c0105623:	a1 24 30 15 c0       	mov    0xc0153024,%eax
c0105628:	89 45 f8             	mov    %eax,-0x8(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c010562b:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010562e:	0f 22 d8             	mov    %eax,%cr3
}

static inline uintptr_t
rcr0(void) {
    uintptr_t cr0;
    asm volatile ("mov %%cr0, %0" : "=r" (cr0) :: "memory");
c0105631:	0f 20 c0             	mov    %cr0,%eax
c0105634:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return cr0;
c0105637:	8b 45 f4             	mov    -0xc(%ebp),%eax

    // turn on paging
    uint32_t cr0 = rcr0();
c010563a:	89 45 fc             	mov    %eax,-0x4(%ebp)
    cr0 |= CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP;
c010563d:	81 4d fc 2f 00 05 80 	orl    $0x8005002f,-0x4(%ebp)
    cr0 &= ~(CR0_TS | CR0_EM);
c0105644:	83 65 fc f3          	andl   $0xfffffff3,-0x4(%ebp)
c0105648:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010564b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    asm volatile ("pushl %0; popfl" :: "r" (eflags));
}

static inline void
lcr0(uintptr_t cr0) {
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
c010564e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105651:	0f 22 c0             	mov    %eax,%cr0
    lcr0(cr0);
}
c0105654:	c9                   	leave  
c0105655:	c3                   	ret    

c0105656 <boot_map_segment>:
//  la:   linear address of this memory need to map (after x86 segment map)
//  size: memory size
//  pa:   physical address of this memory
//  perm: permission of this memory  
static void
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
c0105656:	55                   	push   %ebp
c0105657:	89 e5                	mov    %esp,%ebp
c0105659:	83 ec 38             	sub    $0x38,%esp
    assert(PGOFF(la) == PGOFF(pa));
c010565c:	8b 45 14             	mov    0x14(%ebp),%eax
c010565f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105662:	31 d0                	xor    %edx,%eax
c0105664:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105669:	85 c0                	test   %eax,%eax
c010566b:	74 24                	je     c0105691 <boot_map_segment+0x3b>
c010566d:	c7 44 24 0c 76 65 11 	movl   $0xc0116576,0xc(%esp)
c0105674:	c0 
c0105675:	c7 44 24 08 8d 65 11 	movl   $0xc011658d,0x8(%esp)
c010567c:	c0 
c010567d:	c7 44 24 04 12 01 00 	movl   $0x112,0x4(%esp)
c0105684:	00 
c0105685:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c010568c:	e8 37 b8 ff ff       	call   c0100ec8 <__panic>
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
c0105691:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
c0105698:	8b 45 0c             	mov    0xc(%ebp),%eax
c010569b:	25 ff 0f 00 00       	and    $0xfff,%eax
c01056a0:	89 c2                	mov    %eax,%edx
c01056a2:	8b 45 10             	mov    0x10(%ebp),%eax
c01056a5:	01 c2                	add    %eax,%edx
c01056a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01056aa:	01 d0                	add    %edx,%eax
c01056ac:	83 e8 01             	sub    $0x1,%eax
c01056af:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01056b2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01056b5:	ba 00 00 00 00       	mov    $0x0,%edx
c01056ba:	f7 75 f0             	divl   -0x10(%ebp)
c01056bd:	89 d0                	mov    %edx,%eax
c01056bf:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01056c2:	29 c2                	sub    %eax,%edx
c01056c4:	89 d0                	mov    %edx,%eax
c01056c6:	c1 e8 0c             	shr    $0xc,%eax
c01056c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    la = ROUNDDOWN(la, PGSIZE);
c01056cc:	8b 45 0c             	mov    0xc(%ebp),%eax
c01056cf:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01056d2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01056d5:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01056da:	89 45 0c             	mov    %eax,0xc(%ebp)
    pa = ROUNDDOWN(pa, PGSIZE);
c01056dd:	8b 45 14             	mov    0x14(%ebp),%eax
c01056e0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01056e3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01056e6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01056eb:	89 45 14             	mov    %eax,0x14(%ebp)
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c01056ee:	eb 6b                	jmp    c010575b <boot_map_segment+0x105>
        pte_t *ptep = get_pte(pgdir, la, 1);
c01056f0:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c01056f7:	00 
c01056f8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01056fb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01056ff:	8b 45 08             	mov    0x8(%ebp),%eax
c0105702:	89 04 24             	mov    %eax,(%esp)
c0105705:	e8 d1 01 00 00       	call   c01058db <get_pte>
c010570a:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(ptep != NULL);
c010570d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0105711:	75 24                	jne    c0105737 <boot_map_segment+0xe1>
c0105713:	c7 44 24 0c a2 65 11 	movl   $0xc01165a2,0xc(%esp)
c010571a:	c0 
c010571b:	c7 44 24 08 8d 65 11 	movl   $0xc011658d,0x8(%esp)
c0105722:	c0 
c0105723:	c7 44 24 04 18 01 00 	movl   $0x118,0x4(%esp)
c010572a:	00 
c010572b:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c0105732:	e8 91 b7 ff ff       	call   c0100ec8 <__panic>
        *ptep = pa | PTE_P | perm;
c0105737:	8b 45 18             	mov    0x18(%ebp),%eax
c010573a:	8b 55 14             	mov    0x14(%ebp),%edx
c010573d:	09 d0                	or     %edx,%eax
c010573f:	83 c8 01             	or     $0x1,%eax
c0105742:	89 c2                	mov    %eax,%edx
c0105744:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105747:	89 10                	mov    %edx,(%eax)
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
    assert(PGOFF(la) == PGOFF(pa));
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
    la = ROUNDDOWN(la, PGSIZE);
    pa = ROUNDDOWN(pa, PGSIZE);
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c0105749:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c010574d:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
c0105754:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
c010575b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010575f:	75 8f                	jne    c01056f0 <boot_map_segment+0x9a>
        pte_t *ptep = get_pte(pgdir, la, 1);
        assert(ptep != NULL);
        *ptep = pa | PTE_P | perm;
    }
}
c0105761:	c9                   	leave  
c0105762:	c3                   	ret    

c0105763 <boot_alloc_page>:

//boot_alloc_page - allocate one page using pmm->alloc_pages(1) 
// return value: the kernel virtual address of this allocated page
//note: this function is used to get the memory for PDT(Page Directory Table)&PT(Page Table)
static void *
boot_alloc_page(void) {
c0105763:	55                   	push   %ebp
c0105764:	89 e5                	mov    %esp,%ebp
c0105766:	83 ec 28             	sub    $0x28,%esp
    struct Page *p = alloc_page();
c0105769:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105770:	e8 ef f9 ff ff       	call   c0105164 <alloc_pages>
c0105775:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (p == NULL) {
c0105778:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010577c:	75 1c                	jne    c010579a <boot_alloc_page+0x37>
        panic("boot_alloc_page failed.\n");
c010577e:	c7 44 24 08 af 65 11 	movl   $0xc01165af,0x8(%esp)
c0105785:	c0 
c0105786:	c7 44 24 04 24 01 00 	movl   $0x124,0x4(%esp)
c010578d:	00 
c010578e:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c0105795:	e8 2e b7 ff ff       	call   c0100ec8 <__panic>
    }
    return page2kva(p);
c010579a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010579d:	89 04 24             	mov    %eax,(%esp)
c01057a0:	e8 10 f7 ff ff       	call   c0104eb5 <page2kva>
}
c01057a5:	c9                   	leave  
c01057a6:	c3                   	ret    

c01057a7 <pmm_init>:

//pmm_init - setup a pmm to manage physical memory, build PDT&PT to setup paging mechanism 
//         - check the correctness of pmm & paging mechanism, print PDT&PT
void
pmm_init(void) {
c01057a7:	55                   	push   %ebp
c01057a8:	89 e5                	mov    %esp,%ebp
c01057aa:	83 ec 38             	sub    $0x38,%esp
    //We need to alloc/free the physical memory (granularity is 4KB or other size). 
    //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
    //First we should init a physical memory manager(pmm) based on the framework.
    //Then pmm can alloc/free the physical memory. 
    //Now the first_fit/best_fit/worst_fit/buddy_system pmm are available.
    init_pmm_manager();
c01057ad:	e8 60 f9 ff ff       	call   c0105112 <init_pmm_manager>

    // detect physical memory space, reserve already used memory,
    // then use pmm->init_memmap to create free page list
    page_init();
c01057b2:	e8 75 fa ff ff       	call   c010522c <page_init>

    //use pmm->check to verify the correctness of the alloc/free function in a pmm
    check_alloc_page();
c01057b7:	e8 5d 09 00 00       	call   c0106119 <check_alloc_page>

    // create boot_pgdir, an initial page directory(Page Directory Table, PDT)
    boot_pgdir = boot_alloc_page();
c01057bc:	e8 a2 ff ff ff       	call   c0105763 <boot_alloc_page>
c01057c1:	a3 84 fe 14 c0       	mov    %eax,0xc014fe84
    memset(boot_pgdir, 0, PGSIZE);
c01057c6:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c01057cb:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c01057d2:	00 
c01057d3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01057da:	00 
c01057db:	89 04 24             	mov    %eax,(%esp)
c01057de:	e8 62 fd 00 00       	call   c0115545 <memset>
    boot_cr3 = PADDR(boot_pgdir);
c01057e3:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c01057e8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01057eb:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c01057f2:	77 23                	ja     c0105817 <pmm_init+0x70>
c01057f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01057f7:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01057fb:	c7 44 24 08 44 65 11 	movl   $0xc0116544,0x8(%esp)
c0105802:	c0 
c0105803:	c7 44 24 04 3e 01 00 	movl   $0x13e,0x4(%esp)
c010580a:	00 
c010580b:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c0105812:	e8 b1 b6 ff ff       	call   c0100ec8 <__panic>
c0105817:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010581a:	05 00 00 00 40       	add    $0x40000000,%eax
c010581f:	a3 24 30 15 c0       	mov    %eax,0xc0153024

    check_pgdir();
c0105824:	e8 0e 09 00 00       	call   c0106137 <check_pgdir>

    static_assert(KERNBASE % PTSIZE == 0 && KERNTOP % PTSIZE == 0);

    // recursively insert boot_pgdir in itself
    // to form a virtual page table at virtual address VPT
    boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;
c0105829:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c010582e:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c0105834:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0105839:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010583c:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
c0105843:	77 23                	ja     c0105868 <pmm_init+0xc1>
c0105845:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105848:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010584c:	c7 44 24 08 44 65 11 	movl   $0xc0116544,0x8(%esp)
c0105853:	c0 
c0105854:	c7 44 24 04 46 01 00 	movl   $0x146,0x4(%esp)
c010585b:	00 
c010585c:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c0105863:	e8 60 b6 ff ff       	call   c0100ec8 <__panic>
c0105868:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010586b:	05 00 00 00 40       	add    $0x40000000,%eax
c0105870:	83 c8 03             	or     $0x3,%eax
c0105873:	89 02                	mov    %eax,(%edx)

    // map all physical memory to linear memory with base linear addr KERNBASE
    //linear_addr KERNBASE~KERNBASE+KMEMSIZE = phy_addr 0~KMEMSIZE
    //But shouldn't use this map until enable_paging() & gdt_init() finished.
    boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W);
c0105875:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c010587a:	c7 44 24 10 02 00 00 	movl   $0x2,0x10(%esp)
c0105881:	00 
c0105882:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0105889:	00 
c010588a:	c7 44 24 08 00 00 00 	movl   $0x38000000,0x8(%esp)
c0105891:	38 
c0105892:	c7 44 24 04 00 00 00 	movl   $0xc0000000,0x4(%esp)
c0105899:	c0 
c010589a:	89 04 24             	mov    %eax,(%esp)
c010589d:	e8 b4 fd ff ff       	call   c0105656 <boot_map_segment>

    //temporary map: 
    //virtual_addr 3G~3G+4M = linear_addr 0~4M = linear_addr 3G~3G+4M = phy_addr 0~4M     
    boot_pgdir[0] = boot_pgdir[PDX(KERNBASE)];
c01058a2:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c01058a7:	8b 15 84 fe 14 c0    	mov    0xc014fe84,%edx
c01058ad:	8b 92 00 0c 00 00    	mov    0xc00(%edx),%edx
c01058b3:	89 10                	mov    %edx,(%eax)

    enable_paging();
c01058b5:	e8 63 fd ff ff       	call   c010561d <enable_paging>

    //reload gdt(third time,the last time) to map all physical memory
    //virtual_addr 0~4G=liear_addr 0~4G
    //then set kernel stack(ss:esp) in TSS, setup TSS in gdt, load TSS
    gdt_init();
c01058ba:	e8 64 f7 ff ff       	call   c0105023 <gdt_init>

    //disable the map of virtual_addr 0~4M
    boot_pgdir[0] = 0;
c01058bf:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c01058c4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    //now the basic virtual memory map(see memalyout.h) is established.
    //check the correctness of the basic virtual memory map.
    check_boot_pgdir();
c01058ca:	e8 03 0f 00 00       	call   c01067d2 <check_boot_pgdir>

    print_pgdir();
c01058cf:	e8 90 13 00 00       	call   c0106c64 <print_pgdir>
    
    kmalloc_init();
c01058d4:	e8 c6 f2 ff ff       	call   c0104b9f <kmalloc_init>

}
c01058d9:	c9                   	leave  
c01058da:	c3                   	ret    

c01058db <get_pte>:
//  pgdir:  the kernel virtual base address of PDT
//  la:     the linear address need to map
//  create: a logical value to decide if alloc a page for PT
// return vaule: the kernel virtual address of this pte
pte_t *
get_pte(pde_t *pgdir, uintptr_t la, bool create) {
c01058db:	55                   	push   %ebp
c01058dc:	89 e5                	mov    %esp,%ebp
c01058de:	83 ec 38             	sub    $0x38,%esp
                          // (6) clear page content using memset
                          // (7) set page directory entry's permission
    }
    return NULL;          // (8) return page table entry
#endif
    pde_t *pdep = &pgdir[PDX(la)];
c01058e1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01058e4:	c1 e8 16             	shr    $0x16,%eax
c01058e7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01058ee:	8b 45 08             	mov    0x8(%ebp),%eax
c01058f1:	01 d0                	add    %edx,%eax
c01058f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!(*pdep & PTE_P)) {
c01058f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01058f9:	8b 00                	mov    (%eax),%eax
c01058fb:	83 e0 01             	and    $0x1,%eax
c01058fe:	85 c0                	test   %eax,%eax
c0105900:	0f 85 af 00 00 00    	jne    c01059b5 <get_pte+0xda>
        struct Page *page;
        if (!create || (page = alloc_page()) == NULL) {
c0105906:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010590a:	74 15                	je     c0105921 <get_pte+0x46>
c010590c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105913:	e8 4c f8 ff ff       	call   c0105164 <alloc_pages>
c0105918:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010591b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010591f:	75 0a                	jne    c010592b <get_pte+0x50>
            return NULL;
c0105921:	b8 00 00 00 00       	mov    $0x0,%eax
c0105926:	e9 e6 00 00 00       	jmp    c0105a11 <get_pte+0x136>
        }
        set_page_ref(page, 1);
c010592b:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105932:	00 
c0105933:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105936:	89 04 24             	mov    %eax,(%esp)
c0105939:	e8 2b f6 ff ff       	call   c0104f69 <set_page_ref>
        uintptr_t pa = page2pa(page);
c010593e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105941:	89 04 24             	mov    %eax,(%esp)
c0105944:	e8 07 f5 ff ff       	call   c0104e50 <page2pa>
c0105949:	89 45 ec             	mov    %eax,-0x14(%ebp)
        memset(KADDR(pa), 0, PGSIZE);
c010594c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010594f:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0105952:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105955:	c1 e8 0c             	shr    $0xc,%eax
c0105958:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010595b:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c0105960:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c0105963:	72 23                	jb     c0105988 <get_pte+0xad>
c0105965:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105968:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010596c:	c7 44 24 08 a0 64 11 	movl   $0xc01164a0,0x8(%esp)
c0105973:	c0 
c0105974:	c7 44 24 04 97 01 00 	movl   $0x197,0x4(%esp)
c010597b:	00 
c010597c:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c0105983:	e8 40 b5 ff ff       	call   c0100ec8 <__panic>
c0105988:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010598b:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0105990:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0105997:	00 
c0105998:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010599f:	00 
c01059a0:	89 04 24             	mov    %eax,(%esp)
c01059a3:	e8 9d fb 00 00       	call   c0115545 <memset>
        *pdep = pa | PTE_U | PTE_W | PTE_P;
c01059a8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01059ab:	83 c8 07             	or     $0x7,%eax
c01059ae:	89 c2                	mov    %eax,%edx
c01059b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01059b3:	89 10                	mov    %edx,(%eax)
    }
    return &((pte_t *)KADDR(PDE_ADDR(*pdep)))[PTX(la)];
c01059b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01059b8:	8b 00                	mov    (%eax),%eax
c01059ba:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01059bf:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01059c2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01059c5:	c1 e8 0c             	shr    $0xc,%eax
c01059c8:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01059cb:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c01059d0:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c01059d3:	72 23                	jb     c01059f8 <get_pte+0x11d>
c01059d5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01059d8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01059dc:	c7 44 24 08 a0 64 11 	movl   $0xc01164a0,0x8(%esp)
c01059e3:	c0 
c01059e4:	c7 44 24 04 9a 01 00 	movl   $0x19a,0x4(%esp)
c01059eb:	00 
c01059ec:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c01059f3:	e8 d0 b4 ff ff       	call   c0100ec8 <__panic>
c01059f8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01059fb:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0105a00:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105a03:	c1 ea 0c             	shr    $0xc,%edx
c0105a06:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
c0105a0c:	c1 e2 02             	shl    $0x2,%edx
c0105a0f:	01 d0                	add    %edx,%eax
}
c0105a11:	c9                   	leave  
c0105a12:	c3                   	ret    

c0105a13 <get_page>:

//get_page - get related Page struct for linear address la using PDT pgdir
struct Page *
get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store) {
c0105a13:	55                   	push   %ebp
c0105a14:	89 e5                	mov    %esp,%ebp
c0105a16:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c0105a19:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105a20:	00 
c0105a21:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105a24:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105a28:	8b 45 08             	mov    0x8(%ebp),%eax
c0105a2b:	89 04 24             	mov    %eax,(%esp)
c0105a2e:	e8 a8 fe ff ff       	call   c01058db <get_pte>
c0105a33:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep_store != NULL) {
c0105a36:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0105a3a:	74 08                	je     c0105a44 <get_page+0x31>
        *ptep_store = ptep;
c0105a3c:	8b 45 10             	mov    0x10(%ebp),%eax
c0105a3f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0105a42:	89 10                	mov    %edx,(%eax)
    }
    if (ptep != NULL && *ptep & PTE_P) {
c0105a44:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105a48:	74 1b                	je     c0105a65 <get_page+0x52>
c0105a4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a4d:	8b 00                	mov    (%eax),%eax
c0105a4f:	83 e0 01             	and    $0x1,%eax
c0105a52:	85 c0                	test   %eax,%eax
c0105a54:	74 0f                	je     c0105a65 <get_page+0x52>
        return pa2page(*ptep);
c0105a56:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a59:	8b 00                	mov    (%eax),%eax
c0105a5b:	89 04 24             	mov    %eax,(%esp)
c0105a5e:	e8 03 f4 ff ff       	call   c0104e66 <pa2page>
c0105a63:	eb 05                	jmp    c0105a6a <get_page+0x57>
    }
    return NULL;
c0105a65:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105a6a:	c9                   	leave  
c0105a6b:	c3                   	ret    

c0105a6c <page_remove_pte>:

//page_remove_pte - free an Page sturct which is related linear address la
//                - and clean(invalidate) pte which is related linear address la
//note: PT is changed, so the TLB need to be invalidate 
static inline void
page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
c0105a6c:	55                   	push   %ebp
c0105a6d:	89 e5                	mov    %esp,%ebp
c0105a6f:	83 ec 28             	sub    $0x28,%esp
                                  //(4) and free this page when page reference reachs 0
                                  //(5) clear second page table entry
                                  //(6) flush tlb
    }
#endif
    if (*ptep & PTE_P) {
c0105a72:	8b 45 10             	mov    0x10(%ebp),%eax
c0105a75:	8b 00                	mov    (%eax),%eax
c0105a77:	83 e0 01             	and    $0x1,%eax
c0105a7a:	85 c0                	test   %eax,%eax
c0105a7c:	74 4d                	je     c0105acb <page_remove_pte+0x5f>
        struct Page *page = pte2page(*ptep);
c0105a7e:	8b 45 10             	mov    0x10(%ebp),%eax
c0105a81:	8b 00                	mov    (%eax),%eax
c0105a83:	89 04 24             	mov    %eax,(%esp)
c0105a86:	e8 7e f4 ff ff       	call   c0104f09 <pte2page>
c0105a8b:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (page_ref_dec(page) == 0) {
c0105a8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a91:	89 04 24             	mov    %eax,(%esp)
c0105a94:	e8 f4 f4 ff ff       	call   c0104f8d <page_ref_dec>
c0105a99:	85 c0                	test   %eax,%eax
c0105a9b:	75 13                	jne    c0105ab0 <page_remove_pte+0x44>
            free_page(page);
c0105a9d:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105aa4:	00 
c0105aa5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105aa8:	89 04 24             	mov    %eax,(%esp)
c0105aab:	e8 1f f7 ff ff       	call   c01051cf <free_pages>
        }
        *ptep = 0;
c0105ab0:	8b 45 10             	mov    0x10(%ebp),%eax
c0105ab3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        tlb_invalidate(pgdir, la);
c0105ab9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105abc:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105ac0:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ac3:	89 04 24             	mov    %eax,(%esp)
c0105ac6:	e8 1d 05 00 00       	call   c0105fe8 <tlb_invalidate>
    }
}
c0105acb:	c9                   	leave  
c0105acc:	c3                   	ret    

c0105acd <unmap_range>:

void
unmap_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c0105acd:	55                   	push   %ebp
c0105ace:	89 e5                	mov    %esp,%ebp
c0105ad0:	83 ec 28             	sub    $0x28,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105ad3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105ad6:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105adb:	85 c0                	test   %eax,%eax
c0105add:	75 0c                	jne    c0105aeb <unmap_range+0x1e>
c0105adf:	8b 45 10             	mov    0x10(%ebp),%eax
c0105ae2:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105ae7:	85 c0                	test   %eax,%eax
c0105ae9:	74 24                	je     c0105b0f <unmap_range+0x42>
c0105aeb:	c7 44 24 0c c8 65 11 	movl   $0xc01165c8,0xc(%esp)
c0105af2:	c0 
c0105af3:	c7 44 24 08 8d 65 11 	movl   $0xc011658d,0x8(%esp)
c0105afa:	c0 
c0105afb:	c7 44 24 04 d4 01 00 	movl   $0x1d4,0x4(%esp)
c0105b02:	00 
c0105b03:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c0105b0a:	e8 b9 b3 ff ff       	call   c0100ec8 <__panic>
    assert(USER_ACCESS(start, end));
c0105b0f:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0105b16:	76 11                	jbe    c0105b29 <unmap_range+0x5c>
c0105b18:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b1b:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105b1e:	73 09                	jae    c0105b29 <unmap_range+0x5c>
c0105b20:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0105b27:	76 24                	jbe    c0105b4d <unmap_range+0x80>
c0105b29:	c7 44 24 0c f1 65 11 	movl   $0xc01165f1,0xc(%esp)
c0105b30:	c0 
c0105b31:	c7 44 24 08 8d 65 11 	movl   $0xc011658d,0x8(%esp)
c0105b38:	c0 
c0105b39:	c7 44 24 04 d5 01 00 	movl   $0x1d5,0x4(%esp)
c0105b40:	00 
c0105b41:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c0105b48:	e8 7b b3 ff ff       	call   c0100ec8 <__panic>

    do {
        pte_t *ptep = get_pte(pgdir, start, 0);
c0105b4d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105b54:	00 
c0105b55:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b58:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105b5c:	8b 45 08             	mov    0x8(%ebp),%eax
c0105b5f:	89 04 24             	mov    %eax,(%esp)
c0105b62:	e8 74 fd ff ff       	call   c01058db <get_pte>
c0105b67:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0105b6a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105b6e:	75 18                	jne    c0105b88 <unmap_range+0xbb>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0105b70:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b73:	05 00 00 40 00       	add    $0x400000,%eax
c0105b78:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105b7b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105b7e:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105b83:	89 45 0c             	mov    %eax,0xc(%ebp)
            continue ;
c0105b86:	eb 29                	jmp    c0105bb1 <unmap_range+0xe4>
        }
        if (*ptep != 0) {
c0105b88:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105b8b:	8b 00                	mov    (%eax),%eax
c0105b8d:	85 c0                	test   %eax,%eax
c0105b8f:	74 19                	je     c0105baa <unmap_range+0xdd>
            page_remove_pte(pgdir, start, ptep);
c0105b91:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105b94:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105b98:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b9b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105b9f:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ba2:	89 04 24             	mov    %eax,(%esp)
c0105ba5:	e8 c2 fe ff ff       	call   c0105a6c <page_remove_pte>
        }
        start += PGSIZE;
c0105baa:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    } while (start != 0 && start < end);
c0105bb1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105bb5:	74 08                	je     c0105bbf <unmap_range+0xf2>
c0105bb7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105bba:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105bbd:	72 8e                	jb     c0105b4d <unmap_range+0x80>
}
c0105bbf:	c9                   	leave  
c0105bc0:	c3                   	ret    

c0105bc1 <exit_range>:

void
exit_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c0105bc1:	55                   	push   %ebp
c0105bc2:	89 e5                	mov    %esp,%ebp
c0105bc4:	83 ec 28             	sub    $0x28,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105bc7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105bca:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105bcf:	85 c0                	test   %eax,%eax
c0105bd1:	75 0c                	jne    c0105bdf <exit_range+0x1e>
c0105bd3:	8b 45 10             	mov    0x10(%ebp),%eax
c0105bd6:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105bdb:	85 c0                	test   %eax,%eax
c0105bdd:	74 24                	je     c0105c03 <exit_range+0x42>
c0105bdf:	c7 44 24 0c c8 65 11 	movl   $0xc01165c8,0xc(%esp)
c0105be6:	c0 
c0105be7:	c7 44 24 08 8d 65 11 	movl   $0xc011658d,0x8(%esp)
c0105bee:	c0 
c0105bef:	c7 44 24 04 e6 01 00 	movl   $0x1e6,0x4(%esp)
c0105bf6:	00 
c0105bf7:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c0105bfe:	e8 c5 b2 ff ff       	call   c0100ec8 <__panic>
    assert(USER_ACCESS(start, end));
c0105c03:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0105c0a:	76 11                	jbe    c0105c1d <exit_range+0x5c>
c0105c0c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105c0f:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105c12:	73 09                	jae    c0105c1d <exit_range+0x5c>
c0105c14:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0105c1b:	76 24                	jbe    c0105c41 <exit_range+0x80>
c0105c1d:	c7 44 24 0c f1 65 11 	movl   $0xc01165f1,0xc(%esp)
c0105c24:	c0 
c0105c25:	c7 44 24 08 8d 65 11 	movl   $0xc011658d,0x8(%esp)
c0105c2c:	c0 
c0105c2d:	c7 44 24 04 e7 01 00 	movl   $0x1e7,0x4(%esp)
c0105c34:	00 
c0105c35:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c0105c3c:	e8 87 b2 ff ff       	call   c0100ec8 <__panic>

    start = ROUNDDOWN(start, PTSIZE);
c0105c41:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105c44:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105c47:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105c4a:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105c4f:	89 45 0c             	mov    %eax,0xc(%ebp)
    do {
        int pde_idx = PDX(start);
c0105c52:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105c55:	c1 e8 16             	shr    $0x16,%eax
c0105c58:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pgdir[pde_idx] & PTE_P) {
c0105c5b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105c5e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105c65:	8b 45 08             	mov    0x8(%ebp),%eax
c0105c68:	01 d0                	add    %edx,%eax
c0105c6a:	8b 00                	mov    (%eax),%eax
c0105c6c:	83 e0 01             	and    $0x1,%eax
c0105c6f:	85 c0                	test   %eax,%eax
c0105c71:	74 3e                	je     c0105cb1 <exit_range+0xf0>
            free_page(pde2page(pgdir[pde_idx]));
c0105c73:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105c76:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105c7d:	8b 45 08             	mov    0x8(%ebp),%eax
c0105c80:	01 d0                	add    %edx,%eax
c0105c82:	8b 00                	mov    (%eax),%eax
c0105c84:	89 04 24             	mov    %eax,(%esp)
c0105c87:	e8 bb f2 ff ff       	call   c0104f47 <pde2page>
c0105c8c:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105c93:	00 
c0105c94:	89 04 24             	mov    %eax,(%esp)
c0105c97:	e8 33 f5 ff ff       	call   c01051cf <free_pages>
            pgdir[pde_idx] = 0;
c0105c9c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105c9f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105ca6:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ca9:	01 d0                	add    %edx,%eax
c0105cab:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        }
        start += PTSIZE;
c0105cb1:	81 45 0c 00 00 40 00 	addl   $0x400000,0xc(%ebp)
    } while (start != 0 && start < end);
c0105cb8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105cbc:	74 08                	je     c0105cc6 <exit_range+0x105>
c0105cbe:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105cc1:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105cc4:	72 8c                	jb     c0105c52 <exit_range+0x91>
}
c0105cc6:	c9                   	leave  
c0105cc7:	c3                   	ret    

c0105cc8 <copy_range>:
 * @share: flags to indicate to dup OR share. We just use dup method, so it didn't be used.
 *
 * CALL GRAPH: copy_mm-->dup_mmap-->copy_range
 */
int
copy_range(pde_t *to, pde_t *from, uintptr_t start, uintptr_t end, bool share) {
c0105cc8:	55                   	push   %ebp
c0105cc9:	89 e5                	mov    %esp,%ebp
c0105ccb:	83 ec 48             	sub    $0x48,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105cce:	8b 45 10             	mov    0x10(%ebp),%eax
c0105cd1:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105cd6:	85 c0                	test   %eax,%eax
c0105cd8:	75 0c                	jne    c0105ce6 <copy_range+0x1e>
c0105cda:	8b 45 14             	mov    0x14(%ebp),%eax
c0105cdd:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105ce2:	85 c0                	test   %eax,%eax
c0105ce4:	74 24                	je     c0105d0a <copy_range+0x42>
c0105ce6:	c7 44 24 0c c8 65 11 	movl   $0xc01165c8,0xc(%esp)
c0105ced:	c0 
c0105cee:	c7 44 24 08 8d 65 11 	movl   $0xc011658d,0x8(%esp)
c0105cf5:	c0 
c0105cf6:	c7 44 24 04 fc 01 00 	movl   $0x1fc,0x4(%esp)
c0105cfd:	00 
c0105cfe:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c0105d05:	e8 be b1 ff ff       	call   c0100ec8 <__panic>
    assert(USER_ACCESS(start, end));
c0105d0a:	81 7d 10 ff ff 1f 00 	cmpl   $0x1fffff,0x10(%ebp)
c0105d11:	76 11                	jbe    c0105d24 <copy_range+0x5c>
c0105d13:	8b 45 10             	mov    0x10(%ebp),%eax
c0105d16:	3b 45 14             	cmp    0x14(%ebp),%eax
c0105d19:	73 09                	jae    c0105d24 <copy_range+0x5c>
c0105d1b:	81 7d 14 00 00 00 b0 	cmpl   $0xb0000000,0x14(%ebp)
c0105d22:	76 24                	jbe    c0105d48 <copy_range+0x80>
c0105d24:	c7 44 24 0c f1 65 11 	movl   $0xc01165f1,0xc(%esp)
c0105d2b:	c0 
c0105d2c:	c7 44 24 08 8d 65 11 	movl   $0xc011658d,0x8(%esp)
c0105d33:	c0 
c0105d34:	c7 44 24 04 fd 01 00 	movl   $0x1fd,0x4(%esp)
c0105d3b:	00 
c0105d3c:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c0105d43:	e8 80 b1 ff ff       	call   c0100ec8 <__panic>
    // copy content by page unit.
    do {
        //call get_pte to find process A's pte according to the addr start
        pte_t *ptep = get_pte(from, start, 0), *nptep;
c0105d48:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105d4f:	00 
c0105d50:	8b 45 10             	mov    0x10(%ebp),%eax
c0105d53:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105d57:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105d5a:	89 04 24             	mov    %eax,(%esp)
c0105d5d:	e8 79 fb ff ff       	call   c01058db <get_pte>
c0105d62:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0105d65:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105d69:	75 1b                	jne    c0105d86 <copy_range+0xbe>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0105d6b:	8b 45 10             	mov    0x10(%ebp),%eax
c0105d6e:	05 00 00 40 00       	add    $0x400000,%eax
c0105d73:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105d76:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105d79:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105d7e:	89 45 10             	mov    %eax,0x10(%ebp)
            continue ;
c0105d81:	e9 4c 01 00 00       	jmp    c0105ed2 <copy_range+0x20a>
        }
        //call get_pte to find process B's pte according to the addr start. If pte is NULL, just alloc a PT
        if (*ptep & PTE_P) {
c0105d86:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105d89:	8b 00                	mov    (%eax),%eax
c0105d8b:	83 e0 01             	and    $0x1,%eax
c0105d8e:	85 c0                	test   %eax,%eax
c0105d90:	0f 84 35 01 00 00    	je     c0105ecb <copy_range+0x203>
            if ((nptep = get_pte(to, start, 1)) == NULL) {
c0105d96:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0105d9d:	00 
c0105d9e:	8b 45 10             	mov    0x10(%ebp),%eax
c0105da1:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105da5:	8b 45 08             	mov    0x8(%ebp),%eax
c0105da8:	89 04 24             	mov    %eax,(%esp)
c0105dab:	e8 2b fb ff ff       	call   c01058db <get_pte>
c0105db0:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0105db3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0105db7:	75 0a                	jne    c0105dc3 <copy_range+0xfb>
                return -E_NO_MEM;
c0105db9:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0105dbe:	e9 26 01 00 00       	jmp    c0105ee9 <copy_range+0x221>
            }
        uint32_t perm = (*ptep & PTE_USER);
c0105dc3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105dc6:	8b 00                	mov    (%eax),%eax
c0105dc8:	83 e0 07             	and    $0x7,%eax
c0105dcb:	89 45 e8             	mov    %eax,-0x18(%ebp)
        //get page from ptep
        struct Page *page = pte2page(*ptep);
c0105dce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105dd1:	8b 00                	mov    (%eax),%eax
c0105dd3:	89 04 24             	mov    %eax,(%esp)
c0105dd6:	e8 2e f1 ff ff       	call   c0104f09 <pte2page>
c0105ddb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        // alloc a page for process B
        struct Page *npage=alloc_page();
c0105dde:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105de5:	e8 7a f3 ff ff       	call   c0105164 <alloc_pages>
c0105dea:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(page!=NULL);
c0105ded:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0105df1:	75 24                	jne    c0105e17 <copy_range+0x14f>
c0105df3:	c7 44 24 0c 09 66 11 	movl   $0xc0116609,0xc(%esp)
c0105dfa:	c0 
c0105dfb:	c7 44 24 08 8d 65 11 	movl   $0xc011658d,0x8(%esp)
c0105e02:	c0 
c0105e03:	c7 44 24 04 10 02 00 	movl   $0x210,0x4(%esp)
c0105e0a:	00 
c0105e0b:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c0105e12:	e8 b1 b0 ff ff       	call   c0100ec8 <__panic>
        assert(npage!=NULL);
c0105e17:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0105e1b:	75 24                	jne    c0105e41 <copy_range+0x179>
c0105e1d:	c7 44 24 0c 14 66 11 	movl   $0xc0116614,0xc(%esp)
c0105e24:	c0 
c0105e25:	c7 44 24 08 8d 65 11 	movl   $0xc011658d,0x8(%esp)
c0105e2c:	c0 
c0105e2d:	c7 44 24 04 11 02 00 	movl   $0x211,0x4(%esp)
c0105e34:	00 
c0105e35:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c0105e3c:	e8 87 b0 ff ff       	call   c0100ec8 <__panic>
        int ret=0;
c0105e41:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
         * (1) find src_kvaddr: the kernel virtual address of page
         * (2) find dst_kvaddr: the kernel virtual address of npage
         * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
         * (4) build the map of phy addr of  nage with the linear addr start
         */
        void * kva_src = page2kva(page);
c0105e48:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105e4b:	89 04 24             	mov    %eax,(%esp)
c0105e4e:	e8 62 f0 ff ff       	call   c0104eb5 <page2kva>
c0105e53:	89 45 d8             	mov    %eax,-0x28(%ebp)
        void * kva_dst = page2kva(npage);
c0105e56:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105e59:	89 04 24             	mov    %eax,(%esp)
c0105e5c:	e8 54 f0 ff ff       	call   c0104eb5 <page2kva>
c0105e61:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    
        memcpy(kva_dst, kva_src, PGSIZE);
c0105e64:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0105e6b:	00 
c0105e6c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105e6f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105e73:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0105e76:	89 04 24             	mov    %eax,(%esp)
c0105e79:	e8 a9 f7 00 00       	call   c0115627 <memcpy>

        ret = page_insert(to, npage, start, perm);
c0105e7e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105e81:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105e85:	8b 45 10             	mov    0x10(%ebp),%eax
c0105e88:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105e8c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105e8f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105e93:	8b 45 08             	mov    0x8(%ebp),%eax
c0105e96:	89 04 24             	mov    %eax,(%esp)
c0105e99:	e8 91 00 00 00       	call   c0105f2f <page_insert>
c0105e9e:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(ret == 0);
c0105ea1:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0105ea5:	74 24                	je     c0105ecb <copy_range+0x203>
c0105ea7:	c7 44 24 0c 20 66 11 	movl   $0xc0116620,0xc(%esp)
c0105eae:	c0 
c0105eaf:	c7 44 24 08 8d 65 11 	movl   $0xc011658d,0x8(%esp)
c0105eb6:	c0 
c0105eb7:	c7 44 24 04 27 02 00 	movl   $0x227,0x4(%esp)
c0105ebe:	00 
c0105ebf:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c0105ec6:	e8 fd af ff ff       	call   c0100ec8 <__panic>
        }
        start += PGSIZE;
c0105ecb:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    } while (start != 0 && start < end);
c0105ed2:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0105ed6:	74 0c                	je     c0105ee4 <copy_range+0x21c>
c0105ed8:	8b 45 10             	mov    0x10(%ebp),%eax
c0105edb:	3b 45 14             	cmp    0x14(%ebp),%eax
c0105ede:	0f 82 64 fe ff ff    	jb     c0105d48 <copy_range+0x80>
    return 0;
c0105ee4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105ee9:	c9                   	leave  
c0105eea:	c3                   	ret    

c0105eeb <page_remove>:

//page_remove - free an Page which is related linear address la and has an validated pte
void
page_remove(pde_t *pgdir, uintptr_t la) {
c0105eeb:	55                   	push   %ebp
c0105eec:	89 e5                	mov    %esp,%ebp
c0105eee:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c0105ef1:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105ef8:	00 
c0105ef9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105efc:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105f00:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f03:	89 04 24             	mov    %eax,(%esp)
c0105f06:	e8 d0 f9 ff ff       	call   c01058db <get_pte>
c0105f0b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep != NULL) {
c0105f0e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105f12:	74 19                	je     c0105f2d <page_remove+0x42>
        page_remove_pte(pgdir, la, ptep);
c0105f14:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f17:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105f1b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105f1e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105f22:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f25:	89 04 24             	mov    %eax,(%esp)
c0105f28:	e8 3f fb ff ff       	call   c0105a6c <page_remove_pte>
    }
}
c0105f2d:	c9                   	leave  
c0105f2e:	c3                   	ret    

c0105f2f <page_insert>:
//  la:    the linear address need to map
//  perm:  the permission of this Page which is setted in related pte
// return value: always 0
//note: PT is changed, so the TLB need to be invalidate 
int
page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm) {
c0105f2f:	55                   	push   %ebp
c0105f30:	89 e5                	mov    %esp,%ebp
c0105f32:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 1);
c0105f35:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0105f3c:	00 
c0105f3d:	8b 45 10             	mov    0x10(%ebp),%eax
c0105f40:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105f44:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f47:	89 04 24             	mov    %eax,(%esp)
c0105f4a:	e8 8c f9 ff ff       	call   c01058db <get_pte>
c0105f4f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep == NULL) {
c0105f52:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105f56:	75 0a                	jne    c0105f62 <page_insert+0x33>
        return -E_NO_MEM;
c0105f58:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0105f5d:	e9 84 00 00 00       	jmp    c0105fe6 <page_insert+0xb7>
    }
    page_ref_inc(page);
c0105f62:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105f65:	89 04 24             	mov    %eax,(%esp)
c0105f68:	e8 09 f0 ff ff       	call   c0104f76 <page_ref_inc>
    if (*ptep & PTE_P) {
c0105f6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f70:	8b 00                	mov    (%eax),%eax
c0105f72:	83 e0 01             	and    $0x1,%eax
c0105f75:	85 c0                	test   %eax,%eax
c0105f77:	74 3e                	je     c0105fb7 <page_insert+0x88>
        struct Page *p = pte2page(*ptep);
c0105f79:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f7c:	8b 00                	mov    (%eax),%eax
c0105f7e:	89 04 24             	mov    %eax,(%esp)
c0105f81:	e8 83 ef ff ff       	call   c0104f09 <pte2page>
c0105f86:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (p == page) {
c0105f89:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105f8c:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0105f8f:	75 0d                	jne    c0105f9e <page_insert+0x6f>
            page_ref_dec(page);
c0105f91:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105f94:	89 04 24             	mov    %eax,(%esp)
c0105f97:	e8 f1 ef ff ff       	call   c0104f8d <page_ref_dec>
c0105f9c:	eb 19                	jmp    c0105fb7 <page_insert+0x88>
        }
        else {
            page_remove_pte(pgdir, la, ptep);
c0105f9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105fa1:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105fa5:	8b 45 10             	mov    0x10(%ebp),%eax
c0105fa8:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105fac:	8b 45 08             	mov    0x8(%ebp),%eax
c0105faf:	89 04 24             	mov    %eax,(%esp)
c0105fb2:	e8 b5 fa ff ff       	call   c0105a6c <page_remove_pte>
        }
    }
    *ptep = page2pa(page) | PTE_P | perm;
c0105fb7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105fba:	89 04 24             	mov    %eax,(%esp)
c0105fbd:	e8 8e ee ff ff       	call   c0104e50 <page2pa>
c0105fc2:	0b 45 14             	or     0x14(%ebp),%eax
c0105fc5:	83 c8 01             	or     $0x1,%eax
c0105fc8:	89 c2                	mov    %eax,%edx
c0105fca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105fcd:	89 10                	mov    %edx,(%eax)
    tlb_invalidate(pgdir, la);
c0105fcf:	8b 45 10             	mov    0x10(%ebp),%eax
c0105fd2:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105fd6:	8b 45 08             	mov    0x8(%ebp),%eax
c0105fd9:	89 04 24             	mov    %eax,(%esp)
c0105fdc:	e8 07 00 00 00       	call   c0105fe8 <tlb_invalidate>
    return 0;
c0105fe1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105fe6:	c9                   	leave  
c0105fe7:	c3                   	ret    

c0105fe8 <tlb_invalidate>:

// invalidate a TLB entry, but only if the page tables being
// edited are the ones currently in use by the processor.
void
tlb_invalidate(pde_t *pgdir, uintptr_t la) {
c0105fe8:	55                   	push   %ebp
c0105fe9:	89 e5                	mov    %esp,%ebp
c0105feb:	83 ec 28             	sub    $0x28,%esp
}

static inline uintptr_t
rcr3(void) {
    uintptr_t cr3;
    asm volatile ("mov %%cr3, %0" : "=r" (cr3) :: "memory");
c0105fee:	0f 20 d8             	mov    %cr3,%eax
c0105ff1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr3;
c0105ff4:	8b 45 f0             	mov    -0x10(%ebp),%eax
    if (rcr3() == PADDR(pgdir)) {
c0105ff7:	89 c2                	mov    %eax,%edx
c0105ff9:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ffc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105fff:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0106006:	77 23                	ja     c010602b <tlb_invalidate+0x43>
c0106008:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010600b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010600f:	c7 44 24 08 44 65 11 	movl   $0xc0116544,0x8(%esp)
c0106016:	c0 
c0106017:	c7 44 24 04 58 02 00 	movl   $0x258,0x4(%esp)
c010601e:	00 
c010601f:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c0106026:	e8 9d ae ff ff       	call   c0100ec8 <__panic>
c010602b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010602e:	05 00 00 00 40       	add    $0x40000000,%eax
c0106033:	39 c2                	cmp    %eax,%edx
c0106035:	75 0c                	jne    c0106043 <tlb_invalidate+0x5b>
        invlpg((void *)la);
c0106037:	8b 45 0c             	mov    0xc(%ebp),%eax
c010603a:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static inline void
invlpg(void *addr) {
    asm volatile ("invlpg (%0)" :: "r" (addr) : "memory");
c010603d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106040:	0f 01 38             	invlpg (%eax)
    }
}
c0106043:	c9                   	leave  
c0106044:	c3                   	ret    

c0106045 <pgdir_alloc_page>:

// pgdir_alloc_page - call alloc_page & page_insert functions to 
//                  - allocate a page size memory & setup an addr map
//                  - pa<->la with linear address la and the PDT pgdir
struct Page *
pgdir_alloc_page(pde_t *pgdir, uintptr_t la, uint32_t perm) {
c0106045:	55                   	push   %ebp
c0106046:	89 e5                	mov    %esp,%ebp
c0106048:	83 ec 28             	sub    $0x28,%esp
    struct Page *page = alloc_page();
c010604b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106052:	e8 0d f1 ff ff       	call   c0105164 <alloc_pages>
c0106057:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c010605a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010605e:	0f 84 b0 00 00 00    	je     c0106114 <pgdir_alloc_page+0xcf>
        if (page_insert(pgdir, page, la, perm) != 0) {
c0106064:	8b 45 10             	mov    0x10(%ebp),%eax
c0106067:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010606b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010606e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106072:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106075:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106079:	8b 45 08             	mov    0x8(%ebp),%eax
c010607c:	89 04 24             	mov    %eax,(%esp)
c010607f:	e8 ab fe ff ff       	call   c0105f2f <page_insert>
c0106084:	85 c0                	test   %eax,%eax
c0106086:	74 1a                	je     c01060a2 <pgdir_alloc_page+0x5d>
            free_page(page);
c0106088:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010608f:	00 
c0106090:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106093:	89 04 24             	mov    %eax,(%esp)
c0106096:	e8 34 f1 ff ff       	call   c01051cf <free_pages>
            return NULL;
c010609b:	b8 00 00 00 00       	mov    $0x0,%eax
c01060a0:	eb 75                	jmp    c0106117 <pgdir_alloc_page+0xd2>
        }
        if (swap_init_ok){
c01060a2:	a1 0c ff 14 c0       	mov    0xc014ff0c,%eax
c01060a7:	85 c0                	test   %eax,%eax
c01060a9:	74 69                	je     c0106114 <pgdir_alloc_page+0xcf>
            if(check_mm_struct!=NULL) {
c01060ab:	a1 0c 31 15 c0       	mov    0xc015310c,%eax
c01060b0:	85 c0                	test   %eax,%eax
c01060b2:	74 60                	je     c0106114 <pgdir_alloc_page+0xcf>
                swap_map_swappable(check_mm_struct, la, page, 0);
c01060b4:	a1 0c 31 15 c0       	mov    0xc015310c,%eax
c01060b9:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01060c0:	00 
c01060c1:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01060c4:	89 54 24 08          	mov    %edx,0x8(%esp)
c01060c8:	8b 55 0c             	mov    0xc(%ebp),%edx
c01060cb:	89 54 24 04          	mov    %edx,0x4(%esp)
c01060cf:	89 04 24             	mov    %eax,(%esp)
c01060d2:	e8 48 0e 00 00       	call   c0106f1f <swap_map_swappable>
                page->pra_vaddr=la;
c01060d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01060da:	8b 55 0c             	mov    0xc(%ebp),%edx
c01060dd:	89 50 20             	mov    %edx,0x20(%eax)
                assert(page_ref(page) == 1);
c01060e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01060e3:	89 04 24             	mov    %eax,(%esp)
c01060e6:	e8 74 ee ff ff       	call   c0104f5f <page_ref>
c01060eb:	83 f8 01             	cmp    $0x1,%eax
c01060ee:	74 24                	je     c0106114 <pgdir_alloc_page+0xcf>
c01060f0:	c7 44 24 0c 29 66 11 	movl   $0xc0116629,0xc(%esp)
c01060f7:	c0 
c01060f8:	c7 44 24 08 8d 65 11 	movl   $0xc011658d,0x8(%esp)
c01060ff:	c0 
c0106100:	c7 44 24 04 6c 02 00 	movl   $0x26c,0x4(%esp)
c0106107:	00 
c0106108:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c010610f:	e8 b4 ad ff ff       	call   c0100ec8 <__panic>
            }
        }

    }

    return page;
c0106114:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0106117:	c9                   	leave  
c0106118:	c3                   	ret    

c0106119 <check_alloc_page>:

static void
check_alloc_page(void) {
c0106119:	55                   	push   %ebp
c010611a:	89 e5                	mov    %esp,%ebp
c010611c:	83 ec 18             	sub    $0x18,%esp
    pmm_manager->check();
c010611f:	a1 20 30 15 c0       	mov    0xc0153020,%eax
c0106124:	8b 40 18             	mov    0x18(%eax),%eax
c0106127:	ff d0                	call   *%eax
    cprintf("check_alloc_page() succeeded!\n");
c0106129:	c7 04 24 40 66 11 c0 	movl   $0xc0116640,(%esp)
c0106130:	e8 30 a2 ff ff       	call   c0100365 <cprintf>
}
c0106135:	c9                   	leave  
c0106136:	c3                   	ret    

c0106137 <check_pgdir>:

static void
check_pgdir(void) {
c0106137:	55                   	push   %ebp
c0106138:	89 e5                	mov    %esp,%ebp
c010613a:	83 ec 38             	sub    $0x38,%esp
    assert(npage <= KMEMSIZE / PGSIZE);
c010613d:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c0106142:	3d 00 80 03 00       	cmp    $0x38000,%eax
c0106147:	76 24                	jbe    c010616d <check_pgdir+0x36>
c0106149:	c7 44 24 0c 5f 66 11 	movl   $0xc011665f,0xc(%esp)
c0106150:	c0 
c0106151:	c7 44 24 08 8d 65 11 	movl   $0xc011658d,0x8(%esp)
c0106158:	c0 
c0106159:	c7 44 24 04 84 02 00 	movl   $0x284,0x4(%esp)
c0106160:	00 
c0106161:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c0106168:	e8 5b ad ff ff       	call   c0100ec8 <__panic>
    assert(boot_pgdir != NULL && (uint32_t)PGOFF(boot_pgdir) == 0);
c010616d:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0106172:	85 c0                	test   %eax,%eax
c0106174:	74 0e                	je     c0106184 <check_pgdir+0x4d>
c0106176:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c010617b:	25 ff 0f 00 00       	and    $0xfff,%eax
c0106180:	85 c0                	test   %eax,%eax
c0106182:	74 24                	je     c01061a8 <check_pgdir+0x71>
c0106184:	c7 44 24 0c 7c 66 11 	movl   $0xc011667c,0xc(%esp)
c010618b:	c0 
c010618c:	c7 44 24 08 8d 65 11 	movl   $0xc011658d,0x8(%esp)
c0106193:	c0 
c0106194:	c7 44 24 04 85 02 00 	movl   $0x285,0x4(%esp)
c010619b:	00 
c010619c:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c01061a3:	e8 20 ad ff ff       	call   c0100ec8 <__panic>
    assert(get_page(boot_pgdir, 0x0, NULL) == NULL);
c01061a8:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c01061ad:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01061b4:	00 
c01061b5:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01061bc:	00 
c01061bd:	89 04 24             	mov    %eax,(%esp)
c01061c0:	e8 4e f8 ff ff       	call   c0105a13 <get_page>
c01061c5:	85 c0                	test   %eax,%eax
c01061c7:	74 24                	je     c01061ed <check_pgdir+0xb6>
c01061c9:	c7 44 24 0c b4 66 11 	movl   $0xc01166b4,0xc(%esp)
c01061d0:	c0 
c01061d1:	c7 44 24 08 8d 65 11 	movl   $0xc011658d,0x8(%esp)
c01061d8:	c0 
c01061d9:	c7 44 24 04 86 02 00 	movl   $0x286,0x4(%esp)
c01061e0:	00 
c01061e1:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c01061e8:	e8 db ac ff ff       	call   c0100ec8 <__panic>

    struct Page *p1, *p2;
    p1 = alloc_page();
c01061ed:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01061f4:	e8 6b ef ff ff       	call   c0105164 <alloc_pages>
c01061f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(page_insert(boot_pgdir, p1, 0x0, 0) == 0);
c01061fc:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0106201:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0106208:	00 
c0106209:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106210:	00 
c0106211:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106214:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106218:	89 04 24             	mov    %eax,(%esp)
c010621b:	e8 0f fd ff ff       	call   c0105f2f <page_insert>
c0106220:	85 c0                	test   %eax,%eax
c0106222:	74 24                	je     c0106248 <check_pgdir+0x111>
c0106224:	c7 44 24 0c dc 66 11 	movl   $0xc01166dc,0xc(%esp)
c010622b:	c0 
c010622c:	c7 44 24 08 8d 65 11 	movl   $0xc011658d,0x8(%esp)
c0106233:	c0 
c0106234:	c7 44 24 04 8a 02 00 	movl   $0x28a,0x4(%esp)
c010623b:	00 
c010623c:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c0106243:	e8 80 ac ff ff       	call   c0100ec8 <__panic>

    pte_t *ptep;
    assert((ptep = get_pte(boot_pgdir, 0x0, 0)) != NULL);
c0106248:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c010624d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106254:	00 
c0106255:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010625c:	00 
c010625d:	89 04 24             	mov    %eax,(%esp)
c0106260:	e8 76 f6 ff ff       	call   c01058db <get_pte>
c0106265:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106268:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010626c:	75 24                	jne    c0106292 <check_pgdir+0x15b>
c010626e:	c7 44 24 0c 08 67 11 	movl   $0xc0116708,0xc(%esp)
c0106275:	c0 
c0106276:	c7 44 24 08 8d 65 11 	movl   $0xc011658d,0x8(%esp)
c010627d:	c0 
c010627e:	c7 44 24 04 8d 02 00 	movl   $0x28d,0x4(%esp)
c0106285:	00 
c0106286:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c010628d:	e8 36 ac ff ff       	call   c0100ec8 <__panic>
    assert(pa2page(*ptep) == p1);
c0106292:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106295:	8b 00                	mov    (%eax),%eax
c0106297:	89 04 24             	mov    %eax,(%esp)
c010629a:	e8 c7 eb ff ff       	call   c0104e66 <pa2page>
c010629f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01062a2:	74 24                	je     c01062c8 <check_pgdir+0x191>
c01062a4:	c7 44 24 0c 35 67 11 	movl   $0xc0116735,0xc(%esp)
c01062ab:	c0 
c01062ac:	c7 44 24 08 8d 65 11 	movl   $0xc011658d,0x8(%esp)
c01062b3:	c0 
c01062b4:	c7 44 24 04 8e 02 00 	movl   $0x28e,0x4(%esp)
c01062bb:	00 
c01062bc:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c01062c3:	e8 00 ac ff ff       	call   c0100ec8 <__panic>
    assert(page_ref(p1) == 1);
c01062c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01062cb:	89 04 24             	mov    %eax,(%esp)
c01062ce:	e8 8c ec ff ff       	call   c0104f5f <page_ref>
c01062d3:	83 f8 01             	cmp    $0x1,%eax
c01062d6:	74 24                	je     c01062fc <check_pgdir+0x1c5>
c01062d8:	c7 44 24 0c 4a 67 11 	movl   $0xc011674a,0xc(%esp)
c01062df:	c0 
c01062e0:	c7 44 24 08 8d 65 11 	movl   $0xc011658d,0x8(%esp)
c01062e7:	c0 
c01062e8:	c7 44 24 04 8f 02 00 	movl   $0x28f,0x4(%esp)
c01062ef:	00 
c01062f0:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c01062f7:	e8 cc ab ff ff       	call   c0100ec8 <__panic>

    ptep = &((pte_t *)KADDR(PDE_ADDR(boot_pgdir[0])))[1];
c01062fc:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0106301:	8b 00                	mov    (%eax),%eax
c0106303:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106308:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010630b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010630e:	c1 e8 0c             	shr    $0xc,%eax
c0106311:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0106314:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c0106319:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010631c:	72 23                	jb     c0106341 <check_pgdir+0x20a>
c010631e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106321:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106325:	c7 44 24 08 a0 64 11 	movl   $0xc01164a0,0x8(%esp)
c010632c:	c0 
c010632d:	c7 44 24 04 91 02 00 	movl   $0x291,0x4(%esp)
c0106334:	00 
c0106335:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c010633c:	e8 87 ab ff ff       	call   c0100ec8 <__panic>
c0106341:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106344:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0106349:	83 c0 04             	add    $0x4,%eax
c010634c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(get_pte(boot_pgdir, PGSIZE, 0) == ptep);
c010634f:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0106354:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010635b:	00 
c010635c:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0106363:	00 
c0106364:	89 04 24             	mov    %eax,(%esp)
c0106367:	e8 6f f5 ff ff       	call   c01058db <get_pte>
c010636c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010636f:	74 24                	je     c0106395 <check_pgdir+0x25e>
c0106371:	c7 44 24 0c 5c 67 11 	movl   $0xc011675c,0xc(%esp)
c0106378:	c0 
c0106379:	c7 44 24 08 8d 65 11 	movl   $0xc011658d,0x8(%esp)
c0106380:	c0 
c0106381:	c7 44 24 04 92 02 00 	movl   $0x292,0x4(%esp)
c0106388:	00 
c0106389:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c0106390:	e8 33 ab ff ff       	call   c0100ec8 <__panic>

    p2 = alloc_page();
c0106395:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010639c:	e8 c3 ed ff ff       	call   c0105164 <alloc_pages>
c01063a1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(page_insert(boot_pgdir, p2, PGSIZE, PTE_U | PTE_W) == 0);
c01063a4:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c01063a9:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
c01063b0:	00 
c01063b1:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c01063b8:	00 
c01063b9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01063bc:	89 54 24 04          	mov    %edx,0x4(%esp)
c01063c0:	89 04 24             	mov    %eax,(%esp)
c01063c3:	e8 67 fb ff ff       	call   c0105f2f <page_insert>
c01063c8:	85 c0                	test   %eax,%eax
c01063ca:	74 24                	je     c01063f0 <check_pgdir+0x2b9>
c01063cc:	c7 44 24 0c 84 67 11 	movl   $0xc0116784,0xc(%esp)
c01063d3:	c0 
c01063d4:	c7 44 24 08 8d 65 11 	movl   $0xc011658d,0x8(%esp)
c01063db:	c0 
c01063dc:	c7 44 24 04 95 02 00 	movl   $0x295,0x4(%esp)
c01063e3:	00 
c01063e4:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c01063eb:	e8 d8 aa ff ff       	call   c0100ec8 <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c01063f0:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c01063f5:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01063fc:	00 
c01063fd:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0106404:	00 
c0106405:	89 04 24             	mov    %eax,(%esp)
c0106408:	e8 ce f4 ff ff       	call   c01058db <get_pte>
c010640d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106410:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106414:	75 24                	jne    c010643a <check_pgdir+0x303>
c0106416:	c7 44 24 0c bc 67 11 	movl   $0xc01167bc,0xc(%esp)
c010641d:	c0 
c010641e:	c7 44 24 08 8d 65 11 	movl   $0xc011658d,0x8(%esp)
c0106425:	c0 
c0106426:	c7 44 24 04 96 02 00 	movl   $0x296,0x4(%esp)
c010642d:	00 
c010642e:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c0106435:	e8 8e aa ff ff       	call   c0100ec8 <__panic>
    assert(*ptep & PTE_U);
c010643a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010643d:	8b 00                	mov    (%eax),%eax
c010643f:	83 e0 04             	and    $0x4,%eax
c0106442:	85 c0                	test   %eax,%eax
c0106444:	75 24                	jne    c010646a <check_pgdir+0x333>
c0106446:	c7 44 24 0c ec 67 11 	movl   $0xc01167ec,0xc(%esp)
c010644d:	c0 
c010644e:	c7 44 24 08 8d 65 11 	movl   $0xc011658d,0x8(%esp)
c0106455:	c0 
c0106456:	c7 44 24 04 97 02 00 	movl   $0x297,0x4(%esp)
c010645d:	00 
c010645e:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c0106465:	e8 5e aa ff ff       	call   c0100ec8 <__panic>
    assert(*ptep & PTE_W);
c010646a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010646d:	8b 00                	mov    (%eax),%eax
c010646f:	83 e0 02             	and    $0x2,%eax
c0106472:	85 c0                	test   %eax,%eax
c0106474:	75 24                	jne    c010649a <check_pgdir+0x363>
c0106476:	c7 44 24 0c fa 67 11 	movl   $0xc01167fa,0xc(%esp)
c010647d:	c0 
c010647e:	c7 44 24 08 8d 65 11 	movl   $0xc011658d,0x8(%esp)
c0106485:	c0 
c0106486:	c7 44 24 04 98 02 00 	movl   $0x298,0x4(%esp)
c010648d:	00 
c010648e:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c0106495:	e8 2e aa ff ff       	call   c0100ec8 <__panic>
    assert(boot_pgdir[0] & PTE_U);
c010649a:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c010649f:	8b 00                	mov    (%eax),%eax
c01064a1:	83 e0 04             	and    $0x4,%eax
c01064a4:	85 c0                	test   %eax,%eax
c01064a6:	75 24                	jne    c01064cc <check_pgdir+0x395>
c01064a8:	c7 44 24 0c 08 68 11 	movl   $0xc0116808,0xc(%esp)
c01064af:	c0 
c01064b0:	c7 44 24 08 8d 65 11 	movl   $0xc011658d,0x8(%esp)
c01064b7:	c0 
c01064b8:	c7 44 24 04 99 02 00 	movl   $0x299,0x4(%esp)
c01064bf:	00 
c01064c0:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c01064c7:	e8 fc a9 ff ff       	call   c0100ec8 <__panic>
    assert(page_ref(p2) == 1);
c01064cc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01064cf:	89 04 24             	mov    %eax,(%esp)
c01064d2:	e8 88 ea ff ff       	call   c0104f5f <page_ref>
c01064d7:	83 f8 01             	cmp    $0x1,%eax
c01064da:	74 24                	je     c0106500 <check_pgdir+0x3c9>
c01064dc:	c7 44 24 0c 1e 68 11 	movl   $0xc011681e,0xc(%esp)
c01064e3:	c0 
c01064e4:	c7 44 24 08 8d 65 11 	movl   $0xc011658d,0x8(%esp)
c01064eb:	c0 
c01064ec:	c7 44 24 04 9a 02 00 	movl   $0x29a,0x4(%esp)
c01064f3:	00 
c01064f4:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c01064fb:	e8 c8 a9 ff ff       	call   c0100ec8 <__panic>

    assert(page_insert(boot_pgdir, p1, PGSIZE, 0) == 0);
c0106500:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0106505:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010650c:	00 
c010650d:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0106514:	00 
c0106515:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106518:	89 54 24 04          	mov    %edx,0x4(%esp)
c010651c:	89 04 24             	mov    %eax,(%esp)
c010651f:	e8 0b fa ff ff       	call   c0105f2f <page_insert>
c0106524:	85 c0                	test   %eax,%eax
c0106526:	74 24                	je     c010654c <check_pgdir+0x415>
c0106528:	c7 44 24 0c 30 68 11 	movl   $0xc0116830,0xc(%esp)
c010652f:	c0 
c0106530:	c7 44 24 08 8d 65 11 	movl   $0xc011658d,0x8(%esp)
c0106537:	c0 
c0106538:	c7 44 24 04 9c 02 00 	movl   $0x29c,0x4(%esp)
c010653f:	00 
c0106540:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c0106547:	e8 7c a9 ff ff       	call   c0100ec8 <__panic>
    assert(page_ref(p1) == 2);
c010654c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010654f:	89 04 24             	mov    %eax,(%esp)
c0106552:	e8 08 ea ff ff       	call   c0104f5f <page_ref>
c0106557:	83 f8 02             	cmp    $0x2,%eax
c010655a:	74 24                	je     c0106580 <check_pgdir+0x449>
c010655c:	c7 44 24 0c 5c 68 11 	movl   $0xc011685c,0xc(%esp)
c0106563:	c0 
c0106564:	c7 44 24 08 8d 65 11 	movl   $0xc011658d,0x8(%esp)
c010656b:	c0 
c010656c:	c7 44 24 04 9d 02 00 	movl   $0x29d,0x4(%esp)
c0106573:	00 
c0106574:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c010657b:	e8 48 a9 ff ff       	call   c0100ec8 <__panic>
    assert(page_ref(p2) == 0);
c0106580:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106583:	89 04 24             	mov    %eax,(%esp)
c0106586:	e8 d4 e9 ff ff       	call   c0104f5f <page_ref>
c010658b:	85 c0                	test   %eax,%eax
c010658d:	74 24                	je     c01065b3 <check_pgdir+0x47c>
c010658f:	c7 44 24 0c 6e 68 11 	movl   $0xc011686e,0xc(%esp)
c0106596:	c0 
c0106597:	c7 44 24 08 8d 65 11 	movl   $0xc011658d,0x8(%esp)
c010659e:	c0 
c010659f:	c7 44 24 04 9e 02 00 	movl   $0x29e,0x4(%esp)
c01065a6:	00 
c01065a7:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c01065ae:	e8 15 a9 ff ff       	call   c0100ec8 <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c01065b3:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c01065b8:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01065bf:	00 
c01065c0:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c01065c7:	00 
c01065c8:	89 04 24             	mov    %eax,(%esp)
c01065cb:	e8 0b f3 ff ff       	call   c01058db <get_pte>
c01065d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01065d3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01065d7:	75 24                	jne    c01065fd <check_pgdir+0x4c6>
c01065d9:	c7 44 24 0c bc 67 11 	movl   $0xc01167bc,0xc(%esp)
c01065e0:	c0 
c01065e1:	c7 44 24 08 8d 65 11 	movl   $0xc011658d,0x8(%esp)
c01065e8:	c0 
c01065e9:	c7 44 24 04 9f 02 00 	movl   $0x29f,0x4(%esp)
c01065f0:	00 
c01065f1:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c01065f8:	e8 cb a8 ff ff       	call   c0100ec8 <__panic>
    assert(pa2page(*ptep) == p1);
c01065fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106600:	8b 00                	mov    (%eax),%eax
c0106602:	89 04 24             	mov    %eax,(%esp)
c0106605:	e8 5c e8 ff ff       	call   c0104e66 <pa2page>
c010660a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010660d:	74 24                	je     c0106633 <check_pgdir+0x4fc>
c010660f:	c7 44 24 0c 35 67 11 	movl   $0xc0116735,0xc(%esp)
c0106616:	c0 
c0106617:	c7 44 24 08 8d 65 11 	movl   $0xc011658d,0x8(%esp)
c010661e:	c0 
c010661f:	c7 44 24 04 a0 02 00 	movl   $0x2a0,0x4(%esp)
c0106626:	00 
c0106627:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c010662e:	e8 95 a8 ff ff       	call   c0100ec8 <__panic>
    assert((*ptep & PTE_U) == 0);
c0106633:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106636:	8b 00                	mov    (%eax),%eax
c0106638:	83 e0 04             	and    $0x4,%eax
c010663b:	85 c0                	test   %eax,%eax
c010663d:	74 24                	je     c0106663 <check_pgdir+0x52c>
c010663f:	c7 44 24 0c 80 68 11 	movl   $0xc0116880,0xc(%esp)
c0106646:	c0 
c0106647:	c7 44 24 08 8d 65 11 	movl   $0xc011658d,0x8(%esp)
c010664e:	c0 
c010664f:	c7 44 24 04 a1 02 00 	movl   $0x2a1,0x4(%esp)
c0106656:	00 
c0106657:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c010665e:	e8 65 a8 ff ff       	call   c0100ec8 <__panic>

    page_remove(boot_pgdir, 0x0);
c0106663:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0106668:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010666f:	00 
c0106670:	89 04 24             	mov    %eax,(%esp)
c0106673:	e8 73 f8 ff ff       	call   c0105eeb <page_remove>
    assert(page_ref(p1) == 1);
c0106678:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010667b:	89 04 24             	mov    %eax,(%esp)
c010667e:	e8 dc e8 ff ff       	call   c0104f5f <page_ref>
c0106683:	83 f8 01             	cmp    $0x1,%eax
c0106686:	74 24                	je     c01066ac <check_pgdir+0x575>
c0106688:	c7 44 24 0c 4a 67 11 	movl   $0xc011674a,0xc(%esp)
c010668f:	c0 
c0106690:	c7 44 24 08 8d 65 11 	movl   $0xc011658d,0x8(%esp)
c0106697:	c0 
c0106698:	c7 44 24 04 a4 02 00 	movl   $0x2a4,0x4(%esp)
c010669f:	00 
c01066a0:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c01066a7:	e8 1c a8 ff ff       	call   c0100ec8 <__panic>
    assert(page_ref(p2) == 0);
c01066ac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01066af:	89 04 24             	mov    %eax,(%esp)
c01066b2:	e8 a8 e8 ff ff       	call   c0104f5f <page_ref>
c01066b7:	85 c0                	test   %eax,%eax
c01066b9:	74 24                	je     c01066df <check_pgdir+0x5a8>
c01066bb:	c7 44 24 0c 6e 68 11 	movl   $0xc011686e,0xc(%esp)
c01066c2:	c0 
c01066c3:	c7 44 24 08 8d 65 11 	movl   $0xc011658d,0x8(%esp)
c01066ca:	c0 
c01066cb:	c7 44 24 04 a5 02 00 	movl   $0x2a5,0x4(%esp)
c01066d2:	00 
c01066d3:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c01066da:	e8 e9 a7 ff ff       	call   c0100ec8 <__panic>

    page_remove(boot_pgdir, PGSIZE);
c01066df:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c01066e4:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c01066eb:	00 
c01066ec:	89 04 24             	mov    %eax,(%esp)
c01066ef:	e8 f7 f7 ff ff       	call   c0105eeb <page_remove>
    assert(page_ref(p1) == 0);
c01066f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01066f7:	89 04 24             	mov    %eax,(%esp)
c01066fa:	e8 60 e8 ff ff       	call   c0104f5f <page_ref>
c01066ff:	85 c0                	test   %eax,%eax
c0106701:	74 24                	je     c0106727 <check_pgdir+0x5f0>
c0106703:	c7 44 24 0c 95 68 11 	movl   $0xc0116895,0xc(%esp)
c010670a:	c0 
c010670b:	c7 44 24 08 8d 65 11 	movl   $0xc011658d,0x8(%esp)
c0106712:	c0 
c0106713:	c7 44 24 04 a8 02 00 	movl   $0x2a8,0x4(%esp)
c010671a:	00 
c010671b:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c0106722:	e8 a1 a7 ff ff       	call   c0100ec8 <__panic>
    assert(page_ref(p2) == 0);
c0106727:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010672a:	89 04 24             	mov    %eax,(%esp)
c010672d:	e8 2d e8 ff ff       	call   c0104f5f <page_ref>
c0106732:	85 c0                	test   %eax,%eax
c0106734:	74 24                	je     c010675a <check_pgdir+0x623>
c0106736:	c7 44 24 0c 6e 68 11 	movl   $0xc011686e,0xc(%esp)
c010673d:	c0 
c010673e:	c7 44 24 08 8d 65 11 	movl   $0xc011658d,0x8(%esp)
c0106745:	c0 
c0106746:	c7 44 24 04 a9 02 00 	movl   $0x2a9,0x4(%esp)
c010674d:	00 
c010674e:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c0106755:	e8 6e a7 ff ff       	call   c0100ec8 <__panic>

    assert(page_ref(pa2page(boot_pgdir[0])) == 1);
c010675a:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c010675f:	8b 00                	mov    (%eax),%eax
c0106761:	89 04 24             	mov    %eax,(%esp)
c0106764:	e8 fd e6 ff ff       	call   c0104e66 <pa2page>
c0106769:	89 04 24             	mov    %eax,(%esp)
c010676c:	e8 ee e7 ff ff       	call   c0104f5f <page_ref>
c0106771:	83 f8 01             	cmp    $0x1,%eax
c0106774:	74 24                	je     c010679a <check_pgdir+0x663>
c0106776:	c7 44 24 0c a8 68 11 	movl   $0xc01168a8,0xc(%esp)
c010677d:	c0 
c010677e:	c7 44 24 08 8d 65 11 	movl   $0xc011658d,0x8(%esp)
c0106785:	c0 
c0106786:	c7 44 24 04 ab 02 00 	movl   $0x2ab,0x4(%esp)
c010678d:	00 
c010678e:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c0106795:	e8 2e a7 ff ff       	call   c0100ec8 <__panic>
    free_page(pa2page(boot_pgdir[0]));
c010679a:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c010679f:	8b 00                	mov    (%eax),%eax
c01067a1:	89 04 24             	mov    %eax,(%esp)
c01067a4:	e8 bd e6 ff ff       	call   c0104e66 <pa2page>
c01067a9:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01067b0:	00 
c01067b1:	89 04 24             	mov    %eax,(%esp)
c01067b4:	e8 16 ea ff ff       	call   c01051cf <free_pages>
    boot_pgdir[0] = 0;
c01067b9:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c01067be:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_pgdir() succeeded!\n");
c01067c4:	c7 04 24 ce 68 11 c0 	movl   $0xc01168ce,(%esp)
c01067cb:	e8 95 9b ff ff       	call   c0100365 <cprintf>
}
c01067d0:	c9                   	leave  
c01067d1:	c3                   	ret    

c01067d2 <check_boot_pgdir>:

static void
check_boot_pgdir(void) {
c01067d2:	55                   	push   %ebp
c01067d3:	89 e5                	mov    %esp,%ebp
c01067d5:	83 ec 38             	sub    $0x38,%esp
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c01067d8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01067df:	e9 ca 00 00 00       	jmp    c01068ae <check_boot_pgdir+0xdc>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
c01067e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01067e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01067ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01067ed:	c1 e8 0c             	shr    $0xc,%eax
c01067f0:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01067f3:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c01067f8:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c01067fb:	72 23                	jb     c0106820 <check_boot_pgdir+0x4e>
c01067fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106800:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106804:	c7 44 24 08 a0 64 11 	movl   $0xc01164a0,0x8(%esp)
c010680b:	c0 
c010680c:	c7 44 24 04 b7 02 00 	movl   $0x2b7,0x4(%esp)
c0106813:	00 
c0106814:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c010681b:	e8 a8 a6 ff ff       	call   c0100ec8 <__panic>
c0106820:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106823:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0106828:	89 c2                	mov    %eax,%edx
c010682a:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c010682f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106836:	00 
c0106837:	89 54 24 04          	mov    %edx,0x4(%esp)
c010683b:	89 04 24             	mov    %eax,(%esp)
c010683e:	e8 98 f0 ff ff       	call   c01058db <get_pte>
c0106843:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0106846:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010684a:	75 24                	jne    c0106870 <check_boot_pgdir+0x9e>
c010684c:	c7 44 24 0c e8 68 11 	movl   $0xc01168e8,0xc(%esp)
c0106853:	c0 
c0106854:	c7 44 24 08 8d 65 11 	movl   $0xc011658d,0x8(%esp)
c010685b:	c0 
c010685c:	c7 44 24 04 b7 02 00 	movl   $0x2b7,0x4(%esp)
c0106863:	00 
c0106864:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c010686b:	e8 58 a6 ff ff       	call   c0100ec8 <__panic>
        assert(PTE_ADDR(*ptep) == i);
c0106870:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106873:	8b 00                	mov    (%eax),%eax
c0106875:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010687a:	89 c2                	mov    %eax,%edx
c010687c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010687f:	39 c2                	cmp    %eax,%edx
c0106881:	74 24                	je     c01068a7 <check_boot_pgdir+0xd5>
c0106883:	c7 44 24 0c 25 69 11 	movl   $0xc0116925,0xc(%esp)
c010688a:	c0 
c010688b:	c7 44 24 08 8d 65 11 	movl   $0xc011658d,0x8(%esp)
c0106892:	c0 
c0106893:	c7 44 24 04 b8 02 00 	movl   $0x2b8,0x4(%esp)
c010689a:	00 
c010689b:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c01068a2:	e8 21 a6 ff ff       	call   c0100ec8 <__panic>

static void
check_boot_pgdir(void) {
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c01068a7:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
c01068ae:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01068b1:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c01068b6:	39 c2                	cmp    %eax,%edx
c01068b8:	0f 82 26 ff ff ff    	jb     c01067e4 <check_boot_pgdir+0x12>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
        assert(PTE_ADDR(*ptep) == i);
    }

    assert(PDE_ADDR(boot_pgdir[PDX(VPT)]) == PADDR(boot_pgdir));
c01068be:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c01068c3:	05 ac 0f 00 00       	add    $0xfac,%eax
c01068c8:	8b 00                	mov    (%eax),%eax
c01068ca:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01068cf:	89 c2                	mov    %eax,%edx
c01068d1:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c01068d6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01068d9:	81 7d e4 ff ff ff bf 	cmpl   $0xbfffffff,-0x1c(%ebp)
c01068e0:	77 23                	ja     c0106905 <check_boot_pgdir+0x133>
c01068e2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01068e5:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01068e9:	c7 44 24 08 44 65 11 	movl   $0xc0116544,0x8(%esp)
c01068f0:	c0 
c01068f1:	c7 44 24 04 bb 02 00 	movl   $0x2bb,0x4(%esp)
c01068f8:	00 
c01068f9:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c0106900:	e8 c3 a5 ff ff       	call   c0100ec8 <__panic>
c0106905:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106908:	05 00 00 00 40       	add    $0x40000000,%eax
c010690d:	39 c2                	cmp    %eax,%edx
c010690f:	74 24                	je     c0106935 <check_boot_pgdir+0x163>
c0106911:	c7 44 24 0c 3c 69 11 	movl   $0xc011693c,0xc(%esp)
c0106918:	c0 
c0106919:	c7 44 24 08 8d 65 11 	movl   $0xc011658d,0x8(%esp)
c0106920:	c0 
c0106921:	c7 44 24 04 bb 02 00 	movl   $0x2bb,0x4(%esp)
c0106928:	00 
c0106929:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c0106930:	e8 93 a5 ff ff       	call   c0100ec8 <__panic>

    assert(boot_pgdir[0] == 0);
c0106935:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c010693a:	8b 00                	mov    (%eax),%eax
c010693c:	85 c0                	test   %eax,%eax
c010693e:	74 24                	je     c0106964 <check_boot_pgdir+0x192>
c0106940:	c7 44 24 0c 70 69 11 	movl   $0xc0116970,0xc(%esp)
c0106947:	c0 
c0106948:	c7 44 24 08 8d 65 11 	movl   $0xc011658d,0x8(%esp)
c010694f:	c0 
c0106950:	c7 44 24 04 bd 02 00 	movl   $0x2bd,0x4(%esp)
c0106957:	00 
c0106958:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c010695f:	e8 64 a5 ff ff       	call   c0100ec8 <__panic>

    struct Page *p;
    p = alloc_page();
c0106964:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010696b:	e8 f4 e7 ff ff       	call   c0105164 <alloc_pages>
c0106970:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(page_insert(boot_pgdir, p, 0x100, PTE_W) == 0);
c0106973:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0106978:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c010697f:	00 
c0106980:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
c0106987:	00 
c0106988:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010698b:	89 54 24 04          	mov    %edx,0x4(%esp)
c010698f:	89 04 24             	mov    %eax,(%esp)
c0106992:	e8 98 f5 ff ff       	call   c0105f2f <page_insert>
c0106997:	85 c0                	test   %eax,%eax
c0106999:	74 24                	je     c01069bf <check_boot_pgdir+0x1ed>
c010699b:	c7 44 24 0c 84 69 11 	movl   $0xc0116984,0xc(%esp)
c01069a2:	c0 
c01069a3:	c7 44 24 08 8d 65 11 	movl   $0xc011658d,0x8(%esp)
c01069aa:	c0 
c01069ab:	c7 44 24 04 c1 02 00 	movl   $0x2c1,0x4(%esp)
c01069b2:	00 
c01069b3:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c01069ba:	e8 09 a5 ff ff       	call   c0100ec8 <__panic>
    assert(page_ref(p) == 1);
c01069bf:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01069c2:	89 04 24             	mov    %eax,(%esp)
c01069c5:	e8 95 e5 ff ff       	call   c0104f5f <page_ref>
c01069ca:	83 f8 01             	cmp    $0x1,%eax
c01069cd:	74 24                	je     c01069f3 <check_boot_pgdir+0x221>
c01069cf:	c7 44 24 0c b2 69 11 	movl   $0xc01169b2,0xc(%esp)
c01069d6:	c0 
c01069d7:	c7 44 24 08 8d 65 11 	movl   $0xc011658d,0x8(%esp)
c01069de:	c0 
c01069df:	c7 44 24 04 c2 02 00 	movl   $0x2c2,0x4(%esp)
c01069e6:	00 
c01069e7:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c01069ee:	e8 d5 a4 ff ff       	call   c0100ec8 <__panic>
    assert(page_insert(boot_pgdir, p, 0x100 + PGSIZE, PTE_W) == 0);
c01069f3:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c01069f8:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c01069ff:	00 
c0106a00:	c7 44 24 08 00 11 00 	movl   $0x1100,0x8(%esp)
c0106a07:	00 
c0106a08:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106a0b:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106a0f:	89 04 24             	mov    %eax,(%esp)
c0106a12:	e8 18 f5 ff ff       	call   c0105f2f <page_insert>
c0106a17:	85 c0                	test   %eax,%eax
c0106a19:	74 24                	je     c0106a3f <check_boot_pgdir+0x26d>
c0106a1b:	c7 44 24 0c c4 69 11 	movl   $0xc01169c4,0xc(%esp)
c0106a22:	c0 
c0106a23:	c7 44 24 08 8d 65 11 	movl   $0xc011658d,0x8(%esp)
c0106a2a:	c0 
c0106a2b:	c7 44 24 04 c3 02 00 	movl   $0x2c3,0x4(%esp)
c0106a32:	00 
c0106a33:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c0106a3a:	e8 89 a4 ff ff       	call   c0100ec8 <__panic>
    assert(page_ref(p) == 2);
c0106a3f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106a42:	89 04 24             	mov    %eax,(%esp)
c0106a45:	e8 15 e5 ff ff       	call   c0104f5f <page_ref>
c0106a4a:	83 f8 02             	cmp    $0x2,%eax
c0106a4d:	74 24                	je     c0106a73 <check_boot_pgdir+0x2a1>
c0106a4f:	c7 44 24 0c fb 69 11 	movl   $0xc01169fb,0xc(%esp)
c0106a56:	c0 
c0106a57:	c7 44 24 08 8d 65 11 	movl   $0xc011658d,0x8(%esp)
c0106a5e:	c0 
c0106a5f:	c7 44 24 04 c4 02 00 	movl   $0x2c4,0x4(%esp)
c0106a66:	00 
c0106a67:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c0106a6e:	e8 55 a4 ff ff       	call   c0100ec8 <__panic>

    const char *str = "ucore: Hello world!!";
c0106a73:	c7 45 dc 0c 6a 11 c0 	movl   $0xc0116a0c,-0x24(%ebp)
    strcpy((void *)0x100, str);
c0106a7a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106a7d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106a81:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0106a88:	e8 e1 e7 00 00       	call   c011526e <strcpy>
    assert(strcmp((void *)0x100, (void *)(0x100 + PGSIZE)) == 0);
c0106a8d:	c7 44 24 04 00 11 00 	movl   $0x1100,0x4(%esp)
c0106a94:	00 
c0106a95:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0106a9c:	e8 46 e8 00 00       	call   c01152e7 <strcmp>
c0106aa1:	85 c0                	test   %eax,%eax
c0106aa3:	74 24                	je     c0106ac9 <check_boot_pgdir+0x2f7>
c0106aa5:	c7 44 24 0c 24 6a 11 	movl   $0xc0116a24,0xc(%esp)
c0106aac:	c0 
c0106aad:	c7 44 24 08 8d 65 11 	movl   $0xc011658d,0x8(%esp)
c0106ab4:	c0 
c0106ab5:	c7 44 24 04 c8 02 00 	movl   $0x2c8,0x4(%esp)
c0106abc:	00 
c0106abd:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c0106ac4:	e8 ff a3 ff ff       	call   c0100ec8 <__panic>

    *(char *)(page2kva(p) + 0x100) = '\0';
c0106ac9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106acc:	89 04 24             	mov    %eax,(%esp)
c0106acf:	e8 e1 e3 ff ff       	call   c0104eb5 <page2kva>
c0106ad4:	05 00 01 00 00       	add    $0x100,%eax
c0106ad9:	c6 00 00             	movb   $0x0,(%eax)
    assert(strlen((const char *)0x100) == 0);
c0106adc:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0106ae3:	e8 07 e7 00 00       	call   c01151ef <strlen>
c0106ae8:	85 c0                	test   %eax,%eax
c0106aea:	74 24                	je     c0106b10 <check_boot_pgdir+0x33e>
c0106aec:	c7 44 24 0c 5c 6a 11 	movl   $0xc0116a5c,0xc(%esp)
c0106af3:	c0 
c0106af4:	c7 44 24 08 8d 65 11 	movl   $0xc011658d,0x8(%esp)
c0106afb:	c0 
c0106afc:	c7 44 24 04 cb 02 00 	movl   $0x2cb,0x4(%esp)
c0106b03:	00 
c0106b04:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c0106b0b:	e8 b8 a3 ff ff       	call   c0100ec8 <__panic>

    free_page(p);
c0106b10:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106b17:	00 
c0106b18:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106b1b:	89 04 24             	mov    %eax,(%esp)
c0106b1e:	e8 ac e6 ff ff       	call   c01051cf <free_pages>
    free_page(pa2page(PDE_ADDR(boot_pgdir[0])));
c0106b23:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0106b28:	8b 00                	mov    (%eax),%eax
c0106b2a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106b2f:	89 04 24             	mov    %eax,(%esp)
c0106b32:	e8 2f e3 ff ff       	call   c0104e66 <pa2page>
c0106b37:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106b3e:	00 
c0106b3f:	89 04 24             	mov    %eax,(%esp)
c0106b42:	e8 88 e6 ff ff       	call   c01051cf <free_pages>
    boot_pgdir[0] = 0;
c0106b47:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0106b4c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_boot_pgdir() succeeded!\n");
c0106b52:	c7 04 24 80 6a 11 c0 	movl   $0xc0116a80,(%esp)
c0106b59:	e8 07 98 ff ff       	call   c0100365 <cprintf>
}
c0106b5e:	c9                   	leave  
c0106b5f:	c3                   	ret    

c0106b60 <perm2str>:

//perm2str - use string 'u,r,w,-' to present the permission
static const char *
perm2str(int perm) {
c0106b60:	55                   	push   %ebp
c0106b61:	89 e5                	mov    %esp,%ebp
    static char str[4];
    str[0] = (perm & PTE_U) ? 'u' : '-';
c0106b63:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b66:	83 e0 04             	and    $0x4,%eax
c0106b69:	85 c0                	test   %eax,%eax
c0106b6b:	74 07                	je     c0106b74 <perm2str+0x14>
c0106b6d:	b8 75 00 00 00       	mov    $0x75,%eax
c0106b72:	eb 05                	jmp    c0106b79 <perm2str+0x19>
c0106b74:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0106b79:	a2 08 ff 14 c0       	mov    %al,0xc014ff08
    str[1] = 'r';
c0106b7e:	c6 05 09 ff 14 c0 72 	movb   $0x72,0xc014ff09
    str[2] = (perm & PTE_W) ? 'w' : '-';
c0106b85:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b88:	83 e0 02             	and    $0x2,%eax
c0106b8b:	85 c0                	test   %eax,%eax
c0106b8d:	74 07                	je     c0106b96 <perm2str+0x36>
c0106b8f:	b8 77 00 00 00       	mov    $0x77,%eax
c0106b94:	eb 05                	jmp    c0106b9b <perm2str+0x3b>
c0106b96:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0106b9b:	a2 0a ff 14 c0       	mov    %al,0xc014ff0a
    str[3] = '\0';
c0106ba0:	c6 05 0b ff 14 c0 00 	movb   $0x0,0xc014ff0b
    return str;
c0106ba7:	b8 08 ff 14 c0       	mov    $0xc014ff08,%eax
}
c0106bac:	5d                   	pop    %ebp
c0106bad:	c3                   	ret    

c0106bae <get_pgtable_items>:
//  table:       the beginning addr of table
//  left_store:  the pointer of the high side of table's next range
//  right_store: the pointer of the low side of table's next range
// return value: 0 - not a invalid item range, perm - a valid item range with perm permission 
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
c0106bae:	55                   	push   %ebp
c0106baf:	89 e5                	mov    %esp,%ebp
c0106bb1:	83 ec 10             	sub    $0x10,%esp
    if (start >= right) {
c0106bb4:	8b 45 10             	mov    0x10(%ebp),%eax
c0106bb7:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106bba:	72 0a                	jb     c0106bc6 <get_pgtable_items+0x18>
        return 0;
c0106bbc:	b8 00 00 00 00       	mov    $0x0,%eax
c0106bc1:	e9 9c 00 00 00       	jmp    c0106c62 <get_pgtable_items+0xb4>
    }
    while (start < right && !(table[start] & PTE_P)) {
c0106bc6:	eb 04                	jmp    c0106bcc <get_pgtable_items+0x1e>
        start ++;
c0106bc8:	83 45 10 01          	addl   $0x1,0x10(%ebp)
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
    if (start >= right) {
        return 0;
    }
    while (start < right && !(table[start] & PTE_P)) {
c0106bcc:	8b 45 10             	mov    0x10(%ebp),%eax
c0106bcf:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106bd2:	73 18                	jae    c0106bec <get_pgtable_items+0x3e>
c0106bd4:	8b 45 10             	mov    0x10(%ebp),%eax
c0106bd7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106bde:	8b 45 14             	mov    0x14(%ebp),%eax
c0106be1:	01 d0                	add    %edx,%eax
c0106be3:	8b 00                	mov    (%eax),%eax
c0106be5:	83 e0 01             	and    $0x1,%eax
c0106be8:	85 c0                	test   %eax,%eax
c0106bea:	74 dc                	je     c0106bc8 <get_pgtable_items+0x1a>
        start ++;
    }
    if (start < right) {
c0106bec:	8b 45 10             	mov    0x10(%ebp),%eax
c0106bef:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106bf2:	73 69                	jae    c0106c5d <get_pgtable_items+0xaf>
        if (left_store != NULL) {
c0106bf4:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0106bf8:	74 08                	je     c0106c02 <get_pgtable_items+0x54>
            *left_store = start;
c0106bfa:	8b 45 18             	mov    0x18(%ebp),%eax
c0106bfd:	8b 55 10             	mov    0x10(%ebp),%edx
c0106c00:	89 10                	mov    %edx,(%eax)
        }
        int perm = (table[start ++] & PTE_USER);
c0106c02:	8b 45 10             	mov    0x10(%ebp),%eax
c0106c05:	8d 50 01             	lea    0x1(%eax),%edx
c0106c08:	89 55 10             	mov    %edx,0x10(%ebp)
c0106c0b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106c12:	8b 45 14             	mov    0x14(%ebp),%eax
c0106c15:	01 d0                	add    %edx,%eax
c0106c17:	8b 00                	mov    (%eax),%eax
c0106c19:	83 e0 07             	and    $0x7,%eax
c0106c1c:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while (start < right && (table[start] & PTE_USER) == perm) {
c0106c1f:	eb 04                	jmp    c0106c25 <get_pgtable_items+0x77>
            start ++;
c0106c21:	83 45 10 01          	addl   $0x1,0x10(%ebp)
    if (start < right) {
        if (left_store != NULL) {
            *left_store = start;
        }
        int perm = (table[start ++] & PTE_USER);
        while (start < right && (table[start] & PTE_USER) == perm) {
c0106c25:	8b 45 10             	mov    0x10(%ebp),%eax
c0106c28:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106c2b:	73 1d                	jae    c0106c4a <get_pgtable_items+0x9c>
c0106c2d:	8b 45 10             	mov    0x10(%ebp),%eax
c0106c30:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106c37:	8b 45 14             	mov    0x14(%ebp),%eax
c0106c3a:	01 d0                	add    %edx,%eax
c0106c3c:	8b 00                	mov    (%eax),%eax
c0106c3e:	83 e0 07             	and    $0x7,%eax
c0106c41:	89 c2                	mov    %eax,%edx
c0106c43:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106c46:	39 c2                	cmp    %eax,%edx
c0106c48:	74 d7                	je     c0106c21 <get_pgtable_items+0x73>
            start ++;
        }
        if (right_store != NULL) {
c0106c4a:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c0106c4e:	74 08                	je     c0106c58 <get_pgtable_items+0xaa>
            *right_store = start;
c0106c50:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0106c53:	8b 55 10             	mov    0x10(%ebp),%edx
c0106c56:	89 10                	mov    %edx,(%eax)
        }
        return perm;
c0106c58:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106c5b:	eb 05                	jmp    c0106c62 <get_pgtable_items+0xb4>
    }
    return 0;
c0106c5d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0106c62:	c9                   	leave  
c0106c63:	c3                   	ret    

c0106c64 <print_pgdir>:

//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
c0106c64:	55                   	push   %ebp
c0106c65:	89 e5                	mov    %esp,%ebp
c0106c67:	57                   	push   %edi
c0106c68:	56                   	push   %esi
c0106c69:	53                   	push   %ebx
c0106c6a:	83 ec 4c             	sub    $0x4c,%esp
    cprintf("-------------------- BEGIN --------------------\n");
c0106c6d:	c7 04 24 a0 6a 11 c0 	movl   $0xc0116aa0,(%esp)
c0106c74:	e8 ec 96 ff ff       	call   c0100365 <cprintf>
    size_t left, right = 0, perm;
c0106c79:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0106c80:	e9 fa 00 00 00       	jmp    c0106d7f <print_pgdir+0x11b>
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0106c85:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106c88:	89 04 24             	mov    %eax,(%esp)
c0106c8b:	e8 d0 fe ff ff       	call   c0106b60 <perm2str>
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
c0106c90:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0106c93:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106c96:	29 d1                	sub    %edx,%ecx
c0106c98:	89 ca                	mov    %ecx,%edx
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0106c9a:	89 d6                	mov    %edx,%esi
c0106c9c:	c1 e6 16             	shl    $0x16,%esi
c0106c9f:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0106ca2:	89 d3                	mov    %edx,%ebx
c0106ca4:	c1 e3 16             	shl    $0x16,%ebx
c0106ca7:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106caa:	89 d1                	mov    %edx,%ecx
c0106cac:	c1 e1 16             	shl    $0x16,%ecx
c0106caf:	8b 7d dc             	mov    -0x24(%ebp),%edi
c0106cb2:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106cb5:	29 d7                	sub    %edx,%edi
c0106cb7:	89 fa                	mov    %edi,%edx
c0106cb9:	89 44 24 14          	mov    %eax,0x14(%esp)
c0106cbd:	89 74 24 10          	mov    %esi,0x10(%esp)
c0106cc1:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0106cc5:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0106cc9:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106ccd:	c7 04 24 d1 6a 11 c0 	movl   $0xc0116ad1,(%esp)
c0106cd4:	e8 8c 96 ff ff       	call   c0100365 <cprintf>
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
c0106cd9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106cdc:	c1 e0 0a             	shl    $0xa,%eax
c0106cdf:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0106ce2:	eb 54                	jmp    c0106d38 <print_pgdir+0xd4>
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0106ce4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106ce7:	89 04 24             	mov    %eax,(%esp)
c0106cea:	e8 71 fe ff ff       	call   c0106b60 <perm2str>
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
c0106cef:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c0106cf2:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106cf5:	29 d1                	sub    %edx,%ecx
c0106cf7:	89 ca                	mov    %ecx,%edx
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0106cf9:	89 d6                	mov    %edx,%esi
c0106cfb:	c1 e6 0c             	shl    $0xc,%esi
c0106cfe:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0106d01:	89 d3                	mov    %edx,%ebx
c0106d03:	c1 e3 0c             	shl    $0xc,%ebx
c0106d06:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106d09:	c1 e2 0c             	shl    $0xc,%edx
c0106d0c:	89 d1                	mov    %edx,%ecx
c0106d0e:	8b 7d d4             	mov    -0x2c(%ebp),%edi
c0106d11:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106d14:	29 d7                	sub    %edx,%edi
c0106d16:	89 fa                	mov    %edi,%edx
c0106d18:	89 44 24 14          	mov    %eax,0x14(%esp)
c0106d1c:	89 74 24 10          	mov    %esi,0x10(%esp)
c0106d20:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0106d24:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0106d28:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106d2c:	c7 04 24 f0 6a 11 c0 	movl   $0xc0116af0,(%esp)
c0106d33:	e8 2d 96 ff ff       	call   c0100365 <cprintf>
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0106d38:	ba 00 00 c0 fa       	mov    $0xfac00000,%edx
c0106d3d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0106d40:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0106d43:	89 ce                	mov    %ecx,%esi
c0106d45:	c1 e6 0a             	shl    $0xa,%esi
c0106d48:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0106d4b:	89 cb                	mov    %ecx,%ebx
c0106d4d:	c1 e3 0a             	shl    $0xa,%ebx
c0106d50:	8d 4d d4             	lea    -0x2c(%ebp),%ecx
c0106d53:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c0106d57:	8d 4d d8             	lea    -0x28(%ebp),%ecx
c0106d5a:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0106d5e:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106d62:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106d66:	89 74 24 04          	mov    %esi,0x4(%esp)
c0106d6a:	89 1c 24             	mov    %ebx,(%esp)
c0106d6d:	e8 3c fe ff ff       	call   c0106bae <get_pgtable_items>
c0106d72:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106d75:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0106d79:	0f 85 65 ff ff ff    	jne    c0106ce4 <print_pgdir+0x80>
//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0106d7f:	ba 00 b0 fe fa       	mov    $0xfafeb000,%edx
c0106d84:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106d87:	8d 4d dc             	lea    -0x24(%ebp),%ecx
c0106d8a:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c0106d8e:	8d 4d e0             	lea    -0x20(%ebp),%ecx
c0106d91:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0106d95:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106d99:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106d9d:	c7 44 24 04 00 04 00 	movl   $0x400,0x4(%esp)
c0106da4:	00 
c0106da5:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0106dac:	e8 fd fd ff ff       	call   c0106bae <get_pgtable_items>
c0106db1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106db4:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0106db8:	0f 85 c7 fe ff ff    	jne    c0106c85 <print_pgdir+0x21>
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
        }
    }
    cprintf("--------------------- END ---------------------\n");
c0106dbe:	c7 04 24 14 6b 11 c0 	movl   $0xc0116b14,(%esp)
c0106dc5:	e8 9b 95 ff ff       	call   c0100365 <cprintf>
}
c0106dca:	83 c4 4c             	add    $0x4c,%esp
c0106dcd:	5b                   	pop    %ebx
c0106dce:	5e                   	pop    %esi
c0106dcf:	5f                   	pop    %edi
c0106dd0:	5d                   	pop    %ebp
c0106dd1:	c3                   	ret    

c0106dd2 <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c0106dd2:	55                   	push   %ebp
c0106dd3:	89 e5                	mov    %esp,%ebp
c0106dd5:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0106dd8:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ddb:	c1 e8 0c             	shr    $0xc,%eax
c0106dde:	89 c2                	mov    %eax,%edx
c0106de0:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c0106de5:	39 c2                	cmp    %eax,%edx
c0106de7:	72 1c                	jb     c0106e05 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0106de9:	c7 44 24 08 48 6b 11 	movl   $0xc0116b48,0x8(%esp)
c0106df0:	c0 
c0106df1:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0106df8:	00 
c0106df9:	c7 04 24 67 6b 11 c0 	movl   $0xc0116b67,(%esp)
c0106e00:	e8 c3 a0 ff ff       	call   c0100ec8 <__panic>
    }
    return &pages[PPN(pa)];
c0106e05:	8b 0d 28 30 15 c0    	mov    0xc0153028,%ecx
c0106e0b:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e0e:	c1 e8 0c             	shr    $0xc,%eax
c0106e11:	89 c2                	mov    %eax,%edx
c0106e13:	89 d0                	mov    %edx,%eax
c0106e15:	c1 e0 03             	shl    $0x3,%eax
c0106e18:	01 d0                	add    %edx,%eax
c0106e1a:	c1 e0 02             	shl    $0x2,%eax
c0106e1d:	01 c8                	add    %ecx,%eax
}
c0106e1f:	c9                   	leave  
c0106e20:	c3                   	ret    

c0106e21 <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c0106e21:	55                   	push   %ebp
c0106e22:	89 e5                	mov    %esp,%ebp
c0106e24:	83 ec 18             	sub    $0x18,%esp
    if (!(pte & PTE_P)) {
c0106e27:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e2a:	83 e0 01             	and    $0x1,%eax
c0106e2d:	85 c0                	test   %eax,%eax
c0106e2f:	75 1c                	jne    c0106e4d <pte2page+0x2c>
        panic("pte2page called with invalid pte");
c0106e31:	c7 44 24 08 78 6b 11 	movl   $0xc0116b78,0x8(%esp)
c0106e38:	c0 
c0106e39:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c0106e40:	00 
c0106e41:	c7 04 24 67 6b 11 c0 	movl   $0xc0116b67,(%esp)
c0106e48:	e8 7b a0 ff ff       	call   c0100ec8 <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c0106e4d:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e50:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106e55:	89 04 24             	mov    %eax,(%esp)
c0106e58:	e8 75 ff ff ff       	call   c0106dd2 <pa2page>
}
c0106e5d:	c9                   	leave  
c0106e5e:	c3                   	ret    

c0106e5f <swap_init>:

static void check_swap(void);

int
swap_init(void)
{
c0106e5f:	55                   	push   %ebp
c0106e60:	89 e5                	mov    %esp,%ebp
c0106e62:	83 ec 28             	sub    $0x28,%esp
     swapfs_init();
c0106e65:	e8 5e 80 00 00       	call   c010eec8 <swapfs_init>

     if (!(1024 <= max_swap_offset && max_swap_offset < MAX_SWAP_OFFSET_LIMIT))
c0106e6a:	a1 dc 30 15 c0       	mov    0xc01530dc,%eax
c0106e6f:	3d ff 03 00 00       	cmp    $0x3ff,%eax
c0106e74:	76 0c                	jbe    c0106e82 <swap_init+0x23>
c0106e76:	a1 dc 30 15 c0       	mov    0xc01530dc,%eax
c0106e7b:	3d ff ff ff 00       	cmp    $0xffffff,%eax
c0106e80:	76 25                	jbe    c0106ea7 <swap_init+0x48>
     {
          panic("bad max_swap_offset %08x.\n", max_swap_offset);
c0106e82:	a1 dc 30 15 c0       	mov    0xc01530dc,%eax
c0106e87:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106e8b:	c7 44 24 08 99 6b 11 	movl   $0xc0116b99,0x8(%esp)
c0106e92:	c0 
c0106e93:	c7 44 24 04 27 00 00 	movl   $0x27,0x4(%esp)
c0106e9a:	00 
c0106e9b:	c7 04 24 b4 6b 11 c0 	movl   $0xc0116bb4,(%esp)
c0106ea2:	e8 21 a0 ff ff       	call   c0100ec8 <__panic>
     }
     

     sm = &swap_manager_fifo;
c0106ea7:	c7 05 14 ff 14 c0 60 	movl   $0xc014ea60,0xc014ff14
c0106eae:	ea 14 c0 
     int r = sm->init();
c0106eb1:	a1 14 ff 14 c0       	mov    0xc014ff14,%eax
c0106eb6:	8b 40 04             	mov    0x4(%eax),%eax
c0106eb9:	ff d0                	call   *%eax
c0106ebb:	89 45 f4             	mov    %eax,-0xc(%ebp)
     
     if (r == 0)
c0106ebe:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106ec2:	75 26                	jne    c0106eea <swap_init+0x8b>
     {
          swap_init_ok = 1;
c0106ec4:	c7 05 0c ff 14 c0 01 	movl   $0x1,0xc014ff0c
c0106ecb:	00 00 00 
          cprintf("SWAP: manager = %s\n", sm->name);
c0106ece:	a1 14 ff 14 c0       	mov    0xc014ff14,%eax
c0106ed3:	8b 00                	mov    (%eax),%eax
c0106ed5:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106ed9:	c7 04 24 c3 6b 11 c0 	movl   $0xc0116bc3,(%esp)
c0106ee0:	e8 80 94 ff ff       	call   c0100365 <cprintf>
          check_swap();
c0106ee5:	e8 a4 04 00 00       	call   c010738e <check_swap>
     }

     return r;
c0106eea:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0106eed:	c9                   	leave  
c0106eee:	c3                   	ret    

c0106eef <swap_init_mm>:

int
swap_init_mm(struct mm_struct *mm)
{
c0106eef:	55                   	push   %ebp
c0106ef0:	89 e5                	mov    %esp,%ebp
c0106ef2:	83 ec 18             	sub    $0x18,%esp
     return sm->init_mm(mm);
c0106ef5:	a1 14 ff 14 c0       	mov    0xc014ff14,%eax
c0106efa:	8b 40 08             	mov    0x8(%eax),%eax
c0106efd:	8b 55 08             	mov    0x8(%ebp),%edx
c0106f00:	89 14 24             	mov    %edx,(%esp)
c0106f03:	ff d0                	call   *%eax
}
c0106f05:	c9                   	leave  
c0106f06:	c3                   	ret    

c0106f07 <swap_tick_event>:

int
swap_tick_event(struct mm_struct *mm)
{
c0106f07:	55                   	push   %ebp
c0106f08:	89 e5                	mov    %esp,%ebp
c0106f0a:	83 ec 18             	sub    $0x18,%esp
     return sm->tick_event(mm);
c0106f0d:	a1 14 ff 14 c0       	mov    0xc014ff14,%eax
c0106f12:	8b 40 0c             	mov    0xc(%eax),%eax
c0106f15:	8b 55 08             	mov    0x8(%ebp),%edx
c0106f18:	89 14 24             	mov    %edx,(%esp)
c0106f1b:	ff d0                	call   *%eax
}
c0106f1d:	c9                   	leave  
c0106f1e:	c3                   	ret    

c0106f1f <swap_map_swappable>:

int
swap_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c0106f1f:	55                   	push   %ebp
c0106f20:	89 e5                	mov    %esp,%ebp
c0106f22:	83 ec 18             	sub    $0x18,%esp
     return sm->map_swappable(mm, addr, page, swap_in);
c0106f25:	a1 14 ff 14 c0       	mov    0xc014ff14,%eax
c0106f2a:	8b 40 10             	mov    0x10(%eax),%eax
c0106f2d:	8b 55 14             	mov    0x14(%ebp),%edx
c0106f30:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106f34:	8b 55 10             	mov    0x10(%ebp),%edx
c0106f37:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106f3b:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106f3e:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106f42:	8b 55 08             	mov    0x8(%ebp),%edx
c0106f45:	89 14 24             	mov    %edx,(%esp)
c0106f48:	ff d0                	call   *%eax
}
c0106f4a:	c9                   	leave  
c0106f4b:	c3                   	ret    

c0106f4c <swap_set_unswappable>:

int
swap_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0106f4c:	55                   	push   %ebp
c0106f4d:	89 e5                	mov    %esp,%ebp
c0106f4f:	83 ec 18             	sub    $0x18,%esp
     return sm->set_unswappable(mm, addr);
c0106f52:	a1 14 ff 14 c0       	mov    0xc014ff14,%eax
c0106f57:	8b 40 14             	mov    0x14(%eax),%eax
c0106f5a:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106f5d:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106f61:	8b 55 08             	mov    0x8(%ebp),%edx
c0106f64:	89 14 24             	mov    %edx,(%esp)
c0106f67:	ff d0                	call   *%eax
}
c0106f69:	c9                   	leave  
c0106f6a:	c3                   	ret    

c0106f6b <swap_out>:

volatile unsigned int swap_out_num=0;

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
c0106f6b:	55                   	push   %ebp
c0106f6c:	89 e5                	mov    %esp,%ebp
c0106f6e:	83 ec 38             	sub    $0x38,%esp
     int i;
     for (i = 0; i != n; ++ i)
c0106f71:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0106f78:	e9 5a 01 00 00       	jmp    c01070d7 <swap_out+0x16c>
     {
          uintptr_t v;
          //struct Page **ptr_page=NULL;
          struct Page *page;
          // cprintf("i %d, SWAP: call swap_out_victim\n",i);
          int r = sm->swap_out_victim(mm, &page, in_tick);
c0106f7d:	a1 14 ff 14 c0       	mov    0xc014ff14,%eax
c0106f82:	8b 40 18             	mov    0x18(%eax),%eax
c0106f85:	8b 55 10             	mov    0x10(%ebp),%edx
c0106f88:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106f8c:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c0106f8f:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106f93:	8b 55 08             	mov    0x8(%ebp),%edx
c0106f96:	89 14 24             	mov    %edx,(%esp)
c0106f99:	ff d0                	call   *%eax
c0106f9b:	89 45 f0             	mov    %eax,-0x10(%ebp)
          if (r != 0) {
c0106f9e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106fa2:	74 18                	je     c0106fbc <swap_out+0x51>
                    cprintf("i %d, swap_out: call swap_out_victim failed\n",i);
c0106fa4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106fa7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106fab:	c7 04 24 d8 6b 11 c0 	movl   $0xc0116bd8,(%esp)
c0106fb2:	e8 ae 93 ff ff       	call   c0100365 <cprintf>
c0106fb7:	e9 27 01 00 00       	jmp    c01070e3 <swap_out+0x178>
          }          
          //assert(!PageReserved(page));

          //cprintf("SWAP: choose victim page 0x%08x\n", page);
          
          v=page->pra_vaddr; 
c0106fbc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106fbf:	8b 40 20             	mov    0x20(%eax),%eax
c0106fc2:	89 45 ec             	mov    %eax,-0x14(%ebp)
          pte_t *ptep = get_pte(mm->pgdir, v, 0);
c0106fc5:	8b 45 08             	mov    0x8(%ebp),%eax
c0106fc8:	8b 40 0c             	mov    0xc(%eax),%eax
c0106fcb:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106fd2:	00 
c0106fd3:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0106fd6:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106fda:	89 04 24             	mov    %eax,(%esp)
c0106fdd:	e8 f9 e8 ff ff       	call   c01058db <get_pte>
c0106fe2:	89 45 e8             	mov    %eax,-0x18(%ebp)
          assert((*ptep & PTE_P) != 0);
c0106fe5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106fe8:	8b 00                	mov    (%eax),%eax
c0106fea:	83 e0 01             	and    $0x1,%eax
c0106fed:	85 c0                	test   %eax,%eax
c0106fef:	75 24                	jne    c0107015 <swap_out+0xaa>
c0106ff1:	c7 44 24 0c 05 6c 11 	movl   $0xc0116c05,0xc(%esp)
c0106ff8:	c0 
c0106ff9:	c7 44 24 08 1a 6c 11 	movl   $0xc0116c1a,0x8(%esp)
c0107000:	c0 
c0107001:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
c0107008:	00 
c0107009:	c7 04 24 b4 6b 11 c0 	movl   $0xc0116bb4,(%esp)
c0107010:	e8 b3 9e ff ff       	call   c0100ec8 <__panic>

          if (swapfs_write( (page->pra_vaddr/PGSIZE+1)<<8, page) != 0) {
c0107015:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107018:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010701b:	8b 52 20             	mov    0x20(%edx),%edx
c010701e:	c1 ea 0c             	shr    $0xc,%edx
c0107021:	83 c2 01             	add    $0x1,%edx
c0107024:	c1 e2 08             	shl    $0x8,%edx
c0107027:	89 44 24 04          	mov    %eax,0x4(%esp)
c010702b:	89 14 24             	mov    %edx,(%esp)
c010702e:	e8 4f 7f 00 00       	call   c010ef82 <swapfs_write>
c0107033:	85 c0                	test   %eax,%eax
c0107035:	74 34                	je     c010706b <swap_out+0x100>
                    cprintf("SWAP: failed to save\n");
c0107037:	c7 04 24 2f 6c 11 c0 	movl   $0xc0116c2f,(%esp)
c010703e:	e8 22 93 ff ff       	call   c0100365 <cprintf>
                    sm->map_swappable(mm, v, page, 0);
c0107043:	a1 14 ff 14 c0       	mov    0xc014ff14,%eax
c0107048:	8b 40 10             	mov    0x10(%eax),%eax
c010704b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010704e:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0107055:	00 
c0107056:	89 54 24 08          	mov    %edx,0x8(%esp)
c010705a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010705d:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107061:	8b 55 08             	mov    0x8(%ebp),%edx
c0107064:	89 14 24             	mov    %edx,(%esp)
c0107067:	ff d0                	call   *%eax
c0107069:	eb 68                	jmp    c01070d3 <swap_out+0x168>
                    continue;
          }
          else {
                    cprintf("swap_out: i %d, store page in vaddr 0x%x to disk swap entry %d\n", i, v, page->pra_vaddr/PGSIZE+1);
c010706b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010706e:	8b 40 20             	mov    0x20(%eax),%eax
c0107071:	c1 e8 0c             	shr    $0xc,%eax
c0107074:	83 c0 01             	add    $0x1,%eax
c0107077:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010707b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010707e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0107082:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107085:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107089:	c7 04 24 48 6c 11 c0 	movl   $0xc0116c48,(%esp)
c0107090:	e8 d0 92 ff ff       	call   c0100365 <cprintf>
                    *ptep = (page->pra_vaddr/PGSIZE+1)<<8;
c0107095:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107098:	8b 40 20             	mov    0x20(%eax),%eax
c010709b:	c1 e8 0c             	shr    $0xc,%eax
c010709e:	83 c0 01             	add    $0x1,%eax
c01070a1:	c1 e0 08             	shl    $0x8,%eax
c01070a4:	89 c2                	mov    %eax,%edx
c01070a6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01070a9:	89 10                	mov    %edx,(%eax)
                    free_page(page);
c01070ab:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01070ae:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01070b5:	00 
c01070b6:	89 04 24             	mov    %eax,(%esp)
c01070b9:	e8 11 e1 ff ff       	call   c01051cf <free_pages>
          }
          
          tlb_invalidate(mm->pgdir, v);
c01070be:	8b 45 08             	mov    0x8(%ebp),%eax
c01070c1:	8b 40 0c             	mov    0xc(%eax),%eax
c01070c4:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01070c7:	89 54 24 04          	mov    %edx,0x4(%esp)
c01070cb:	89 04 24             	mov    %eax,(%esp)
c01070ce:	e8 15 ef ff ff       	call   c0105fe8 <tlb_invalidate>

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
     int i;
     for (i = 0; i != n; ++ i)
c01070d3:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01070d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01070da:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01070dd:	0f 85 9a fe ff ff    	jne    c0106f7d <swap_out+0x12>
                    free_page(page);
          }
          
          tlb_invalidate(mm->pgdir, v);
     }
     return i;
c01070e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01070e6:	c9                   	leave  
c01070e7:	c3                   	ret    

c01070e8 <swap_in>:

int
swap_in(struct mm_struct *mm, uintptr_t addr, struct Page **ptr_result)
{
c01070e8:	55                   	push   %ebp
c01070e9:	89 e5                	mov    %esp,%ebp
c01070eb:	83 ec 28             	sub    $0x28,%esp
     struct Page *result = alloc_page();
c01070ee:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01070f5:	e8 6a e0 ff ff       	call   c0105164 <alloc_pages>
c01070fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
     assert(result!=NULL);
c01070fd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107101:	75 24                	jne    c0107127 <swap_in+0x3f>
c0107103:	c7 44 24 0c 88 6c 11 	movl   $0xc0116c88,0xc(%esp)
c010710a:	c0 
c010710b:	c7 44 24 08 1a 6c 11 	movl   $0xc0116c1a,0x8(%esp)
c0107112:	c0 
c0107113:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
c010711a:	00 
c010711b:	c7 04 24 b4 6b 11 c0 	movl   $0xc0116bb4,(%esp)
c0107122:	e8 a1 9d ff ff       	call   c0100ec8 <__panic>

     pte_t *ptep = get_pte(mm->pgdir, addr, 0);
c0107127:	8b 45 08             	mov    0x8(%ebp),%eax
c010712a:	8b 40 0c             	mov    0xc(%eax),%eax
c010712d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0107134:	00 
c0107135:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107138:	89 54 24 04          	mov    %edx,0x4(%esp)
c010713c:	89 04 24             	mov    %eax,(%esp)
c010713f:	e8 97 e7 ff ff       	call   c01058db <get_pte>
c0107144:	89 45 f0             	mov    %eax,-0x10(%ebp)
     // cprintf("SWAP: load ptep %x swap entry %d to vaddr 0x%08x, page %x, No %d\n", ptep, (*ptep)>>8, addr, result, (result-pages));
    
     int r;
     if ((r = swapfs_read((*ptep), result)) != 0)
c0107147:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010714a:	8b 00                	mov    (%eax),%eax
c010714c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010714f:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107153:	89 04 24             	mov    %eax,(%esp)
c0107156:	e8 b5 7d 00 00       	call   c010ef10 <swapfs_read>
c010715b:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010715e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0107162:	74 2a                	je     c010718e <swap_in+0xa6>
     {
        assert(r!=0);
c0107164:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0107168:	75 24                	jne    c010718e <swap_in+0xa6>
c010716a:	c7 44 24 0c 95 6c 11 	movl   $0xc0116c95,0xc(%esp)
c0107171:	c0 
c0107172:	c7 44 24 08 1a 6c 11 	movl   $0xc0116c1a,0x8(%esp)
c0107179:	c0 
c010717a:	c7 44 24 04 85 00 00 	movl   $0x85,0x4(%esp)
c0107181:	00 
c0107182:	c7 04 24 b4 6b 11 c0 	movl   $0xc0116bb4,(%esp)
c0107189:	e8 3a 9d ff ff       	call   c0100ec8 <__panic>
     }
     cprintf("swap_in: load disk swap entry %d with swap_page in vadr 0x%x\n", (*ptep)>>8, addr);
c010718e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107191:	8b 00                	mov    (%eax),%eax
c0107193:	c1 e8 08             	shr    $0x8,%eax
c0107196:	89 c2                	mov    %eax,%edx
c0107198:	8b 45 0c             	mov    0xc(%ebp),%eax
c010719b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010719f:	89 54 24 04          	mov    %edx,0x4(%esp)
c01071a3:	c7 04 24 9c 6c 11 c0 	movl   $0xc0116c9c,(%esp)
c01071aa:	e8 b6 91 ff ff       	call   c0100365 <cprintf>
     *ptr_result=result;
c01071af:	8b 45 10             	mov    0x10(%ebp),%eax
c01071b2:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01071b5:	89 10                	mov    %edx,(%eax)
     return 0;
c01071b7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01071bc:	c9                   	leave  
c01071bd:	c3                   	ret    

c01071be <check_content_set>:



static inline void
check_content_set(void)
{
c01071be:	55                   	push   %ebp
c01071bf:	89 e5                	mov    %esp,%ebp
c01071c1:	83 ec 18             	sub    $0x18,%esp
     *(unsigned char *)0x1000 = 0x0a;
c01071c4:	b8 00 10 00 00       	mov    $0x1000,%eax
c01071c9:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c01071cc:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c01071d1:	83 f8 01             	cmp    $0x1,%eax
c01071d4:	74 24                	je     c01071fa <check_content_set+0x3c>
c01071d6:	c7 44 24 0c da 6c 11 	movl   $0xc0116cda,0xc(%esp)
c01071dd:	c0 
c01071de:	c7 44 24 08 1a 6c 11 	movl   $0xc0116c1a,0x8(%esp)
c01071e5:	c0 
c01071e6:	c7 44 24 04 92 00 00 	movl   $0x92,0x4(%esp)
c01071ed:	00 
c01071ee:	c7 04 24 b4 6b 11 c0 	movl   $0xc0116bb4,(%esp)
c01071f5:	e8 ce 9c ff ff       	call   c0100ec8 <__panic>
     *(unsigned char *)0x1010 = 0x0a;
c01071fa:	b8 10 10 00 00       	mov    $0x1010,%eax
c01071ff:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c0107202:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107207:	83 f8 01             	cmp    $0x1,%eax
c010720a:	74 24                	je     c0107230 <check_content_set+0x72>
c010720c:	c7 44 24 0c da 6c 11 	movl   $0xc0116cda,0xc(%esp)
c0107213:	c0 
c0107214:	c7 44 24 08 1a 6c 11 	movl   $0xc0116c1a,0x8(%esp)
c010721b:	c0 
c010721c:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
c0107223:	00 
c0107224:	c7 04 24 b4 6b 11 c0 	movl   $0xc0116bb4,(%esp)
c010722b:	e8 98 9c ff ff       	call   c0100ec8 <__panic>
     *(unsigned char *)0x2000 = 0x0b;
c0107230:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107235:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c0107238:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c010723d:	83 f8 02             	cmp    $0x2,%eax
c0107240:	74 24                	je     c0107266 <check_content_set+0xa8>
c0107242:	c7 44 24 0c e9 6c 11 	movl   $0xc0116ce9,0xc(%esp)
c0107249:	c0 
c010724a:	c7 44 24 08 1a 6c 11 	movl   $0xc0116c1a,0x8(%esp)
c0107251:	c0 
c0107252:	c7 44 24 04 96 00 00 	movl   $0x96,0x4(%esp)
c0107259:	00 
c010725a:	c7 04 24 b4 6b 11 c0 	movl   $0xc0116bb4,(%esp)
c0107261:	e8 62 9c ff ff       	call   c0100ec8 <__panic>
     *(unsigned char *)0x2010 = 0x0b;
c0107266:	b8 10 20 00 00       	mov    $0x2010,%eax
c010726b:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c010726e:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107273:	83 f8 02             	cmp    $0x2,%eax
c0107276:	74 24                	je     c010729c <check_content_set+0xde>
c0107278:	c7 44 24 0c e9 6c 11 	movl   $0xc0116ce9,0xc(%esp)
c010727f:	c0 
c0107280:	c7 44 24 08 1a 6c 11 	movl   $0xc0116c1a,0x8(%esp)
c0107287:	c0 
c0107288:	c7 44 24 04 98 00 00 	movl   $0x98,0x4(%esp)
c010728f:	00 
c0107290:	c7 04 24 b4 6b 11 c0 	movl   $0xc0116bb4,(%esp)
c0107297:	e8 2c 9c ff ff       	call   c0100ec8 <__panic>
     *(unsigned char *)0x3000 = 0x0c;
c010729c:	b8 00 30 00 00       	mov    $0x3000,%eax
c01072a1:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c01072a4:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c01072a9:	83 f8 03             	cmp    $0x3,%eax
c01072ac:	74 24                	je     c01072d2 <check_content_set+0x114>
c01072ae:	c7 44 24 0c f8 6c 11 	movl   $0xc0116cf8,0xc(%esp)
c01072b5:	c0 
c01072b6:	c7 44 24 08 1a 6c 11 	movl   $0xc0116c1a,0x8(%esp)
c01072bd:	c0 
c01072be:	c7 44 24 04 9a 00 00 	movl   $0x9a,0x4(%esp)
c01072c5:	00 
c01072c6:	c7 04 24 b4 6b 11 c0 	movl   $0xc0116bb4,(%esp)
c01072cd:	e8 f6 9b ff ff       	call   c0100ec8 <__panic>
     *(unsigned char *)0x3010 = 0x0c;
c01072d2:	b8 10 30 00 00       	mov    $0x3010,%eax
c01072d7:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c01072da:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c01072df:	83 f8 03             	cmp    $0x3,%eax
c01072e2:	74 24                	je     c0107308 <check_content_set+0x14a>
c01072e4:	c7 44 24 0c f8 6c 11 	movl   $0xc0116cf8,0xc(%esp)
c01072eb:	c0 
c01072ec:	c7 44 24 08 1a 6c 11 	movl   $0xc0116c1a,0x8(%esp)
c01072f3:	c0 
c01072f4:	c7 44 24 04 9c 00 00 	movl   $0x9c,0x4(%esp)
c01072fb:	00 
c01072fc:	c7 04 24 b4 6b 11 c0 	movl   $0xc0116bb4,(%esp)
c0107303:	e8 c0 9b ff ff       	call   c0100ec8 <__panic>
     *(unsigned char *)0x4000 = 0x0d;
c0107308:	b8 00 40 00 00       	mov    $0x4000,%eax
c010730d:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c0107310:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107315:	83 f8 04             	cmp    $0x4,%eax
c0107318:	74 24                	je     c010733e <check_content_set+0x180>
c010731a:	c7 44 24 0c 07 6d 11 	movl   $0xc0116d07,0xc(%esp)
c0107321:	c0 
c0107322:	c7 44 24 08 1a 6c 11 	movl   $0xc0116c1a,0x8(%esp)
c0107329:	c0 
c010732a:	c7 44 24 04 9e 00 00 	movl   $0x9e,0x4(%esp)
c0107331:	00 
c0107332:	c7 04 24 b4 6b 11 c0 	movl   $0xc0116bb4,(%esp)
c0107339:	e8 8a 9b ff ff       	call   c0100ec8 <__panic>
     *(unsigned char *)0x4010 = 0x0d;
c010733e:	b8 10 40 00 00       	mov    $0x4010,%eax
c0107343:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c0107346:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c010734b:	83 f8 04             	cmp    $0x4,%eax
c010734e:	74 24                	je     c0107374 <check_content_set+0x1b6>
c0107350:	c7 44 24 0c 07 6d 11 	movl   $0xc0116d07,0xc(%esp)
c0107357:	c0 
c0107358:	c7 44 24 08 1a 6c 11 	movl   $0xc0116c1a,0x8(%esp)
c010735f:	c0 
c0107360:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c0107367:	00 
c0107368:	c7 04 24 b4 6b 11 c0 	movl   $0xc0116bb4,(%esp)
c010736f:	e8 54 9b ff ff       	call   c0100ec8 <__panic>
}
c0107374:	c9                   	leave  
c0107375:	c3                   	ret    

c0107376 <check_content_access>:

static inline int
check_content_access(void)
{
c0107376:	55                   	push   %ebp
c0107377:	89 e5                	mov    %esp,%ebp
c0107379:	83 ec 18             	sub    $0x18,%esp
    int ret = sm->check_swap();
c010737c:	a1 14 ff 14 c0       	mov    0xc014ff14,%eax
c0107381:	8b 40 1c             	mov    0x1c(%eax),%eax
c0107384:	ff d0                	call   *%eax
c0107386:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return ret;
c0107389:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010738c:	c9                   	leave  
c010738d:	c3                   	ret    

c010738e <check_swap>:
#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
check_swap(void)
{
c010738e:	55                   	push   %ebp
c010738f:	89 e5                	mov    %esp,%ebp
c0107391:	53                   	push   %ebx
c0107392:	83 ec 74             	sub    $0x74,%esp
    //backup mem env
     int ret, count = 0, total = 0, i;
c0107395:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010739c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
     list_entry_t *le = &free_list;
c01073a3:	c7 45 e8 14 30 15 c0 	movl   $0xc0153014,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c01073aa:	eb 6b                	jmp    c0107417 <check_swap+0x89>
        struct Page *p = le2page(le, page_link);
c01073ac:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01073af:	83 e8 10             	sub    $0x10,%eax
c01073b2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        assert(PageProperty(p));
c01073b5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01073b8:	83 c0 04             	add    $0x4,%eax
c01073bb:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
c01073c2:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01073c5:	8b 45 c0             	mov    -0x40(%ebp),%eax
c01073c8:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c01073cb:	0f a3 10             	bt     %edx,(%eax)
c01073ce:	19 c0                	sbb    %eax,%eax
c01073d0:	89 45 bc             	mov    %eax,-0x44(%ebp)
    return oldbit != 0;
c01073d3:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c01073d7:	0f 95 c0             	setne  %al
c01073da:	0f b6 c0             	movzbl %al,%eax
c01073dd:	85 c0                	test   %eax,%eax
c01073df:	75 24                	jne    c0107405 <check_swap+0x77>
c01073e1:	c7 44 24 0c 16 6d 11 	movl   $0xc0116d16,0xc(%esp)
c01073e8:	c0 
c01073e9:	c7 44 24 08 1a 6c 11 	movl   $0xc0116c1a,0x8(%esp)
c01073f0:	c0 
c01073f1:	c7 44 24 04 bb 00 00 	movl   $0xbb,0x4(%esp)
c01073f8:	00 
c01073f9:	c7 04 24 b4 6b 11 c0 	movl   $0xc0116bb4,(%esp)
c0107400:	e8 c3 9a ff ff       	call   c0100ec8 <__panic>
        count ++, total += p->property;
c0107405:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0107409:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010740c:	8b 50 08             	mov    0x8(%eax),%edx
c010740f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107412:	01 d0                	add    %edx,%eax
c0107414:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107417:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010741a:	89 45 b8             	mov    %eax,-0x48(%ebp)
c010741d:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0107420:	8b 40 04             	mov    0x4(%eax),%eax
check_swap(void)
{
    //backup mem env
     int ret, count = 0, total = 0, i;
     list_entry_t *le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c0107423:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0107426:	81 7d e8 14 30 15 c0 	cmpl   $0xc0153014,-0x18(%ebp)
c010742d:	0f 85 79 ff ff ff    	jne    c01073ac <check_swap+0x1e>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
     }
     assert(total == nr_free_pages());
c0107433:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c0107436:	e8 c6 dd ff ff       	call   c0105201 <nr_free_pages>
c010743b:	39 c3                	cmp    %eax,%ebx
c010743d:	74 24                	je     c0107463 <check_swap+0xd5>
c010743f:	c7 44 24 0c 26 6d 11 	movl   $0xc0116d26,0xc(%esp)
c0107446:	c0 
c0107447:	c7 44 24 08 1a 6c 11 	movl   $0xc0116c1a,0x8(%esp)
c010744e:	c0 
c010744f:	c7 44 24 04 be 00 00 	movl   $0xbe,0x4(%esp)
c0107456:	00 
c0107457:	c7 04 24 b4 6b 11 c0 	movl   $0xc0116bb4,(%esp)
c010745e:	e8 65 9a ff ff       	call   c0100ec8 <__panic>
     cprintf("BEGIN check_swap: count %d, total %d\n",count,total);
c0107463:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107466:	89 44 24 08          	mov    %eax,0x8(%esp)
c010746a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010746d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107471:	c7 04 24 40 6d 11 c0 	movl   $0xc0116d40,(%esp)
c0107478:	e8 e8 8e ff ff       	call   c0100365 <cprintf>
     
     //now we set the phy pages env     
     struct mm_struct *mm = mm_create();
c010747d:	e8 a4 0a 00 00       	call   c0107f26 <mm_create>
c0107482:	89 45 e0             	mov    %eax,-0x20(%ebp)
     assert(mm != NULL);
c0107485:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0107489:	75 24                	jne    c01074af <check_swap+0x121>
c010748b:	c7 44 24 0c 66 6d 11 	movl   $0xc0116d66,0xc(%esp)
c0107492:	c0 
c0107493:	c7 44 24 08 1a 6c 11 	movl   $0xc0116c1a,0x8(%esp)
c010749a:	c0 
c010749b:	c7 44 24 04 c3 00 00 	movl   $0xc3,0x4(%esp)
c01074a2:	00 
c01074a3:	c7 04 24 b4 6b 11 c0 	movl   $0xc0116bb4,(%esp)
c01074aa:	e8 19 9a ff ff       	call   c0100ec8 <__panic>

     extern struct mm_struct *check_mm_struct;
     assert(check_mm_struct == NULL);
c01074af:	a1 0c 31 15 c0       	mov    0xc015310c,%eax
c01074b4:	85 c0                	test   %eax,%eax
c01074b6:	74 24                	je     c01074dc <check_swap+0x14e>
c01074b8:	c7 44 24 0c 71 6d 11 	movl   $0xc0116d71,0xc(%esp)
c01074bf:	c0 
c01074c0:	c7 44 24 08 1a 6c 11 	movl   $0xc0116c1a,0x8(%esp)
c01074c7:	c0 
c01074c8:	c7 44 24 04 c6 00 00 	movl   $0xc6,0x4(%esp)
c01074cf:	00 
c01074d0:	c7 04 24 b4 6b 11 c0 	movl   $0xc0116bb4,(%esp)
c01074d7:	e8 ec 99 ff ff       	call   c0100ec8 <__panic>

     check_mm_struct = mm;
c01074dc:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01074df:	a3 0c 31 15 c0       	mov    %eax,0xc015310c

     pde_t *pgdir = mm->pgdir = boot_pgdir;
c01074e4:	8b 15 84 fe 14 c0    	mov    0xc014fe84,%edx
c01074ea:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01074ed:	89 50 0c             	mov    %edx,0xc(%eax)
c01074f0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01074f3:	8b 40 0c             	mov    0xc(%eax),%eax
c01074f6:	89 45 dc             	mov    %eax,-0x24(%ebp)
     assert(pgdir[0] == 0);
c01074f9:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01074fc:	8b 00                	mov    (%eax),%eax
c01074fe:	85 c0                	test   %eax,%eax
c0107500:	74 24                	je     c0107526 <check_swap+0x198>
c0107502:	c7 44 24 0c 89 6d 11 	movl   $0xc0116d89,0xc(%esp)
c0107509:	c0 
c010750a:	c7 44 24 08 1a 6c 11 	movl   $0xc0116c1a,0x8(%esp)
c0107511:	c0 
c0107512:	c7 44 24 04 cb 00 00 	movl   $0xcb,0x4(%esp)
c0107519:	00 
c010751a:	c7 04 24 b4 6b 11 c0 	movl   $0xc0116bb4,(%esp)
c0107521:	e8 a2 99 ff ff       	call   c0100ec8 <__panic>

     struct vma_struct *vma = vma_create(BEING_CHECK_VALID_VADDR, CHECK_VALID_VADDR, VM_WRITE | VM_READ);
c0107526:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
c010752d:	00 
c010752e:	c7 44 24 04 00 60 00 	movl   $0x6000,0x4(%esp)
c0107535:	00 
c0107536:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c010753d:	e8 89 0a 00 00       	call   c0107fcb <vma_create>
c0107542:	89 45 d8             	mov    %eax,-0x28(%ebp)
     assert(vma != NULL);
c0107545:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0107549:	75 24                	jne    c010756f <check_swap+0x1e1>
c010754b:	c7 44 24 0c 97 6d 11 	movl   $0xc0116d97,0xc(%esp)
c0107552:	c0 
c0107553:	c7 44 24 08 1a 6c 11 	movl   $0xc0116c1a,0x8(%esp)
c010755a:	c0 
c010755b:	c7 44 24 04 ce 00 00 	movl   $0xce,0x4(%esp)
c0107562:	00 
c0107563:	c7 04 24 b4 6b 11 c0 	movl   $0xc0116bb4,(%esp)
c010756a:	e8 59 99 ff ff       	call   c0100ec8 <__panic>

     insert_vma_struct(mm, vma);
c010756f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0107572:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107576:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107579:	89 04 24             	mov    %eax,(%esp)
c010757c:	e8 da 0b 00 00       	call   c010815b <insert_vma_struct>

     //setup the temp Page Table vaddr 0~4MB
     cprintf("setup Page Table for vaddr 0X1000, so alloc a page\n");
c0107581:	c7 04 24 a4 6d 11 c0 	movl   $0xc0116da4,(%esp)
c0107588:	e8 d8 8d ff ff       	call   c0100365 <cprintf>
     pte_t *temp_ptep=NULL;
c010758d:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
c0107594:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107597:	8b 40 0c             	mov    0xc(%eax),%eax
c010759a:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c01075a1:	00 
c01075a2:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c01075a9:	00 
c01075aa:	89 04 24             	mov    %eax,(%esp)
c01075ad:	e8 29 e3 ff ff       	call   c01058db <get_pte>
c01075b2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
     assert(temp_ptep!= NULL);
c01075b5:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c01075b9:	75 24                	jne    c01075df <check_swap+0x251>
c01075bb:	c7 44 24 0c d8 6d 11 	movl   $0xc0116dd8,0xc(%esp)
c01075c2:	c0 
c01075c3:	c7 44 24 08 1a 6c 11 	movl   $0xc0116c1a,0x8(%esp)
c01075ca:	c0 
c01075cb:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c01075d2:	00 
c01075d3:	c7 04 24 b4 6b 11 c0 	movl   $0xc0116bb4,(%esp)
c01075da:	e8 e9 98 ff ff       	call   c0100ec8 <__panic>
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
c01075df:	c7 04 24 ec 6d 11 c0 	movl   $0xc0116dec,(%esp)
c01075e6:	e8 7a 8d ff ff       	call   c0100365 <cprintf>
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01075eb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01075f2:	e9 a3 00 00 00       	jmp    c010769a <check_swap+0x30c>
          check_rp[i] = alloc_page();
c01075f7:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01075fe:	e8 61 db ff ff       	call   c0105164 <alloc_pages>
c0107603:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107606:	89 04 95 40 30 15 c0 	mov    %eax,-0x3feacfc0(,%edx,4)
          assert(check_rp[i] != NULL );
c010760d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107610:	8b 04 85 40 30 15 c0 	mov    -0x3feacfc0(,%eax,4),%eax
c0107617:	85 c0                	test   %eax,%eax
c0107619:	75 24                	jne    c010763f <check_swap+0x2b1>
c010761b:	c7 44 24 0c 10 6e 11 	movl   $0xc0116e10,0xc(%esp)
c0107622:	c0 
c0107623:	c7 44 24 08 1a 6c 11 	movl   $0xc0116c1a,0x8(%esp)
c010762a:	c0 
c010762b:	c7 44 24 04 db 00 00 	movl   $0xdb,0x4(%esp)
c0107632:	00 
c0107633:	c7 04 24 b4 6b 11 c0 	movl   $0xc0116bb4,(%esp)
c010763a:	e8 89 98 ff ff       	call   c0100ec8 <__panic>
          assert(!PageProperty(check_rp[i]));
c010763f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107642:	8b 04 85 40 30 15 c0 	mov    -0x3feacfc0(,%eax,4),%eax
c0107649:	83 c0 04             	add    $0x4,%eax
c010764c:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%ebp)
c0107653:	89 45 b0             	mov    %eax,-0x50(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0107656:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0107659:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010765c:	0f a3 10             	bt     %edx,(%eax)
c010765f:	19 c0                	sbb    %eax,%eax
c0107661:	89 45 ac             	mov    %eax,-0x54(%ebp)
    return oldbit != 0;
c0107664:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
c0107668:	0f 95 c0             	setne  %al
c010766b:	0f b6 c0             	movzbl %al,%eax
c010766e:	85 c0                	test   %eax,%eax
c0107670:	74 24                	je     c0107696 <check_swap+0x308>
c0107672:	c7 44 24 0c 24 6e 11 	movl   $0xc0116e24,0xc(%esp)
c0107679:	c0 
c010767a:	c7 44 24 08 1a 6c 11 	movl   $0xc0116c1a,0x8(%esp)
c0107681:	c0 
c0107682:	c7 44 24 04 dc 00 00 	movl   $0xdc,0x4(%esp)
c0107689:	00 
c010768a:	c7 04 24 b4 6b 11 c0 	movl   $0xc0116bb4,(%esp)
c0107691:	e8 32 98 ff ff       	call   c0100ec8 <__panic>
     pte_t *temp_ptep=NULL;
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
     assert(temp_ptep!= NULL);
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107696:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c010769a:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c010769e:	0f 8e 53 ff ff ff    	jle    c01075f7 <check_swap+0x269>
          check_rp[i] = alloc_page();
          assert(check_rp[i] != NULL );
          assert(!PageProperty(check_rp[i]));
     }
     list_entry_t free_list_store = free_list;
c01076a4:	a1 14 30 15 c0       	mov    0xc0153014,%eax
c01076a9:	8b 15 18 30 15 c0    	mov    0xc0153018,%edx
c01076af:	89 45 98             	mov    %eax,-0x68(%ebp)
c01076b2:	89 55 9c             	mov    %edx,-0x64(%ebp)
c01076b5:	c7 45 a8 14 30 15 c0 	movl   $0xc0153014,-0x58(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01076bc:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01076bf:	8b 55 a8             	mov    -0x58(%ebp),%edx
c01076c2:	89 50 04             	mov    %edx,0x4(%eax)
c01076c5:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01076c8:	8b 50 04             	mov    0x4(%eax),%edx
c01076cb:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01076ce:	89 10                	mov    %edx,(%eax)
c01076d0:	c7 45 a4 14 30 15 c0 	movl   $0xc0153014,-0x5c(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c01076d7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c01076da:	8b 40 04             	mov    0x4(%eax),%eax
c01076dd:	39 45 a4             	cmp    %eax,-0x5c(%ebp)
c01076e0:	0f 94 c0             	sete   %al
c01076e3:	0f b6 c0             	movzbl %al,%eax
     list_init(&free_list);
     assert(list_empty(&free_list));
c01076e6:	85 c0                	test   %eax,%eax
c01076e8:	75 24                	jne    c010770e <check_swap+0x380>
c01076ea:	c7 44 24 0c 3f 6e 11 	movl   $0xc0116e3f,0xc(%esp)
c01076f1:	c0 
c01076f2:	c7 44 24 08 1a 6c 11 	movl   $0xc0116c1a,0x8(%esp)
c01076f9:	c0 
c01076fa:	c7 44 24 04 e0 00 00 	movl   $0xe0,0x4(%esp)
c0107701:	00 
c0107702:	c7 04 24 b4 6b 11 c0 	movl   $0xc0116bb4,(%esp)
c0107709:	e8 ba 97 ff ff       	call   c0100ec8 <__panic>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
c010770e:	a1 1c 30 15 c0       	mov    0xc015301c,%eax
c0107713:	89 45 d0             	mov    %eax,-0x30(%ebp)
     nr_free = 0;
c0107716:	c7 05 1c 30 15 c0 00 	movl   $0x0,0xc015301c
c010771d:	00 00 00 
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107720:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0107727:	eb 1e                	jmp    c0107747 <check_swap+0x3b9>
        free_pages(check_rp[i],1);
c0107729:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010772c:	8b 04 85 40 30 15 c0 	mov    -0x3feacfc0(,%eax,4),%eax
c0107733:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010773a:	00 
c010773b:	89 04 24             	mov    %eax,(%esp)
c010773e:	e8 8c da ff ff       	call   c01051cf <free_pages>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
     nr_free = 0;
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107743:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0107747:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c010774b:	7e dc                	jle    c0107729 <check_swap+0x39b>
        free_pages(check_rp[i],1);
     }
     assert(nr_free==CHECK_VALID_PHY_PAGE_NUM);
c010774d:	a1 1c 30 15 c0       	mov    0xc015301c,%eax
c0107752:	83 f8 04             	cmp    $0x4,%eax
c0107755:	74 24                	je     c010777b <check_swap+0x3ed>
c0107757:	c7 44 24 0c 58 6e 11 	movl   $0xc0116e58,0xc(%esp)
c010775e:	c0 
c010775f:	c7 44 24 08 1a 6c 11 	movl   $0xc0116c1a,0x8(%esp)
c0107766:	c0 
c0107767:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
c010776e:	00 
c010776f:	c7 04 24 b4 6b 11 c0 	movl   $0xc0116bb4,(%esp)
c0107776:	e8 4d 97 ff ff       	call   c0100ec8 <__panic>
     
     cprintf("set up init env for check_swap begin!\n");
c010777b:	c7 04 24 7c 6e 11 c0 	movl   $0xc0116e7c,(%esp)
c0107782:	e8 de 8b ff ff       	call   c0100365 <cprintf>
     //setup initial vir_page<->phy_page environment for page relpacement algorithm 

     
     pgfault_num=0;
c0107787:	c7 05 18 ff 14 c0 00 	movl   $0x0,0xc014ff18
c010778e:	00 00 00 
     
     check_content_set();
c0107791:	e8 28 fa ff ff       	call   c01071be <check_content_set>
     assert( nr_free == 0);         
c0107796:	a1 1c 30 15 c0       	mov    0xc015301c,%eax
c010779b:	85 c0                	test   %eax,%eax
c010779d:	74 24                	je     c01077c3 <check_swap+0x435>
c010779f:	c7 44 24 0c a3 6e 11 	movl   $0xc0116ea3,0xc(%esp)
c01077a6:	c0 
c01077a7:	c7 44 24 08 1a 6c 11 	movl   $0xc0116c1a,0x8(%esp)
c01077ae:	c0 
c01077af:	c7 44 24 04 f2 00 00 	movl   $0xf2,0x4(%esp)
c01077b6:	00 
c01077b7:	c7 04 24 b4 6b 11 c0 	movl   $0xc0116bb4,(%esp)
c01077be:	e8 05 97 ff ff       	call   c0100ec8 <__panic>
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c01077c3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01077ca:	eb 26                	jmp    c01077f2 <check_swap+0x464>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
c01077cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01077cf:	c7 04 85 60 30 15 c0 	movl   $0xffffffff,-0x3feacfa0(,%eax,4)
c01077d6:	ff ff ff ff 
c01077da:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01077dd:	8b 14 85 60 30 15 c0 	mov    -0x3feacfa0(,%eax,4),%edx
c01077e4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01077e7:	89 14 85 a0 30 15 c0 	mov    %edx,-0x3feacf60(,%eax,4)
     
     pgfault_num=0;
     
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c01077ee:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01077f2:	83 7d ec 09          	cmpl   $0x9,-0x14(%ebp)
c01077f6:	7e d4                	jle    c01077cc <check_swap+0x43e>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01077f8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01077ff:	e9 eb 00 00 00       	jmp    c01078ef <check_swap+0x561>
         check_ptep[i]=0;
c0107804:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107807:	c7 04 85 f4 30 15 c0 	movl   $0x0,-0x3feacf0c(,%eax,4)
c010780e:	00 00 00 00 
         check_ptep[i] = get_pte(pgdir, (i+1)*0x1000, 0);
c0107812:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107815:	83 c0 01             	add    $0x1,%eax
c0107818:	c1 e0 0c             	shl    $0xc,%eax
c010781b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0107822:	00 
c0107823:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107827:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010782a:	89 04 24             	mov    %eax,(%esp)
c010782d:	e8 a9 e0 ff ff       	call   c01058db <get_pte>
c0107832:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107835:	89 04 95 f4 30 15 c0 	mov    %eax,-0x3feacf0c(,%edx,4)
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
c010783c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010783f:	8b 04 85 f4 30 15 c0 	mov    -0x3feacf0c(,%eax,4),%eax
c0107846:	85 c0                	test   %eax,%eax
c0107848:	75 24                	jne    c010786e <check_swap+0x4e0>
c010784a:	c7 44 24 0c b0 6e 11 	movl   $0xc0116eb0,0xc(%esp)
c0107851:	c0 
c0107852:	c7 44 24 08 1a 6c 11 	movl   $0xc0116c1a,0x8(%esp)
c0107859:	c0 
c010785a:	c7 44 24 04 fa 00 00 	movl   $0xfa,0x4(%esp)
c0107861:	00 
c0107862:	c7 04 24 b4 6b 11 c0 	movl   $0xc0116bb4,(%esp)
c0107869:	e8 5a 96 ff ff       	call   c0100ec8 <__panic>
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
c010786e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107871:	8b 04 85 f4 30 15 c0 	mov    -0x3feacf0c(,%eax,4),%eax
c0107878:	8b 00                	mov    (%eax),%eax
c010787a:	89 04 24             	mov    %eax,(%esp)
c010787d:	e8 9f f5 ff ff       	call   c0106e21 <pte2page>
c0107882:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107885:	8b 14 95 40 30 15 c0 	mov    -0x3feacfc0(,%edx,4),%edx
c010788c:	39 d0                	cmp    %edx,%eax
c010788e:	74 24                	je     c01078b4 <check_swap+0x526>
c0107890:	c7 44 24 0c c8 6e 11 	movl   $0xc0116ec8,0xc(%esp)
c0107897:	c0 
c0107898:	c7 44 24 08 1a 6c 11 	movl   $0xc0116c1a,0x8(%esp)
c010789f:	c0 
c01078a0:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
c01078a7:	00 
c01078a8:	c7 04 24 b4 6b 11 c0 	movl   $0xc0116bb4,(%esp)
c01078af:	e8 14 96 ff ff       	call   c0100ec8 <__panic>
         assert((*check_ptep[i] & PTE_P));          
c01078b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01078b7:	8b 04 85 f4 30 15 c0 	mov    -0x3feacf0c(,%eax,4),%eax
c01078be:	8b 00                	mov    (%eax),%eax
c01078c0:	83 e0 01             	and    $0x1,%eax
c01078c3:	85 c0                	test   %eax,%eax
c01078c5:	75 24                	jne    c01078eb <check_swap+0x55d>
c01078c7:	c7 44 24 0c f0 6e 11 	movl   $0xc0116ef0,0xc(%esp)
c01078ce:	c0 
c01078cf:	c7 44 24 08 1a 6c 11 	movl   $0xc0116c1a,0x8(%esp)
c01078d6:	c0 
c01078d7:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
c01078de:	00 
c01078df:	c7 04 24 b4 6b 11 c0 	movl   $0xc0116bb4,(%esp)
c01078e6:	e8 dd 95 ff ff       	call   c0100ec8 <__panic>
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01078eb:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01078ef:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c01078f3:	0f 8e 0b ff ff ff    	jle    c0107804 <check_swap+0x476>
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
         assert((*check_ptep[i] & PTE_P));          
     }
     cprintf("set up init env for check_swap over!\n");
c01078f9:	c7 04 24 0c 6f 11 c0 	movl   $0xc0116f0c,(%esp)
c0107900:	e8 60 8a ff ff       	call   c0100365 <cprintf>
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
c0107905:	e8 6c fa ff ff       	call   c0107376 <check_content_access>
c010790a:	89 45 cc             	mov    %eax,-0x34(%ebp)
     assert(ret==0);
c010790d:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0107911:	74 24                	je     c0107937 <check_swap+0x5a9>
c0107913:	c7 44 24 0c 32 6f 11 	movl   $0xc0116f32,0xc(%esp)
c010791a:	c0 
c010791b:	c7 44 24 08 1a 6c 11 	movl   $0xc0116c1a,0x8(%esp)
c0107922:	c0 
c0107923:	c7 44 24 04 01 01 00 	movl   $0x101,0x4(%esp)
c010792a:	00 
c010792b:	c7 04 24 b4 6b 11 c0 	movl   $0xc0116bb4,(%esp)
c0107932:	e8 91 95 ff ff       	call   c0100ec8 <__panic>
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107937:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010793e:	eb 1e                	jmp    c010795e <check_swap+0x5d0>
         free_pages(check_rp[i],1);
c0107940:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107943:	8b 04 85 40 30 15 c0 	mov    -0x3feacfc0(,%eax,4),%eax
c010794a:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107951:	00 
c0107952:	89 04 24             	mov    %eax,(%esp)
c0107955:	e8 75 d8 ff ff       	call   c01051cf <free_pages>
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
     assert(ret==0);
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010795a:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c010795e:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0107962:	7e dc                	jle    c0107940 <check_swap+0x5b2>
         free_pages(check_rp[i],1);
     } 

     //free_page(pte2page(*temp_ptep));
    free_page(pa2page(pgdir[0]));
c0107964:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107967:	8b 00                	mov    (%eax),%eax
c0107969:	89 04 24             	mov    %eax,(%esp)
c010796c:	e8 61 f4 ff ff       	call   c0106dd2 <pa2page>
c0107971:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107978:	00 
c0107979:	89 04 24             	mov    %eax,(%esp)
c010797c:	e8 4e d8 ff ff       	call   c01051cf <free_pages>
     pgdir[0] = 0;
c0107981:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107984:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
     mm->pgdir = NULL;
c010798a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010798d:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
     mm_destroy(mm);
c0107994:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107997:	89 04 24             	mov    %eax,(%esp)
c010799a:	e8 ec 08 00 00       	call   c010828b <mm_destroy>
     check_mm_struct = NULL;
c010799f:	c7 05 0c 31 15 c0 00 	movl   $0x0,0xc015310c
c01079a6:	00 00 00 
     
     nr_free = nr_free_store;
c01079a9:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01079ac:	a3 1c 30 15 c0       	mov    %eax,0xc015301c
     free_list = free_list_store;
c01079b1:	8b 45 98             	mov    -0x68(%ebp),%eax
c01079b4:	8b 55 9c             	mov    -0x64(%ebp),%edx
c01079b7:	a3 14 30 15 c0       	mov    %eax,0xc0153014
c01079bc:	89 15 18 30 15 c0    	mov    %edx,0xc0153018

     
     le = &free_list;
c01079c2:	c7 45 e8 14 30 15 c0 	movl   $0xc0153014,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c01079c9:	eb 1d                	jmp    c01079e8 <check_swap+0x65a>
         struct Page *p = le2page(le, page_link);
c01079cb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01079ce:	83 e8 10             	sub    $0x10,%eax
c01079d1:	89 45 c8             	mov    %eax,-0x38(%ebp)
         count --, total -= p->property;
c01079d4:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01079d8:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01079db:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01079de:	8b 40 08             	mov    0x8(%eax),%eax
c01079e1:	29 c2                	sub    %eax,%edx
c01079e3:	89 d0                	mov    %edx,%eax
c01079e5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01079e8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01079eb:	89 45 a0             	mov    %eax,-0x60(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01079ee:	8b 45 a0             	mov    -0x60(%ebp),%eax
c01079f1:	8b 40 04             	mov    0x4(%eax),%eax
     nr_free = nr_free_store;
     free_list = free_list_store;

     
     le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c01079f4:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01079f7:	81 7d e8 14 30 15 c0 	cmpl   $0xc0153014,-0x18(%ebp)
c01079fe:	75 cb                	jne    c01079cb <check_swap+0x63d>
         struct Page *p = le2page(le, page_link);
         count --, total -= p->property;
     }
     cprintf("count is %d, total is %d\n",count,total);
c0107a00:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107a03:	89 44 24 08          	mov    %eax,0x8(%esp)
c0107a07:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107a0a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107a0e:	c7 04 24 39 6f 11 c0 	movl   $0xc0116f39,(%esp)
c0107a15:	e8 4b 89 ff ff       	call   c0100365 <cprintf>
     //assert(count == 0);
     
     cprintf("check_swap() succeeded!\n");
c0107a1a:	c7 04 24 53 6f 11 c0 	movl   $0xc0116f53,(%esp)
c0107a21:	e8 3f 89 ff ff       	call   c0100365 <cprintf>
}
c0107a26:	83 c4 74             	add    $0x74,%esp
c0107a29:	5b                   	pop    %ebx
c0107a2a:	5d                   	pop    %ebp
c0107a2b:	c3                   	ret    

c0107a2c <_fifo_init_mm>:
 * (2) _fifo_init_mm: init pra_list_head and let  mm->sm_priv point to the addr of pra_list_head.
 *              Now, From the memory control struct mm_struct, we can access FIFO PRA
 */
static int
_fifo_init_mm(struct mm_struct *mm)
{     
c0107a2c:	55                   	push   %ebp
c0107a2d:	89 e5                	mov    %esp,%ebp
c0107a2f:	83 ec 10             	sub    $0x10,%esp
c0107a32:	c7 45 fc 04 31 15 c0 	movl   $0xc0153104,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0107a39:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107a3c:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0107a3f:	89 50 04             	mov    %edx,0x4(%eax)
c0107a42:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107a45:	8b 50 04             	mov    0x4(%eax),%edx
c0107a48:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107a4b:	89 10                	mov    %edx,(%eax)
     list_init(&pra_list_head);
     mm->sm_priv = &pra_list_head;
c0107a4d:	8b 45 08             	mov    0x8(%ebp),%eax
c0107a50:	c7 40 14 04 31 15 c0 	movl   $0xc0153104,0x14(%eax)
     //cprintf(" mm->sm_priv %x in fifo_init_mm\n",mm->sm_priv);
     return 0;
c0107a57:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107a5c:	c9                   	leave  
c0107a5d:	c3                   	ret    

c0107a5e <_fifo_map_swappable>:
/*
 * (3)_fifo_map_swappable: According FIFO PRA, we should link the most recent arrival page at the back of pra_list_head qeueue
 */
static int
_fifo_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c0107a5e:	55                   	push   %ebp
c0107a5f:	89 e5                	mov    %esp,%ebp
c0107a61:	83 ec 48             	sub    $0x48,%esp
    list_entry_t *head=(list_entry_t*) mm->sm_priv;
c0107a64:	8b 45 08             	mov    0x8(%ebp),%eax
c0107a67:	8b 40 14             	mov    0x14(%eax),%eax
c0107a6a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    list_entry_t *entry=&(page->pra_page_link);
c0107a6d:	8b 45 10             	mov    0x10(%ebp),%eax
c0107a70:	83 c0 18             	add    $0x18,%eax
c0107a73:	89 45 f0             	mov    %eax,-0x10(%ebp)
 
    assert(entry != NULL && head != NULL);
c0107a76:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0107a7a:	74 06                	je     c0107a82 <_fifo_map_swappable+0x24>
c0107a7c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107a80:	75 24                	jne    c0107aa6 <_fifo_map_swappable+0x48>
c0107a82:	c7 44 24 0c 6c 6f 11 	movl   $0xc0116f6c,0xc(%esp)
c0107a89:	c0 
c0107a8a:	c7 44 24 08 8a 6f 11 	movl   $0xc0116f8a,0x8(%esp)
c0107a91:	c0 
c0107a92:	c7 44 24 04 32 00 00 	movl   $0x32,0x4(%esp)
c0107a99:	00 
c0107a9a:	c7 04 24 9f 6f 11 c0 	movl   $0xc0116f9f,(%esp)
c0107aa1:	e8 22 94 ff ff       	call   c0100ec8 <__panic>
c0107aa6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107aa9:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107aac:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107aaf:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0107ab2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107ab5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0107ab8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107abb:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0107abe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107ac1:	8b 40 04             	mov    0x4(%eax),%eax
c0107ac4:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0107ac7:	89 55 dc             	mov    %edx,-0x24(%ebp)
c0107aca:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107acd:	89 55 d8             	mov    %edx,-0x28(%ebp)
c0107ad0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0107ad3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0107ad6:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107ad9:	89 10                	mov    %edx,(%eax)
c0107adb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0107ade:	8b 10                	mov    (%eax),%edx
c0107ae0:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0107ae3:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0107ae6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107ae9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0107aec:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0107aef:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107af2:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0107af5:	89 10                	mov    %edx,(%eax)
    //record the page access situlation
    /*LAB3 EXERCISE 2: YOUR CODE*/ 
    //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
    list_add(head, entry);
    return 0;
c0107af7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107afc:	c9                   	leave  
c0107afd:	c3                   	ret    

c0107afe <_fifo_swap_out_victim>:
 *  (4)_fifo_swap_out_victim: According FIFO PRA, we should unlink the  earliest arrival page in front of pra_list_head qeueue,
 *                            then set the addr of addr of this page to ptr_page.
 */
static int
_fifo_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick)
{
c0107afe:	55                   	push   %ebp
c0107aff:	89 e5                	mov    %esp,%ebp
c0107b01:	83 ec 38             	sub    $0x38,%esp
     list_entry_t *head=(list_entry_t*) mm->sm_priv;
c0107b04:	8b 45 08             	mov    0x8(%ebp),%eax
c0107b07:	8b 40 14             	mov    0x14(%eax),%eax
c0107b0a:	89 45 f4             	mov    %eax,-0xc(%ebp)
         assert(head != NULL);
c0107b0d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107b11:	75 24                	jne    c0107b37 <_fifo_swap_out_victim+0x39>
c0107b13:	c7 44 24 0c b3 6f 11 	movl   $0xc0116fb3,0xc(%esp)
c0107b1a:	c0 
c0107b1b:	c7 44 24 08 8a 6f 11 	movl   $0xc0116f8a,0x8(%esp)
c0107b22:	c0 
c0107b23:	c7 44 24 04 41 00 00 	movl   $0x41,0x4(%esp)
c0107b2a:	00 
c0107b2b:	c7 04 24 9f 6f 11 c0 	movl   $0xc0116f9f,(%esp)
c0107b32:	e8 91 93 ff ff       	call   c0100ec8 <__panic>
     assert(in_tick==0);
c0107b37:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0107b3b:	74 24                	je     c0107b61 <_fifo_swap_out_victim+0x63>
c0107b3d:	c7 44 24 0c c0 6f 11 	movl   $0xc0116fc0,0xc(%esp)
c0107b44:	c0 
c0107b45:	c7 44 24 08 8a 6f 11 	movl   $0xc0116f8a,0x8(%esp)
c0107b4c:	c0 
c0107b4d:	c7 44 24 04 42 00 00 	movl   $0x42,0x4(%esp)
c0107b54:	00 
c0107b55:	c7 04 24 9f 6f 11 c0 	movl   $0xc0116f9f,(%esp)
c0107b5c:	e8 67 93 ff ff       	call   c0100ec8 <__panic>
     /* Select the victim */
     /*LAB3 EXERCISE 2: YOUR CODE*/ 
     //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
     //(2)  set the addr of addr of this page to ptr_page
     /* Select the tail */
     list_entry_t *le = head->prev;
c0107b61:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107b64:	8b 00                	mov    (%eax),%eax
c0107b66:	89 45 f0             	mov    %eax,-0x10(%ebp)
     assert(head!=le);
c0107b69:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107b6c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0107b6f:	75 24                	jne    c0107b95 <_fifo_swap_out_victim+0x97>
c0107b71:	c7 44 24 0c cb 6f 11 	movl   $0xc0116fcb,0xc(%esp)
c0107b78:	c0 
c0107b79:	c7 44 24 08 8a 6f 11 	movl   $0xc0116f8a,0x8(%esp)
c0107b80:	c0 
c0107b81:	c7 44 24 04 49 00 00 	movl   $0x49,0x4(%esp)
c0107b88:	00 
c0107b89:	c7 04 24 9f 6f 11 c0 	movl   $0xc0116f9f,(%esp)
c0107b90:	e8 33 93 ff ff       	call   c0100ec8 <__panic>
     struct Page *p = le2page(le, pra_page_link);
c0107b95:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107b98:	83 e8 18             	sub    $0x18,%eax
c0107b9b:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107b9e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107ba1:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0107ba4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107ba7:	8b 40 04             	mov    0x4(%eax),%eax
c0107baa:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0107bad:	8b 12                	mov    (%edx),%edx
c0107baf:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0107bb2:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0107bb5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107bb8:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0107bbb:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0107bbe:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107bc1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107bc4:	89 10                	mov    %edx,(%eax)
     list_del(le);
     assert(p !=NULL);
c0107bc6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0107bca:	75 24                	jne    c0107bf0 <_fifo_swap_out_victim+0xf2>
c0107bcc:	c7 44 24 0c d4 6f 11 	movl   $0xc0116fd4,0xc(%esp)
c0107bd3:	c0 
c0107bd4:	c7 44 24 08 8a 6f 11 	movl   $0xc0116f8a,0x8(%esp)
c0107bdb:	c0 
c0107bdc:	c7 44 24 04 4c 00 00 	movl   $0x4c,0x4(%esp)
c0107be3:	00 
c0107be4:	c7 04 24 9f 6f 11 c0 	movl   $0xc0116f9f,(%esp)
c0107beb:	e8 d8 92 ff ff       	call   c0100ec8 <__panic>
     *ptr_page = p;
c0107bf0:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107bf3:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107bf6:	89 10                	mov    %edx,(%eax)
     return 0;
c0107bf8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107bfd:	c9                   	leave  
c0107bfe:	c3                   	ret    

c0107bff <_fifo_check_swap>:

static int
_fifo_check_swap(void) {
c0107bff:	55                   	push   %ebp
c0107c00:	89 e5                	mov    %esp,%ebp
c0107c02:	83 ec 18             	sub    $0x18,%esp
    cprintf("write Virt Page c in fifo_check_swap\n");
c0107c05:	c7 04 24 e0 6f 11 c0 	movl   $0xc0116fe0,(%esp)
c0107c0c:	e8 54 87 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c0107c11:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107c16:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==4);
c0107c19:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107c1e:	83 f8 04             	cmp    $0x4,%eax
c0107c21:	74 24                	je     c0107c47 <_fifo_check_swap+0x48>
c0107c23:	c7 44 24 0c 06 70 11 	movl   $0xc0117006,0xc(%esp)
c0107c2a:	c0 
c0107c2b:	c7 44 24 08 8a 6f 11 	movl   $0xc0116f8a,0x8(%esp)
c0107c32:	c0 
c0107c33:	c7 44 24 04 55 00 00 	movl   $0x55,0x4(%esp)
c0107c3a:	00 
c0107c3b:	c7 04 24 9f 6f 11 c0 	movl   $0xc0116f9f,(%esp)
c0107c42:	e8 81 92 ff ff       	call   c0100ec8 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0107c47:	c7 04 24 18 70 11 c0 	movl   $0xc0117018,(%esp)
c0107c4e:	e8 12 87 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c0107c53:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107c58:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==4);
c0107c5b:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107c60:	83 f8 04             	cmp    $0x4,%eax
c0107c63:	74 24                	je     c0107c89 <_fifo_check_swap+0x8a>
c0107c65:	c7 44 24 0c 06 70 11 	movl   $0xc0117006,0xc(%esp)
c0107c6c:	c0 
c0107c6d:	c7 44 24 08 8a 6f 11 	movl   $0xc0116f8a,0x8(%esp)
c0107c74:	c0 
c0107c75:	c7 44 24 04 58 00 00 	movl   $0x58,0x4(%esp)
c0107c7c:	00 
c0107c7d:	c7 04 24 9f 6f 11 c0 	movl   $0xc0116f9f,(%esp)
c0107c84:	e8 3f 92 ff ff       	call   c0100ec8 <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0107c89:	c7 04 24 40 70 11 c0 	movl   $0xc0117040,(%esp)
c0107c90:	e8 d0 86 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c0107c95:	b8 00 40 00 00       	mov    $0x4000,%eax
c0107c9a:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==4);
c0107c9d:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107ca2:	83 f8 04             	cmp    $0x4,%eax
c0107ca5:	74 24                	je     c0107ccb <_fifo_check_swap+0xcc>
c0107ca7:	c7 44 24 0c 06 70 11 	movl   $0xc0117006,0xc(%esp)
c0107cae:	c0 
c0107caf:	c7 44 24 08 8a 6f 11 	movl   $0xc0116f8a,0x8(%esp)
c0107cb6:	c0 
c0107cb7:	c7 44 24 04 5b 00 00 	movl   $0x5b,0x4(%esp)
c0107cbe:	00 
c0107cbf:	c7 04 24 9f 6f 11 c0 	movl   $0xc0116f9f,(%esp)
c0107cc6:	e8 fd 91 ff ff       	call   c0100ec8 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107ccb:	c7 04 24 68 70 11 c0 	movl   $0xc0117068,(%esp)
c0107cd2:	e8 8e 86 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107cd7:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107cdc:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==4);
c0107cdf:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107ce4:	83 f8 04             	cmp    $0x4,%eax
c0107ce7:	74 24                	je     c0107d0d <_fifo_check_swap+0x10e>
c0107ce9:	c7 44 24 0c 06 70 11 	movl   $0xc0117006,0xc(%esp)
c0107cf0:	c0 
c0107cf1:	c7 44 24 08 8a 6f 11 	movl   $0xc0116f8a,0x8(%esp)
c0107cf8:	c0 
c0107cf9:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0107d00:	00 
c0107d01:	c7 04 24 9f 6f 11 c0 	movl   $0xc0116f9f,(%esp)
c0107d08:	e8 bb 91 ff ff       	call   c0100ec8 <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c0107d0d:	c7 04 24 90 70 11 c0 	movl   $0xc0117090,(%esp)
c0107d14:	e8 4c 86 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x5000 = 0x0e;
c0107d19:	b8 00 50 00 00       	mov    $0x5000,%eax
c0107d1e:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==5);
c0107d21:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107d26:	83 f8 05             	cmp    $0x5,%eax
c0107d29:	74 24                	je     c0107d4f <_fifo_check_swap+0x150>
c0107d2b:	c7 44 24 0c b6 70 11 	movl   $0xc01170b6,0xc(%esp)
c0107d32:	c0 
c0107d33:	c7 44 24 08 8a 6f 11 	movl   $0xc0116f8a,0x8(%esp)
c0107d3a:	c0 
c0107d3b:	c7 44 24 04 61 00 00 	movl   $0x61,0x4(%esp)
c0107d42:	00 
c0107d43:	c7 04 24 9f 6f 11 c0 	movl   $0xc0116f9f,(%esp)
c0107d4a:	e8 79 91 ff ff       	call   c0100ec8 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107d4f:	c7 04 24 68 70 11 c0 	movl   $0xc0117068,(%esp)
c0107d56:	e8 0a 86 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107d5b:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107d60:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==5);
c0107d63:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107d68:	83 f8 05             	cmp    $0x5,%eax
c0107d6b:	74 24                	je     c0107d91 <_fifo_check_swap+0x192>
c0107d6d:	c7 44 24 0c b6 70 11 	movl   $0xc01170b6,0xc(%esp)
c0107d74:	c0 
c0107d75:	c7 44 24 08 8a 6f 11 	movl   $0xc0116f8a,0x8(%esp)
c0107d7c:	c0 
c0107d7d:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c0107d84:	00 
c0107d85:	c7 04 24 9f 6f 11 c0 	movl   $0xc0116f9f,(%esp)
c0107d8c:	e8 37 91 ff ff       	call   c0100ec8 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0107d91:	c7 04 24 18 70 11 c0 	movl   $0xc0117018,(%esp)
c0107d98:	e8 c8 85 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c0107d9d:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107da2:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==6);
c0107da5:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107daa:	83 f8 06             	cmp    $0x6,%eax
c0107dad:	74 24                	je     c0107dd3 <_fifo_check_swap+0x1d4>
c0107daf:	c7 44 24 0c c5 70 11 	movl   $0xc01170c5,0xc(%esp)
c0107db6:	c0 
c0107db7:	c7 44 24 08 8a 6f 11 	movl   $0xc0116f8a,0x8(%esp)
c0107dbe:	c0 
c0107dbf:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
c0107dc6:	00 
c0107dc7:	c7 04 24 9f 6f 11 c0 	movl   $0xc0116f9f,(%esp)
c0107dce:	e8 f5 90 ff ff       	call   c0100ec8 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107dd3:	c7 04 24 68 70 11 c0 	movl   $0xc0117068,(%esp)
c0107dda:	e8 86 85 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107ddf:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107de4:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==7);
c0107de7:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107dec:	83 f8 07             	cmp    $0x7,%eax
c0107def:	74 24                	je     c0107e15 <_fifo_check_swap+0x216>
c0107df1:	c7 44 24 0c d4 70 11 	movl   $0xc01170d4,0xc(%esp)
c0107df8:	c0 
c0107df9:	c7 44 24 08 8a 6f 11 	movl   $0xc0116f8a,0x8(%esp)
c0107e00:	c0 
c0107e01:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c0107e08:	00 
c0107e09:	c7 04 24 9f 6f 11 c0 	movl   $0xc0116f9f,(%esp)
c0107e10:	e8 b3 90 ff ff       	call   c0100ec8 <__panic>
    cprintf("write Virt Page c in fifo_check_swap\n");
c0107e15:	c7 04 24 e0 6f 11 c0 	movl   $0xc0116fe0,(%esp)
c0107e1c:	e8 44 85 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c0107e21:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107e26:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==8);
c0107e29:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107e2e:	83 f8 08             	cmp    $0x8,%eax
c0107e31:	74 24                	je     c0107e57 <_fifo_check_swap+0x258>
c0107e33:	c7 44 24 0c e3 70 11 	movl   $0xc01170e3,0xc(%esp)
c0107e3a:	c0 
c0107e3b:	c7 44 24 08 8a 6f 11 	movl   $0xc0116f8a,0x8(%esp)
c0107e42:	c0 
c0107e43:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c0107e4a:	00 
c0107e4b:	c7 04 24 9f 6f 11 c0 	movl   $0xc0116f9f,(%esp)
c0107e52:	e8 71 90 ff ff       	call   c0100ec8 <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0107e57:	c7 04 24 40 70 11 c0 	movl   $0xc0117040,(%esp)
c0107e5e:	e8 02 85 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c0107e63:	b8 00 40 00 00       	mov    $0x4000,%eax
c0107e68:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==9);
c0107e6b:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107e70:	83 f8 09             	cmp    $0x9,%eax
c0107e73:	74 24                	je     c0107e99 <_fifo_check_swap+0x29a>
c0107e75:	c7 44 24 0c f2 70 11 	movl   $0xc01170f2,0xc(%esp)
c0107e7c:	c0 
c0107e7d:	c7 44 24 08 8a 6f 11 	movl   $0xc0116f8a,0x8(%esp)
c0107e84:	c0 
c0107e85:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c0107e8c:	00 
c0107e8d:	c7 04 24 9f 6f 11 c0 	movl   $0xc0116f9f,(%esp)
c0107e94:	e8 2f 90 ff ff       	call   c0100ec8 <__panic>
    return 0;
c0107e99:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107e9e:	c9                   	leave  
c0107e9f:	c3                   	ret    

c0107ea0 <_fifo_init>:


static int
_fifo_init(void)
{
c0107ea0:	55                   	push   %ebp
c0107ea1:	89 e5                	mov    %esp,%ebp
    return 0;
c0107ea3:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107ea8:	5d                   	pop    %ebp
c0107ea9:	c3                   	ret    

c0107eaa <_fifo_set_unswappable>:

static int
_fifo_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0107eaa:	55                   	push   %ebp
c0107eab:	89 e5                	mov    %esp,%ebp
    return 0;
c0107ead:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107eb2:	5d                   	pop    %ebp
c0107eb3:	c3                   	ret    

c0107eb4 <_fifo_tick_event>:

static int
_fifo_tick_event(struct mm_struct *mm)
{ return 0; }
c0107eb4:	55                   	push   %ebp
c0107eb5:	89 e5                	mov    %esp,%ebp
c0107eb7:	b8 00 00 00 00       	mov    $0x0,%eax
c0107ebc:	5d                   	pop    %ebp
c0107ebd:	c3                   	ret    

c0107ebe <mm_count>:
bool copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable);
bool copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len);
bool copy_string(struct mm_struct *mm, char *dst, const char *src, size_t maxn);

static inline int
mm_count(struct mm_struct *mm) {
c0107ebe:	55                   	push   %ebp
c0107ebf:	89 e5                	mov    %esp,%ebp
    return mm->mm_count;
c0107ec1:	8b 45 08             	mov    0x8(%ebp),%eax
c0107ec4:	8b 40 18             	mov    0x18(%eax),%eax
}
c0107ec7:	5d                   	pop    %ebp
c0107ec8:	c3                   	ret    

c0107ec9 <set_mm_count>:

static inline void
set_mm_count(struct mm_struct *mm, int val) {
c0107ec9:	55                   	push   %ebp
c0107eca:	89 e5                	mov    %esp,%ebp
    mm->mm_count = val;
c0107ecc:	8b 45 08             	mov    0x8(%ebp),%eax
c0107ecf:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107ed2:	89 50 18             	mov    %edx,0x18(%eax)
}
c0107ed5:	5d                   	pop    %ebp
c0107ed6:	c3                   	ret    

c0107ed7 <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c0107ed7:	55                   	push   %ebp
c0107ed8:	89 e5                	mov    %esp,%ebp
c0107eda:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0107edd:	8b 45 08             	mov    0x8(%ebp),%eax
c0107ee0:	c1 e8 0c             	shr    $0xc,%eax
c0107ee3:	89 c2                	mov    %eax,%edx
c0107ee5:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c0107eea:	39 c2                	cmp    %eax,%edx
c0107eec:	72 1c                	jb     c0107f0a <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0107eee:	c7 44 24 08 14 71 11 	movl   $0xc0117114,0x8(%esp)
c0107ef5:	c0 
c0107ef6:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0107efd:	00 
c0107efe:	c7 04 24 33 71 11 c0 	movl   $0xc0117133,(%esp)
c0107f05:	e8 be 8f ff ff       	call   c0100ec8 <__panic>
    }
    return &pages[PPN(pa)];
c0107f0a:	8b 0d 28 30 15 c0    	mov    0xc0153028,%ecx
c0107f10:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f13:	c1 e8 0c             	shr    $0xc,%eax
c0107f16:	89 c2                	mov    %eax,%edx
c0107f18:	89 d0                	mov    %edx,%eax
c0107f1a:	c1 e0 03             	shl    $0x3,%eax
c0107f1d:	01 d0                	add    %edx,%eax
c0107f1f:	c1 e0 02             	shl    $0x2,%eax
c0107f22:	01 c8                	add    %ecx,%eax
}
c0107f24:	c9                   	leave  
c0107f25:	c3                   	ret    

c0107f26 <mm_create>:
static void check_vma_struct(void);
static void check_pgfault(void);

// mm_create -  alloc a mm_struct & initialize it.
struct mm_struct *
mm_create(void) {
c0107f26:	55                   	push   %ebp
c0107f27:	89 e5                	mov    %esp,%ebp
c0107f29:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = kmalloc(sizeof(struct mm_struct));
c0107f2c:	c7 04 24 2c 00 00 00 	movl   $0x2c,(%esp)
c0107f33:	e8 a7 cd ff ff       	call   c0104cdf <kmalloc>
c0107f38:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (mm != NULL) {
c0107f3b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107f3f:	0f 84 81 00 00 00    	je     c0107fc6 <mm_create+0xa0>
        list_init(&(mm->mmap_list));
c0107f45:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f48:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0107f4b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107f4e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0107f51:	89 50 04             	mov    %edx,0x4(%eax)
c0107f54:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107f57:	8b 50 04             	mov    0x4(%eax),%edx
c0107f5a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107f5d:	89 10                	mov    %edx,(%eax)
        mm->mmap_cache = NULL;
c0107f5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f62:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        mm->pgdir = NULL;
c0107f69:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f6c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        mm->map_count = 0;
c0107f73:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f76:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)

        if (swap_init_ok) swap_init_mm(mm);
c0107f7d:	a1 0c ff 14 c0       	mov    0xc014ff0c,%eax
c0107f82:	85 c0                	test   %eax,%eax
c0107f84:	74 0d                	je     c0107f93 <mm_create+0x6d>
c0107f86:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f89:	89 04 24             	mov    %eax,(%esp)
c0107f8c:	e8 5e ef ff ff       	call   c0106eef <swap_init_mm>
c0107f91:	eb 0a                	jmp    c0107f9d <mm_create+0x77>
        else mm->sm_priv = NULL;
c0107f93:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f96:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        
        set_mm_count(mm, 0);
c0107f9d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0107fa4:	00 
c0107fa5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107fa8:	89 04 24             	mov    %eax,(%esp)
c0107fab:	e8 19 ff ff ff       	call   c0107ec9 <set_mm_count>
        sem_init(&(mm->mm_sem), 1);
c0107fb0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107fb3:	83 c0 1c             	add    $0x1c,%eax
c0107fb6:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107fbd:	00 
c0107fbe:	89 04 24             	mov    %eax,(%esp)
c0107fc1:	e8 80 1b 00 00       	call   c0109b46 <sem_init>
    }    
    return mm;
c0107fc6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107fc9:	c9                   	leave  
c0107fca:	c3                   	ret    

c0107fcb <vma_create>:

// vma_create - alloc a vma_struct & initialize it. (addr range: vm_start~vm_end)
struct vma_struct *
vma_create(uintptr_t vm_start, uintptr_t vm_end, uint32_t vm_flags) {
c0107fcb:	55                   	push   %ebp
c0107fcc:	89 e5                	mov    %esp,%ebp
c0107fce:	83 ec 28             	sub    $0x28,%esp
    struct vma_struct *vma = kmalloc(sizeof(struct vma_struct));
c0107fd1:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c0107fd8:	e8 02 cd ff ff       	call   c0104cdf <kmalloc>
c0107fdd:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (vma != NULL) {
c0107fe0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107fe4:	74 1b                	je     c0108001 <vma_create+0x36>
        vma->vm_start = vm_start;
c0107fe6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107fe9:	8b 55 08             	mov    0x8(%ebp),%edx
c0107fec:	89 50 04             	mov    %edx,0x4(%eax)
        vma->vm_end = vm_end;
c0107fef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107ff2:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107ff5:	89 50 08             	mov    %edx,0x8(%eax)
        vma->vm_flags = vm_flags;
c0107ff8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107ffb:	8b 55 10             	mov    0x10(%ebp),%edx
c0107ffe:	89 50 0c             	mov    %edx,0xc(%eax)
    }
    return vma;
c0108001:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0108004:	c9                   	leave  
c0108005:	c3                   	ret    

c0108006 <find_vma>:


// find_vma - find a vma  (vma->vm_start <= addr <= vma_vm_end)
struct vma_struct *
find_vma(struct mm_struct *mm, uintptr_t addr) {
c0108006:	55                   	push   %ebp
c0108007:	89 e5                	mov    %esp,%ebp
c0108009:	83 ec 20             	sub    $0x20,%esp
    struct vma_struct *vma = NULL;
c010800c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    if (mm != NULL) {
c0108013:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0108017:	0f 84 95 00 00 00    	je     c01080b2 <find_vma+0xac>
        vma = mm->mmap_cache;
c010801d:	8b 45 08             	mov    0x8(%ebp),%eax
c0108020:	8b 40 08             	mov    0x8(%eax),%eax
c0108023:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
c0108026:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c010802a:	74 16                	je     c0108042 <find_vma+0x3c>
c010802c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010802f:	8b 40 04             	mov    0x4(%eax),%eax
c0108032:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108035:	77 0b                	ja     c0108042 <find_vma+0x3c>
c0108037:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010803a:	8b 40 08             	mov    0x8(%eax),%eax
c010803d:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108040:	77 61                	ja     c01080a3 <find_vma+0x9d>
                bool found = 0;
c0108042:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
                list_entry_t *list = &(mm->mmap_list), *le = list;
c0108049:	8b 45 08             	mov    0x8(%ebp),%eax
c010804c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010804f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108052:	89 45 f4             	mov    %eax,-0xc(%ebp)
                while ((le = list_next(le)) != list) {
c0108055:	eb 28                	jmp    c010807f <find_vma+0x79>
                    vma = le2vma(le, list_link);
c0108057:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010805a:	83 e8 10             	sub    $0x10,%eax
c010805d:	89 45 fc             	mov    %eax,-0x4(%ebp)
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
c0108060:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108063:	8b 40 04             	mov    0x4(%eax),%eax
c0108066:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108069:	77 14                	ja     c010807f <find_vma+0x79>
c010806b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010806e:	8b 40 08             	mov    0x8(%eax),%eax
c0108071:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108074:	76 09                	jbe    c010807f <find_vma+0x79>
                        found = 1;
c0108076:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
                        break;
c010807d:	eb 17                	jmp    c0108096 <find_vma+0x90>
c010807f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108082:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0108085:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108088:	8b 40 04             	mov    0x4(%eax),%eax
    if (mm != NULL) {
        vma = mm->mmap_cache;
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
                bool found = 0;
                list_entry_t *list = &(mm->mmap_list), *le = list;
                while ((le = list_next(le)) != list) {
c010808b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010808e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108091:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0108094:	75 c1                	jne    c0108057 <find_vma+0x51>
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
                        found = 1;
                        break;
                    }
                }
                if (!found) {
c0108096:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c010809a:	75 07                	jne    c01080a3 <find_vma+0x9d>
                    vma = NULL;
c010809c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                }
        }
        if (vma != NULL) {
c01080a3:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c01080a7:	74 09                	je     c01080b2 <find_vma+0xac>
            mm->mmap_cache = vma;
c01080a9:	8b 45 08             	mov    0x8(%ebp),%eax
c01080ac:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01080af:	89 50 08             	mov    %edx,0x8(%eax)
        }
    }
    return vma;
c01080b2:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c01080b5:	c9                   	leave  
c01080b6:	c3                   	ret    

c01080b7 <check_vma_overlap>:


// check_vma_overlap - check if vma1 overlaps vma2 ?
static inline void
check_vma_overlap(struct vma_struct *prev, struct vma_struct *next) {
c01080b7:	55                   	push   %ebp
c01080b8:	89 e5                	mov    %esp,%ebp
c01080ba:	83 ec 18             	sub    $0x18,%esp
    assert(prev->vm_start < prev->vm_end);
c01080bd:	8b 45 08             	mov    0x8(%ebp),%eax
c01080c0:	8b 50 04             	mov    0x4(%eax),%edx
c01080c3:	8b 45 08             	mov    0x8(%ebp),%eax
c01080c6:	8b 40 08             	mov    0x8(%eax),%eax
c01080c9:	39 c2                	cmp    %eax,%edx
c01080cb:	72 24                	jb     c01080f1 <check_vma_overlap+0x3a>
c01080cd:	c7 44 24 0c 41 71 11 	movl   $0xc0117141,0xc(%esp)
c01080d4:	c0 
c01080d5:	c7 44 24 08 5f 71 11 	movl   $0xc011715f,0x8(%esp)
c01080dc:	c0 
c01080dd:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
c01080e4:	00 
c01080e5:	c7 04 24 74 71 11 c0 	movl   $0xc0117174,(%esp)
c01080ec:	e8 d7 8d ff ff       	call   c0100ec8 <__panic>
    assert(prev->vm_end <= next->vm_start);
c01080f1:	8b 45 08             	mov    0x8(%ebp),%eax
c01080f4:	8b 50 08             	mov    0x8(%eax),%edx
c01080f7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01080fa:	8b 40 04             	mov    0x4(%eax),%eax
c01080fd:	39 c2                	cmp    %eax,%edx
c01080ff:	76 24                	jbe    c0108125 <check_vma_overlap+0x6e>
c0108101:	c7 44 24 0c 84 71 11 	movl   $0xc0117184,0xc(%esp)
c0108108:	c0 
c0108109:	c7 44 24 08 5f 71 11 	movl   $0xc011715f,0x8(%esp)
c0108110:	c0 
c0108111:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c0108118:	00 
c0108119:	c7 04 24 74 71 11 c0 	movl   $0xc0117174,(%esp)
c0108120:	e8 a3 8d ff ff       	call   c0100ec8 <__panic>
    assert(next->vm_start < next->vm_end);
c0108125:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108128:	8b 50 04             	mov    0x4(%eax),%edx
c010812b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010812e:	8b 40 08             	mov    0x8(%eax),%eax
c0108131:	39 c2                	cmp    %eax,%edx
c0108133:	72 24                	jb     c0108159 <check_vma_overlap+0xa2>
c0108135:	c7 44 24 0c a3 71 11 	movl   $0xc01171a3,0xc(%esp)
c010813c:	c0 
c010813d:	c7 44 24 08 5f 71 11 	movl   $0xc011715f,0x8(%esp)
c0108144:	c0 
c0108145:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c010814c:	00 
c010814d:	c7 04 24 74 71 11 c0 	movl   $0xc0117174,(%esp)
c0108154:	e8 6f 8d ff ff       	call   c0100ec8 <__panic>
}
c0108159:	c9                   	leave  
c010815a:	c3                   	ret    

c010815b <insert_vma_struct>:


// insert_vma_struct -insert vma in mm's list link
void
insert_vma_struct(struct mm_struct *mm, struct vma_struct *vma) {
c010815b:	55                   	push   %ebp
c010815c:	89 e5                	mov    %esp,%ebp
c010815e:	83 ec 48             	sub    $0x48,%esp
    assert(vma->vm_start < vma->vm_end);
c0108161:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108164:	8b 50 04             	mov    0x4(%eax),%edx
c0108167:	8b 45 0c             	mov    0xc(%ebp),%eax
c010816a:	8b 40 08             	mov    0x8(%eax),%eax
c010816d:	39 c2                	cmp    %eax,%edx
c010816f:	72 24                	jb     c0108195 <insert_vma_struct+0x3a>
c0108171:	c7 44 24 0c c1 71 11 	movl   $0xc01171c1,0xc(%esp)
c0108178:	c0 
c0108179:	c7 44 24 08 5f 71 11 	movl   $0xc011715f,0x8(%esp)
c0108180:	c0 
c0108181:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
c0108188:	00 
c0108189:	c7 04 24 74 71 11 c0 	movl   $0xc0117174,(%esp)
c0108190:	e8 33 8d ff ff       	call   c0100ec8 <__panic>
    list_entry_t *list = &(mm->mmap_list);
c0108195:	8b 45 08             	mov    0x8(%ebp),%eax
c0108198:	89 45 ec             	mov    %eax,-0x14(%ebp)
    list_entry_t *le_prev = list, *le_next;
c010819b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010819e:	89 45 f4             	mov    %eax,-0xc(%ebp)

        list_entry_t *le = list;
c01081a1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01081a4:	89 45 f0             	mov    %eax,-0x10(%ebp)
        while ((le = list_next(le)) != list) {
c01081a7:	eb 21                	jmp    c01081ca <insert_vma_struct+0x6f>
            struct vma_struct *mmap_prev = le2vma(le, list_link);
c01081a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01081ac:	83 e8 10             	sub    $0x10,%eax
c01081af:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (mmap_prev->vm_start > vma->vm_start) {
c01081b2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01081b5:	8b 50 04             	mov    0x4(%eax),%edx
c01081b8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01081bb:	8b 40 04             	mov    0x4(%eax),%eax
c01081be:	39 c2                	cmp    %eax,%edx
c01081c0:	76 02                	jbe    c01081c4 <insert_vma_struct+0x69>
                break;
c01081c2:	eb 1d                	jmp    c01081e1 <insert_vma_struct+0x86>
            }
            le_prev = le;
c01081c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01081c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01081ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01081cd:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01081d0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01081d3:	8b 40 04             	mov    0x4(%eax),%eax
    assert(vma->vm_start < vma->vm_end);
    list_entry_t *list = &(mm->mmap_list);
    list_entry_t *le_prev = list, *le_next;

        list_entry_t *le = list;
        while ((le = list_next(le)) != list) {
c01081d6:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01081d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01081dc:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01081df:	75 c8                	jne    c01081a9 <insert_vma_struct+0x4e>
c01081e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01081e4:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01081e7:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01081ea:	8b 40 04             	mov    0x4(%eax),%eax
                break;
            }
            le_prev = le;
        }

    le_next = list_next(le_prev);
c01081ed:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    /* check overlap */
    if (le_prev != list) {
c01081f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01081f3:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01081f6:	74 15                	je     c010820d <insert_vma_struct+0xb2>
        check_vma_overlap(le2vma(le_prev, list_link), vma);
c01081f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01081fb:	8d 50 f0             	lea    -0x10(%eax),%edx
c01081fe:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108201:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108205:	89 14 24             	mov    %edx,(%esp)
c0108208:	e8 aa fe ff ff       	call   c01080b7 <check_vma_overlap>
    }
    if (le_next != list) {
c010820d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108210:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108213:	74 15                	je     c010822a <insert_vma_struct+0xcf>
        check_vma_overlap(vma, le2vma(le_next, list_link));
c0108215:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108218:	83 e8 10             	sub    $0x10,%eax
c010821b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010821f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108222:	89 04 24             	mov    %eax,(%esp)
c0108225:	e8 8d fe ff ff       	call   c01080b7 <check_vma_overlap>
    }

    vma->vm_mm = mm;
c010822a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010822d:	8b 55 08             	mov    0x8(%ebp),%edx
c0108230:	89 10                	mov    %edx,(%eax)
    list_add_after(le_prev, &(vma->list_link));
c0108232:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108235:	8d 50 10             	lea    0x10(%eax),%edx
c0108238:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010823b:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010823e:	89 55 d4             	mov    %edx,-0x2c(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0108241:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108244:	8b 40 04             	mov    0x4(%eax),%eax
c0108247:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010824a:	89 55 d0             	mov    %edx,-0x30(%ebp)
c010824d:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0108250:	89 55 cc             	mov    %edx,-0x34(%ebp)
c0108253:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0108256:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0108259:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010825c:	89 10                	mov    %edx,(%eax)
c010825e:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0108261:	8b 10                	mov    (%eax),%edx
c0108263:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0108266:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0108269:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010826c:	8b 55 c8             	mov    -0x38(%ebp),%edx
c010826f:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0108272:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0108275:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0108278:	89 10                	mov    %edx,(%eax)

    mm->map_count ++;
c010827a:	8b 45 08             	mov    0x8(%ebp),%eax
c010827d:	8b 40 10             	mov    0x10(%eax),%eax
c0108280:	8d 50 01             	lea    0x1(%eax),%edx
c0108283:	8b 45 08             	mov    0x8(%ebp),%eax
c0108286:	89 50 10             	mov    %edx,0x10(%eax)
}
c0108289:	c9                   	leave  
c010828a:	c3                   	ret    

c010828b <mm_destroy>:

// mm_destroy - free mm and mm internal fields
void
mm_destroy(struct mm_struct *mm) {
c010828b:	55                   	push   %ebp
c010828c:	89 e5                	mov    %esp,%ebp
c010828e:	83 ec 38             	sub    $0x38,%esp
    assert(mm_count(mm) == 0);
c0108291:	8b 45 08             	mov    0x8(%ebp),%eax
c0108294:	89 04 24             	mov    %eax,(%esp)
c0108297:	e8 22 fc ff ff       	call   c0107ebe <mm_count>
c010829c:	85 c0                	test   %eax,%eax
c010829e:	74 24                	je     c01082c4 <mm_destroy+0x39>
c01082a0:	c7 44 24 0c dd 71 11 	movl   $0xc01171dd,0xc(%esp)
c01082a7:	c0 
c01082a8:	c7 44 24 08 5f 71 11 	movl   $0xc011715f,0x8(%esp)
c01082af:	c0 
c01082b0:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
c01082b7:	00 
c01082b8:	c7 04 24 74 71 11 c0 	movl   $0xc0117174,(%esp)
c01082bf:	e8 04 8c ff ff       	call   c0100ec8 <__panic>

    list_entry_t *list = &(mm->mmap_list), *le;
c01082c4:	8b 45 08             	mov    0x8(%ebp),%eax
c01082c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(list)) != list) {
c01082ca:	eb 36                	jmp    c0108302 <mm_destroy+0x77>
c01082cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01082cf:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c01082d2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01082d5:	8b 40 04             	mov    0x4(%eax),%eax
c01082d8:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01082db:	8b 12                	mov    (%edx),%edx
c01082dd:	89 55 e8             	mov    %edx,-0x18(%ebp)
c01082e0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01082e3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01082e6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01082e9:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c01082ec:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01082ef:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01082f2:	89 10                	mov    %edx,(%eax)
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
c01082f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01082f7:	83 e8 10             	sub    $0x10,%eax
c01082fa:	89 04 24             	mov    %eax,(%esp)
c01082fd:	e8 f8 c9 ff ff       	call   c0104cfa <kfree>
c0108302:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108305:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0108308:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010830b:	8b 40 04             	mov    0x4(%eax),%eax
void
mm_destroy(struct mm_struct *mm) {
    assert(mm_count(mm) == 0);

    list_entry_t *list = &(mm->mmap_list), *le;
    while ((le = list_next(list)) != list) {
c010830e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108311:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108314:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0108317:	75 b3                	jne    c01082cc <mm_destroy+0x41>
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
    }
    kfree(mm); //kfree mm
c0108319:	8b 45 08             	mov    0x8(%ebp),%eax
c010831c:	89 04 24             	mov    %eax,(%esp)
c010831f:	e8 d6 c9 ff ff       	call   c0104cfa <kfree>
    mm=NULL;
c0108324:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
}
c010832b:	c9                   	leave  
c010832c:	c3                   	ret    

c010832d <mm_map>:

int
mm_map(struct mm_struct *mm, uintptr_t addr, size_t len, uint32_t vm_flags,
       struct vma_struct **vma_store) {
c010832d:	55                   	push   %ebp
c010832e:	89 e5                	mov    %esp,%ebp
c0108330:	83 ec 38             	sub    $0x38,%esp
    uintptr_t start = ROUNDDOWN(addr, PGSIZE), end = ROUNDUP(addr + len, PGSIZE);
c0108333:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108336:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108339:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010833c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108341:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0108344:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
c010834b:	8b 45 10             	mov    0x10(%ebp),%eax
c010834e:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108351:	01 c2                	add    %eax,%edx
c0108353:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108356:	01 d0                	add    %edx,%eax
c0108358:	83 e8 01             	sub    $0x1,%eax
c010835b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010835e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108361:	ba 00 00 00 00       	mov    $0x0,%edx
c0108366:	f7 75 e8             	divl   -0x18(%ebp)
c0108369:	89 d0                	mov    %edx,%eax
c010836b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010836e:	29 c2                	sub    %eax,%edx
c0108370:	89 d0                	mov    %edx,%eax
c0108372:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (!USER_ACCESS(start, end)) {
c0108375:	81 7d ec ff ff 1f 00 	cmpl   $0x1fffff,-0x14(%ebp)
c010837c:	76 11                	jbe    c010838f <mm_map+0x62>
c010837e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108381:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0108384:	73 09                	jae    c010838f <mm_map+0x62>
c0108386:	81 7d e0 00 00 00 b0 	cmpl   $0xb0000000,-0x20(%ebp)
c010838d:	76 0a                	jbe    c0108399 <mm_map+0x6c>
        return -E_INVAL;
c010838f:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0108394:	e9 ae 00 00 00       	jmp    c0108447 <mm_map+0x11a>
    }

    assert(mm != NULL);
c0108399:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010839d:	75 24                	jne    c01083c3 <mm_map+0x96>
c010839f:	c7 44 24 0c ef 71 11 	movl   $0xc01171ef,0xc(%esp)
c01083a6:	c0 
c01083a7:	c7 44 24 08 5f 71 11 	movl   $0xc011715f,0x8(%esp)
c01083ae:	c0 
c01083af:	c7 44 24 04 a7 00 00 	movl   $0xa7,0x4(%esp)
c01083b6:	00 
c01083b7:	c7 04 24 74 71 11 c0 	movl   $0xc0117174,(%esp)
c01083be:	e8 05 8b ff ff       	call   c0100ec8 <__panic>

    int ret = -E_INVAL;
c01083c3:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)

    struct vma_struct *vma;
    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
c01083ca:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01083cd:	89 44 24 04          	mov    %eax,0x4(%esp)
c01083d1:	8b 45 08             	mov    0x8(%ebp),%eax
c01083d4:	89 04 24             	mov    %eax,(%esp)
c01083d7:	e8 2a fc ff ff       	call   c0108006 <find_vma>
c01083dc:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01083df:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01083e3:	74 0d                	je     c01083f2 <mm_map+0xc5>
c01083e5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01083e8:	8b 40 04             	mov    0x4(%eax),%eax
c01083eb:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01083ee:	73 02                	jae    c01083f2 <mm_map+0xc5>
        goto out;
c01083f0:	eb 52                	jmp    c0108444 <mm_map+0x117>
    }
    ret = -E_NO_MEM;
c01083f2:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
c01083f9:	8b 45 14             	mov    0x14(%ebp),%eax
c01083fc:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108400:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108403:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108407:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010840a:	89 04 24             	mov    %eax,(%esp)
c010840d:	e8 b9 fb ff ff       	call   c0107fcb <vma_create>
c0108412:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0108415:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0108419:	75 02                	jne    c010841d <mm_map+0xf0>
        goto out;
c010841b:	eb 27                	jmp    c0108444 <mm_map+0x117>
    }
    insert_vma_struct(mm, vma);
c010841d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108420:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108424:	8b 45 08             	mov    0x8(%ebp),%eax
c0108427:	89 04 24             	mov    %eax,(%esp)
c010842a:	e8 2c fd ff ff       	call   c010815b <insert_vma_struct>
    if (vma_store != NULL) {
c010842f:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0108433:	74 08                	je     c010843d <mm_map+0x110>
        *vma_store = vma;
c0108435:	8b 45 18             	mov    0x18(%ebp),%eax
c0108438:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010843b:	89 10                	mov    %edx,(%eax)
    }
    ret = 0;
c010843d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

out:
    return ret;
c0108444:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0108447:	c9                   	leave  
c0108448:	c3                   	ret    

c0108449 <dup_mmap>:

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
c0108449:	55                   	push   %ebp
c010844a:	89 e5                	mov    %esp,%ebp
c010844c:	56                   	push   %esi
c010844d:	53                   	push   %ebx
c010844e:	83 ec 40             	sub    $0x40,%esp
    assert(to != NULL && from != NULL);
c0108451:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0108455:	74 06                	je     c010845d <dup_mmap+0x14>
c0108457:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010845b:	75 24                	jne    c0108481 <dup_mmap+0x38>
c010845d:	c7 44 24 0c fa 71 11 	movl   $0xc01171fa,0xc(%esp)
c0108464:	c0 
c0108465:	c7 44 24 08 5f 71 11 	movl   $0xc011715f,0x8(%esp)
c010846c:	c0 
c010846d:	c7 44 24 04 c0 00 00 	movl   $0xc0,0x4(%esp)
c0108474:	00 
c0108475:	c7 04 24 74 71 11 c0 	movl   $0xc0117174,(%esp)
c010847c:	e8 47 8a ff ff       	call   c0100ec8 <__panic>
    list_entry_t *list = &(from->mmap_list), *le = list;
c0108481:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108484:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108487:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010848a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_prev(le)) != list) {
c010848d:	e9 92 00 00 00       	jmp    c0108524 <dup_mmap+0xdb>
        struct vma_struct *vma, *nvma;
        vma = le2vma(le, list_link);
c0108492:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108495:	83 e8 10             	sub    $0x10,%eax
c0108498:	89 45 ec             	mov    %eax,-0x14(%ebp)
        nvma = vma_create(vma->vm_start, vma->vm_end, vma->vm_flags);
c010849b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010849e:	8b 48 0c             	mov    0xc(%eax),%ecx
c01084a1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01084a4:	8b 50 08             	mov    0x8(%eax),%edx
c01084a7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01084aa:	8b 40 04             	mov    0x4(%eax),%eax
c01084ad:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01084b1:	89 54 24 04          	mov    %edx,0x4(%esp)
c01084b5:	89 04 24             	mov    %eax,(%esp)
c01084b8:	e8 0e fb ff ff       	call   c0107fcb <vma_create>
c01084bd:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (nvma == NULL) {
c01084c0:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01084c4:	75 07                	jne    c01084cd <dup_mmap+0x84>
            return -E_NO_MEM;
c01084c6:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c01084cb:	eb 76                	jmp    c0108543 <dup_mmap+0xfa>
        }

        insert_vma_struct(to, nvma);
c01084cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01084d0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01084d4:	8b 45 08             	mov    0x8(%ebp),%eax
c01084d7:	89 04 24             	mov    %eax,(%esp)
c01084da:	e8 7c fc ff ff       	call   c010815b <insert_vma_struct>

        bool share = 0;
c01084df:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
c01084e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01084e9:	8b 58 08             	mov    0x8(%eax),%ebx
c01084ec:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01084ef:	8b 48 04             	mov    0x4(%eax),%ecx
c01084f2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01084f5:	8b 50 0c             	mov    0xc(%eax),%edx
c01084f8:	8b 45 08             	mov    0x8(%ebp),%eax
c01084fb:	8b 40 0c             	mov    0xc(%eax),%eax
c01084fe:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c0108501:	89 74 24 10          	mov    %esi,0x10(%esp)
c0108505:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0108509:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010850d:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108511:	89 04 24             	mov    %eax,(%esp)
c0108514:	e8 af d7 ff ff       	call   c0105cc8 <copy_range>
c0108519:	85 c0                	test   %eax,%eax
c010851b:	74 07                	je     c0108524 <dup_mmap+0xdb>
            return -E_NO_MEM;
c010851d:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0108522:	eb 1f                	jmp    c0108543 <dup_mmap+0xfa>
c0108524:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108527:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010852a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010852d:	8b 00                	mov    (%eax),%eax

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
    assert(to != NULL && from != NULL);
    list_entry_t *list = &(from->mmap_list), *le = list;
    while ((le = list_prev(le)) != list) {
c010852f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108532:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108535:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0108538:	0f 85 54 ff ff ff    	jne    c0108492 <dup_mmap+0x49>
        bool share = 0;
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
            return -E_NO_MEM;
        }
    }
    return 0;
c010853e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108543:	83 c4 40             	add    $0x40,%esp
c0108546:	5b                   	pop    %ebx
c0108547:	5e                   	pop    %esi
c0108548:	5d                   	pop    %ebp
c0108549:	c3                   	ret    

c010854a <exit_mmap>:

void
exit_mmap(struct mm_struct *mm) {
c010854a:	55                   	push   %ebp
c010854b:	89 e5                	mov    %esp,%ebp
c010854d:	83 ec 38             	sub    $0x38,%esp
    assert(mm != NULL && mm_count(mm) == 0);
c0108550:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0108554:	74 0f                	je     c0108565 <exit_mmap+0x1b>
c0108556:	8b 45 08             	mov    0x8(%ebp),%eax
c0108559:	89 04 24             	mov    %eax,(%esp)
c010855c:	e8 5d f9 ff ff       	call   c0107ebe <mm_count>
c0108561:	85 c0                	test   %eax,%eax
c0108563:	74 24                	je     c0108589 <exit_mmap+0x3f>
c0108565:	c7 44 24 0c 18 72 11 	movl   $0xc0117218,0xc(%esp)
c010856c:	c0 
c010856d:	c7 44 24 08 5f 71 11 	movl   $0xc011715f,0x8(%esp)
c0108574:	c0 
c0108575:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c010857c:	00 
c010857d:	c7 04 24 74 71 11 c0 	movl   $0xc0117174,(%esp)
c0108584:	e8 3f 89 ff ff       	call   c0100ec8 <__panic>
    pde_t *pgdir = mm->pgdir;
c0108589:	8b 45 08             	mov    0x8(%ebp),%eax
c010858c:	8b 40 0c             	mov    0xc(%eax),%eax
c010858f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    list_entry_t *list = &(mm->mmap_list), *le = list;
c0108592:	8b 45 08             	mov    0x8(%ebp),%eax
c0108595:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0108598:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010859b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c010859e:	eb 28                	jmp    c01085c8 <exit_mmap+0x7e>
        struct vma_struct *vma = le2vma(le, list_link);
c01085a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01085a3:	83 e8 10             	sub    $0x10,%eax
c01085a6:	89 45 e8             	mov    %eax,-0x18(%ebp)
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
c01085a9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01085ac:	8b 50 08             	mov    0x8(%eax),%edx
c01085af:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01085b2:	8b 40 04             	mov    0x4(%eax),%eax
c01085b5:	89 54 24 08          	mov    %edx,0x8(%esp)
c01085b9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01085bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01085c0:	89 04 24             	mov    %eax,(%esp)
c01085c3:	e8 05 d5 ff ff       	call   c0105acd <unmap_range>
c01085c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01085cb:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01085ce:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01085d1:	8b 40 04             	mov    0x4(%eax),%eax
void
exit_mmap(struct mm_struct *mm) {
    assert(mm != NULL && mm_count(mm) == 0);
    pde_t *pgdir = mm->pgdir;
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
c01085d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01085d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01085da:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01085dd:	75 c1                	jne    c01085a0 <exit_mmap+0x56>
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c01085df:	eb 28                	jmp    c0108609 <exit_mmap+0xbf>
        struct vma_struct *vma = le2vma(le, list_link);
c01085e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01085e4:	83 e8 10             	sub    $0x10,%eax
c01085e7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        exit_range(pgdir, vma->vm_start, vma->vm_end);
c01085ea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01085ed:	8b 50 08             	mov    0x8(%eax),%edx
c01085f0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01085f3:	8b 40 04             	mov    0x4(%eax),%eax
c01085f6:	89 54 24 08          	mov    %edx,0x8(%esp)
c01085fa:	89 44 24 04          	mov    %eax,0x4(%esp)
c01085fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108601:	89 04 24             	mov    %eax,(%esp)
c0108604:	e8 b8 d5 ff ff       	call   c0105bc1 <exit_range>
c0108609:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010860c:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010860f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108612:	8b 40 04             	mov    0x4(%eax),%eax
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c0108615:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108618:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010861b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010861e:	75 c1                	jne    c01085e1 <exit_mmap+0x97>
        struct vma_struct *vma = le2vma(le, list_link);
        exit_range(pgdir, vma->vm_start, vma->vm_end);
    }
}
c0108620:	c9                   	leave  
c0108621:	c3                   	ret    

c0108622 <copy_from_user>:

bool
copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable) {
c0108622:	55                   	push   %ebp
c0108623:	89 e5                	mov    %esp,%ebp
c0108625:	83 ec 18             	sub    $0x18,%esp
    if (!user_mem_check(mm, (uintptr_t)src, len, writable)) {
c0108628:	8b 45 10             	mov    0x10(%ebp),%eax
c010862b:	8b 55 18             	mov    0x18(%ebp),%edx
c010862e:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0108632:	8b 55 14             	mov    0x14(%ebp),%edx
c0108635:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108639:	89 44 24 04          	mov    %eax,0x4(%esp)
c010863d:	8b 45 08             	mov    0x8(%ebp),%eax
c0108640:	89 04 24             	mov    %eax,(%esp)
c0108643:	e8 dc 09 00 00       	call   c0109024 <user_mem_check>
c0108648:	85 c0                	test   %eax,%eax
c010864a:	75 07                	jne    c0108653 <copy_from_user+0x31>
        return 0;
c010864c:	b8 00 00 00 00       	mov    $0x0,%eax
c0108651:	eb 1e                	jmp    c0108671 <copy_from_user+0x4f>
    }
    memcpy(dst, src, len);
c0108653:	8b 45 14             	mov    0x14(%ebp),%eax
c0108656:	89 44 24 08          	mov    %eax,0x8(%esp)
c010865a:	8b 45 10             	mov    0x10(%ebp),%eax
c010865d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108661:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108664:	89 04 24             	mov    %eax,(%esp)
c0108667:	e8 bb cf 00 00       	call   c0115627 <memcpy>
    return 1;
c010866c:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0108671:	c9                   	leave  
c0108672:	c3                   	ret    

c0108673 <copy_to_user>:

bool
copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len) {
c0108673:	55                   	push   %ebp
c0108674:	89 e5                	mov    %esp,%ebp
c0108676:	83 ec 18             	sub    $0x18,%esp
    if (!user_mem_check(mm, (uintptr_t)dst, len, 1)) {
c0108679:	8b 45 0c             	mov    0xc(%ebp),%eax
c010867c:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0108683:	00 
c0108684:	8b 55 14             	mov    0x14(%ebp),%edx
c0108687:	89 54 24 08          	mov    %edx,0x8(%esp)
c010868b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010868f:	8b 45 08             	mov    0x8(%ebp),%eax
c0108692:	89 04 24             	mov    %eax,(%esp)
c0108695:	e8 8a 09 00 00       	call   c0109024 <user_mem_check>
c010869a:	85 c0                	test   %eax,%eax
c010869c:	75 07                	jne    c01086a5 <copy_to_user+0x32>
        return 0;
c010869e:	b8 00 00 00 00       	mov    $0x0,%eax
c01086a3:	eb 1e                	jmp    c01086c3 <copy_to_user+0x50>
    }
    memcpy(dst, src, len);
c01086a5:	8b 45 14             	mov    0x14(%ebp),%eax
c01086a8:	89 44 24 08          	mov    %eax,0x8(%esp)
c01086ac:	8b 45 10             	mov    0x10(%ebp),%eax
c01086af:	89 44 24 04          	mov    %eax,0x4(%esp)
c01086b3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01086b6:	89 04 24             	mov    %eax,(%esp)
c01086b9:	e8 69 cf 00 00       	call   c0115627 <memcpy>
    return 1;
c01086be:	b8 01 00 00 00       	mov    $0x1,%eax
}
c01086c3:	c9                   	leave  
c01086c4:	c3                   	ret    

c01086c5 <vmm_init>:

// vmm_init - initialize virtual memory management
//          - now just call check_vmm to check correctness of vmm
void
vmm_init(void) {
c01086c5:	55                   	push   %ebp
c01086c6:	89 e5                	mov    %esp,%ebp
c01086c8:	83 ec 08             	sub    $0x8,%esp
    check_vmm();
c01086cb:	e8 02 00 00 00       	call   c01086d2 <check_vmm>
}
c01086d0:	c9                   	leave  
c01086d1:	c3                   	ret    

c01086d2 <check_vmm>:

// check_vmm - check correctness of vmm
static void
check_vmm(void) {
c01086d2:	55                   	push   %ebp
c01086d3:	89 e5                	mov    %esp,%ebp
c01086d5:	83 ec 28             	sub    $0x28,%esp
    size_t nr_free_pages_store = nr_free_pages();
c01086d8:	e8 24 cb ff ff       	call   c0105201 <nr_free_pages>
c01086dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    check_vma_struct();
c01086e0:	e8 13 00 00 00       	call   c01086f8 <check_vma_struct>
    check_pgfault();
c01086e5:	e8 a7 04 00 00       	call   c0108b91 <check_pgfault>

    //assert(nr_free_pages_store == nr_free_pages());

    cprintf("check_vmm() succeeded.\n");
c01086ea:	c7 04 24 38 72 11 c0 	movl   $0xc0117238,(%esp)
c01086f1:	e8 6f 7c ff ff       	call   c0100365 <cprintf>
}
c01086f6:	c9                   	leave  
c01086f7:	c3                   	ret    

c01086f8 <check_vma_struct>:

static void
check_vma_struct(void) {
c01086f8:	55                   	push   %ebp
c01086f9:	89 e5                	mov    %esp,%ebp
c01086fb:	83 ec 68             	sub    $0x68,%esp
    size_t nr_free_pages_store = nr_free_pages();
c01086fe:	e8 fe ca ff ff       	call   c0105201 <nr_free_pages>
c0108703:	89 45 ec             	mov    %eax,-0x14(%ebp)

    struct mm_struct *mm = mm_create();
c0108706:	e8 1b f8 ff ff       	call   c0107f26 <mm_create>
c010870b:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(mm != NULL);
c010870e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0108712:	75 24                	jne    c0108738 <check_vma_struct+0x40>
c0108714:	c7 44 24 0c ef 71 11 	movl   $0xc01171ef,0xc(%esp)
c010871b:	c0 
c010871c:	c7 44 24 08 5f 71 11 	movl   $0xc011715f,0x8(%esp)
c0108723:	c0 
c0108724:	c7 44 24 04 0e 01 00 	movl   $0x10e,0x4(%esp)
c010872b:	00 
c010872c:	c7 04 24 74 71 11 c0 	movl   $0xc0117174,(%esp)
c0108733:	e8 90 87 ff ff       	call   c0100ec8 <__panic>

    int step1 = 10, step2 = step1 * 10;
c0108738:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%ebp)
c010873f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0108742:	89 d0                	mov    %edx,%eax
c0108744:	c1 e0 02             	shl    $0x2,%eax
c0108747:	01 d0                	add    %edx,%eax
c0108749:	01 c0                	add    %eax,%eax
c010874b:	89 45 e0             	mov    %eax,-0x20(%ebp)

    int i;
    for (i = step1; i >= 1; i --) {
c010874e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108751:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108754:	eb 70                	jmp    c01087c6 <check_vma_struct+0xce>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c0108756:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108759:	89 d0                	mov    %edx,%eax
c010875b:	c1 e0 02             	shl    $0x2,%eax
c010875e:	01 d0                	add    %edx,%eax
c0108760:	83 c0 02             	add    $0x2,%eax
c0108763:	89 c1                	mov    %eax,%ecx
c0108765:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108768:	89 d0                	mov    %edx,%eax
c010876a:	c1 e0 02             	shl    $0x2,%eax
c010876d:	01 d0                	add    %edx,%eax
c010876f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0108776:	00 
c0108777:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010877b:	89 04 24             	mov    %eax,(%esp)
c010877e:	e8 48 f8 ff ff       	call   c0107fcb <vma_create>
c0108783:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(vma != NULL);
c0108786:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010878a:	75 24                	jne    c01087b0 <check_vma_struct+0xb8>
c010878c:	c7 44 24 0c 50 72 11 	movl   $0xc0117250,0xc(%esp)
c0108793:	c0 
c0108794:	c7 44 24 08 5f 71 11 	movl   $0xc011715f,0x8(%esp)
c010879b:	c0 
c010879c:	c7 44 24 04 15 01 00 	movl   $0x115,0x4(%esp)
c01087a3:	00 
c01087a4:	c7 04 24 74 71 11 c0 	movl   $0xc0117174,(%esp)
c01087ab:	e8 18 87 ff ff       	call   c0100ec8 <__panic>
        insert_vma_struct(mm, vma);
c01087b0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01087b3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01087b7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01087ba:	89 04 24             	mov    %eax,(%esp)
c01087bd:	e8 99 f9 ff ff       	call   c010815b <insert_vma_struct>
    assert(mm != NULL);

    int step1 = 10, step2 = step1 * 10;

    int i;
    for (i = step1; i >= 1; i --) {
c01087c2:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01087c6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01087ca:	7f 8a                	jg     c0108756 <check_vma_struct+0x5e>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c01087cc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01087cf:	83 c0 01             	add    $0x1,%eax
c01087d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01087d5:	eb 70                	jmp    c0108847 <check_vma_struct+0x14f>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c01087d7:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01087da:	89 d0                	mov    %edx,%eax
c01087dc:	c1 e0 02             	shl    $0x2,%eax
c01087df:	01 d0                	add    %edx,%eax
c01087e1:	83 c0 02             	add    $0x2,%eax
c01087e4:	89 c1                	mov    %eax,%ecx
c01087e6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01087e9:	89 d0                	mov    %edx,%eax
c01087eb:	c1 e0 02             	shl    $0x2,%eax
c01087ee:	01 d0                	add    %edx,%eax
c01087f0:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01087f7:	00 
c01087f8:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c01087fc:	89 04 24             	mov    %eax,(%esp)
c01087ff:	e8 c7 f7 ff ff       	call   c0107fcb <vma_create>
c0108804:	89 45 d8             	mov    %eax,-0x28(%ebp)
        assert(vma != NULL);
c0108807:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c010880b:	75 24                	jne    c0108831 <check_vma_struct+0x139>
c010880d:	c7 44 24 0c 50 72 11 	movl   $0xc0117250,0xc(%esp)
c0108814:	c0 
c0108815:	c7 44 24 08 5f 71 11 	movl   $0xc011715f,0x8(%esp)
c010881c:	c0 
c010881d:	c7 44 24 04 1b 01 00 	movl   $0x11b,0x4(%esp)
c0108824:	00 
c0108825:	c7 04 24 74 71 11 c0 	movl   $0xc0117174,(%esp)
c010882c:	e8 97 86 ff ff       	call   c0100ec8 <__panic>
        insert_vma_struct(mm, vma);
c0108831:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108834:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108838:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010883b:	89 04 24             	mov    %eax,(%esp)
c010883e:	e8 18 f9 ff ff       	call   c010815b <insert_vma_struct>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c0108843:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108847:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010884a:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010884d:	7e 88                	jle    c01087d7 <check_vma_struct+0xdf>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));
c010884f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108852:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0108855:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0108858:	8b 40 04             	mov    0x4(%eax),%eax
c010885b:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (i = 1; i <= step2; i ++) {
c010885e:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c0108865:	e9 97 00 00 00       	jmp    c0108901 <check_vma_struct+0x209>
        assert(le != &(mm->mmap_list));
c010886a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010886d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0108870:	75 24                	jne    c0108896 <check_vma_struct+0x19e>
c0108872:	c7 44 24 0c 5c 72 11 	movl   $0xc011725c,0xc(%esp)
c0108879:	c0 
c010887a:	c7 44 24 08 5f 71 11 	movl   $0xc011715f,0x8(%esp)
c0108881:	c0 
c0108882:	c7 44 24 04 22 01 00 	movl   $0x122,0x4(%esp)
c0108889:	00 
c010888a:	c7 04 24 74 71 11 c0 	movl   $0xc0117174,(%esp)
c0108891:	e8 32 86 ff ff       	call   c0100ec8 <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
c0108896:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108899:	83 e8 10             	sub    $0x10,%eax
c010889c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
c010889f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01088a2:	8b 48 04             	mov    0x4(%eax),%ecx
c01088a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01088a8:	89 d0                	mov    %edx,%eax
c01088aa:	c1 e0 02             	shl    $0x2,%eax
c01088ad:	01 d0                	add    %edx,%eax
c01088af:	39 c1                	cmp    %eax,%ecx
c01088b1:	75 17                	jne    c01088ca <check_vma_struct+0x1d2>
c01088b3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01088b6:	8b 48 08             	mov    0x8(%eax),%ecx
c01088b9:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01088bc:	89 d0                	mov    %edx,%eax
c01088be:	c1 e0 02             	shl    $0x2,%eax
c01088c1:	01 d0                	add    %edx,%eax
c01088c3:	83 c0 02             	add    $0x2,%eax
c01088c6:	39 c1                	cmp    %eax,%ecx
c01088c8:	74 24                	je     c01088ee <check_vma_struct+0x1f6>
c01088ca:	c7 44 24 0c 74 72 11 	movl   $0xc0117274,0xc(%esp)
c01088d1:	c0 
c01088d2:	c7 44 24 08 5f 71 11 	movl   $0xc011715f,0x8(%esp)
c01088d9:	c0 
c01088da:	c7 44 24 04 24 01 00 	movl   $0x124,0x4(%esp)
c01088e1:	00 
c01088e2:	c7 04 24 74 71 11 c0 	movl   $0xc0117174,(%esp)
c01088e9:	e8 da 85 ff ff       	call   c0100ec8 <__panic>
c01088ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01088f1:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c01088f4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01088f7:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c01088fa:	89 45 f0             	mov    %eax,-0x10(%ebp)
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));

    for (i = 1; i <= step2; i ++) {
c01088fd:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108901:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108904:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0108907:	0f 8e 5d ff ff ff    	jle    c010886a <check_vma_struct+0x172>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c010890d:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
c0108914:	e9 cd 01 00 00       	jmp    c0108ae6 <check_vma_struct+0x3ee>
        struct vma_struct *vma1 = find_vma(mm, i);
c0108919:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010891c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108920:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108923:	89 04 24             	mov    %eax,(%esp)
c0108926:	e8 db f6 ff ff       	call   c0108006 <find_vma>
c010892b:	89 45 d0             	mov    %eax,-0x30(%ebp)
        assert(vma1 != NULL);
c010892e:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c0108932:	75 24                	jne    c0108958 <check_vma_struct+0x260>
c0108934:	c7 44 24 0c a9 72 11 	movl   $0xc01172a9,0xc(%esp)
c010893b:	c0 
c010893c:	c7 44 24 08 5f 71 11 	movl   $0xc011715f,0x8(%esp)
c0108943:	c0 
c0108944:	c7 44 24 04 2a 01 00 	movl   $0x12a,0x4(%esp)
c010894b:	00 
c010894c:	c7 04 24 74 71 11 c0 	movl   $0xc0117174,(%esp)
c0108953:	e8 70 85 ff ff       	call   c0100ec8 <__panic>
        struct vma_struct *vma2 = find_vma(mm, i+1);
c0108958:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010895b:	83 c0 01             	add    $0x1,%eax
c010895e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108962:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108965:	89 04 24             	mov    %eax,(%esp)
c0108968:	e8 99 f6 ff ff       	call   c0108006 <find_vma>
c010896d:	89 45 cc             	mov    %eax,-0x34(%ebp)
        assert(vma2 != NULL);
c0108970:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0108974:	75 24                	jne    c010899a <check_vma_struct+0x2a2>
c0108976:	c7 44 24 0c b6 72 11 	movl   $0xc01172b6,0xc(%esp)
c010897d:	c0 
c010897e:	c7 44 24 08 5f 71 11 	movl   $0xc011715f,0x8(%esp)
c0108985:	c0 
c0108986:	c7 44 24 04 2c 01 00 	movl   $0x12c,0x4(%esp)
c010898d:	00 
c010898e:	c7 04 24 74 71 11 c0 	movl   $0xc0117174,(%esp)
c0108995:	e8 2e 85 ff ff       	call   c0100ec8 <__panic>
        struct vma_struct *vma3 = find_vma(mm, i+2);
c010899a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010899d:	83 c0 02             	add    $0x2,%eax
c01089a0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01089a4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01089a7:	89 04 24             	mov    %eax,(%esp)
c01089aa:	e8 57 f6 ff ff       	call   c0108006 <find_vma>
c01089af:	89 45 c8             	mov    %eax,-0x38(%ebp)
        assert(vma3 == NULL);
c01089b2:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c01089b6:	74 24                	je     c01089dc <check_vma_struct+0x2e4>
c01089b8:	c7 44 24 0c c3 72 11 	movl   $0xc01172c3,0xc(%esp)
c01089bf:	c0 
c01089c0:	c7 44 24 08 5f 71 11 	movl   $0xc011715f,0x8(%esp)
c01089c7:	c0 
c01089c8:	c7 44 24 04 2e 01 00 	movl   $0x12e,0x4(%esp)
c01089cf:	00 
c01089d0:	c7 04 24 74 71 11 c0 	movl   $0xc0117174,(%esp)
c01089d7:	e8 ec 84 ff ff       	call   c0100ec8 <__panic>
        struct vma_struct *vma4 = find_vma(mm, i+3);
c01089dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01089df:	83 c0 03             	add    $0x3,%eax
c01089e2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01089e6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01089e9:	89 04 24             	mov    %eax,(%esp)
c01089ec:	e8 15 f6 ff ff       	call   c0108006 <find_vma>
c01089f1:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        assert(vma4 == NULL);
c01089f4:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
c01089f8:	74 24                	je     c0108a1e <check_vma_struct+0x326>
c01089fa:	c7 44 24 0c d0 72 11 	movl   $0xc01172d0,0xc(%esp)
c0108a01:	c0 
c0108a02:	c7 44 24 08 5f 71 11 	movl   $0xc011715f,0x8(%esp)
c0108a09:	c0 
c0108a0a:	c7 44 24 04 30 01 00 	movl   $0x130,0x4(%esp)
c0108a11:	00 
c0108a12:	c7 04 24 74 71 11 c0 	movl   $0xc0117174,(%esp)
c0108a19:	e8 aa 84 ff ff       	call   c0100ec8 <__panic>
        struct vma_struct *vma5 = find_vma(mm, i+4);
c0108a1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108a21:	83 c0 04             	add    $0x4,%eax
c0108a24:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108a28:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108a2b:	89 04 24             	mov    %eax,(%esp)
c0108a2e:	e8 d3 f5 ff ff       	call   c0108006 <find_vma>
c0108a33:	89 45 c0             	mov    %eax,-0x40(%ebp)
        assert(vma5 == NULL);
c0108a36:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
c0108a3a:	74 24                	je     c0108a60 <check_vma_struct+0x368>
c0108a3c:	c7 44 24 0c dd 72 11 	movl   $0xc01172dd,0xc(%esp)
c0108a43:	c0 
c0108a44:	c7 44 24 08 5f 71 11 	movl   $0xc011715f,0x8(%esp)
c0108a4b:	c0 
c0108a4c:	c7 44 24 04 32 01 00 	movl   $0x132,0x4(%esp)
c0108a53:	00 
c0108a54:	c7 04 24 74 71 11 c0 	movl   $0xc0117174,(%esp)
c0108a5b:	e8 68 84 ff ff       	call   c0100ec8 <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
c0108a60:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0108a63:	8b 50 04             	mov    0x4(%eax),%edx
c0108a66:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108a69:	39 c2                	cmp    %eax,%edx
c0108a6b:	75 10                	jne    c0108a7d <check_vma_struct+0x385>
c0108a6d:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0108a70:	8b 50 08             	mov    0x8(%eax),%edx
c0108a73:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108a76:	83 c0 02             	add    $0x2,%eax
c0108a79:	39 c2                	cmp    %eax,%edx
c0108a7b:	74 24                	je     c0108aa1 <check_vma_struct+0x3a9>
c0108a7d:	c7 44 24 0c ec 72 11 	movl   $0xc01172ec,0xc(%esp)
c0108a84:	c0 
c0108a85:	c7 44 24 08 5f 71 11 	movl   $0xc011715f,0x8(%esp)
c0108a8c:	c0 
c0108a8d:	c7 44 24 04 34 01 00 	movl   $0x134,0x4(%esp)
c0108a94:	00 
c0108a95:	c7 04 24 74 71 11 c0 	movl   $0xc0117174,(%esp)
c0108a9c:	e8 27 84 ff ff       	call   c0100ec8 <__panic>
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
c0108aa1:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0108aa4:	8b 50 04             	mov    0x4(%eax),%edx
c0108aa7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108aaa:	39 c2                	cmp    %eax,%edx
c0108aac:	75 10                	jne    c0108abe <check_vma_struct+0x3c6>
c0108aae:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0108ab1:	8b 50 08             	mov    0x8(%eax),%edx
c0108ab4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108ab7:	83 c0 02             	add    $0x2,%eax
c0108aba:	39 c2                	cmp    %eax,%edx
c0108abc:	74 24                	je     c0108ae2 <check_vma_struct+0x3ea>
c0108abe:	c7 44 24 0c 1c 73 11 	movl   $0xc011731c,0xc(%esp)
c0108ac5:	c0 
c0108ac6:	c7 44 24 08 5f 71 11 	movl   $0xc011715f,0x8(%esp)
c0108acd:	c0 
c0108ace:	c7 44 24 04 35 01 00 	movl   $0x135,0x4(%esp)
c0108ad5:	00 
c0108ad6:	c7 04 24 74 71 11 c0 	movl   $0xc0117174,(%esp)
c0108add:	e8 e6 83 ff ff       	call   c0100ec8 <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c0108ae2:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
c0108ae6:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108ae9:	89 d0                	mov    %edx,%eax
c0108aeb:	c1 e0 02             	shl    $0x2,%eax
c0108aee:	01 d0                	add    %edx,%eax
c0108af0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0108af3:	0f 8d 20 fe ff ff    	jge    c0108919 <check_vma_struct+0x221>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c0108af9:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%ebp)
c0108b00:	eb 70                	jmp    c0108b72 <check_vma_struct+0x47a>
        struct vma_struct *vma_below_5= find_vma(mm,i);
c0108b02:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108b05:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108b09:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108b0c:	89 04 24             	mov    %eax,(%esp)
c0108b0f:	e8 f2 f4 ff ff       	call   c0108006 <find_vma>
c0108b14:	89 45 bc             	mov    %eax,-0x44(%ebp)
        if (vma_below_5 != NULL ) {
c0108b17:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0108b1b:	74 27                	je     c0108b44 <check_vma_struct+0x44c>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
c0108b1d:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0108b20:	8b 50 08             	mov    0x8(%eax),%edx
c0108b23:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0108b26:	8b 40 04             	mov    0x4(%eax),%eax
c0108b29:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0108b2d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108b31:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108b34:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108b38:	c7 04 24 4c 73 11 c0 	movl   $0xc011734c,(%esp)
c0108b3f:	e8 21 78 ff ff       	call   c0100365 <cprintf>
        }
        assert(vma_below_5 == NULL);
c0108b44:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0108b48:	74 24                	je     c0108b6e <check_vma_struct+0x476>
c0108b4a:	c7 44 24 0c 71 73 11 	movl   $0xc0117371,0xc(%esp)
c0108b51:	c0 
c0108b52:	c7 44 24 08 5f 71 11 	movl   $0xc011715f,0x8(%esp)
c0108b59:	c0 
c0108b5a:	c7 44 24 04 3d 01 00 	movl   $0x13d,0x4(%esp)
c0108b61:	00 
c0108b62:	c7 04 24 74 71 11 c0 	movl   $0xc0117174,(%esp)
c0108b69:	e8 5a 83 ff ff       	call   c0100ec8 <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c0108b6e:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0108b72:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108b76:	79 8a                	jns    c0108b02 <check_vma_struct+0x40a>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
        }
        assert(vma_below_5 == NULL);
    }

    mm_destroy(mm);
c0108b78:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108b7b:	89 04 24             	mov    %eax,(%esp)
c0108b7e:	e8 08 f7 ff ff       	call   c010828b <mm_destroy>

  //  assert(nr_free_pages_store == nr_free_pages());

    cprintf("check_vma_struct() succeeded!\n");
c0108b83:	c7 04 24 88 73 11 c0 	movl   $0xc0117388,(%esp)
c0108b8a:	e8 d6 77 ff ff       	call   c0100365 <cprintf>
}
c0108b8f:	c9                   	leave  
c0108b90:	c3                   	ret    

c0108b91 <check_pgfault>:

struct mm_struct *check_mm_struct;

// check_pgfault - check correctness of pgfault handler
static void
check_pgfault(void) {
c0108b91:	55                   	push   %ebp
c0108b92:	89 e5                	mov    %esp,%ebp
c0108b94:	83 ec 38             	sub    $0x38,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0108b97:	e8 65 c6 ff ff       	call   c0105201 <nr_free_pages>
c0108b9c:	89 45 ec             	mov    %eax,-0x14(%ebp)

    check_mm_struct = mm_create();
c0108b9f:	e8 82 f3 ff ff       	call   c0107f26 <mm_create>
c0108ba4:	a3 0c 31 15 c0       	mov    %eax,0xc015310c
    assert(check_mm_struct != NULL);
c0108ba9:	a1 0c 31 15 c0       	mov    0xc015310c,%eax
c0108bae:	85 c0                	test   %eax,%eax
c0108bb0:	75 24                	jne    c0108bd6 <check_pgfault+0x45>
c0108bb2:	c7 44 24 0c a7 73 11 	movl   $0xc01173a7,0xc(%esp)
c0108bb9:	c0 
c0108bba:	c7 44 24 08 5f 71 11 	movl   $0xc011715f,0x8(%esp)
c0108bc1:	c0 
c0108bc2:	c7 44 24 04 4f 01 00 	movl   $0x14f,0x4(%esp)
c0108bc9:	00 
c0108bca:	c7 04 24 74 71 11 c0 	movl   $0xc0117174,(%esp)
c0108bd1:	e8 f2 82 ff ff       	call   c0100ec8 <__panic>

    struct mm_struct *mm = check_mm_struct;
c0108bd6:	a1 0c 31 15 c0       	mov    0xc015310c,%eax
c0108bdb:	89 45 e8             	mov    %eax,-0x18(%ebp)
    pde_t *pgdir = mm->pgdir = boot_pgdir;
c0108bde:	8b 15 84 fe 14 c0    	mov    0xc014fe84,%edx
c0108be4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108be7:	89 50 0c             	mov    %edx,0xc(%eax)
c0108bea:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108bed:	8b 40 0c             	mov    0xc(%eax),%eax
c0108bf0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(pgdir[0] == 0);
c0108bf3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108bf6:	8b 00                	mov    (%eax),%eax
c0108bf8:	85 c0                	test   %eax,%eax
c0108bfa:	74 24                	je     c0108c20 <check_pgfault+0x8f>
c0108bfc:	c7 44 24 0c bf 73 11 	movl   $0xc01173bf,0xc(%esp)
c0108c03:	c0 
c0108c04:	c7 44 24 08 5f 71 11 	movl   $0xc011715f,0x8(%esp)
c0108c0b:	c0 
c0108c0c:	c7 44 24 04 53 01 00 	movl   $0x153,0x4(%esp)
c0108c13:	00 
c0108c14:	c7 04 24 74 71 11 c0 	movl   $0xc0117174,(%esp)
c0108c1b:	e8 a8 82 ff ff       	call   c0100ec8 <__panic>

    struct vma_struct *vma = vma_create(0, PTSIZE, VM_WRITE);
c0108c20:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c0108c27:	00 
c0108c28:	c7 44 24 04 00 00 40 	movl   $0x400000,0x4(%esp)
c0108c2f:	00 
c0108c30:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0108c37:	e8 8f f3 ff ff       	call   c0107fcb <vma_create>
c0108c3c:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(vma != NULL);
c0108c3f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0108c43:	75 24                	jne    c0108c69 <check_pgfault+0xd8>
c0108c45:	c7 44 24 0c 50 72 11 	movl   $0xc0117250,0xc(%esp)
c0108c4c:	c0 
c0108c4d:	c7 44 24 08 5f 71 11 	movl   $0xc011715f,0x8(%esp)
c0108c54:	c0 
c0108c55:	c7 44 24 04 56 01 00 	movl   $0x156,0x4(%esp)
c0108c5c:	00 
c0108c5d:	c7 04 24 74 71 11 c0 	movl   $0xc0117174,(%esp)
c0108c64:	e8 5f 82 ff ff       	call   c0100ec8 <__panic>

    insert_vma_struct(mm, vma);
c0108c69:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108c6c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108c70:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108c73:	89 04 24             	mov    %eax,(%esp)
c0108c76:	e8 e0 f4 ff ff       	call   c010815b <insert_vma_struct>

    uintptr_t addr = 0x100;
c0108c7b:	c7 45 dc 00 01 00 00 	movl   $0x100,-0x24(%ebp)
    assert(find_vma(mm, addr) == vma);
c0108c82:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108c85:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108c89:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108c8c:	89 04 24             	mov    %eax,(%esp)
c0108c8f:	e8 72 f3 ff ff       	call   c0108006 <find_vma>
c0108c94:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0108c97:	74 24                	je     c0108cbd <check_pgfault+0x12c>
c0108c99:	c7 44 24 0c cd 73 11 	movl   $0xc01173cd,0xc(%esp)
c0108ca0:	c0 
c0108ca1:	c7 44 24 08 5f 71 11 	movl   $0xc011715f,0x8(%esp)
c0108ca8:	c0 
c0108ca9:	c7 44 24 04 5b 01 00 	movl   $0x15b,0x4(%esp)
c0108cb0:	00 
c0108cb1:	c7 04 24 74 71 11 c0 	movl   $0xc0117174,(%esp)
c0108cb8:	e8 0b 82 ff ff       	call   c0100ec8 <__panic>

    int i, sum = 0;
c0108cbd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    for (i = 0; i < 100; i ++) {
c0108cc4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108ccb:	eb 17                	jmp    c0108ce4 <check_pgfault+0x153>
        *(char *)(addr + i) = i;
c0108ccd:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108cd0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108cd3:	01 d0                	add    %edx,%eax
c0108cd5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108cd8:	88 10                	mov    %dl,(%eax)
        sum += i;
c0108cda:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108cdd:	01 45 f0             	add    %eax,-0x10(%ebp)

    uintptr_t addr = 0x100;
    assert(find_vma(mm, addr) == vma);

    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
c0108ce0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108ce4:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c0108ce8:	7e e3                	jle    c0108ccd <check_pgfault+0x13c>
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c0108cea:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108cf1:	eb 15                	jmp    c0108d08 <check_pgfault+0x177>
        sum -= *(char *)(addr + i);
c0108cf3:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108cf6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108cf9:	01 d0                	add    %edx,%eax
c0108cfb:	0f b6 00             	movzbl (%eax),%eax
c0108cfe:	0f be c0             	movsbl %al,%eax
c0108d01:	29 45 f0             	sub    %eax,-0x10(%ebp)
    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c0108d04:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108d08:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c0108d0c:	7e e5                	jle    c0108cf3 <check_pgfault+0x162>
        sum -= *(char *)(addr + i);
    }
    assert(sum == 0);
c0108d0e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0108d12:	74 24                	je     c0108d38 <check_pgfault+0x1a7>
c0108d14:	c7 44 24 0c e7 73 11 	movl   $0xc01173e7,0xc(%esp)
c0108d1b:	c0 
c0108d1c:	c7 44 24 08 5f 71 11 	movl   $0xc011715f,0x8(%esp)
c0108d23:	c0 
c0108d24:	c7 44 24 04 65 01 00 	movl   $0x165,0x4(%esp)
c0108d2b:	00 
c0108d2c:	c7 04 24 74 71 11 c0 	movl   $0xc0117174,(%esp)
c0108d33:	e8 90 81 ff ff       	call   c0100ec8 <__panic>

    page_remove(pgdir, ROUNDDOWN(addr, PGSIZE));
c0108d38:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108d3b:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0108d3e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108d41:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108d46:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108d4a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108d4d:	89 04 24             	mov    %eax,(%esp)
c0108d50:	e8 96 d1 ff ff       	call   c0105eeb <page_remove>
    free_page(pa2page(pgdir[0]));
c0108d55:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108d58:	8b 00                	mov    (%eax),%eax
c0108d5a:	89 04 24             	mov    %eax,(%esp)
c0108d5d:	e8 75 f1 ff ff       	call   c0107ed7 <pa2page>
c0108d62:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0108d69:	00 
c0108d6a:	89 04 24             	mov    %eax,(%esp)
c0108d6d:	e8 5d c4 ff ff       	call   c01051cf <free_pages>
    pgdir[0] = 0;
c0108d72:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108d75:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    mm->pgdir = NULL;
c0108d7b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108d7e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    mm_destroy(mm);
c0108d85:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108d88:	89 04 24             	mov    %eax,(%esp)
c0108d8b:	e8 fb f4 ff ff       	call   c010828b <mm_destroy>
    check_mm_struct = NULL;
c0108d90:	c7 05 0c 31 15 c0 00 	movl   $0x0,0xc015310c
c0108d97:	00 00 00 

    assert(nr_free_pages_store == nr_free_pages());
c0108d9a:	e8 62 c4 ff ff       	call   c0105201 <nr_free_pages>
c0108d9f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108da2:	74 24                	je     c0108dc8 <check_pgfault+0x237>
c0108da4:	c7 44 24 0c f0 73 11 	movl   $0xc01173f0,0xc(%esp)
c0108dab:	c0 
c0108dac:	c7 44 24 08 5f 71 11 	movl   $0xc011715f,0x8(%esp)
c0108db3:	c0 
c0108db4:	c7 44 24 04 6f 01 00 	movl   $0x16f,0x4(%esp)
c0108dbb:	00 
c0108dbc:	c7 04 24 74 71 11 c0 	movl   $0xc0117174,(%esp)
c0108dc3:	e8 00 81 ff ff       	call   c0100ec8 <__panic>

    cprintf("check_pgfault() succeeded!\n");
c0108dc8:	c7 04 24 17 74 11 c0 	movl   $0xc0117417,(%esp)
c0108dcf:	e8 91 75 ff ff       	call   c0100365 <cprintf>
}
c0108dd4:	c9                   	leave  
c0108dd5:	c3                   	ret    

c0108dd6 <do_pgfault>:
 *            was a read (0) or write (1).
 *         -- The U/S flag (bit 2) indicates whether the processor was executing at user mode (1)
 *            or supervisor mode (0) at the time of the exception.
 */
int
do_pgfault(struct mm_struct *mm, uint32_t error_code, uintptr_t addr) {
c0108dd6:	55                   	push   %ebp
c0108dd7:	89 e5                	mov    %esp,%ebp
c0108dd9:	83 ec 38             	sub    $0x38,%esp
    int ret = -E_INVAL;
c0108ddc:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    //try to find a vma which include addr
    struct vma_struct *vma = find_vma(mm, addr);
c0108de3:	8b 45 10             	mov    0x10(%ebp),%eax
c0108de6:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108dea:	8b 45 08             	mov    0x8(%ebp),%eax
c0108ded:	89 04 24             	mov    %eax,(%esp)
c0108df0:	e8 11 f2 ff ff       	call   c0108006 <find_vma>
c0108df5:	89 45 ec             	mov    %eax,-0x14(%ebp)

    pgfault_num++;
c0108df8:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0108dfd:	83 c0 01             	add    $0x1,%eax
c0108e00:	a3 18 ff 14 c0       	mov    %eax,0xc014ff18
    //If the addr is in the range of a mm's vma?
    if (vma == NULL || vma->vm_start > addr) {
c0108e05:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0108e09:	74 0b                	je     c0108e16 <do_pgfault+0x40>
c0108e0b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108e0e:	8b 40 04             	mov    0x4(%eax),%eax
c0108e11:	3b 45 10             	cmp    0x10(%ebp),%eax
c0108e14:	76 18                	jbe    c0108e2e <do_pgfault+0x58>
        cprintf("not valid addr %x, and  can not find it in vma\n", addr);
c0108e16:	8b 45 10             	mov    0x10(%ebp),%eax
c0108e19:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108e1d:	c7 04 24 34 74 11 c0 	movl   $0xc0117434,(%esp)
c0108e24:	e8 3c 75 ff ff       	call   c0100365 <cprintf>
        goto failed;
c0108e29:	e9 f1 01 00 00       	jmp    c010901f <do_pgfault+0x249>
    }
    //check the error_code
    switch (error_code & 3) {
c0108e2e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108e31:	83 e0 03             	and    $0x3,%eax
c0108e34:	85 c0                	test   %eax,%eax
c0108e36:	74 36                	je     c0108e6e <do_pgfault+0x98>
c0108e38:	83 f8 01             	cmp    $0x1,%eax
c0108e3b:	74 20                	je     c0108e5d <do_pgfault+0x87>
    default:
            /* error code flag : default is 3 ( W/R=1, P=1): write, present */
    case 2: /* error code flag : (W/R=1, P=0): write, not present */
        if (!(vma->vm_flags & VM_WRITE)) {
c0108e3d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108e40:	8b 40 0c             	mov    0xc(%eax),%eax
c0108e43:	83 e0 02             	and    $0x2,%eax
c0108e46:	85 c0                	test   %eax,%eax
c0108e48:	75 11                	jne    c0108e5b <do_pgfault+0x85>
            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
c0108e4a:	c7 04 24 64 74 11 c0 	movl   $0xc0117464,(%esp)
c0108e51:	e8 0f 75 ff ff       	call   c0100365 <cprintf>
            goto failed;
c0108e56:	e9 c4 01 00 00       	jmp    c010901f <do_pgfault+0x249>
        }
        break;
c0108e5b:	eb 2f                	jmp    c0108e8c <do_pgfault+0xb6>
    case 1: /* error code flag : (W/R=0, P=1): read, present */
        cprintf("do_pgfault failed: error code flag = read AND present\n");
c0108e5d:	c7 04 24 c4 74 11 c0 	movl   $0xc01174c4,(%esp)
c0108e64:	e8 fc 74 ff ff       	call   c0100365 <cprintf>
        goto failed;
c0108e69:	e9 b1 01 00 00       	jmp    c010901f <do_pgfault+0x249>
    case 0: /* error code flag : (W/R=0, P=0): read, not present */
        if (!(vma->vm_flags & (VM_READ | VM_EXEC))) {
c0108e6e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108e71:	8b 40 0c             	mov    0xc(%eax),%eax
c0108e74:	83 e0 05             	and    $0x5,%eax
c0108e77:	85 c0                	test   %eax,%eax
c0108e79:	75 11                	jne    c0108e8c <do_pgfault+0xb6>
            cprintf("do_pgfault failed: error code flag = read AND not present, but the addr's vma cannot read or exec\n");
c0108e7b:	c7 04 24 fc 74 11 c0 	movl   $0xc01174fc,(%esp)
c0108e82:	e8 de 74 ff ff       	call   c0100365 <cprintf>
            goto failed;
c0108e87:	e9 93 01 00 00       	jmp    c010901f <do_pgfault+0x249>
     *    (write an non_existed addr && addr is writable) OR
     *    (read  an non_existed addr && addr is readable)
     * THEN
     *    continue process
     */
    uint32_t perm = PTE_U;
c0108e8c:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
    if (vma->vm_flags & VM_WRITE) {
c0108e93:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108e96:	8b 40 0c             	mov    0xc(%eax),%eax
c0108e99:	83 e0 02             	and    $0x2,%eax
c0108e9c:	85 c0                	test   %eax,%eax
c0108e9e:	74 04                	je     c0108ea4 <do_pgfault+0xce>
        perm |= PTE_W;
c0108ea0:	83 4d f0 02          	orl    $0x2,-0x10(%ebp)
    }
    addr = ROUNDDOWN(addr, PGSIZE);
c0108ea4:	8b 45 10             	mov    0x10(%ebp),%eax
c0108ea7:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0108eaa:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108ead:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108eb2:	89 45 10             	mov    %eax,0x10(%ebp)

    ret = -E_NO_MEM;
c0108eb5:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    pte_t *ptep=NULL;
c0108ebc:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
        }
   }
#endif
    // try to find a pte, if pte's PT(Page Table) isn't existed, then create a PT.
    // (notice the 3th parameter '1')
    if ((ptep = get_pte(mm->pgdir, addr, 1)) == NULL) {
c0108ec3:	8b 45 08             	mov    0x8(%ebp),%eax
c0108ec6:	8b 40 0c             	mov    0xc(%eax),%eax
c0108ec9:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0108ed0:	00 
c0108ed1:	8b 55 10             	mov    0x10(%ebp),%edx
c0108ed4:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108ed8:	89 04 24             	mov    %eax,(%esp)
c0108edb:	e8 fb c9 ff ff       	call   c01058db <get_pte>
c0108ee0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0108ee3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0108ee7:	75 11                	jne    c0108efa <do_pgfault+0x124>
        cprintf("get_pte in do_pgfault failed\n");
c0108ee9:	c7 04 24 5f 75 11 c0 	movl   $0xc011755f,(%esp)
c0108ef0:	e8 70 74 ff ff       	call   c0100365 <cprintf>
        goto failed;
c0108ef5:	e9 25 01 00 00       	jmp    c010901f <do_pgfault+0x249>
    }
    
    if (*ptep == 0) { // if the phy addr isn't exist, then alloc a page & map the phy addr with logical addr
c0108efa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108efd:	8b 00                	mov    (%eax),%eax
c0108eff:	85 c0                	test   %eax,%eax
c0108f01:	75 35                	jne    c0108f38 <do_pgfault+0x162>
        if (pgdir_alloc_page(mm->pgdir, addr, perm) == NULL) {
c0108f03:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f06:	8b 40 0c             	mov    0xc(%eax),%eax
c0108f09:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0108f0c:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108f10:	8b 55 10             	mov    0x10(%ebp),%edx
c0108f13:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108f17:	89 04 24             	mov    %eax,(%esp)
c0108f1a:	e8 26 d1 ff ff       	call   c0106045 <pgdir_alloc_page>
c0108f1f:	85 c0                	test   %eax,%eax
c0108f21:	0f 85 f1 00 00 00    	jne    c0109018 <do_pgfault+0x242>
            cprintf("pgdir_alloc_page in do_pgfault failed\n");
c0108f27:	c7 04 24 80 75 11 c0 	movl   $0xc0117580,(%esp)
c0108f2e:	e8 32 74 ff ff       	call   c0100365 <cprintf>
            goto failed;
c0108f33:	e9 e7 00 00 00       	jmp    c010901f <do_pgfault+0x249>
        }
    }
    else {
        struct Page *page=NULL;
c0108f38:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
        cprintf("do pgfault: ptep %x, pte %x\n",ptep, *ptep);
c0108f3f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108f42:	8b 00                	mov    (%eax),%eax
c0108f44:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108f48:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108f4b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108f4f:	c7 04 24 a7 75 11 c0 	movl   $0xc01175a7,(%esp)
c0108f56:	e8 0a 74 ff ff       	call   c0100365 <cprintf>
        if (*ptep & PTE_P) {
c0108f5b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108f5e:	8b 00                	mov    (%eax),%eax
c0108f60:	83 e0 01             	and    $0x1,%eax
c0108f63:	85 c0                	test   %eax,%eax
c0108f65:	74 1c                	je     c0108f83 <do_pgfault+0x1ad>
            //if process write to this existed readonly page (PTE_P means existed), then should be here now.
            //we can implement the delayed memory space copy for fork child process (AKA copy on write, COW).
            //we didn't implement now, we will do it in future.
            panic("error write a non-writable pte");
c0108f67:	c7 44 24 08 c4 75 11 	movl   $0xc01175c4,0x8(%esp)
c0108f6e:	c0 
c0108f6f:	c7 44 24 04 08 02 00 	movl   $0x208,0x4(%esp)
c0108f76:	00 
c0108f77:	c7 04 24 74 71 11 c0 	movl   $0xc0117174,(%esp)
c0108f7e:	e8 45 7f ff ff       	call   c0100ec8 <__panic>
            //page = pte2page(*ptep);
        } else{
           // if this pte is a swap entry, then load data from disk to a page with phy addr
           // and call page_insert to map the phy addr with logical addr
           if(swap_init_ok) {               
c0108f83:	a1 0c ff 14 c0       	mov    0xc014ff0c,%eax
c0108f88:	85 c0                	test   %eax,%eax
c0108f8a:	74 30                	je     c0108fbc <do_pgfault+0x1e6>
               if ((ret = swap_in(mm, addr, &page)) != 0) {
c0108f8c:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0108f8f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108f93:	8b 45 10             	mov    0x10(%ebp),%eax
c0108f96:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108f9a:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f9d:	89 04 24             	mov    %eax,(%esp)
c0108fa0:	e8 43 e1 ff ff       	call   c01070e8 <swap_in>
c0108fa5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108fa8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108fac:	74 26                	je     c0108fd4 <do_pgfault+0x1fe>
                   cprintf("swap_in in do_pgfault failed\n");
c0108fae:	c7 04 24 e3 75 11 c0 	movl   $0xc01175e3,(%esp)
c0108fb5:	e8 ab 73 ff ff       	call   c0100365 <cprintf>
                   goto failed;
c0108fba:	eb 63                	jmp    c010901f <do_pgfault+0x249>
               }    

           }  
           else {
            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
c0108fbc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108fbf:	8b 00                	mov    (%eax),%eax
c0108fc1:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108fc5:	c7 04 24 04 76 11 c0 	movl   $0xc0117604,(%esp)
c0108fcc:	e8 94 73 ff ff       	call   c0100365 <cprintf>
            goto failed;
c0108fd1:	90                   	nop
c0108fd2:	eb 4b                	jmp    c010901f <do_pgfault+0x249>
           }
       } 
       page_insert(mm->pgdir, page, addr, perm);
c0108fd4:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108fd7:	8b 45 08             	mov    0x8(%ebp),%eax
c0108fda:	8b 40 0c             	mov    0xc(%eax),%eax
c0108fdd:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0108fe0:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0108fe4:	8b 4d 10             	mov    0x10(%ebp),%ecx
c0108fe7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0108feb:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108fef:	89 04 24             	mov    %eax,(%esp)
c0108ff2:	e8 38 cf ff ff       	call   c0105f2f <page_insert>
       swap_map_swappable(mm, addr, page, 1);
c0108ff7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108ffa:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0109001:	00 
c0109002:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109006:	8b 45 10             	mov    0x10(%ebp),%eax
c0109009:	89 44 24 04          	mov    %eax,0x4(%esp)
c010900d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109010:	89 04 24             	mov    %eax,(%esp)
c0109013:	e8 07 df ff ff       	call   c0106f1f <swap_map_swappable>
   }
   ret = 0;
c0109018:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
failed:
    return ret;
c010901f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0109022:	c9                   	leave  
c0109023:	c3                   	ret    

c0109024 <user_mem_check>:

bool
user_mem_check(struct mm_struct *mm, uintptr_t addr, size_t len, bool write) {
c0109024:	55                   	push   %ebp
c0109025:	89 e5                	mov    %esp,%ebp
c0109027:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010902a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010902e:	0f 84 e0 00 00 00    	je     c0109114 <user_mem_check+0xf0>
        if (!USER_ACCESS(addr, addr + len)) {
c0109034:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c010903b:	76 1c                	jbe    c0109059 <user_mem_check+0x35>
c010903d:	8b 45 10             	mov    0x10(%ebp),%eax
c0109040:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109043:	01 d0                	add    %edx,%eax
c0109045:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109048:	76 0f                	jbe    c0109059 <user_mem_check+0x35>
c010904a:	8b 45 10             	mov    0x10(%ebp),%eax
c010904d:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109050:	01 d0                	add    %edx,%eax
c0109052:	3d 00 00 00 b0       	cmp    $0xb0000000,%eax
c0109057:	76 0a                	jbe    c0109063 <user_mem_check+0x3f>
            return 0;
c0109059:	b8 00 00 00 00       	mov    $0x0,%eax
c010905e:	e9 e2 00 00 00       	jmp    c0109145 <user_mem_check+0x121>
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
c0109063:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109066:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0109069:	8b 45 10             	mov    0x10(%ebp),%eax
c010906c:	8b 55 0c             	mov    0xc(%ebp),%edx
c010906f:	01 d0                	add    %edx,%eax
c0109071:	89 45 f8             	mov    %eax,-0x8(%ebp)
        while (start < end) {
c0109074:	e9 88 00 00 00       	jmp    c0109101 <user_mem_check+0xdd>
            if ((vma = find_vma(mm, start)) == NULL || start < vma->vm_start) {
c0109079:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010907c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109080:	8b 45 08             	mov    0x8(%ebp),%eax
c0109083:	89 04 24             	mov    %eax,(%esp)
c0109086:	e8 7b ef ff ff       	call   c0108006 <find_vma>
c010908b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010908e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109092:	74 0b                	je     c010909f <user_mem_check+0x7b>
c0109094:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109097:	8b 40 04             	mov    0x4(%eax),%eax
c010909a:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010909d:	76 0a                	jbe    c01090a9 <user_mem_check+0x85>
                return 0;
c010909f:	b8 00 00 00 00       	mov    $0x0,%eax
c01090a4:	e9 9c 00 00 00       	jmp    c0109145 <user_mem_check+0x121>
            }
            if (!(vma->vm_flags & ((write) ? VM_WRITE : VM_READ))) {
c01090a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01090ac:	8b 50 0c             	mov    0xc(%eax),%edx
c01090af:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c01090b3:	74 07                	je     c01090bc <user_mem_check+0x98>
c01090b5:	b8 02 00 00 00       	mov    $0x2,%eax
c01090ba:	eb 05                	jmp    c01090c1 <user_mem_check+0x9d>
c01090bc:	b8 01 00 00 00       	mov    $0x1,%eax
c01090c1:	21 d0                	and    %edx,%eax
c01090c3:	85 c0                	test   %eax,%eax
c01090c5:	75 07                	jne    c01090ce <user_mem_check+0xaa>
                return 0;
c01090c7:	b8 00 00 00 00       	mov    $0x0,%eax
c01090cc:	eb 77                	jmp    c0109145 <user_mem_check+0x121>
            }
            if (write && (vma->vm_flags & VM_STACK)) {
c01090ce:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c01090d2:	74 24                	je     c01090f8 <user_mem_check+0xd4>
c01090d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01090d7:	8b 40 0c             	mov    0xc(%eax),%eax
c01090da:	83 e0 08             	and    $0x8,%eax
c01090dd:	85 c0                	test   %eax,%eax
c01090df:	74 17                	je     c01090f8 <user_mem_check+0xd4>
                if (start < vma->vm_start + PGSIZE) { //check stack start & size
c01090e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01090e4:	8b 40 04             	mov    0x4(%eax),%eax
c01090e7:	05 00 10 00 00       	add    $0x1000,%eax
c01090ec:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c01090ef:	76 07                	jbe    c01090f8 <user_mem_check+0xd4>
                    return 0;
c01090f1:	b8 00 00 00 00       	mov    $0x0,%eax
c01090f6:	eb 4d                	jmp    c0109145 <user_mem_check+0x121>
                }
            }
            start = vma->vm_end;
c01090f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01090fb:	8b 40 08             	mov    0x8(%eax),%eax
c01090fe:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!USER_ACCESS(addr, addr + len)) {
            return 0;
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
        while (start < end) {
c0109101:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109104:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c0109107:	0f 82 6c ff ff ff    	jb     c0109079 <user_mem_check+0x55>
                    return 0;
                }
            }
            start = vma->vm_end;
        }
        return 1;
c010910d:	b8 01 00 00 00       	mov    $0x1,%eax
c0109112:	eb 31                	jmp    c0109145 <user_mem_check+0x121>
    }
    return KERN_ACCESS(addr, addr + len);
c0109114:	81 7d 0c ff ff ff bf 	cmpl   $0xbfffffff,0xc(%ebp)
c010911b:	76 23                	jbe    c0109140 <user_mem_check+0x11c>
c010911d:	8b 45 10             	mov    0x10(%ebp),%eax
c0109120:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109123:	01 d0                	add    %edx,%eax
c0109125:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109128:	76 16                	jbe    c0109140 <user_mem_check+0x11c>
c010912a:	8b 45 10             	mov    0x10(%ebp),%eax
c010912d:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109130:	01 d0                	add    %edx,%eax
c0109132:	3d 00 00 00 f8       	cmp    $0xf8000000,%eax
c0109137:	77 07                	ja     c0109140 <user_mem_check+0x11c>
c0109139:	b8 01 00 00 00       	mov    $0x1,%eax
c010913e:	eb 05                	jmp    c0109145 <user_mem_check+0x121>
c0109140:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109145:	c9                   	leave  
c0109146:	c3                   	ret    

c0109147 <copy_string>:

bool
copy_string(struct mm_struct *mm, char *dst, const char *src, size_t maxn) {
c0109147:	55                   	push   %ebp
c0109148:	89 e5                	mov    %esp,%ebp
c010914a:	83 ec 28             	sub    $0x28,%esp
    size_t alen, part = ROUNDDOWN((uintptr_t)src + PGSIZE, PGSIZE) - (uintptr_t)src;
c010914d:	8b 45 10             	mov    0x10(%ebp),%eax
c0109150:	05 00 10 00 00       	add    $0x1000,%eax
c0109155:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109158:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010915b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0109160:	89 c2                	mov    %eax,%edx
c0109162:	8b 45 10             	mov    0x10(%ebp),%eax
c0109165:	29 c2                	sub    %eax,%edx
c0109167:	89 d0                	mov    %edx,%eax
c0109169:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (1) {
        if (part > maxn) {
c010916c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010916f:	3b 45 14             	cmp    0x14(%ebp),%eax
c0109172:	76 06                	jbe    c010917a <copy_string+0x33>
            part = maxn;
c0109174:	8b 45 14             	mov    0x14(%ebp),%eax
c0109177:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        if (!user_mem_check(mm, (uintptr_t)src, part, 0)) {
c010917a:	8b 45 10             	mov    0x10(%ebp),%eax
c010917d:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0109184:	00 
c0109185:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109188:	89 54 24 08          	mov    %edx,0x8(%esp)
c010918c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109190:	8b 45 08             	mov    0x8(%ebp),%eax
c0109193:	89 04 24             	mov    %eax,(%esp)
c0109196:	e8 89 fe ff ff       	call   c0109024 <user_mem_check>
c010919b:	85 c0                	test   %eax,%eax
c010919d:	75 0a                	jne    c01091a9 <copy_string+0x62>
            return 0;
c010919f:	b8 00 00 00 00       	mov    $0x0,%eax
c01091a4:	e9 86 00 00 00       	jmp    c010922f <copy_string+0xe8>
        }
        if ((alen = strnlen(src, part)) < part) {
c01091a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01091ac:	89 44 24 04          	mov    %eax,0x4(%esp)
c01091b0:	8b 45 10             	mov    0x10(%ebp),%eax
c01091b3:	89 04 24             	mov    %eax,(%esp)
c01091b6:	e8 5c c0 00 00       	call   c0115217 <strnlen>
c01091bb:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01091be:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01091c1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01091c4:	73 23                	jae    c01091e9 <copy_string+0xa2>
            memcpy(dst, src, alen + 1);
c01091c6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01091c9:	83 c0 01             	add    $0x1,%eax
c01091cc:	89 44 24 08          	mov    %eax,0x8(%esp)
c01091d0:	8b 45 10             	mov    0x10(%ebp),%eax
c01091d3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01091d7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01091da:	89 04 24             	mov    %eax,(%esp)
c01091dd:	e8 45 c4 00 00       	call   c0115627 <memcpy>
            return 1;
c01091e2:	b8 01 00 00 00       	mov    $0x1,%eax
c01091e7:	eb 46                	jmp    c010922f <copy_string+0xe8>
        }
        if (part == maxn) {
c01091e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01091ec:	3b 45 14             	cmp    0x14(%ebp),%eax
c01091ef:	75 07                	jne    c01091f8 <copy_string+0xb1>
            return 0;
c01091f1:	b8 00 00 00 00       	mov    $0x0,%eax
c01091f6:	eb 37                	jmp    c010922f <copy_string+0xe8>
        }
        memcpy(dst, src, part);
c01091f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01091fb:	89 44 24 08          	mov    %eax,0x8(%esp)
c01091ff:	8b 45 10             	mov    0x10(%ebp),%eax
c0109202:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109206:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109209:	89 04 24             	mov    %eax,(%esp)
c010920c:	e8 16 c4 00 00       	call   c0115627 <memcpy>
        dst += part, src += part, maxn -= part;
c0109211:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109214:	01 45 0c             	add    %eax,0xc(%ebp)
c0109217:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010921a:	01 45 10             	add    %eax,0x10(%ebp)
c010921d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109220:	29 45 14             	sub    %eax,0x14(%ebp)
        part = PGSIZE;
c0109223:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
    }
c010922a:	e9 3d ff ff ff       	jmp    c010916c <copy_string+0x25>
}
c010922f:	c9                   	leave  
c0109230:	c3                   	ret    

c0109231 <phi_test_sema>:
semaphore_t s[N]; /* 每个哲学家一个信号量 */

struct proc_struct *philosopher_proc_sema[N];

void phi_test_sema(i) /* i：哲学家号码从0到N-1 */
{ 
c0109231:	55                   	push   %ebp
c0109232:	89 e5                	mov    %esp,%ebp
c0109234:	83 ec 18             	sub    $0x18,%esp
    if(state_sema[i]==HUNGRY&&state_sema[LEFT]!=EATING
c0109237:	8b 45 08             	mov    0x8(%ebp),%eax
c010923a:	8b 04 85 20 31 15 c0 	mov    -0x3feacee0(,%eax,4),%eax
c0109241:	83 f8 01             	cmp    $0x1,%eax
c0109244:	0f 85 85 00 00 00    	jne    c01092cf <phi_test_sema+0x9e>
c010924a:	8b 45 08             	mov    0x8(%ebp),%eax
c010924d:	8d 48 04             	lea    0x4(%eax),%ecx
c0109250:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0109255:	89 c8                	mov    %ecx,%eax
c0109257:	f7 ea                	imul   %edx
c0109259:	d1 fa                	sar    %edx
c010925b:	89 c8                	mov    %ecx,%eax
c010925d:	c1 f8 1f             	sar    $0x1f,%eax
c0109260:	29 c2                	sub    %eax,%edx
c0109262:	89 d0                	mov    %edx,%eax
c0109264:	c1 e0 02             	shl    $0x2,%eax
c0109267:	01 d0                	add    %edx,%eax
c0109269:	29 c1                	sub    %eax,%ecx
c010926b:	89 ca                	mov    %ecx,%edx
c010926d:	8b 04 95 20 31 15 c0 	mov    -0x3feacee0(,%edx,4),%eax
c0109274:	83 f8 02             	cmp    $0x2,%eax
c0109277:	74 56                	je     c01092cf <phi_test_sema+0x9e>
            &&state_sema[RIGHT]!=EATING)
c0109279:	8b 45 08             	mov    0x8(%ebp),%eax
c010927c:	8d 48 01             	lea    0x1(%eax),%ecx
c010927f:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0109284:	89 c8                	mov    %ecx,%eax
c0109286:	f7 ea                	imul   %edx
c0109288:	d1 fa                	sar    %edx
c010928a:	89 c8                	mov    %ecx,%eax
c010928c:	c1 f8 1f             	sar    $0x1f,%eax
c010928f:	29 c2                	sub    %eax,%edx
c0109291:	89 d0                	mov    %edx,%eax
c0109293:	c1 e0 02             	shl    $0x2,%eax
c0109296:	01 d0                	add    %edx,%eax
c0109298:	29 c1                	sub    %eax,%ecx
c010929a:	89 ca                	mov    %ecx,%edx
c010929c:	8b 04 95 20 31 15 c0 	mov    -0x3feacee0(,%edx,4),%eax
c01092a3:	83 f8 02             	cmp    $0x2,%eax
c01092a6:	74 27                	je     c01092cf <phi_test_sema+0x9e>
    {
        state_sema[i]=EATING;
c01092a8:	8b 45 08             	mov    0x8(%ebp),%eax
c01092ab:	c7 04 85 20 31 15 c0 	movl   $0x2,-0x3feacee0(,%eax,4)
c01092b2:	02 00 00 00 
        up(&s[i]);
c01092b6:	8b 55 08             	mov    0x8(%ebp),%edx
c01092b9:	89 d0                	mov    %edx,%eax
c01092bb:	01 c0                	add    %eax,%eax
c01092bd:	01 d0                	add    %edx,%eax
c01092bf:	c1 e0 02             	shl    $0x2,%eax
c01092c2:	05 c0 31 15 c0       	add    $0xc01531c0,%eax
c01092c7:	89 04 24             	mov    %eax,(%esp)
c01092ca:	e8 ea 09 00 00       	call   c0109cb9 <up>
    }
}
c01092cf:	c9                   	leave  
c01092d0:	c3                   	ret    

c01092d1 <phi_take_forks_sema>:

void phi_take_forks_sema(int i) /* i：哲学家号码从0到N-1 */
{ 
c01092d1:	55                   	push   %ebp
c01092d2:	89 e5                	mov    %esp,%ebp
c01092d4:	83 ec 18             	sub    $0x18,%esp
        down(&mutex); /* 进入临界区 */
c01092d7:	c7 04 24 48 31 15 c0 	movl   $0xc0153148,(%esp)
c01092de:	e8 f1 09 00 00       	call   c0109cd4 <down>
        state_sema[i]=HUNGRY; /* 记录下哲学家i饥饿的事实 */
c01092e3:	8b 45 08             	mov    0x8(%ebp),%eax
c01092e6:	c7 04 85 20 31 15 c0 	movl   $0x1,-0x3feacee0(,%eax,4)
c01092ed:	01 00 00 00 
        phi_test_sema(i); /* 试图得到两只叉子 */
c01092f1:	8b 45 08             	mov    0x8(%ebp),%eax
c01092f4:	89 04 24             	mov    %eax,(%esp)
c01092f7:	e8 35 ff ff ff       	call   c0109231 <phi_test_sema>
        up(&mutex); /* 离开临界区 */
c01092fc:	c7 04 24 48 31 15 c0 	movl   $0xc0153148,(%esp)
c0109303:	e8 b1 09 00 00       	call   c0109cb9 <up>
        down(&s[i]); /* 如果得不到叉子就阻塞 */
c0109308:	8b 55 08             	mov    0x8(%ebp),%edx
c010930b:	89 d0                	mov    %edx,%eax
c010930d:	01 c0                	add    %eax,%eax
c010930f:	01 d0                	add    %edx,%eax
c0109311:	c1 e0 02             	shl    $0x2,%eax
c0109314:	05 c0 31 15 c0       	add    $0xc01531c0,%eax
c0109319:	89 04 24             	mov    %eax,(%esp)
c010931c:	e8 b3 09 00 00       	call   c0109cd4 <down>
}
c0109321:	c9                   	leave  
c0109322:	c3                   	ret    

c0109323 <phi_put_forks_sema>:

void phi_put_forks_sema(int i) /* i：哲学家号码从0到N-1 */
{ 
c0109323:	55                   	push   %ebp
c0109324:	89 e5                	mov    %esp,%ebp
c0109326:	83 ec 18             	sub    $0x18,%esp
        down(&mutex); /* 进入临界区 */
c0109329:	c7 04 24 48 31 15 c0 	movl   $0xc0153148,(%esp)
c0109330:	e8 9f 09 00 00       	call   c0109cd4 <down>
        state_sema[i]=THINKING; /* 哲学家进餐结束 */
c0109335:	8b 45 08             	mov    0x8(%ebp),%eax
c0109338:	c7 04 85 20 31 15 c0 	movl   $0x0,-0x3feacee0(,%eax,4)
c010933f:	00 00 00 00 
        phi_test_sema(LEFT); /* 看一下左邻居现在是否能进餐 */
c0109343:	8b 45 08             	mov    0x8(%ebp),%eax
c0109346:	8d 48 04             	lea    0x4(%eax),%ecx
c0109349:	ba 67 66 66 66       	mov    $0x66666667,%edx
c010934e:	89 c8                	mov    %ecx,%eax
c0109350:	f7 ea                	imul   %edx
c0109352:	d1 fa                	sar    %edx
c0109354:	89 c8                	mov    %ecx,%eax
c0109356:	c1 f8 1f             	sar    $0x1f,%eax
c0109359:	29 c2                	sub    %eax,%edx
c010935b:	89 d0                	mov    %edx,%eax
c010935d:	c1 e0 02             	shl    $0x2,%eax
c0109360:	01 d0                	add    %edx,%eax
c0109362:	29 c1                	sub    %eax,%ecx
c0109364:	89 ca                	mov    %ecx,%edx
c0109366:	89 14 24             	mov    %edx,(%esp)
c0109369:	e8 c3 fe ff ff       	call   c0109231 <phi_test_sema>
        phi_test_sema(RIGHT); /* 看一下右邻居现在是否能进餐 */
c010936e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109371:	8d 48 01             	lea    0x1(%eax),%ecx
c0109374:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0109379:	89 c8                	mov    %ecx,%eax
c010937b:	f7 ea                	imul   %edx
c010937d:	d1 fa                	sar    %edx
c010937f:	89 c8                	mov    %ecx,%eax
c0109381:	c1 f8 1f             	sar    $0x1f,%eax
c0109384:	29 c2                	sub    %eax,%edx
c0109386:	89 d0                	mov    %edx,%eax
c0109388:	c1 e0 02             	shl    $0x2,%eax
c010938b:	01 d0                	add    %edx,%eax
c010938d:	29 c1                	sub    %eax,%ecx
c010938f:	89 ca                	mov    %ecx,%edx
c0109391:	89 14 24             	mov    %edx,(%esp)
c0109394:	e8 98 fe ff ff       	call   c0109231 <phi_test_sema>
        up(&mutex); /* 离开临界区 */
c0109399:	c7 04 24 48 31 15 c0 	movl   $0xc0153148,(%esp)
c01093a0:	e8 14 09 00 00       	call   c0109cb9 <up>
}
c01093a5:	c9                   	leave  
c01093a6:	c3                   	ret    

c01093a7 <philosopher_using_semaphore>:

int philosopher_using_semaphore(void * arg) /* i：哲学家号码，从0到N-1 */
{
c01093a7:	55                   	push   %ebp
c01093a8:	89 e5                	mov    %esp,%ebp
c01093aa:	83 ec 28             	sub    $0x28,%esp
    int i, iter=0;
c01093ad:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    i=(int)arg;
c01093b4:	8b 45 08             	mov    0x8(%ebp),%eax
c01093b7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cprintf("I am No.%d philosopher_sema\n",i);
c01093ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01093bd:	89 44 24 04          	mov    %eax,0x4(%esp)
c01093c1:	c7 04 24 2c 76 11 c0 	movl   $0xc011762c,(%esp)
c01093c8:	e8 98 6f ff ff       	call   c0100365 <cprintf>
    while(iter++<TIMES)
c01093cd:	eb 62                	jmp    c0109431 <philosopher_using_semaphore+0x8a>
    { /* 无限循环 */
        cprintf("Iter %d, No.%d philosopher_sema is thinking\n",iter,i); /* 哲学家正在思考 */
c01093cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01093d2:	89 44 24 08          	mov    %eax,0x8(%esp)
c01093d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01093d9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01093dd:	c7 04 24 4c 76 11 c0 	movl   $0xc011764c,(%esp)
c01093e4:	e8 7c 6f ff ff       	call   c0100365 <cprintf>
        do_sleep(SLEEP_TIME);
c01093e9:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c01093f0:	e8 75 4c 00 00       	call   c010e06a <do_sleep>
        phi_take_forks_sema(i); 
c01093f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01093f8:	89 04 24             	mov    %eax,(%esp)
c01093fb:	e8 d1 fe ff ff       	call   c01092d1 <phi_take_forks_sema>
        /* 需要两只叉子，或者阻塞 */
        cprintf("Iter %d, No.%d philosopher_sema is eating\n",iter,i); /* 进餐 */
c0109400:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109403:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109407:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010940a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010940e:	c7 04 24 7c 76 11 c0 	movl   $0xc011767c,(%esp)
c0109415:	e8 4b 6f ff ff       	call   c0100365 <cprintf>
        do_sleep(SLEEP_TIME);
c010941a:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c0109421:	e8 44 4c 00 00       	call   c010e06a <do_sleep>
        phi_put_forks_sema(i); 
c0109426:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109429:	89 04 24             	mov    %eax,(%esp)
c010942c:	e8 f2 fe ff ff       	call   c0109323 <phi_put_forks_sema>
int philosopher_using_semaphore(void * arg) /* i：哲学家号码，从0到N-1 */
{
    int i, iter=0;
    i=(int)arg;
    cprintf("I am No.%d philosopher_sema\n",i);
    while(iter++<TIMES)
c0109431:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109434:	8d 50 01             	lea    0x1(%eax),%edx
c0109437:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010943a:	83 f8 03             	cmp    $0x3,%eax
c010943d:	7e 90                	jle    c01093cf <philosopher_using_semaphore+0x28>
        cprintf("Iter %d, No.%d philosopher_sema is eating\n",iter,i); /* 进餐 */
        do_sleep(SLEEP_TIME);
        phi_put_forks_sema(i); 
        /* 把两把叉子同时放回桌子 */
    }
    cprintf("No.%d philosopher_sema quit\n",i);
c010943f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109442:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109446:	c7 04 24 a7 76 11 c0 	movl   $0xc01176a7,(%esp)
c010944d:	e8 13 6f ff ff       	call   c0100365 <cprintf>
    return 0;    
c0109452:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109457:	c9                   	leave  
c0109458:	c3                   	ret    

c0109459 <phi_test_condvar>:

struct proc_struct *philosopher_proc_condvar[N]; // N philosopher
int state_condvar[N];                            // the philosopher's state: EATING, HUNGARY, THINKING  
monitor_t mt, *mtp=&mt;                                    // mp is mutex semaphore for monitor's procedures

void phi_test_condvar (i) { 
c0109459:	55                   	push   %ebp
c010945a:	89 e5                	mov    %esp,%ebp
c010945c:	83 ec 18             	sub    $0x18,%esp
    if(state_condvar[i]==HUNGRY&&state_condvar[LEFT]!=EATING
c010945f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109462:	8b 04 85 80 31 15 c0 	mov    -0x3feace80(,%eax,4),%eax
c0109469:	83 f8 01             	cmp    $0x1,%eax
c010946c:	0f 85 b5 00 00 00    	jne    c0109527 <phi_test_condvar+0xce>
c0109472:	8b 45 08             	mov    0x8(%ebp),%eax
c0109475:	8d 48 04             	lea    0x4(%eax),%ecx
c0109478:	ba 67 66 66 66       	mov    $0x66666667,%edx
c010947d:	89 c8                	mov    %ecx,%eax
c010947f:	f7 ea                	imul   %edx
c0109481:	d1 fa                	sar    %edx
c0109483:	89 c8                	mov    %ecx,%eax
c0109485:	c1 f8 1f             	sar    $0x1f,%eax
c0109488:	29 c2                	sub    %eax,%edx
c010948a:	89 d0                	mov    %edx,%eax
c010948c:	c1 e0 02             	shl    $0x2,%eax
c010948f:	01 d0                	add    %edx,%eax
c0109491:	29 c1                	sub    %eax,%ecx
c0109493:	89 ca                	mov    %ecx,%edx
c0109495:	8b 04 95 80 31 15 c0 	mov    -0x3feace80(,%edx,4),%eax
c010949c:	83 f8 02             	cmp    $0x2,%eax
c010949f:	0f 84 82 00 00 00    	je     c0109527 <phi_test_condvar+0xce>
            &&state_condvar[RIGHT]!=EATING) {
c01094a5:	8b 45 08             	mov    0x8(%ebp),%eax
c01094a8:	8d 48 01             	lea    0x1(%eax),%ecx
c01094ab:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01094b0:	89 c8                	mov    %ecx,%eax
c01094b2:	f7 ea                	imul   %edx
c01094b4:	d1 fa                	sar    %edx
c01094b6:	89 c8                	mov    %ecx,%eax
c01094b8:	c1 f8 1f             	sar    $0x1f,%eax
c01094bb:	29 c2                	sub    %eax,%edx
c01094bd:	89 d0                	mov    %edx,%eax
c01094bf:	c1 e0 02             	shl    $0x2,%eax
c01094c2:	01 d0                	add    %edx,%eax
c01094c4:	29 c1                	sub    %eax,%ecx
c01094c6:	89 ca                	mov    %ecx,%edx
c01094c8:	8b 04 95 80 31 15 c0 	mov    -0x3feace80(,%edx,4),%eax
c01094cf:	83 f8 02             	cmp    $0x2,%eax
c01094d2:	74 53                	je     c0109527 <phi_test_condvar+0xce>
        cprintf("phi_test_condvar: state_condvar[%d] will eating\n",i);
c01094d4:	8b 45 08             	mov    0x8(%ebp),%eax
c01094d7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01094db:	c7 04 24 c4 76 11 c0 	movl   $0xc01176c4,(%esp)
c01094e2:	e8 7e 6e ff ff       	call   c0100365 <cprintf>
        state_condvar[i] = EATING ;
c01094e7:	8b 45 08             	mov    0x8(%ebp),%eax
c01094ea:	c7 04 85 80 31 15 c0 	movl   $0x2,-0x3feace80(,%eax,4)
c01094f1:	02 00 00 00 
        cprintf("phi_test_condvar: signal self_cv[%d] \n",i);
c01094f5:	8b 45 08             	mov    0x8(%ebp),%eax
c01094f8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01094fc:	c7 04 24 f8 76 11 c0 	movl   $0xc01176f8,(%esp)
c0109503:	e8 5d 6e ff ff       	call   c0100365 <cprintf>
        cond_signal(&mtp->cv[i]) ;
c0109508:	a1 80 ea 14 c0       	mov    0xc014ea80,%eax
c010950d:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109510:	8b 55 08             	mov    0x8(%ebp),%edx
c0109513:	89 d0                	mov    %edx,%eax
c0109515:	c1 e0 02             	shl    $0x2,%eax
c0109518:	01 d0                	add    %edx,%eax
c010951a:	c1 e0 02             	shl    $0x2,%eax
c010951d:	01 c8                	add    %ecx,%eax
c010951f:	89 04 24             	mov    %eax,(%esp)
c0109522:	e8 8f 04 00 00       	call   c01099b6 <cond_signal>
    }
}
c0109527:	c9                   	leave  
c0109528:	c3                   	ret    

c0109529 <phi_take_forks_condvar>:


void phi_take_forks_condvar(int i) {
c0109529:	55                   	push   %ebp
c010952a:	89 e5                	mov    %esp,%ebp
c010952c:	83 ec 18             	sub    $0x18,%esp
     down(&(mtp->mutex));
c010952f:	a1 80 ea 14 c0       	mov    0xc014ea80,%eax
c0109534:	89 04 24             	mov    %eax,(%esp)
c0109537:	e8 98 07 00 00       	call   c0109cd4 <down>
//--------into routine in monitor--------------
     // LAB7 EXERCISE1: YOUR CODE
     // I am hungry
     // try to get fork
      // I am hungry
      state_condvar[i]=HUNGRY; 
c010953c:	8b 45 08             	mov    0x8(%ebp),%eax
c010953f:	c7 04 85 80 31 15 c0 	movl   $0x1,-0x3feace80(,%eax,4)
c0109546:	01 00 00 00 
      // try to get fork
      phi_test_condvar(i); 
c010954a:	8b 45 08             	mov    0x8(%ebp),%eax
c010954d:	89 04 24             	mov    %eax,(%esp)
c0109550:	e8 04 ff ff ff       	call   c0109459 <phi_test_condvar>
      while (state_condvar[i] != EATING) {
c0109555:	eb 32                	jmp    c0109589 <phi_take_forks_condvar+0x60>
          cprintf("phi_take_forks_condvar: %d didn't get fork and will wait\n",i);
c0109557:	8b 45 08             	mov    0x8(%ebp),%eax
c010955a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010955e:	c7 04 24 20 77 11 c0 	movl   $0xc0117720,(%esp)
c0109565:	e8 fb 6d ff ff       	call   c0100365 <cprintf>
          cond_wait(&mtp->cv[i]);
c010956a:	a1 80 ea 14 c0       	mov    0xc014ea80,%eax
c010956f:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109572:	8b 55 08             	mov    0x8(%ebp),%edx
c0109575:	89 d0                	mov    %edx,%eax
c0109577:	c1 e0 02             	shl    $0x2,%eax
c010957a:	01 d0                	add    %edx,%eax
c010957c:	c1 e0 02             	shl    $0x2,%eax
c010957f:	01 c8                	add    %ecx,%eax
c0109581:	89 04 24             	mov    %eax,(%esp)
c0109584:	e8 cd 04 00 00       	call   c0109a56 <cond_wait>
     // try to get fork
      // I am hungry
      state_condvar[i]=HUNGRY; 
      // try to get fork
      phi_test_condvar(i); 
      while (state_condvar[i] != EATING) {
c0109589:	8b 45 08             	mov    0x8(%ebp),%eax
c010958c:	8b 04 85 80 31 15 c0 	mov    -0x3feace80(,%eax,4),%eax
c0109593:	83 f8 02             	cmp    $0x2,%eax
c0109596:	75 bf                	jne    c0109557 <phi_take_forks_condvar+0x2e>
          cprintf("phi_take_forks_condvar: %d didn't get fork and will wait\n",i);
          cond_wait(&mtp->cv[i]);
      }
//--------leave routine in monitor--------------
      if(mtp->next_count>0)
c0109598:	a1 80 ea 14 c0       	mov    0xc014ea80,%eax
c010959d:	8b 40 18             	mov    0x18(%eax),%eax
c01095a0:	85 c0                	test   %eax,%eax
c01095a2:	7e 12                	jle    c01095b6 <phi_take_forks_condvar+0x8d>
         up(&(mtp->next));
c01095a4:	a1 80 ea 14 c0       	mov    0xc014ea80,%eax
c01095a9:	83 c0 0c             	add    $0xc,%eax
c01095ac:	89 04 24             	mov    %eax,(%esp)
c01095af:	e8 05 07 00 00       	call   c0109cb9 <up>
c01095b4:	eb 0d                	jmp    c01095c3 <phi_take_forks_condvar+0x9a>
      else
         up(&(mtp->mutex));
c01095b6:	a1 80 ea 14 c0       	mov    0xc014ea80,%eax
c01095bb:	89 04 24             	mov    %eax,(%esp)
c01095be:	e8 f6 06 00 00       	call   c0109cb9 <up>
}
c01095c3:	c9                   	leave  
c01095c4:	c3                   	ret    

c01095c5 <phi_put_forks_condvar>:

void phi_put_forks_condvar(int i) {
c01095c5:	55                   	push   %ebp
c01095c6:	89 e5                	mov    %esp,%ebp
c01095c8:	83 ec 18             	sub    $0x18,%esp
     down(&(mtp->mutex));
c01095cb:	a1 80 ea 14 c0       	mov    0xc014ea80,%eax
c01095d0:	89 04 24             	mov    %eax,(%esp)
c01095d3:	e8 fc 06 00 00       	call   c0109cd4 <down>
//--------into routine in monitor--------------
     // LAB7 EXERCISE1: YOUR CODE
     // I ate over
     // test left and right neighbors
      // I ate over 
      state_condvar[i]=THINKING;
c01095d8:	8b 45 08             	mov    0x8(%ebp),%eax
c01095db:	c7 04 85 80 31 15 c0 	movl   $0x0,-0x3feace80(,%eax,4)
c01095e2:	00 00 00 00 
      // test left and right neighbors
      phi_test_condvar(LEFT);
c01095e6:	8b 45 08             	mov    0x8(%ebp),%eax
c01095e9:	8d 48 04             	lea    0x4(%eax),%ecx
c01095ec:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01095f1:	89 c8                	mov    %ecx,%eax
c01095f3:	f7 ea                	imul   %edx
c01095f5:	d1 fa                	sar    %edx
c01095f7:	89 c8                	mov    %ecx,%eax
c01095f9:	c1 f8 1f             	sar    $0x1f,%eax
c01095fc:	29 c2                	sub    %eax,%edx
c01095fe:	89 d0                	mov    %edx,%eax
c0109600:	c1 e0 02             	shl    $0x2,%eax
c0109603:	01 d0                	add    %edx,%eax
c0109605:	29 c1                	sub    %eax,%ecx
c0109607:	89 ca                	mov    %ecx,%edx
c0109609:	89 14 24             	mov    %edx,(%esp)
c010960c:	e8 48 fe ff ff       	call   c0109459 <phi_test_condvar>
      phi_test_condvar(RIGHT);
c0109611:	8b 45 08             	mov    0x8(%ebp),%eax
c0109614:	8d 48 01             	lea    0x1(%eax),%ecx
c0109617:	ba 67 66 66 66       	mov    $0x66666667,%edx
c010961c:	89 c8                	mov    %ecx,%eax
c010961e:	f7 ea                	imul   %edx
c0109620:	d1 fa                	sar    %edx
c0109622:	89 c8                	mov    %ecx,%eax
c0109624:	c1 f8 1f             	sar    $0x1f,%eax
c0109627:	29 c2                	sub    %eax,%edx
c0109629:	89 d0                	mov    %edx,%eax
c010962b:	c1 e0 02             	shl    $0x2,%eax
c010962e:	01 d0                	add    %edx,%eax
c0109630:	29 c1                	sub    %eax,%ecx
c0109632:	89 ca                	mov    %ecx,%edx
c0109634:	89 14 24             	mov    %edx,(%esp)
c0109637:	e8 1d fe ff ff       	call   c0109459 <phi_test_condvar>
//--------leave routine in monitor--------------
     if(mtp->next_count>0)
c010963c:	a1 80 ea 14 c0       	mov    0xc014ea80,%eax
c0109641:	8b 40 18             	mov    0x18(%eax),%eax
c0109644:	85 c0                	test   %eax,%eax
c0109646:	7e 12                	jle    c010965a <phi_put_forks_condvar+0x95>
        up(&(mtp->next));
c0109648:	a1 80 ea 14 c0       	mov    0xc014ea80,%eax
c010964d:	83 c0 0c             	add    $0xc,%eax
c0109650:	89 04 24             	mov    %eax,(%esp)
c0109653:	e8 61 06 00 00       	call   c0109cb9 <up>
c0109658:	eb 0d                	jmp    c0109667 <phi_put_forks_condvar+0xa2>
     else
        up(&(mtp->mutex));
c010965a:	a1 80 ea 14 c0       	mov    0xc014ea80,%eax
c010965f:	89 04 24             	mov    %eax,(%esp)
c0109662:	e8 52 06 00 00       	call   c0109cb9 <up>
}
c0109667:	c9                   	leave  
c0109668:	c3                   	ret    

c0109669 <philosopher_using_condvar>:

//---------- philosophers using monitor (condition variable) ----------------------
int philosopher_using_condvar(void * arg) { /* arg is the No. of philosopher 0~N-1*/
c0109669:	55                   	push   %ebp
c010966a:	89 e5                	mov    %esp,%ebp
c010966c:	83 ec 28             	sub    $0x28,%esp
  
    int i, iter=0;
c010966f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    i=(int)arg;
c0109676:	8b 45 08             	mov    0x8(%ebp),%eax
c0109679:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cprintf("I am No.%d philosopher_condvar\n",i);
c010967c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010967f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109683:	c7 04 24 5c 77 11 c0 	movl   $0xc011775c,(%esp)
c010968a:	e8 d6 6c ff ff       	call   c0100365 <cprintf>
    while(iter++<TIMES)
c010968f:	eb 62                	jmp    c01096f3 <philosopher_using_condvar+0x8a>
    { /* iterate*/
        cprintf("Iter %d, No.%d philosopher_condvar is thinking\n",iter,i); /* thinking*/
c0109691:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109694:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109698:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010969b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010969f:	c7 04 24 7c 77 11 c0 	movl   $0xc011777c,(%esp)
c01096a6:	e8 ba 6c ff ff       	call   c0100365 <cprintf>
        do_sleep(SLEEP_TIME);
c01096ab:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c01096b2:	e8 b3 49 00 00       	call   c010e06a <do_sleep>
        phi_take_forks_condvar(i); 
c01096b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01096ba:	89 04 24             	mov    %eax,(%esp)
c01096bd:	e8 67 fe ff ff       	call   c0109529 <phi_take_forks_condvar>
        /* need two forks, maybe blocked */
        cprintf("Iter %d, No.%d philosopher_condvar is eating\n",iter,i); /* eating*/
c01096c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01096c5:	89 44 24 08          	mov    %eax,0x8(%esp)
c01096c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01096cc:	89 44 24 04          	mov    %eax,0x4(%esp)
c01096d0:	c7 04 24 ac 77 11 c0 	movl   $0xc01177ac,(%esp)
c01096d7:	e8 89 6c ff ff       	call   c0100365 <cprintf>
        do_sleep(SLEEP_TIME);
c01096dc:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c01096e3:	e8 82 49 00 00       	call   c010e06a <do_sleep>
        phi_put_forks_condvar(i); 
c01096e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01096eb:	89 04 24             	mov    %eax,(%esp)
c01096ee:	e8 d2 fe ff ff       	call   c01095c5 <phi_put_forks_condvar>
int philosopher_using_condvar(void * arg) { /* arg is the No. of philosopher 0~N-1*/
  
    int i, iter=0;
    i=(int)arg;
    cprintf("I am No.%d philosopher_condvar\n",i);
    while(iter++<TIMES)
c01096f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01096f6:	8d 50 01             	lea    0x1(%eax),%edx
c01096f9:	89 55 f4             	mov    %edx,-0xc(%ebp)
c01096fc:	83 f8 03             	cmp    $0x3,%eax
c01096ff:	7e 90                	jle    c0109691 <philosopher_using_condvar+0x28>
        cprintf("Iter %d, No.%d philosopher_condvar is eating\n",iter,i); /* eating*/
        do_sleep(SLEEP_TIME);
        phi_put_forks_condvar(i); 
        /* return two forks back*/
    }
    cprintf("No.%d philosopher_condvar quit\n",i);
c0109701:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109704:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109708:	c7 04 24 dc 77 11 c0 	movl   $0xc01177dc,(%esp)
c010970f:	e8 51 6c ff ff       	call   c0100365 <cprintf>
    return 0;    
c0109714:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109719:	c9                   	leave  
c010971a:	c3                   	ret    

c010971b <check_sync>:

void check_sync(void){
c010971b:	55                   	push   %ebp
c010971c:	89 e5                	mov    %esp,%ebp
c010971e:	83 ec 28             	sub    $0x28,%esp

    int i;

    //check semaphore
    sem_init(&mutex, 1);
c0109721:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0109728:	00 
c0109729:	c7 04 24 48 31 15 c0 	movl   $0xc0153148,(%esp)
c0109730:	e8 11 04 00 00       	call   c0109b46 <sem_init>
    for(i=0;i<N;i++){
c0109735:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010973c:	e9 94 00 00 00       	jmp    c01097d5 <check_sync+0xba>
        sem_init(&s[i], 0);
c0109741:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109744:	89 d0                	mov    %edx,%eax
c0109746:	01 c0                	add    %eax,%eax
c0109748:	01 d0                	add    %edx,%eax
c010974a:	c1 e0 02             	shl    $0x2,%eax
c010974d:	05 c0 31 15 c0       	add    $0xc01531c0,%eax
c0109752:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0109759:	00 
c010975a:	89 04 24             	mov    %eax,(%esp)
c010975d:	e8 e4 03 00 00       	call   c0109b46 <sem_init>
        int pid = kernel_thread(philosopher_using_semaphore, (void *)i, 0);
c0109762:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109765:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010976c:	00 
c010976d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109771:	c7 04 24 a7 93 10 c0 	movl   $0xc01093a7,(%esp)
c0109778:	e8 fe 2d 00 00       	call   c010c57b <kernel_thread>
c010977d:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pid <= 0) {
c0109780:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109784:	7f 1c                	jg     c01097a2 <check_sync+0x87>
            panic("create No.%d philosopher_using_semaphore failed.\n");
c0109786:	c7 44 24 08 fc 77 11 	movl   $0xc01177fc,0x8(%esp)
c010978d:	c0 
c010978e:	c7 44 24 04 c0 00 00 	movl   $0xc0,0x4(%esp)
c0109795:	00 
c0109796:	c7 04 24 2e 78 11 c0 	movl   $0xc011782e,(%esp)
c010979d:	e8 26 77 ff ff       	call   c0100ec8 <__panic>
        }
        philosopher_proc_sema[i] = find_proc(pid);
c01097a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01097a5:	89 04 24             	mov    %eax,(%esp)
c01097a8:	e8 5a 2d 00 00       	call   c010c507 <find_proc>
c01097ad:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01097b0:	89 04 95 94 31 15 c0 	mov    %eax,-0x3feace6c(,%edx,4)
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
c01097b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01097ba:	8b 04 85 94 31 15 c0 	mov    -0x3feace6c(,%eax,4),%eax
c01097c1:	c7 44 24 04 45 78 11 	movl   $0xc0117845,0x4(%esp)
c01097c8:	c0 
c01097c9:	89 04 24             	mov    %eax,(%esp)
c01097cc:	e8 1d 29 00 00       	call   c010c0ee <set_proc_name>

    int i;

    //check semaphore
    sem_init(&mutex, 1);
    for(i=0;i<N;i++){
c01097d1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01097d5:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
c01097d9:	0f 8e 62 ff ff ff    	jle    c0109741 <check_sync+0x26>
        philosopher_proc_sema[i] = find_proc(pid);
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
    }

    //check condition variable
    monitor_init(&mt, N);
c01097df:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
c01097e6:	00 
c01097e7:	c7 04 24 60 31 15 c0 	movl   $0xc0153160,(%esp)
c01097ee:	e8 99 00 00 00       	call   c010988c <monitor_init>
    for(i=0;i<N;i++){
c01097f3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01097fa:	e9 81 00 00 00       	jmp    c0109880 <check_sync+0x165>
        state_condvar[i]=THINKING;
c01097ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109802:	c7 04 85 80 31 15 c0 	movl   $0x0,-0x3feace80(,%eax,4)
c0109809:	00 00 00 00 
        int pid = kernel_thread(philosopher_using_condvar, (void *)i, 0);
c010980d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109810:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0109817:	00 
c0109818:	89 44 24 04          	mov    %eax,0x4(%esp)
c010981c:	c7 04 24 69 96 10 c0 	movl   $0xc0109669,(%esp)
c0109823:	e8 53 2d 00 00       	call   c010c57b <kernel_thread>
c0109828:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pid <= 0) {
c010982b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010982f:	7f 1c                	jg     c010984d <check_sync+0x132>
            panic("create No.%d philosopher_using_condvar failed.\n");
c0109831:	c7 44 24 08 5c 78 11 	movl   $0xc011785c,0x8(%esp)
c0109838:	c0 
c0109839:	c7 44 24 04 cc 00 00 	movl   $0xcc,0x4(%esp)
c0109840:	00 
c0109841:	c7 04 24 2e 78 11 c0 	movl   $0xc011782e,(%esp)
c0109848:	e8 7b 76 ff ff       	call   c0100ec8 <__panic>
        }
        philosopher_proc_condvar[i] = find_proc(pid);
c010984d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109850:	89 04 24             	mov    %eax,(%esp)
c0109853:	e8 af 2c 00 00       	call   c010c507 <find_proc>
c0109858:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010985b:	89 04 95 34 31 15 c0 	mov    %eax,-0x3feacecc(,%edx,4)
        set_proc_name(philosopher_proc_condvar[i], "philosopher_condvar_proc");
c0109862:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109865:	8b 04 85 34 31 15 c0 	mov    -0x3feacecc(,%eax,4),%eax
c010986c:	c7 44 24 04 8c 78 11 	movl   $0xc011788c,0x4(%esp)
c0109873:	c0 
c0109874:	89 04 24             	mov    %eax,(%esp)
c0109877:	e8 72 28 00 00       	call   c010c0ee <set_proc_name>
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
    }

    //check condition variable
    monitor_init(&mt, N);
    for(i=0;i<N;i++){
c010987c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0109880:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
c0109884:	0f 8e 75 ff ff ff    	jle    c01097ff <check_sync+0xe4>
            panic("create No.%d philosopher_using_condvar failed.\n");
        }
        philosopher_proc_condvar[i] = find_proc(pid);
        set_proc_name(philosopher_proc_condvar[i], "philosopher_condvar_proc");
    }
}
c010988a:	c9                   	leave  
c010988b:	c3                   	ret    

c010988c <monitor_init>:
#include <assert.h>


// Initialize monitor.
void     
monitor_init (monitor_t * mtp, size_t num_cv) {
c010988c:	55                   	push   %ebp
c010988d:	89 e5                	mov    %esp,%ebp
c010988f:	83 ec 28             	sub    $0x28,%esp
    int i;
    assert(num_cv>0);
c0109892:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0109896:	75 24                	jne    c01098bc <monitor_init+0x30>
c0109898:	c7 44 24 0c a8 78 11 	movl   $0xc01178a8,0xc(%esp)
c010989f:	c0 
c01098a0:	c7 44 24 08 b1 78 11 	movl   $0xc01178b1,0x8(%esp)
c01098a7:	c0 
c01098a8:	c7 44 24 04 0b 00 00 	movl   $0xb,0x4(%esp)
c01098af:	00 
c01098b0:	c7 04 24 c6 78 11 c0 	movl   $0xc01178c6,(%esp)
c01098b7:	e8 0c 76 ff ff       	call   c0100ec8 <__panic>
    mtp->next_count = 0;
c01098bc:	8b 45 08             	mov    0x8(%ebp),%eax
c01098bf:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    mtp->cv = NULL;
c01098c6:	8b 45 08             	mov    0x8(%ebp),%eax
c01098c9:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    sem_init(&(mtp->mutex), 1); //unlocked
c01098d0:	8b 45 08             	mov    0x8(%ebp),%eax
c01098d3:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01098da:	00 
c01098db:	89 04 24             	mov    %eax,(%esp)
c01098de:	e8 63 02 00 00       	call   c0109b46 <sem_init>
    sem_init(&(mtp->next), 0);
c01098e3:	8b 45 08             	mov    0x8(%ebp),%eax
c01098e6:	83 c0 0c             	add    $0xc,%eax
c01098e9:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01098f0:	00 
c01098f1:	89 04 24             	mov    %eax,(%esp)
c01098f4:	e8 4d 02 00 00       	call   c0109b46 <sem_init>
    mtp->cv =(condvar_t *) kmalloc(sizeof(condvar_t)*num_cv);
c01098f9:	8b 55 0c             	mov    0xc(%ebp),%edx
c01098fc:	89 d0                	mov    %edx,%eax
c01098fe:	c1 e0 02             	shl    $0x2,%eax
c0109901:	01 d0                	add    %edx,%eax
c0109903:	c1 e0 02             	shl    $0x2,%eax
c0109906:	89 04 24             	mov    %eax,(%esp)
c0109909:	e8 d1 b3 ff ff       	call   c0104cdf <kmalloc>
c010990e:	8b 55 08             	mov    0x8(%ebp),%edx
c0109911:	89 42 1c             	mov    %eax,0x1c(%edx)
    assert(mtp->cv!=NULL);
c0109914:	8b 45 08             	mov    0x8(%ebp),%eax
c0109917:	8b 40 1c             	mov    0x1c(%eax),%eax
c010991a:	85 c0                	test   %eax,%eax
c010991c:	75 24                	jne    c0109942 <monitor_init+0xb6>
c010991e:	c7 44 24 0c da 78 11 	movl   $0xc01178da,0xc(%esp)
c0109925:	c0 
c0109926:	c7 44 24 08 b1 78 11 	movl   $0xc01178b1,0x8(%esp)
c010992d:	c0 
c010992e:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
c0109935:	00 
c0109936:	c7 04 24 c6 78 11 c0 	movl   $0xc01178c6,(%esp)
c010993d:	e8 86 75 ff ff       	call   c0100ec8 <__panic>
    for(i=0; i<num_cv; i++){
c0109942:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0109949:	eb 61                	jmp    c01099ac <monitor_init+0x120>
        mtp->cv[i].count=0;
c010994b:	8b 45 08             	mov    0x8(%ebp),%eax
c010994e:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109951:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109954:	89 d0                	mov    %edx,%eax
c0109956:	c1 e0 02             	shl    $0x2,%eax
c0109959:	01 d0                	add    %edx,%eax
c010995b:	c1 e0 02             	shl    $0x2,%eax
c010995e:	01 c8                	add    %ecx,%eax
c0109960:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        sem_init(&(mtp->cv[i].sem),0);
c0109967:	8b 45 08             	mov    0x8(%ebp),%eax
c010996a:	8b 48 1c             	mov    0x1c(%eax),%ecx
c010996d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109970:	89 d0                	mov    %edx,%eax
c0109972:	c1 e0 02             	shl    $0x2,%eax
c0109975:	01 d0                	add    %edx,%eax
c0109977:	c1 e0 02             	shl    $0x2,%eax
c010997a:	01 c8                	add    %ecx,%eax
c010997c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0109983:	00 
c0109984:	89 04 24             	mov    %eax,(%esp)
c0109987:	e8 ba 01 00 00       	call   c0109b46 <sem_init>
        mtp->cv[i].owner=mtp;
c010998c:	8b 45 08             	mov    0x8(%ebp),%eax
c010998f:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109992:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109995:	89 d0                	mov    %edx,%eax
c0109997:	c1 e0 02             	shl    $0x2,%eax
c010999a:	01 d0                	add    %edx,%eax
c010999c:	c1 e0 02             	shl    $0x2,%eax
c010999f:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c01099a2:	8b 45 08             	mov    0x8(%ebp),%eax
c01099a5:	89 42 10             	mov    %eax,0x10(%edx)
    mtp->cv = NULL;
    sem_init(&(mtp->mutex), 1); //unlocked
    sem_init(&(mtp->next), 0);
    mtp->cv =(condvar_t *) kmalloc(sizeof(condvar_t)*num_cv);
    assert(mtp->cv!=NULL);
    for(i=0; i<num_cv; i++){
c01099a8:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01099ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01099af:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01099b2:	72 97                	jb     c010994b <monitor_init+0xbf>
        mtp->cv[i].count=0;
        sem_init(&(mtp->cv[i].sem),0);
        mtp->cv[i].owner=mtp;
    }
}
c01099b4:	c9                   	leave  
c01099b5:	c3                   	ret    

c01099b6 <cond_signal>:

// Unlock one of threads waiting on the condition variable. 
void 
cond_signal (condvar_t *cvp) {
c01099b6:	55                   	push   %ebp
c01099b7:	89 e5                	mov    %esp,%ebp
c01099b9:	83 ec 18             	sub    $0x18,%esp
   //LAB7 EXERCISE1: YOUR CODE
   cprintf("cond_signal begin: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);  
c01099bc:	8b 45 08             	mov    0x8(%ebp),%eax
c01099bf:	8b 40 10             	mov    0x10(%eax),%eax
c01099c2:	8b 50 18             	mov    0x18(%eax),%edx
c01099c5:	8b 45 08             	mov    0x8(%ebp),%eax
c01099c8:	8b 40 0c             	mov    0xc(%eax),%eax
c01099cb:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01099cf:	89 44 24 08          	mov    %eax,0x8(%esp)
c01099d3:	8b 45 08             	mov    0x8(%ebp),%eax
c01099d6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01099da:	c7 04 24 e8 78 11 c0 	movl   $0xc01178e8,(%esp)
c01099e1:	e8 7f 69 ff ff       	call   c0100365 <cprintf>
   *             wait(mt.next);
   *             mt.next_count--;
   *          }
   *       }
   */
     if(cvp->count>0) {
c01099e6:	8b 45 08             	mov    0x8(%ebp),%eax
c01099e9:	8b 40 0c             	mov    0xc(%eax),%eax
c01099ec:	85 c0                	test   %eax,%eax
c01099ee:	7e 3a                	jle    c0109a2a <cond_signal+0x74>
        cvp->owner->next_count ++;
c01099f0:	8b 45 08             	mov    0x8(%ebp),%eax
c01099f3:	8b 40 10             	mov    0x10(%eax),%eax
c01099f6:	8b 50 18             	mov    0x18(%eax),%edx
c01099f9:	83 c2 01             	add    $0x1,%edx
c01099fc:	89 50 18             	mov    %edx,0x18(%eax)
        up(&(cvp->sem));
c01099ff:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a02:	89 04 24             	mov    %eax,(%esp)
c0109a05:	e8 af 02 00 00       	call   c0109cb9 <up>
        down(&(cvp->owner->next));
c0109a0a:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a0d:	8b 40 10             	mov    0x10(%eax),%eax
c0109a10:	83 c0 0c             	add    $0xc,%eax
c0109a13:	89 04 24             	mov    %eax,(%esp)
c0109a16:	e8 b9 02 00 00       	call   c0109cd4 <down>
        cvp->owner->next_count --;
c0109a1b:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a1e:	8b 40 10             	mov    0x10(%eax),%eax
c0109a21:	8b 50 18             	mov    0x18(%eax),%edx
c0109a24:	83 ea 01             	sub    $0x1,%edx
c0109a27:	89 50 18             	mov    %edx,0x18(%eax)
      }
   cprintf("cond_signal end: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c0109a2a:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a2d:	8b 40 10             	mov    0x10(%eax),%eax
c0109a30:	8b 50 18             	mov    0x18(%eax),%edx
c0109a33:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a36:	8b 40 0c             	mov    0xc(%eax),%eax
c0109a39:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109a3d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109a41:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a44:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109a48:	c7 04 24 30 79 11 c0 	movl   $0xc0117930,(%esp)
c0109a4f:	e8 11 69 ff ff       	call   c0100365 <cprintf>
}
c0109a54:	c9                   	leave  
c0109a55:	c3                   	ret    

c0109a56 <cond_wait>:

// Suspend calling thread on a condition variable waiting for condition Atomically unlocks 
// mutex and suspends calling thread on conditional variable after waking up locks mutex. Notice: mp is mutex semaphore for monitor's procedures
void
cond_wait (condvar_t *cvp) {
c0109a56:	55                   	push   %ebp
c0109a57:	89 e5                	mov    %esp,%ebp
c0109a59:	83 ec 18             	sub    $0x18,%esp
    //LAB7 EXERCISE1: YOUR CODE
    cprintf("cond_wait begin:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c0109a5c:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a5f:	8b 40 10             	mov    0x10(%eax),%eax
c0109a62:	8b 50 18             	mov    0x18(%eax),%edx
c0109a65:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a68:	8b 40 0c             	mov    0xc(%eax),%eax
c0109a6b:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109a6f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109a73:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a76:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109a7a:	c7 04 24 74 79 11 c0 	movl   $0xc0117974,(%esp)
c0109a81:	e8 df 68 ff ff       	call   c0100365 <cprintf>
    *         else
    *            signal(mt.mutex);
    *         wait(cv.sem);
    *         cv.count --;
    */
      cvp->count++;
c0109a86:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a89:	8b 40 0c             	mov    0xc(%eax),%eax
c0109a8c:	8d 50 01             	lea    0x1(%eax),%edx
c0109a8f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a92:	89 50 0c             	mov    %edx,0xc(%eax)
      if(cvp->owner->next_count > 0)
c0109a95:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a98:	8b 40 10             	mov    0x10(%eax),%eax
c0109a9b:	8b 40 18             	mov    0x18(%eax),%eax
c0109a9e:	85 c0                	test   %eax,%eax
c0109aa0:	7e 13                	jle    c0109ab5 <cond_wait+0x5f>
         up(&(cvp->owner->next));
c0109aa2:	8b 45 08             	mov    0x8(%ebp),%eax
c0109aa5:	8b 40 10             	mov    0x10(%eax),%eax
c0109aa8:	83 c0 0c             	add    $0xc,%eax
c0109aab:	89 04 24             	mov    %eax,(%esp)
c0109aae:	e8 06 02 00 00       	call   c0109cb9 <up>
c0109ab3:	eb 0e                	jmp    c0109ac3 <cond_wait+0x6d>
      else
         up(&(cvp->owner->mutex));
c0109ab5:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ab8:	8b 40 10             	mov    0x10(%eax),%eax
c0109abb:	89 04 24             	mov    %eax,(%esp)
c0109abe:	e8 f6 01 00 00       	call   c0109cb9 <up>
      down(&(cvp->sem));
c0109ac3:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ac6:	89 04 24             	mov    %eax,(%esp)
c0109ac9:	e8 06 02 00 00       	call   c0109cd4 <down>
      cvp->count --;
c0109ace:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ad1:	8b 40 0c             	mov    0xc(%eax),%eax
c0109ad4:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109ad7:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ada:	89 50 0c             	mov    %edx,0xc(%eax)
    cprintf("cond_wait end:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c0109add:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ae0:	8b 40 10             	mov    0x10(%eax),%eax
c0109ae3:	8b 50 18             	mov    0x18(%eax),%edx
c0109ae6:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ae9:	8b 40 0c             	mov    0xc(%eax),%eax
c0109aec:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109af0:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109af4:	8b 45 08             	mov    0x8(%ebp),%eax
c0109af7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109afb:	c7 04 24 b8 79 11 c0 	movl   $0xc01179b8,(%esp)
c0109b02:	e8 5e 68 ff ff       	call   c0100365 <cprintf>
}
c0109b07:	c9                   	leave  
c0109b08:	c3                   	ret    

c0109b09 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0109b09:	55                   	push   %ebp
c0109b0a:	89 e5                	mov    %esp,%ebp
c0109b0c:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0109b0f:	9c                   	pushf  
c0109b10:	58                   	pop    %eax
c0109b11:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0109b14:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0109b17:	25 00 02 00 00       	and    $0x200,%eax
c0109b1c:	85 c0                	test   %eax,%eax
c0109b1e:	74 0c                	je     c0109b2c <__intr_save+0x23>
        intr_disable();
c0109b20:	e8 05 86 ff ff       	call   c010212a <intr_disable>
        return 1;
c0109b25:	b8 01 00 00 00       	mov    $0x1,%eax
c0109b2a:	eb 05                	jmp    c0109b31 <__intr_save+0x28>
    }
    return 0;
c0109b2c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109b31:	c9                   	leave  
c0109b32:	c3                   	ret    

c0109b33 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0109b33:	55                   	push   %ebp
c0109b34:	89 e5                	mov    %esp,%ebp
c0109b36:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0109b39:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0109b3d:	74 05                	je     c0109b44 <__intr_restore+0x11>
        intr_enable();
c0109b3f:	e8 e0 85 ff ff       	call   c0102124 <intr_enable>
    }
}
c0109b44:	c9                   	leave  
c0109b45:	c3                   	ret    

c0109b46 <sem_init>:
#include <proc.h>
#include <sync.h>
#include <assert.h>

void
sem_init(semaphore_t *sem, int value) {
c0109b46:	55                   	push   %ebp
c0109b47:	89 e5                	mov    %esp,%ebp
c0109b49:	83 ec 18             	sub    $0x18,%esp
    sem->value = value;
c0109b4c:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b4f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109b52:	89 10                	mov    %edx,(%eax)
    wait_queue_init(&(sem->wait_queue));
c0109b54:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b57:	83 c0 04             	add    $0x4,%eax
c0109b5a:	89 04 24             	mov    %eax,(%esp)
c0109b5d:	e8 33 02 00 00       	call   c0109d95 <wait_queue_init>
}
c0109b62:	c9                   	leave  
c0109b63:	c3                   	ret    

c0109b64 <__up>:

static __noinline void __up(semaphore_t *sem, uint32_t wait_state) {
c0109b64:	55                   	push   %ebp
c0109b65:	89 e5                	mov    %esp,%ebp
c0109b67:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0109b6a:	e8 9a ff ff ff       	call   c0109b09 <__intr_save>
c0109b6f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        wait_t *wait;
        if ((wait = wait_queue_first(&(sem->wait_queue))) == NULL) {
c0109b72:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b75:	83 c0 04             	add    $0x4,%eax
c0109b78:	89 04 24             	mov    %eax,(%esp)
c0109b7b:	e8 69 04 00 00       	call   c0109fe9 <wait_queue_first>
c0109b80:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109b83:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109b87:	75 0f                	jne    c0109b98 <__up+0x34>
            sem->value ++;
c0109b89:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b8c:	8b 00                	mov    (%eax),%eax
c0109b8e:	8d 50 01             	lea    0x1(%eax),%edx
c0109b91:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b94:	89 10                	mov    %edx,(%eax)
c0109b96:	eb 58                	jmp    c0109bf0 <__up+0x8c>
        }
        else {
            assert(wait->proc->wait_state == wait_state);
c0109b98:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109b9b:	8b 00                	mov    (%eax),%eax
c0109b9d:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c0109ba3:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109ba6:	74 24                	je     c0109bcc <__up+0x68>
c0109ba8:	c7 44 24 0c fc 79 11 	movl   $0xc01179fc,0xc(%esp)
c0109baf:	c0 
c0109bb0:	c7 44 24 08 21 7a 11 	movl   $0xc0117a21,0x8(%esp)
c0109bb7:	c0 
c0109bb8:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
c0109bbf:	00 
c0109bc0:	c7 04 24 36 7a 11 c0 	movl   $0xc0117a36,(%esp)
c0109bc7:	e8 fc 72 ff ff       	call   c0100ec8 <__panic>
            wakeup_wait(&(sem->wait_queue), wait, wait_state, 1);
c0109bcc:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bcf:	8d 50 04             	lea    0x4(%eax),%edx
c0109bd2:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0109bd9:	00 
c0109bda:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109bdd:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109be1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109be4:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109be8:	89 14 24             	mov    %edx,(%esp)
c0109beb:	e8 95 04 00 00       	call   c010a085 <wakeup_wait>
        }
    }
    local_intr_restore(intr_flag);
c0109bf0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109bf3:	89 04 24             	mov    %eax,(%esp)
c0109bf6:	e8 38 ff ff ff       	call   c0109b33 <__intr_restore>
}
c0109bfb:	c9                   	leave  
c0109bfc:	c3                   	ret    

c0109bfd <__down>:

static __noinline uint32_t __down(semaphore_t *sem, uint32_t wait_state) {
c0109bfd:	55                   	push   %ebp
c0109bfe:	89 e5                	mov    %esp,%ebp
c0109c00:	83 ec 38             	sub    $0x38,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0109c03:	e8 01 ff ff ff       	call   c0109b09 <__intr_save>
c0109c08:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (sem->value > 0) {
c0109c0b:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c0e:	8b 00                	mov    (%eax),%eax
c0109c10:	85 c0                	test   %eax,%eax
c0109c12:	7e 22                	jle    c0109c36 <__down+0x39>
        sem->value --;
c0109c14:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c17:	8b 00                	mov    (%eax),%eax
c0109c19:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109c1c:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c1f:	89 10                	mov    %edx,(%eax)
        local_intr_restore(intr_flag);
c0109c21:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109c24:	89 04 24             	mov    %eax,(%esp)
c0109c27:	e8 07 ff ff ff       	call   c0109b33 <__intr_restore>
        return 0;
c0109c2c:	b8 00 00 00 00       	mov    $0x0,%eax
c0109c31:	e9 81 00 00 00       	jmp    c0109cb7 <__down+0xba>
    }
    wait_t __wait, *wait = &__wait;
c0109c36:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0109c39:	89 45 f0             	mov    %eax,-0x10(%ebp)
    wait_current_set(&(sem->wait_queue), wait, wait_state);
c0109c3c:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c3f:	8d 50 04             	lea    0x4(%eax),%edx
c0109c42:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109c45:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109c49:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109c4c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109c50:	89 14 24             	mov    %edx,(%esp)
c0109c53:	e8 34 05 00 00       	call   c010a18c <wait_current_set>
    local_intr_restore(intr_flag);
c0109c58:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109c5b:	89 04 24             	mov    %eax,(%esp)
c0109c5e:	e8 d0 fe ff ff       	call   c0109b33 <__intr_restore>

    schedule();
c0109c63:	e8 12 4a 00 00       	call   c010e67a <schedule>

    local_intr_save(intr_flag);
c0109c68:	e8 9c fe ff ff       	call   c0109b09 <__intr_save>
c0109c6d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    wait_current_del(&(sem->wait_queue), wait);
c0109c70:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109c73:	89 04 24             	mov    %eax,(%esp)
c0109c76:	e8 e2 03 00 00       	call   c010a05d <wait_in_queue>
c0109c7b:	85 c0                	test   %eax,%eax
c0109c7d:	74 15                	je     c0109c94 <__down+0x97>
c0109c7f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c82:	8d 50 04             	lea    0x4(%eax),%edx
c0109c85:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109c88:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109c8c:	89 14 24             	mov    %edx,(%esp)
c0109c8f:	e8 c4 01 00 00       	call   c0109e58 <wait_queue_del>
    local_intr_restore(intr_flag);
c0109c94:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109c97:	89 04 24             	mov    %eax,(%esp)
c0109c9a:	e8 94 fe ff ff       	call   c0109b33 <__intr_restore>

    if (wait->wakeup_flags != wait_state) {
c0109c9f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109ca2:	8b 40 04             	mov    0x4(%eax),%eax
c0109ca5:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109ca8:	74 08                	je     c0109cb2 <__down+0xb5>
        return wait->wakeup_flags;
c0109caa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109cad:	8b 40 04             	mov    0x4(%eax),%eax
c0109cb0:	eb 05                	jmp    c0109cb7 <__down+0xba>
    }
    return 0;
c0109cb2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109cb7:	c9                   	leave  
c0109cb8:	c3                   	ret    

c0109cb9 <up>:

void
up(semaphore_t *sem) {
c0109cb9:	55                   	push   %ebp
c0109cba:	89 e5                	mov    %esp,%ebp
c0109cbc:	83 ec 18             	sub    $0x18,%esp
    __up(sem, WT_KSEM);
c0109cbf:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
c0109cc6:	00 
c0109cc7:	8b 45 08             	mov    0x8(%ebp),%eax
c0109cca:	89 04 24             	mov    %eax,(%esp)
c0109ccd:	e8 92 fe ff ff       	call   c0109b64 <__up>
}
c0109cd2:	c9                   	leave  
c0109cd3:	c3                   	ret    

c0109cd4 <down>:

void
down(semaphore_t *sem) {
c0109cd4:	55                   	push   %ebp
c0109cd5:	89 e5                	mov    %esp,%ebp
c0109cd7:	83 ec 28             	sub    $0x28,%esp
    uint32_t flags = __down(sem, WT_KSEM);
c0109cda:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
c0109ce1:	00 
c0109ce2:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ce5:	89 04 24             	mov    %eax,(%esp)
c0109ce8:	e8 10 ff ff ff       	call   c0109bfd <__down>
c0109ced:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(flags == 0);
c0109cf0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109cf4:	74 24                	je     c0109d1a <down+0x46>
c0109cf6:	c7 44 24 0c 46 7a 11 	movl   $0xc0117a46,0xc(%esp)
c0109cfd:	c0 
c0109cfe:	c7 44 24 08 21 7a 11 	movl   $0xc0117a21,0x8(%esp)
c0109d05:	c0 
c0109d06:	c7 44 24 04 40 00 00 	movl   $0x40,0x4(%esp)
c0109d0d:	00 
c0109d0e:	c7 04 24 36 7a 11 c0 	movl   $0xc0117a36,(%esp)
c0109d15:	e8 ae 71 ff ff       	call   c0100ec8 <__panic>
}
c0109d1a:	c9                   	leave  
c0109d1b:	c3                   	ret    

c0109d1c <try_down>:

bool
try_down(semaphore_t *sem) {
c0109d1c:	55                   	push   %ebp
c0109d1d:	89 e5                	mov    %esp,%ebp
c0109d1f:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag, ret = 0;
c0109d22:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    local_intr_save(intr_flag);
c0109d29:	e8 db fd ff ff       	call   c0109b09 <__intr_save>
c0109d2e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (sem->value > 0) {
c0109d31:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d34:	8b 00                	mov    (%eax),%eax
c0109d36:	85 c0                	test   %eax,%eax
c0109d38:	7e 14                	jle    c0109d4e <try_down+0x32>
        sem->value --, ret = 1;
c0109d3a:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d3d:	8b 00                	mov    (%eax),%eax
c0109d3f:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109d42:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d45:	89 10                	mov    %edx,(%eax)
c0109d47:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }
    local_intr_restore(intr_flag);
c0109d4e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109d51:	89 04 24             	mov    %eax,(%esp)
c0109d54:	e8 da fd ff ff       	call   c0109b33 <__intr_restore>
    return ret;
c0109d59:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0109d5c:	c9                   	leave  
c0109d5d:	c3                   	ret    

c0109d5e <wait_init>:
#include <sync.h>
#include <wait.h>
#include <proc.h>

void
wait_init(wait_t *wait, struct proc_struct *proc) {
c0109d5e:	55                   	push   %ebp
c0109d5f:	89 e5                	mov    %esp,%ebp
c0109d61:	83 ec 10             	sub    $0x10,%esp
    wait->proc = proc;
c0109d64:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d67:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109d6a:	89 10                	mov    %edx,(%eax)
    wait->wakeup_flags = WT_INTERRUPTED;
c0109d6c:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d6f:	c7 40 04 00 00 00 80 	movl   $0x80000000,0x4(%eax)
    list_init(&(wait->wait_link));
c0109d76:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d79:	83 c0 0c             	add    $0xc,%eax
c0109d7c:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0109d7f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109d82:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109d85:	89 50 04             	mov    %edx,0x4(%eax)
c0109d88:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109d8b:	8b 50 04             	mov    0x4(%eax),%edx
c0109d8e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109d91:	89 10                	mov    %edx,(%eax)
}
c0109d93:	c9                   	leave  
c0109d94:	c3                   	ret    

c0109d95 <wait_queue_init>:

void
wait_queue_init(wait_queue_t *queue) {
c0109d95:	55                   	push   %ebp
c0109d96:	89 e5                	mov    %esp,%ebp
c0109d98:	83 ec 10             	sub    $0x10,%esp
    list_init(&(queue->wait_head));
c0109d9b:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d9e:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0109da1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109da4:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109da7:	89 50 04             	mov    %edx,0x4(%eax)
c0109daa:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109dad:	8b 50 04             	mov    0x4(%eax),%edx
c0109db0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109db3:	89 10                	mov    %edx,(%eax)
}
c0109db5:	c9                   	leave  
c0109db6:	c3                   	ret    

c0109db7 <wait_queue_add>:

void
wait_queue_add(wait_queue_t *queue, wait_t *wait) {
c0109db7:	55                   	push   %ebp
c0109db8:	89 e5                	mov    %esp,%ebp
c0109dba:	83 ec 38             	sub    $0x38,%esp
    assert(list_empty(&(wait->wait_link)) && wait->proc != NULL);
c0109dbd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109dc0:	83 c0 0c             	add    $0xc,%eax
c0109dc3:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109dc6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109dc9:	8b 40 04             	mov    0x4(%eax),%eax
c0109dcc:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0109dcf:	0f 94 c0             	sete   %al
c0109dd2:	0f b6 c0             	movzbl %al,%eax
c0109dd5:	85 c0                	test   %eax,%eax
c0109dd7:	74 09                	je     c0109de2 <wait_queue_add+0x2b>
c0109dd9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109ddc:	8b 00                	mov    (%eax),%eax
c0109dde:	85 c0                	test   %eax,%eax
c0109de0:	75 24                	jne    c0109e06 <wait_queue_add+0x4f>
c0109de2:	c7 44 24 0c 54 7a 11 	movl   $0xc0117a54,0xc(%esp)
c0109de9:	c0 
c0109dea:	c7 44 24 08 89 7a 11 	movl   $0xc0117a89,0x8(%esp)
c0109df1:	c0 
c0109df2:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
c0109df9:	00 
c0109dfa:	c7 04 24 9e 7a 11 c0 	movl   $0xc0117a9e,(%esp)
c0109e01:	e8 c2 70 ff ff       	call   c0100ec8 <__panic>
    wait->wait_queue = queue;
c0109e06:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109e09:	8b 55 08             	mov    0x8(%ebp),%edx
c0109e0c:	89 50 08             	mov    %edx,0x8(%eax)
    list_add_before(&(queue->wait_head), &(wait->wait_link));
c0109e0f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109e12:	8d 50 0c             	lea    0xc(%eax),%edx
c0109e15:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e18:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109e1b:	89 55 ec             	mov    %edx,-0x14(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0109e1e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109e21:	8b 00                	mov    (%eax),%eax
c0109e23:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109e26:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0109e29:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0109e2c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109e2f:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0109e32:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109e35:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0109e38:	89 10                	mov    %edx,(%eax)
c0109e3a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109e3d:	8b 10                	mov    (%eax),%edx
c0109e3f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109e42:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0109e45:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109e48:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0109e4b:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0109e4e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109e51:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0109e54:	89 10                	mov    %edx,(%eax)
}
c0109e56:	c9                   	leave  
c0109e57:	c3                   	ret    

c0109e58 <wait_queue_del>:

void
wait_queue_del(wait_queue_t *queue, wait_t *wait) {
c0109e58:	55                   	push   %ebp
c0109e59:	89 e5                	mov    %esp,%ebp
c0109e5b:	83 ec 38             	sub    $0x38,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c0109e5e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109e61:	83 c0 0c             	add    $0xc,%eax
c0109e64:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109e67:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109e6a:	8b 40 04             	mov    0x4(%eax),%eax
c0109e6d:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0109e70:	0f 94 c0             	sete   %al
c0109e73:	0f b6 c0             	movzbl %al,%eax
c0109e76:	85 c0                	test   %eax,%eax
c0109e78:	75 0b                	jne    c0109e85 <wait_queue_del+0x2d>
c0109e7a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109e7d:	8b 40 08             	mov    0x8(%eax),%eax
c0109e80:	3b 45 08             	cmp    0x8(%ebp),%eax
c0109e83:	74 24                	je     c0109ea9 <wait_queue_del+0x51>
c0109e85:	c7 44 24 0c b0 7a 11 	movl   $0xc0117ab0,0xc(%esp)
c0109e8c:	c0 
c0109e8d:	c7 44 24 08 89 7a 11 	movl   $0xc0117a89,0x8(%esp)
c0109e94:	c0 
c0109e95:	c7 44 24 04 1c 00 00 	movl   $0x1c,0x4(%esp)
c0109e9c:	00 
c0109e9d:	c7 04 24 9e 7a 11 c0 	movl   $0xc0117a9e,(%esp)
c0109ea4:	e8 1f 70 ff ff       	call   c0100ec8 <__panic>
    list_del_init(&(wait->wait_link));
c0109ea9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109eac:	83 c0 0c             	add    $0xc,%eax
c0109eaf:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109eb2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109eb5:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0109eb8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109ebb:	8b 40 04             	mov    0x4(%eax),%eax
c0109ebe:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109ec1:	8b 12                	mov    (%edx),%edx
c0109ec3:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0109ec6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0109ec9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109ecc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0109ecf:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0109ed2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109ed5:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0109ed8:	89 10                	mov    %edx,(%eax)
c0109eda:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109edd:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0109ee0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109ee3:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0109ee6:	89 50 04             	mov    %edx,0x4(%eax)
c0109ee9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109eec:	8b 50 04             	mov    0x4(%eax),%edx
c0109eef:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109ef2:	89 10                	mov    %edx,(%eax)
}
c0109ef4:	c9                   	leave  
c0109ef5:	c3                   	ret    

c0109ef6 <wait_queue_next>:

wait_t *
wait_queue_next(wait_queue_t *queue, wait_t *wait) {
c0109ef6:	55                   	push   %ebp
c0109ef7:	89 e5                	mov    %esp,%ebp
c0109ef9:	83 ec 28             	sub    $0x28,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c0109efc:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109eff:	83 c0 0c             	add    $0xc,%eax
c0109f02:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109f05:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109f08:	8b 40 04             	mov    0x4(%eax),%eax
c0109f0b:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0109f0e:	0f 94 c0             	sete   %al
c0109f11:	0f b6 c0             	movzbl %al,%eax
c0109f14:	85 c0                	test   %eax,%eax
c0109f16:	75 0b                	jne    c0109f23 <wait_queue_next+0x2d>
c0109f18:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109f1b:	8b 40 08             	mov    0x8(%eax),%eax
c0109f1e:	3b 45 08             	cmp    0x8(%ebp),%eax
c0109f21:	74 24                	je     c0109f47 <wait_queue_next+0x51>
c0109f23:	c7 44 24 0c b0 7a 11 	movl   $0xc0117ab0,0xc(%esp)
c0109f2a:	c0 
c0109f2b:	c7 44 24 08 89 7a 11 	movl   $0xc0117a89,0x8(%esp)
c0109f32:	c0 
c0109f33:	c7 44 24 04 22 00 00 	movl   $0x22,0x4(%esp)
c0109f3a:	00 
c0109f3b:	c7 04 24 9e 7a 11 c0 	movl   $0xc0117a9e,(%esp)
c0109f42:	e8 81 6f ff ff       	call   c0100ec8 <__panic>
    list_entry_t *le = list_next(&(wait->wait_link));
c0109f47:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109f4a:	83 c0 0c             	add    $0xc,%eax
c0109f4d:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0109f50:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109f53:	8b 40 04             	mov    0x4(%eax),%eax
c0109f56:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (le != &(queue->wait_head)) {
c0109f59:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f5c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0109f5f:	74 08                	je     c0109f69 <wait_queue_next+0x73>
        return le2wait(le, wait_link);
c0109f61:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109f64:	83 e8 0c             	sub    $0xc,%eax
c0109f67:	eb 05                	jmp    c0109f6e <wait_queue_next+0x78>
    }
    return NULL;
c0109f69:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109f6e:	c9                   	leave  
c0109f6f:	c3                   	ret    

c0109f70 <wait_queue_prev>:

wait_t *
wait_queue_prev(wait_queue_t *queue, wait_t *wait) {
c0109f70:	55                   	push   %ebp
c0109f71:	89 e5                	mov    %esp,%ebp
c0109f73:	83 ec 28             	sub    $0x28,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c0109f76:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109f79:	83 c0 0c             	add    $0xc,%eax
c0109f7c:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109f7f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109f82:	8b 40 04             	mov    0x4(%eax),%eax
c0109f85:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0109f88:	0f 94 c0             	sete   %al
c0109f8b:	0f b6 c0             	movzbl %al,%eax
c0109f8e:	85 c0                	test   %eax,%eax
c0109f90:	75 0b                	jne    c0109f9d <wait_queue_prev+0x2d>
c0109f92:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109f95:	8b 40 08             	mov    0x8(%eax),%eax
c0109f98:	3b 45 08             	cmp    0x8(%ebp),%eax
c0109f9b:	74 24                	je     c0109fc1 <wait_queue_prev+0x51>
c0109f9d:	c7 44 24 0c b0 7a 11 	movl   $0xc0117ab0,0xc(%esp)
c0109fa4:	c0 
c0109fa5:	c7 44 24 08 89 7a 11 	movl   $0xc0117a89,0x8(%esp)
c0109fac:	c0 
c0109fad:	c7 44 24 04 2c 00 00 	movl   $0x2c,0x4(%esp)
c0109fb4:	00 
c0109fb5:	c7 04 24 9e 7a 11 c0 	movl   $0xc0117a9e,(%esp)
c0109fbc:	e8 07 6f ff ff       	call   c0100ec8 <__panic>
    list_entry_t *le = list_prev(&(wait->wait_link));
c0109fc1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109fc4:	83 c0 0c             	add    $0xc,%eax
c0109fc7:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0109fca:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109fcd:	8b 00                	mov    (%eax),%eax
c0109fcf:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (le != &(queue->wait_head)) {
c0109fd2:	8b 45 08             	mov    0x8(%ebp),%eax
c0109fd5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0109fd8:	74 08                	je     c0109fe2 <wait_queue_prev+0x72>
        return le2wait(le, wait_link);
c0109fda:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109fdd:	83 e8 0c             	sub    $0xc,%eax
c0109fe0:	eb 05                	jmp    c0109fe7 <wait_queue_prev+0x77>
    }
    return NULL;
c0109fe2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109fe7:	c9                   	leave  
c0109fe8:	c3                   	ret    

c0109fe9 <wait_queue_first>:

wait_t *
wait_queue_first(wait_queue_t *queue) {
c0109fe9:	55                   	push   %ebp
c0109fea:	89 e5                	mov    %esp,%ebp
c0109fec:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_next(&(queue->wait_head));
c0109fef:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ff2:	89 45 f8             	mov    %eax,-0x8(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0109ff5:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0109ff8:	8b 40 04             	mov    0x4(%eax),%eax
c0109ffb:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(queue->wait_head)) {
c0109ffe:	8b 45 08             	mov    0x8(%ebp),%eax
c010a001:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010a004:	74 08                	je     c010a00e <wait_queue_first+0x25>
        return le2wait(le, wait_link);
c010a006:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a009:	83 e8 0c             	sub    $0xc,%eax
c010a00c:	eb 05                	jmp    c010a013 <wait_queue_first+0x2a>
    }
    return NULL;
c010a00e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a013:	c9                   	leave  
c010a014:	c3                   	ret    

c010a015 <wait_queue_last>:

wait_t *
wait_queue_last(wait_queue_t *queue) {
c010a015:	55                   	push   %ebp
c010a016:	89 e5                	mov    %esp,%ebp
c010a018:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_prev(&(queue->wait_head));
c010a01b:	8b 45 08             	mov    0x8(%ebp),%eax
c010a01e:	89 45 f8             	mov    %eax,-0x8(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010a021:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a024:	8b 00                	mov    (%eax),%eax
c010a026:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(queue->wait_head)) {
c010a029:	8b 45 08             	mov    0x8(%ebp),%eax
c010a02c:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010a02f:	74 08                	je     c010a039 <wait_queue_last+0x24>
        return le2wait(le, wait_link);
c010a031:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a034:	83 e8 0c             	sub    $0xc,%eax
c010a037:	eb 05                	jmp    c010a03e <wait_queue_last+0x29>
    }
    return NULL;
c010a039:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a03e:	c9                   	leave  
c010a03f:	c3                   	ret    

c010a040 <wait_queue_empty>:

bool
wait_queue_empty(wait_queue_t *queue) {
c010a040:	55                   	push   %ebp
c010a041:	89 e5                	mov    %esp,%ebp
c010a043:	83 ec 10             	sub    $0x10,%esp
    return list_empty(&(queue->wait_head));
c010a046:	8b 45 08             	mov    0x8(%ebp),%eax
c010a049:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010a04c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a04f:	8b 40 04             	mov    0x4(%eax),%eax
c010a052:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c010a055:	0f 94 c0             	sete   %al
c010a058:	0f b6 c0             	movzbl %al,%eax
}
c010a05b:	c9                   	leave  
c010a05c:	c3                   	ret    

c010a05d <wait_in_queue>:

bool
wait_in_queue(wait_t *wait) {
c010a05d:	55                   	push   %ebp
c010a05e:	89 e5                	mov    %esp,%ebp
c010a060:	83 ec 10             	sub    $0x10,%esp
    return !list_empty(&(wait->wait_link));
c010a063:	8b 45 08             	mov    0x8(%ebp),%eax
c010a066:	83 c0 0c             	add    $0xc,%eax
c010a069:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010a06c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a06f:	8b 40 04             	mov    0x4(%eax),%eax
c010a072:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c010a075:	0f 94 c0             	sete   %al
c010a078:	0f b6 c0             	movzbl %al,%eax
c010a07b:	85 c0                	test   %eax,%eax
c010a07d:	0f 94 c0             	sete   %al
c010a080:	0f b6 c0             	movzbl %al,%eax
}
c010a083:	c9                   	leave  
c010a084:	c3                   	ret    

c010a085 <wakeup_wait>:

void
wakeup_wait(wait_queue_t *queue, wait_t *wait, uint32_t wakeup_flags, bool del) {
c010a085:	55                   	push   %ebp
c010a086:	89 e5                	mov    %esp,%ebp
c010a088:	83 ec 18             	sub    $0x18,%esp
    if (del) {
c010a08b:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010a08f:	74 12                	je     c010a0a3 <wakeup_wait+0x1e>
        wait_queue_del(queue, wait);
c010a091:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a094:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a098:	8b 45 08             	mov    0x8(%ebp),%eax
c010a09b:	89 04 24             	mov    %eax,(%esp)
c010a09e:	e8 b5 fd ff ff       	call   c0109e58 <wait_queue_del>
    }
    wait->wakeup_flags = wakeup_flags;
c010a0a3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a0a6:	8b 55 10             	mov    0x10(%ebp),%edx
c010a0a9:	89 50 04             	mov    %edx,0x4(%eax)
    wakeup_proc(wait->proc);
c010a0ac:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a0af:	8b 00                	mov    (%eax),%eax
c010a0b1:	89 04 24             	mov    %eax,(%esp)
c010a0b4:	e8 25 45 00 00       	call   c010e5de <wakeup_proc>
}
c010a0b9:	c9                   	leave  
c010a0ba:	c3                   	ret    

c010a0bb <wakeup_first>:

void
wakeup_first(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
c010a0bb:	55                   	push   %ebp
c010a0bc:	89 e5                	mov    %esp,%ebp
c010a0be:	83 ec 28             	sub    $0x28,%esp
    wait_t *wait;
    if ((wait = wait_queue_first(queue)) != NULL) {
c010a0c1:	8b 45 08             	mov    0x8(%ebp),%eax
c010a0c4:	89 04 24             	mov    %eax,(%esp)
c010a0c7:	e8 1d ff ff ff       	call   c0109fe9 <wait_queue_first>
c010a0cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a0cf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a0d3:	74 20                	je     c010a0f5 <wakeup_first+0x3a>
        wakeup_wait(queue, wait, wakeup_flags, del);
c010a0d5:	8b 45 10             	mov    0x10(%ebp),%eax
c010a0d8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a0dc:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a0df:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a0e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a0e6:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a0ea:	8b 45 08             	mov    0x8(%ebp),%eax
c010a0ed:	89 04 24             	mov    %eax,(%esp)
c010a0f0:	e8 90 ff ff ff       	call   c010a085 <wakeup_wait>
    }
}
c010a0f5:	c9                   	leave  
c010a0f6:	c3                   	ret    

c010a0f7 <wakeup_queue>:

void
wakeup_queue(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
c010a0f7:	55                   	push   %ebp
c010a0f8:	89 e5                	mov    %esp,%ebp
c010a0fa:	83 ec 28             	sub    $0x28,%esp
    wait_t *wait;
    if ((wait = wait_queue_first(queue)) != NULL) {
c010a0fd:	8b 45 08             	mov    0x8(%ebp),%eax
c010a100:	89 04 24             	mov    %eax,(%esp)
c010a103:	e8 e1 fe ff ff       	call   c0109fe9 <wait_queue_first>
c010a108:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a10b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a10f:	74 79                	je     c010a18a <wakeup_queue+0x93>
        if (del) {
c010a111:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010a115:	74 37                	je     c010a14e <wakeup_queue+0x57>
            do {
                wakeup_wait(queue, wait, wakeup_flags, 1);
c010a117:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010a11e:	00 
c010a11f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a122:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a126:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a129:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a12d:	8b 45 08             	mov    0x8(%ebp),%eax
c010a130:	89 04 24             	mov    %eax,(%esp)
c010a133:	e8 4d ff ff ff       	call   c010a085 <wakeup_wait>
            } while ((wait = wait_queue_first(queue)) != NULL);
c010a138:	8b 45 08             	mov    0x8(%ebp),%eax
c010a13b:	89 04 24             	mov    %eax,(%esp)
c010a13e:	e8 a6 fe ff ff       	call   c0109fe9 <wait_queue_first>
c010a143:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a146:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a14a:	75 cb                	jne    c010a117 <wakeup_queue+0x20>
c010a14c:	eb 3c                	jmp    c010a18a <wakeup_queue+0x93>
        }
        else {
            do {
                wakeup_wait(queue, wait, wakeup_flags, 0);
c010a14e:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010a155:	00 
c010a156:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a159:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a15d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a160:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a164:	8b 45 08             	mov    0x8(%ebp),%eax
c010a167:	89 04 24             	mov    %eax,(%esp)
c010a16a:	e8 16 ff ff ff       	call   c010a085 <wakeup_wait>
            } while ((wait = wait_queue_next(queue, wait)) != NULL);
c010a16f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a172:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a176:	8b 45 08             	mov    0x8(%ebp),%eax
c010a179:	89 04 24             	mov    %eax,(%esp)
c010a17c:	e8 75 fd ff ff       	call   c0109ef6 <wait_queue_next>
c010a181:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a184:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a188:	75 c4                	jne    c010a14e <wakeup_queue+0x57>
        }
    }
}
c010a18a:	c9                   	leave  
c010a18b:	c3                   	ret    

c010a18c <wait_current_set>:

void
wait_current_set(wait_queue_t *queue, wait_t *wait, uint32_t wait_state) {
c010a18c:	55                   	push   %ebp
c010a18d:	89 e5                	mov    %esp,%ebp
c010a18f:	83 ec 18             	sub    $0x18,%esp
    assert(current != NULL);
c010a192:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010a197:	85 c0                	test   %eax,%eax
c010a199:	75 24                	jne    c010a1bf <wait_current_set+0x33>
c010a19b:	c7 44 24 0c ed 7a 11 	movl   $0xc0117aed,0xc(%esp)
c010a1a2:	c0 
c010a1a3:	c7 44 24 08 89 7a 11 	movl   $0xc0117a89,0x8(%esp)
c010a1aa:	c0 
c010a1ab:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
c010a1b2:	00 
c010a1b3:	c7 04 24 9e 7a 11 c0 	movl   $0xc0117a9e,(%esp)
c010a1ba:	e8 09 6d ff ff       	call   c0100ec8 <__panic>
    wait_init(wait, current);
c010a1bf:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010a1c4:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a1c8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a1cb:	89 04 24             	mov    %eax,(%esp)
c010a1ce:	e8 8b fb ff ff       	call   c0109d5e <wait_init>
    current->state = PROC_SLEEPING;
c010a1d3:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010a1d8:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    current->wait_state = wait_state;
c010a1de:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010a1e3:	8b 55 10             	mov    0x10(%ebp),%edx
c010a1e6:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
    wait_queue_add(queue, wait);
c010a1ec:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a1ef:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a1f3:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1f6:	89 04 24             	mov    %eax,(%esp)
c010a1f9:	e8 b9 fb ff ff       	call   c0109db7 <wait_queue_add>
}
c010a1fe:	c9                   	leave  
c010a1ff:	c3                   	ret    

c010a200 <files_count>:
void files_destroy(struct files_struct *filesp);
void files_closeall(struct files_struct *filesp);
int dup_files(struct files_struct *to, struct files_struct *from);

static inline int
files_count(struct files_struct *filesp) {
c010a200:	55                   	push   %ebp
c010a201:	89 e5                	mov    %esp,%ebp
    return filesp->files_count;
c010a203:	8b 45 08             	mov    0x8(%ebp),%eax
c010a206:	8b 40 08             	mov    0x8(%eax),%eax
}
c010a209:	5d                   	pop    %ebp
c010a20a:	c3                   	ret    

c010a20b <fopen_count>:
int file_dup(int fd1, int fd2);
int file_pipe(int fd[]);
int file_mkfifo(const char *name, uint32_t open_flags);

static inline int
fopen_count(struct file *file) {
c010a20b:	55                   	push   %ebp
c010a20c:	89 e5                	mov    %esp,%ebp
    return file->open_count;
c010a20e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a211:	8b 40 18             	mov    0x18(%eax),%eax
}
c010a214:	5d                   	pop    %ebp
c010a215:	c3                   	ret    

c010a216 <fopen_count_inc>:

static inline int
fopen_count_inc(struct file *file) {
c010a216:	55                   	push   %ebp
c010a217:	89 e5                	mov    %esp,%ebp
    file->open_count += 1;
c010a219:	8b 45 08             	mov    0x8(%ebp),%eax
c010a21c:	8b 40 18             	mov    0x18(%eax),%eax
c010a21f:	8d 50 01             	lea    0x1(%eax),%edx
c010a222:	8b 45 08             	mov    0x8(%ebp),%eax
c010a225:	89 50 18             	mov    %edx,0x18(%eax)
    return file->open_count;
c010a228:	8b 45 08             	mov    0x8(%ebp),%eax
c010a22b:	8b 40 18             	mov    0x18(%eax),%eax
}
c010a22e:	5d                   	pop    %ebp
c010a22f:	c3                   	ret    

c010a230 <fopen_count_dec>:

static inline int
fopen_count_dec(struct file *file) {
c010a230:	55                   	push   %ebp
c010a231:	89 e5                	mov    %esp,%ebp
    file->open_count -= 1;
c010a233:	8b 45 08             	mov    0x8(%ebp),%eax
c010a236:	8b 40 18             	mov    0x18(%eax),%eax
c010a239:	8d 50 ff             	lea    -0x1(%eax),%edx
c010a23c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a23f:	89 50 18             	mov    %edx,0x18(%eax)
    return file->open_count;
c010a242:	8b 45 08             	mov    0x8(%ebp),%eax
c010a245:	8b 40 18             	mov    0x18(%eax),%eax
}
c010a248:	5d                   	pop    %ebp
c010a249:	c3                   	ret    

c010a24a <get_fd_array>:

#define testfd(fd)                          ((fd) >= 0 && (fd) < FILES_STRUCT_NENTRY)

// get_fd_array - get current process's open files table
static struct file *
get_fd_array(void) {
c010a24a:	55                   	push   %ebp
c010a24b:	89 e5                	mov    %esp,%ebp
c010a24d:	83 ec 28             	sub    $0x28,%esp
    struct files_struct *filesp = current->filesp;
c010a250:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010a255:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010a25b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(filesp != NULL && files_count(filesp) > 0);
c010a25e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a262:	74 0f                	je     c010a273 <get_fd_array+0x29>
c010a264:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a267:	89 04 24             	mov    %eax,(%esp)
c010a26a:	e8 91 ff ff ff       	call   c010a200 <files_count>
c010a26f:	85 c0                	test   %eax,%eax
c010a271:	7f 24                	jg     c010a297 <get_fd_array+0x4d>
c010a273:	c7 44 24 0c 00 7b 11 	movl   $0xc0117b00,0xc(%esp)
c010a27a:	c0 
c010a27b:	c7 44 24 08 2a 7b 11 	movl   $0xc0117b2a,0x8(%esp)
c010a282:	c0 
c010a283:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
c010a28a:	00 
c010a28b:	c7 04 24 3f 7b 11 c0 	movl   $0xc0117b3f,(%esp)
c010a292:	e8 31 6c ff ff       	call   c0100ec8 <__panic>
    return filesp->fd_array;
c010a297:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a29a:	8b 40 04             	mov    0x4(%eax),%eax
}
c010a29d:	c9                   	leave  
c010a29e:	c3                   	ret    

c010a29f <fd_array_init>:

// fd_array_init - initialize the open files table
void
fd_array_init(struct file *fd_array) {
c010a29f:	55                   	push   %ebp
c010a2a0:	89 e5                	mov    %esp,%ebp
c010a2a2:	83 ec 10             	sub    $0x10,%esp
    int fd;
    struct file *file = fd_array;
c010a2a5:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2a8:	89 45 f8             	mov    %eax,-0x8(%ebp)
    for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
c010a2ab:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c010a2b2:	eb 24                	jmp    c010a2d8 <fd_array_init+0x39>
        file->open_count = 0;
c010a2b4:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a2b7:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
        file->status = FD_NONE, file->fd = fd;
c010a2be:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a2c1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c010a2c7:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a2ca:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010a2cd:	89 50 0c             	mov    %edx,0xc(%eax)
// fd_array_init - initialize the open files table
void
fd_array_init(struct file *fd_array) {
    int fd;
    struct file *file = fd_array;
    for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
c010a2d0:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010a2d4:	83 45 f8 1c          	addl   $0x1c,-0x8(%ebp)
c010a2d8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a2db:	3d 90 00 00 00       	cmp    $0x90,%eax
c010a2e0:	76 d2                	jbe    c010a2b4 <fd_array_init+0x15>
        file->open_count = 0;
        file->status = FD_NONE, file->fd = fd;
    }
}
c010a2e2:	c9                   	leave  
c010a2e3:	c3                   	ret    

c010a2e4 <fd_array_alloc>:

// fs_array_alloc - allocate a free file item (with FD_NONE status) in open files table
static int
fd_array_alloc(int fd, struct file **file_store) {
c010a2e4:	55                   	push   %ebp
c010a2e5:	89 e5                	mov    %esp,%ebp
c010a2e7:	83 ec 28             	sub    $0x28,%esp
//    panic("debug");
    struct file *file = get_fd_array();
c010a2ea:	e8 5b ff ff ff       	call   c010a24a <get_fd_array>
c010a2ef:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (fd == NO_FD) {
c010a2f2:	81 7d 08 d9 6a ff ff 	cmpl   $0xffff6ad9,0x8(%ebp)
c010a2f9:	75 30                	jne    c010a32b <fd_array_alloc+0x47>
        for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
c010a2fb:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
c010a302:	eb 13                	jmp    c010a317 <fd_array_alloc+0x33>
            if (file->status == FD_NONE) {
c010a304:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a307:	8b 00                	mov    (%eax),%eax
c010a309:	85 c0                	test   %eax,%eax
c010a30b:	75 02                	jne    c010a30f <fd_array_alloc+0x2b>
                goto found;
c010a30d:	eb 59                	jmp    c010a368 <fd_array_alloc+0x84>
static int
fd_array_alloc(int fd, struct file **file_store) {
//    panic("debug");
    struct file *file = get_fd_array();
    if (fd == NO_FD) {
        for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
c010a30f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010a313:	83 45 f4 1c          	addl   $0x1c,-0xc(%ebp)
c010a317:	8b 45 08             	mov    0x8(%ebp),%eax
c010a31a:	3d 90 00 00 00       	cmp    $0x90,%eax
c010a31f:	76 e3                	jbe    c010a304 <fd_array_alloc+0x20>
            if (file->status == FD_NONE) {
                goto found;
            }
        }
        return -E_MAX_OPEN;
c010a321:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
c010a326:	e9 90 00 00 00       	jmp    c010a3bb <fd_array_alloc+0xd7>
    }
    else {
        if (testfd(fd)) {
c010a32b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a32f:	78 30                	js     c010a361 <fd_array_alloc+0x7d>
c010a331:	8b 45 08             	mov    0x8(%ebp),%eax
c010a334:	3d 90 00 00 00       	cmp    $0x90,%eax
c010a339:	77 26                	ja     c010a361 <fd_array_alloc+0x7d>
            file += fd;
c010a33b:	8b 45 08             	mov    0x8(%ebp),%eax
c010a33e:	c1 e0 02             	shl    $0x2,%eax
c010a341:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010a348:	29 c2                	sub    %eax,%edx
c010a34a:	89 d0                	mov    %edx,%eax
c010a34c:	01 45 f4             	add    %eax,-0xc(%ebp)
            if (file->status == FD_NONE) {
c010a34f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a352:	8b 00                	mov    (%eax),%eax
c010a354:	85 c0                	test   %eax,%eax
c010a356:	75 02                	jne    c010a35a <fd_array_alloc+0x76>
                goto found;
c010a358:	eb 0e                	jmp    c010a368 <fd_array_alloc+0x84>
            }
            return -E_BUSY;
c010a35a:	b8 f1 ff ff ff       	mov    $0xfffffff1,%eax
c010a35f:	eb 5a                	jmp    c010a3bb <fd_array_alloc+0xd7>
        }
        return -E_INVAL;
c010a361:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010a366:	eb 53                	jmp    c010a3bb <fd_array_alloc+0xd7>
    }
found:
    assert(fopen_count(file) == 0);
c010a368:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a36b:	89 04 24             	mov    %eax,(%esp)
c010a36e:	e8 98 fe ff ff       	call   c010a20b <fopen_count>
c010a373:	85 c0                	test   %eax,%eax
c010a375:	74 24                	je     c010a39b <fd_array_alloc+0xb7>
c010a377:	c7 44 24 0c 4e 7b 11 	movl   $0xc0117b4e,0xc(%esp)
c010a37e:	c0 
c010a37f:	c7 44 24 08 2a 7b 11 	movl   $0xc0117b2a,0x8(%esp)
c010a386:	c0 
c010a387:	c7 44 24 04 3b 00 00 	movl   $0x3b,0x4(%esp)
c010a38e:	00 
c010a38f:	c7 04 24 3f 7b 11 c0 	movl   $0xc0117b3f,(%esp)
c010a396:	e8 2d 6b ff ff       	call   c0100ec8 <__panic>
    file->status = FD_INIT, file->node = NULL;
c010a39b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a39e:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c010a3a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a3a7:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    *file_store = file;
c010a3ae:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a3b1:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a3b4:	89 10                	mov    %edx,(%eax)
    return 0;
c010a3b6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a3bb:	c9                   	leave  
c010a3bc:	c3                   	ret    

c010a3bd <fd_array_free>:

// fd_array_free - free a file item in open files table
static void
fd_array_free(struct file *file) {
c010a3bd:	55                   	push   %ebp
c010a3be:	89 e5                	mov    %esp,%ebp
c010a3c0:	83 ec 18             	sub    $0x18,%esp
    assert(file->status == FD_INIT || file->status == FD_CLOSED);
c010a3c3:	8b 45 08             	mov    0x8(%ebp),%eax
c010a3c6:	8b 00                	mov    (%eax),%eax
c010a3c8:	83 f8 01             	cmp    $0x1,%eax
c010a3cb:	74 2e                	je     c010a3fb <fd_array_free+0x3e>
c010a3cd:	8b 45 08             	mov    0x8(%ebp),%eax
c010a3d0:	8b 00                	mov    (%eax),%eax
c010a3d2:	83 f8 03             	cmp    $0x3,%eax
c010a3d5:	74 24                	je     c010a3fb <fd_array_free+0x3e>
c010a3d7:	c7 44 24 0c 68 7b 11 	movl   $0xc0117b68,0xc(%esp)
c010a3de:	c0 
c010a3df:	c7 44 24 08 2a 7b 11 	movl   $0xc0117b2a,0x8(%esp)
c010a3e6:	c0 
c010a3e7:	c7 44 24 04 44 00 00 	movl   $0x44,0x4(%esp)
c010a3ee:	00 
c010a3ef:	c7 04 24 3f 7b 11 c0 	movl   $0xc0117b3f,(%esp)
c010a3f6:	e8 cd 6a ff ff       	call   c0100ec8 <__panic>
    assert(fopen_count(file) == 0);
c010a3fb:	8b 45 08             	mov    0x8(%ebp),%eax
c010a3fe:	89 04 24             	mov    %eax,(%esp)
c010a401:	e8 05 fe ff ff       	call   c010a20b <fopen_count>
c010a406:	85 c0                	test   %eax,%eax
c010a408:	74 24                	je     c010a42e <fd_array_free+0x71>
c010a40a:	c7 44 24 0c 4e 7b 11 	movl   $0xc0117b4e,0xc(%esp)
c010a411:	c0 
c010a412:	c7 44 24 08 2a 7b 11 	movl   $0xc0117b2a,0x8(%esp)
c010a419:	c0 
c010a41a:	c7 44 24 04 45 00 00 	movl   $0x45,0x4(%esp)
c010a421:	00 
c010a422:	c7 04 24 3f 7b 11 c0 	movl   $0xc0117b3f,(%esp)
c010a429:	e8 9a 6a ff ff       	call   c0100ec8 <__panic>
    if (file->status == FD_CLOSED) {
c010a42e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a431:	8b 00                	mov    (%eax),%eax
c010a433:	83 f8 03             	cmp    $0x3,%eax
c010a436:	75 0e                	jne    c010a446 <fd_array_free+0x89>
        vfs_close(file->node);
c010a438:	8b 45 08             	mov    0x8(%ebp),%eax
c010a43b:	8b 40 14             	mov    0x14(%eax),%eax
c010a43e:	89 04 24             	mov    %eax,(%esp)
c010a441:	e8 70 5c 00 00       	call   c01100b6 <vfs_close>
    }
    file->status = FD_NONE;
c010a446:	8b 45 08             	mov    0x8(%ebp),%eax
c010a449:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
c010a44f:	c9                   	leave  
c010a450:	c3                   	ret    

c010a451 <fd_array_acquire>:

static void
fd_array_acquire(struct file *file) {
c010a451:	55                   	push   %ebp
c010a452:	89 e5                	mov    %esp,%ebp
c010a454:	83 ec 18             	sub    $0x18,%esp
    assert(file->status == FD_OPENED);
c010a457:	8b 45 08             	mov    0x8(%ebp),%eax
c010a45a:	8b 00                	mov    (%eax),%eax
c010a45c:	83 f8 02             	cmp    $0x2,%eax
c010a45f:	74 24                	je     c010a485 <fd_array_acquire+0x34>
c010a461:	c7 44 24 0c 9d 7b 11 	movl   $0xc0117b9d,0xc(%esp)
c010a468:	c0 
c010a469:	c7 44 24 08 2a 7b 11 	movl   $0xc0117b2a,0x8(%esp)
c010a470:	c0 
c010a471:	c7 44 24 04 4e 00 00 	movl   $0x4e,0x4(%esp)
c010a478:	00 
c010a479:	c7 04 24 3f 7b 11 c0 	movl   $0xc0117b3f,(%esp)
c010a480:	e8 43 6a ff ff       	call   c0100ec8 <__panic>
    fopen_count_inc(file);
c010a485:	8b 45 08             	mov    0x8(%ebp),%eax
c010a488:	89 04 24             	mov    %eax,(%esp)
c010a48b:	e8 86 fd ff ff       	call   c010a216 <fopen_count_inc>
}
c010a490:	c9                   	leave  
c010a491:	c3                   	ret    

c010a492 <fd_array_release>:

// fd_array_release - file's open_count--; if file's open_count-- == 0 , then call fd_array_free to free this file item
static void
fd_array_release(struct file *file) {
c010a492:	55                   	push   %ebp
c010a493:	89 e5                	mov    %esp,%ebp
c010a495:	83 ec 18             	sub    $0x18,%esp
    assert(file->status == FD_OPENED || file->status == FD_CLOSED);
c010a498:	8b 45 08             	mov    0x8(%ebp),%eax
c010a49b:	8b 00                	mov    (%eax),%eax
c010a49d:	83 f8 02             	cmp    $0x2,%eax
c010a4a0:	74 2e                	je     c010a4d0 <fd_array_release+0x3e>
c010a4a2:	8b 45 08             	mov    0x8(%ebp),%eax
c010a4a5:	8b 00                	mov    (%eax),%eax
c010a4a7:	83 f8 03             	cmp    $0x3,%eax
c010a4aa:	74 24                	je     c010a4d0 <fd_array_release+0x3e>
c010a4ac:	c7 44 24 0c b8 7b 11 	movl   $0xc0117bb8,0xc(%esp)
c010a4b3:	c0 
c010a4b4:	c7 44 24 08 2a 7b 11 	movl   $0xc0117b2a,0x8(%esp)
c010a4bb:	c0 
c010a4bc:	c7 44 24 04 55 00 00 	movl   $0x55,0x4(%esp)
c010a4c3:	00 
c010a4c4:	c7 04 24 3f 7b 11 c0 	movl   $0xc0117b3f,(%esp)
c010a4cb:	e8 f8 69 ff ff       	call   c0100ec8 <__panic>
    assert(fopen_count(file) > 0);
c010a4d0:	8b 45 08             	mov    0x8(%ebp),%eax
c010a4d3:	89 04 24             	mov    %eax,(%esp)
c010a4d6:	e8 30 fd ff ff       	call   c010a20b <fopen_count>
c010a4db:	85 c0                	test   %eax,%eax
c010a4dd:	7f 24                	jg     c010a503 <fd_array_release+0x71>
c010a4df:	c7 44 24 0c ef 7b 11 	movl   $0xc0117bef,0xc(%esp)
c010a4e6:	c0 
c010a4e7:	c7 44 24 08 2a 7b 11 	movl   $0xc0117b2a,0x8(%esp)
c010a4ee:	c0 
c010a4ef:	c7 44 24 04 56 00 00 	movl   $0x56,0x4(%esp)
c010a4f6:	00 
c010a4f7:	c7 04 24 3f 7b 11 c0 	movl   $0xc0117b3f,(%esp)
c010a4fe:	e8 c5 69 ff ff       	call   c0100ec8 <__panic>
    if (fopen_count_dec(file) == 0) {
c010a503:	8b 45 08             	mov    0x8(%ebp),%eax
c010a506:	89 04 24             	mov    %eax,(%esp)
c010a509:	e8 22 fd ff ff       	call   c010a230 <fopen_count_dec>
c010a50e:	85 c0                	test   %eax,%eax
c010a510:	75 0b                	jne    c010a51d <fd_array_release+0x8b>
        fd_array_free(file);
c010a512:	8b 45 08             	mov    0x8(%ebp),%eax
c010a515:	89 04 24             	mov    %eax,(%esp)
c010a518:	e8 a0 fe ff ff       	call   c010a3bd <fd_array_free>
    }
}
c010a51d:	c9                   	leave  
c010a51e:	c3                   	ret    

c010a51f <fd_array_open>:

// fd_array_open - file's open_count++, set status to FD_OPENED
void
fd_array_open(struct file *file) {
c010a51f:	55                   	push   %ebp
c010a520:	89 e5                	mov    %esp,%ebp
c010a522:	83 ec 18             	sub    $0x18,%esp
    assert(file->status == FD_INIT && file->node != NULL);
c010a525:	8b 45 08             	mov    0x8(%ebp),%eax
c010a528:	8b 00                	mov    (%eax),%eax
c010a52a:	83 f8 01             	cmp    $0x1,%eax
c010a52d:	75 0a                	jne    c010a539 <fd_array_open+0x1a>
c010a52f:	8b 45 08             	mov    0x8(%ebp),%eax
c010a532:	8b 40 14             	mov    0x14(%eax),%eax
c010a535:	85 c0                	test   %eax,%eax
c010a537:	75 24                	jne    c010a55d <fd_array_open+0x3e>
c010a539:	c7 44 24 0c 08 7c 11 	movl   $0xc0117c08,0xc(%esp)
c010a540:	c0 
c010a541:	c7 44 24 08 2a 7b 11 	movl   $0xc0117b2a,0x8(%esp)
c010a548:	c0 
c010a549:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
c010a550:	00 
c010a551:	c7 04 24 3f 7b 11 c0 	movl   $0xc0117b3f,(%esp)
c010a558:	e8 6b 69 ff ff       	call   c0100ec8 <__panic>
    file->status = FD_OPENED;
c010a55d:	8b 45 08             	mov    0x8(%ebp),%eax
c010a560:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    fopen_count_inc(file);
c010a566:	8b 45 08             	mov    0x8(%ebp),%eax
c010a569:	89 04 24             	mov    %eax,(%esp)
c010a56c:	e8 a5 fc ff ff       	call   c010a216 <fopen_count_inc>
}
c010a571:	c9                   	leave  
c010a572:	c3                   	ret    

c010a573 <fd_array_close>:

// fd_array_close - file's open_count--; if file's open_count-- == 0 , then call fd_array_free to free this file item
void
fd_array_close(struct file *file) {
c010a573:	55                   	push   %ebp
c010a574:	89 e5                	mov    %esp,%ebp
c010a576:	83 ec 18             	sub    $0x18,%esp
    assert(file->status == FD_OPENED);
c010a579:	8b 45 08             	mov    0x8(%ebp),%eax
c010a57c:	8b 00                	mov    (%eax),%eax
c010a57e:	83 f8 02             	cmp    $0x2,%eax
c010a581:	74 24                	je     c010a5a7 <fd_array_close+0x34>
c010a583:	c7 44 24 0c 9d 7b 11 	movl   $0xc0117b9d,0xc(%esp)
c010a58a:	c0 
c010a58b:	c7 44 24 08 2a 7b 11 	movl   $0xc0117b2a,0x8(%esp)
c010a592:	c0 
c010a593:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
c010a59a:	00 
c010a59b:	c7 04 24 3f 7b 11 c0 	movl   $0xc0117b3f,(%esp)
c010a5a2:	e8 21 69 ff ff       	call   c0100ec8 <__panic>
    assert(fopen_count(file) > 0);
c010a5a7:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5aa:	89 04 24             	mov    %eax,(%esp)
c010a5ad:	e8 59 fc ff ff       	call   c010a20b <fopen_count>
c010a5b2:	85 c0                	test   %eax,%eax
c010a5b4:	7f 24                	jg     c010a5da <fd_array_close+0x67>
c010a5b6:	c7 44 24 0c ef 7b 11 	movl   $0xc0117bef,0xc(%esp)
c010a5bd:	c0 
c010a5be:	c7 44 24 08 2a 7b 11 	movl   $0xc0117b2a,0x8(%esp)
c010a5c5:	c0 
c010a5c6:	c7 44 24 04 68 00 00 	movl   $0x68,0x4(%esp)
c010a5cd:	00 
c010a5ce:	c7 04 24 3f 7b 11 c0 	movl   $0xc0117b3f,(%esp)
c010a5d5:	e8 ee 68 ff ff       	call   c0100ec8 <__panic>
    file->status = FD_CLOSED;
c010a5da:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5dd:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    if (fopen_count_dec(file) == 0) {
c010a5e3:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5e6:	89 04 24             	mov    %eax,(%esp)
c010a5e9:	e8 42 fc ff ff       	call   c010a230 <fopen_count_dec>
c010a5ee:	85 c0                	test   %eax,%eax
c010a5f0:	75 0b                	jne    c010a5fd <fd_array_close+0x8a>
        fd_array_free(file);
c010a5f2:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5f5:	89 04 24             	mov    %eax,(%esp)
c010a5f8:	e8 c0 fd ff ff       	call   c010a3bd <fd_array_free>
    }
}
c010a5fd:	c9                   	leave  
c010a5fe:	c3                   	ret    

c010a5ff <fd_array_dup>:

//fs_array_dup - duplicate file 'from'  to file 'to'
void
fd_array_dup(struct file *to, struct file *from) {
c010a5ff:	55                   	push   %ebp
c010a600:	89 e5                	mov    %esp,%ebp
c010a602:	83 ec 28             	sub    $0x28,%esp
    //cprintf("[fd_array_dup]from fd=%d, to fd=%d\n",from->fd, to->fd);
    assert(to->status == FD_INIT && from->status == FD_OPENED);
c010a605:	8b 45 08             	mov    0x8(%ebp),%eax
c010a608:	8b 00                	mov    (%eax),%eax
c010a60a:	83 f8 01             	cmp    $0x1,%eax
c010a60d:	75 0a                	jne    c010a619 <fd_array_dup+0x1a>
c010a60f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a612:	8b 00                	mov    (%eax),%eax
c010a614:	83 f8 02             	cmp    $0x2,%eax
c010a617:	74 24                	je     c010a63d <fd_array_dup+0x3e>
c010a619:	c7 44 24 0c 38 7c 11 	movl   $0xc0117c38,0xc(%esp)
c010a620:	c0 
c010a621:	c7 44 24 08 2a 7b 11 	movl   $0xc0117b2a,0x8(%esp)
c010a628:	c0 
c010a629:	c7 44 24 04 73 00 00 	movl   $0x73,0x4(%esp)
c010a630:	00 
c010a631:	c7 04 24 3f 7b 11 c0 	movl   $0xc0117b3f,(%esp)
c010a638:	e8 8b 68 ff ff       	call   c0100ec8 <__panic>
    to->pos = from->pos;
c010a63d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a640:	8b 50 10             	mov    0x10(%eax),%edx
c010a643:	8b 45 08             	mov    0x8(%ebp),%eax
c010a646:	89 50 10             	mov    %edx,0x10(%eax)
    to->readable = from->readable;
c010a649:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a64c:	8b 50 04             	mov    0x4(%eax),%edx
c010a64f:	8b 45 08             	mov    0x8(%ebp),%eax
c010a652:	89 50 04             	mov    %edx,0x4(%eax)
    to->writable = from->writable;
c010a655:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a658:	8b 50 08             	mov    0x8(%eax),%edx
c010a65b:	8b 45 08             	mov    0x8(%ebp),%eax
c010a65e:	89 50 08             	mov    %edx,0x8(%eax)
    struct inode *node = from->node;
c010a661:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a664:	8b 40 14             	mov    0x14(%eax),%eax
c010a667:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vop_ref_inc(node), vop_open_inc(node);
c010a66a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a66d:	89 04 24             	mov    %eax,(%esp)
c010a670:	e8 70 4a 00 00       	call   c010f0e5 <inode_ref_inc>
c010a675:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a678:	89 04 24             	mov    %eax,(%esp)
c010a67b:	e8 6c 4b 00 00       	call   c010f1ec <inode_open_inc>
    to->node = node;
c010a680:	8b 45 08             	mov    0x8(%ebp),%eax
c010a683:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a686:	89 50 14             	mov    %edx,0x14(%eax)
    fd_array_open(to);
c010a689:	8b 45 08             	mov    0x8(%ebp),%eax
c010a68c:	89 04 24             	mov    %eax,(%esp)
c010a68f:	e8 8b fe ff ff       	call   c010a51f <fd_array_open>
}
c010a694:	c9                   	leave  
c010a695:	c3                   	ret    

c010a696 <fd2file>:

// fd2file - use fd as index of fd_array, return the array item (file)
static inline int
fd2file(int fd, struct file **file_store) {
c010a696:	55                   	push   %ebp
c010a697:	89 e5                	mov    %esp,%ebp
c010a699:	83 ec 18             	sub    $0x18,%esp
    if (testfd(fd)) {
c010a69c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a6a0:	78 4b                	js     c010a6ed <fd2file+0x57>
c010a6a2:	8b 45 08             	mov    0x8(%ebp),%eax
c010a6a5:	3d 90 00 00 00       	cmp    $0x90,%eax
c010a6aa:	77 41                	ja     c010a6ed <fd2file+0x57>
        struct file *file = get_fd_array() + fd;
c010a6ac:	e8 99 fb ff ff       	call   c010a24a <get_fd_array>
c010a6b1:	89 c2                	mov    %eax,%edx
c010a6b3:	8b 45 08             	mov    0x8(%ebp),%eax
c010a6b6:	c1 e0 02             	shl    $0x2,%eax
c010a6b9:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
c010a6c0:	29 c1                	sub    %eax,%ecx
c010a6c2:	89 c8                	mov    %ecx,%eax
c010a6c4:	01 d0                	add    %edx,%eax
c010a6c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (file->status == FD_OPENED && file->fd == fd) {
c010a6c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a6cc:	8b 00                	mov    (%eax),%eax
c010a6ce:	83 f8 02             	cmp    $0x2,%eax
c010a6d1:	75 1a                	jne    c010a6ed <fd2file+0x57>
c010a6d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a6d6:	8b 40 0c             	mov    0xc(%eax),%eax
c010a6d9:	3b 45 08             	cmp    0x8(%ebp),%eax
c010a6dc:	75 0f                	jne    c010a6ed <fd2file+0x57>
            *file_store = file;
c010a6de:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a6e1:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a6e4:	89 10                	mov    %edx,(%eax)
            return 0;
c010a6e6:	b8 00 00 00 00       	mov    $0x0,%eax
c010a6eb:	eb 05                	jmp    c010a6f2 <fd2file+0x5c>
        }
    }
    return -E_INVAL;
c010a6ed:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010a6f2:	c9                   	leave  
c010a6f3:	c3                   	ret    

c010a6f4 <file_testfd>:

// file_testfd - test file is readble or writable?
bool
file_testfd(int fd, bool readable, bool writable) {
c010a6f4:	55                   	push   %ebp
c010a6f5:	89 e5                	mov    %esp,%ebp
c010a6f7:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010a6fa:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010a6fd:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a701:	8b 45 08             	mov    0x8(%ebp),%eax
c010a704:	89 04 24             	mov    %eax,(%esp)
c010a707:	e8 8a ff ff ff       	call   c010a696 <fd2file>
c010a70c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a70f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a713:	74 07                	je     c010a71c <file_testfd+0x28>
        return 0;
c010a715:	b8 00 00 00 00       	mov    $0x0,%eax
c010a71a:	eb 33                	jmp    c010a74f <file_testfd+0x5b>
    }
    if (readable && !file->readable) {
c010a71c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010a720:	74 11                	je     c010a733 <file_testfd+0x3f>
c010a722:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a725:	8b 40 04             	mov    0x4(%eax),%eax
c010a728:	85 c0                	test   %eax,%eax
c010a72a:	75 07                	jne    c010a733 <file_testfd+0x3f>
        return 0;
c010a72c:	b8 00 00 00 00       	mov    $0x0,%eax
c010a731:	eb 1c                	jmp    c010a74f <file_testfd+0x5b>
    }
    if (writable && !file->writable) {
c010a733:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010a737:	74 11                	je     c010a74a <file_testfd+0x56>
c010a739:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a73c:	8b 40 08             	mov    0x8(%eax),%eax
c010a73f:	85 c0                	test   %eax,%eax
c010a741:	75 07                	jne    c010a74a <file_testfd+0x56>
        return 0;
c010a743:	b8 00 00 00 00       	mov    $0x0,%eax
c010a748:	eb 05                	jmp    c010a74f <file_testfd+0x5b>
    }
    return 1;
c010a74a:	b8 01 00 00 00       	mov    $0x1,%eax
}
c010a74f:	c9                   	leave  
c010a750:	c3                   	ret    

c010a751 <file_open>:

// open file
int
file_open(char *path, uint32_t open_flags) {
c010a751:	55                   	push   %ebp
c010a752:	89 e5                	mov    %esp,%ebp
c010a754:	83 ec 48             	sub    $0x48,%esp
    bool readable = 0, writable = 0;
c010a757:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010a75e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    switch (open_flags & O_ACCMODE) {
c010a765:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a768:	83 e0 03             	and    $0x3,%eax
c010a76b:	83 f8 01             	cmp    $0x1,%eax
c010a76e:	74 15                	je     c010a785 <file_open+0x34>
c010a770:	83 f8 01             	cmp    $0x1,%eax
c010a773:	72 07                	jb     c010a77c <file_open+0x2b>
c010a775:	83 f8 02             	cmp    $0x2,%eax
c010a778:	74 14                	je     c010a78e <file_open+0x3d>
c010a77a:	eb 21                	jmp    c010a79d <file_open+0x4c>
    case O_RDONLY: readable = 1; break;
c010a77c:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c010a783:	eb 22                	jmp    c010a7a7 <file_open+0x56>
    case O_WRONLY: writable = 1; break;
c010a785:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c010a78c:	eb 19                	jmp    c010a7a7 <file_open+0x56>
    case O_RDWR:
        readable = writable = 1;
c010a78e:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c010a795:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a798:	89 45 f4             	mov    %eax,-0xc(%ebp)
        break;
c010a79b:	eb 0a                	jmp    c010a7a7 <file_open+0x56>
    default:
        return -E_INVAL;
c010a79d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010a7a2:	e9 45 01 00 00       	jmp    c010a8ec <file_open+0x19b>
    }

    int ret;
    struct file *file;
    if ((ret = fd_array_alloc(NO_FD, &file)) != 0) {
c010a7a7:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010a7aa:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a7ae:	c7 04 24 d9 6a ff ff 	movl   $0xffff6ad9,(%esp)
c010a7b5:	e8 2a fb ff ff       	call   c010a2e4 <fd_array_alloc>
c010a7ba:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a7bd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a7c1:	74 08                	je     c010a7cb <file_open+0x7a>
        return ret;
c010a7c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a7c6:	e9 21 01 00 00       	jmp    c010a8ec <file_open+0x19b>
    }

    struct inode *node;
    if ((ret = vfs_open(path, open_flags, &node)) != 0) {
c010a7cb:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010a7ce:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a7d2:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a7d5:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a7d9:	8b 45 08             	mov    0x8(%ebp),%eax
c010a7dc:	89 04 24             	mov    %eax,(%esp)
c010a7df:	e8 e2 55 00 00       	call   c010fdc6 <vfs_open>
c010a7e4:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a7e7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a7eb:	74 13                	je     c010a800 <file_open+0xaf>
        fd_array_free(file);
c010a7ed:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a7f0:	89 04 24             	mov    %eax,(%esp)
c010a7f3:	e8 c5 fb ff ff       	call   c010a3bd <fd_array_free>
        return ret;
c010a7f8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a7fb:	e9 ec 00 00 00       	jmp    c010a8ec <file_open+0x19b>
    }

    file->pos = 0;
c010a800:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a803:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    if (open_flags & O_APPEND) {
c010a80a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a80d:	83 e0 20             	and    $0x20,%eax
c010a810:	85 c0                	test   %eax,%eax
c010a812:	0f 84 a8 00 00 00    	je     c010a8c0 <file_open+0x16f>
        struct stat __stat, *stat = &__stat;
c010a818:	8d 45 cc             	lea    -0x34(%ebp),%eax
c010a81b:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if ((ret = vop_fstat(node, stat)) != 0) {
c010a81e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a821:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010a824:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010a828:	74 17                	je     c010a841 <file_open+0xf0>
c010a82a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a82d:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a830:	85 c0                	test   %eax,%eax
c010a832:	74 0d                	je     c010a841 <file_open+0xf0>
c010a834:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a837:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a83a:	8b 40 14             	mov    0x14(%eax),%eax
c010a83d:	85 c0                	test   %eax,%eax
c010a83f:	75 24                	jne    c010a865 <file_open+0x114>
c010a841:	c7 44 24 0c 6c 7c 11 	movl   $0xc0117c6c,0xc(%esp)
c010a848:	c0 
c010a849:	c7 44 24 08 2a 7b 11 	movl   $0xc0117b2a,0x8(%esp)
c010a850:	c0 
c010a851:	c7 44 24 04 b8 00 00 	movl   $0xb8,0x4(%esp)
c010a858:	00 
c010a859:	c7 04 24 3f 7b 11 c0 	movl   $0xc0117b3f,(%esp)
c010a860:	e8 63 66 ff ff       	call   c0100ec8 <__panic>
c010a865:	c7 44 24 04 ba 7c 11 	movl   $0xc0117cba,0x4(%esp)
c010a86c:	c0 
c010a86d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a870:	89 04 24             	mov    %eax,(%esp)
c010a873:	e8 75 4a 00 00       	call   c010f2ed <inode_check>
c010a878:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a87b:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a87e:	8b 40 14             	mov    0x14(%eax),%eax
c010a881:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010a884:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010a887:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010a88b:	89 14 24             	mov    %edx,(%esp)
c010a88e:	ff d0                	call   *%eax
c010a890:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a893:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a897:	74 1b                	je     c010a8b4 <file_open+0x163>
            vfs_close(node);
c010a899:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a89c:	89 04 24             	mov    %eax,(%esp)
c010a89f:	e8 12 58 00 00       	call   c01100b6 <vfs_close>
            fd_array_free(file);
c010a8a4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a8a7:	89 04 24             	mov    %eax,(%esp)
c010a8aa:	e8 0e fb ff ff       	call   c010a3bd <fd_array_free>
            return ret;
c010a8af:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a8b2:	eb 38                	jmp    c010a8ec <file_open+0x19b>
        }
        file->pos = stat->st_size;
c010a8b4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a8b7:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a8ba:	8b 52 0c             	mov    0xc(%edx),%edx
c010a8bd:	89 50 10             	mov    %edx,0x10(%eax)
    }

    file->node = node;
c010a8c0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a8c3:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010a8c6:	89 50 14             	mov    %edx,0x14(%eax)
    file->readable = readable;
c010a8c9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a8cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a8cf:	89 50 04             	mov    %edx,0x4(%eax)
    file->writable = writable;
c010a8d2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a8d5:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a8d8:	89 50 08             	mov    %edx,0x8(%eax)
    fd_array_open(file);
c010a8db:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a8de:	89 04 24             	mov    %eax,(%esp)
c010a8e1:	e8 39 fc ff ff       	call   c010a51f <fd_array_open>
    return file->fd;
c010a8e6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a8e9:	8b 40 0c             	mov    0xc(%eax),%eax
}
c010a8ec:	c9                   	leave  
c010a8ed:	c3                   	ret    

c010a8ee <file_close>:

// close file
int
file_close(int fd) {
c010a8ee:	55                   	push   %ebp
c010a8ef:	89 e5                	mov    %esp,%ebp
c010a8f1:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010a8f4:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010a8f7:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a8fb:	8b 45 08             	mov    0x8(%ebp),%eax
c010a8fe:	89 04 24             	mov    %eax,(%esp)
c010a901:	e8 90 fd ff ff       	call   c010a696 <fd2file>
c010a906:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a909:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a90d:	74 05                	je     c010a914 <file_close+0x26>
        return ret;
c010a90f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a912:	eb 10                	jmp    c010a924 <file_close+0x36>
    }
    fd_array_close(file);
c010a914:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a917:	89 04 24             	mov    %eax,(%esp)
c010a91a:	e8 54 fc ff ff       	call   c010a573 <fd_array_close>
    return 0;
c010a91f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a924:	c9                   	leave  
c010a925:	c3                   	ret    

c010a926 <file_read>:

// read file
int
file_read(int fd, void *base, size_t len, size_t *copied_store) {
c010a926:	55                   	push   %ebp
c010a927:	89 e5                	mov    %esp,%ebp
c010a929:	83 ec 48             	sub    $0x48,%esp
    int ret;
    struct file *file;
    *copied_store = 0;
c010a92c:	8b 45 14             	mov    0x14(%ebp),%eax
c010a92f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    if ((ret = fd2file(fd, &file)) != 0) {
c010a935:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010a938:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a93c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a93f:	89 04 24             	mov    %eax,(%esp)
c010a942:	e8 4f fd ff ff       	call   c010a696 <fd2file>
c010a947:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a94a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a94e:	74 08                	je     c010a958 <file_read+0x32>
        return ret;
c010a950:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a953:	e9 06 01 00 00       	jmp    c010aa5e <file_read+0x138>
    }
    if (!file->readable) {
c010a958:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a95b:	8b 40 04             	mov    0x4(%eax),%eax
c010a95e:	85 c0                	test   %eax,%eax
c010a960:	75 0a                	jne    c010a96c <file_read+0x46>
        return -E_INVAL;
c010a962:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010a967:	e9 f2 00 00 00       	jmp    c010aa5e <file_read+0x138>
    }
    fd_array_acquire(file);
c010a96c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a96f:	89 04 24             	mov    %eax,(%esp)
c010a972:	e8 da fa ff ff       	call   c010a451 <fd_array_acquire>

    struct iobuf __iob, *iob = iobuf_init(&__iob, base, len, file->pos);
c010a977:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a97a:	8b 40 10             	mov    0x10(%eax),%eax
c010a97d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a981:	8b 45 10             	mov    0x10(%ebp),%eax
c010a984:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a988:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a98b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a98f:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010a992:	89 04 24             	mov    %eax,(%esp)
c010a995:	e8 81 09 00 00       	call   c010b31b <iobuf_init>
c010a99a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    ret = vop_read(file->node, iob);
c010a99d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a9a0:	8b 40 14             	mov    0x14(%eax),%eax
c010a9a3:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a9a6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a9aa:	74 17                	je     c010a9c3 <file_read+0x9d>
c010a9ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a9af:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a9b2:	85 c0                	test   %eax,%eax
c010a9b4:	74 0d                	je     c010a9c3 <file_read+0x9d>
c010a9b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a9b9:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a9bc:	8b 40 0c             	mov    0xc(%eax),%eax
c010a9bf:	85 c0                	test   %eax,%eax
c010a9c1:	75 24                	jne    c010a9e7 <file_read+0xc1>
c010a9c3:	c7 44 24 0c c0 7c 11 	movl   $0xc0117cc0,0xc(%esp)
c010a9ca:	c0 
c010a9cb:	c7 44 24 08 2a 7b 11 	movl   $0xc0117b2a,0x8(%esp)
c010a9d2:	c0 
c010a9d3:	c7 44 24 04 e2 00 00 	movl   $0xe2,0x4(%esp)
c010a9da:	00 
c010a9db:	c7 04 24 3f 7b 11 c0 	movl   $0xc0117b3f,(%esp)
c010a9e2:	e8 e1 64 ff ff       	call   c0100ec8 <__panic>
c010a9e7:	c7 44 24 04 0d 7d 11 	movl   $0xc0117d0d,0x4(%esp)
c010a9ee:	c0 
c010a9ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a9f2:	89 04 24             	mov    %eax,(%esp)
c010a9f5:	e8 f3 48 00 00       	call   c010f2ed <inode_check>
c010a9fa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a9fd:	8b 40 3c             	mov    0x3c(%eax),%eax
c010aa00:	8b 40 0c             	mov    0xc(%eax),%eax
c010aa03:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010aa06:	8b 52 14             	mov    0x14(%edx),%edx
c010aa09:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010aa0c:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010aa10:	89 14 24             	mov    %edx,(%esp)
c010aa13:	ff d0                	call   *%eax
c010aa15:	89 45 f4             	mov    %eax,-0xc(%ebp)

    size_t copied = iobuf_used(iob);
c010aa18:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aa1b:	8b 50 08             	mov    0x8(%eax),%edx
c010aa1e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aa21:	8b 40 0c             	mov    0xc(%eax),%eax
c010aa24:	29 c2                	sub    %eax,%edx
c010aa26:	89 d0                	mov    %edx,%eax
c010aa28:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (file->status == FD_OPENED) {
c010aa2b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aa2e:	8b 00                	mov    (%eax),%eax
c010aa30:	83 f8 02             	cmp    $0x2,%eax
c010aa33:	75 13                	jne    c010aa48 <file_read+0x122>
        file->pos += copied;
c010aa35:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aa38:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010aa3b:	8b 52 10             	mov    0x10(%edx),%edx
c010aa3e:	89 d1                	mov    %edx,%ecx
c010aa40:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010aa43:	01 ca                	add    %ecx,%edx
c010aa45:	89 50 10             	mov    %edx,0x10(%eax)
    }
    *copied_store = copied;
c010aa48:	8b 45 14             	mov    0x14(%ebp),%eax
c010aa4b:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010aa4e:	89 10                	mov    %edx,(%eax)
    fd_array_release(file);
c010aa50:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aa53:	89 04 24             	mov    %eax,(%esp)
c010aa56:	e8 37 fa ff ff       	call   c010a492 <fd_array_release>
    return ret;
c010aa5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010aa5e:	c9                   	leave  
c010aa5f:	c3                   	ret    

c010aa60 <file_write>:

// write file
int
file_write(int fd, void *base, size_t len, size_t *copied_store) {
c010aa60:	55                   	push   %ebp
c010aa61:	89 e5                	mov    %esp,%ebp
c010aa63:	83 ec 48             	sub    $0x48,%esp
    int ret;
    struct file *file;
    *copied_store = 0;
c010aa66:	8b 45 14             	mov    0x14(%ebp),%eax
c010aa69:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    if ((ret = fd2file(fd, &file)) != 0) {
c010aa6f:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010aa72:	89 44 24 04          	mov    %eax,0x4(%esp)
c010aa76:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa79:	89 04 24             	mov    %eax,(%esp)
c010aa7c:	e8 15 fc ff ff       	call   c010a696 <fd2file>
c010aa81:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010aa84:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010aa88:	74 08                	je     c010aa92 <file_write+0x32>
        return ret;
c010aa8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa8d:	e9 06 01 00 00       	jmp    c010ab98 <file_write+0x138>
    }
    if (!file->writable) {
c010aa92:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aa95:	8b 40 08             	mov    0x8(%eax),%eax
c010aa98:	85 c0                	test   %eax,%eax
c010aa9a:	75 0a                	jne    c010aaa6 <file_write+0x46>
        return -E_INVAL;
c010aa9c:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010aaa1:	e9 f2 00 00 00       	jmp    c010ab98 <file_write+0x138>
    }
    fd_array_acquire(file);
c010aaa6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aaa9:	89 04 24             	mov    %eax,(%esp)
c010aaac:	e8 a0 f9 ff ff       	call   c010a451 <fd_array_acquire>

    struct iobuf __iob, *iob = iobuf_init(&__iob, base, len, file->pos);
c010aab1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aab4:	8b 40 10             	mov    0x10(%eax),%eax
c010aab7:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010aabb:	8b 45 10             	mov    0x10(%ebp),%eax
c010aabe:	89 44 24 08          	mov    %eax,0x8(%esp)
c010aac2:	8b 45 0c             	mov    0xc(%ebp),%eax
c010aac5:	89 44 24 04          	mov    %eax,0x4(%esp)
c010aac9:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010aacc:	89 04 24             	mov    %eax,(%esp)
c010aacf:	e8 47 08 00 00       	call   c010b31b <iobuf_init>
c010aad4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    ret = vop_write(file->node, iob);
c010aad7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aada:	8b 40 14             	mov    0x14(%eax),%eax
c010aadd:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010aae0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010aae4:	74 17                	je     c010aafd <file_write+0x9d>
c010aae6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aae9:	8b 40 3c             	mov    0x3c(%eax),%eax
c010aaec:	85 c0                	test   %eax,%eax
c010aaee:	74 0d                	je     c010aafd <file_write+0x9d>
c010aaf0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aaf3:	8b 40 3c             	mov    0x3c(%eax),%eax
c010aaf6:	8b 40 10             	mov    0x10(%eax),%eax
c010aaf9:	85 c0                	test   %eax,%eax
c010aafb:	75 24                	jne    c010ab21 <file_write+0xc1>
c010aafd:	c7 44 24 0c 14 7d 11 	movl   $0xc0117d14,0xc(%esp)
c010ab04:	c0 
c010ab05:	c7 44 24 08 2a 7b 11 	movl   $0xc0117b2a,0x8(%esp)
c010ab0c:	c0 
c010ab0d:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
c010ab14:	00 
c010ab15:	c7 04 24 3f 7b 11 c0 	movl   $0xc0117b3f,(%esp)
c010ab1c:	e8 a7 63 ff ff       	call   c0100ec8 <__panic>
c010ab21:	c7 44 24 04 62 7d 11 	movl   $0xc0117d62,0x4(%esp)
c010ab28:	c0 
c010ab29:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ab2c:	89 04 24             	mov    %eax,(%esp)
c010ab2f:	e8 b9 47 00 00       	call   c010f2ed <inode_check>
c010ab34:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ab37:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ab3a:	8b 40 10             	mov    0x10(%eax),%eax
c010ab3d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010ab40:	8b 52 14             	mov    0x14(%edx),%edx
c010ab43:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010ab46:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010ab4a:	89 14 24             	mov    %edx,(%esp)
c010ab4d:	ff d0                	call   *%eax
c010ab4f:	89 45 f4             	mov    %eax,-0xc(%ebp)

    size_t copied = iobuf_used(iob);
c010ab52:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ab55:	8b 50 08             	mov    0x8(%eax),%edx
c010ab58:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ab5b:	8b 40 0c             	mov    0xc(%eax),%eax
c010ab5e:	29 c2                	sub    %eax,%edx
c010ab60:	89 d0                	mov    %edx,%eax
c010ab62:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (file->status == FD_OPENED) {
c010ab65:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ab68:	8b 00                	mov    (%eax),%eax
c010ab6a:	83 f8 02             	cmp    $0x2,%eax
c010ab6d:	75 13                	jne    c010ab82 <file_write+0x122>
        file->pos += copied;
c010ab6f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ab72:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010ab75:	8b 52 10             	mov    0x10(%edx),%edx
c010ab78:	89 d1                	mov    %edx,%ecx
c010ab7a:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010ab7d:	01 ca                	add    %ecx,%edx
c010ab7f:	89 50 10             	mov    %edx,0x10(%eax)
    }
    *copied_store = copied;
c010ab82:	8b 45 14             	mov    0x14(%ebp),%eax
c010ab85:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010ab88:	89 10                	mov    %edx,(%eax)
    fd_array_release(file);
c010ab8a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ab8d:	89 04 24             	mov    %eax,(%esp)
c010ab90:	e8 fd f8 ff ff       	call   c010a492 <fd_array_release>
    return ret;
c010ab95:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010ab98:	c9                   	leave  
c010ab99:	c3                   	ret    

c010ab9a <file_seek>:

// seek file
int
file_seek(int fd, off_t pos, int whence) {
c010ab9a:	55                   	push   %ebp
c010ab9b:	89 e5                	mov    %esp,%ebp
c010ab9d:	83 ec 48             	sub    $0x48,%esp
    struct stat __stat, *stat = &__stat;
c010aba0:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010aba3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010aba6:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010aba9:	89 44 24 04          	mov    %eax,0x4(%esp)
c010abad:	8b 45 08             	mov    0x8(%ebp),%eax
c010abb0:	89 04 24             	mov    %eax,(%esp)
c010abb3:	e8 de fa ff ff       	call   c010a696 <fd2file>
c010abb8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010abbb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010abbf:	74 08                	je     c010abc9 <file_seek+0x2f>
        return ret;
c010abc1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010abc4:	e9 72 01 00 00       	jmp    c010ad3b <file_seek+0x1a1>
    }
    fd_array_acquire(file);
c010abc9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010abcc:	89 04 24             	mov    %eax,(%esp)
c010abcf:	e8 7d f8 ff ff       	call   c010a451 <fd_array_acquire>

    switch (whence) {
c010abd4:	8b 45 10             	mov    0x10(%ebp),%eax
c010abd7:	83 f8 01             	cmp    $0x1,%eax
c010abda:	74 12                	je     c010abee <file_seek+0x54>
c010abdc:	83 f8 02             	cmp    $0x2,%eax
c010abdf:	74 1b                	je     c010abfc <file_seek+0x62>
c010abe1:	85 c0                	test   %eax,%eax
c010abe3:	0f 84 af 00 00 00    	je     c010ac98 <file_seek+0xfe>
c010abe9:	e9 a1 00 00 00       	jmp    c010ac8f <file_seek+0xf5>
    case LSEEK_SET: break;
    case LSEEK_CUR: pos += file->pos; break;
c010abee:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010abf1:	8b 40 10             	mov    0x10(%eax),%eax
c010abf4:	01 45 0c             	add    %eax,0xc(%ebp)
c010abf7:	e9 9d 00 00 00       	jmp    c010ac99 <file_seek+0xff>
    case LSEEK_END:
        if ((ret = vop_fstat(file->node, stat)) == 0) {
c010abfc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010abff:	8b 40 14             	mov    0x14(%eax),%eax
c010ac02:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010ac05:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010ac09:	74 17                	je     c010ac22 <file_seek+0x88>
c010ac0b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ac0e:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ac11:	85 c0                	test   %eax,%eax
c010ac13:	74 0d                	je     c010ac22 <file_seek+0x88>
c010ac15:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ac18:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ac1b:	8b 40 14             	mov    0x14(%eax),%eax
c010ac1e:	85 c0                	test   %eax,%eax
c010ac20:	75 24                	jne    c010ac46 <file_seek+0xac>
c010ac22:	c7 44 24 0c 6c 7c 11 	movl   $0xc0117c6c,0xc(%esp)
c010ac29:	c0 
c010ac2a:	c7 44 24 08 2a 7b 11 	movl   $0xc0117b2a,0x8(%esp)
c010ac31:	c0 
c010ac32:	c7 44 24 04 16 01 00 	movl   $0x116,0x4(%esp)
c010ac39:	00 
c010ac3a:	c7 04 24 3f 7b 11 c0 	movl   $0xc0117b3f,(%esp)
c010ac41:	e8 82 62 ff ff       	call   c0100ec8 <__panic>
c010ac46:	c7 44 24 04 ba 7c 11 	movl   $0xc0117cba,0x4(%esp)
c010ac4d:	c0 
c010ac4e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ac51:	89 04 24             	mov    %eax,(%esp)
c010ac54:	e8 94 46 00 00       	call   c010f2ed <inode_check>
c010ac59:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ac5c:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ac5f:	8b 40 14             	mov    0x14(%eax),%eax
c010ac62:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010ac65:	8b 52 14             	mov    0x14(%edx),%edx
c010ac68:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010ac6b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010ac6f:	89 14 24             	mov    %edx,(%esp)
c010ac72:	ff d0                	call   *%eax
c010ac74:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ac77:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ac7b:	75 10                	jne    c010ac8d <file_seek+0xf3>
            pos += stat->st_size;
c010ac7d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ac80:	8b 50 0c             	mov    0xc(%eax),%edx
c010ac83:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ac86:	01 d0                	add    %edx,%eax
c010ac88:	89 45 0c             	mov    %eax,0xc(%ebp)
        }
        break;
c010ac8b:	eb 0c                	jmp    c010ac99 <file_seek+0xff>
c010ac8d:	eb 0a                	jmp    c010ac99 <file_seek+0xff>
    default: ret = -E_INVAL;
c010ac8f:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
c010ac96:	eb 01                	jmp    c010ac99 <file_seek+0xff>
        return ret;
    }
    fd_array_acquire(file);

    switch (whence) {
    case LSEEK_SET: break;
c010ac98:	90                   	nop
        }
        break;
    default: ret = -E_INVAL;
    }

    if (ret == 0) {
c010ac99:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ac9d:	0f 85 8a 00 00 00    	jne    c010ad2d <file_seek+0x193>
        if ((ret = vop_tryseek(file->node, pos)) == 0) {
c010aca3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010aca6:	8b 40 14             	mov    0x14(%eax),%eax
c010aca9:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010acac:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010acb0:	74 17                	je     c010acc9 <file_seek+0x12f>
c010acb2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010acb5:	8b 40 3c             	mov    0x3c(%eax),%eax
c010acb8:	85 c0                	test   %eax,%eax
c010acba:	74 0d                	je     c010acc9 <file_seek+0x12f>
c010acbc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010acbf:	8b 40 3c             	mov    0x3c(%eax),%eax
c010acc2:	8b 40 2c             	mov    0x2c(%eax),%eax
c010acc5:	85 c0                	test   %eax,%eax
c010acc7:	75 24                	jne    c010aced <file_seek+0x153>
c010acc9:	c7 44 24 0c 68 7d 11 	movl   $0xc0117d68,0xc(%esp)
c010acd0:	c0 
c010acd1:	c7 44 24 08 2a 7b 11 	movl   $0xc0117b2a,0x8(%esp)
c010acd8:	c0 
c010acd9:	c7 44 24 04 1e 01 00 	movl   $0x11e,0x4(%esp)
c010ace0:	00 
c010ace1:	c7 04 24 3f 7b 11 c0 	movl   $0xc0117b3f,(%esp)
c010ace8:	e8 db 61 ff ff       	call   c0100ec8 <__panic>
c010aced:	c7 44 24 04 b8 7d 11 	movl   $0xc0117db8,0x4(%esp)
c010acf4:	c0 
c010acf5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010acf8:	89 04 24             	mov    %eax,(%esp)
c010acfb:	e8 ed 45 00 00       	call   c010f2ed <inode_check>
c010ad00:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ad03:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ad06:	8b 40 2c             	mov    0x2c(%eax),%eax
c010ad09:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010ad0c:	8b 52 14             	mov    0x14(%edx),%edx
c010ad0f:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010ad12:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010ad16:	89 14 24             	mov    %edx,(%esp)
c010ad19:	ff d0                	call   *%eax
c010ad1b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ad1e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ad22:	75 09                	jne    c010ad2d <file_seek+0x193>
            file->pos = pos;
c010ad24:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010ad27:	8b 55 0c             	mov    0xc(%ebp),%edx
c010ad2a:	89 50 10             	mov    %edx,0x10(%eax)
        }
//    cprintf("file_seek, pos=%d, whence=%d, ret=%d\n", pos, whence, ret);
    }
    fd_array_release(file);
c010ad2d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010ad30:	89 04 24             	mov    %eax,(%esp)
c010ad33:	e8 5a f7 ff ff       	call   c010a492 <fd_array_release>
    return ret;
c010ad38:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010ad3b:	c9                   	leave  
c010ad3c:	c3                   	ret    

c010ad3d <file_fstat>:

// stat file
int
file_fstat(int fd, struct stat *stat) {
c010ad3d:	55                   	push   %ebp
c010ad3e:	89 e5                	mov    %esp,%ebp
c010ad40:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010ad43:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010ad46:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ad4a:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad4d:	89 04 24             	mov    %eax,(%esp)
c010ad50:	e8 41 f9 ff ff       	call   c010a696 <fd2file>
c010ad55:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ad58:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ad5c:	74 08                	je     c010ad66 <file_fstat+0x29>
        return ret;
c010ad5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad61:	e9 94 00 00 00       	jmp    c010adfa <file_fstat+0xbd>
    }
    fd_array_acquire(file);
c010ad66:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ad69:	89 04 24             	mov    %eax,(%esp)
c010ad6c:	e8 e0 f6 ff ff       	call   c010a451 <fd_array_acquire>
    ret = vop_fstat(file->node, stat);
c010ad71:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ad74:	8b 40 14             	mov    0x14(%eax),%eax
c010ad77:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ad7a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ad7e:	74 17                	je     c010ad97 <file_fstat+0x5a>
c010ad80:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ad83:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ad86:	85 c0                	test   %eax,%eax
c010ad88:	74 0d                	je     c010ad97 <file_fstat+0x5a>
c010ad8a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ad8d:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ad90:	8b 40 14             	mov    0x14(%eax),%eax
c010ad93:	85 c0                	test   %eax,%eax
c010ad95:	75 24                	jne    c010adbb <file_fstat+0x7e>
c010ad97:	c7 44 24 0c 6c 7c 11 	movl   $0xc0117c6c,0xc(%esp)
c010ad9e:	c0 
c010ad9f:	c7 44 24 08 2a 7b 11 	movl   $0xc0117b2a,0x8(%esp)
c010ada6:	c0 
c010ada7:	c7 44 24 04 30 01 00 	movl   $0x130,0x4(%esp)
c010adae:	00 
c010adaf:	c7 04 24 3f 7b 11 c0 	movl   $0xc0117b3f,(%esp)
c010adb6:	e8 0d 61 ff ff       	call   c0100ec8 <__panic>
c010adbb:	c7 44 24 04 ba 7c 11 	movl   $0xc0117cba,0x4(%esp)
c010adc2:	c0 
c010adc3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010adc6:	89 04 24             	mov    %eax,(%esp)
c010adc9:	e8 1f 45 00 00       	call   c010f2ed <inode_check>
c010adce:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010add1:	8b 40 3c             	mov    0x3c(%eax),%eax
c010add4:	8b 40 14             	mov    0x14(%eax),%eax
c010add7:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010adda:	8b 52 14             	mov    0x14(%edx),%edx
c010addd:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010ade0:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010ade4:	89 14 24             	mov    %edx,(%esp)
c010ade7:	ff d0                	call   *%eax
c010ade9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    fd_array_release(file);
c010adec:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010adef:	89 04 24             	mov    %eax,(%esp)
c010adf2:	e8 9b f6 ff ff       	call   c010a492 <fd_array_release>
    return ret;
c010adf7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010adfa:	c9                   	leave  
c010adfb:	c3                   	ret    

c010adfc <file_fsync>:

// sync file
int
file_fsync(int fd) {
c010adfc:	55                   	push   %ebp
c010adfd:	89 e5                	mov    %esp,%ebp
c010adff:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010ae02:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010ae05:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ae09:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae0c:	89 04 24             	mov    %eax,(%esp)
c010ae0f:	e8 82 f8 ff ff       	call   c010a696 <fd2file>
c010ae14:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ae17:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ae1b:	74 08                	je     c010ae25 <file_fsync+0x29>
        return ret;
c010ae1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ae20:	e9 8d 00 00 00       	jmp    c010aeb2 <file_fsync+0xb6>
    }
    fd_array_acquire(file);
c010ae25:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ae28:	89 04 24             	mov    %eax,(%esp)
c010ae2b:	e8 21 f6 ff ff       	call   c010a451 <fd_array_acquire>
    ret = vop_fsync(file->node);
c010ae30:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ae33:	8b 40 14             	mov    0x14(%eax),%eax
c010ae36:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ae39:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ae3d:	74 17                	je     c010ae56 <file_fsync+0x5a>
c010ae3f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ae42:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ae45:	85 c0                	test   %eax,%eax
c010ae47:	74 0d                	je     c010ae56 <file_fsync+0x5a>
c010ae49:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ae4c:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ae4f:	8b 40 18             	mov    0x18(%eax),%eax
c010ae52:	85 c0                	test   %eax,%eax
c010ae54:	75 24                	jne    c010ae7a <file_fsync+0x7e>
c010ae56:	c7 44 24 0c c0 7d 11 	movl   $0xc0117dc0,0xc(%esp)
c010ae5d:	c0 
c010ae5e:	c7 44 24 08 2a 7b 11 	movl   $0xc0117b2a,0x8(%esp)
c010ae65:	c0 
c010ae66:	c7 44 24 04 3e 01 00 	movl   $0x13e,0x4(%esp)
c010ae6d:	00 
c010ae6e:	c7 04 24 3f 7b 11 c0 	movl   $0xc0117b3f,(%esp)
c010ae75:	e8 4e 60 ff ff       	call   c0100ec8 <__panic>
c010ae7a:	c7 44 24 04 0e 7e 11 	movl   $0xc0117e0e,0x4(%esp)
c010ae81:	c0 
c010ae82:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ae85:	89 04 24             	mov    %eax,(%esp)
c010ae88:	e8 60 44 00 00       	call   c010f2ed <inode_check>
c010ae8d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ae90:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ae93:	8b 40 18             	mov    0x18(%eax),%eax
c010ae96:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010ae99:	8b 52 14             	mov    0x14(%edx),%edx
c010ae9c:	89 14 24             	mov    %edx,(%esp)
c010ae9f:	ff d0                	call   *%eax
c010aea1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    fd_array_release(file);
c010aea4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aea7:	89 04 24             	mov    %eax,(%esp)
c010aeaa:	e8 e3 f5 ff ff       	call   c010a492 <fd_array_release>
    return ret;
c010aeaf:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010aeb2:	c9                   	leave  
c010aeb3:	c3                   	ret    

c010aeb4 <file_getdirentry>:

// get file entry in DIR
int
file_getdirentry(int fd, struct dirent *direntp) {
c010aeb4:	55                   	push   %ebp
c010aeb5:	89 e5                	mov    %esp,%ebp
c010aeb7:	83 ec 38             	sub    $0x38,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010aeba:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010aebd:	89 44 24 04          	mov    %eax,0x4(%esp)
c010aec1:	8b 45 08             	mov    0x8(%ebp),%eax
c010aec4:	89 04 24             	mov    %eax,(%esp)
c010aec7:	e8 ca f7 ff ff       	call   c010a696 <fd2file>
c010aecc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010aecf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010aed3:	74 08                	je     c010aedd <file_getdirentry+0x29>
        return ret;
c010aed5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aed8:	e9 e3 00 00 00       	jmp    c010afc0 <file_getdirentry+0x10c>
    }
    fd_array_acquire(file);
c010aedd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010aee0:	89 04 24             	mov    %eax,(%esp)
c010aee3:	e8 69 f5 ff ff       	call   c010a451 <fd_array_acquire>

    struct iobuf __iob, *iob = iobuf_init(&__iob, direntp->name, sizeof(direntp->name), direntp->offset);
c010aee8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010aeeb:	8b 00                	mov    (%eax),%eax
c010aeed:	8b 55 0c             	mov    0xc(%ebp),%edx
c010aef0:	83 c2 04             	add    $0x4,%edx
c010aef3:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010aef7:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
c010aefe:	00 
c010aeff:	89 54 24 04          	mov    %edx,0x4(%esp)
c010af03:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010af06:	89 04 24             	mov    %eax,(%esp)
c010af09:	e8 0d 04 00 00       	call   c010b31b <iobuf_init>
c010af0e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = vop_getdirentry(file->node, iob)) == 0) {
c010af11:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010af14:	8b 40 14             	mov    0x14(%eax),%eax
c010af17:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010af1a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010af1e:	74 17                	je     c010af37 <file_getdirentry+0x83>
c010af20:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010af23:	8b 40 3c             	mov    0x3c(%eax),%eax
c010af26:	85 c0                	test   %eax,%eax
c010af28:	74 0d                	je     c010af37 <file_getdirentry+0x83>
c010af2a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010af2d:	8b 40 3c             	mov    0x3c(%eax),%eax
c010af30:	8b 40 20             	mov    0x20(%eax),%eax
c010af33:	85 c0                	test   %eax,%eax
c010af35:	75 24                	jne    c010af5b <file_getdirentry+0xa7>
c010af37:	c7 44 24 0c 14 7e 11 	movl   $0xc0117e14,0xc(%esp)
c010af3e:	c0 
c010af3f:	c7 44 24 08 2a 7b 11 	movl   $0xc0117b2a,0x8(%esp)
c010af46:	c0 
c010af47:	c7 44 24 04 4e 01 00 	movl   $0x14e,0x4(%esp)
c010af4e:	00 
c010af4f:	c7 04 24 3f 7b 11 c0 	movl   $0xc0117b3f,(%esp)
c010af56:	e8 6d 5f ff ff       	call   c0100ec8 <__panic>
c010af5b:	c7 44 24 04 68 7e 11 	movl   $0xc0117e68,0x4(%esp)
c010af62:	c0 
c010af63:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010af66:	89 04 24             	mov    %eax,(%esp)
c010af69:	e8 7f 43 00 00       	call   c010f2ed <inode_check>
c010af6e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010af71:	8b 40 3c             	mov    0x3c(%eax),%eax
c010af74:	8b 40 20             	mov    0x20(%eax),%eax
c010af77:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010af7a:	8b 52 14             	mov    0x14(%edx),%edx
c010af7d:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010af80:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010af84:	89 14 24             	mov    %edx,(%esp)
c010af87:	ff d0                	call   *%eax
c010af89:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010af8c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010af90:	75 20                	jne    c010afb2 <file_getdirentry+0xfe>
        direntp->offset += iobuf_used(iob);
c010af92:	8b 45 0c             	mov    0xc(%ebp),%eax
c010af95:	8b 00                	mov    (%eax),%eax
c010af97:	89 c2                	mov    %eax,%edx
c010af99:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010af9c:	8b 48 08             	mov    0x8(%eax),%ecx
c010af9f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010afa2:	8b 40 0c             	mov    0xc(%eax),%eax
c010afa5:	29 c1                	sub    %eax,%ecx
c010afa7:	89 c8                	mov    %ecx,%eax
c010afa9:	01 d0                	add    %edx,%eax
c010afab:	89 c2                	mov    %eax,%edx
c010afad:	8b 45 0c             	mov    0xc(%ebp),%eax
c010afb0:	89 10                	mov    %edx,(%eax)
    }
    fd_array_release(file);
c010afb2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010afb5:	89 04 24             	mov    %eax,(%esp)
c010afb8:	e8 d5 f4 ff ff       	call   c010a492 <fd_array_release>
    return ret;
c010afbd:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010afc0:	c9                   	leave  
c010afc1:	c3                   	ret    

c010afc2 <file_dup>:

// duplicate file
int
file_dup(int fd1, int fd2) {
c010afc2:	55                   	push   %ebp
c010afc3:	89 e5                	mov    %esp,%ebp
c010afc5:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file1, *file2;
    if ((ret = fd2file(fd1, &file1)) != 0) {
c010afc8:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010afcb:	89 44 24 04          	mov    %eax,0x4(%esp)
c010afcf:	8b 45 08             	mov    0x8(%ebp),%eax
c010afd2:	89 04 24             	mov    %eax,(%esp)
c010afd5:	e8 bc f6 ff ff       	call   c010a696 <fd2file>
c010afda:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010afdd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010afe1:	74 05                	je     c010afe8 <file_dup+0x26>
        return ret;
c010afe3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010afe6:	eb 38                	jmp    c010b020 <file_dup+0x5e>
    }
    if ((ret = fd_array_alloc(fd2, &file2)) != 0) {
c010afe8:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010afeb:	89 44 24 04          	mov    %eax,0x4(%esp)
c010afef:	8b 45 0c             	mov    0xc(%ebp),%eax
c010aff2:	89 04 24             	mov    %eax,(%esp)
c010aff5:	e8 ea f2 ff ff       	call   c010a2e4 <fd_array_alloc>
c010affa:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010affd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b001:	74 05                	je     c010b008 <file_dup+0x46>
        return ret;
c010b003:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b006:	eb 18                	jmp    c010b020 <file_dup+0x5e>
    }
    fd_array_dup(file2, file1);
c010b008:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010b00b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b00e:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b012:	89 04 24             	mov    %eax,(%esp)
c010b015:	e8 e5 f5 ff ff       	call   c010a5ff <fd_array_dup>
    return file2->fd;
c010b01a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b01d:	8b 40 0c             	mov    0xc(%eax),%eax
}
c010b020:	c9                   	leave  
c010b021:	c3                   	ret    

c010b022 <files_count>:
void files_destroy(struct files_struct *filesp);
void files_closeall(struct files_struct *filesp);
int dup_files(struct files_struct *to, struct files_struct *from);

static inline int
files_count(struct files_struct *filesp) {
c010b022:	55                   	push   %ebp
c010b023:	89 e5                	mov    %esp,%ebp
    return filesp->files_count;
c010b025:	8b 45 08             	mov    0x8(%ebp),%eax
c010b028:	8b 40 08             	mov    0x8(%eax),%eax
}
c010b02b:	5d                   	pop    %ebp
c010b02c:	c3                   	ret    

c010b02d <fs_init>:
#include <sfs.h>
#include <inode.h>
#include <assert.h>
//called when init_main proc start
void
fs_init(void) {
c010b02d:	55                   	push   %ebp
c010b02e:	89 e5                	mov    %esp,%ebp
c010b030:	83 ec 08             	sub    $0x8,%esp
    vfs_init();
c010b033:	e8 d1 43 00 00       	call   c010f409 <vfs_init>
    dev_init();
c010b038:	e8 0e 5b 00 00       	call   c0110b4b <dev_init>
    sfs_init();
c010b03d:	e8 cb 68 00 00       	call   c011190d <sfs_init>
}
c010b042:	c9                   	leave  
c010b043:	c3                   	ret    

c010b044 <fs_cleanup>:

void
fs_cleanup(void) {
c010b044:	55                   	push   %ebp
c010b045:	89 e5                	mov    %esp,%ebp
c010b047:	83 ec 08             	sub    $0x8,%esp
    vfs_cleanup();
c010b04a:	e8 73 45 00 00       	call   c010f5c2 <vfs_cleanup>
}
c010b04f:	c9                   	leave  
c010b050:	c3                   	ret    

c010b051 <lock_files>:

void
lock_files(struct files_struct *filesp) {
c010b051:	55                   	push   %ebp
c010b052:	89 e5                	mov    %esp,%ebp
c010b054:	83 ec 18             	sub    $0x18,%esp
    down(&(filesp->files_sem));
c010b057:	8b 45 08             	mov    0x8(%ebp),%eax
c010b05a:	83 c0 0c             	add    $0xc,%eax
c010b05d:	89 04 24             	mov    %eax,(%esp)
c010b060:	e8 6f ec ff ff       	call   c0109cd4 <down>
}
c010b065:	c9                   	leave  
c010b066:	c3                   	ret    

c010b067 <unlock_files>:

void
unlock_files(struct files_struct *filesp) {
c010b067:	55                   	push   %ebp
c010b068:	89 e5                	mov    %esp,%ebp
c010b06a:	83 ec 18             	sub    $0x18,%esp
    up(&(filesp->files_sem));
c010b06d:	8b 45 08             	mov    0x8(%ebp),%eax
c010b070:	83 c0 0c             	add    $0xc,%eax
c010b073:	89 04 24             	mov    %eax,(%esp)
c010b076:	e8 3e ec ff ff       	call   c0109cb9 <up>
}
c010b07b:	c9                   	leave  
c010b07c:	c3                   	ret    

c010b07d <files_create>:
//Called when a new proc init
struct files_struct *
files_create(void) {
c010b07d:	55                   	push   %ebp
c010b07e:	89 e5                	mov    %esp,%ebp
c010b080:	83 ec 28             	sub    $0x28,%esp
    //cprintf("[files_create]\n");
    static_assert((int)FILES_STRUCT_NENTRY > 128);
    struct files_struct *filesp;
    if ((filesp = kmalloc(sizeof(struct files_struct) + FILES_STRUCT_BUFSIZE)) != NULL) {
c010b083:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c010b08a:	e8 50 9c ff ff       	call   c0104cdf <kmalloc>
c010b08f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b092:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b096:	74 43                	je     c010b0db <files_create+0x5e>
        filesp->pwd = NULL;
c010b098:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b09b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        filesp->fd_array = (void *)(filesp + 1);
c010b0a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b0a4:	8d 50 18             	lea    0x18(%eax),%edx
c010b0a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b0aa:	89 50 04             	mov    %edx,0x4(%eax)
        filesp->files_count = 0;
c010b0ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b0b0:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        sem_init(&(filesp->files_sem), 1);
c010b0b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b0ba:	83 c0 0c             	add    $0xc,%eax
c010b0bd:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010b0c4:	00 
c010b0c5:	89 04 24             	mov    %eax,(%esp)
c010b0c8:	e8 79 ea ff ff       	call   c0109b46 <sem_init>
        fd_array_init(filesp->fd_array);
c010b0cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b0d0:	8b 40 04             	mov    0x4(%eax),%eax
c010b0d3:	89 04 24             	mov    %eax,(%esp)
c010b0d6:	e8 c4 f1 ff ff       	call   c010a29f <fd_array_init>
    }
    return filesp;
c010b0db:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b0de:	c9                   	leave  
c010b0df:	c3                   	ret    

c010b0e0 <files_destroy>:
//Called when a proc exit
void
files_destroy(struct files_struct *filesp) {
c010b0e0:	55                   	push   %ebp
c010b0e1:	89 e5                	mov    %esp,%ebp
c010b0e3:	83 ec 28             	sub    $0x28,%esp
//    cprintf("[files_destroy]\n");
    assert(filesp != NULL && files_count(filesp) == 0);
c010b0e6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b0ea:	74 0f                	je     c010b0fb <files_destroy+0x1b>
c010b0ec:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0ef:	89 04 24             	mov    %eax,(%esp)
c010b0f2:	e8 2b ff ff ff       	call   c010b022 <files_count>
c010b0f7:	85 c0                	test   %eax,%eax
c010b0f9:	74 24                	je     c010b11f <files_destroy+0x3f>
c010b0fb:	c7 44 24 0c 74 7e 11 	movl   $0xc0117e74,0xc(%esp)
c010b102:	c0 
c010b103:	c7 44 24 08 9f 7e 11 	movl   $0xc0117e9f,0x8(%esp)
c010b10a:	c0 
c010b10b:	c7 44 24 04 33 00 00 	movl   $0x33,0x4(%esp)
c010b112:	00 
c010b113:	c7 04 24 b4 7e 11 c0 	movl   $0xc0117eb4,(%esp)
c010b11a:	e8 a9 5d ff ff       	call   c0100ec8 <__panic>
    if (filesp->pwd != NULL) {
c010b11f:	8b 45 08             	mov    0x8(%ebp),%eax
c010b122:	8b 00                	mov    (%eax),%eax
c010b124:	85 c0                	test   %eax,%eax
c010b126:	74 0d                	je     c010b135 <files_destroy+0x55>
        vop_ref_dec(filesp->pwd);
c010b128:	8b 45 08             	mov    0x8(%ebp),%eax
c010b12b:	8b 00                	mov    (%eax),%eax
c010b12d:	89 04 24             	mov    %eax,(%esp)
c010b130:	e8 ca 3f 00 00       	call   c010f0ff <inode_ref_dec>
    }
    int i;
    struct file *file = filesp->fd_array;
c010b135:	8b 45 08             	mov    0x8(%ebp),%eax
c010b138:	8b 40 04             	mov    0x4(%eax),%eax
c010b13b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (i = 0; i < FILES_STRUCT_NENTRY; i ++, file ++) {
c010b13e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010b145:	eb 4a                	jmp    c010b191 <files_destroy+0xb1>
        if (file->status == FD_OPENED) {
c010b147:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b14a:	8b 00                	mov    (%eax),%eax
c010b14c:	83 f8 02             	cmp    $0x2,%eax
c010b14f:	75 0b                	jne    c010b15c <files_destroy+0x7c>
            fd_array_close(file);
c010b151:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b154:	89 04 24             	mov    %eax,(%esp)
c010b157:	e8 17 f4 ff ff       	call   c010a573 <fd_array_close>
        }
        assert(file->status == FD_NONE);
c010b15c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b15f:	8b 00                	mov    (%eax),%eax
c010b161:	85 c0                	test   %eax,%eax
c010b163:	74 24                	je     c010b189 <files_destroy+0xa9>
c010b165:	c7 44 24 0c c1 7e 11 	movl   $0xc0117ec1,0xc(%esp)
c010b16c:	c0 
c010b16d:	c7 44 24 08 9f 7e 11 	movl   $0xc0117e9f,0x8(%esp)
c010b174:	c0 
c010b175:	c7 44 24 04 3d 00 00 	movl   $0x3d,0x4(%esp)
c010b17c:	00 
c010b17d:	c7 04 24 b4 7e 11 c0 	movl   $0xc0117eb4,(%esp)
c010b184:	e8 3f 5d ff ff       	call   c0100ec8 <__panic>
    if (filesp->pwd != NULL) {
        vop_ref_dec(filesp->pwd);
    }
    int i;
    struct file *file = filesp->fd_array;
    for (i = 0; i < FILES_STRUCT_NENTRY; i ++, file ++) {
c010b189:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010b18d:	83 45 f0 1c          	addl   $0x1c,-0x10(%ebp)
c010b191:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b194:	3d 90 00 00 00       	cmp    $0x90,%eax
c010b199:	76 ac                	jbe    c010b147 <files_destroy+0x67>
        if (file->status == FD_OPENED) {
            fd_array_close(file);
        }
        assert(file->status == FD_NONE);
    }
    kfree(filesp);
c010b19b:	8b 45 08             	mov    0x8(%ebp),%eax
c010b19e:	89 04 24             	mov    %eax,(%esp)
c010b1a1:	e8 54 9b ff ff       	call   c0104cfa <kfree>
}
c010b1a6:	c9                   	leave  
c010b1a7:	c3                   	ret    

c010b1a8 <files_closeall>:

void
files_closeall(struct files_struct *filesp) {
c010b1a8:	55                   	push   %ebp
c010b1a9:	89 e5                	mov    %esp,%ebp
c010b1ab:	83 ec 28             	sub    $0x28,%esp
//    cprintf("[files_closeall]\n");
    assert(filesp != NULL && files_count(filesp) > 0);
c010b1ae:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b1b2:	74 0f                	je     c010b1c3 <files_closeall+0x1b>
c010b1b4:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1b7:	89 04 24             	mov    %eax,(%esp)
c010b1ba:	e8 63 fe ff ff       	call   c010b022 <files_count>
c010b1bf:	85 c0                	test   %eax,%eax
c010b1c1:	7f 24                	jg     c010b1e7 <files_closeall+0x3f>
c010b1c3:	c7 44 24 0c dc 7e 11 	movl   $0xc0117edc,0xc(%esp)
c010b1ca:	c0 
c010b1cb:	c7 44 24 08 9f 7e 11 	movl   $0xc0117e9f,0x8(%esp)
c010b1d2:	c0 
c010b1d3:	c7 44 24 04 45 00 00 	movl   $0x45,0x4(%esp)
c010b1da:	00 
c010b1db:	c7 04 24 b4 7e 11 c0 	movl   $0xc0117eb4,(%esp)
c010b1e2:	e8 e1 5c ff ff       	call   c0100ec8 <__panic>
    int i;
    struct file *file = filesp->fd_array;
c010b1e7:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1ea:	8b 40 04             	mov    0x4(%eax),%eax
c010b1ed:	89 45 f0             	mov    %eax,-0x10(%ebp)
    //skip the stdin & stdout
    for (i = 2, file += 2; i < FILES_STRUCT_NENTRY; i ++, file ++) {
c010b1f0:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
c010b1f7:	83 45 f0 38          	addl   $0x38,-0x10(%ebp)
c010b1fb:	eb 1d                	jmp    c010b21a <files_closeall+0x72>
        if (file->status == FD_OPENED) {
c010b1fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b200:	8b 00                	mov    (%eax),%eax
c010b202:	83 f8 02             	cmp    $0x2,%eax
c010b205:	75 0b                	jne    c010b212 <files_closeall+0x6a>
            fd_array_close(file);
c010b207:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b20a:	89 04 24             	mov    %eax,(%esp)
c010b20d:	e8 61 f3 ff ff       	call   c010a573 <fd_array_close>
//    cprintf("[files_closeall]\n");
    assert(filesp != NULL && files_count(filesp) > 0);
    int i;
    struct file *file = filesp->fd_array;
    //skip the stdin & stdout
    for (i = 2, file += 2; i < FILES_STRUCT_NENTRY; i ++, file ++) {
c010b212:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010b216:	83 45 f0 1c          	addl   $0x1c,-0x10(%ebp)
c010b21a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b21d:	3d 90 00 00 00       	cmp    $0x90,%eax
c010b222:	76 d9                	jbe    c010b1fd <files_closeall+0x55>
        if (file->status == FD_OPENED) {
            fd_array_close(file);
        }
    }
}
c010b224:	c9                   	leave  
c010b225:	c3                   	ret    

c010b226 <dup_fs>:

int
dup_fs(struct files_struct *to, struct files_struct *from) {
c010b226:	55                   	push   %ebp
c010b227:	89 e5                	mov    %esp,%ebp
c010b229:	83 ec 28             	sub    $0x28,%esp
//    cprintf("[dup_fs]\n");
    assert(to != NULL && from != NULL);
c010b22c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b230:	74 06                	je     c010b238 <dup_fs+0x12>
c010b232:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b236:	75 24                	jne    c010b25c <dup_fs+0x36>
c010b238:	c7 44 24 0c 06 7f 11 	movl   $0xc0117f06,0xc(%esp)
c010b23f:	c0 
c010b240:	c7 44 24 08 9f 7e 11 	movl   $0xc0117e9f,0x8(%esp)
c010b247:	c0 
c010b248:	c7 44 24 04 53 00 00 	movl   $0x53,0x4(%esp)
c010b24f:	00 
c010b250:	c7 04 24 b4 7e 11 c0 	movl   $0xc0117eb4,(%esp)
c010b257:	e8 6c 5c ff ff       	call   c0100ec8 <__panic>
    assert(files_count(to) == 0 && files_count(from) > 0);
c010b25c:	8b 45 08             	mov    0x8(%ebp),%eax
c010b25f:	89 04 24             	mov    %eax,(%esp)
c010b262:	e8 bb fd ff ff       	call   c010b022 <files_count>
c010b267:	85 c0                	test   %eax,%eax
c010b269:	75 0f                	jne    c010b27a <dup_fs+0x54>
c010b26b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b26e:	89 04 24             	mov    %eax,(%esp)
c010b271:	e8 ac fd ff ff       	call   c010b022 <files_count>
c010b276:	85 c0                	test   %eax,%eax
c010b278:	7f 24                	jg     c010b29e <dup_fs+0x78>
c010b27a:	c7 44 24 0c 24 7f 11 	movl   $0xc0117f24,0xc(%esp)
c010b281:	c0 
c010b282:	c7 44 24 08 9f 7e 11 	movl   $0xc0117e9f,0x8(%esp)
c010b289:	c0 
c010b28a:	c7 44 24 04 54 00 00 	movl   $0x54,0x4(%esp)
c010b291:	00 
c010b292:	c7 04 24 b4 7e 11 c0 	movl   $0xc0117eb4,(%esp)
c010b299:	e8 2a 5c ff ff       	call   c0100ec8 <__panic>
    if ((to->pwd = from->pwd) != NULL) {
c010b29e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b2a1:	8b 10                	mov    (%eax),%edx
c010b2a3:	8b 45 08             	mov    0x8(%ebp),%eax
c010b2a6:	89 10                	mov    %edx,(%eax)
c010b2a8:	8b 45 08             	mov    0x8(%ebp),%eax
c010b2ab:	8b 00                	mov    (%eax),%eax
c010b2ad:	85 c0                	test   %eax,%eax
c010b2af:	74 0d                	je     c010b2be <dup_fs+0x98>
        vop_ref_inc(to->pwd);
c010b2b1:	8b 45 08             	mov    0x8(%ebp),%eax
c010b2b4:	8b 00                	mov    (%eax),%eax
c010b2b6:	89 04 24             	mov    %eax,(%esp)
c010b2b9:	e8 27 3e 00 00       	call   c010f0e5 <inode_ref_inc>
    }
    int i;
    struct file *to_file = to->fd_array, *from_file = from->fd_array;
c010b2be:	8b 45 08             	mov    0x8(%ebp),%eax
c010b2c1:	8b 40 04             	mov    0x4(%eax),%eax
c010b2c4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b2c7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b2ca:	8b 40 04             	mov    0x4(%eax),%eax
c010b2cd:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for (i = 0; i < FILES_STRUCT_NENTRY; i ++, to_file ++, from_file ++) {
c010b2d0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010b2d7:	eb 31                	jmp    c010b30a <dup_fs+0xe4>
        if (from_file->status == FD_OPENED) {
c010b2d9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b2dc:	8b 00                	mov    (%eax),%eax
c010b2de:	83 f8 02             	cmp    $0x2,%eax
c010b2e1:	75 1b                	jne    c010b2fe <dup_fs+0xd8>
            /* alloc_fd first */
            to_file->status = FD_INIT;
c010b2e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b2e6:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
            fd_array_dup(to_file, from_file);
c010b2ec:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b2ef:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b2f3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b2f6:	89 04 24             	mov    %eax,(%esp)
c010b2f9:	e8 01 f3 ff ff       	call   c010a5ff <fd_array_dup>
    if ((to->pwd = from->pwd) != NULL) {
        vop_ref_inc(to->pwd);
    }
    int i;
    struct file *to_file = to->fd_array, *from_file = from->fd_array;
    for (i = 0; i < FILES_STRUCT_NENTRY; i ++, to_file ++, from_file ++) {
c010b2fe:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010b302:	83 45 f0 1c          	addl   $0x1c,-0x10(%ebp)
c010b306:	83 45 ec 1c          	addl   $0x1c,-0x14(%ebp)
c010b30a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b30d:	3d 90 00 00 00       	cmp    $0x90,%eax
c010b312:	76 c5                	jbe    c010b2d9 <dup_fs+0xb3>
            /* alloc_fd first */
            to_file->status = FD_INIT;
            fd_array_dup(to_file, from_file);
        }
    }
    return 0;
c010b314:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b319:	c9                   	leave  
c010b31a:	c3                   	ret    

c010b31b <iobuf_init>:
 *                set up io_base to point to the buffer you want to transfer to, and set io_len to the length of buffer;
 *                initialize io_offset as desired;
 *                initialize io_resid to the total amount of data that can be transferred through this io.
 */
struct iobuf *
iobuf_init(struct iobuf *iob, void *base, size_t len, off_t offset) {
c010b31b:	55                   	push   %ebp
c010b31c:	89 e5                	mov    %esp,%ebp
    iob->io_base = base;
c010b31e:	8b 45 08             	mov    0x8(%ebp),%eax
c010b321:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b324:	89 10                	mov    %edx,(%eax)
    iob->io_offset = offset;
c010b326:	8b 45 08             	mov    0x8(%ebp),%eax
c010b329:	8b 55 14             	mov    0x14(%ebp),%edx
c010b32c:	89 50 04             	mov    %edx,0x4(%eax)
    iob->io_len = iob->io_resid = len;
c010b32f:	8b 45 08             	mov    0x8(%ebp),%eax
c010b332:	8b 55 10             	mov    0x10(%ebp),%edx
c010b335:	89 50 0c             	mov    %edx,0xc(%eax)
c010b338:	8b 45 08             	mov    0x8(%ebp),%eax
c010b33b:	8b 50 0c             	mov    0xc(%eax),%edx
c010b33e:	8b 45 08             	mov    0x8(%ebp),%eax
c010b341:	89 50 08             	mov    %edx,0x8(%eax)
    return iob;
c010b344:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010b347:	5d                   	pop    %ebp
c010b348:	c3                   	ret    

c010b349 <iobuf_move>:
 * iobuf_move may be called repeatedly on the same io to transfer
 * additional data until the available buffer space the io refers to
 * is exhausted.
 */
int
iobuf_move(struct iobuf *iob, void *data, size_t len, bool m2b, size_t *copiedp) {
c010b349:	55                   	push   %ebp
c010b34a:	89 e5                	mov    %esp,%ebp
c010b34c:	83 ec 28             	sub    $0x28,%esp
    size_t alen;
    if ((alen = iob->io_resid) > len) {
c010b34f:	8b 45 08             	mov    0x8(%ebp),%eax
c010b352:	8b 40 0c             	mov    0xc(%eax),%eax
c010b355:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b358:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b35b:	3b 45 10             	cmp    0x10(%ebp),%eax
c010b35e:	76 06                	jbe    c010b366 <iobuf_move+0x1d>
        alen = len;
c010b360:	8b 45 10             	mov    0x10(%ebp),%eax
c010b363:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    if (alen > 0) {
c010b366:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b36a:	74 57                	je     c010b3c3 <iobuf_move+0x7a>
        void *src = iob->io_base, *dst = data;
c010b36c:	8b 45 08             	mov    0x8(%ebp),%eax
c010b36f:	8b 00                	mov    (%eax),%eax
c010b371:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b374:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b377:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (m2b) {
c010b37a:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010b37e:	74 12                	je     c010b392 <iobuf_move+0x49>
            void *tmp = src;
c010b380:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b383:	89 45 e8             	mov    %eax,-0x18(%ebp)
            src = dst, dst = tmp;
c010b386:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b389:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b38c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b38f:	89 45 ec             	mov    %eax,-0x14(%ebp)
        }
        memmove(dst, src, alen);
c010b392:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b395:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b399:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b39c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b3a0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b3a3:	89 04 24             	mov    %eax,(%esp)
c010b3a6:	e8 d9 a1 00 00       	call   c0115584 <memmove>
        iobuf_skip(iob, alen), len -= alen;
c010b3ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b3ae:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b3b2:	8b 45 08             	mov    0x8(%ebp),%eax
c010b3b5:	89 04 24             	mov    %eax,(%esp)
c010b3b8:	e8 a1 00 00 00       	call   c010b45e <iobuf_skip>
c010b3bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b3c0:	29 45 10             	sub    %eax,0x10(%ebp)
    }
    if (copiedp != NULL) {
c010b3c3:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c010b3c7:	74 08                	je     c010b3d1 <iobuf_move+0x88>
        *copiedp = alen;
c010b3c9:	8b 45 18             	mov    0x18(%ebp),%eax
c010b3cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b3cf:	89 10                	mov    %edx,(%eax)
    }
    return (len == 0) ? 0 : -E_NO_MEM;
c010b3d1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b3d5:	75 07                	jne    c010b3de <iobuf_move+0x95>
c010b3d7:	b8 00 00 00 00       	mov    $0x0,%eax
c010b3dc:	eb 05                	jmp    c010b3e3 <iobuf_move+0x9a>
c010b3de:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c010b3e3:	c9                   	leave  
c010b3e4:	c3                   	ret    

c010b3e5 <iobuf_move_zeros>:
/*
 * iobuf_move_zeros - set io buffer zero
 * @copiedp:  the size of data memcopied
 */
int
iobuf_move_zeros(struct iobuf *iob, size_t len, size_t *copiedp) {
c010b3e5:	55                   	push   %ebp
c010b3e6:	89 e5                	mov    %esp,%ebp
c010b3e8:	83 ec 28             	sub    $0x28,%esp
    size_t alen;
    if ((alen = iob->io_resid) > len) {
c010b3eb:	8b 45 08             	mov    0x8(%ebp),%eax
c010b3ee:	8b 40 0c             	mov    0xc(%eax),%eax
c010b3f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b3f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b3f7:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010b3fa:	76 06                	jbe    c010b402 <iobuf_move_zeros+0x1d>
        alen = len;
c010b3fc:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b3ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    if (alen > 0) {
c010b402:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b406:	74 34                	je     c010b43c <iobuf_move_zeros+0x57>
        memset(iob->io_base, 0, alen);
c010b408:	8b 45 08             	mov    0x8(%ebp),%eax
c010b40b:	8b 00                	mov    (%eax),%eax
c010b40d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b410:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b414:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b41b:	00 
c010b41c:	89 04 24             	mov    %eax,(%esp)
c010b41f:	e8 21 a1 00 00       	call   c0115545 <memset>
        iobuf_skip(iob, alen), len -= alen;
c010b424:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b427:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b42b:	8b 45 08             	mov    0x8(%ebp),%eax
c010b42e:	89 04 24             	mov    %eax,(%esp)
c010b431:	e8 28 00 00 00       	call   c010b45e <iobuf_skip>
c010b436:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b439:	29 45 0c             	sub    %eax,0xc(%ebp)
    }
    if (copiedp != NULL) {
c010b43c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b440:	74 08                	je     c010b44a <iobuf_move_zeros+0x65>
        *copiedp = alen;
c010b442:	8b 45 10             	mov    0x10(%ebp),%eax
c010b445:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b448:	89 10                	mov    %edx,(%eax)
    }
    return (len == 0) ? 0 : -E_NO_MEM;
c010b44a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b44e:	75 07                	jne    c010b457 <iobuf_move_zeros+0x72>
c010b450:	b8 00 00 00 00       	mov    $0x0,%eax
c010b455:	eb 05                	jmp    c010b45c <iobuf_move_zeros+0x77>
c010b457:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c010b45c:	c9                   	leave  
c010b45d:	c3                   	ret    

c010b45e <iobuf_skip>:

/*
 * iobuf_skip - change the current position of io buffer
 */
void
iobuf_skip(struct iobuf *iob, size_t n) {
c010b45e:	55                   	push   %ebp
c010b45f:	89 e5                	mov    %esp,%ebp
c010b461:	83 ec 18             	sub    $0x18,%esp
    assert(iob->io_resid >= n);
c010b464:	8b 45 08             	mov    0x8(%ebp),%eax
c010b467:	8b 40 0c             	mov    0xc(%eax),%eax
c010b46a:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010b46d:	73 24                	jae    c010b493 <iobuf_skip+0x35>
c010b46f:	c7 44 24 0c 52 7f 11 	movl   $0xc0117f52,0xc(%esp)
c010b476:	c0 
c010b477:	c7 44 24 08 65 7f 11 	movl   $0xc0117f65,0x8(%esp)
c010b47e:	c0 
c010b47f:	c7 44 24 04 4a 00 00 	movl   $0x4a,0x4(%esp)
c010b486:	00 
c010b487:	c7 04 24 7a 7f 11 c0 	movl   $0xc0117f7a,(%esp)
c010b48e:	e8 35 5a ff ff       	call   c0100ec8 <__panic>
    iob->io_base += n, iob->io_offset += n, iob->io_resid -= n;
c010b493:	8b 45 08             	mov    0x8(%ebp),%eax
c010b496:	8b 10                	mov    (%eax),%edx
c010b498:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b49b:	01 c2                	add    %eax,%edx
c010b49d:	8b 45 08             	mov    0x8(%ebp),%eax
c010b4a0:	89 10                	mov    %edx,(%eax)
c010b4a2:	8b 45 08             	mov    0x8(%ebp),%eax
c010b4a5:	8b 40 04             	mov    0x4(%eax),%eax
c010b4a8:	89 c2                	mov    %eax,%edx
c010b4aa:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b4ad:	01 d0                	add    %edx,%eax
c010b4af:	89 c2                	mov    %eax,%edx
c010b4b1:	8b 45 08             	mov    0x8(%ebp),%eax
c010b4b4:	89 50 04             	mov    %edx,0x4(%eax)
c010b4b7:	8b 45 08             	mov    0x8(%ebp),%eax
c010b4ba:	8b 40 0c             	mov    0xc(%eax),%eax
c010b4bd:	2b 45 0c             	sub    0xc(%ebp),%eax
c010b4c0:	89 c2                	mov    %eax,%edx
c010b4c2:	8b 45 08             	mov    0x8(%ebp),%eax
c010b4c5:	89 50 0c             	mov    %edx,0xc(%eax)
}
c010b4c8:	c9                   	leave  
c010b4c9:	c3                   	ret    

c010b4ca <lock_mm>:
    mm->mm_count -= 1;
    return mm->mm_count;
}

static inline void
lock_mm(struct mm_struct *mm) {
c010b4ca:	55                   	push   %ebp
c010b4cb:	89 e5                	mov    %esp,%ebp
c010b4cd:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010b4d0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b4d4:	74 25                	je     c010b4fb <lock_mm+0x31>
        down(&(mm->mm_sem));
c010b4d6:	8b 45 08             	mov    0x8(%ebp),%eax
c010b4d9:	83 c0 1c             	add    $0x1c,%eax
c010b4dc:	89 04 24             	mov    %eax,(%esp)
c010b4df:	e8 f0 e7 ff ff       	call   c0109cd4 <down>
        if (current != NULL) {
c010b4e4:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010b4e9:	85 c0                	test   %eax,%eax
c010b4eb:	74 0e                	je     c010b4fb <lock_mm+0x31>
            mm->locked_by = current->pid;
c010b4ed:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010b4f2:	8b 50 04             	mov    0x4(%eax),%edx
c010b4f5:	8b 45 08             	mov    0x8(%ebp),%eax
c010b4f8:	89 50 28             	mov    %edx,0x28(%eax)
        }
    }
}
c010b4fb:	c9                   	leave  
c010b4fc:	c3                   	ret    

c010b4fd <unlock_mm>:

static inline void
unlock_mm(struct mm_struct *mm) {
c010b4fd:	55                   	push   %ebp
c010b4fe:	89 e5                	mov    %esp,%ebp
c010b500:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010b503:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b507:	74 18                	je     c010b521 <unlock_mm+0x24>
        up(&(mm->mm_sem));
c010b509:	8b 45 08             	mov    0x8(%ebp),%eax
c010b50c:	83 c0 1c             	add    $0x1c,%eax
c010b50f:	89 04 24             	mov    %eax,(%esp)
c010b512:	e8 a2 e7 ff ff       	call   c0109cb9 <up>
        mm->locked_by = 0;
c010b517:	8b 45 08             	mov    0x8(%ebp),%eax
c010b51a:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    }
}
c010b521:	c9                   	leave  
c010b522:	c3                   	ret    

c010b523 <copy_path>:

#define IOBUF_SIZE                          4096

/* copy_path - copy path name */
static int
copy_path(char **to, const char *from) {
c010b523:	55                   	push   %ebp
c010b524:	89 e5                	mov    %esp,%ebp
c010b526:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = current->mm;
c010b529:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010b52e:	8b 40 18             	mov    0x18(%eax),%eax
c010b531:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char *buffer;
    if ((buffer = kmalloc(FS_MAX_FPATH_LEN + 1)) == NULL) {
c010b534:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c010b53b:	e8 9f 97 ff ff       	call   c0104cdf <kmalloc>
c010b540:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b543:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b547:	75 07                	jne    c010b550 <copy_path+0x2d>
        return -E_NO_MEM;
c010b549:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010b54e:	eb 66                	jmp    c010b5b6 <copy_path+0x93>
    }
    lock_mm(mm);
c010b550:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b553:	89 04 24             	mov    %eax,(%esp)
c010b556:	e8 6f ff ff ff       	call   c010b4ca <lock_mm>
    if (!copy_string(mm, buffer, from, FS_MAX_FPATH_LEN + 1)) {
c010b55b:	c7 44 24 0c 00 10 00 	movl   $0x1000,0xc(%esp)
c010b562:	00 
c010b563:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b566:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b56a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b56d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b571:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b574:	89 04 24             	mov    %eax,(%esp)
c010b577:	e8 cb db ff ff       	call   c0109147 <copy_string>
c010b57c:	85 c0                	test   %eax,%eax
c010b57e:	75 1e                	jne    c010b59e <copy_path+0x7b>
        unlock_mm(mm);
c010b580:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b583:	89 04 24             	mov    %eax,(%esp)
c010b586:	e8 72 ff ff ff       	call   c010b4fd <unlock_mm>
        goto failed_cleanup;
c010b58b:	90                   	nop
    unlock_mm(mm);
    *to = buffer;
    return 0;

failed_cleanup:
    kfree(buffer);
c010b58c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b58f:	89 04 24             	mov    %eax,(%esp)
c010b592:	e8 63 97 ff ff       	call   c0104cfa <kfree>
    return -E_INVAL;
c010b597:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010b59c:	eb 18                	jmp    c010b5b6 <copy_path+0x93>
    lock_mm(mm);
    if (!copy_string(mm, buffer, from, FS_MAX_FPATH_LEN + 1)) {
        unlock_mm(mm);
        goto failed_cleanup;
    }
    unlock_mm(mm);
c010b59e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b5a1:	89 04 24             	mov    %eax,(%esp)
c010b5a4:	e8 54 ff ff ff       	call   c010b4fd <unlock_mm>
    *to = buffer;
c010b5a9:	8b 45 08             	mov    0x8(%ebp),%eax
c010b5ac:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010b5af:	89 10                	mov    %edx,(%eax)
    return 0;
c010b5b1:	b8 00 00 00 00       	mov    $0x0,%eax

failed_cleanup:
    kfree(buffer);
    return -E_INVAL;
}
c010b5b6:	c9                   	leave  
c010b5b7:	c3                   	ret    

c010b5b8 <sysfile_open>:

/* sysfile_open - open file */
int
sysfile_open(const char *__path, uint32_t open_flags) {
c010b5b8:	55                   	push   %ebp
c010b5b9:	89 e5                	mov    %esp,%ebp
c010b5bb:	83 ec 28             	sub    $0x28,%esp
    int ret;
    char *path;
    if ((ret = copy_path(&path, __path)) != 0) {
c010b5be:	8b 45 08             	mov    0x8(%ebp),%eax
c010b5c1:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b5c5:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010b5c8:	89 04 24             	mov    %eax,(%esp)
c010b5cb:	e8 53 ff ff ff       	call   c010b523 <copy_path>
c010b5d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b5d3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b5d7:	74 05                	je     c010b5de <sysfile_open+0x26>
        return ret;
c010b5d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b5dc:	eb 23                	jmp    c010b601 <sysfile_open+0x49>
    }
    ret = file_open(path, open_flags);
c010b5de:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b5e1:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b5e4:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b5e8:	89 04 24             	mov    %eax,(%esp)
c010b5eb:	e8 61 f1 ff ff       	call   c010a751 <file_open>
c010b5f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(path);
c010b5f3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b5f6:	89 04 24             	mov    %eax,(%esp)
c010b5f9:	e8 fc 96 ff ff       	call   c0104cfa <kfree>
    return ret;
c010b5fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b601:	c9                   	leave  
c010b602:	c3                   	ret    

c010b603 <sysfile_close>:

/* sysfile_close - close file */
int
sysfile_close(int fd) {
c010b603:	55                   	push   %ebp
c010b604:	89 e5                	mov    %esp,%ebp
c010b606:	83 ec 18             	sub    $0x18,%esp
    return file_close(fd);
c010b609:	8b 45 08             	mov    0x8(%ebp),%eax
c010b60c:	89 04 24             	mov    %eax,(%esp)
c010b60f:	e8 da f2 ff ff       	call   c010a8ee <file_close>
}
c010b614:	c9                   	leave  
c010b615:	c3                   	ret    

c010b616 <sysfile_read>:

/* sysfile_read - read file */
int
sysfile_read(int fd, void *base, size_t len) {
c010b616:	55                   	push   %ebp
c010b617:	89 e5                	mov    %esp,%ebp
c010b619:	83 ec 38             	sub    $0x38,%esp
    struct mm_struct *mm = current->mm;
c010b61c:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010b621:	8b 40 18             	mov    0x18(%eax),%eax
c010b624:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (len == 0) {
c010b627:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b62b:	75 0a                	jne    c010b637 <sysfile_read+0x21>
        return 0;
c010b62d:	b8 00 00 00 00       	mov    $0x0,%eax
c010b632:	e9 55 01 00 00       	jmp    c010b78c <sysfile_read+0x176>
    }
    if (!file_testfd(fd, 1, 0)) {
c010b637:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010b63e:	00 
c010b63f:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010b646:	00 
c010b647:	8b 45 08             	mov    0x8(%ebp),%eax
c010b64a:	89 04 24             	mov    %eax,(%esp)
c010b64d:	e8 a2 f0 ff ff       	call   c010a6f4 <file_testfd>
c010b652:	85 c0                	test   %eax,%eax
c010b654:	75 0a                	jne    c010b660 <sysfile_read+0x4a>
        return -E_INVAL;
c010b656:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010b65b:	e9 2c 01 00 00       	jmp    c010b78c <sysfile_read+0x176>
    }
    void *buffer;
    if ((buffer = kmalloc(IOBUF_SIZE)) == NULL) {
c010b660:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c010b667:	e8 73 96 ff ff       	call   c0104cdf <kmalloc>
c010b66c:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b66f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010b673:	75 0a                	jne    c010b67f <sysfile_read+0x69>
        return -E_NO_MEM;
c010b675:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010b67a:	e9 0d 01 00 00       	jmp    c010b78c <sysfile_read+0x176>
    }

    int ret = 0;
c010b67f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    size_t copied = 0, alen;
c010b686:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    while (len != 0) {
c010b68d:	e9 d7 00 00 00       	jmp    c010b769 <sysfile_read+0x153>
        if ((alen = IOBUF_SIZE) > len) {
c010b692:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
c010b699:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b69c:	3b 45 10             	cmp    0x10(%ebp),%eax
c010b69f:	76 06                	jbe    c010b6a7 <sysfile_read+0x91>
            alen = len;
c010b6a1:	8b 45 10             	mov    0x10(%ebp),%eax
c010b6a4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        }
        ret = file_read(fd, buffer, alen, &alen);
c010b6a7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b6aa:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c010b6ad:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010b6b1:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b6b5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b6b8:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b6bc:	8b 45 08             	mov    0x8(%ebp),%eax
c010b6bf:	89 04 24             	mov    %eax,(%esp)
c010b6c2:	e8 5f f2 ff ff       	call   c010a926 <file_read>
c010b6c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (alen != 0) {
c010b6ca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b6cd:	85 c0                	test   %eax,%eax
c010b6cf:	0f 84 87 00 00 00    	je     c010b75c <sysfile_read+0x146>
            lock_mm(mm);
c010b6d5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b6d8:	89 04 24             	mov    %eax,(%esp)
c010b6db:	e8 ea fd ff ff       	call   c010b4ca <lock_mm>
            {
                if (copy_to_user(mm, base, buffer, alen)) {
c010b6e0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b6e3:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b6e7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b6ea:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b6ee:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b6f1:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b6f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b6f8:	89 04 24             	mov    %eax,(%esp)
c010b6fb:	e8 73 cf ff ff       	call   c0108673 <copy_to_user>
c010b700:	85 c0                	test   %eax,%eax
c010b702:	74 40                	je     c010b744 <sysfile_read+0x12e>
                    assert(len >= alen);
c010b704:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b707:	39 45 10             	cmp    %eax,0x10(%ebp)
c010b70a:	73 24                	jae    c010b730 <sysfile_read+0x11a>
c010b70c:	c7 44 24 0c 8a 7f 11 	movl   $0xc0117f8a,0xc(%esp)
c010b713:	c0 
c010b714:	c7 44 24 08 96 7f 11 	movl   $0xc0117f96,0x8(%esp)
c010b71b:	c0 
c010b71c:	c7 44 24 04 55 00 00 	movl   $0x55,0x4(%esp)
c010b723:	00 
c010b724:	c7 04 24 ab 7f 11 c0 	movl   $0xc0117fab,(%esp)
c010b72b:	e8 98 57 ff ff       	call   c0100ec8 <__panic>
                    base += alen, len -= alen, copied += alen;
c010b730:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b733:	01 45 0c             	add    %eax,0xc(%ebp)
c010b736:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b739:	29 45 10             	sub    %eax,0x10(%ebp)
c010b73c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b73f:	01 45 f0             	add    %eax,-0x10(%ebp)
c010b742:	eb 0d                	jmp    c010b751 <sysfile_read+0x13b>
                }
                else if (ret == 0) {
c010b744:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b748:	75 07                	jne    c010b751 <sysfile_read+0x13b>
                    ret = -E_INVAL;
c010b74a:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
                }
            }
            unlock_mm(mm);
c010b751:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b754:	89 04 24             	mov    %eax,(%esp)
c010b757:	e8 a1 fd ff ff       	call   c010b4fd <unlock_mm>
        }
        if (ret != 0 || alen == 0) {
c010b75c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b760:	75 11                	jne    c010b773 <sysfile_read+0x15d>
c010b762:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b765:	85 c0                	test   %eax,%eax
c010b767:	74 0a                	je     c010b773 <sysfile_read+0x15d>
        return -E_NO_MEM;
    }

    int ret = 0;
    size_t copied = 0, alen;
    while (len != 0) {
c010b769:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b76d:	0f 85 1f ff ff ff    	jne    c010b692 <sysfile_read+0x7c>
            goto out;
        }
    }

out:
    kfree(buffer);
c010b773:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b776:	89 04 24             	mov    %eax,(%esp)
c010b779:	e8 7c 95 ff ff       	call   c0104cfa <kfree>
    if (copied != 0) {
c010b77e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b782:	74 05                	je     c010b789 <sysfile_read+0x173>
        return copied;
c010b784:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b787:	eb 03                	jmp    c010b78c <sysfile_read+0x176>
    }
    return ret;
c010b789:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b78c:	c9                   	leave  
c010b78d:	c3                   	ret    

c010b78e <sysfile_write>:

/* sysfile_write - write file */
int
sysfile_write(int fd, void *base, size_t len) {
c010b78e:	55                   	push   %ebp
c010b78f:	89 e5                	mov    %esp,%ebp
c010b791:	83 ec 48             	sub    $0x48,%esp
    struct mm_struct *mm = current->mm;
c010b794:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010b799:	8b 40 18             	mov    0x18(%eax),%eax
c010b79c:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (len == 0) {
c010b79f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b7a3:	75 0a                	jne    c010b7af <sysfile_write+0x21>
        return 0;
c010b7a5:	b8 00 00 00 00       	mov    $0x0,%eax
c010b7aa:	e9 57 01 00 00       	jmp    c010b906 <sysfile_write+0x178>
    }
    if (!file_testfd(fd, 0, 1)) {
c010b7af:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c010b7b6:	00 
c010b7b7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b7be:	00 
c010b7bf:	8b 45 08             	mov    0x8(%ebp),%eax
c010b7c2:	89 04 24             	mov    %eax,(%esp)
c010b7c5:	e8 2a ef ff ff       	call   c010a6f4 <file_testfd>
c010b7ca:	85 c0                	test   %eax,%eax
c010b7cc:	75 0a                	jne    c010b7d8 <sysfile_write+0x4a>
        return -E_INVAL;
c010b7ce:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010b7d3:	e9 2e 01 00 00       	jmp    c010b906 <sysfile_write+0x178>
    }
    void *buffer;
    if ((buffer = kmalloc(IOBUF_SIZE)) == NULL) {
c010b7d8:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c010b7df:	e8 fb 94 ff ff       	call   c0104cdf <kmalloc>
c010b7e4:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b7e7:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010b7eb:	75 0a                	jne    c010b7f7 <sysfile_write+0x69>
        return -E_NO_MEM;
c010b7ed:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010b7f2:	e9 0f 01 00 00       	jmp    c010b906 <sysfile_write+0x178>
    }

    int ret = 0;
c010b7f7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    size_t copied = 0, alen;
c010b7fe:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    while (len != 0) {
c010b805:	e9 d9 00 00 00       	jmp    c010b8e3 <sysfile_write+0x155>
        if ((alen = IOBUF_SIZE) > len) {
c010b80a:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
c010b811:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b814:	3b 45 10             	cmp    0x10(%ebp),%eax
c010b817:	76 06                	jbe    c010b81f <sysfile_write+0x91>
            alen = len;
c010b819:	8b 45 10             	mov    0x10(%ebp),%eax
c010b81c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        }
        lock_mm(mm);
c010b81f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b822:	89 04 24             	mov    %eax,(%esp)
c010b825:	e8 a0 fc ff ff       	call   c010b4ca <lock_mm>
        {
            if (!copy_from_user(mm, buffer, base, alen, 0)) {
c010b82a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b82d:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010b834:	00 
c010b835:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b839:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b83c:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b840:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b843:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b847:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b84a:	89 04 24             	mov    %eax,(%esp)
c010b84d:	e8 d0 cd ff ff       	call   c0108622 <copy_from_user>
c010b852:	85 c0                	test   %eax,%eax
c010b854:	75 07                	jne    c010b85d <sysfile_write+0xcf>
                ret = -E_INVAL;
c010b856:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
            }
        }
        unlock_mm(mm);
c010b85d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b860:	89 04 24             	mov    %eax,(%esp)
c010b863:	e8 95 fc ff ff       	call   c010b4fd <unlock_mm>
        if (ret == 0) {
c010b868:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b86c:	75 68                	jne    c010b8d6 <sysfile_write+0x148>
            ret = file_write(fd, buffer, alen, &alen);
c010b86e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b871:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c010b874:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010b878:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b87c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b87f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b883:	8b 45 08             	mov    0x8(%ebp),%eax
c010b886:	89 04 24             	mov    %eax,(%esp)
c010b889:	e8 d2 f1 ff ff       	call   c010aa60 <file_write>
c010b88e:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (alen != 0) {
c010b891:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b894:	85 c0                	test   %eax,%eax
c010b896:	74 3e                	je     c010b8d6 <sysfile_write+0x148>
                assert(len >= alen);
c010b898:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b89b:	39 45 10             	cmp    %eax,0x10(%ebp)
c010b89e:	73 24                	jae    c010b8c4 <sysfile_write+0x136>
c010b8a0:	c7 44 24 0c 8a 7f 11 	movl   $0xc0117f8a,0xc(%esp)
c010b8a7:	c0 
c010b8a8:	c7 44 24 08 96 7f 11 	movl   $0xc0117f96,0x8(%esp)
c010b8af:	c0 
c010b8b0:	c7 44 24 04 8a 00 00 	movl   $0x8a,0x4(%esp)
c010b8b7:	00 
c010b8b8:	c7 04 24 ab 7f 11 c0 	movl   $0xc0117fab,(%esp)
c010b8bf:	e8 04 56 ff ff       	call   c0100ec8 <__panic>
                base += alen, len -= alen, copied += alen;
c010b8c4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b8c7:	01 45 0c             	add    %eax,0xc(%ebp)
c010b8ca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b8cd:	29 45 10             	sub    %eax,0x10(%ebp)
c010b8d0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b8d3:	01 45 f0             	add    %eax,-0x10(%ebp)
            }
        }
        if (ret != 0 || alen == 0) {
c010b8d6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b8da:	75 11                	jne    c010b8ed <sysfile_write+0x15f>
c010b8dc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b8df:	85 c0                	test   %eax,%eax
c010b8e1:	74 0a                	je     c010b8ed <sysfile_write+0x15f>
        return -E_NO_MEM;
    }

    int ret = 0;
    size_t copied = 0, alen;
    while (len != 0) {
c010b8e3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b8e7:	0f 85 1d ff ff ff    	jne    c010b80a <sysfile_write+0x7c>
            goto out;
        }
    }

out:
    kfree(buffer);
c010b8ed:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b8f0:	89 04 24             	mov    %eax,(%esp)
c010b8f3:	e8 02 94 ff ff       	call   c0104cfa <kfree>
    if (copied != 0) {
c010b8f8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b8fc:	74 05                	je     c010b903 <sysfile_write+0x175>
        return copied;
c010b8fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b901:	eb 03                	jmp    c010b906 <sysfile_write+0x178>
    }
    return ret;
c010b903:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b906:	c9                   	leave  
c010b907:	c3                   	ret    

c010b908 <sysfile_seek>:

/* sysfile_seek - seek file */
int
sysfile_seek(int fd, off_t pos, int whence) {
c010b908:	55                   	push   %ebp
c010b909:	89 e5                	mov    %esp,%ebp
c010b90b:	83 ec 18             	sub    $0x18,%esp
    return file_seek(fd, pos, whence);
c010b90e:	8b 45 10             	mov    0x10(%ebp),%eax
c010b911:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b915:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b918:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b91c:	8b 45 08             	mov    0x8(%ebp),%eax
c010b91f:	89 04 24             	mov    %eax,(%esp)
c010b922:	e8 73 f2 ff ff       	call   c010ab9a <file_seek>
}
c010b927:	c9                   	leave  
c010b928:	c3                   	ret    

c010b929 <sysfile_fstat>:

/* sysfile_fstat - stat file */
int
sysfile_fstat(int fd, struct stat *__stat) {
c010b929:	55                   	push   %ebp
c010b92a:	89 e5                	mov    %esp,%ebp
c010b92c:	83 ec 38             	sub    $0x38,%esp
    struct mm_struct *mm = current->mm;
c010b92f:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010b934:	8b 40 18             	mov    0x18(%eax),%eax
c010b937:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int ret;
    struct stat __local_stat, *stat = &__local_stat;
c010b93a:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010b93d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if ((ret = file_fstat(fd, stat)) != 0) {
c010b940:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b943:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b947:	8b 45 08             	mov    0x8(%ebp),%eax
c010b94a:	89 04 24             	mov    %eax,(%esp)
c010b94d:	e8 eb f3 ff ff       	call   c010ad3d <file_fstat>
c010b952:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b955:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b959:	74 05                	je     c010b960 <sysfile_fstat+0x37>
        return ret;
c010b95b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b95e:	eb 45                	jmp    c010b9a5 <sysfile_fstat+0x7c>
    }

    lock_mm(mm);
c010b960:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b963:	89 04 24             	mov    %eax,(%esp)
c010b966:	e8 5f fb ff ff       	call   c010b4ca <lock_mm>
    {
        if (!copy_to_user(mm, __stat, stat, sizeof(struct stat))) {
c010b96b:	c7 44 24 0c 10 00 00 	movl   $0x10,0xc(%esp)
c010b972:	00 
c010b973:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b976:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b97a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b97d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b981:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b984:	89 04 24             	mov    %eax,(%esp)
c010b987:	e8 e7 cc ff ff       	call   c0108673 <copy_to_user>
c010b98c:	85 c0                	test   %eax,%eax
c010b98e:	75 07                	jne    c010b997 <sysfile_fstat+0x6e>
            ret = -E_INVAL;
c010b990:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
        }
    }
    unlock_mm(mm);
c010b997:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b99a:	89 04 24             	mov    %eax,(%esp)
c010b99d:	e8 5b fb ff ff       	call   c010b4fd <unlock_mm>
    return ret;
c010b9a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b9a5:	c9                   	leave  
c010b9a6:	c3                   	ret    

c010b9a7 <sysfile_fsync>:

/* sysfile_fsync - sync file */
int
sysfile_fsync(int fd) {
c010b9a7:	55                   	push   %ebp
c010b9a8:	89 e5                	mov    %esp,%ebp
c010b9aa:	83 ec 18             	sub    $0x18,%esp
    return file_fsync(fd);
c010b9ad:	8b 45 08             	mov    0x8(%ebp),%eax
c010b9b0:	89 04 24             	mov    %eax,(%esp)
c010b9b3:	e8 44 f4 ff ff       	call   c010adfc <file_fsync>
}
c010b9b8:	c9                   	leave  
c010b9b9:	c3                   	ret    

c010b9ba <sysfile_chdir>:

/* sysfile_chdir - change dir */
int
sysfile_chdir(const char *__path) {
c010b9ba:	55                   	push   %ebp
c010b9bb:	89 e5                	mov    %esp,%ebp
c010b9bd:	83 ec 28             	sub    $0x28,%esp
    int ret;
    char *path;
    if ((ret = copy_path(&path, __path)) != 0) {
c010b9c0:	8b 45 08             	mov    0x8(%ebp),%eax
c010b9c3:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b9c7:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010b9ca:	89 04 24             	mov    %eax,(%esp)
c010b9cd:	e8 51 fb ff ff       	call   c010b523 <copy_path>
c010b9d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b9d5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b9d9:	74 05                	je     c010b9e0 <sysfile_chdir+0x26>
        return ret;
c010b9db:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b9de:	eb 1c                	jmp    c010b9fc <sysfile_chdir+0x42>
    }
    ret = vfs_chdir(path);
c010b9e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b9e3:	89 04 24             	mov    %eax,(%esp)
c010b9e6:	e8 81 4b 00 00       	call   c011056c <vfs_chdir>
c010b9eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(path);
c010b9ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b9f1:	89 04 24             	mov    %eax,(%esp)
c010b9f4:	e8 01 93 ff ff       	call   c0104cfa <kfree>
    return ret;
c010b9f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b9fc:	c9                   	leave  
c010b9fd:	c3                   	ret    

c010b9fe <sysfile_link>:

/* sysfile_link - link file */
int
sysfile_link(const char *__path1, const char *__path2) {
c010b9fe:	55                   	push   %ebp
c010b9ff:	89 e5                	mov    %esp,%ebp
c010ba01:	83 ec 28             	sub    $0x28,%esp
    int ret;
    char *old_path, *new_path;
    if ((ret = copy_path(&old_path, __path1)) != 0) {
c010ba04:	8b 45 08             	mov    0x8(%ebp),%eax
c010ba07:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ba0b:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010ba0e:	89 04 24             	mov    %eax,(%esp)
c010ba11:	e8 0d fb ff ff       	call   c010b523 <copy_path>
c010ba16:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ba19:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ba1d:	74 05                	je     c010ba24 <sysfile_link+0x26>
        return ret;
c010ba1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba22:	eb 59                	jmp    c010ba7d <sysfile_link+0x7f>
    }
    if ((ret = copy_path(&new_path, __path2)) != 0) {
c010ba24:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ba27:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ba2b:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010ba2e:	89 04 24             	mov    %eax,(%esp)
c010ba31:	e8 ed fa ff ff       	call   c010b523 <copy_path>
c010ba36:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ba39:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ba3d:	74 10                	je     c010ba4f <sysfile_link+0x51>
        kfree(old_path);
c010ba3f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ba42:	89 04 24             	mov    %eax,(%esp)
c010ba45:	e8 b0 92 ff ff       	call   c0104cfa <kfree>
        return ret;
c010ba4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba4d:	eb 2e                	jmp    c010ba7d <sysfile_link+0x7f>
    }
    ret = vfs_link(old_path, new_path);
c010ba4f:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010ba52:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ba55:	89 54 24 04          	mov    %edx,0x4(%esp)
c010ba59:	89 04 24             	mov    %eax,(%esp)
c010ba5c:	e8 8c 46 00 00       	call   c01100ed <vfs_link>
c010ba61:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(old_path), kfree(new_path);
c010ba64:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ba67:	89 04 24             	mov    %eax,(%esp)
c010ba6a:	e8 8b 92 ff ff       	call   c0104cfa <kfree>
c010ba6f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ba72:	89 04 24             	mov    %eax,(%esp)
c010ba75:	e8 80 92 ff ff       	call   c0104cfa <kfree>
    return ret;
c010ba7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010ba7d:	c9                   	leave  
c010ba7e:	c3                   	ret    

c010ba7f <sysfile_rename>:

/* sysfile_rename - rename file */
int
sysfile_rename(const char *__path1, const char *__path2) {
c010ba7f:	55                   	push   %ebp
c010ba80:	89 e5                	mov    %esp,%ebp
c010ba82:	83 ec 28             	sub    $0x28,%esp
    int ret;
    char *old_path, *new_path;
    if ((ret = copy_path(&old_path, __path1)) != 0) {
c010ba85:	8b 45 08             	mov    0x8(%ebp),%eax
c010ba88:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ba8c:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010ba8f:	89 04 24             	mov    %eax,(%esp)
c010ba92:	e8 8c fa ff ff       	call   c010b523 <copy_path>
c010ba97:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ba9a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ba9e:	74 05                	je     c010baa5 <sysfile_rename+0x26>
        return ret;
c010baa0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010baa3:	eb 59                	jmp    c010bafe <sysfile_rename+0x7f>
    }
    if ((ret = copy_path(&new_path, __path2)) != 0) {
c010baa5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010baa8:	89 44 24 04          	mov    %eax,0x4(%esp)
c010baac:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010baaf:	89 04 24             	mov    %eax,(%esp)
c010bab2:	e8 6c fa ff ff       	call   c010b523 <copy_path>
c010bab7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010baba:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010babe:	74 10                	je     c010bad0 <sysfile_rename+0x51>
        kfree(old_path);
c010bac0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bac3:	89 04 24             	mov    %eax,(%esp)
c010bac6:	e8 2f 92 ff ff       	call   c0104cfa <kfree>
        return ret;
c010bacb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bace:	eb 2e                	jmp    c010bafe <sysfile_rename+0x7f>
    }
    ret = vfs_rename(old_path, new_path);
c010bad0:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010bad3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bad6:	89 54 24 04          	mov    %edx,0x4(%esp)
c010bada:	89 04 24             	mov    %eax,(%esp)
c010badd:	e8 01 46 00 00       	call   c01100e3 <vfs_rename>
c010bae2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(old_path), kfree(new_path);
c010bae5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bae8:	89 04 24             	mov    %eax,(%esp)
c010baeb:	e8 0a 92 ff ff       	call   c0104cfa <kfree>
c010baf0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010baf3:	89 04 24             	mov    %eax,(%esp)
c010baf6:	e8 ff 91 ff ff       	call   c0104cfa <kfree>
    return ret;
c010bafb:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010bafe:	c9                   	leave  
c010baff:	c3                   	ret    

c010bb00 <sysfile_unlink>:

/* sysfile_unlink - unlink file */
int
sysfile_unlink(const char *__path) {
c010bb00:	55                   	push   %ebp
c010bb01:	89 e5                	mov    %esp,%ebp
c010bb03:	83 ec 28             	sub    $0x28,%esp
    int ret;
    char *path;
    if ((ret = copy_path(&path, __path)) != 0) {
c010bb06:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb09:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bb0d:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010bb10:	89 04 24             	mov    %eax,(%esp)
c010bb13:	e8 0b fa ff ff       	call   c010b523 <copy_path>
c010bb18:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bb1b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bb1f:	74 05                	je     c010bb26 <sysfile_unlink+0x26>
        return ret;
c010bb21:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bb24:	eb 1c                	jmp    c010bb42 <sysfile_unlink+0x42>
    }
    ret = vfs_unlink(path);
c010bb26:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bb29:	89 04 24             	mov    %eax,(%esp)
c010bb2c:	e8 a8 45 00 00       	call   c01100d9 <vfs_unlink>
c010bb31:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(path);
c010bb34:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bb37:	89 04 24             	mov    %eax,(%esp)
c010bb3a:	e8 bb 91 ff ff       	call   c0104cfa <kfree>
    return ret;
c010bb3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010bb42:	c9                   	leave  
c010bb43:	c3                   	ret    

c010bb44 <sysfile_getcwd>:

/* sysfile_get cwd - get current working directory */
int
sysfile_getcwd(char *buf, size_t len) {
c010bb44:	55                   	push   %ebp
c010bb45:	89 e5                	mov    %esp,%ebp
c010bb47:	83 ec 38             	sub    $0x38,%esp
    struct mm_struct *mm = current->mm;
c010bb4a:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010bb4f:	8b 40 18             	mov    0x18(%eax),%eax
c010bb52:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (len == 0) {
c010bb55:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010bb59:	75 07                	jne    c010bb62 <sysfile_getcwd+0x1e>
        return -E_INVAL;
c010bb5b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010bb60:	eb 77                	jmp    c010bbd9 <sysfile_getcwd+0x95>
    }

    int ret = -E_INVAL;
c010bb62:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    lock_mm(mm);
c010bb69:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bb6c:	89 04 24             	mov    %eax,(%esp)
c010bb6f:	e8 56 f9 ff ff       	call   c010b4ca <lock_mm>
    {
        if (user_mem_check(mm, (uintptr_t)buf, len, 1)) {
c010bb74:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb77:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010bb7e:	00 
c010bb7f:	8b 55 0c             	mov    0xc(%ebp),%edx
c010bb82:	89 54 24 08          	mov    %edx,0x8(%esp)
c010bb86:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bb8a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bb8d:	89 04 24             	mov    %eax,(%esp)
c010bb90:	e8 8f d4 ff ff       	call   c0109024 <user_mem_check>
c010bb95:	85 c0                	test   %eax,%eax
c010bb97:	74 32                	je     c010bbcb <sysfile_getcwd+0x87>
            struct iobuf __iob, *iob = iobuf_init(&__iob, buf, len, 0);
c010bb99:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010bba0:	00 
c010bba1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bba4:	89 44 24 08          	mov    %eax,0x8(%esp)
c010bba8:	8b 45 08             	mov    0x8(%ebp),%eax
c010bbab:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bbaf:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010bbb2:	89 04 24             	mov    %eax,(%esp)
c010bbb5:	e8 61 f7 ff ff       	call   c010b31b <iobuf_init>
c010bbba:	89 45 ec             	mov    %eax,-0x14(%ebp)
            ret = vfs_getcwd(iob);
c010bbbd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bbc0:	89 04 24             	mov    %eax,(%esp)
c010bbc3:	e8 e3 49 00 00       	call   c01105ab <vfs_getcwd>
c010bbc8:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
    }
    unlock_mm(mm);
c010bbcb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bbce:	89 04 24             	mov    %eax,(%esp)
c010bbd1:	e8 27 f9 ff ff       	call   c010b4fd <unlock_mm>
    return ret;
c010bbd6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010bbd9:	c9                   	leave  
c010bbda:	c3                   	ret    

c010bbdb <sysfile_getdirentry>:

/* sysfile_getdirentry - get the file entry in DIR */
int
sysfile_getdirentry(int fd, struct dirent *__direntp) {
c010bbdb:	55                   	push   %ebp
c010bbdc:	89 e5                	mov    %esp,%ebp
c010bbde:	83 ec 38             	sub    $0x38,%esp
    struct mm_struct *mm = current->mm;
c010bbe1:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010bbe6:	8b 40 18             	mov    0x18(%eax),%eax
c010bbe9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct dirent *direntp;
    if ((direntp = kmalloc(sizeof(struct dirent))) == NULL) {
c010bbec:	c7 04 24 04 01 00 00 	movl   $0x104,(%esp)
c010bbf3:	e8 e7 90 ff ff       	call   c0104cdf <kmalloc>
c010bbf8:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010bbfb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010bbff:	75 0a                	jne    c010bc0b <sysfile_getdirentry+0x30>
        return -E_NO_MEM;
c010bc01:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010bc06:	e9 c2 00 00 00       	jmp    c010bccd <sysfile_getdirentry+0xf2>
    }

    int ret = 0;
c010bc0b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    lock_mm(mm);
c010bc12:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bc15:	89 04 24             	mov    %eax,(%esp)
c010bc18:	e8 ad f8 ff ff       	call   c010b4ca <lock_mm>
    {
        if (!copy_from_user(mm, &(direntp->offset), &(__direntp->offset), sizeof(direntp->offset), 1)) {
c010bc1d:	8b 55 0c             	mov    0xc(%ebp),%edx
c010bc20:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bc23:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c010bc2a:	00 
c010bc2b:	c7 44 24 0c 04 00 00 	movl   $0x4,0xc(%esp)
c010bc32:	00 
c010bc33:	89 54 24 08          	mov    %edx,0x8(%esp)
c010bc37:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bc3b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bc3e:	89 04 24             	mov    %eax,(%esp)
c010bc41:	e8 dc c9 ff ff       	call   c0108622 <copy_from_user>
c010bc46:	85 c0                	test   %eax,%eax
c010bc48:	75 07                	jne    c010bc51 <sysfile_getdirentry+0x76>
            ret = -E_INVAL;
c010bc4a:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
        }
    }
    unlock_mm(mm);
c010bc51:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bc54:	89 04 24             	mov    %eax,(%esp)
c010bc57:	e8 a1 f8 ff ff       	call   c010b4fd <unlock_mm>

    if (ret != 0 || (ret = file_getdirentry(fd, direntp)) != 0) {
c010bc5c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bc60:	75 5d                	jne    c010bcbf <sysfile_getdirentry+0xe4>
c010bc62:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bc65:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bc69:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc6c:	89 04 24             	mov    %eax,(%esp)
c010bc6f:	e8 40 f2 ff ff       	call   c010aeb4 <file_getdirentry>
c010bc74:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bc77:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bc7b:	75 42                	jne    c010bcbf <sysfile_getdirentry+0xe4>
        goto out;
    }

    lock_mm(mm);
c010bc7d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bc80:	89 04 24             	mov    %eax,(%esp)
c010bc83:	e8 42 f8 ff ff       	call   c010b4ca <lock_mm>
    {
        if (!copy_to_user(mm, __direntp, direntp, sizeof(struct dirent))) {
c010bc88:	c7 44 24 0c 04 01 00 	movl   $0x104,0xc(%esp)
c010bc8f:	00 
c010bc90:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bc93:	89 44 24 08          	mov    %eax,0x8(%esp)
c010bc97:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bc9a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bc9e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bca1:	89 04 24             	mov    %eax,(%esp)
c010bca4:	e8 ca c9 ff ff       	call   c0108673 <copy_to_user>
c010bca9:	85 c0                	test   %eax,%eax
c010bcab:	75 07                	jne    c010bcb4 <sysfile_getdirentry+0xd9>
            ret = -E_INVAL;
c010bcad:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
        }
    }
    unlock_mm(mm);
c010bcb4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bcb7:	89 04 24             	mov    %eax,(%esp)
c010bcba:	e8 3e f8 ff ff       	call   c010b4fd <unlock_mm>

out:
    kfree(direntp);
c010bcbf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bcc2:	89 04 24             	mov    %eax,(%esp)
c010bcc5:	e8 30 90 ff ff       	call   c0104cfa <kfree>
    return ret;
c010bcca:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010bccd:	c9                   	leave  
c010bcce:	c3                   	ret    

c010bccf <sysfile_dup>:

/* sysfile_dup -  duplicate fd1 to fd2 */
int
sysfile_dup(int fd1, int fd2) {
c010bccf:	55                   	push   %ebp
c010bcd0:	89 e5                	mov    %esp,%ebp
c010bcd2:	83 ec 18             	sub    $0x18,%esp
    return file_dup(fd1, fd2);
c010bcd5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bcd8:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bcdc:	8b 45 08             	mov    0x8(%ebp),%eax
c010bcdf:	89 04 24             	mov    %eax,(%esp)
c010bce2:	e8 db f2 ff ff       	call   c010afc2 <file_dup>
}
c010bce7:	c9                   	leave  
c010bce8:	c3                   	ret    

c010bce9 <sysfile_pipe>:

int
sysfile_pipe(int *fd_store) {
c010bce9:	55                   	push   %ebp
c010bcea:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010bcec:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010bcf1:	5d                   	pop    %ebp
c010bcf2:	c3                   	ret    

c010bcf3 <sysfile_mkfifo>:

int
sysfile_mkfifo(const char *__name, uint32_t open_flags) {
c010bcf3:	55                   	push   %ebp
c010bcf4:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010bcf6:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010bcfb:	5d                   	pop    %ebp
c010bcfc:	c3                   	ret    

c010bcfd <kernel_thread_entry>:
.text
.globl kernel_thread_entry
kernel_thread_entry:        # void kernel_thread(void)

    pushl %edx              # push arg
c010bcfd:	52                   	push   %edx
    call *%ebx              # call fn
c010bcfe:	ff d3                	call   *%ebx

    pushl %eax              # save the return value of fn(arg)
c010bd00:	50                   	push   %eax
    call do_exit            # call do_exit to terminate current thread
c010bd01:	e8 2e 0e 00 00       	call   c010cb34 <do_exit>

c010bd06 <timer_init>:

#define le2timer(le, member)            \
to_struct((le), timer_t, member)

static inline timer_t *
timer_init(timer_t *timer, struct proc_struct *proc, int expires) {
c010bd06:	55                   	push   %ebp
c010bd07:	89 e5                	mov    %esp,%ebp
c010bd09:	83 ec 10             	sub    $0x10,%esp
    timer->expires = expires;
c010bd0c:	8b 55 10             	mov    0x10(%ebp),%edx
c010bd0f:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd12:	89 10                	mov    %edx,(%eax)
    timer->proc = proc;
c010bd14:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd17:	8b 55 0c             	mov    0xc(%ebp),%edx
c010bd1a:	89 50 04             	mov    %edx,0x4(%eax)
    list_init(&(timer->timer_link));
c010bd1d:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd20:	83 c0 08             	add    $0x8,%eax
c010bd23:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010bd26:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010bd29:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010bd2c:	89 50 04             	mov    %edx,0x4(%eax)
c010bd2f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010bd32:	8b 50 04             	mov    0x4(%eax),%edx
c010bd35:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010bd38:	89 10                	mov    %edx,(%eax)
    return timer;
c010bd3a:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010bd3d:	c9                   	leave  
c010bd3e:	c3                   	ret    

c010bd3f <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010bd3f:	55                   	push   %ebp
c010bd40:	89 e5                	mov    %esp,%ebp
c010bd42:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010bd45:	9c                   	pushf  
c010bd46:	58                   	pop    %eax
c010bd47:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010bd4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010bd4d:	25 00 02 00 00       	and    $0x200,%eax
c010bd52:	85 c0                	test   %eax,%eax
c010bd54:	74 0c                	je     c010bd62 <__intr_save+0x23>
        intr_disable();
c010bd56:	e8 cf 63 ff ff       	call   c010212a <intr_disable>
        return 1;
c010bd5b:	b8 01 00 00 00       	mov    $0x1,%eax
c010bd60:	eb 05                	jmp    c010bd67 <__intr_save+0x28>
    }
    return 0;
c010bd62:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010bd67:	c9                   	leave  
c010bd68:	c3                   	ret    

c010bd69 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010bd69:	55                   	push   %ebp
c010bd6a:	89 e5                	mov    %esp,%ebp
c010bd6c:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010bd6f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010bd73:	74 05                	je     c010bd7a <__intr_restore+0x11>
        intr_enable();
c010bd75:	e8 aa 63 ff ff       	call   c0102124 <intr_enable>
    }
}
c010bd7a:	c9                   	leave  
c010bd7b:	c3                   	ret    

c010bd7c <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010bd7c:	55                   	push   %ebp
c010bd7d:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010bd7f:	8b 55 08             	mov    0x8(%ebp),%edx
c010bd82:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010bd87:	29 c2                	sub    %eax,%edx
c010bd89:	89 d0                	mov    %edx,%eax
c010bd8b:	c1 f8 02             	sar    $0x2,%eax
c010bd8e:	69 c0 39 8e e3 38    	imul   $0x38e38e39,%eax,%eax
}
c010bd94:	5d                   	pop    %ebp
c010bd95:	c3                   	ret    

c010bd96 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010bd96:	55                   	push   %ebp
c010bd97:	89 e5                	mov    %esp,%ebp
c010bd99:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c010bd9c:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd9f:	89 04 24             	mov    %eax,(%esp)
c010bda2:	e8 d5 ff ff ff       	call   c010bd7c <page2ppn>
c010bda7:	c1 e0 0c             	shl    $0xc,%eax
}
c010bdaa:	c9                   	leave  
c010bdab:	c3                   	ret    

c010bdac <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c010bdac:	55                   	push   %ebp
c010bdad:	89 e5                	mov    %esp,%ebp
c010bdaf:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c010bdb2:	8b 45 08             	mov    0x8(%ebp),%eax
c010bdb5:	c1 e8 0c             	shr    $0xc,%eax
c010bdb8:	89 c2                	mov    %eax,%edx
c010bdba:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c010bdbf:	39 c2                	cmp    %eax,%edx
c010bdc1:	72 1c                	jb     c010bddf <pa2page+0x33>
        panic("pa2page called with invalid pa");
c010bdc3:	c7 44 24 08 c0 7f 11 	movl   $0xc0117fc0,0x8(%esp)
c010bdca:	c0 
c010bdcb:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c010bdd2:	00 
c010bdd3:	c7 04 24 df 7f 11 c0 	movl   $0xc0117fdf,(%esp)
c010bdda:	e8 e9 50 ff ff       	call   c0100ec8 <__panic>
    }
    return &pages[PPN(pa)];
c010bddf:	8b 0d 28 30 15 c0    	mov    0xc0153028,%ecx
c010bde5:	8b 45 08             	mov    0x8(%ebp),%eax
c010bde8:	c1 e8 0c             	shr    $0xc,%eax
c010bdeb:	89 c2                	mov    %eax,%edx
c010bded:	89 d0                	mov    %edx,%eax
c010bdef:	c1 e0 03             	shl    $0x3,%eax
c010bdf2:	01 d0                	add    %edx,%eax
c010bdf4:	c1 e0 02             	shl    $0x2,%eax
c010bdf7:	01 c8                	add    %ecx,%eax
}
c010bdf9:	c9                   	leave  
c010bdfa:	c3                   	ret    

c010bdfb <page2kva>:

static inline void *
page2kva(struct Page *page) {
c010bdfb:	55                   	push   %ebp
c010bdfc:	89 e5                	mov    %esp,%ebp
c010bdfe:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c010be01:	8b 45 08             	mov    0x8(%ebp),%eax
c010be04:	89 04 24             	mov    %eax,(%esp)
c010be07:	e8 8a ff ff ff       	call   c010bd96 <page2pa>
c010be0c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010be0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010be12:	c1 e8 0c             	shr    $0xc,%eax
c010be15:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010be18:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c010be1d:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010be20:	72 23                	jb     c010be45 <page2kva+0x4a>
c010be22:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010be25:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010be29:	c7 44 24 08 f0 7f 11 	movl   $0xc0117ff0,0x8(%esp)
c010be30:	c0 
c010be31:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c010be38:	00 
c010be39:	c7 04 24 df 7f 11 c0 	movl   $0xc0117fdf,(%esp)
c010be40:	e8 83 50 ff ff       	call   c0100ec8 <__panic>
c010be45:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010be48:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010be4d:	c9                   	leave  
c010be4e:	c3                   	ret    

c010be4f <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c010be4f:	55                   	push   %ebp
c010be50:	89 e5                	mov    %esp,%ebp
c010be52:	83 ec 28             	sub    $0x28,%esp
    return pa2page(PADDR(kva));
c010be55:	8b 45 08             	mov    0x8(%ebp),%eax
c010be58:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010be5b:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c010be62:	77 23                	ja     c010be87 <kva2page+0x38>
c010be64:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010be67:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010be6b:	c7 44 24 08 14 80 11 	movl   $0xc0118014,0x8(%esp)
c010be72:	c0 
c010be73:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c010be7a:	00 
c010be7b:	c7 04 24 df 7f 11 c0 	movl   $0xc0117fdf,(%esp)
c010be82:	e8 41 50 ff ff       	call   c0100ec8 <__panic>
c010be87:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010be8a:	05 00 00 00 40       	add    $0x40000000,%eax
c010be8f:	89 04 24             	mov    %eax,(%esp)
c010be92:	e8 15 ff ff ff       	call   c010bdac <pa2page>
}
c010be97:	c9                   	leave  
c010be98:	c3                   	ret    

c010be99 <mm_count_inc>:
set_mm_count(struct mm_struct *mm, int val) {
    mm->mm_count = val;
}

static inline int
mm_count_inc(struct mm_struct *mm) {
c010be99:	55                   	push   %ebp
c010be9a:	89 e5                	mov    %esp,%ebp
    mm->mm_count += 1;
c010be9c:	8b 45 08             	mov    0x8(%ebp),%eax
c010be9f:	8b 40 18             	mov    0x18(%eax),%eax
c010bea2:	8d 50 01             	lea    0x1(%eax),%edx
c010bea5:	8b 45 08             	mov    0x8(%ebp),%eax
c010bea8:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c010beab:	8b 45 08             	mov    0x8(%ebp),%eax
c010beae:	8b 40 18             	mov    0x18(%eax),%eax
}
c010beb1:	5d                   	pop    %ebp
c010beb2:	c3                   	ret    

c010beb3 <mm_count_dec>:

static inline int
mm_count_dec(struct mm_struct *mm) {
c010beb3:	55                   	push   %ebp
c010beb4:	89 e5                	mov    %esp,%ebp
    mm->mm_count -= 1;
c010beb6:	8b 45 08             	mov    0x8(%ebp),%eax
c010beb9:	8b 40 18             	mov    0x18(%eax),%eax
c010bebc:	8d 50 ff             	lea    -0x1(%eax),%edx
c010bebf:	8b 45 08             	mov    0x8(%ebp),%eax
c010bec2:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c010bec5:	8b 45 08             	mov    0x8(%ebp),%eax
c010bec8:	8b 40 18             	mov    0x18(%eax),%eax
}
c010becb:	5d                   	pop    %ebp
c010becc:	c3                   	ret    

c010becd <lock_mm>:

static inline void
lock_mm(struct mm_struct *mm) {
c010becd:	55                   	push   %ebp
c010bece:	89 e5                	mov    %esp,%ebp
c010bed0:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010bed3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010bed7:	74 25                	je     c010befe <lock_mm+0x31>
        down(&(mm->mm_sem));
c010bed9:	8b 45 08             	mov    0x8(%ebp),%eax
c010bedc:	83 c0 1c             	add    $0x1c,%eax
c010bedf:	89 04 24             	mov    %eax,(%esp)
c010bee2:	e8 ed dd ff ff       	call   c0109cd4 <down>
        if (current != NULL) {
c010bee7:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010beec:	85 c0                	test   %eax,%eax
c010beee:	74 0e                	je     c010befe <lock_mm+0x31>
            mm->locked_by = current->pid;
c010bef0:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010bef5:	8b 50 04             	mov    0x4(%eax),%edx
c010bef8:	8b 45 08             	mov    0x8(%ebp),%eax
c010befb:	89 50 28             	mov    %edx,0x28(%eax)
        }
    }
}
c010befe:	c9                   	leave  
c010beff:	c3                   	ret    

c010bf00 <unlock_mm>:

static inline void
unlock_mm(struct mm_struct *mm) {
c010bf00:	55                   	push   %ebp
c010bf01:	89 e5                	mov    %esp,%ebp
c010bf03:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010bf06:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010bf0a:	74 18                	je     c010bf24 <unlock_mm+0x24>
        up(&(mm->mm_sem));
c010bf0c:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf0f:	83 c0 1c             	add    $0x1c,%eax
c010bf12:	89 04 24             	mov    %eax,(%esp)
c010bf15:	e8 9f dd ff ff       	call   c0109cb9 <up>
        mm->locked_by = 0;
c010bf1a:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf1d:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    }
}
c010bf24:	c9                   	leave  
c010bf25:	c3                   	ret    

c010bf26 <files_count_inc>:

static inline int
files_count_inc(struct files_struct *filesp) {
c010bf26:	55                   	push   %ebp
c010bf27:	89 e5                	mov    %esp,%ebp
    filesp->files_count += 1;
c010bf29:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf2c:	8b 40 08             	mov    0x8(%eax),%eax
c010bf2f:	8d 50 01             	lea    0x1(%eax),%edx
c010bf32:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf35:	89 50 08             	mov    %edx,0x8(%eax)
    return filesp->files_count;
c010bf38:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf3b:	8b 40 08             	mov    0x8(%eax),%eax
}
c010bf3e:	5d                   	pop    %ebp
c010bf3f:	c3                   	ret    

c010bf40 <files_count_dec>:

static inline int
files_count_dec(struct files_struct *filesp) {
c010bf40:	55                   	push   %ebp
c010bf41:	89 e5                	mov    %esp,%ebp
    filesp->files_count -= 1;
c010bf43:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf46:	8b 40 08             	mov    0x8(%eax),%eax
c010bf49:	8d 50 ff             	lea    -0x1(%eax),%edx
c010bf4c:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf4f:	89 50 08             	mov    %edx,0x8(%eax)
    return filesp->files_count;
c010bf52:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf55:	8b 40 08             	mov    0x8(%eax),%eax
}
c010bf58:	5d                   	pop    %ebp
c010bf59:	c3                   	ret    

c010bf5a <alloc_proc>:
void forkrets(struct trapframe *tf);
void switch_to(struct context *from, struct context *to);

// alloc_proc - alloc a proc_struct and init all fields of proc_struct
static struct proc_struct *
alloc_proc(void) {
c010bf5a:	55                   	push   %ebp
c010bf5b:	89 e5                	mov    %esp,%ebp
c010bf5d:	83 ec 28             	sub    $0x28,%esp
    struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
c010bf60:	c7 04 24 c8 00 00 00 	movl   $0xc8,(%esp)
c010bf67:	e8 73 8d ff ff       	call   c0104cdf <kmalloc>
c010bf6c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (proc != NULL) {
c010bf6f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bf73:	0f 84 70 01 00 00    	je     c010c0e9 <alloc_proc+0x18f>
     * below fields(add in LAB5) in proc_struct need to be initialized	
     *       uint32_t wait_state;                        // waiting state
     *       struct proc_struct *cptr, *yptr, *optr;     // relations between processes
	 */
    //LAB8:EXERCISE2 YOUR CODE HINT:need add some code to init fs in proc_struct, ...
        proc->state = PROC_UNINIT;
c010bf79:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf7c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        proc->pid = -1;
c010bf82:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf85:	c7 40 04 ff ff ff ff 	movl   $0xffffffff,0x4(%eax)
        proc->runs = 0;
c010bf8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf8f:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        proc->kstack = 0;
c010bf96:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf99:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        proc->need_resched = 0;
c010bfa0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bfa3:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        proc->parent = NULL;
c010bfaa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bfad:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        proc->mm = NULL;
c010bfb4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bfb7:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
        memset(&(proc->context), 0, sizeof(struct context));
c010bfbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bfc1:	83 c0 1c             	add    $0x1c,%eax
c010bfc4:	c7 44 24 08 20 00 00 	movl   $0x20,0x8(%esp)
c010bfcb:	00 
c010bfcc:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010bfd3:	00 
c010bfd4:	89 04 24             	mov    %eax,(%esp)
c010bfd7:	e8 69 95 00 00       	call   c0115545 <memset>
        proc->tf = NULL;
c010bfdc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bfdf:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%eax)
        proc->cr3 = boot_cr3;
c010bfe6:	8b 15 24 30 15 c0    	mov    0xc0153024,%edx
c010bfec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bfef:	89 50 40             	mov    %edx,0x40(%eax)
        proc->flags = 0;
c010bff2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bff5:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
        memset(proc->name, 0, PROC_NAME_LEN);
c010bffc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bfff:	83 c0 48             	add    $0x48,%eax
c010c002:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c010c009:	00 
c010c00a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c011:	00 
c010c012:	89 04 24             	mov    %eax,(%esp)
c010c015:	e8 2b 95 00 00       	call   c0115545 <memset>
        proc->wait_state = 0;
c010c01a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c01d:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%eax)
c010c024:	00 00 00 
        proc->cptr = proc->optr = proc->yptr = NULL;
c010c027:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c02a:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010c031:	00 00 00 
c010c034:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c037:	8b 90 98 00 00 00    	mov    0x98(%eax),%edx
c010c03d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c040:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010c046:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c049:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
c010c04f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c052:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
        proc->rq = NULL;
c010c058:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c05b:	c7 80 a0 00 00 00 00 	movl   $0x0,0xa0(%eax)
c010c062:	00 00 00 
        proc->run_link.prev = proc->run_link.next = NULL;
c010c065:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c068:	c7 80 a8 00 00 00 00 	movl   $0x0,0xa8(%eax)
c010c06f:	00 00 00 
c010c072:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c075:	8b 90 a8 00 00 00    	mov    0xa8(%eax),%edx
c010c07b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c07e:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
        proc->time_slice = 0;
c010c084:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c087:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
c010c08e:	00 00 00 
        proc->lab6_run_pool.left = proc->lab6_run_pool.right = proc->lab6_run_pool.parent = NULL;
c010c091:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c094:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
c010c09b:	00 00 00 
c010c09e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c0a1:	8b 90 b0 00 00 00    	mov    0xb0(%eax),%edx
c010c0a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c0aa:	89 90 b8 00 00 00    	mov    %edx,0xb8(%eax)
c010c0b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c0b3:	8b 90 b8 00 00 00    	mov    0xb8(%eax),%edx
c010c0b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c0bc:	89 90 b4 00 00 00    	mov    %edx,0xb4(%eax)
        proc->lab6_stride = 0;
c010c0c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c0c5:	c7 80 bc 00 00 00 00 	movl   $0x0,0xbc(%eax)
c010c0cc:	00 00 00 
        proc->lab6_priority = 0;
c010c0cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c0d2:	c7 80 c0 00 00 00 00 	movl   $0x0,0xc0(%eax)
c010c0d9:	00 00 00 
        proc->filesp = NULL;
c010c0dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c0df:	c7 80 c4 00 00 00 00 	movl   $0x0,0xc4(%eax)
c010c0e6:	00 00 00 
    }
    return proc;
c010c0e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010c0ec:	c9                   	leave  
c010c0ed:	c3                   	ret    

c010c0ee <set_proc_name>:

// set_proc_name - set the name of proc
char *
set_proc_name(struct proc_struct *proc, const char *name) {
c010c0ee:	55                   	push   %ebp
c010c0ef:	89 e5                	mov    %esp,%ebp
c010c0f1:	83 ec 18             	sub    $0x18,%esp
    memset(proc->name, 0, sizeof(proc->name));
c010c0f4:	8b 45 08             	mov    0x8(%ebp),%eax
c010c0f7:	83 c0 48             	add    $0x48,%eax
c010c0fa:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010c101:	00 
c010c102:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c109:	00 
c010c10a:	89 04 24             	mov    %eax,(%esp)
c010c10d:	e8 33 94 00 00       	call   c0115545 <memset>
    return memcpy(proc->name, name, PROC_NAME_LEN);
c010c112:	8b 45 08             	mov    0x8(%ebp),%eax
c010c115:	8d 50 48             	lea    0x48(%eax),%edx
c010c118:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c010c11f:	00 
c010c120:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c123:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c127:	89 14 24             	mov    %edx,(%esp)
c010c12a:	e8 f8 94 00 00       	call   c0115627 <memcpy>
}
c010c12f:	c9                   	leave  
c010c130:	c3                   	ret    

c010c131 <get_proc_name>:

// get_proc_name - get the name of proc
char *
get_proc_name(struct proc_struct *proc) {
c010c131:	55                   	push   %ebp
c010c132:	89 e5                	mov    %esp,%ebp
c010c134:	83 ec 18             	sub    $0x18,%esp
    static char name[PROC_NAME_LEN + 1];
    memset(name, 0, sizeof(name));
c010c137:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010c13e:	00 
c010c13f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c146:	00 
c010c147:	c7 04 24 60 1f 15 c0 	movl   $0xc0151f60,(%esp)
c010c14e:	e8 f2 93 00 00       	call   c0115545 <memset>
    return memcpy(name, proc->name, PROC_NAME_LEN);
c010c153:	8b 45 08             	mov    0x8(%ebp),%eax
c010c156:	83 c0 48             	add    $0x48,%eax
c010c159:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c010c160:	00 
c010c161:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c165:	c7 04 24 60 1f 15 c0 	movl   $0xc0151f60,(%esp)
c010c16c:	e8 b6 94 00 00       	call   c0115627 <memcpy>
}
c010c171:	c9                   	leave  
c010c172:	c3                   	ret    

c010c173 <set_links>:

// set_links - set the relation links of process
static void
set_links(struct proc_struct *proc) {
c010c173:	55                   	push   %ebp
c010c174:	89 e5                	mov    %esp,%ebp
c010c176:	83 ec 20             	sub    $0x20,%esp
    list_add(&proc_list, &(proc->list_link));
c010c179:	8b 45 08             	mov    0x8(%ebp),%eax
c010c17c:	83 c0 7c             	add    $0x7c,%eax
c010c17f:	c7 45 fc fc 31 15 c0 	movl   $0xc01531fc,-0x4(%ebp)
c010c186:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010c189:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c18c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c18f:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c192:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010c195:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c198:	8b 40 04             	mov    0x4(%eax),%eax
c010c19b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010c19e:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010c1a1:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c1a4:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010c1a7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010c1aa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c1ad:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c1b0:	89 10                	mov    %edx,(%eax)
c010c1b2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c1b5:	8b 10                	mov    (%eax),%edx
c010c1b7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c1ba:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010c1bd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c1c0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c1c3:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010c1c6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c1c9:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010c1cc:	89 10                	mov    %edx,(%eax)
    proc->yptr = NULL;
c010c1ce:	8b 45 08             	mov    0x8(%ebp),%eax
c010c1d1:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010c1d8:	00 00 00 
    if ((proc->optr = proc->parent->cptr) != NULL) {
c010c1db:	8b 45 08             	mov    0x8(%ebp),%eax
c010c1de:	8b 40 14             	mov    0x14(%eax),%eax
c010c1e1:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c010c1e7:	8b 45 08             	mov    0x8(%ebp),%eax
c010c1ea:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010c1f0:	8b 45 08             	mov    0x8(%ebp),%eax
c010c1f3:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010c1f9:	85 c0                	test   %eax,%eax
c010c1fb:	74 12                	je     c010c20f <set_links+0x9c>
        proc->optr->yptr = proc;
c010c1fd:	8b 45 08             	mov    0x8(%ebp),%eax
c010c200:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010c206:	8b 55 08             	mov    0x8(%ebp),%edx
c010c209:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    }
    proc->parent->cptr = proc;
c010c20f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c212:	8b 40 14             	mov    0x14(%eax),%eax
c010c215:	8b 55 08             	mov    0x8(%ebp),%edx
c010c218:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    nr_process ++;
c010c21e:	a1 40 1f 15 c0       	mov    0xc0151f40,%eax
c010c223:	83 c0 01             	add    $0x1,%eax
c010c226:	a3 40 1f 15 c0       	mov    %eax,0xc0151f40
}
c010c22b:	c9                   	leave  
c010c22c:	c3                   	ret    

c010c22d <remove_links>:

// remove_links - clean the relation links of process
static void
remove_links(struct proc_struct *proc) {
c010c22d:	55                   	push   %ebp
c010c22e:	89 e5                	mov    %esp,%ebp
c010c230:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->list_link));
c010c233:	8b 45 08             	mov    0x8(%ebp),%eax
c010c236:	83 c0 7c             	add    $0x7c,%eax
c010c239:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010c23c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c23f:	8b 40 04             	mov    0x4(%eax),%eax
c010c242:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010c245:	8b 12                	mov    (%edx),%edx
c010c247:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010c24a:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010c24d:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c250:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c253:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010c256:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c259:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010c25c:	89 10                	mov    %edx,(%eax)
    if (proc->optr != NULL) {
c010c25e:	8b 45 08             	mov    0x8(%ebp),%eax
c010c261:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010c267:	85 c0                	test   %eax,%eax
c010c269:	74 18                	je     c010c283 <remove_links+0x56>
        proc->optr->yptr = proc->yptr;
c010c26b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c26e:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010c274:	8b 55 08             	mov    0x8(%ebp),%edx
c010c277:	8b 92 98 00 00 00    	mov    0x98(%edx),%edx
c010c27d:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    }
    if (proc->yptr != NULL) {
c010c283:	8b 45 08             	mov    0x8(%ebp),%eax
c010c286:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010c28c:	85 c0                	test   %eax,%eax
c010c28e:	74 1a                	je     c010c2aa <remove_links+0x7d>
        proc->yptr->optr = proc->optr;
c010c290:	8b 45 08             	mov    0x8(%ebp),%eax
c010c293:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010c299:	8b 55 08             	mov    0x8(%ebp),%edx
c010c29c:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010c2a2:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010c2a8:	eb 15                	jmp    c010c2bf <remove_links+0x92>
    }
    else {
       proc->parent->cptr = proc->optr;
c010c2aa:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2ad:	8b 40 14             	mov    0x14(%eax),%eax
c010c2b0:	8b 55 08             	mov    0x8(%ebp),%edx
c010c2b3:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010c2b9:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    }
    nr_process --;
c010c2bf:	a1 40 1f 15 c0       	mov    0xc0151f40,%eax
c010c2c4:	83 e8 01             	sub    $0x1,%eax
c010c2c7:	a3 40 1f 15 c0       	mov    %eax,0xc0151f40
}
c010c2cc:	c9                   	leave  
c010c2cd:	c3                   	ret    

c010c2ce <get_pid>:

// get_pid - alloc a unique pid for process
static int
get_pid(void) {
c010c2ce:	55                   	push   %ebp
c010c2cf:	89 e5                	mov    %esp,%ebp
c010c2d1:	83 ec 10             	sub    $0x10,%esp
    static_assert(MAX_PID > MAX_PROCESS);
    struct proc_struct *proc;
    list_entry_t *list = &proc_list, *le;
c010c2d4:	c7 45 f8 fc 31 15 c0 	movl   $0xc01531fc,-0x8(%ebp)
    static int next_safe = MAX_PID, last_pid = MAX_PID;
    if (++ last_pid >= MAX_PID) {
c010c2db:	a1 84 ea 14 c0       	mov    0xc014ea84,%eax
c010c2e0:	83 c0 01             	add    $0x1,%eax
c010c2e3:	a3 84 ea 14 c0       	mov    %eax,0xc014ea84
c010c2e8:	a1 84 ea 14 c0       	mov    0xc014ea84,%eax
c010c2ed:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010c2f2:	7e 0c                	jle    c010c300 <get_pid+0x32>
        last_pid = 1;
c010c2f4:	c7 05 84 ea 14 c0 01 	movl   $0x1,0xc014ea84
c010c2fb:	00 00 00 
        goto inside;
c010c2fe:	eb 13                	jmp    c010c313 <get_pid+0x45>
    }
    if (last_pid >= next_safe) {
c010c300:	8b 15 84 ea 14 c0    	mov    0xc014ea84,%edx
c010c306:	a1 88 ea 14 c0       	mov    0xc014ea88,%eax
c010c30b:	39 c2                	cmp    %eax,%edx
c010c30d:	0f 8c ac 00 00 00    	jl     c010c3bf <get_pid+0xf1>
    inside:
        next_safe = MAX_PID;
c010c313:	c7 05 88 ea 14 c0 00 	movl   $0x2000,0xc014ea88
c010c31a:	20 00 00 
    repeat:
        le = list;
c010c31d:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c320:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while ((le = list_next(le)) != list) {
c010c323:	eb 7f                	jmp    c010c3a4 <get_pid+0xd6>
            proc = le2proc(le, list_link);
c010c325:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c328:	83 e8 7c             	sub    $0x7c,%eax
c010c32b:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (proc->pid == last_pid) {
c010c32e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c331:	8b 50 04             	mov    0x4(%eax),%edx
c010c334:	a1 84 ea 14 c0       	mov    0xc014ea84,%eax
c010c339:	39 c2                	cmp    %eax,%edx
c010c33b:	75 3e                	jne    c010c37b <get_pid+0xad>
                if (++ last_pid >= next_safe) {
c010c33d:	a1 84 ea 14 c0       	mov    0xc014ea84,%eax
c010c342:	83 c0 01             	add    $0x1,%eax
c010c345:	a3 84 ea 14 c0       	mov    %eax,0xc014ea84
c010c34a:	8b 15 84 ea 14 c0    	mov    0xc014ea84,%edx
c010c350:	a1 88 ea 14 c0       	mov    0xc014ea88,%eax
c010c355:	39 c2                	cmp    %eax,%edx
c010c357:	7c 4b                	jl     c010c3a4 <get_pid+0xd6>
                    if (last_pid >= MAX_PID) {
c010c359:	a1 84 ea 14 c0       	mov    0xc014ea84,%eax
c010c35e:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010c363:	7e 0a                	jle    c010c36f <get_pid+0xa1>
                        last_pid = 1;
c010c365:	c7 05 84 ea 14 c0 01 	movl   $0x1,0xc014ea84
c010c36c:	00 00 00 
                    }
                    next_safe = MAX_PID;
c010c36f:	c7 05 88 ea 14 c0 00 	movl   $0x2000,0xc014ea88
c010c376:	20 00 00 
                    goto repeat;
c010c379:	eb a2                	jmp    c010c31d <get_pid+0x4f>
                }
            }
            else if (proc->pid > last_pid && next_safe > proc->pid) {
c010c37b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c37e:	8b 50 04             	mov    0x4(%eax),%edx
c010c381:	a1 84 ea 14 c0       	mov    0xc014ea84,%eax
c010c386:	39 c2                	cmp    %eax,%edx
c010c388:	7e 1a                	jle    c010c3a4 <get_pid+0xd6>
c010c38a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c38d:	8b 50 04             	mov    0x4(%eax),%edx
c010c390:	a1 88 ea 14 c0       	mov    0xc014ea88,%eax
c010c395:	39 c2                	cmp    %eax,%edx
c010c397:	7d 0b                	jge    c010c3a4 <get_pid+0xd6>
                next_safe = proc->pid;
c010c399:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c39c:	8b 40 04             	mov    0x4(%eax),%eax
c010c39f:	a3 88 ea 14 c0       	mov    %eax,0xc014ea88
c010c3a4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c3a7:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010c3aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c3ad:	8b 40 04             	mov    0x4(%eax),%eax
    if (last_pid >= next_safe) {
    inside:
        next_safe = MAX_PID;
    repeat:
        le = list;
        while ((le = list_next(le)) != list) {
c010c3b0:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010c3b3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c3b6:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c010c3b9:	0f 85 66 ff ff ff    	jne    c010c325 <get_pid+0x57>
            else if (proc->pid > last_pid && next_safe > proc->pid) {
                next_safe = proc->pid;
            }
        }
    }
    return last_pid;
c010c3bf:	a1 84 ea 14 c0       	mov    0xc014ea84,%eax
}
c010c3c4:	c9                   	leave  
c010c3c5:	c3                   	ret    

c010c3c6 <proc_run>:

// proc_run - make process "proc" running on cpu
// NOTE: before call switch_to, should load  base addr of "proc"'s new PDT
void
proc_run(struct proc_struct *proc) {
c010c3c6:	55                   	push   %ebp
c010c3c7:	89 e5                	mov    %esp,%ebp
c010c3c9:	83 ec 28             	sub    $0x28,%esp
    if (proc != current) {
c010c3cc:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010c3d1:	39 45 08             	cmp    %eax,0x8(%ebp)
c010c3d4:	74 63                	je     c010c439 <proc_run+0x73>
        bool intr_flag;
        struct proc_struct *prev = current, *next = proc;
c010c3d6:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010c3db:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c3de:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3e1:	89 45 f0             	mov    %eax,-0x10(%ebp)
        local_intr_save(intr_flag);
c010c3e4:	e8 56 f9 ff ff       	call   c010bd3f <__intr_save>
c010c3e9:	89 45 ec             	mov    %eax,-0x14(%ebp)
        {
            current = proc;
c010c3ec:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3ef:	a3 28 ff 14 c0       	mov    %eax,0xc014ff28
            load_esp0(next->kstack + KSTACKSIZE);
c010c3f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c3f7:	8b 40 0c             	mov    0xc(%eax),%eax
c010c3fa:	05 00 20 00 00       	add    $0x2000,%eax
c010c3ff:	89 04 24             	mov    %eax,(%esp)
c010c402:	e8 0f 8c ff ff       	call   c0105016 <load_esp0>
            lcr3(next->cr3);
c010c407:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c40a:	8b 40 40             	mov    0x40(%eax),%eax
c010c40d:	89 45 e8             	mov    %eax,-0x18(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c010c410:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c413:	0f 22 d8             	mov    %eax,%cr3
            switch_to(&(prev->context), &(next->context));
c010c416:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c419:	8d 50 1c             	lea    0x1c(%eax),%edx
c010c41c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c41f:	83 c0 1c             	add    $0x1c,%eax
c010c422:	89 54 24 04          	mov    %edx,0x4(%esp)
c010c426:	89 04 24             	mov    %eax,(%esp)
c010c429:	e8 bc 1c 00 00       	call   c010e0ea <switch_to>
        }
        local_intr_restore(intr_flag);
c010c42e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c431:	89 04 24             	mov    %eax,(%esp)
c010c434:	e8 30 f9 ff ff       	call   c010bd69 <__intr_restore>
    }
}
c010c439:	c9                   	leave  
c010c43a:	c3                   	ret    

c010c43b <forkret>:

// forkret -- the first kernel entry point of a new thread/process
// NOTE: the addr of forkret is setted in copy_thread function
//       after switch_to, the current proc will execute here.
static void
forkret(void) {
c010c43b:	55                   	push   %ebp
c010c43c:	89 e5                	mov    %esp,%ebp
c010c43e:	83 ec 18             	sub    $0x18,%esp
    forkrets(current->tf);
c010c441:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010c446:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c449:	89 04 24             	mov    %eax,(%esp)
c010c44c:	e8 d1 66 ff ff       	call   c0102b22 <forkrets>
}
c010c451:	c9                   	leave  
c010c452:	c3                   	ret    

c010c453 <hash_proc>:

// hash_proc - add proc into proc hash_list
static void
hash_proc(struct proc_struct *proc) {
c010c453:	55                   	push   %ebp
c010c454:	89 e5                	mov    %esp,%ebp
c010c456:	53                   	push   %ebx
c010c457:	83 ec 34             	sub    $0x34,%esp
    list_add(hash_list + pid_hashfn(proc->pid), &(proc->hash_link));
c010c45a:	8b 45 08             	mov    0x8(%ebp),%eax
c010c45d:	8d 98 84 00 00 00    	lea    0x84(%eax),%ebx
c010c463:	8b 45 08             	mov    0x8(%ebp),%eax
c010c466:	8b 40 04             	mov    0x4(%eax),%eax
c010c469:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c010c470:	00 
c010c471:	89 04 24             	mov    %eax,(%esp)
c010c474:	e8 72 85 00 00       	call   c01149eb <hash32>
c010c479:	c1 e0 03             	shl    $0x3,%eax
c010c47c:	05 40 ff 14 c0       	add    $0xc014ff40,%eax
c010c481:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c484:	89 5d f0             	mov    %ebx,-0x10(%ebp)
c010c487:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c48a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010c48d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c490:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010c493:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c496:	8b 40 04             	mov    0x4(%eax),%eax
c010c499:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010c49c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010c49f:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c4a2:	89 55 e0             	mov    %edx,-0x20(%ebp)
c010c4a5:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010c4a8:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c4ab:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c4ae:	89 10                	mov    %edx,(%eax)
c010c4b0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c4b3:	8b 10                	mov    (%eax),%edx
c010c4b5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c4b8:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010c4bb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c4be:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010c4c1:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010c4c4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c4c7:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010c4ca:	89 10                	mov    %edx,(%eax)
}
c010c4cc:	83 c4 34             	add    $0x34,%esp
c010c4cf:	5b                   	pop    %ebx
c010c4d0:	5d                   	pop    %ebp
c010c4d1:	c3                   	ret    

c010c4d2 <unhash_proc>:

// unhash_proc - delete proc from proc hash_list
static void
unhash_proc(struct proc_struct *proc) {
c010c4d2:	55                   	push   %ebp
c010c4d3:	89 e5                	mov    %esp,%ebp
c010c4d5:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->hash_link));
c010c4d8:	8b 45 08             	mov    0x8(%ebp),%eax
c010c4db:	05 84 00 00 00       	add    $0x84,%eax
c010c4e0:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010c4e3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c4e6:	8b 40 04             	mov    0x4(%eax),%eax
c010c4e9:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010c4ec:	8b 12                	mov    (%edx),%edx
c010c4ee:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010c4f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010c4f4:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c4f7:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c4fa:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010c4fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c500:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010c503:	89 10                	mov    %edx,(%eax)
}
c010c505:	c9                   	leave  
c010c506:	c3                   	ret    

c010c507 <find_proc>:

// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
c010c507:	55                   	push   %ebp
c010c508:	89 e5                	mov    %esp,%ebp
c010c50a:	83 ec 28             	sub    $0x28,%esp
    if (0 < pid && pid < MAX_PID) {
c010c50d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010c511:	7e 61                	jle    c010c574 <find_proc+0x6d>
c010c513:	81 7d 08 ff 1f 00 00 	cmpl   $0x1fff,0x8(%ebp)
c010c51a:	7f 58                	jg     c010c574 <find_proc+0x6d>
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
c010c51c:	8b 45 08             	mov    0x8(%ebp),%eax
c010c51f:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c010c526:	00 
c010c527:	89 04 24             	mov    %eax,(%esp)
c010c52a:	e8 bc 84 00 00       	call   c01149eb <hash32>
c010c52f:	c1 e0 03             	shl    $0x3,%eax
c010c532:	05 40 ff 14 c0       	add    $0xc014ff40,%eax
c010c537:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c53a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c53d:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le)) != list) {
c010c540:	eb 1b                	jmp    c010c55d <find_proc+0x56>
            struct proc_struct *proc = le2proc(le, hash_link);
c010c542:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c545:	2d 84 00 00 00       	sub    $0x84,%eax
c010c54a:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (proc->pid == pid) {
c010c54d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c550:	8b 40 04             	mov    0x4(%eax),%eax
c010c553:	3b 45 08             	cmp    0x8(%ebp),%eax
c010c556:	75 05                	jne    c010c55d <find_proc+0x56>
                return proc;
c010c558:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c55b:	eb 1c                	jmp    c010c579 <find_proc+0x72>
c010c55d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c560:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010c563:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c566:	8b 40 04             	mov    0x4(%eax),%eax
// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
    if (0 < pid && pid < MAX_PID) {
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
        while ((le = list_next(le)) != list) {
c010c569:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c56c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c56f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010c572:	75 ce                	jne    c010c542 <find_proc+0x3b>
            if (proc->pid == pid) {
                return proc;
            }
        }
    }
    return NULL;
c010c574:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c579:	c9                   	leave  
c010c57a:	c3                   	ret    

c010c57b <kernel_thread>:

// kernel_thread - create a kernel thread using "fn" function
// NOTE: the contents of temp trapframe tf will be copied to 
//       proc->tf in do_fork-->copy_thread function
int
kernel_thread(int (*fn)(void *), void *arg, uint32_t clone_flags) {
c010c57b:	55                   	push   %ebp
c010c57c:	89 e5                	mov    %esp,%ebp
c010c57e:	83 ec 68             	sub    $0x68,%esp
    struct trapframe tf;
    memset(&tf, 0, sizeof(struct trapframe));
c010c581:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
c010c588:	00 
c010c589:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c590:	00 
c010c591:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010c594:	89 04 24             	mov    %eax,(%esp)
c010c597:	e8 a9 8f 00 00       	call   c0115545 <memset>
    tf.tf_cs = KERNEL_CS;
c010c59c:	66 c7 45 e8 08 00    	movw   $0x8,-0x18(%ebp)
    tf.tf_ds = tf.tf_es = tf.tf_ss = KERNEL_DS;
c010c5a2:	66 c7 45 f4 10 00    	movw   $0x10,-0xc(%ebp)
c010c5a8:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c010c5ac:	66 89 45 d4          	mov    %ax,-0x2c(%ebp)
c010c5b0:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
c010c5b4:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
    tf.tf_regs.reg_ebx = (uint32_t)fn;
c010c5b8:	8b 45 08             	mov    0x8(%ebp),%eax
c010c5bb:	89 45 bc             	mov    %eax,-0x44(%ebp)
    tf.tf_regs.reg_edx = (uint32_t)arg;
c010c5be:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c5c1:	89 45 c0             	mov    %eax,-0x40(%ebp)
    tf.tf_eip = (uint32_t)kernel_thread_entry;
c010c5c4:	b8 fd bc 10 c0       	mov    $0xc010bcfd,%eax
c010c5c9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return do_fork(clone_flags | CLONE_VM, 0, &tf);
c010c5cc:	8b 45 10             	mov    0x10(%ebp),%eax
c010c5cf:	80 cc 01             	or     $0x1,%ah
c010c5d2:	89 c2                	mov    %eax,%edx
c010c5d4:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010c5d7:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c5db:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c5e2:	00 
c010c5e3:	89 14 24             	mov    %edx,(%esp)
c010c5e6:	e8 0e 04 00 00       	call   c010c9f9 <do_fork>
}
c010c5eb:	c9                   	leave  
c010c5ec:	c3                   	ret    

c010c5ed <setup_kstack>:

// setup_kstack - alloc pages with size KSTACKPAGE as process kernel stack
static int
setup_kstack(struct proc_struct *proc) {
c010c5ed:	55                   	push   %ebp
c010c5ee:	89 e5                	mov    %esp,%ebp
c010c5f0:	83 ec 28             	sub    $0x28,%esp
    struct Page *page = alloc_pages(KSTACKPAGE);
c010c5f3:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c010c5fa:	e8 65 8b ff ff       	call   c0105164 <alloc_pages>
c010c5ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c010c602:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c606:	74 1a                	je     c010c622 <setup_kstack+0x35>
        proc->kstack = (uintptr_t)page2kva(page);
c010c608:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c60b:	89 04 24             	mov    %eax,(%esp)
c010c60e:	e8 e8 f7 ff ff       	call   c010bdfb <page2kva>
c010c613:	89 c2                	mov    %eax,%edx
c010c615:	8b 45 08             	mov    0x8(%ebp),%eax
c010c618:	89 50 0c             	mov    %edx,0xc(%eax)
        return 0;
c010c61b:	b8 00 00 00 00       	mov    $0x0,%eax
c010c620:	eb 05                	jmp    c010c627 <setup_kstack+0x3a>
    }
    return -E_NO_MEM;
c010c622:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c010c627:	c9                   	leave  
c010c628:	c3                   	ret    

c010c629 <put_kstack>:

// put_kstack - free the memory space of process kernel stack
static void
put_kstack(struct proc_struct *proc) {
c010c629:	55                   	push   %ebp
c010c62a:	89 e5                	mov    %esp,%ebp
c010c62c:	83 ec 18             	sub    $0x18,%esp
    free_pages(kva2page((void *)(proc->kstack)), KSTACKPAGE);
c010c62f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c632:	8b 40 0c             	mov    0xc(%eax),%eax
c010c635:	89 04 24             	mov    %eax,(%esp)
c010c638:	e8 12 f8 ff ff       	call   c010be4f <kva2page>
c010c63d:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c010c644:	00 
c010c645:	89 04 24             	mov    %eax,(%esp)
c010c648:	e8 82 8b ff ff       	call   c01051cf <free_pages>
}
c010c64d:	c9                   	leave  
c010c64e:	c3                   	ret    

c010c64f <setup_pgdir>:

// setup_pgdir - alloc one page as PDT
static int
setup_pgdir(struct mm_struct *mm) {
c010c64f:	55                   	push   %ebp
c010c650:	89 e5                	mov    %esp,%ebp
c010c652:	83 ec 28             	sub    $0x28,%esp
    struct Page *page;
    if ((page = alloc_page()) == NULL) {
c010c655:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010c65c:	e8 03 8b ff ff       	call   c0105164 <alloc_pages>
c010c661:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c664:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c668:	75 0a                	jne    c010c674 <setup_pgdir+0x25>
        return -E_NO_MEM;
c010c66a:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010c66f:	e9 80 00 00 00       	jmp    c010c6f4 <setup_pgdir+0xa5>
    }
    pde_t *pgdir = page2kva(page);
c010c674:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c677:	89 04 24             	mov    %eax,(%esp)
c010c67a:	e8 7c f7 ff ff       	call   c010bdfb <page2kva>
c010c67f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    memcpy(pgdir, boot_pgdir, PGSIZE);
c010c682:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c010c687:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c010c68e:	00 
c010c68f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c693:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c696:	89 04 24             	mov    %eax,(%esp)
c010c699:	e8 89 8f 00 00       	call   c0115627 <memcpy>
    pgdir[PDX(VPT)] = PADDR(pgdir) | PTE_P | PTE_W;
c010c69e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c6a1:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c010c6a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c6aa:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010c6ad:	81 7d ec ff ff ff bf 	cmpl   $0xbfffffff,-0x14(%ebp)
c010c6b4:	77 23                	ja     c010c6d9 <setup_pgdir+0x8a>
c010c6b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c6b9:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010c6bd:	c7 44 24 08 14 80 11 	movl   $0xc0118014,0x8(%esp)
c010c6c4:	c0 
c010c6c5:	c7 44 24 04 39 01 00 	movl   $0x139,0x4(%esp)
c010c6cc:	00 
c010c6cd:	c7 04 24 38 80 11 c0 	movl   $0xc0118038,(%esp)
c010c6d4:	e8 ef 47 ff ff       	call   c0100ec8 <__panic>
c010c6d9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c6dc:	05 00 00 00 40       	add    $0x40000000,%eax
c010c6e1:	83 c8 03             	or     $0x3,%eax
c010c6e4:	89 02                	mov    %eax,(%edx)
    mm->pgdir = pgdir;
c010c6e6:	8b 45 08             	mov    0x8(%ebp),%eax
c010c6e9:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010c6ec:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c010c6ef:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c6f4:	c9                   	leave  
c010c6f5:	c3                   	ret    

c010c6f6 <put_pgdir>:

// put_pgdir - free the memory space of PDT
static void
put_pgdir(struct mm_struct *mm) {
c010c6f6:	55                   	push   %ebp
c010c6f7:	89 e5                	mov    %esp,%ebp
c010c6f9:	83 ec 18             	sub    $0x18,%esp
    free_page(kva2page(mm->pgdir));
c010c6fc:	8b 45 08             	mov    0x8(%ebp),%eax
c010c6ff:	8b 40 0c             	mov    0xc(%eax),%eax
c010c702:	89 04 24             	mov    %eax,(%esp)
c010c705:	e8 45 f7 ff ff       	call   c010be4f <kva2page>
c010c70a:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010c711:	00 
c010c712:	89 04 24             	mov    %eax,(%esp)
c010c715:	e8 b5 8a ff ff       	call   c01051cf <free_pages>
}
c010c71a:	c9                   	leave  
c010c71b:	c3                   	ret    

c010c71c <copy_mm>:

// copy_mm - process "proc" duplicate OR share process "current"'s mm according clone_flags
//         - if clone_flags & CLONE_VM, then "share" ; else "duplicate"
static int
copy_mm(uint32_t clone_flags, struct proc_struct *proc) {
c010c71c:	55                   	push   %ebp
c010c71d:	89 e5                	mov    %esp,%ebp
c010c71f:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm, *oldmm = current->mm;
c010c722:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010c727:	8b 40 18             	mov    0x18(%eax),%eax
c010c72a:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* current is a kernel thread */
    if (oldmm == NULL) {
c010c72d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010c731:	75 0a                	jne    c010c73d <copy_mm+0x21>
        return 0;
c010c733:	b8 00 00 00 00       	mov    $0x0,%eax
c010c738:	e9 f9 00 00 00       	jmp    c010c836 <copy_mm+0x11a>
    }
    if (clone_flags & CLONE_VM) {
c010c73d:	8b 45 08             	mov    0x8(%ebp),%eax
c010c740:	25 00 01 00 00       	and    $0x100,%eax
c010c745:	85 c0                	test   %eax,%eax
c010c747:	74 08                	je     c010c751 <copy_mm+0x35>
        mm = oldmm;
c010c749:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c74c:	89 45 f4             	mov    %eax,-0xc(%ebp)
        goto good_mm;
c010c74f:	eb 78                	jmp    c010c7c9 <copy_mm+0xad>
    }

    int ret = -E_NO_MEM;
c010c751:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
    if ((mm = mm_create()) == NULL) {
c010c758:	e8 c9 b7 ff ff       	call   c0107f26 <mm_create>
c010c75d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c760:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c764:	75 05                	jne    c010c76b <copy_mm+0x4f>
        goto bad_mm;
c010c766:	e9 c8 00 00 00       	jmp    c010c833 <copy_mm+0x117>
    }
    if (setup_pgdir(mm) != 0) {
c010c76b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c76e:	89 04 24             	mov    %eax,(%esp)
c010c771:	e8 d9 fe ff ff       	call   c010c64f <setup_pgdir>
c010c776:	85 c0                	test   %eax,%eax
c010c778:	74 05                	je     c010c77f <copy_mm+0x63>
        goto bad_pgdir_cleanup_mm;
c010c77a:	e9 a9 00 00 00       	jmp    c010c828 <copy_mm+0x10c>
    }

    lock_mm(oldmm);
c010c77f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c782:	89 04 24             	mov    %eax,(%esp)
c010c785:	e8 43 f7 ff ff       	call   c010becd <lock_mm>
    {
        ret = dup_mmap(mm, oldmm);
c010c78a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c78d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c791:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c794:	89 04 24             	mov    %eax,(%esp)
c010c797:	e8 ad bc ff ff       	call   c0108449 <dup_mmap>
c010c79c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    unlock_mm(oldmm);
c010c79f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c7a2:	89 04 24             	mov    %eax,(%esp)
c010c7a5:	e8 56 f7 ff ff       	call   c010bf00 <unlock_mm>

    if (ret != 0) {
c010c7aa:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c7ae:	74 19                	je     c010c7c9 <copy_mm+0xad>
        goto bad_dup_cleanup_mmap;
c010c7b0:	90                   	nop
    mm_count_inc(mm);
    proc->mm = mm;
    proc->cr3 = PADDR(mm->pgdir);
    return 0;
bad_dup_cleanup_mmap:
    exit_mmap(mm);
c010c7b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c7b4:	89 04 24             	mov    %eax,(%esp)
c010c7b7:	e8 8e bd ff ff       	call   c010854a <exit_mmap>
    put_pgdir(mm);
c010c7bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c7bf:	89 04 24             	mov    %eax,(%esp)
c010c7c2:	e8 2f ff ff ff       	call   c010c6f6 <put_pgdir>
c010c7c7:	eb 5f                	jmp    c010c828 <copy_mm+0x10c>
    if (ret != 0) {
        goto bad_dup_cleanup_mmap;
    }

good_mm:
    mm_count_inc(mm);
c010c7c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c7cc:	89 04 24             	mov    %eax,(%esp)
c010c7cf:	e8 c5 f6 ff ff       	call   c010be99 <mm_count_inc>
    proc->mm = mm;
c010c7d4:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c7d7:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c7da:	89 50 18             	mov    %edx,0x18(%eax)
    proc->cr3 = PADDR(mm->pgdir);
c010c7dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c7e0:	8b 40 0c             	mov    0xc(%eax),%eax
c010c7e3:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010c7e6:	81 7d e8 ff ff ff bf 	cmpl   $0xbfffffff,-0x18(%ebp)
c010c7ed:	77 23                	ja     c010c812 <copy_mm+0xf6>
c010c7ef:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c7f2:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010c7f6:	c7 44 24 08 14 80 11 	movl   $0xc0118014,0x8(%esp)
c010c7fd:	c0 
c010c7fe:	c7 44 24 04 68 01 00 	movl   $0x168,0x4(%esp)
c010c805:	00 
c010c806:	c7 04 24 38 80 11 c0 	movl   $0xc0118038,(%esp)
c010c80d:	e8 b6 46 ff ff       	call   c0100ec8 <__panic>
c010c812:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c815:	8d 90 00 00 00 40    	lea    0x40000000(%eax),%edx
c010c81b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c81e:	89 50 40             	mov    %edx,0x40(%eax)
    return 0;
c010c821:	b8 00 00 00 00       	mov    $0x0,%eax
c010c826:	eb 0e                	jmp    c010c836 <copy_mm+0x11a>
bad_dup_cleanup_mmap:
    exit_mmap(mm);
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010c828:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c82b:	89 04 24             	mov    %eax,(%esp)
c010c82e:	e8 58 ba ff ff       	call   c010828b <mm_destroy>
bad_mm:
    return ret;
c010c833:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010c836:	c9                   	leave  
c010c837:	c3                   	ret    

c010c838 <copy_thread>:

// copy_thread - setup the trapframe on the  process's kernel stack top and
//             - setup the kernel entry point and stack of process
static void
copy_thread(struct proc_struct *proc, uintptr_t esp, struct trapframe *tf) {
c010c838:	55                   	push   %ebp
c010c839:	89 e5                	mov    %esp,%ebp
c010c83b:	57                   	push   %edi
c010c83c:	56                   	push   %esi
c010c83d:	53                   	push   %ebx
    proc->tf = (struct trapframe *)(proc->kstack + KSTACKSIZE) - 1;
c010c83e:	8b 45 08             	mov    0x8(%ebp),%eax
c010c841:	8b 40 0c             	mov    0xc(%eax),%eax
c010c844:	05 b4 1f 00 00       	add    $0x1fb4,%eax
c010c849:	89 c2                	mov    %eax,%edx
c010c84b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c84e:	89 50 3c             	mov    %edx,0x3c(%eax)
    *(proc->tf) = *tf;
c010c851:	8b 45 08             	mov    0x8(%ebp),%eax
c010c854:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c857:	8b 55 10             	mov    0x10(%ebp),%edx
c010c85a:	bb 4c 00 00 00       	mov    $0x4c,%ebx
c010c85f:	89 c1                	mov    %eax,%ecx
c010c861:	83 e1 01             	and    $0x1,%ecx
c010c864:	85 c9                	test   %ecx,%ecx
c010c866:	74 0e                	je     c010c876 <copy_thread+0x3e>
c010c868:	0f b6 0a             	movzbl (%edx),%ecx
c010c86b:	88 08                	mov    %cl,(%eax)
c010c86d:	83 c0 01             	add    $0x1,%eax
c010c870:	83 c2 01             	add    $0x1,%edx
c010c873:	83 eb 01             	sub    $0x1,%ebx
c010c876:	89 c1                	mov    %eax,%ecx
c010c878:	83 e1 02             	and    $0x2,%ecx
c010c87b:	85 c9                	test   %ecx,%ecx
c010c87d:	74 0f                	je     c010c88e <copy_thread+0x56>
c010c87f:	0f b7 0a             	movzwl (%edx),%ecx
c010c882:	66 89 08             	mov    %cx,(%eax)
c010c885:	83 c0 02             	add    $0x2,%eax
c010c888:	83 c2 02             	add    $0x2,%edx
c010c88b:	83 eb 02             	sub    $0x2,%ebx
c010c88e:	89 d9                	mov    %ebx,%ecx
c010c890:	c1 e9 02             	shr    $0x2,%ecx
c010c893:	89 c7                	mov    %eax,%edi
c010c895:	89 d6                	mov    %edx,%esi
c010c897:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010c899:	89 f2                	mov    %esi,%edx
c010c89b:	89 f8                	mov    %edi,%eax
c010c89d:	b9 00 00 00 00       	mov    $0x0,%ecx
c010c8a2:	89 de                	mov    %ebx,%esi
c010c8a4:	83 e6 02             	and    $0x2,%esi
c010c8a7:	85 f6                	test   %esi,%esi
c010c8a9:	74 0b                	je     c010c8b6 <copy_thread+0x7e>
c010c8ab:	0f b7 34 0a          	movzwl (%edx,%ecx,1),%esi
c010c8af:	66 89 34 08          	mov    %si,(%eax,%ecx,1)
c010c8b3:	83 c1 02             	add    $0x2,%ecx
c010c8b6:	83 e3 01             	and    $0x1,%ebx
c010c8b9:	85 db                	test   %ebx,%ebx
c010c8bb:	74 07                	je     c010c8c4 <copy_thread+0x8c>
c010c8bd:	0f b6 14 0a          	movzbl (%edx,%ecx,1),%edx
c010c8c1:	88 14 08             	mov    %dl,(%eax,%ecx,1)
    proc->tf->tf_regs.reg_eax = 0;
c010c8c4:	8b 45 08             	mov    0x8(%ebp),%eax
c010c8c7:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c8ca:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    proc->tf->tf_esp = esp;
c010c8d1:	8b 45 08             	mov    0x8(%ebp),%eax
c010c8d4:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c8d7:	8b 55 0c             	mov    0xc(%ebp),%edx
c010c8da:	89 50 44             	mov    %edx,0x44(%eax)
    proc->tf->tf_eflags |= FL_IF;
c010c8dd:	8b 45 08             	mov    0x8(%ebp),%eax
c010c8e0:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c8e3:	8b 55 08             	mov    0x8(%ebp),%edx
c010c8e6:	8b 52 3c             	mov    0x3c(%edx),%edx
c010c8e9:	8b 52 40             	mov    0x40(%edx),%edx
c010c8ec:	80 ce 02             	or     $0x2,%dh
c010c8ef:	89 50 40             	mov    %edx,0x40(%eax)

    proc->context.eip = (uintptr_t)forkret;
c010c8f2:	ba 3b c4 10 c0       	mov    $0xc010c43b,%edx
c010c8f7:	8b 45 08             	mov    0x8(%ebp),%eax
c010c8fa:	89 50 1c             	mov    %edx,0x1c(%eax)
    proc->context.esp = (uintptr_t)(proc->tf);
c010c8fd:	8b 45 08             	mov    0x8(%ebp),%eax
c010c900:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c903:	89 c2                	mov    %eax,%edx
c010c905:	8b 45 08             	mov    0x8(%ebp),%eax
c010c908:	89 50 20             	mov    %edx,0x20(%eax)
}
c010c90b:	5b                   	pop    %ebx
c010c90c:	5e                   	pop    %esi
c010c90d:	5f                   	pop    %edi
c010c90e:	5d                   	pop    %ebp
c010c90f:	c3                   	ret    

c010c910 <copy_fs>:

//copy_fs&put_fs function used by do_fork in LAB8
static int
copy_fs(uint32_t clone_flags, struct proc_struct *proc) {
c010c910:	55                   	push   %ebp
c010c911:	89 e5                	mov    %esp,%ebp
c010c913:	83 ec 28             	sub    $0x28,%esp
    struct files_struct *filesp, *old_filesp = current->filesp;
c010c916:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010c91b:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010c921:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert(old_filesp != NULL);
c010c924:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010c928:	75 24                	jne    c010c94e <copy_fs+0x3e>
c010c92a:	c7 44 24 0c 4c 80 11 	movl   $0xc011804c,0xc(%esp)
c010c931:	c0 
c010c932:	c7 44 24 08 5f 80 11 	movl   $0xc011805f,0x8(%esp)
c010c939:	c0 
c010c93a:	c7 44 24 04 85 01 00 	movl   $0x185,0x4(%esp)
c010c941:	00 
c010c942:	c7 04 24 38 80 11 c0 	movl   $0xc0118038,(%esp)
c010c949:	e8 7a 45 ff ff       	call   c0100ec8 <__panic>

    if (clone_flags & CLONE_FS) {
c010c94e:	8b 45 08             	mov    0x8(%ebp),%eax
c010c951:	25 00 08 00 00       	and    $0x800,%eax
c010c956:	85 c0                	test   %eax,%eax
c010c958:	74 08                	je     c010c962 <copy_fs+0x52>
        filesp = old_filesp;
c010c95a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c95d:	89 45 f4             	mov    %eax,-0xc(%ebp)
        goto good_files_struct;
c010c960:	eb 40                	jmp    c010c9a2 <copy_fs+0x92>
    }

    int ret = -E_NO_MEM;
c010c962:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
    if ((filesp = files_create()) == NULL) {
c010c969:	e8 0f e7 ff ff       	call   c010b07d <files_create>
c010c96e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c971:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c975:	75 02                	jne    c010c979 <copy_fs+0x69>
        goto bad_files_struct;
c010c977:	eb 47                	jmp    c010c9c0 <copy_fs+0xb0>
    }

    if ((ret = dup_fs(filesp, old_filesp)) != 0) {
c010c979:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c97c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c980:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c983:	89 04 24             	mov    %eax,(%esp)
c010c986:	e8 9b e8 ff ff       	call   c010b226 <dup_fs>
c010c98b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c98e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c992:	74 0e                	je     c010c9a2 <copy_fs+0x92>
        goto bad_dup_cleanup_fs;
c010c994:	90                   	nop
    files_count_inc(filesp);
    proc->filesp = filesp;
    return 0;

bad_dup_cleanup_fs:
    files_destroy(filesp);
c010c995:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c998:	89 04 24             	mov    %eax,(%esp)
c010c99b:	e8 40 e7 ff ff       	call   c010b0e0 <files_destroy>
c010c9a0:	eb 1e                	jmp    c010c9c0 <copy_fs+0xb0>
    if ((ret = dup_fs(filesp, old_filesp)) != 0) {
        goto bad_dup_cleanup_fs;
    }

good_files_struct:
    files_count_inc(filesp);
c010c9a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c9a5:	89 04 24             	mov    %eax,(%esp)
c010c9a8:	e8 79 f5 ff ff       	call   c010bf26 <files_count_inc>
    proc->filesp = filesp;
c010c9ad:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c9b0:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c9b3:	89 90 c4 00 00 00    	mov    %edx,0xc4(%eax)
    return 0;
c010c9b9:	b8 00 00 00 00       	mov    $0x0,%eax
c010c9be:	eb 03                	jmp    c010c9c3 <copy_fs+0xb3>

bad_dup_cleanup_fs:
    files_destroy(filesp);
bad_files_struct:
    return ret;
c010c9c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010c9c3:	c9                   	leave  
c010c9c4:	c3                   	ret    

c010c9c5 <put_fs>:

static void
put_fs(struct proc_struct *proc) {
c010c9c5:	55                   	push   %ebp
c010c9c6:	89 e5                	mov    %esp,%ebp
c010c9c8:	83 ec 28             	sub    $0x28,%esp
    struct files_struct *filesp = proc->filesp;
c010c9cb:	8b 45 08             	mov    0x8(%ebp),%eax
c010c9ce:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010c9d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (filesp != NULL) {
c010c9d7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c9db:	74 1a                	je     c010c9f7 <put_fs+0x32>
        if (files_count_dec(filesp) == 0) {
c010c9dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c9e0:	89 04 24             	mov    %eax,(%esp)
c010c9e3:	e8 58 f5 ff ff       	call   c010bf40 <files_count_dec>
c010c9e8:	85 c0                	test   %eax,%eax
c010c9ea:	75 0b                	jne    c010c9f7 <put_fs+0x32>
            files_destroy(filesp);
c010c9ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c9ef:	89 04 24             	mov    %eax,(%esp)
c010c9f2:	e8 e9 e6 ff ff       	call   c010b0e0 <files_destroy>
        }
    }
}
c010c9f7:	c9                   	leave  
c010c9f8:	c3                   	ret    

c010c9f9 <do_fork>:
 * @clone_flags: used to guide how to clone the child process
 * @stack:       the parent's user stack pointer. if stack==0, It means to fork a kernel thread.
 * @tf:          the trapframe info, which will be copied to child process's proc->tf
 */
int
do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
c010c9f9:	55                   	push   %ebp
c010c9fa:	89 e5                	mov    %esp,%ebp
c010c9fc:	83 ec 28             	sub    $0x28,%esp
    int ret = -E_NO_FREE_PROC;
c010c9ff:	c7 45 f4 fb ff ff ff 	movl   $0xfffffffb,-0xc(%ebp)
    struct proc_struct *proc;
    if (nr_process >= MAX_PROCESS) {
c010ca06:	a1 40 1f 15 c0       	mov    0xc0151f40,%eax
c010ca0b:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c010ca10:	7e 05                	jle    c010ca17 <do_fork+0x1e>
        goto fork_out;
c010ca12:	e9 fe 00 00 00       	jmp    c010cb15 <do_fork+0x11c>
    }
    ret = -E_NO_MEM;
c010ca17:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    *    set_links:  set the relation links of process.  ALSO SEE: remove_links:  lean the relation links of process 
    *    -------------------
	*    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
    */
    if ((proc = alloc_proc()) == NULL) {
c010ca1e:	e8 37 f5 ff ff       	call   c010bf5a <alloc_proc>
c010ca23:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ca26:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ca2a:	75 05                	jne    c010ca31 <do_fork+0x38>
        goto fork_out;
c010ca2c:	e9 e4 00 00 00       	jmp    c010cb15 <do_fork+0x11c>
    }

    proc->parent = current;
c010ca31:	8b 15 28 ff 14 c0    	mov    0xc014ff28,%edx
c010ca37:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ca3a:	89 50 14             	mov    %edx,0x14(%eax)
    assert(current->wait_state == 0);
c010ca3d:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010ca42:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010ca48:	85 c0                	test   %eax,%eax
c010ca4a:	74 24                	je     c010ca70 <do_fork+0x77>
c010ca4c:	c7 44 24 0c 74 80 11 	movl   $0xc0118074,0xc(%esp)
c010ca53:	c0 
c010ca54:	c7 44 24 08 5f 80 11 	movl   $0xc011805f,0x8(%esp)
c010ca5b:	c0 
c010ca5c:	c7 44 24 04 de 01 00 	movl   $0x1de,0x4(%esp)
c010ca63:	00 
c010ca64:	c7 04 24 38 80 11 c0 	movl   $0xc0118038,(%esp)
c010ca6b:	e8 58 44 ff ff       	call   c0100ec8 <__panic>

    if (setup_kstack(proc) != 0) {
c010ca70:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ca73:	89 04 24             	mov    %eax,(%esp)
c010ca76:	e8 72 fb ff ff       	call   c010c5ed <setup_kstack>
c010ca7b:	85 c0                	test   %eax,%eax
c010ca7d:	74 05                	je     c010ca84 <do_fork+0x8b>
        goto bad_fork_cleanup_proc;
c010ca7f:	e9 a1 00 00 00       	jmp    c010cb25 <do_fork+0x12c>
    }
    if (copy_fs(clone_flags, proc) != 0) { //for LAB8
c010ca84:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ca87:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ca8b:	8b 45 08             	mov    0x8(%ebp),%eax
c010ca8e:	89 04 24             	mov    %eax,(%esp)
c010ca91:	e8 7a fe ff ff       	call   c010c910 <copy_fs>
c010ca96:	85 c0                	test   %eax,%eax
c010ca98:	74 02                	je     c010ca9c <do_fork+0xa3>
        goto bad_fork_cleanup_kstack;
c010ca9a:	eb 7e                	jmp    c010cb1a <do_fork+0x121>
    }
    if (copy_mm(clone_flags, proc) != 0) {
c010ca9c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ca9f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010caa3:	8b 45 08             	mov    0x8(%ebp),%eax
c010caa6:	89 04 24             	mov    %eax,(%esp)
c010caa9:	e8 6e fc ff ff       	call   c010c71c <copy_mm>
c010caae:	85 c0                	test   %eax,%eax
c010cab0:	74 02                	je     c010cab4 <do_fork+0xbb>
        goto bad_fork_cleanup_kstack;
c010cab2:	eb 66                	jmp    c010cb1a <do_fork+0x121>
    }
    copy_thread(proc, stack, tf);
c010cab4:	8b 45 10             	mov    0x10(%ebp),%eax
c010cab7:	89 44 24 08          	mov    %eax,0x8(%esp)
c010cabb:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cabe:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cac2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cac5:	89 04 24             	mov    %eax,(%esp)
c010cac8:	e8 6b fd ff ff       	call   c010c838 <copy_thread>

    bool intr_flag;
    local_intr_save(intr_flag);
c010cacd:	e8 6d f2 ff ff       	call   c010bd3f <__intr_save>
c010cad2:	89 45 ec             	mov    %eax,-0x14(%ebp)
    {
        proc->pid = get_pid();
c010cad5:	e8 f4 f7 ff ff       	call   c010c2ce <get_pid>
c010cada:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010cadd:	89 42 04             	mov    %eax,0x4(%edx)
        hash_proc(proc);
c010cae0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cae3:	89 04 24             	mov    %eax,(%esp)
c010cae6:	e8 68 f9 ff ff       	call   c010c453 <hash_proc>
        set_links(proc);
c010caeb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010caee:	89 04 24             	mov    %eax,(%esp)
c010caf1:	e8 7d f6 ff ff       	call   c010c173 <set_links>

    }
    local_intr_restore(intr_flag);
c010caf6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010caf9:	89 04 24             	mov    %eax,(%esp)
c010cafc:	e8 68 f2 ff ff       	call   c010bd69 <__intr_restore>

    wakeup_proc(proc);
c010cb01:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cb04:	89 04 24             	mov    %eax,(%esp)
c010cb07:	e8 d2 1a 00 00       	call   c010e5de <wakeup_proc>

    ret = proc->pid;
c010cb0c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cb0f:	8b 40 04             	mov    0x4(%eax),%eax
c010cb12:	89 45 f4             	mov    %eax,-0xc(%ebp)
fork_out:
    return ret;
c010cb15:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cb18:	eb 18                	jmp    c010cb32 <do_fork+0x139>

bad_fork_cleanup_fs:  //for LAB8
    put_fs(proc);
bad_fork_cleanup_kstack:
    put_kstack(proc);
c010cb1a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cb1d:	89 04 24             	mov    %eax,(%esp)
c010cb20:	e8 04 fb ff ff       	call   c010c629 <put_kstack>
bad_fork_cleanup_proc:
    kfree(proc);
c010cb25:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cb28:	89 04 24             	mov    %eax,(%esp)
c010cb2b:	e8 ca 81 ff ff       	call   c0104cfa <kfree>
    goto fork_out;
c010cb30:	eb e3                	jmp    c010cb15 <do_fork+0x11c>
}
c010cb32:	c9                   	leave  
c010cb33:	c3                   	ret    

c010cb34 <do_exit>:
// do_exit - called by sys_exit
//   1. call exit_mmap & put_pgdir & mm_destroy to free the almost all memory space of process
//   2. set process' state as PROC_ZOMBIE, then call wakeup_proc(parent) to ask parent reclaim itself.
//   3. call scheduler to switch to other process
int
do_exit(int error_code) {
c010cb34:	55                   	push   %ebp
c010cb35:	89 e5                	mov    %esp,%ebp
c010cb37:	83 ec 28             	sub    $0x28,%esp
    if (current == idleproc) {
c010cb3a:	8b 15 28 ff 14 c0    	mov    0xc014ff28,%edx
c010cb40:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010cb45:	39 c2                	cmp    %eax,%edx
c010cb47:	75 1c                	jne    c010cb65 <do_exit+0x31>
        panic("idleproc exit.\n");
c010cb49:	c7 44 24 08 8d 80 11 	movl   $0xc011808d,0x8(%esp)
c010cb50:	c0 
c010cb51:	c7 44 24 04 0b 02 00 	movl   $0x20b,0x4(%esp)
c010cb58:	00 
c010cb59:	c7 04 24 38 80 11 c0 	movl   $0xc0118038,(%esp)
c010cb60:	e8 63 43 ff ff       	call   c0100ec8 <__panic>
    }
    if (current == initproc) {
c010cb65:	8b 15 28 ff 14 c0    	mov    0xc014ff28,%edx
c010cb6b:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010cb70:	39 c2                	cmp    %eax,%edx
c010cb72:	75 1c                	jne    c010cb90 <do_exit+0x5c>
        panic("initproc exit.\n");
c010cb74:	c7 44 24 08 9d 80 11 	movl   $0xc011809d,0x8(%esp)
c010cb7b:	c0 
c010cb7c:	c7 44 24 04 0e 02 00 	movl   $0x20e,0x4(%esp)
c010cb83:	00 
c010cb84:	c7 04 24 38 80 11 c0 	movl   $0xc0118038,(%esp)
c010cb8b:	e8 38 43 ff ff       	call   c0100ec8 <__panic>
    }
    
    struct mm_struct *mm = current->mm;
c010cb90:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010cb95:	8b 40 18             	mov    0x18(%eax),%eax
c010cb98:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (mm != NULL) {
c010cb9b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010cb9f:	74 4a                	je     c010cbeb <do_exit+0xb7>
        lcr3(boot_cr3);
c010cba1:	a1 24 30 15 c0       	mov    0xc0153024,%eax
c010cba6:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010cba9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010cbac:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010cbaf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cbb2:	89 04 24             	mov    %eax,(%esp)
c010cbb5:	e8 f9 f2 ff ff       	call   c010beb3 <mm_count_dec>
c010cbba:	85 c0                	test   %eax,%eax
c010cbbc:	75 21                	jne    c010cbdf <do_exit+0xab>
            exit_mmap(mm);
c010cbbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cbc1:	89 04 24             	mov    %eax,(%esp)
c010cbc4:	e8 81 b9 ff ff       	call   c010854a <exit_mmap>
            put_pgdir(mm);
c010cbc9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cbcc:	89 04 24             	mov    %eax,(%esp)
c010cbcf:	e8 22 fb ff ff       	call   c010c6f6 <put_pgdir>
            mm_destroy(mm);
c010cbd4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cbd7:	89 04 24             	mov    %eax,(%esp)
c010cbda:	e8 ac b6 ff ff       	call   c010828b <mm_destroy>
        }
        current->mm = NULL;
c010cbdf:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010cbe4:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    put_fs(current); //for LAB8
c010cbeb:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010cbf0:	89 04 24             	mov    %eax,(%esp)
c010cbf3:	e8 cd fd ff ff       	call   c010c9c5 <put_fs>
    current->state = PROC_ZOMBIE;
c010cbf8:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010cbfd:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    current->exit_code = error_code;
c010cc03:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010cc08:	8b 55 08             	mov    0x8(%ebp),%edx
c010cc0b:	89 90 8c 00 00 00    	mov    %edx,0x8c(%eax)
    
    bool intr_flag;
    struct proc_struct *proc;
    local_intr_save(intr_flag);
c010cc11:	e8 29 f1 ff ff       	call   c010bd3f <__intr_save>
c010cc16:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        proc = current->parent;
c010cc19:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010cc1e:	8b 40 14             	mov    0x14(%eax),%eax
c010cc21:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (proc->wait_state == WT_CHILD) {
c010cc24:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cc27:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010cc2d:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010cc32:	75 10                	jne    c010cc44 <do_exit+0x110>
            wakeup_proc(proc);
c010cc34:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cc37:	89 04 24             	mov    %eax,(%esp)
c010cc3a:	e8 9f 19 00 00       	call   c010e5de <wakeup_proc>
        }
        while (current->cptr != NULL) {
c010cc3f:	e9 ac 00 00 00       	jmp    c010ccf0 <do_exit+0x1bc>
c010cc44:	e9 a7 00 00 00       	jmp    c010ccf0 <do_exit+0x1bc>
            proc = current->cptr;
c010cc49:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010cc4e:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010cc54:	89 45 ec             	mov    %eax,-0x14(%ebp)
            current->cptr = proc->optr;
c010cc57:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010cc5c:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010cc5f:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010cc65:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    
            proc->yptr = NULL;
c010cc6b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cc6e:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010cc75:	00 00 00 
            if ((proc->optr = initproc->cptr) != NULL) {
c010cc78:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010cc7d:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c010cc83:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cc86:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010cc8c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cc8f:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010cc95:	85 c0                	test   %eax,%eax
c010cc97:	74 14                	je     c010ccad <do_exit+0x179>
                initproc->cptr->yptr = proc;
c010cc99:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010cc9e:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010cca4:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010cca7:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
            }
            proc->parent = initproc;
c010ccad:	8b 15 24 ff 14 c0    	mov    0xc014ff24,%edx
c010ccb3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ccb6:	89 50 14             	mov    %edx,0x14(%eax)
            initproc->cptr = proc;
c010ccb9:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010ccbe:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010ccc1:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
            if (proc->state == PROC_ZOMBIE) {
c010ccc7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ccca:	8b 00                	mov    (%eax),%eax
c010cccc:	83 f8 03             	cmp    $0x3,%eax
c010cccf:	75 1f                	jne    c010ccf0 <do_exit+0x1bc>
                if (initproc->wait_state == WT_CHILD) {
c010ccd1:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010ccd6:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010ccdc:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010cce1:	75 0d                	jne    c010ccf0 <do_exit+0x1bc>
                    wakeup_proc(initproc);
c010cce3:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010cce8:	89 04 24             	mov    %eax,(%esp)
c010cceb:	e8 ee 18 00 00       	call   c010e5de <wakeup_proc>
    {
        proc = current->parent;
        if (proc->wait_state == WT_CHILD) {
            wakeup_proc(proc);
        }
        while (current->cptr != NULL) {
c010ccf0:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010ccf5:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010ccfb:	85 c0                	test   %eax,%eax
c010ccfd:	0f 85 46 ff ff ff    	jne    c010cc49 <do_exit+0x115>
                    wakeup_proc(initproc);
                }
            }
        }
    }
    local_intr_restore(intr_flag);
c010cd03:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cd06:	89 04 24             	mov    %eax,(%esp)
c010cd09:	e8 5b f0 ff ff       	call   c010bd69 <__intr_restore>
    
    schedule();
c010cd0e:	e8 67 19 00 00       	call   c010e67a <schedule>
    panic("do_exit will not return!! %d.\n", current->pid);
c010cd13:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010cd18:	8b 40 04             	mov    0x4(%eax),%eax
c010cd1b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010cd1f:	c7 44 24 08 b0 80 11 	movl   $0xc01180b0,0x8(%esp)
c010cd26:	c0 
c010cd27:	c7 44 24 04 3b 02 00 	movl   $0x23b,0x4(%esp)
c010cd2e:	00 
c010cd2f:	c7 04 24 38 80 11 c0 	movl   $0xc0118038,(%esp)
c010cd36:	e8 8d 41 ff ff       	call   c0100ec8 <__panic>

c010cd3b <load_icode_read>:
}

//load_icode_read is used by load_icode in LAB8
static int
load_icode_read(int fd, void *buf, size_t len, off_t offset) {
c010cd3b:	55                   	push   %ebp
c010cd3c:	89 e5                	mov    %esp,%ebp
c010cd3e:	83 ec 28             	sub    $0x28,%esp
    int ret;
    if ((ret = sysfile_seek(fd, offset, LSEEK_SET)) != 0) {
c010cd41:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010cd48:	00 
c010cd49:	8b 45 14             	mov    0x14(%ebp),%eax
c010cd4c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cd50:	8b 45 08             	mov    0x8(%ebp),%eax
c010cd53:	89 04 24             	mov    %eax,(%esp)
c010cd56:	e8 ad eb ff ff       	call   c010b908 <sysfile_seek>
c010cd5b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010cd5e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010cd62:	74 05                	je     c010cd69 <load_icode_read+0x2e>
        return ret;
c010cd64:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cd67:	eb 38                	jmp    c010cda1 <load_icode_read+0x66>
    }
    if ((ret = sysfile_read(fd, buf, len)) != len) {
c010cd69:	8b 45 10             	mov    0x10(%ebp),%eax
c010cd6c:	89 44 24 08          	mov    %eax,0x8(%esp)
c010cd70:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cd73:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cd77:	8b 45 08             	mov    0x8(%ebp),%eax
c010cd7a:	89 04 24             	mov    %eax,(%esp)
c010cd7d:	e8 94 e8 ff ff       	call   c010b616 <sysfile_read>
c010cd82:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010cd85:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cd88:	3b 45 10             	cmp    0x10(%ebp),%eax
c010cd8b:	74 0f                	je     c010cd9c <load_icode_read+0x61>
        return (ret < 0) ? ret : -1;
c010cd8d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010cd92:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010cd96:	0f 48 45 f4          	cmovs  -0xc(%ebp),%eax
c010cd9a:	eb 05                	jmp    c010cda1 <load_icode_read+0x66>
    }
    return 0;
c010cd9c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010cda1:	c9                   	leave  
c010cda2:	c3                   	ret    

c010cda3 <load_icode>:

// load_icode -  called by sys_exec-->do_execve
  
static int
load_icode(int fd, int argc, char **kargv) {
c010cda3:	55                   	push   %ebp
c010cda4:	89 e5                	mov    %esp,%ebp
c010cda6:	53                   	push   %ebx
c010cda7:	81 ec e4 00 00 00    	sub    $0xe4,%esp
     * (5) setup current process's mm, cr3, reset pgidr (using lcr3 MARCO)
     * (6) setup uargc and uargv in user stacks
     * (7) setup trapframe for user environment
     * (8) if up steps failed, you should cleanup the env.
     */
    assert(argc >= 0 && argc <= EXEC_MAX_ARG_NUM);
c010cdad:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010cdb1:	78 06                	js     c010cdb9 <load_icode+0x16>
c010cdb3:	83 7d 0c 20          	cmpl   $0x20,0xc(%ebp)
c010cdb7:	7e 24                	jle    c010cddd <load_icode+0x3a>
c010cdb9:	c7 44 24 0c d0 80 11 	movl   $0xc01180d0,0xc(%esp)
c010cdc0:	c0 
c010cdc1:	c7 44 24 08 5f 80 11 	movl   $0xc011805f,0x8(%esp)
c010cdc8:	c0 
c010cdc9:	c7 44 24 04 67 02 00 	movl   $0x267,0x4(%esp)
c010cdd0:	00 
c010cdd1:	c7 04 24 38 80 11 c0 	movl   $0xc0118038,(%esp)
c010cdd8:	e8 eb 40 ff ff       	call   c0100ec8 <__panic>

    if (current->mm != NULL) {
c010cddd:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010cde2:	8b 40 18             	mov    0x18(%eax),%eax
c010cde5:	85 c0                	test   %eax,%eax
c010cde7:	74 1c                	je     c010ce05 <load_icode+0x62>
        panic("load_icode: current->mm must be empty.\n");
c010cde9:	c7 44 24 08 f8 80 11 	movl   $0xc01180f8,0x8(%esp)
c010cdf0:	c0 
c010cdf1:	c7 44 24 04 6a 02 00 	movl   $0x26a,0x4(%esp)
c010cdf8:	00 
c010cdf9:	c7 04 24 38 80 11 c0 	movl   $0xc0118038,(%esp)
c010ce00:	e8 c3 40 ff ff       	call   c0100ec8 <__panic>
    }

    int ret = -E_NO_MEM;
c010ce05:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    struct mm_struct *mm;
    if ((mm = mm_create()) == NULL) {
c010ce0c:	e8 15 b1 ff ff       	call   c0107f26 <mm_create>
c010ce11:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010ce14:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c010ce18:	75 06                	jne    c010ce20 <load_icode+0x7d>
        goto bad_mm;
c010ce1a:	90                   	nop
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
bad_mm:
    goto out;
c010ce1b:	e9 85 07 00 00       	jmp    c010d5a5 <load_icode+0x802>
    int ret = -E_NO_MEM;
    struct mm_struct *mm;
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
    }
    if (setup_pgdir(mm) != 0) {
c010ce20:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010ce23:	89 04 24             	mov    %eax,(%esp)
c010ce26:	e8 24 f8 ff ff       	call   c010c64f <setup_pgdir>
c010ce2b:	85 c0                	test   %eax,%eax
c010ce2d:	74 05                	je     c010ce34 <load_icode+0x91>
        goto bad_pgdir_cleanup_mm;
c010ce2f:	e9 8c 07 00 00       	jmp    c010d5c0 <load_icode+0x81d>
    }

    struct Page *page;

    struct elfhdr __elf, *elf = &__elf;
c010ce34:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
c010ce3a:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    if ((ret = load_icode_read(fd, elf, sizeof(struct elfhdr), 0)) != 0) {
c010ce3d:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010ce44:	00 
c010ce45:	c7 44 24 08 34 00 00 	movl   $0x34,0x8(%esp)
c010ce4c:	00 
c010ce4d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010ce50:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ce54:	8b 45 08             	mov    0x8(%ebp),%eax
c010ce57:	89 04 24             	mov    %eax,(%esp)
c010ce5a:	e8 dc fe ff ff       	call   c010cd3b <load_icode_read>
c010ce5f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ce62:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ce66:	74 05                	je     c010ce6d <load_icode+0xca>
        goto bad_elf_cleanup_pgdir;
c010ce68:	e9 48 07 00 00       	jmp    c010d5b5 <load_icode+0x812>
    }

    if (elf->e_magic != ELF_MAGIC) {
c010ce6d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010ce70:	8b 00                	mov    (%eax),%eax
c010ce72:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
c010ce77:	74 0c                	je     c010ce85 <load_icode+0xe2>
        ret = -E_INVAL_ELF;
c010ce79:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
        goto bad_elf_cleanup_pgdir;
c010ce80:	e9 30 07 00 00       	jmp    c010d5b5 <load_icode+0x812>
    }

    struct proghdr __ph, *ph = &__ph;
c010ce85:	8d 85 44 ff ff ff    	lea    -0xbc(%ebp),%eax
c010ce8b:	89 45 c0             	mov    %eax,-0x40(%ebp)
    uint32_t vm_flags, perm, phnum;
    for (phnum = 0; phnum < elf->e_phnum; phnum ++) {
c010ce8e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
c010ce95:	e9 76 03 00 00       	jmp    c010d210 <load_icode+0x46d>
        off_t phoff = elf->e_phoff + sizeof(struct proghdr) * phnum;
c010ce9a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010ce9d:	8b 40 1c             	mov    0x1c(%eax),%eax
c010cea0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010cea3:	c1 e2 05             	shl    $0x5,%edx
c010cea6:	01 d0                	add    %edx,%eax
c010cea8:	89 45 bc             	mov    %eax,-0x44(%ebp)
        if ((ret = load_icode_read(fd, ph, sizeof(struct proghdr), phoff)) != 0) {
c010ceab:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010ceae:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010ceb2:	c7 44 24 08 20 00 00 	movl   $0x20,0x8(%esp)
c010ceb9:	00 
c010ceba:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010cebd:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cec1:	8b 45 08             	mov    0x8(%ebp),%eax
c010cec4:	89 04 24             	mov    %eax,(%esp)
c010cec7:	e8 6f fe ff ff       	call   c010cd3b <load_icode_read>
c010cecc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010cecf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ced3:	74 05                	je     c010ceda <load_icode+0x137>
            goto bad_cleanup_mmap;
c010ced5:	e9 d0 06 00 00       	jmp    c010d5aa <load_icode+0x807>
        }
        if (ph->p_type != ELF_PT_LOAD) {
c010ceda:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010cedd:	8b 00                	mov    (%eax),%eax
c010cedf:	83 f8 01             	cmp    $0x1,%eax
c010cee2:	74 05                	je     c010cee9 <load_icode+0x146>
            continue ;
c010cee4:	e9 23 03 00 00       	jmp    c010d20c <load_icode+0x469>
        }
        if (ph->p_filesz > ph->p_memsz) {
c010cee9:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010ceec:	8b 50 10             	mov    0x10(%eax),%edx
c010ceef:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010cef2:	8b 40 14             	mov    0x14(%eax),%eax
c010cef5:	39 c2                	cmp    %eax,%edx
c010cef7:	76 0c                	jbe    c010cf05 <load_icode+0x162>
            ret = -E_INVAL_ELF;
c010cef9:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
            goto bad_cleanup_mmap;
c010cf00:	e9 a5 06 00 00       	jmp    c010d5aa <load_icode+0x807>
        }
        if (ph->p_filesz == 0) {
c010cf05:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010cf08:	8b 40 10             	mov    0x10(%eax),%eax
c010cf0b:	85 c0                	test   %eax,%eax
c010cf0d:	75 05                	jne    c010cf14 <load_icode+0x171>
            continue ;
c010cf0f:	e9 f8 02 00 00       	jmp    c010d20c <load_icode+0x469>
        }
        vm_flags = 0, perm = PTE_U;
c010cf14:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010cf1b:	c7 45 e8 04 00 00 00 	movl   $0x4,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
c010cf22:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010cf25:	8b 40 18             	mov    0x18(%eax),%eax
c010cf28:	83 e0 01             	and    $0x1,%eax
c010cf2b:	85 c0                	test   %eax,%eax
c010cf2d:	74 04                	je     c010cf33 <load_icode+0x190>
c010cf2f:	83 4d ec 04          	orl    $0x4,-0x14(%ebp)
        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
c010cf33:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010cf36:	8b 40 18             	mov    0x18(%eax),%eax
c010cf39:	83 e0 02             	and    $0x2,%eax
c010cf3c:	85 c0                	test   %eax,%eax
c010cf3e:	74 04                	je     c010cf44 <load_icode+0x1a1>
c010cf40:	83 4d ec 02          	orl    $0x2,-0x14(%ebp)
        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
c010cf44:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010cf47:	8b 40 18             	mov    0x18(%eax),%eax
c010cf4a:	83 e0 04             	and    $0x4,%eax
c010cf4d:	85 c0                	test   %eax,%eax
c010cf4f:	74 04                	je     c010cf55 <load_icode+0x1b2>
c010cf51:	83 4d ec 01          	orl    $0x1,-0x14(%ebp)
        if (vm_flags & VM_WRITE) perm |= PTE_W;
c010cf55:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cf58:	83 e0 02             	and    $0x2,%eax
c010cf5b:	85 c0                	test   %eax,%eax
c010cf5d:	74 04                	je     c010cf63 <load_icode+0x1c0>
c010cf5f:	83 4d e8 02          	orl    $0x2,-0x18(%ebp)
        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
c010cf63:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010cf66:	8b 50 14             	mov    0x14(%eax),%edx
c010cf69:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010cf6c:	8b 40 08             	mov    0x8(%eax),%eax
c010cf6f:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010cf76:	00 
c010cf77:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010cf7a:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c010cf7e:	89 54 24 08          	mov    %edx,0x8(%esp)
c010cf82:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cf86:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010cf89:	89 04 24             	mov    %eax,(%esp)
c010cf8c:	e8 9c b3 ff ff       	call   c010832d <mm_map>
c010cf91:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010cf94:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010cf98:	74 05                	je     c010cf9f <load_icode+0x1fc>
            goto bad_cleanup_mmap;
c010cf9a:	e9 0b 06 00 00       	jmp    c010d5aa <load_icode+0x807>
        }
        off_t offset = ph->p_offset;
c010cf9f:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010cfa2:	8b 40 04             	mov    0x4(%eax),%eax
c010cfa5:	89 45 e0             	mov    %eax,-0x20(%ebp)
        size_t off, size;
        uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE);
c010cfa8:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010cfab:	8b 40 08             	mov    0x8(%eax),%eax
c010cfae:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010cfb1:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010cfb4:	89 45 b8             	mov    %eax,-0x48(%ebp)
c010cfb7:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010cfba:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010cfbf:	89 45 d4             	mov    %eax,-0x2c(%ebp)

        ret = -E_NO_MEM;
c010cfc2:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

        end = ph->p_va + ph->p_filesz;
c010cfc9:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010cfcc:	8b 50 08             	mov    0x8(%eax),%edx
c010cfcf:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010cfd2:	8b 40 10             	mov    0x10(%eax),%eax
c010cfd5:	01 d0                	add    %edx,%eax
c010cfd7:	89 45 b4             	mov    %eax,-0x4c(%ebp)
        while (start < end) {
c010cfda:	e9 b1 00 00 00       	jmp    c010d090 <load_icode+0x2ed>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010cfdf:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010cfe2:	8b 40 0c             	mov    0xc(%eax),%eax
c010cfe5:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010cfe8:	89 54 24 08          	mov    %edx,0x8(%esp)
c010cfec:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010cfef:	89 54 24 04          	mov    %edx,0x4(%esp)
c010cff3:	89 04 24             	mov    %eax,(%esp)
c010cff6:	e8 4a 90 ff ff       	call   c0106045 <pgdir_alloc_page>
c010cffb:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cffe:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010d002:	75 0c                	jne    c010d010 <load_icode+0x26d>
                ret = -E_NO_MEM;
c010d004:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
                goto bad_cleanup_mmap;
c010d00b:	e9 9a 05 00 00       	jmp    c010d5aa <load_icode+0x807>
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010d010:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010d013:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010d016:	29 c2                	sub    %eax,%edx
c010d018:	89 d0                	mov    %edx,%eax
c010d01a:	89 45 b0             	mov    %eax,-0x50(%ebp)
c010d01d:	b8 00 10 00 00       	mov    $0x1000,%eax
c010d022:	2b 45 b0             	sub    -0x50(%ebp),%eax
c010d025:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010d028:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010d02f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010d032:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d035:	73 0d                	jae    c010d044 <load_icode+0x2a1>
                size -= la - end;
c010d037:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010d03a:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010d03d:	29 c2                	sub    %eax,%edx
c010d03f:	89 d0                	mov    %edx,%eax
c010d041:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            if ((ret = load_icode_read(fd, page2kva(page) + off, size, offset)) != 0) {
c010d044:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d047:	89 04 24             	mov    %eax,(%esp)
c010d04a:	e8 ac ed ff ff       	call   c010bdfb <page2kva>
c010d04f:	8b 55 b0             	mov    -0x50(%ebp),%edx
c010d052:	01 c2                	add    %eax,%edx
c010d054:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d057:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d05b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d05e:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d062:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d066:	8b 45 08             	mov    0x8(%ebp),%eax
c010d069:	89 04 24             	mov    %eax,(%esp)
c010d06c:	e8 ca fc ff ff       	call   c010cd3b <load_icode_read>
c010d071:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d074:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d078:	74 05                	je     c010d07f <load_icode+0x2dc>
                goto bad_cleanup_mmap;
c010d07a:	e9 2b 05 00 00       	jmp    c010d5aa <load_icode+0x807>
            }
            start += size, offset += size;
c010d07f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d082:	01 45 d8             	add    %eax,-0x28(%ebp)
c010d085:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010d088:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d08b:	01 d0                	add    %edx,%eax
c010d08d:	89 45 e0             	mov    %eax,-0x20(%ebp)
        uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE);

        ret = -E_NO_MEM;

        end = ph->p_va + ph->p_filesz;
        while (start < end) {
c010d090:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d093:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
c010d096:	0f 82 43 ff ff ff    	jb     c010cfdf <load_icode+0x23c>
            if ((ret = load_icode_read(fd, page2kva(page) + off, size, offset)) != 0) {
                goto bad_cleanup_mmap;
            }
            start += size, offset += size;
        }
        end = ph->p_va + ph->p_memsz;
c010d09c:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d09f:	8b 50 08             	mov    0x8(%eax),%edx
c010d0a2:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d0a5:	8b 40 14             	mov    0x14(%eax),%eax
c010d0a8:	01 d0                	add    %edx,%eax
c010d0aa:	89 45 b4             	mov    %eax,-0x4c(%ebp)

        if (start < la) {
c010d0ad:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d0b0:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d0b3:	0f 83 b0 00 00 00    	jae    c010d169 <load_icode+0x3c6>
            /* ph->p_memsz == ph->p_filesz */
            if (start == end) {
c010d0b9:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d0bc:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
c010d0bf:	75 05                	jne    c010d0c6 <load_icode+0x323>
                continue ;
c010d0c1:	e9 46 01 00 00       	jmp    c010d20c <load_icode+0x469>
            }
            off = start + PGSIZE - la, size = PGSIZE - off;
c010d0c6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010d0c9:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010d0cc:	29 c2                	sub    %eax,%edx
c010d0ce:	89 d0                	mov    %edx,%eax
c010d0d0:	05 00 10 00 00       	add    $0x1000,%eax
c010d0d5:	89 45 b0             	mov    %eax,-0x50(%ebp)
c010d0d8:	b8 00 10 00 00       	mov    $0x1000,%eax
c010d0dd:	2b 45 b0             	sub    -0x50(%ebp),%eax
c010d0e0:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (end < la) {
c010d0e3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010d0e6:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d0e9:	73 0d                	jae    c010d0f8 <load_icode+0x355>
                size -= la - end;
c010d0eb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010d0ee:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010d0f1:	29 c2                	sub    %eax,%edx
c010d0f3:	89 d0                	mov    %edx,%eax
c010d0f5:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010d0f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d0fb:	89 04 24             	mov    %eax,(%esp)
c010d0fe:	e8 f8 ec ff ff       	call   c010bdfb <page2kva>
c010d103:	8b 55 b0             	mov    -0x50(%ebp),%edx
c010d106:	01 c2                	add    %eax,%edx
c010d108:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d10b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d10f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d116:	00 
c010d117:	89 14 24             	mov    %edx,(%esp)
c010d11a:	e8 26 84 00 00       	call   c0115545 <memset>
            start += size;
c010d11f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d122:	01 45 d8             	add    %eax,-0x28(%ebp)
            assert((end < la && start == end) || (end >= la && start == la));
c010d125:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010d128:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d12b:	73 08                	jae    c010d135 <load_icode+0x392>
c010d12d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d130:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
c010d133:	74 34                	je     c010d169 <load_icode+0x3c6>
c010d135:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010d138:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d13b:	72 08                	jb     c010d145 <load_icode+0x3a2>
c010d13d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d140:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d143:	74 24                	je     c010d169 <load_icode+0x3c6>
c010d145:	c7 44 24 0c 20 81 11 	movl   $0xc0118120,0xc(%esp)
c010d14c:	c0 
c010d14d:	c7 44 24 08 5f 80 11 	movl   $0xc011805f,0x8(%esp)
c010d154:	c0 
c010d155:	c7 44 24 04 bd 02 00 	movl   $0x2bd,0x4(%esp)
c010d15c:	00 
c010d15d:	c7 04 24 38 80 11 c0 	movl   $0xc0118038,(%esp)
c010d164:	e8 5f 3d ff ff       	call   c0100ec8 <__panic>
        }
        while (start < end) {
c010d169:	e9 92 00 00 00       	jmp    c010d200 <load_icode+0x45d>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010d16e:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d171:	8b 40 0c             	mov    0xc(%eax),%eax
c010d174:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010d177:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d17b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010d17e:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d182:	89 04 24             	mov    %eax,(%esp)
c010d185:	e8 bb 8e ff ff       	call   c0106045 <pgdir_alloc_page>
c010d18a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d18d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010d191:	75 0c                	jne    c010d19f <load_icode+0x3fc>
                ret = -E_NO_MEM;
c010d193:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
                goto bad_cleanup_mmap;
c010d19a:	e9 0b 04 00 00       	jmp    c010d5aa <load_icode+0x807>
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010d19f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010d1a2:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010d1a5:	29 c2                	sub    %eax,%edx
c010d1a7:	89 d0                	mov    %edx,%eax
c010d1a9:	89 45 b0             	mov    %eax,-0x50(%ebp)
c010d1ac:	b8 00 10 00 00       	mov    $0x1000,%eax
c010d1b1:	2b 45 b0             	sub    -0x50(%ebp),%eax
c010d1b4:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010d1b7:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010d1be:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010d1c1:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d1c4:	73 0d                	jae    c010d1d3 <load_icode+0x430>
                size -= la - end;
c010d1c6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010d1c9:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010d1cc:	29 c2                	sub    %eax,%edx
c010d1ce:	89 d0                	mov    %edx,%eax
c010d1d0:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010d1d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d1d6:	89 04 24             	mov    %eax,(%esp)
c010d1d9:	e8 1d ec ff ff       	call   c010bdfb <page2kva>
c010d1de:	8b 55 b0             	mov    -0x50(%ebp),%edx
c010d1e1:	01 c2                	add    %eax,%edx
c010d1e3:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d1e6:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d1ea:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d1f1:	00 
c010d1f2:	89 14 24             	mov    %edx,(%esp)
c010d1f5:	e8 4b 83 00 00       	call   c0115545 <memset>
            start += size;
c010d1fa:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d1fd:	01 45 d8             	add    %eax,-0x28(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
            start += size;
            assert((end < la && start == end) || (end >= la && start == la));
        }
        while (start < end) {
c010d200:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d203:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
c010d206:	0f 82 62 ff ff ff    	jb     c010d16e <load_icode+0x3cb>
        goto bad_elf_cleanup_pgdir;
    }

    struct proghdr __ph, *ph = &__ph;
    uint32_t vm_flags, perm, phnum;
    for (phnum = 0; phnum < elf->e_phnum; phnum ++) {
c010d20c:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
c010d210:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010d213:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c010d217:	0f b7 c0             	movzwl %ax,%eax
c010d21a:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c010d21d:	0f 87 77 fc ff ff    	ja     c010ce9a <load_icode+0xf7>
            }
            memset(page2kva(page) + off, 0, size);
            start += size;
        }
    }
    sysfile_close(fd);
c010d223:	8b 45 08             	mov    0x8(%ebp),%eax
c010d226:	89 04 24             	mov    %eax,(%esp)
c010d229:	e8 d5 e3 ff ff       	call   c010b603 <sysfile_close>

    vm_flags = VM_READ | VM_WRITE | VM_STACK;
c010d22e:	c7 45 ec 0b 00 00 00 	movl   $0xb,-0x14(%ebp)
    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
c010d235:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010d23c:	00 
c010d23d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d240:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d244:	c7 44 24 08 00 00 10 	movl   $0x100000,0x8(%esp)
c010d24b:	00 
c010d24c:	c7 44 24 04 00 00 f0 	movl   $0xaff00000,0x4(%esp)
c010d253:	af 
c010d254:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d257:	89 04 24             	mov    %eax,(%esp)
c010d25a:	e8 ce b0 ff ff       	call   c010832d <mm_map>
c010d25f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d262:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d266:	74 05                	je     c010d26d <load_icode+0x4ca>
        goto bad_cleanup_mmap;
c010d268:	e9 3d 03 00 00       	jmp    c010d5aa <load_icode+0x807>
    }
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-PGSIZE , PTE_USER) != NULL);
c010d26d:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d270:	8b 40 0c             	mov    0xc(%eax),%eax
c010d273:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010d27a:	00 
c010d27b:	c7 44 24 04 00 f0 ff 	movl   $0xaffff000,0x4(%esp)
c010d282:	af 
c010d283:	89 04 24             	mov    %eax,(%esp)
c010d286:	e8 ba 8d ff ff       	call   c0106045 <pgdir_alloc_page>
c010d28b:	85 c0                	test   %eax,%eax
c010d28d:	75 24                	jne    c010d2b3 <load_icode+0x510>
c010d28f:	c7 44 24 0c 5c 81 11 	movl   $0xc011815c,0xc(%esp)
c010d296:	c0 
c010d297:	c7 44 24 08 5f 80 11 	movl   $0xc011805f,0x8(%esp)
c010d29e:	c0 
c010d29f:	c7 44 24 04 d2 02 00 	movl   $0x2d2,0x4(%esp)
c010d2a6:	00 
c010d2a7:	c7 04 24 38 80 11 c0 	movl   $0xc0118038,(%esp)
c010d2ae:	e8 15 3c ff ff       	call   c0100ec8 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-2*PGSIZE , PTE_USER) != NULL);
c010d2b3:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d2b6:	8b 40 0c             	mov    0xc(%eax),%eax
c010d2b9:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010d2c0:	00 
c010d2c1:	c7 44 24 04 00 e0 ff 	movl   $0xafffe000,0x4(%esp)
c010d2c8:	af 
c010d2c9:	89 04 24             	mov    %eax,(%esp)
c010d2cc:	e8 74 8d ff ff       	call   c0106045 <pgdir_alloc_page>
c010d2d1:	85 c0                	test   %eax,%eax
c010d2d3:	75 24                	jne    c010d2f9 <load_icode+0x556>
c010d2d5:	c7 44 24 0c a0 81 11 	movl   $0xc01181a0,0xc(%esp)
c010d2dc:	c0 
c010d2dd:	c7 44 24 08 5f 80 11 	movl   $0xc011805f,0x8(%esp)
c010d2e4:	c0 
c010d2e5:	c7 44 24 04 d3 02 00 	movl   $0x2d3,0x4(%esp)
c010d2ec:	00 
c010d2ed:	c7 04 24 38 80 11 c0 	movl   $0xc0118038,(%esp)
c010d2f4:	e8 cf 3b ff ff       	call   c0100ec8 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-3*PGSIZE , PTE_USER) != NULL);
c010d2f9:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d2fc:	8b 40 0c             	mov    0xc(%eax),%eax
c010d2ff:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010d306:	00 
c010d307:	c7 44 24 04 00 d0 ff 	movl   $0xafffd000,0x4(%esp)
c010d30e:	af 
c010d30f:	89 04 24             	mov    %eax,(%esp)
c010d312:	e8 2e 8d ff ff       	call   c0106045 <pgdir_alloc_page>
c010d317:	85 c0                	test   %eax,%eax
c010d319:	75 24                	jne    c010d33f <load_icode+0x59c>
c010d31b:	c7 44 24 0c e4 81 11 	movl   $0xc01181e4,0xc(%esp)
c010d322:	c0 
c010d323:	c7 44 24 08 5f 80 11 	movl   $0xc011805f,0x8(%esp)
c010d32a:	c0 
c010d32b:	c7 44 24 04 d4 02 00 	movl   $0x2d4,0x4(%esp)
c010d332:	00 
c010d333:	c7 04 24 38 80 11 c0 	movl   $0xc0118038,(%esp)
c010d33a:	e8 89 3b ff ff       	call   c0100ec8 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-4*PGSIZE , PTE_USER) != NULL);
c010d33f:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d342:	8b 40 0c             	mov    0xc(%eax),%eax
c010d345:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010d34c:	00 
c010d34d:	c7 44 24 04 00 c0 ff 	movl   $0xafffc000,0x4(%esp)
c010d354:	af 
c010d355:	89 04 24             	mov    %eax,(%esp)
c010d358:	e8 e8 8c ff ff       	call   c0106045 <pgdir_alloc_page>
c010d35d:	85 c0                	test   %eax,%eax
c010d35f:	75 24                	jne    c010d385 <load_icode+0x5e2>
c010d361:	c7 44 24 0c 28 82 11 	movl   $0xc0118228,0xc(%esp)
c010d368:	c0 
c010d369:	c7 44 24 08 5f 80 11 	movl   $0xc011805f,0x8(%esp)
c010d370:	c0 
c010d371:	c7 44 24 04 d5 02 00 	movl   $0x2d5,0x4(%esp)
c010d378:	00 
c010d379:	c7 04 24 38 80 11 c0 	movl   $0xc0118038,(%esp)
c010d380:	e8 43 3b ff ff       	call   c0100ec8 <__panic>
    
    mm_count_inc(mm);
c010d385:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d388:	89 04 24             	mov    %eax,(%esp)
c010d38b:	e8 09 eb ff ff       	call   c010be99 <mm_count_inc>
    current->mm = mm;
c010d390:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d395:	8b 55 c8             	mov    -0x38(%ebp),%edx
c010d398:	89 50 18             	mov    %edx,0x18(%eax)
    current->cr3 = PADDR(mm->pgdir);
c010d39b:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d3a0:	8b 55 c8             	mov    -0x38(%ebp),%edx
c010d3a3:	8b 52 0c             	mov    0xc(%edx),%edx
c010d3a6:	89 55 ac             	mov    %edx,-0x54(%ebp)
c010d3a9:	81 7d ac ff ff ff bf 	cmpl   $0xbfffffff,-0x54(%ebp)
c010d3b0:	77 23                	ja     c010d3d5 <load_icode+0x632>
c010d3b2:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010d3b5:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d3b9:	c7 44 24 08 14 80 11 	movl   $0xc0118014,0x8(%esp)
c010d3c0:	c0 
c010d3c1:	c7 44 24 04 d9 02 00 	movl   $0x2d9,0x4(%esp)
c010d3c8:	00 
c010d3c9:	c7 04 24 38 80 11 c0 	movl   $0xc0118038,(%esp)
c010d3d0:	e8 f3 3a ff ff       	call   c0100ec8 <__panic>
c010d3d5:	8b 55 ac             	mov    -0x54(%ebp),%edx
c010d3d8:	81 c2 00 00 00 40    	add    $0x40000000,%edx
c010d3de:	89 50 40             	mov    %edx,0x40(%eax)
    lcr3(PADDR(mm->pgdir));
c010d3e1:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d3e4:	8b 40 0c             	mov    0xc(%eax),%eax
c010d3e7:	89 45 a8             	mov    %eax,-0x58(%ebp)
c010d3ea:	81 7d a8 ff ff ff bf 	cmpl   $0xbfffffff,-0x58(%ebp)
c010d3f1:	77 23                	ja     c010d416 <load_icode+0x673>
c010d3f3:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010d3f6:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d3fa:	c7 44 24 08 14 80 11 	movl   $0xc0118014,0x8(%esp)
c010d401:	c0 
c010d402:	c7 44 24 04 da 02 00 	movl   $0x2da,0x4(%esp)
c010d409:	00 
c010d40a:	c7 04 24 38 80 11 c0 	movl   $0xc0118038,(%esp)
c010d411:	e8 b2 3a ff ff       	call   c0100ec8 <__panic>
c010d416:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010d419:	05 00 00 00 40       	add    $0x40000000,%eax
c010d41e:	89 45 98             	mov    %eax,-0x68(%ebp)
c010d421:	8b 45 98             	mov    -0x68(%ebp),%eax
c010d424:	0f 22 d8             	mov    %eax,%cr3

    //setup argc, argv
    uint32_t argv_size=0, i;
c010d427:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
    for (i = 0; i < argc; i ++) {
c010d42e:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
c010d435:	eb 30                	jmp    c010d467 <load_icode+0x6c4>
        argv_size += strnlen(kargv[i],EXEC_MAX_ARG_LEN + 1)+1;
c010d437:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010d43a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d441:	8b 45 10             	mov    0x10(%ebp),%eax
c010d444:	01 d0                	add    %edx,%eax
c010d446:	8b 00                	mov    (%eax),%eax
c010d448:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c010d44f:	00 
c010d450:	89 04 24             	mov    %eax,(%esp)
c010d453:	e8 bf 7d 00 00       	call   c0115217 <strnlen>
c010d458:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010d45b:	01 d0                	add    %edx,%eax
c010d45d:	83 c0 01             	add    $0x1,%eax
c010d460:	89 45 d0             	mov    %eax,-0x30(%ebp)
    current->cr3 = PADDR(mm->pgdir);
    lcr3(PADDR(mm->pgdir));

    //setup argc, argv
    uint32_t argv_size=0, i;
    for (i = 0; i < argc; i ++) {
c010d463:	83 45 cc 01          	addl   $0x1,-0x34(%ebp)
c010d467:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d46a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
c010d46d:	77 c8                	ja     c010d437 <load_icode+0x694>
        argv_size += strnlen(kargv[i],EXEC_MAX_ARG_LEN + 1)+1;
    }

    uintptr_t stacktop = USTACKTOP - (argv_size/sizeof(long)+1)*sizeof(long);
c010d46f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010d472:	c1 e8 02             	shr    $0x2,%eax
c010d475:	89 c2                	mov    %eax,%edx
c010d477:	b8 00 00 00 00       	mov    $0x0,%eax
c010d47c:	29 d0                	sub    %edx,%eax
c010d47e:	c1 e0 02             	shl    $0x2,%eax
c010d481:	2d 04 00 00 50       	sub    $0x50000004,%eax
c010d486:	89 45 a4             	mov    %eax,-0x5c(%ebp)
    char** uargv=(char **)(stacktop  - argc * sizeof(char *));
c010d489:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d48c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d493:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010d496:	29 d0                	sub    %edx,%eax
c010d498:	89 45 a0             	mov    %eax,-0x60(%ebp)
    
    argv_size = 0;
c010d49b:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
    for (i = 0; i < argc; i ++) {
c010d4a2:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
c010d4a9:	eb 67                	jmp    c010d512 <load_icode+0x76f>
        uargv[i] = strcpy((char *)(stacktop + argv_size ), kargv[i]);
c010d4ab:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010d4ae:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d4b5:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010d4b8:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
c010d4bb:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010d4be:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d4c5:	8b 45 10             	mov    0x10(%ebp),%eax
c010d4c8:	01 d0                	add    %edx,%eax
c010d4ca:	8b 10                	mov    (%eax),%edx
c010d4cc:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010d4cf:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
c010d4d2:	01 c8                	add    %ecx,%eax
c010d4d4:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d4d8:	89 04 24             	mov    %eax,(%esp)
c010d4db:	e8 8e 7d 00 00       	call   c011526e <strcpy>
c010d4e0:	89 03                	mov    %eax,(%ebx)
        argv_size +=  strnlen(kargv[i],EXEC_MAX_ARG_LEN + 1)+1;
c010d4e2:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010d4e5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d4ec:	8b 45 10             	mov    0x10(%ebp),%eax
c010d4ef:	01 d0                	add    %edx,%eax
c010d4f1:	8b 00                	mov    (%eax),%eax
c010d4f3:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c010d4fa:	00 
c010d4fb:	89 04 24             	mov    %eax,(%esp)
c010d4fe:	e8 14 7d 00 00       	call   c0115217 <strnlen>
c010d503:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010d506:	01 d0                	add    %edx,%eax
c010d508:	83 c0 01             	add    $0x1,%eax
c010d50b:	89 45 d0             	mov    %eax,-0x30(%ebp)

    uintptr_t stacktop = USTACKTOP - (argv_size/sizeof(long)+1)*sizeof(long);
    char** uargv=(char **)(stacktop  - argc * sizeof(char *));
    
    argv_size = 0;
    for (i = 0; i < argc; i ++) {
c010d50e:	83 45 cc 01          	addl   $0x1,-0x34(%ebp)
c010d512:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d515:	3b 45 cc             	cmp    -0x34(%ebp),%eax
c010d518:	77 91                	ja     c010d4ab <load_icode+0x708>
        uargv[i] = strcpy((char *)(stacktop + argv_size ), kargv[i]);
        argv_size +=  strnlen(kargv[i],EXEC_MAX_ARG_LEN + 1)+1;
    }
    
    stacktop = (uintptr_t)uargv - sizeof(int);
c010d51a:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010d51d:	83 e8 04             	sub    $0x4,%eax
c010d520:	89 45 a4             	mov    %eax,-0x5c(%ebp)
    *(int *)stacktop = argc;
c010d523:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010d526:	8b 55 0c             	mov    0xc(%ebp),%edx
c010d529:	89 10                	mov    %edx,(%eax)
    
    struct trapframe *tf = current->tf;
c010d52b:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d530:	8b 40 3c             	mov    0x3c(%eax),%eax
c010d533:	89 45 9c             	mov    %eax,-0x64(%ebp)
    memset(tf, 0, sizeof(struct trapframe));
c010d536:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
c010d53d:	00 
c010d53e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d545:	00 
c010d546:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d549:	89 04 24             	mov    %eax,(%esp)
c010d54c:	e8 f4 7f 00 00       	call   c0115545 <memset>
    tf->tf_cs = USER_CS;
c010d551:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d554:	66 c7 40 3c 1b 00    	movw   $0x1b,0x3c(%eax)
    tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS;
c010d55a:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d55d:	66 c7 40 48 23 00    	movw   $0x23,0x48(%eax)
c010d563:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d566:	0f b7 50 48          	movzwl 0x48(%eax),%edx
c010d56a:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d56d:	66 89 50 28          	mov    %dx,0x28(%eax)
c010d571:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d574:	0f b7 50 28          	movzwl 0x28(%eax),%edx
c010d578:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d57b:	66 89 50 2c          	mov    %dx,0x2c(%eax)
    tf->tf_esp = stacktop;
c010d57f:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d582:	8b 55 a4             	mov    -0x5c(%ebp),%edx
c010d585:	89 50 44             	mov    %edx,0x44(%eax)
    tf->tf_eip = elf->e_entry;
c010d588:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010d58b:	8b 50 18             	mov    0x18(%eax),%edx
c010d58e:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d591:	89 50 38             	mov    %edx,0x38(%eax)
    tf->tf_eflags = FL_IF;
c010d594:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d597:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
    ret = 0;
c010d59e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
out:
    return ret;
c010d5a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d5a8:	eb 23                	jmp    c010d5cd <load_icode+0x82a>
bad_cleanup_mmap:
    exit_mmap(mm);
c010d5aa:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d5ad:	89 04 24             	mov    %eax,(%esp)
c010d5b0:	e8 95 af ff ff       	call   c010854a <exit_mmap>
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
c010d5b5:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d5b8:	89 04 24             	mov    %eax,(%esp)
c010d5bb:	e8 36 f1 ff ff       	call   c010c6f6 <put_pgdir>
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010d5c0:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d5c3:	89 04 24             	mov    %eax,(%esp)
c010d5c6:	e8 c0 ac ff ff       	call   c010828b <mm_destroy>
bad_mm:
    goto out;
c010d5cb:	eb d8                	jmp    c010d5a5 <load_icode+0x802>
}
c010d5cd:	81 c4 e4 00 00 00    	add    $0xe4,%esp
c010d5d3:	5b                   	pop    %ebx
c010d5d4:	5d                   	pop    %ebp
c010d5d5:	c3                   	ret    

c010d5d6 <put_kargv>:

// this function isn't very correct in LAB8
static void
put_kargv(int argc, char **kargv) {
c010d5d6:	55                   	push   %ebp
c010d5d7:	89 e5                	mov    %esp,%ebp
c010d5d9:	83 ec 18             	sub    $0x18,%esp
    while (argc > 0) {
c010d5dc:	eb 1d                	jmp    c010d5fb <put_kargv+0x25>
        kfree(kargv[-- argc]);
c010d5de:	83 6d 08 01          	subl   $0x1,0x8(%ebp)
c010d5e2:	8b 45 08             	mov    0x8(%ebp),%eax
c010d5e5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d5ec:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d5ef:	01 d0                	add    %edx,%eax
c010d5f1:	8b 00                	mov    (%eax),%eax
c010d5f3:	89 04 24             	mov    %eax,(%esp)
c010d5f6:	e8 ff 76 ff ff       	call   c0104cfa <kfree>
}

// this function isn't very correct in LAB8
static void
put_kargv(int argc, char **kargv) {
    while (argc > 0) {
c010d5fb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010d5ff:	7f dd                	jg     c010d5de <put_kargv+0x8>
        kfree(kargv[-- argc]);
    }
}
c010d601:	c9                   	leave  
c010d602:	c3                   	ret    

c010d603 <copy_kargv>:

static int
copy_kargv(struct mm_struct *mm, int argc, char **kargv, const char **argv) {
c010d603:	55                   	push   %ebp
c010d604:	89 e5                	mov    %esp,%ebp
c010d606:	83 ec 28             	sub    $0x28,%esp
    int i, ret = -E_INVAL;
c010d609:	c7 45 f0 fd ff ff ff 	movl   $0xfffffffd,-0x10(%ebp)
    if (!user_mem_check(mm, (uintptr_t)argv, sizeof(const char *) * argc, 0)) {
c010d610:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d613:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d61a:	8b 45 14             	mov    0x14(%ebp),%eax
c010d61d:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010d624:	00 
c010d625:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d629:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d62d:	8b 45 08             	mov    0x8(%ebp),%eax
c010d630:	89 04 24             	mov    %eax,(%esp)
c010d633:	e8 ec b9 ff ff       	call   c0109024 <user_mem_check>
c010d638:	85 c0                	test   %eax,%eax
c010d63a:	75 08                	jne    c010d644 <copy_kargv+0x41>
        return ret;
c010d63c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d63f:	e9 a4 00 00 00       	jmp    c010d6e8 <copy_kargv+0xe5>
    }
    for (i = 0; i < argc; i ++) {
c010d644:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010d64b:	eb 77                	jmp    c010d6c4 <copy_kargv+0xc1>
        char *buffer;
        if ((buffer = kmalloc(EXEC_MAX_ARG_LEN + 1)) == NULL) {
c010d64d:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c010d654:	e8 86 76 ff ff       	call   c0104cdf <kmalloc>
c010d659:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010d65c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010d660:	75 0a                	jne    c010d66c <copy_kargv+0x69>
            goto failed_nomem;
c010d662:	90                   	nop
        kargv[i] = buffer;
    }
    return 0;

failed_nomem:
    ret = -E_NO_MEM;
c010d663:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
c010d66a:	eb 67                	jmp    c010d6d3 <copy_kargv+0xd0>
    for (i = 0; i < argc; i ++) {
        char *buffer;
        if ((buffer = kmalloc(EXEC_MAX_ARG_LEN + 1)) == NULL) {
            goto failed_nomem;
        }
        if (!copy_string(mm, buffer, argv[i], EXEC_MAX_ARG_LEN + 1)) {
c010d66c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d66f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d676:	8b 45 14             	mov    0x14(%ebp),%eax
c010d679:	01 d0                	add    %edx,%eax
c010d67b:	8b 00                	mov    (%eax),%eax
c010d67d:	c7 44 24 0c 00 10 00 	movl   $0x1000,0xc(%esp)
c010d684:	00 
c010d685:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d689:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d68c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d690:	8b 45 08             	mov    0x8(%ebp),%eax
c010d693:	89 04 24             	mov    %eax,(%esp)
c010d696:	e8 ac ba ff ff       	call   c0109147 <copy_string>
c010d69b:	85 c0                	test   %eax,%eax
c010d69d:	75 0d                	jne    c010d6ac <copy_kargv+0xa9>
            kfree(buffer);
c010d69f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d6a2:	89 04 24             	mov    %eax,(%esp)
c010d6a5:	e8 50 76 ff ff       	call   c0104cfa <kfree>
            goto failed_cleanup;
c010d6aa:	eb 27                	jmp    c010d6d3 <copy_kargv+0xd0>
        }
        kargv[i] = buffer;
c010d6ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d6af:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d6b6:	8b 45 10             	mov    0x10(%ebp),%eax
c010d6b9:	01 c2                	add    %eax,%edx
c010d6bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d6be:	89 02                	mov    %eax,(%edx)
copy_kargv(struct mm_struct *mm, int argc, char **kargv, const char **argv) {
    int i, ret = -E_INVAL;
    if (!user_mem_check(mm, (uintptr_t)argv, sizeof(const char *) * argc, 0)) {
        return ret;
    }
    for (i = 0; i < argc; i ++) {
c010d6c0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010d6c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d6c7:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010d6ca:	7c 81                	jl     c010d64d <copy_kargv+0x4a>
            kfree(buffer);
            goto failed_cleanup;
        }
        kargv[i] = buffer;
    }
    return 0;
c010d6cc:	b8 00 00 00 00       	mov    $0x0,%eax
c010d6d1:	eb 15                	jmp    c010d6e8 <copy_kargv+0xe5>

failed_nomem:
    ret = -E_NO_MEM;
failed_cleanup:
    put_kargv(i, kargv);
c010d6d3:	8b 45 10             	mov    0x10(%ebp),%eax
c010d6d6:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d6da:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d6dd:	89 04 24             	mov    %eax,(%esp)
c010d6e0:	e8 f1 fe ff ff       	call   c010d5d6 <put_kargv>
    return ret;
c010d6e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010d6e8:	c9                   	leave  
c010d6e9:	c3                   	ret    

c010d6ea <do_execve>:

// do_execve - call exit_mmap(mm)&pug_pgdir(mm) to reclaim memory space of current process
//           - call load_icode to setup new memory space accroding binary prog.
int
do_execve(const char *name, int argc, const char **argv) {
c010d6ea:	55                   	push   %ebp
c010d6eb:	89 e5                	mov    %esp,%ebp
c010d6ed:	81 ec e8 00 00 00    	sub    $0xe8,%esp
    static_assert(EXEC_MAX_ARG_LEN >= FS_MAX_FPATH_LEN);
    struct mm_struct *mm = current->mm;
c010d6f3:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d6f8:	8b 40 18             	mov    0x18(%eax),%eax
c010d6fb:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!(argc >= 1 && argc <= EXEC_MAX_ARG_NUM)) {
c010d6fe:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010d702:	7e 06                	jle    c010d70a <do_execve+0x20>
c010d704:	83 7d 0c 20          	cmpl   $0x20,0xc(%ebp)
c010d708:	7e 0a                	jle    c010d714 <do_execve+0x2a>
        return -E_INVAL;
c010d70a:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010d70f:	e9 11 02 00 00       	jmp    c010d925 <do_execve+0x23b>
    }

    char local_name[PROC_NAME_LEN + 1];
    memset(local_name, 0, sizeof(local_name));
c010d714:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010d71b:	00 
c010d71c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d723:	00 
c010d724:	8d 45 b1             	lea    -0x4f(%ebp),%eax
c010d727:	89 04 24             	mov    %eax,(%esp)
c010d72a:	e8 16 7e 00 00       	call   c0115545 <memset>
    
    char *kargv[EXEC_MAX_ARG_NUM];
    const char *path;
    
    int ret = -E_INVAL;
c010d72f:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    
    lock_mm(mm);
c010d736:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d739:	89 04 24             	mov    %eax,(%esp)
c010d73c:	e8 8c e7 ff ff       	call   c010becd <lock_mm>
    if (name == NULL) {
c010d741:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010d745:	75 29                	jne    c010d770 <do_execve+0x86>
        snprintf(local_name, sizeof(local_name), "<null> %d", current->pid);
c010d747:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d74c:	8b 40 04             	mov    0x4(%eax),%eax
c010d74f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d753:	c7 44 24 08 6b 82 11 	movl   $0xc011826b,0x8(%esp)
c010d75a:	c0 
c010d75b:	c7 44 24 04 33 00 00 	movl   $0x33,0x4(%esp)
c010d762:	00 
c010d763:	8d 45 b1             	lea    -0x4f(%ebp),%eax
c010d766:	89 04 24             	mov    %eax,(%esp)
c010d769:	e8 09 79 00 00       	call   c0115077 <snprintf>
c010d76e:	eb 38                	jmp    c010d7a8 <do_execve+0xbe>
    }
    else {
        if (!copy_string(mm, local_name, name, sizeof(local_name))) {
c010d770:	c7 44 24 0c 33 00 00 	movl   $0x33,0xc(%esp)
c010d777:	00 
c010d778:	8b 45 08             	mov    0x8(%ebp),%eax
c010d77b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d77f:	8d 45 b1             	lea    -0x4f(%ebp),%eax
c010d782:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d786:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d789:	89 04 24             	mov    %eax,(%esp)
c010d78c:	e8 b6 b9 ff ff       	call   c0109147 <copy_string>
c010d791:	85 c0                	test   %eax,%eax
c010d793:	75 13                	jne    c010d7a8 <do_execve+0xbe>
            unlock_mm(mm);
c010d795:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d798:	89 04 24             	mov    %eax,(%esp)
c010d79b:	e8 60 e7 ff ff       	call   c010bf00 <unlock_mm>
            return ret;
c010d7a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d7a3:	e9 7d 01 00 00       	jmp    c010d925 <do_execve+0x23b>
        }
    }
    if ((ret = copy_kargv(mm, argc, kargv, argv)) != 0) {
c010d7a8:	8b 45 10             	mov    0x10(%ebp),%eax
c010d7ab:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d7af:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
c010d7b5:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d7b9:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d7bc:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d7c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d7c3:	89 04 24             	mov    %eax,(%esp)
c010d7c6:	e8 38 fe ff ff       	call   c010d603 <copy_kargv>
c010d7cb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d7ce:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d7d2:	74 13                	je     c010d7e7 <do_execve+0xfd>
        unlock_mm(mm);
c010d7d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d7d7:	89 04 24             	mov    %eax,(%esp)
c010d7da:	e8 21 e7 ff ff       	call   c010bf00 <unlock_mm>
        return ret;
c010d7df:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d7e2:	e9 3e 01 00 00       	jmp    c010d925 <do_execve+0x23b>
    }
    path = argv[0];
c010d7e7:	8b 45 10             	mov    0x10(%ebp),%eax
c010d7ea:	8b 00                	mov    (%eax),%eax
c010d7ec:	89 45 ec             	mov    %eax,-0x14(%ebp)
    unlock_mm(mm);
c010d7ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d7f2:	89 04 24             	mov    %eax,(%esp)
c010d7f5:	e8 06 e7 ff ff       	call   c010bf00 <unlock_mm>
    files_closeall(current->filesp);
c010d7fa:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d7ff:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010d805:	89 04 24             	mov    %eax,(%esp)
c010d808:	e8 9b d9 ff ff       	call   c010b1a8 <files_closeall>

    /* sysfile_open will check the first argument path, thus we have to use a user-space pointer, and argv[0] may be incorrect */    
    int fd;
    if ((ret = fd = sysfile_open(path, O_RDONLY)) < 0) {
c010d80d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d814:	00 
c010d815:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d818:	89 04 24             	mov    %eax,(%esp)
c010d81b:	e8 98 dd ff ff       	call   c010b5b8 <sysfile_open>
c010d820:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010d823:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d826:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d829:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d82d:	79 05                	jns    c010d834 <do_execve+0x14a>
        goto execve_exit;
c010d82f:	e9 ae 00 00 00       	jmp    c010d8e2 <do_execve+0x1f8>
    }
    if (mm != NULL) {
c010d834:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010d838:	74 4a                	je     c010d884 <do_execve+0x19a>
        lcr3(boot_cr3);
c010d83a:	a1 24 30 15 c0       	mov    0xc0153024,%eax
c010d83f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010d842:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d845:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010d848:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d84b:	89 04 24             	mov    %eax,(%esp)
c010d84e:	e8 60 e6 ff ff       	call   c010beb3 <mm_count_dec>
c010d853:	85 c0                	test   %eax,%eax
c010d855:	75 21                	jne    c010d878 <do_execve+0x18e>
            exit_mmap(mm);
c010d857:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d85a:	89 04 24             	mov    %eax,(%esp)
c010d85d:	e8 e8 ac ff ff       	call   c010854a <exit_mmap>
            put_pgdir(mm);
c010d862:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d865:	89 04 24             	mov    %eax,(%esp)
c010d868:	e8 89 ee ff ff       	call   c010c6f6 <put_pgdir>
            mm_destroy(mm);
c010d86d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d870:	89 04 24             	mov    %eax,(%esp)
c010d873:	e8 13 aa ff ff       	call   c010828b <mm_destroy>
        }
        current->mm = NULL;
c010d878:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d87d:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    ret= -E_NO_MEM;;
c010d884:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    if ((ret = load_icode(fd, argc, kargv)) != 0) {
c010d88b:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
c010d891:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d895:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d898:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d89c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d89f:	89 04 24             	mov    %eax,(%esp)
c010d8a2:	e8 fc f4 ff ff       	call   c010cda3 <load_icode>
c010d8a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d8aa:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d8ae:	74 02                	je     c010d8b2 <do_execve+0x1c8>
        goto execve_exit;
c010d8b0:	eb 30                	jmp    c010d8e2 <do_execve+0x1f8>
    }
    put_kargv(argc, kargv);
c010d8b2:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
c010d8b8:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d8bc:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d8bf:	89 04 24             	mov    %eax,(%esp)
c010d8c2:	e8 0f fd ff ff       	call   c010d5d6 <put_kargv>
    set_proc_name(current, local_name);
c010d8c7:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d8cc:	8d 55 b1             	lea    -0x4f(%ebp),%edx
c010d8cf:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d8d3:	89 04 24             	mov    %eax,(%esp)
c010d8d6:	e8 13 e8 ff ff       	call   c010c0ee <set_proc_name>
    return 0;
c010d8db:	b8 00 00 00 00       	mov    $0x0,%eax
c010d8e0:	eb 43                	jmp    c010d925 <do_execve+0x23b>

execve_exit:
    put_kargv(argc, kargv);
c010d8e2:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
c010d8e8:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d8ec:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d8ef:	89 04 24             	mov    %eax,(%esp)
c010d8f2:	e8 df fc ff ff       	call   c010d5d6 <put_kargv>
    do_exit(ret);
c010d8f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d8fa:	89 04 24             	mov    %eax,(%esp)
c010d8fd:	e8 32 f2 ff ff       	call   c010cb34 <do_exit>
    panic("already exit: %e.\n", ret);
c010d902:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d905:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d909:	c7 44 24 08 75 82 11 	movl   $0xc0118275,0x8(%esp)
c010d910:	c0 
c010d911:	c7 44 24 04 61 03 00 	movl   $0x361,0x4(%esp)
c010d918:	00 
c010d919:	c7 04 24 38 80 11 c0 	movl   $0xc0118038,(%esp)
c010d920:	e8 a3 35 ff ff       	call   c0100ec8 <__panic>
}
c010d925:	c9                   	leave  
c010d926:	c3                   	ret    

c010d927 <do_yield>:

// do_yield - ask the scheduler to reschedule
int
do_yield(void) {
c010d927:	55                   	push   %ebp
c010d928:	89 e5                	mov    %esp,%ebp
    current->need_resched = 1;
c010d92a:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d92f:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    return 0;
c010d936:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010d93b:	5d                   	pop    %ebp
c010d93c:	c3                   	ret    

c010d93d <do_wait>:

// do_wait - wait one OR any children with PROC_ZOMBIE state, and free memory space of kernel stack
//         - proc struct of this child.
// NOTE: only after do_wait function, all resources of the child proces are free.
int
do_wait(int pid, int *code_store) {
c010d93d:	55                   	push   %ebp
c010d93e:	89 e5                	mov    %esp,%ebp
c010d940:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = current->mm;
c010d943:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d948:	8b 40 18             	mov    0x18(%eax),%eax
c010d94b:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (code_store != NULL) {
c010d94e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010d952:	74 30                	je     c010d984 <do_wait+0x47>
        if (!user_mem_check(mm, (uintptr_t)code_store, sizeof(int), 1)) {
c010d954:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d957:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010d95e:	00 
c010d95f:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c010d966:	00 
c010d967:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d96b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d96e:	89 04 24             	mov    %eax,(%esp)
c010d971:	e8 ae b6 ff ff       	call   c0109024 <user_mem_check>
c010d976:	85 c0                	test   %eax,%eax
c010d978:	75 0a                	jne    c010d984 <do_wait+0x47>
            return -E_INVAL;
c010d97a:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010d97f:	e9 57 01 00 00       	jmp    c010dadb <do_wait+0x19e>
    }

    struct proc_struct *proc;
    bool intr_flag, haskid;
repeat:
    haskid = 0;
c010d984:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    if (pid != 0) {
c010d98b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010d98f:	74 39                	je     c010d9ca <do_wait+0x8d>
        proc = find_proc(pid);
c010d991:	8b 45 08             	mov    0x8(%ebp),%eax
c010d994:	89 04 24             	mov    %eax,(%esp)
c010d997:	e8 6b eb ff ff       	call   c010c507 <find_proc>
c010d99c:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (proc != NULL && proc->parent == current) {
c010d99f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d9a3:	74 5a                	je     c010d9ff <do_wait+0xc2>
c010d9a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d9a8:	8b 50 14             	mov    0x14(%eax),%edx
c010d9ab:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d9b0:	39 c2                	cmp    %eax,%edx
c010d9b2:	75 4b                	jne    c010d9ff <do_wait+0xc2>
            haskid = 1;
c010d9b4:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010d9bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d9be:	8b 00                	mov    (%eax),%eax
c010d9c0:	83 f8 03             	cmp    $0x3,%eax
c010d9c3:	75 3a                	jne    c010d9ff <do_wait+0xc2>
                goto found;
c010d9c5:	e9 89 00 00 00       	jmp    c010da53 <do_wait+0x116>
            }
        }
    }
    else {
        proc = current->cptr;
c010d9ca:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d9cf:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010d9d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
        for (; proc != NULL; proc = proc->optr) {
c010d9d8:	eb 1f                	jmp    c010d9f9 <do_wait+0xbc>
            haskid = 1;
c010d9da:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010d9e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d9e4:	8b 00                	mov    (%eax),%eax
c010d9e6:	83 f8 03             	cmp    $0x3,%eax
c010d9e9:	75 02                	jne    c010d9ed <do_wait+0xb0>
                goto found;
c010d9eb:	eb 66                	jmp    c010da53 <do_wait+0x116>
            }
        }
    }
    else {
        proc = current->cptr;
        for (; proc != NULL; proc = proc->optr) {
c010d9ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d9f0:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010d9f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d9f9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d9fd:	75 db                	jne    c010d9da <do_wait+0x9d>
            if (proc->state == PROC_ZOMBIE) {
                goto found;
            }
        }
    }
    if (haskid) {
c010d9ff:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010da03:	74 44                	je     c010da49 <do_wait+0x10c>
        current->state = PROC_SLEEPING;
c010da05:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010da0a:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        current->wait_state = WT_CHILD;
c010da10:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010da15:	c7 80 90 00 00 00 01 	movl   $0x80000001,0x90(%eax)
c010da1c:	00 00 80 
        schedule();
c010da1f:	e8 56 0c 00 00       	call   c010e67a <schedule>
        if (current->flags & PF_EXITING) {
c010da24:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010da29:	8b 40 44             	mov    0x44(%eax),%eax
c010da2c:	83 e0 01             	and    $0x1,%eax
c010da2f:	85 c0                	test   %eax,%eax
c010da31:	74 11                	je     c010da44 <do_wait+0x107>
            do_exit(-E_KILLED);
c010da33:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c010da3a:	e8 f5 f0 ff ff       	call   c010cb34 <do_exit>
        }
        goto repeat;
c010da3f:	e9 40 ff ff ff       	jmp    c010d984 <do_wait+0x47>
c010da44:	e9 3b ff ff ff       	jmp    c010d984 <do_wait+0x47>
    }
    return -E_BAD_PROC;
c010da49:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
c010da4e:	e9 88 00 00 00       	jmp    c010dadb <do_wait+0x19e>

found:
    if (proc == idleproc || proc == initproc) {
c010da53:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010da58:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010da5b:	74 0a                	je     c010da67 <do_wait+0x12a>
c010da5d:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010da62:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010da65:	75 1c                	jne    c010da83 <do_wait+0x146>
        panic("wait idleproc or initproc.\n");
c010da67:	c7 44 24 08 88 82 11 	movl   $0xc0118288,0x8(%esp)
c010da6e:	c0 
c010da6f:	c7 44 24 04 9a 03 00 	movl   $0x39a,0x4(%esp)
c010da76:	00 
c010da77:	c7 04 24 38 80 11 c0 	movl   $0xc0118038,(%esp)
c010da7e:	e8 45 34 ff ff       	call   c0100ec8 <__panic>
    }
    if (code_store != NULL) {
c010da83:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010da87:	74 0e                	je     c010da97 <do_wait+0x15a>
        *code_store = proc->exit_code;
c010da89:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010da8c:	8b 90 8c 00 00 00    	mov    0x8c(%eax),%edx
c010da92:	8b 45 0c             	mov    0xc(%ebp),%eax
c010da95:	89 10                	mov    %edx,(%eax)
    }
    local_intr_save(intr_flag);
c010da97:	e8 a3 e2 ff ff       	call   c010bd3f <__intr_save>
c010da9c:	89 45 e8             	mov    %eax,-0x18(%ebp)
    {
        unhash_proc(proc);
c010da9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010daa2:	89 04 24             	mov    %eax,(%esp)
c010daa5:	e8 28 ea ff ff       	call   c010c4d2 <unhash_proc>
        remove_links(proc);
c010daaa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010daad:	89 04 24             	mov    %eax,(%esp)
c010dab0:	e8 78 e7 ff ff       	call   c010c22d <remove_links>
    }
    local_intr_restore(intr_flag);
c010dab5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010dab8:	89 04 24             	mov    %eax,(%esp)
c010dabb:	e8 a9 e2 ff ff       	call   c010bd69 <__intr_restore>
    put_kstack(proc);
c010dac0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dac3:	89 04 24             	mov    %eax,(%esp)
c010dac6:	e8 5e eb ff ff       	call   c010c629 <put_kstack>
    kfree(proc);
c010dacb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dace:	89 04 24             	mov    %eax,(%esp)
c010dad1:	e8 24 72 ff ff       	call   c0104cfa <kfree>
    return 0;
c010dad6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010dadb:	c9                   	leave  
c010dadc:	c3                   	ret    

c010dadd <do_kill>:

// do_kill - kill process with pid by set this process's flags with PF_EXITING
int
do_kill(int pid) {
c010dadd:	55                   	push   %ebp
c010dade:	89 e5                	mov    %esp,%ebp
c010dae0:	83 ec 28             	sub    $0x28,%esp
    struct proc_struct *proc;
    if ((proc = find_proc(pid)) != NULL) {
c010dae3:	8b 45 08             	mov    0x8(%ebp),%eax
c010dae6:	89 04 24             	mov    %eax,(%esp)
c010dae9:	e8 19 ea ff ff       	call   c010c507 <find_proc>
c010daee:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010daf1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010daf5:	74 44                	je     c010db3b <do_kill+0x5e>
        if (!(proc->flags & PF_EXITING)) {
c010daf7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dafa:	8b 40 44             	mov    0x44(%eax),%eax
c010dafd:	83 e0 01             	and    $0x1,%eax
c010db00:	85 c0                	test   %eax,%eax
c010db02:	75 30                	jne    c010db34 <do_kill+0x57>
            proc->flags |= PF_EXITING;
c010db04:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010db07:	8b 40 44             	mov    0x44(%eax),%eax
c010db0a:	83 c8 01             	or     $0x1,%eax
c010db0d:	89 c2                	mov    %eax,%edx
c010db0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010db12:	89 50 44             	mov    %edx,0x44(%eax)
            if (proc->wait_state & WT_INTERRUPTED) {
c010db15:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010db18:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010db1e:	85 c0                	test   %eax,%eax
c010db20:	79 0b                	jns    c010db2d <do_kill+0x50>
                wakeup_proc(proc);
c010db22:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010db25:	89 04 24             	mov    %eax,(%esp)
c010db28:	e8 b1 0a 00 00       	call   c010e5de <wakeup_proc>
            }
            return 0;
c010db2d:	b8 00 00 00 00       	mov    $0x0,%eax
c010db32:	eb 0c                	jmp    c010db40 <do_kill+0x63>
        }
        return -E_KILLED;
c010db34:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
c010db39:	eb 05                	jmp    c010db40 <do_kill+0x63>
    }
    return -E_INVAL;
c010db3b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010db40:	c9                   	leave  
c010db41:	c3                   	ret    

c010db42 <kernel_execve>:

// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
static int
kernel_execve(const char *name, const char **argv) {
c010db42:	55                   	push   %ebp
c010db43:	89 e5                	mov    %esp,%ebp
c010db45:	53                   	push   %ebx
c010db46:	83 ec 10             	sub    $0x10,%esp
    int argc = 0, ret;
c010db49:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (argv[argc] != NULL) {
c010db50:	eb 04                	jmp    c010db56 <kernel_execve+0x14>
        argc ++;
c010db52:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)

// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
static int
kernel_execve(const char *name, const char **argv) {
    int argc = 0, ret;
    while (argv[argc] != NULL) {
c010db56:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010db59:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010db60:	8b 45 0c             	mov    0xc(%ebp),%eax
c010db63:	01 d0                	add    %edx,%eax
c010db65:	8b 00                	mov    (%eax),%eax
c010db67:	85 c0                	test   %eax,%eax
c010db69:	75 e7                	jne    c010db52 <kernel_execve+0x10>
        argc ++;
    }
    asm volatile (
c010db6b:	b8 04 00 00 00       	mov    $0x4,%eax
c010db70:	8b 55 08             	mov    0x8(%ebp),%edx
c010db73:	8b 4d f8             	mov    -0x8(%ebp),%ecx
c010db76:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c010db79:	cd 80                	int    $0x80
c010db7b:	89 45 f4             	mov    %eax,-0xc(%ebp)
        "int %1;"
        : "=a" (ret)
        : "i" (T_SYSCALL), "0" (SYS_exec), "d" (name), "c" (argc), "b" (argv)
        : "memory");
    return ret;
c010db7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010db81:	83 c4 10             	add    $0x10,%esp
c010db84:	5b                   	pop    %ebx
c010db85:	5d                   	pop    %ebp
c010db86:	c3                   	ret    

c010db87 <user_main>:

#define KERNEL_EXECVE3(x, s, ...)               __KERNEL_EXECVE3(x, s, ##__VA_ARGS__)

// user_main - kernel thread used to exec a user program
static int
user_main(void *arg) {
c010db87:	55                   	push   %ebp
c010db88:	89 e5                	mov    %esp,%ebp
c010db8a:	83 ec 28             	sub    $0x28,%esp
    KERNEL_EXECVE3(TEST, TESTSCRIPT);
#else
    KERNEL_EXECVE2(TEST);
#endif
#else
    KERNEL_EXECVE(sh);
c010db8d:	c7 45 f0 a4 82 11 c0 	movl   $0xc01182a4,-0x10(%ebp)
c010db94:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010db9b:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010dba0:	8b 40 04             	mov    0x4(%eax),%eax
c010dba3:	c7 44 24 08 a4 82 11 	movl   $0xc01182a4,0x8(%esp)
c010dbaa:	c0 
c010dbab:	89 44 24 04          	mov    %eax,0x4(%esp)
c010dbaf:	c7 04 24 a8 82 11 c0 	movl   $0xc01182a8,(%esp)
c010dbb6:	e8 aa 27 ff ff       	call   c0100365 <cprintf>
c010dbbb:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010dbbe:	89 44 24 04          	mov    %eax,0x4(%esp)
c010dbc2:	c7 04 24 a4 82 11 c0 	movl   $0xc01182a4,(%esp)
c010dbc9:	e8 74 ff ff ff       	call   c010db42 <kernel_execve>
#endif
    panic("user_main execve failed.\n");
c010dbce:	c7 44 24 08 cf 82 11 	movl   $0xc01182cf,0x8(%esp)
c010dbd5:	c0 
c010dbd6:	c7 44 24 04 e5 03 00 	movl   $0x3e5,0x4(%esp)
c010dbdd:	00 
c010dbde:	c7 04 24 38 80 11 c0 	movl   $0xc0118038,(%esp)
c010dbe5:	e8 de 32 ff ff       	call   c0100ec8 <__panic>

c010dbea <init_main>:
}

// init_main - the second kernel thread used to create user_main kernel threads
static int
init_main(void *arg) {
c010dbea:	55                   	push   %ebp
c010dbeb:	89 e5                	mov    %esp,%ebp
c010dbed:	83 ec 38             	sub    $0x38,%esp
    int ret;
    if ((ret = vfs_set_bootfs("disk0:")) != 0) {
c010dbf0:	c7 04 24 e9 82 11 c0 	movl   $0xc01182e9,(%esp)
c010dbf7:	e8 89 18 00 00       	call   c010f485 <vfs_set_bootfs>
c010dbfc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010dbff:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010dc03:	74 23                	je     c010dc28 <init_main+0x3e>
        panic("set boot fs failed: %e.\n", ret);
c010dc05:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dc08:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010dc0c:	c7 44 24 08 f0 82 11 	movl   $0xc01182f0,0x8(%esp)
c010dc13:	c0 
c010dc14:	c7 44 24 04 ed 03 00 	movl   $0x3ed,0x4(%esp)
c010dc1b:	00 
c010dc1c:	c7 04 24 38 80 11 c0 	movl   $0xc0118038,(%esp)
c010dc23:	e8 a0 32 ff ff       	call   c0100ec8 <__panic>
    }
    
    size_t nr_free_pages_store = nr_free_pages();
c010dc28:	e8 d4 75 ff ff       	call   c0105201 <nr_free_pages>
c010dc2d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    size_t kernel_allocated_store = kallocated();
c010dc30:	e8 8d 6f ff ff       	call   c0104bc2 <kallocated>
c010dc35:	89 45 ec             	mov    %eax,-0x14(%ebp)

    int pid = kernel_thread(user_main, NULL, 0);
c010dc38:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010dc3f:	00 
c010dc40:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010dc47:	00 
c010dc48:	c7 04 24 87 db 10 c0 	movl   $0xc010db87,(%esp)
c010dc4f:	e8 27 e9 ff ff       	call   c010c57b <kernel_thread>
c010dc54:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (pid <= 0) {
c010dc57:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010dc5b:	7f 1c                	jg     c010dc79 <init_main+0x8f>
        panic("create user_main failed.\n");
c010dc5d:	c7 44 24 08 09 83 11 	movl   $0xc0118309,0x8(%esp)
c010dc64:	c0 
c010dc65:	c7 44 24 04 f5 03 00 	movl   $0x3f5,0x4(%esp)
c010dc6c:	00 
c010dc6d:	c7 04 24 38 80 11 c0 	movl   $0xc0118038,(%esp)
c010dc74:	e8 4f 32 ff ff       	call   c0100ec8 <__panic>
    }
 extern void check_sync(void);
    check_sync();                // check philosopher sync problem
c010dc79:	e8 9d ba ff ff       	call   c010971b <check_sync>

    while (do_wait(0, NULL) == 0) {
c010dc7e:	eb 05                	jmp    c010dc85 <init_main+0x9b>
        schedule();
c010dc80:	e8 f5 09 00 00       	call   c010e67a <schedule>
        panic("create user_main failed.\n");
    }
 extern void check_sync(void);
    check_sync();                // check philosopher sync problem

    while (do_wait(0, NULL) == 0) {
c010dc85:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010dc8c:	00 
c010dc8d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010dc94:	e8 a4 fc ff ff       	call   c010d93d <do_wait>
c010dc99:	85 c0                	test   %eax,%eax
c010dc9b:	74 e3                	je     c010dc80 <init_main+0x96>
        schedule();
    }

    fs_cleanup();
c010dc9d:	e8 a2 d3 ff ff       	call   c010b044 <fs_cleanup>
        
    cprintf("all user-mode processes have quit.\n");
c010dca2:	c7 04 24 24 83 11 c0 	movl   $0xc0118324,(%esp)
c010dca9:	e8 b7 26 ff ff       	call   c0100365 <cprintf>
    assert(initproc->cptr == NULL && initproc->yptr == NULL && initproc->optr == NULL);
c010dcae:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010dcb3:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010dcb9:	85 c0                	test   %eax,%eax
c010dcbb:	75 1e                	jne    c010dcdb <init_main+0xf1>
c010dcbd:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010dcc2:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010dcc8:	85 c0                	test   %eax,%eax
c010dcca:	75 0f                	jne    c010dcdb <init_main+0xf1>
c010dccc:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010dcd1:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010dcd7:	85 c0                	test   %eax,%eax
c010dcd9:	74 24                	je     c010dcff <init_main+0x115>
c010dcdb:	c7 44 24 0c 48 83 11 	movl   $0xc0118348,0xc(%esp)
c010dce2:	c0 
c010dce3:	c7 44 24 08 5f 80 11 	movl   $0xc011805f,0x8(%esp)
c010dcea:	c0 
c010dceb:	c7 44 24 04 01 04 00 	movl   $0x401,0x4(%esp)
c010dcf2:	00 
c010dcf3:	c7 04 24 38 80 11 c0 	movl   $0xc0118038,(%esp)
c010dcfa:	e8 c9 31 ff ff       	call   c0100ec8 <__panic>
    assert(nr_process == 2);
c010dcff:	a1 40 1f 15 c0       	mov    0xc0151f40,%eax
c010dd04:	83 f8 02             	cmp    $0x2,%eax
c010dd07:	74 24                	je     c010dd2d <init_main+0x143>
c010dd09:	c7 44 24 0c 93 83 11 	movl   $0xc0118393,0xc(%esp)
c010dd10:	c0 
c010dd11:	c7 44 24 08 5f 80 11 	movl   $0xc011805f,0x8(%esp)
c010dd18:	c0 
c010dd19:	c7 44 24 04 02 04 00 	movl   $0x402,0x4(%esp)
c010dd20:	00 
c010dd21:	c7 04 24 38 80 11 c0 	movl   $0xc0118038,(%esp)
c010dd28:	e8 9b 31 ff ff       	call   c0100ec8 <__panic>
c010dd2d:	c7 45 e4 fc 31 15 c0 	movl   $0xc01531fc,-0x1c(%ebp)
c010dd34:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010dd37:	8b 40 04             	mov    0x4(%eax),%eax
    assert(list_next(&proc_list) == &(initproc->list_link));
c010dd3a:	8b 15 24 ff 14 c0    	mov    0xc014ff24,%edx
c010dd40:	83 c2 7c             	add    $0x7c,%edx
c010dd43:	39 d0                	cmp    %edx,%eax
c010dd45:	74 24                	je     c010dd6b <init_main+0x181>
c010dd47:	c7 44 24 0c a4 83 11 	movl   $0xc01183a4,0xc(%esp)
c010dd4e:	c0 
c010dd4f:	c7 44 24 08 5f 80 11 	movl   $0xc011805f,0x8(%esp)
c010dd56:	c0 
c010dd57:	c7 44 24 04 03 04 00 	movl   $0x403,0x4(%esp)
c010dd5e:	00 
c010dd5f:	c7 04 24 38 80 11 c0 	movl   $0xc0118038,(%esp)
c010dd66:	e8 5d 31 ff ff       	call   c0100ec8 <__panic>
c010dd6b:	c7 45 e0 fc 31 15 c0 	movl   $0xc01531fc,-0x20(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010dd72:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010dd75:	8b 00                	mov    (%eax),%eax
    assert(list_prev(&proc_list) == &(initproc->list_link));
c010dd77:	8b 15 24 ff 14 c0    	mov    0xc014ff24,%edx
c010dd7d:	83 c2 7c             	add    $0x7c,%edx
c010dd80:	39 d0                	cmp    %edx,%eax
c010dd82:	74 24                	je     c010dda8 <init_main+0x1be>
c010dd84:	c7 44 24 0c d4 83 11 	movl   $0xc01183d4,0xc(%esp)
c010dd8b:	c0 
c010dd8c:	c7 44 24 08 5f 80 11 	movl   $0xc011805f,0x8(%esp)
c010dd93:	c0 
c010dd94:	c7 44 24 04 04 04 00 	movl   $0x404,0x4(%esp)
c010dd9b:	00 
c010dd9c:	c7 04 24 38 80 11 c0 	movl   $0xc0118038,(%esp)
c010dda3:	e8 20 31 ff ff       	call   c0100ec8 <__panic>
    assert(nr_free_pages_store == nr_free_pages());
c010dda8:	e8 54 74 ff ff       	call   c0105201 <nr_free_pages>
c010ddad:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010ddb0:	74 24                	je     c010ddd6 <init_main+0x1ec>
c010ddb2:	c7 44 24 0c 04 84 11 	movl   $0xc0118404,0xc(%esp)
c010ddb9:	c0 
c010ddba:	c7 44 24 08 5f 80 11 	movl   $0xc011805f,0x8(%esp)
c010ddc1:	c0 
c010ddc2:	c7 44 24 04 05 04 00 	movl   $0x405,0x4(%esp)
c010ddc9:	00 
c010ddca:	c7 04 24 38 80 11 c0 	movl   $0xc0118038,(%esp)
c010ddd1:	e8 f2 30 ff ff       	call   c0100ec8 <__panic>
    assert(kernel_allocated_store == kallocated());
c010ddd6:	e8 e7 6d ff ff       	call   c0104bc2 <kallocated>
c010dddb:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010ddde:	74 24                	je     c010de04 <init_main+0x21a>
c010dde0:	c7 44 24 0c 2c 84 11 	movl   $0xc011842c,0xc(%esp)
c010dde7:	c0 
c010dde8:	c7 44 24 08 5f 80 11 	movl   $0xc011805f,0x8(%esp)
c010ddef:	c0 
c010ddf0:	c7 44 24 04 06 04 00 	movl   $0x406,0x4(%esp)
c010ddf7:	00 
c010ddf8:	c7 04 24 38 80 11 c0 	movl   $0xc0118038,(%esp)
c010ddff:	e8 c4 30 ff ff       	call   c0100ec8 <__panic>
    cprintf("init check memory pass.\n");
c010de04:	c7 04 24 53 84 11 c0 	movl   $0xc0118453,(%esp)
c010de0b:	e8 55 25 ff ff       	call   c0100365 <cprintf>
    return 0;
c010de10:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010de15:	c9                   	leave  
c010de16:	c3                   	ret    

c010de17 <proc_init>:

// proc_init - set up the first kernel thread idleproc "idle" by itself and 
//           - create the second kernel thread init_main
void
proc_init(void) {
c010de17:	55                   	push   %ebp
c010de18:	89 e5                	mov    %esp,%ebp
c010de1a:	53                   	push   %ebx
c010de1b:	83 ec 24             	sub    $0x24,%esp
c010de1e:	c7 45 ec fc 31 15 c0 	movl   $0xc01531fc,-0x14(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010de25:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010de28:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010de2b:	89 50 04             	mov    %edx,0x4(%eax)
c010de2e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010de31:	8b 50 04             	mov    0x4(%eax),%edx
c010de34:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010de37:	89 10                	mov    %edx,(%eax)
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010de39:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010de40:	eb 26                	jmp    c010de68 <proc_init+0x51>
        list_init(hash_list + i);
c010de42:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010de45:	c1 e0 03             	shl    $0x3,%eax
c010de48:	05 40 ff 14 c0       	add    $0xc014ff40,%eax
c010de4d:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010de50:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010de53:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010de56:	89 50 04             	mov    %edx,0x4(%eax)
c010de59:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010de5c:	8b 50 04             	mov    0x4(%eax),%edx
c010de5f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010de62:	89 10                	mov    %edx,(%eax)
void
proc_init(void) {
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010de64:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010de68:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c010de6f:	7e d1                	jle    c010de42 <proc_init+0x2b>
        list_init(hash_list + i);
    }

    if ((idleproc = alloc_proc()) == NULL) {
c010de71:	e8 e4 e0 ff ff       	call   c010bf5a <alloc_proc>
c010de76:	a3 20 ff 14 c0       	mov    %eax,0xc014ff20
c010de7b:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010de80:	85 c0                	test   %eax,%eax
c010de82:	75 1c                	jne    c010dea0 <proc_init+0x89>
        panic("cannot alloc idleproc.\n");
c010de84:	c7 44 24 08 6c 84 11 	movl   $0xc011846c,0x8(%esp)
c010de8b:	c0 
c010de8c:	c7 44 24 04 17 04 00 	movl   $0x417,0x4(%esp)
c010de93:	00 
c010de94:	c7 04 24 38 80 11 c0 	movl   $0xc0118038,(%esp)
c010de9b:	e8 28 30 ff ff       	call   c0100ec8 <__panic>
    }

    idleproc->pid = 0;
c010dea0:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010dea5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    idleproc->state = PROC_RUNNABLE;
c010deac:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010deb1:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    idleproc->kstack = (uintptr_t)bootstack;
c010deb7:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010debc:	ba 00 c0 14 c0       	mov    $0xc014c000,%edx
c010dec1:	89 50 0c             	mov    %edx,0xc(%eax)
    idleproc->need_resched = 1;
c010dec4:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010dec9:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    
    if ((idleproc->filesp = files_create()) == NULL) {
c010ded0:	8b 1d 20 ff 14 c0    	mov    0xc014ff20,%ebx
c010ded6:	e8 a2 d1 ff ff       	call   c010b07d <files_create>
c010dedb:	89 83 c4 00 00 00    	mov    %eax,0xc4(%ebx)
c010dee1:	8b 83 c4 00 00 00    	mov    0xc4(%ebx),%eax
c010dee7:	85 c0                	test   %eax,%eax
c010dee9:	75 1c                	jne    c010df07 <proc_init+0xf0>
        panic("create filesp (idleproc) failed.\n");
c010deeb:	c7 44 24 08 84 84 11 	movl   $0xc0118484,0x8(%esp)
c010def2:	c0 
c010def3:	c7 44 24 04 20 04 00 	movl   $0x420,0x4(%esp)
c010defa:	00 
c010defb:	c7 04 24 38 80 11 c0 	movl   $0xc0118038,(%esp)
c010df02:	e8 c1 2f ff ff       	call   c0100ec8 <__panic>
    }
    files_count_inc(idleproc->filesp);
c010df07:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010df0c:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010df12:	89 04 24             	mov    %eax,(%esp)
c010df15:	e8 0c e0 ff ff       	call   c010bf26 <files_count_inc>
    
    set_proc_name(idleproc, "idle");
c010df1a:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010df1f:	c7 44 24 04 a6 84 11 	movl   $0xc01184a6,0x4(%esp)
c010df26:	c0 
c010df27:	89 04 24             	mov    %eax,(%esp)
c010df2a:	e8 bf e1 ff ff       	call   c010c0ee <set_proc_name>
    nr_process ++;
c010df2f:	a1 40 1f 15 c0       	mov    0xc0151f40,%eax
c010df34:	83 c0 01             	add    $0x1,%eax
c010df37:	a3 40 1f 15 c0       	mov    %eax,0xc0151f40

    current = idleproc;
c010df3c:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010df41:	a3 28 ff 14 c0       	mov    %eax,0xc014ff28

    int pid = kernel_thread(init_main, NULL, 0);
c010df46:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010df4d:	00 
c010df4e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010df55:	00 
c010df56:	c7 04 24 ea db 10 c0 	movl   $0xc010dbea,(%esp)
c010df5d:	e8 19 e6 ff ff       	call   c010c57b <kernel_thread>
c010df62:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pid <= 0) {
c010df65:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010df69:	7f 1c                	jg     c010df87 <proc_init+0x170>
        panic("create init_main failed.\n");
c010df6b:	c7 44 24 08 ab 84 11 	movl   $0xc01184ab,0x8(%esp)
c010df72:	c0 
c010df73:	c7 44 24 04 2b 04 00 	movl   $0x42b,0x4(%esp)
c010df7a:	00 
c010df7b:	c7 04 24 38 80 11 c0 	movl   $0xc0118038,(%esp)
c010df82:	e8 41 2f ff ff       	call   c0100ec8 <__panic>
    }

    initproc = find_proc(pid);
c010df87:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010df8a:	89 04 24             	mov    %eax,(%esp)
c010df8d:	e8 75 e5 ff ff       	call   c010c507 <find_proc>
c010df92:	a3 24 ff 14 c0       	mov    %eax,0xc014ff24
    set_proc_name(initproc, "init");
c010df97:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010df9c:	c7 44 24 04 c5 84 11 	movl   $0xc01184c5,0x4(%esp)
c010dfa3:	c0 
c010dfa4:	89 04 24             	mov    %eax,(%esp)
c010dfa7:	e8 42 e1 ff ff       	call   c010c0ee <set_proc_name>

    assert(idleproc != NULL && idleproc->pid == 0);
c010dfac:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010dfb1:	85 c0                	test   %eax,%eax
c010dfb3:	74 0c                	je     c010dfc1 <proc_init+0x1aa>
c010dfb5:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010dfba:	8b 40 04             	mov    0x4(%eax),%eax
c010dfbd:	85 c0                	test   %eax,%eax
c010dfbf:	74 24                	je     c010dfe5 <proc_init+0x1ce>
c010dfc1:	c7 44 24 0c cc 84 11 	movl   $0xc01184cc,0xc(%esp)
c010dfc8:	c0 
c010dfc9:	c7 44 24 08 5f 80 11 	movl   $0xc011805f,0x8(%esp)
c010dfd0:	c0 
c010dfd1:	c7 44 24 04 31 04 00 	movl   $0x431,0x4(%esp)
c010dfd8:	00 
c010dfd9:	c7 04 24 38 80 11 c0 	movl   $0xc0118038,(%esp)
c010dfe0:	e8 e3 2e ff ff       	call   c0100ec8 <__panic>
    assert(initproc != NULL && initproc->pid == 1);
c010dfe5:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010dfea:	85 c0                	test   %eax,%eax
c010dfec:	74 0d                	je     c010dffb <proc_init+0x1e4>
c010dfee:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010dff3:	8b 40 04             	mov    0x4(%eax),%eax
c010dff6:	83 f8 01             	cmp    $0x1,%eax
c010dff9:	74 24                	je     c010e01f <proc_init+0x208>
c010dffb:	c7 44 24 0c f4 84 11 	movl   $0xc01184f4,0xc(%esp)
c010e002:	c0 
c010e003:	c7 44 24 08 5f 80 11 	movl   $0xc011805f,0x8(%esp)
c010e00a:	c0 
c010e00b:	c7 44 24 04 32 04 00 	movl   $0x432,0x4(%esp)
c010e012:	00 
c010e013:	c7 04 24 38 80 11 c0 	movl   $0xc0118038,(%esp)
c010e01a:	e8 a9 2e ff ff       	call   c0100ec8 <__panic>
}
c010e01f:	83 c4 24             	add    $0x24,%esp
c010e022:	5b                   	pop    %ebx
c010e023:	5d                   	pop    %ebp
c010e024:	c3                   	ret    

c010e025 <cpu_idle>:

// cpu_idle - at the end of kern_init, the first kernel thread idleproc will do below works
void
cpu_idle(void) {
c010e025:	55                   	push   %ebp
c010e026:	89 e5                	mov    %esp,%ebp
c010e028:	83 ec 08             	sub    $0x8,%esp
    while (1) {
        if (current->need_resched) {
c010e02b:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010e030:	8b 40 10             	mov    0x10(%eax),%eax
c010e033:	85 c0                	test   %eax,%eax
c010e035:	74 07                	je     c010e03e <cpu_idle+0x19>
            schedule();
c010e037:	e8 3e 06 00 00       	call   c010e67a <schedule>
        }
    }
c010e03c:	eb ed                	jmp    c010e02b <cpu_idle+0x6>
c010e03e:	eb eb                	jmp    c010e02b <cpu_idle+0x6>

c010e040 <lab6_set_priority>:
}

//FOR LAB6, set the process's priority (bigger value will get more CPU time) 
void
lab6_set_priority(uint32_t priority)
{
c010e040:	55                   	push   %ebp
c010e041:	89 e5                	mov    %esp,%ebp
    if (priority == 0)
c010e043:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010e047:	75 11                	jne    c010e05a <lab6_set_priority+0x1a>
        current->lab6_priority = 1;
c010e049:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010e04e:	c7 80 c0 00 00 00 01 	movl   $0x1,0xc0(%eax)
c010e055:	00 00 00 
c010e058:	eb 0e                	jmp    c010e068 <lab6_set_priority+0x28>
    else current->lab6_priority = priority;
c010e05a:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010e05f:	8b 55 08             	mov    0x8(%ebp),%edx
c010e062:	89 90 c0 00 00 00    	mov    %edx,0xc0(%eax)
}
c010e068:	5d                   	pop    %ebp
c010e069:	c3                   	ret    

c010e06a <do_sleep>:

// do_sleep - set current process state to sleep and add timer with "time"
//          - then call scheduler. if process run again, delete timer first.
int
do_sleep(unsigned int time) {
c010e06a:	55                   	push   %ebp
c010e06b:	89 e5                	mov    %esp,%ebp
c010e06d:	83 ec 38             	sub    $0x38,%esp
    if (time == 0) {
c010e070:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010e074:	75 07                	jne    c010e07d <do_sleep+0x13>
        return 0;
c010e076:	b8 00 00 00 00       	mov    $0x0,%eax
c010e07b:	eb 6b                	jmp    c010e0e8 <do_sleep+0x7e>
    }
    bool intr_flag;
    local_intr_save(intr_flag);
c010e07d:	e8 bd dc ff ff       	call   c010bd3f <__intr_save>
c010e082:	89 45 f4             	mov    %eax,-0xc(%ebp)
    timer_t __timer, *timer = timer_init(&__timer, current, time);
c010e085:	8b 55 08             	mov    0x8(%ebp),%edx
c010e088:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010e08d:	89 54 24 08          	mov    %edx,0x8(%esp)
c010e091:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e095:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010e098:	89 04 24             	mov    %eax,(%esp)
c010e09b:	e8 66 dc ff ff       	call   c010bd06 <timer_init>
c010e0a0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    current->state = PROC_SLEEPING;
c010e0a3:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010e0a8:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    current->wait_state = WT_TIMER;
c010e0ae:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010e0b3:	c7 80 90 00 00 00 02 	movl   $0x80000002,0x90(%eax)
c010e0ba:	00 00 80 
    add_timer(timer);
c010e0bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e0c0:	89 04 24             	mov    %eax,(%esp)
c010e0c3:	e8 3d 06 00 00       	call   c010e705 <add_timer>
    local_intr_restore(intr_flag);
c010e0c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e0cb:	89 04 24             	mov    %eax,(%esp)
c010e0ce:	e8 96 dc ff ff       	call   c010bd69 <__intr_restore>

    schedule();
c010e0d3:	e8 a2 05 00 00       	call   c010e67a <schedule>

    del_timer(timer);
c010e0d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e0db:	89 04 24             	mov    %eax,(%esp)
c010e0de:	e8 60 07 00 00       	call   c010e843 <del_timer>
    return 0;
c010e0e3:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010e0e8:	c9                   	leave  
c010e0e9:	c3                   	ret    

c010e0ea <switch_to>:
.text
.globl switch_to
switch_to:                      # switch_to(from, to)

    # save from's registers
    movl 4(%esp), %eax          # eax points to from
c010e0ea:	8b 44 24 04          	mov    0x4(%esp),%eax
    popl 0(%eax)                # save eip !popl
c010e0ee:	8f 00                	popl   (%eax)
    movl %esp, 4(%eax)
c010e0f0:	89 60 04             	mov    %esp,0x4(%eax)
    movl %ebx, 8(%eax)
c010e0f3:	89 58 08             	mov    %ebx,0x8(%eax)
    movl %ecx, 12(%eax)
c010e0f6:	89 48 0c             	mov    %ecx,0xc(%eax)
    movl %edx, 16(%eax)
c010e0f9:	89 50 10             	mov    %edx,0x10(%eax)
    movl %esi, 20(%eax)
c010e0fc:	89 70 14             	mov    %esi,0x14(%eax)
    movl %edi, 24(%eax)
c010e0ff:	89 78 18             	mov    %edi,0x18(%eax)
    movl %ebp, 28(%eax)
c010e102:	89 68 1c             	mov    %ebp,0x1c(%eax)

    # restore to's registers
    movl 4(%esp), %eax          # not 8(%esp): popped return address already
c010e105:	8b 44 24 04          	mov    0x4(%esp),%eax
                                # eax now points to to
    movl 28(%eax), %ebp
c010e109:	8b 68 1c             	mov    0x1c(%eax),%ebp
    movl 24(%eax), %edi
c010e10c:	8b 78 18             	mov    0x18(%eax),%edi
    movl 20(%eax), %esi
c010e10f:	8b 70 14             	mov    0x14(%eax),%esi
    movl 16(%eax), %edx
c010e112:	8b 50 10             	mov    0x10(%eax),%edx
    movl 12(%eax), %ecx
c010e115:	8b 48 0c             	mov    0xc(%eax),%ecx
    movl 8(%eax), %ebx
c010e118:	8b 58 08             	mov    0x8(%eax),%ebx
    movl 4(%eax), %esp
c010e11b:	8b 60 04             	mov    0x4(%eax),%esp

    pushl 0(%eax)               # push eip
c010e11e:	ff 30                	pushl  (%eax)

    ret
c010e120:	c3                   	ret    

c010e121 <skew_heap_merge>:
}

static inline skew_heap_entry_t *
skew_heap_merge(skew_heap_entry_t *a, skew_heap_entry_t *b,
                compare_f comp)
{
c010e121:	55                   	push   %ebp
c010e122:	89 e5                	mov    %esp,%ebp
c010e124:	83 ec 28             	sub    $0x28,%esp
     if (a == NULL) return b;
c010e127:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010e12b:	75 08                	jne    c010e135 <skew_heap_merge+0x14>
c010e12d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e130:	e9 bd 00 00 00       	jmp    c010e1f2 <skew_heap_merge+0xd1>
     else if (b == NULL) return a;
c010e135:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010e139:	75 08                	jne    c010e143 <skew_heap_merge+0x22>
c010e13b:	8b 45 08             	mov    0x8(%ebp),%eax
c010e13e:	e9 af 00 00 00       	jmp    c010e1f2 <skew_heap_merge+0xd1>
     
     skew_heap_entry_t *l, *r;
     if (comp(a, b) == -1)
c010e143:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e146:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e14a:	8b 45 08             	mov    0x8(%ebp),%eax
c010e14d:	89 04 24             	mov    %eax,(%esp)
c010e150:	8b 45 10             	mov    0x10(%ebp),%eax
c010e153:	ff d0                	call   *%eax
c010e155:	83 f8 ff             	cmp    $0xffffffff,%eax
c010e158:	75 4d                	jne    c010e1a7 <skew_heap_merge+0x86>
     {
          r = a->left;
c010e15a:	8b 45 08             	mov    0x8(%ebp),%eax
c010e15d:	8b 40 04             	mov    0x4(%eax),%eax
c010e160:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a->right, b, comp);
c010e163:	8b 45 08             	mov    0x8(%ebp),%eax
c010e166:	8b 40 08             	mov    0x8(%eax),%eax
c010e169:	8b 55 10             	mov    0x10(%ebp),%edx
c010e16c:	89 54 24 08          	mov    %edx,0x8(%esp)
c010e170:	8b 55 0c             	mov    0xc(%ebp),%edx
c010e173:	89 54 24 04          	mov    %edx,0x4(%esp)
c010e177:	89 04 24             	mov    %eax,(%esp)
c010e17a:	e8 a2 ff ff ff       	call   c010e121 <skew_heap_merge>
c010e17f:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          a->left = l;
c010e182:	8b 45 08             	mov    0x8(%ebp),%eax
c010e185:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010e188:	89 50 04             	mov    %edx,0x4(%eax)
          a->right = r;
c010e18b:	8b 45 08             	mov    0x8(%ebp),%eax
c010e18e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010e191:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = a;
c010e194:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010e198:	74 08                	je     c010e1a2 <skew_heap_merge+0x81>
c010e19a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e19d:	8b 55 08             	mov    0x8(%ebp),%edx
c010e1a0:	89 10                	mov    %edx,(%eax)

          return a;
c010e1a2:	8b 45 08             	mov    0x8(%ebp),%eax
c010e1a5:	eb 4b                	jmp    c010e1f2 <skew_heap_merge+0xd1>
     }
     else
     {
          r = b->left;
c010e1a7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e1aa:	8b 40 04             	mov    0x4(%eax),%eax
c010e1ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a, b->right, comp);
c010e1b0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e1b3:	8b 40 08             	mov    0x8(%eax),%eax
c010e1b6:	8b 55 10             	mov    0x10(%ebp),%edx
c010e1b9:	89 54 24 08          	mov    %edx,0x8(%esp)
c010e1bd:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e1c1:	8b 45 08             	mov    0x8(%ebp),%eax
c010e1c4:	89 04 24             	mov    %eax,(%esp)
c010e1c7:	e8 55 ff ff ff       	call   c010e121 <skew_heap_merge>
c010e1cc:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          b->left = l;
c010e1cf:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e1d2:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010e1d5:	89 50 04             	mov    %edx,0x4(%eax)
          b->right = r;
c010e1d8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e1db:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010e1de:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = b;
c010e1e1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010e1e5:	74 08                	je     c010e1ef <skew_heap_merge+0xce>
c010e1e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e1ea:	8b 55 0c             	mov    0xc(%ebp),%edx
c010e1ed:	89 10                	mov    %edx,(%eax)

          return b;
c010e1ef:	8b 45 0c             	mov    0xc(%ebp),%eax
     }
}
c010e1f2:	c9                   	leave  
c010e1f3:	c3                   	ret    

c010e1f4 <proc_stride_comp_f>:

/* The compare function for two skew_heap_node_t's and the
 * corresponding procs*/
static int
proc_stride_comp_f(void *a, void *b)
{
c010e1f4:	55                   	push   %ebp
c010e1f5:	89 e5                	mov    %esp,%ebp
c010e1f7:	83 ec 10             	sub    $0x10,%esp
     struct proc_struct *p = le2proc(a, lab6_run_pool);
c010e1fa:	8b 45 08             	mov    0x8(%ebp),%eax
c010e1fd:	2d b0 00 00 00       	sub    $0xb0,%eax
c010e202:	89 45 fc             	mov    %eax,-0x4(%ebp)
     struct proc_struct *q = le2proc(b, lab6_run_pool);
c010e205:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e208:	2d b0 00 00 00       	sub    $0xb0,%eax
c010e20d:	89 45 f8             	mov    %eax,-0x8(%ebp)
     int32_t c = p->lab6_stride - q->lab6_stride;
c010e210:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e213:	8b 90 bc 00 00 00    	mov    0xbc(%eax),%edx
c010e219:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e21c:	8b 80 bc 00 00 00    	mov    0xbc(%eax),%eax
c010e222:	29 c2                	sub    %eax,%edx
c010e224:	89 d0                	mov    %edx,%eax
c010e226:	89 45 f4             	mov    %eax,-0xc(%ebp)
     if (c > 0) return 1;
c010e229:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e22d:	7e 07                	jle    c010e236 <proc_stride_comp_f+0x42>
c010e22f:	b8 01 00 00 00       	mov    $0x1,%eax
c010e234:	eb 12                	jmp    c010e248 <proc_stride_comp_f+0x54>
     else if (c == 0) return 0;
c010e236:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e23a:	75 07                	jne    c010e243 <proc_stride_comp_f+0x4f>
c010e23c:	b8 00 00 00 00       	mov    $0x0,%eax
c010e241:	eb 05                	jmp    c010e248 <proc_stride_comp_f+0x54>
     else return -1;
c010e243:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
c010e248:	c9                   	leave  
c010e249:	c3                   	ret    

c010e24a <stride_init>:
 *   - max_time_slice: no need here, the variable would be assigned by the caller.
 *
 * hint: see proj13.1/libs/list.h for routines of the list structures.
 */
static void
stride_init(struct run_queue *rq) {
c010e24a:	55                   	push   %ebp
c010e24b:	89 e5                	mov    %esp,%ebp
c010e24d:	83 ec 10             	sub    $0x10,%esp
     /* LAB6: YOUR CODE */
     list_init(&(rq->run_list));
c010e250:	8b 45 08             	mov    0x8(%ebp),%eax
c010e253:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010e256:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e259:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010e25c:	89 50 04             	mov    %edx,0x4(%eax)
c010e25f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e262:	8b 50 04             	mov    0x4(%eax),%edx
c010e265:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e268:	89 10                	mov    %edx,(%eax)
     rq->lab6_run_pool = NULL;
c010e26a:	8b 45 08             	mov    0x8(%ebp),%eax
c010e26d:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
     rq->proc_num = 0;
c010e274:	8b 45 08             	mov    0x8(%ebp),%eax
c010e277:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
c010e27e:	c9                   	leave  
c010e27f:	c3                   	ret    

c010e280 <stride_enqueue>:
 * 
 * hint: see proj13.1/libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_enqueue(struct run_queue *rq, struct proc_struct *proc) {
c010e280:	55                   	push   %ebp
c010e281:	89 e5                	mov    %esp,%ebp
c010e283:	83 ec 28             	sub    $0x28,%esp
     /* LAB6: YOUR CODE */
#if USE_SKEW_HEAP
     rq->lab6_run_pool =
          skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
c010e286:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e289:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
c010e28f:	8b 45 08             	mov    0x8(%ebp),%eax
c010e292:	8b 40 10             	mov    0x10(%eax),%eax
c010e295:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e298:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010e29b:	c7 45 ec f4 e1 10 c0 	movl   $0xc010e1f4,-0x14(%ebp)
c010e2a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e2a5:	89 45 e8             	mov    %eax,-0x18(%ebp)
     compare_f comp) __attribute__((always_inline));

static inline void
skew_heap_init(skew_heap_entry_t *a)
{
     a->left = a->right = a->parent = NULL;
c010e2a8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e2ab:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c010e2b1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e2b4:	8b 10                	mov    (%eax),%edx
c010e2b6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e2b9:	89 50 08             	mov    %edx,0x8(%eax)
c010e2bc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e2bf:	8b 50 08             	mov    0x8(%eax),%edx
c010e2c2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e2c5:	89 50 04             	mov    %edx,0x4(%eax)
static inline skew_heap_entry_t *
skew_heap_insert(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_init(b);
     return skew_heap_merge(a, b, comp);
c010e2c8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e2cb:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e2cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e2d2:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e2d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e2d9:	89 04 24             	mov    %eax,(%esp)
c010e2dc:	e8 40 fe ff ff       	call   c010e121 <skew_heap_merge>
c010e2e1:	89 c2                	mov    %eax,%edx
 */
static void
stride_enqueue(struct run_queue *rq, struct proc_struct *proc) {
     /* LAB6: YOUR CODE */
#if USE_SKEW_HEAP
     rq->lab6_run_pool =
c010e2e3:	8b 45 08             	mov    0x8(%ebp),%eax
c010e2e6:	89 50 10             	mov    %edx,0x10(%eax)
          skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
#else
     assert(list_empty(&(proc->run_link)));
     list_add_before(&(rq->run_list), &(proc->run_link));
#endif
     if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice) {
c010e2e9:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e2ec:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010e2f2:	85 c0                	test   %eax,%eax
c010e2f4:	74 13                	je     c010e309 <stride_enqueue+0x89>
c010e2f6:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e2f9:	8b 90 ac 00 00 00    	mov    0xac(%eax),%edx
c010e2ff:	8b 45 08             	mov    0x8(%ebp),%eax
c010e302:	8b 40 0c             	mov    0xc(%eax),%eax
c010e305:	39 c2                	cmp    %eax,%edx
c010e307:	7e 0f                	jle    c010e318 <stride_enqueue+0x98>
          proc->time_slice = rq->max_time_slice;
c010e309:	8b 45 08             	mov    0x8(%ebp),%eax
c010e30c:	8b 50 0c             	mov    0xc(%eax),%edx
c010e30f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e312:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
     }
     proc->rq = rq;
c010e318:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e31b:	8b 55 08             	mov    0x8(%ebp),%edx
c010e31e:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
     rq->proc_num ++;
c010e324:	8b 45 08             	mov    0x8(%ebp),%eax
c010e327:	8b 40 08             	mov    0x8(%eax),%eax
c010e32a:	8d 50 01             	lea    0x1(%eax),%edx
c010e32d:	8b 45 08             	mov    0x8(%ebp),%eax
c010e330:	89 50 08             	mov    %edx,0x8(%eax)
}
c010e333:	c9                   	leave  
c010e334:	c3                   	ret    

c010e335 <stride_dequeue>:
 *
 * hint: see proj13.1/libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_dequeue(struct run_queue *rq, struct proc_struct *proc) {
c010e335:	55                   	push   %ebp
c010e336:	89 e5                	mov    %esp,%ebp
c010e338:	83 ec 38             	sub    $0x38,%esp
     /* LAB6: YOUR CODE */
#if USE_SKEW_HEAP
     rq->lab6_run_pool =
          skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
c010e33b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e33e:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
c010e344:	8b 45 08             	mov    0x8(%ebp),%eax
c010e347:	8b 40 10             	mov    0x10(%eax),%eax
c010e34a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e34d:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010e350:	c7 45 ec f4 e1 10 c0 	movl   $0xc010e1f4,-0x14(%ebp)

static inline skew_heap_entry_t *
skew_heap_remove(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_entry_t *p   = b->parent;
c010e357:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e35a:	8b 00                	mov    (%eax),%eax
c010e35c:	89 45 e8             	mov    %eax,-0x18(%ebp)
     skew_heap_entry_t *rep = skew_heap_merge(b->left, b->right, comp);
c010e35f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e362:	8b 50 08             	mov    0x8(%eax),%edx
c010e365:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e368:	8b 40 04             	mov    0x4(%eax),%eax
c010e36b:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010e36e:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010e372:	89 54 24 04          	mov    %edx,0x4(%esp)
c010e376:	89 04 24             	mov    %eax,(%esp)
c010e379:	e8 a3 fd ff ff       	call   c010e121 <skew_heap_merge>
c010e37e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     if (rep) rep->parent = p;
c010e381:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010e385:	74 08                	je     c010e38f <stride_dequeue+0x5a>
c010e387:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e38a:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010e38d:	89 10                	mov    %edx,(%eax)
     
     if (p)
c010e38f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010e393:	74 24                	je     c010e3b9 <stride_dequeue+0x84>
     {
          if (p->left == b)
c010e395:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e398:	8b 40 04             	mov    0x4(%eax),%eax
c010e39b:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010e39e:	75 0b                	jne    c010e3ab <stride_dequeue+0x76>
               p->left = rep;
c010e3a0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e3a3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010e3a6:	89 50 04             	mov    %edx,0x4(%eax)
c010e3a9:	eb 09                	jmp    c010e3b4 <stride_dequeue+0x7f>
          else p->right = rep;
c010e3ab:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e3ae:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010e3b1:	89 50 08             	mov    %edx,0x8(%eax)
          return a;
c010e3b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e3b7:	eb 03                	jmp    c010e3bc <stride_dequeue+0x87>
     }
     else return rep;
c010e3b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e3bc:	89 c2                	mov    %eax,%edx
 */
static void
stride_dequeue(struct run_queue *rq, struct proc_struct *proc) {
     /* LAB6: YOUR CODE */
#if USE_SKEW_HEAP
     rq->lab6_run_pool =
c010e3be:	8b 45 08             	mov    0x8(%ebp),%eax
c010e3c1:	89 50 10             	mov    %edx,0x10(%eax)
          skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
#else
     assert(!list_empty(&(proc->run_link)) && proc->rq == rq);
     list_del_init(&(proc->run_link));
#endif
     rq->proc_num --;
c010e3c4:	8b 45 08             	mov    0x8(%ebp),%eax
c010e3c7:	8b 40 08             	mov    0x8(%eax),%eax
c010e3ca:	8d 50 ff             	lea    -0x1(%eax),%edx
c010e3cd:	8b 45 08             	mov    0x8(%ebp),%eax
c010e3d0:	89 50 08             	mov    %edx,0x8(%eax)
}
c010e3d3:	c9                   	leave  
c010e3d4:	c3                   	ret    

c010e3d5 <stride_pick_next>:
 *
 * hint: see proj13.1/libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static struct proc_struct *
stride_pick_next(struct run_queue *rq) {
c010e3d5:	55                   	push   %ebp
c010e3d6:	89 e5                	mov    %esp,%ebp
c010e3d8:	53                   	push   %ebx
c010e3d9:	83 ec 10             	sub    $0x10,%esp
     /* LAB6: YOUR CODE */
#if USE_SKEW_HEAP
     if (rq->lab6_run_pool == NULL) return NULL;
c010e3dc:	8b 45 08             	mov    0x8(%ebp),%eax
c010e3df:	8b 40 10             	mov    0x10(%eax),%eax
c010e3e2:	85 c0                	test   %eax,%eax
c010e3e4:	75 07                	jne    c010e3ed <stride_pick_next+0x18>
c010e3e6:	b8 00 00 00 00       	mov    $0x0,%eax
c010e3eb:	eb 62                	jmp    c010e44f <stride_pick_next+0x7a>
     struct proc_struct *p = le2proc(rq->lab6_run_pool, lab6_run_pool);
c010e3ed:	8b 45 08             	mov    0x8(%ebp),%eax
c010e3f0:	8b 40 10             	mov    0x10(%eax),%eax
c010e3f3:	2d b0 00 00 00       	sub    $0xb0,%eax
c010e3f8:	89 45 f8             	mov    %eax,-0x8(%ebp)
          if ((int32_t)(p->lab6_stride - q->lab6_stride) > 0)
               p = q;
          le = list_next(le);
     }
#endif
     if (p->lab6_priority == 0)
c010e3fb:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e3fe:	8b 80 c0 00 00 00    	mov    0xc0(%eax),%eax
c010e404:	85 c0                	test   %eax,%eax
c010e406:	75 1a                	jne    c010e422 <stride_pick_next+0x4d>
          p->lab6_stride += BIG_STRIDE;
c010e408:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e40b:	8b 80 bc 00 00 00    	mov    0xbc(%eax),%eax
c010e411:	8d 90 ff ff ff 7f    	lea    0x7fffffff(%eax),%edx
c010e417:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e41a:	89 90 bc 00 00 00    	mov    %edx,0xbc(%eax)
c010e420:	eb 2a                	jmp    c010e44c <stride_pick_next+0x77>
     else p->lab6_stride += BIG_STRIDE / p->lab6_priority;
c010e422:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e425:	8b 88 bc 00 00 00    	mov    0xbc(%eax),%ecx
c010e42b:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e42e:	8b 98 c0 00 00 00    	mov    0xc0(%eax),%ebx
c010e434:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
c010e439:	ba 00 00 00 00       	mov    $0x0,%edx
c010e43e:	f7 f3                	div    %ebx
c010e440:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c010e443:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e446:	89 90 bc 00 00 00    	mov    %edx,0xbc(%eax)
     return p;
c010e44c:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010e44f:	83 c4 10             	add    $0x10,%esp
c010e452:	5b                   	pop    %ebx
c010e453:	5d                   	pop    %ebp
c010e454:	c3                   	ret    

c010e455 <stride_proc_tick>:
 * denotes the time slices left for current
 * process. proc->need_resched is the flag variable for process
 * switching.
 */
static void
stride_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
c010e455:	55                   	push   %ebp
c010e456:	89 e5                	mov    %esp,%ebp
     /* LAB6: YOUR CODE */
     if (proc->time_slice > 0) {
c010e458:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e45b:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010e461:	85 c0                	test   %eax,%eax
c010e463:	7e 15                	jle    c010e47a <stride_proc_tick+0x25>
          proc->time_slice --;
c010e465:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e468:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010e46e:	8d 50 ff             	lea    -0x1(%eax),%edx
c010e471:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e474:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
     }
     if (proc->time_slice == 0) {
c010e47a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e47d:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010e483:	85 c0                	test   %eax,%eax
c010e485:	75 0a                	jne    c010e491 <stride_proc_tick+0x3c>
          proc->need_resched = 1;
c010e487:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e48a:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
     }
}
c010e491:	5d                   	pop    %ebp
c010e492:	c3                   	ret    

c010e493 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010e493:	55                   	push   %ebp
c010e494:	89 e5                	mov    %esp,%ebp
c010e496:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010e499:	9c                   	pushf  
c010e49a:	58                   	pop    %eax
c010e49b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010e49e:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010e4a1:	25 00 02 00 00       	and    $0x200,%eax
c010e4a6:	85 c0                	test   %eax,%eax
c010e4a8:	74 0c                	je     c010e4b6 <__intr_save+0x23>
        intr_disable();
c010e4aa:	e8 7b 3c ff ff       	call   c010212a <intr_disable>
        return 1;
c010e4af:	b8 01 00 00 00       	mov    $0x1,%eax
c010e4b4:	eb 05                	jmp    c010e4bb <__intr_save+0x28>
    }
    return 0;
c010e4b6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010e4bb:	c9                   	leave  
c010e4bc:	c3                   	ret    

c010e4bd <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010e4bd:	55                   	push   %ebp
c010e4be:	89 e5                	mov    %esp,%ebp
c010e4c0:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010e4c3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010e4c7:	74 05                	je     c010e4ce <__intr_restore+0x11>
        intr_enable();
c010e4c9:	e8 56 3c ff ff       	call   c0102124 <intr_enable>
    }
}
c010e4ce:	c9                   	leave  
c010e4cf:	c3                   	ret    

c010e4d0 <sched_class_enqueue>:
static struct sched_class *sched_class;

static struct run_queue *rq;

static inline void
sched_class_enqueue(struct proc_struct *proc) {
c010e4d0:	55                   	push   %ebp
c010e4d1:	89 e5                	mov    %esp,%ebp
c010e4d3:	83 ec 18             	sub    $0x18,%esp
    if (proc != idleproc) {
c010e4d6:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010e4db:	39 45 08             	cmp    %eax,0x8(%ebp)
c010e4de:	74 1a                	je     c010e4fa <sched_class_enqueue+0x2a>
        sched_class->enqueue(rq, proc);
c010e4e0:	a1 9c 1f 15 c0       	mov    0xc0151f9c,%eax
c010e4e5:	8b 40 08             	mov    0x8(%eax),%eax
c010e4e8:	8b 15 a0 1f 15 c0    	mov    0xc0151fa0,%edx
c010e4ee:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010e4f1:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010e4f5:	89 14 24             	mov    %edx,(%esp)
c010e4f8:	ff d0                	call   *%eax
    }
}
c010e4fa:	c9                   	leave  
c010e4fb:	c3                   	ret    

c010e4fc <sched_class_dequeue>:

static inline void
sched_class_dequeue(struct proc_struct *proc) {
c010e4fc:	55                   	push   %ebp
c010e4fd:	89 e5                	mov    %esp,%ebp
c010e4ff:	83 ec 18             	sub    $0x18,%esp
    sched_class->dequeue(rq, proc);
c010e502:	a1 9c 1f 15 c0       	mov    0xc0151f9c,%eax
c010e507:	8b 40 0c             	mov    0xc(%eax),%eax
c010e50a:	8b 15 a0 1f 15 c0    	mov    0xc0151fa0,%edx
c010e510:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010e513:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010e517:	89 14 24             	mov    %edx,(%esp)
c010e51a:	ff d0                	call   *%eax
}
c010e51c:	c9                   	leave  
c010e51d:	c3                   	ret    

c010e51e <sched_class_pick_next>:

static inline struct proc_struct *
sched_class_pick_next(void) {
c010e51e:	55                   	push   %ebp
c010e51f:	89 e5                	mov    %esp,%ebp
c010e521:	83 ec 18             	sub    $0x18,%esp
    return sched_class->pick_next(rq);
c010e524:	a1 9c 1f 15 c0       	mov    0xc0151f9c,%eax
c010e529:	8b 40 10             	mov    0x10(%eax),%eax
c010e52c:	8b 15 a0 1f 15 c0    	mov    0xc0151fa0,%edx
c010e532:	89 14 24             	mov    %edx,(%esp)
c010e535:	ff d0                	call   *%eax
}
c010e537:	c9                   	leave  
c010e538:	c3                   	ret    

c010e539 <sched_class_proc_tick>:

static void
sched_class_proc_tick(struct proc_struct *proc) {
c010e539:	55                   	push   %ebp
c010e53a:	89 e5                	mov    %esp,%ebp
c010e53c:	83 ec 18             	sub    $0x18,%esp
    if (proc != idleproc) {
c010e53f:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010e544:	39 45 08             	cmp    %eax,0x8(%ebp)
c010e547:	74 1c                	je     c010e565 <sched_class_proc_tick+0x2c>
        sched_class->proc_tick(rq, proc);
c010e549:	a1 9c 1f 15 c0       	mov    0xc0151f9c,%eax
c010e54e:	8b 40 14             	mov    0x14(%eax),%eax
c010e551:	8b 15 a0 1f 15 c0    	mov    0xc0151fa0,%edx
c010e557:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010e55a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010e55e:	89 14 24             	mov    %edx,(%esp)
c010e561:	ff d0                	call   *%eax
c010e563:	eb 0a                	jmp    c010e56f <sched_class_proc_tick+0x36>
    }
    else {
        proc->need_resched = 1;
c010e565:	8b 45 08             	mov    0x8(%ebp),%eax
c010e568:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    }
}
c010e56f:	c9                   	leave  
c010e570:	c3                   	ret    

c010e571 <sched_init>:

static struct run_queue __rq;

void
sched_init(void) {
c010e571:	55                   	push   %ebp
c010e572:	89 e5                	mov    %esp,%ebp
c010e574:	83 ec 28             	sub    $0x28,%esp
c010e577:	c7 45 f4 94 1f 15 c0 	movl   $0xc0151f94,-0xc(%ebp)
c010e57e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e581:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010e584:	89 50 04             	mov    %edx,0x4(%eax)
c010e587:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e58a:	8b 50 04             	mov    0x4(%eax),%edx
c010e58d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e590:	89 10                	mov    %edx,(%eax)
    list_init(&timer_list);

    sched_class = &default_sched_class;
c010e592:	c7 05 9c 1f 15 c0 8c 	movl   $0xc014ea8c,0xc0151f9c
c010e599:	ea 14 c0 

    rq = &__rq;
c010e59c:	c7 05 a0 1f 15 c0 a4 	movl   $0xc0151fa4,0xc0151fa0
c010e5a3:	1f 15 c0 
    rq->max_time_slice = 20;
c010e5a6:	a1 a0 1f 15 c0       	mov    0xc0151fa0,%eax
c010e5ab:	c7 40 0c 14 00 00 00 	movl   $0x14,0xc(%eax)
    sched_class->init(rq);
c010e5b2:	a1 9c 1f 15 c0       	mov    0xc0151f9c,%eax
c010e5b7:	8b 40 04             	mov    0x4(%eax),%eax
c010e5ba:	8b 15 a0 1f 15 c0    	mov    0xc0151fa0,%edx
c010e5c0:	89 14 24             	mov    %edx,(%esp)
c010e5c3:	ff d0                	call   *%eax

    cprintf("sched class: %s\n", sched_class->name);
c010e5c5:	a1 9c 1f 15 c0       	mov    0xc0151f9c,%eax
c010e5ca:	8b 00                	mov    (%eax),%eax
c010e5cc:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e5d0:	c7 04 24 2c 85 11 c0 	movl   $0xc011852c,(%esp)
c010e5d7:	e8 89 1d ff ff       	call   c0100365 <cprintf>
}
c010e5dc:	c9                   	leave  
c010e5dd:	c3                   	ret    

c010e5de <wakeup_proc>:

void
wakeup_proc(struct proc_struct *proc) {
c010e5de:	55                   	push   %ebp
c010e5df:	89 e5                	mov    %esp,%ebp
c010e5e1:	83 ec 28             	sub    $0x28,%esp
    assert(proc->state != PROC_ZOMBIE);
c010e5e4:	8b 45 08             	mov    0x8(%ebp),%eax
c010e5e7:	8b 00                	mov    (%eax),%eax
c010e5e9:	83 f8 03             	cmp    $0x3,%eax
c010e5ec:	75 24                	jne    c010e612 <wakeup_proc+0x34>
c010e5ee:	c7 44 24 0c 3d 85 11 	movl   $0xc011853d,0xc(%esp)
c010e5f5:	c0 
c010e5f6:	c7 44 24 08 58 85 11 	movl   $0xc0118558,0x8(%esp)
c010e5fd:	c0 
c010e5fe:	c7 44 24 04 3b 00 00 	movl   $0x3b,0x4(%esp)
c010e605:	00 
c010e606:	c7 04 24 6d 85 11 c0 	movl   $0xc011856d,(%esp)
c010e60d:	e8 b6 28 ff ff       	call   c0100ec8 <__panic>
    bool intr_flag;
    local_intr_save(intr_flag);
c010e612:	e8 7c fe ff ff       	call   c010e493 <__intr_save>
c010e617:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (proc->state != PROC_RUNNABLE) {
c010e61a:	8b 45 08             	mov    0x8(%ebp),%eax
c010e61d:	8b 00                	mov    (%eax),%eax
c010e61f:	83 f8 02             	cmp    $0x2,%eax
c010e622:	74 2d                	je     c010e651 <wakeup_proc+0x73>
            proc->state = PROC_RUNNABLE;
c010e624:	8b 45 08             	mov    0x8(%ebp),%eax
c010e627:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
            proc->wait_state = 0;
c010e62d:	8b 45 08             	mov    0x8(%ebp),%eax
c010e630:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%eax)
c010e637:	00 00 00 
            if (proc != current) {
c010e63a:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010e63f:	39 45 08             	cmp    %eax,0x8(%ebp)
c010e642:	74 29                	je     c010e66d <wakeup_proc+0x8f>
                sched_class_enqueue(proc);
c010e644:	8b 45 08             	mov    0x8(%ebp),%eax
c010e647:	89 04 24             	mov    %eax,(%esp)
c010e64a:	e8 81 fe ff ff       	call   c010e4d0 <sched_class_enqueue>
c010e64f:	eb 1c                	jmp    c010e66d <wakeup_proc+0x8f>
            }
        }
        else {
            warn("wakeup runnable process.\n");
c010e651:	c7 44 24 08 83 85 11 	movl   $0xc0118583,0x8(%esp)
c010e658:	c0 
c010e659:	c7 44 24 04 47 00 00 	movl   $0x47,0x4(%esp)
c010e660:	00 
c010e661:	c7 04 24 6d 85 11 c0 	movl   $0xc011856d,(%esp)
c010e668:	e8 c7 28 ff ff       	call   c0100f34 <__warn>
        }
    }
    local_intr_restore(intr_flag);
c010e66d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e670:	89 04 24             	mov    %eax,(%esp)
c010e673:	e8 45 fe ff ff       	call   c010e4bd <__intr_restore>
}
c010e678:	c9                   	leave  
c010e679:	c3                   	ret    

c010e67a <schedule>:

void
schedule(void) {
c010e67a:	55                   	push   %ebp
c010e67b:	89 e5                	mov    %esp,%ebp
c010e67d:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    struct proc_struct *next;
    local_intr_save(intr_flag);
c010e680:	e8 0e fe ff ff       	call   c010e493 <__intr_save>
c010e685:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        current->need_resched = 0;
c010e688:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010e68d:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        if (current->state == PROC_RUNNABLE) {
c010e694:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010e699:	8b 00                	mov    (%eax),%eax
c010e69b:	83 f8 02             	cmp    $0x2,%eax
c010e69e:	75 0d                	jne    c010e6ad <schedule+0x33>
            sched_class_enqueue(current);
c010e6a0:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010e6a5:	89 04 24             	mov    %eax,(%esp)
c010e6a8:	e8 23 fe ff ff       	call   c010e4d0 <sched_class_enqueue>
        }
        if ((next = sched_class_pick_next()) != NULL) {
c010e6ad:	e8 6c fe ff ff       	call   c010e51e <sched_class_pick_next>
c010e6b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e6b5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e6b9:	74 0b                	je     c010e6c6 <schedule+0x4c>
            sched_class_dequeue(next);
c010e6bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e6be:	89 04 24             	mov    %eax,(%esp)
c010e6c1:	e8 36 fe ff ff       	call   c010e4fc <sched_class_dequeue>
        }
        if (next == NULL) {
c010e6c6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e6ca:	75 08                	jne    c010e6d4 <schedule+0x5a>
            next = idleproc;
c010e6cc:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010e6d1:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        next->runs ++;
c010e6d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e6d7:	8b 40 08             	mov    0x8(%eax),%eax
c010e6da:	8d 50 01             	lea    0x1(%eax),%edx
c010e6dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e6e0:	89 50 08             	mov    %edx,0x8(%eax)
        if (next != current) {
c010e6e3:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010e6e8:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010e6eb:	74 0b                	je     c010e6f8 <schedule+0x7e>
            proc_run(next);
c010e6ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e6f0:	89 04 24             	mov    %eax,(%esp)
c010e6f3:	e8 ce dc ff ff       	call   c010c3c6 <proc_run>
        }
    }
    local_intr_restore(intr_flag);
c010e6f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e6fb:	89 04 24             	mov    %eax,(%esp)
c010e6fe:	e8 ba fd ff ff       	call   c010e4bd <__intr_restore>
}
c010e703:	c9                   	leave  
c010e704:	c3                   	ret    

c010e705 <add_timer>:

void
add_timer(timer_t *timer) {
c010e705:	55                   	push   %ebp
c010e706:	89 e5                	mov    %esp,%ebp
c010e708:	83 ec 48             	sub    $0x48,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010e70b:	e8 83 fd ff ff       	call   c010e493 <__intr_save>
c010e710:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        assert(timer->expires > 0 && timer->proc != NULL);
c010e713:	8b 45 08             	mov    0x8(%ebp),%eax
c010e716:	8b 00                	mov    (%eax),%eax
c010e718:	85 c0                	test   %eax,%eax
c010e71a:	74 0a                	je     c010e726 <add_timer+0x21>
c010e71c:	8b 45 08             	mov    0x8(%ebp),%eax
c010e71f:	8b 40 04             	mov    0x4(%eax),%eax
c010e722:	85 c0                	test   %eax,%eax
c010e724:	75 24                	jne    c010e74a <add_timer+0x45>
c010e726:	c7 44 24 0c a0 85 11 	movl   $0xc01185a0,0xc(%esp)
c010e72d:	c0 
c010e72e:	c7 44 24 08 58 85 11 	movl   $0xc0118558,0x8(%esp)
c010e735:	c0 
c010e736:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c010e73d:	00 
c010e73e:	c7 04 24 6d 85 11 c0 	movl   $0xc011856d,(%esp)
c010e745:	e8 7e 27 ff ff       	call   c0100ec8 <__panic>
        assert(list_empty(&(timer->timer_link)));
c010e74a:	8b 45 08             	mov    0x8(%ebp),%eax
c010e74d:	83 c0 08             	add    $0x8,%eax
c010e750:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010e753:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e756:	8b 40 04             	mov    0x4(%eax),%eax
c010e759:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010e75c:	0f 94 c0             	sete   %al
c010e75f:	0f b6 c0             	movzbl %al,%eax
c010e762:	85 c0                	test   %eax,%eax
c010e764:	75 24                	jne    c010e78a <add_timer+0x85>
c010e766:	c7 44 24 0c cc 85 11 	movl   $0xc01185cc,0xc(%esp)
c010e76d:	c0 
c010e76e:	c7 44 24 08 58 85 11 	movl   $0xc0118558,0x8(%esp)
c010e775:	c0 
c010e776:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
c010e77d:	00 
c010e77e:	c7 04 24 6d 85 11 c0 	movl   $0xc011856d,(%esp)
c010e785:	e8 3e 27 ff ff       	call   c0100ec8 <__panic>
c010e78a:	c7 45 e4 94 1f 15 c0 	movl   $0xc0151f94,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010e791:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e794:	8b 40 04             	mov    0x4(%eax),%eax
        list_entry_t *le = list_next(&timer_list);
c010e797:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while (le != &timer_list) {
c010e79a:	eb 4a                	jmp    c010e7e6 <add_timer+0xe1>
            timer_t *next = le2timer(le, timer_link);
c010e79c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e79f:	83 e8 08             	sub    $0x8,%eax
c010e7a2:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (timer->expires < next->expires) {
c010e7a5:	8b 45 08             	mov    0x8(%ebp),%eax
c010e7a8:	8b 10                	mov    (%eax),%edx
c010e7aa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e7ad:	8b 00                	mov    (%eax),%eax
c010e7af:	39 c2                	cmp    %eax,%edx
c010e7b1:	73 13                	jae    c010e7c6 <add_timer+0xc1>
                next->expires -= timer->expires;
c010e7b3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e7b6:	8b 10                	mov    (%eax),%edx
c010e7b8:	8b 45 08             	mov    0x8(%ebp),%eax
c010e7bb:	8b 00                	mov    (%eax),%eax
c010e7bd:	29 c2                	sub    %eax,%edx
c010e7bf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e7c2:	89 10                	mov    %edx,(%eax)
                break;
c010e7c4:	eb 29                	jmp    c010e7ef <add_timer+0xea>
            }
            timer->expires -= next->expires;
c010e7c6:	8b 45 08             	mov    0x8(%ebp),%eax
c010e7c9:	8b 10                	mov    (%eax),%edx
c010e7cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e7ce:	8b 00                	mov    (%eax),%eax
c010e7d0:	29 c2                	sub    %eax,%edx
c010e7d2:	8b 45 08             	mov    0x8(%ebp),%eax
c010e7d5:	89 10                	mov    %edx,(%eax)
c010e7d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e7da:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010e7dd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e7e0:	8b 40 04             	mov    0x4(%eax),%eax
            le = list_next(le);
c010e7e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    local_intr_save(intr_flag);
    {
        assert(timer->expires > 0 && timer->proc != NULL);
        assert(list_empty(&(timer->timer_link)));
        list_entry_t *le = list_next(&timer_list);
        while (le != &timer_list) {
c010e7e6:	81 7d f4 94 1f 15 c0 	cmpl   $0xc0151f94,-0xc(%ebp)
c010e7ed:	75 ad                	jne    c010e79c <add_timer+0x97>
                break;
            }
            timer->expires -= next->expires;
            le = list_next(le);
        }
        list_add_before(le, &(timer->timer_link));
c010e7ef:	8b 45 08             	mov    0x8(%ebp),%eax
c010e7f2:	8d 50 08             	lea    0x8(%eax),%edx
c010e7f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e7f8:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010e7fb:	89 55 d8             	mov    %edx,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c010e7fe:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010e801:	8b 00                	mov    (%eax),%eax
c010e803:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010e806:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010e809:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010e80c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010e80f:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010e812:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010e815:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010e818:	89 10                	mov    %edx,(%eax)
c010e81a:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010e81d:	8b 10                	mov    (%eax),%edx
c010e81f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010e822:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010e825:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010e828:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010e82b:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010e82e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010e831:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010e834:	89 10                	mov    %edx,(%eax)
    }
    local_intr_restore(intr_flag);
c010e836:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e839:	89 04 24             	mov    %eax,(%esp)
c010e83c:	e8 7c fc ff ff       	call   c010e4bd <__intr_restore>
}
c010e841:	c9                   	leave  
c010e842:	c3                   	ret    

c010e843 <del_timer>:

void
del_timer(timer_t *timer) {
c010e843:	55                   	push   %ebp
c010e844:	89 e5                	mov    %esp,%ebp
c010e846:	83 ec 48             	sub    $0x48,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010e849:	e8 45 fc ff ff       	call   c010e493 <__intr_save>
c010e84e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (!list_empty(&(timer->timer_link))) {
c010e851:	8b 45 08             	mov    0x8(%ebp),%eax
c010e854:	83 c0 08             	add    $0x8,%eax
c010e857:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010e85a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e85d:	8b 40 04             	mov    0x4(%eax),%eax
c010e860:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010e863:	0f 94 c0             	sete   %al
c010e866:	0f b6 c0             	movzbl %al,%eax
c010e869:	85 c0                	test   %eax,%eax
c010e86b:	0f 85 89 00 00 00    	jne    c010e8fa <del_timer+0xb7>
            if (timer->expires != 0) {
c010e871:	8b 45 08             	mov    0x8(%ebp),%eax
c010e874:	8b 00                	mov    (%eax),%eax
c010e876:	85 c0                	test   %eax,%eax
c010e878:	74 35                	je     c010e8af <del_timer+0x6c>
                list_entry_t *le = list_next(&(timer->timer_link));
c010e87a:	8b 45 08             	mov    0x8(%ebp),%eax
c010e87d:	83 c0 08             	add    $0x8,%eax
c010e880:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010e883:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e886:	8b 40 04             	mov    0x4(%eax),%eax
c010e889:	89 45 f0             	mov    %eax,-0x10(%ebp)
                if (le != &timer_list) {
c010e88c:	81 7d f0 94 1f 15 c0 	cmpl   $0xc0151f94,-0x10(%ebp)
c010e893:	74 1a                	je     c010e8af <del_timer+0x6c>
                    timer_t *next = le2timer(le, timer_link);
c010e895:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e898:	83 e8 08             	sub    $0x8,%eax
c010e89b:	89 45 ec             	mov    %eax,-0x14(%ebp)
                    next->expires += timer->expires;
c010e89e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e8a1:	8b 10                	mov    (%eax),%edx
c010e8a3:	8b 45 08             	mov    0x8(%ebp),%eax
c010e8a6:	8b 00                	mov    (%eax),%eax
c010e8a8:	01 c2                	add    %eax,%edx
c010e8aa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e8ad:	89 10                	mov    %edx,(%eax)
                }
            }
            list_del_init(&(timer->timer_link));
c010e8af:	8b 45 08             	mov    0x8(%ebp),%eax
c010e8b2:	83 c0 08             	add    $0x8,%eax
c010e8b5:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010e8b8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e8bb:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010e8be:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010e8c1:	8b 40 04             	mov    0x4(%eax),%eax
c010e8c4:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010e8c7:	8b 12                	mov    (%edx),%edx
c010e8c9:	89 55 d8             	mov    %edx,-0x28(%ebp)
c010e8cc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010e8cf:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010e8d2:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010e8d5:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010e8d8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010e8db:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010e8de:	89 10                	mov    %edx,(%eax)
c010e8e0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e8e3:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010e8e6:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010e8e9:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010e8ec:	89 50 04             	mov    %edx,0x4(%eax)
c010e8ef:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010e8f2:	8b 50 04             	mov    0x4(%eax),%edx
c010e8f5:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010e8f8:	89 10                	mov    %edx,(%eax)
        }
    }
    local_intr_restore(intr_flag);
c010e8fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e8fd:	89 04 24             	mov    %eax,(%esp)
c010e900:	e8 b8 fb ff ff       	call   c010e4bd <__intr_restore>
}
c010e905:	c9                   	leave  
c010e906:	c3                   	ret    

c010e907 <run_timer_list>:

void
run_timer_list(void) {
c010e907:	55                   	push   %ebp
c010e908:	89 e5                	mov    %esp,%ebp
c010e90a:	83 ec 38             	sub    $0x38,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010e90d:	e8 81 fb ff ff       	call   c010e493 <__intr_save>
c010e912:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010e915:	c7 45 e4 94 1f 15 c0 	movl   $0xc0151f94,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010e91c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e91f:	8b 40 04             	mov    0x4(%eax),%eax
    {
        list_entry_t *le = list_next(&timer_list);
c010e922:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (le != &timer_list) {
c010e925:	81 7d f4 94 1f 15 c0 	cmpl   $0xc0151f94,-0xc(%ebp)
c010e92c:	0f 84 fb 00 00 00    	je     c010ea2d <run_timer_list+0x126>
            timer_t *timer = le2timer(le, timer_link);
c010e932:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e935:	83 e8 08             	sub    $0x8,%eax
c010e938:	89 45 f0             	mov    %eax,-0x10(%ebp)
            assert(timer->expires != 0);
c010e93b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e93e:	8b 00                	mov    (%eax),%eax
c010e940:	85 c0                	test   %eax,%eax
c010e942:	75 24                	jne    c010e968 <run_timer_list+0x61>
c010e944:	c7 44 24 0c ed 85 11 	movl   $0xc01185ed,0xc(%esp)
c010e94b:	c0 
c010e94c:	c7 44 24 08 58 85 11 	movl   $0xc0118558,0x8(%esp)
c010e953:	c0 
c010e954:	c7 44 24 04 96 00 00 	movl   $0x96,0x4(%esp)
c010e95b:	00 
c010e95c:	c7 04 24 6d 85 11 c0 	movl   $0xc011856d,(%esp)
c010e963:	e8 60 25 ff ff       	call   c0100ec8 <__panic>
            timer->expires --;
c010e968:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e96b:	8b 00                	mov    (%eax),%eax
c010e96d:	8d 50 ff             	lea    -0x1(%eax),%edx
c010e970:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e973:	89 10                	mov    %edx,(%eax)
            while (timer->expires == 0) {
c010e975:	e9 a6 00 00 00       	jmp    c010ea20 <run_timer_list+0x119>
c010e97a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e97d:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010e980:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e983:	8b 40 04             	mov    0x4(%eax),%eax
                le = list_next(le);
c010e986:	89 45 f4             	mov    %eax,-0xc(%ebp)
                struct proc_struct *proc = timer->proc;
c010e989:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e98c:	8b 40 04             	mov    0x4(%eax),%eax
c010e98f:	89 45 e8             	mov    %eax,-0x18(%ebp)
                if (proc->wait_state != 0) {
c010e992:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e995:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010e99b:	85 c0                	test   %eax,%eax
c010e99d:	74 31                	je     c010e9d0 <run_timer_list+0xc9>
                    assert(proc->wait_state & WT_INTERRUPTED);
c010e99f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e9a2:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010e9a8:	85 c0                	test   %eax,%eax
c010e9aa:	78 4a                	js     c010e9f6 <run_timer_list+0xef>
c010e9ac:	c7 44 24 0c 04 86 11 	movl   $0xc0118604,0xc(%esp)
c010e9b3:	c0 
c010e9b4:	c7 44 24 08 58 85 11 	movl   $0xc0118558,0x8(%esp)
c010e9bb:	c0 
c010e9bc:	c7 44 24 04 9c 00 00 	movl   $0x9c,0x4(%esp)
c010e9c3:	00 
c010e9c4:	c7 04 24 6d 85 11 c0 	movl   $0xc011856d,(%esp)
c010e9cb:	e8 f8 24 ff ff       	call   c0100ec8 <__panic>
                }
                else {
                    warn("process %d's wait_state == 0.\n", proc->pid);
c010e9d0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e9d3:	8b 40 04             	mov    0x4(%eax),%eax
c010e9d6:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010e9da:	c7 44 24 08 28 86 11 	movl   $0xc0118628,0x8(%esp)
c010e9e1:	c0 
c010e9e2:	c7 44 24 04 9f 00 00 	movl   $0x9f,0x4(%esp)
c010e9e9:	00 
c010e9ea:	c7 04 24 6d 85 11 c0 	movl   $0xc011856d,(%esp)
c010e9f1:	e8 3e 25 ff ff       	call   c0100f34 <__warn>
                }
                wakeup_proc(proc);
c010e9f6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e9f9:	89 04 24             	mov    %eax,(%esp)
c010e9fc:	e8 dd fb ff ff       	call   c010e5de <wakeup_proc>
                del_timer(timer);
c010ea01:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ea04:	89 04 24             	mov    %eax,(%esp)
c010ea07:	e8 37 fe ff ff       	call   c010e843 <del_timer>
                if (le == &timer_list) {
c010ea0c:	81 7d f4 94 1f 15 c0 	cmpl   $0xc0151f94,-0xc(%ebp)
c010ea13:	75 02                	jne    c010ea17 <run_timer_list+0x110>
                    break;
c010ea15:	eb 16                	jmp    c010ea2d <run_timer_list+0x126>
                }
                timer = le2timer(le, timer_link);
c010ea17:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ea1a:	83 e8 08             	sub    $0x8,%eax
c010ea1d:	89 45 f0             	mov    %eax,-0x10(%ebp)
        list_entry_t *le = list_next(&timer_list);
        if (le != &timer_list) {
            timer_t *timer = le2timer(le, timer_link);
            assert(timer->expires != 0);
            timer->expires --;
            while (timer->expires == 0) {
c010ea20:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ea23:	8b 00                	mov    (%eax),%eax
c010ea25:	85 c0                	test   %eax,%eax
c010ea27:	0f 84 4d ff ff ff    	je     c010e97a <run_timer_list+0x73>
                    break;
                }
                timer = le2timer(le, timer_link);
            }
        }
        sched_class_proc_tick(current);
c010ea2d:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010ea32:	89 04 24             	mov    %eax,(%esp)
c010ea35:	e8 ff fa ff ff       	call   c010e539 <sched_class_proc_tick>
    }
    local_intr_restore(intr_flag);
c010ea3a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ea3d:	89 04 24             	mov    %eax,(%esp)
c010ea40:	e8 78 fa ff ff       	call   c010e4bd <__intr_restore>
}
c010ea45:	c9                   	leave  
c010ea46:	c3                   	ret    

c010ea47 <sys_exit>:
#include <stat.h>
#include <dirent.h>
#include <sysfile.h>

static int
sys_exit(uint32_t arg[]) {
c010ea47:	55                   	push   %ebp
c010ea48:	89 e5                	mov    %esp,%ebp
c010ea4a:	83 ec 28             	sub    $0x28,%esp
    int error_code = (int)arg[0];
c010ea4d:	8b 45 08             	mov    0x8(%ebp),%eax
c010ea50:	8b 00                	mov    (%eax),%eax
c010ea52:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_exit(error_code);
c010ea55:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ea58:	89 04 24             	mov    %eax,(%esp)
c010ea5b:	e8 d4 e0 ff ff       	call   c010cb34 <do_exit>
}
c010ea60:	c9                   	leave  
c010ea61:	c3                   	ret    

c010ea62 <sys_fork>:

static int
sys_fork(uint32_t arg[]) {
c010ea62:	55                   	push   %ebp
c010ea63:	89 e5                	mov    %esp,%ebp
c010ea65:	83 ec 28             	sub    $0x28,%esp
    struct trapframe *tf = current->tf;
c010ea68:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010ea6d:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ea70:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uintptr_t stack = tf->tf_esp;
c010ea73:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ea76:	8b 40 44             	mov    0x44(%eax),%eax
c010ea79:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_fork(0, stack, tf);
c010ea7c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ea7f:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ea83:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ea86:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ea8a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010ea91:	e8 63 df ff ff       	call   c010c9f9 <do_fork>
}
c010ea96:	c9                   	leave  
c010ea97:	c3                   	ret    

c010ea98 <sys_wait>:

static int
sys_wait(uint32_t arg[]) {
c010ea98:	55                   	push   %ebp
c010ea99:	89 e5                	mov    %esp,%ebp
c010ea9b:	83 ec 28             	sub    $0x28,%esp
    int pid = (int)arg[0];
c010ea9e:	8b 45 08             	mov    0x8(%ebp),%eax
c010eaa1:	8b 00                	mov    (%eax),%eax
c010eaa3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int *store = (int *)arg[1];
c010eaa6:	8b 45 08             	mov    0x8(%ebp),%eax
c010eaa9:	83 c0 04             	add    $0x4,%eax
c010eaac:	8b 00                	mov    (%eax),%eax
c010eaae:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_wait(pid, store);
c010eab1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eab4:	89 44 24 04          	mov    %eax,0x4(%esp)
c010eab8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eabb:	89 04 24             	mov    %eax,(%esp)
c010eabe:	e8 7a ee ff ff       	call   c010d93d <do_wait>
}
c010eac3:	c9                   	leave  
c010eac4:	c3                   	ret    

c010eac5 <sys_exec>:

static int
sys_exec(uint32_t arg[]) {
c010eac5:	55                   	push   %ebp
c010eac6:	89 e5                	mov    %esp,%ebp
c010eac8:	83 ec 28             	sub    $0x28,%esp
    const char *name = (const char *)arg[0];
c010eacb:	8b 45 08             	mov    0x8(%ebp),%eax
c010eace:	8b 00                	mov    (%eax),%eax
c010ead0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int argc = (int)arg[1];
c010ead3:	8b 45 08             	mov    0x8(%ebp),%eax
c010ead6:	83 c0 04             	add    $0x4,%eax
c010ead9:	8b 00                	mov    (%eax),%eax
c010eadb:	89 45 f0             	mov    %eax,-0x10(%ebp)
    const char **argv = (const char **)arg[2];
c010eade:	8b 45 08             	mov    0x8(%ebp),%eax
c010eae1:	83 c0 08             	add    $0x8,%eax
c010eae4:	8b 00                	mov    (%eax),%eax
c010eae6:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return do_execve(name, argc, argv);
c010eae9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010eaec:	89 44 24 08          	mov    %eax,0x8(%esp)
c010eaf0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eaf3:	89 44 24 04          	mov    %eax,0x4(%esp)
c010eaf7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eafa:	89 04 24             	mov    %eax,(%esp)
c010eafd:	e8 e8 eb ff ff       	call   c010d6ea <do_execve>
}
c010eb02:	c9                   	leave  
c010eb03:	c3                   	ret    

c010eb04 <sys_yield>:

static int
sys_yield(uint32_t arg[]) {
c010eb04:	55                   	push   %ebp
c010eb05:	89 e5                	mov    %esp,%ebp
c010eb07:	83 ec 08             	sub    $0x8,%esp
    return do_yield();
c010eb0a:	e8 18 ee ff ff       	call   c010d927 <do_yield>
}
c010eb0f:	c9                   	leave  
c010eb10:	c3                   	ret    

c010eb11 <sys_kill>:

static int
sys_kill(uint32_t arg[]) {
c010eb11:	55                   	push   %ebp
c010eb12:	89 e5                	mov    %esp,%ebp
c010eb14:	83 ec 28             	sub    $0x28,%esp
    int pid = (int)arg[0];
c010eb17:	8b 45 08             	mov    0x8(%ebp),%eax
c010eb1a:	8b 00                	mov    (%eax),%eax
c010eb1c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_kill(pid);
c010eb1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eb22:	89 04 24             	mov    %eax,(%esp)
c010eb25:	e8 b3 ef ff ff       	call   c010dadd <do_kill>
}
c010eb2a:	c9                   	leave  
c010eb2b:	c3                   	ret    

c010eb2c <sys_getpid>:

static int
sys_getpid(uint32_t arg[]) {
c010eb2c:	55                   	push   %ebp
c010eb2d:	89 e5                	mov    %esp,%ebp
    return current->pid;
c010eb2f:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010eb34:	8b 40 04             	mov    0x4(%eax),%eax
}
c010eb37:	5d                   	pop    %ebp
c010eb38:	c3                   	ret    

c010eb39 <sys_putc>:

static int
sys_putc(uint32_t arg[]) {
c010eb39:	55                   	push   %ebp
c010eb3a:	89 e5                	mov    %esp,%ebp
c010eb3c:	83 ec 28             	sub    $0x28,%esp
    int c = (int)arg[0];
c010eb3f:	8b 45 08             	mov    0x8(%ebp),%eax
c010eb42:	8b 00                	mov    (%eax),%eax
c010eb44:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cputchar(c);
c010eb47:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eb4a:	89 04 24             	mov    %eax,(%esp)
c010eb4d:	e8 39 18 ff ff       	call   c010038b <cputchar>
    return 0;
c010eb52:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010eb57:	c9                   	leave  
c010eb58:	c3                   	ret    

c010eb59 <sys_pgdir>:

static int
sys_pgdir(uint32_t arg[]) {
c010eb59:	55                   	push   %ebp
c010eb5a:	89 e5                	mov    %esp,%ebp
c010eb5c:	83 ec 08             	sub    $0x8,%esp
    print_pgdir();
c010eb5f:	e8 00 81 ff ff       	call   c0106c64 <print_pgdir>
    return 0;
c010eb64:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010eb69:	c9                   	leave  
c010eb6a:	c3                   	ret    

c010eb6b <sys_gettime>:

static uint32_t
sys_gettime(uint32_t arg[]) {
c010eb6b:	55                   	push   %ebp
c010eb6c:	89 e5                	mov    %esp,%ebp
    return (int)ticks;
c010eb6e:	a1 10 30 15 c0       	mov    0xc0153010,%eax
}
c010eb73:	5d                   	pop    %ebp
c010eb74:	c3                   	ret    

c010eb75 <sys_lab6_set_priority>:
static uint32_t
sys_lab6_set_priority(uint32_t arg[])
{
c010eb75:	55                   	push   %ebp
c010eb76:	89 e5                	mov    %esp,%ebp
c010eb78:	83 ec 28             	sub    $0x28,%esp
    uint32_t priority = (uint32_t)arg[0];
c010eb7b:	8b 45 08             	mov    0x8(%ebp),%eax
c010eb7e:	8b 00                	mov    (%eax),%eax
c010eb80:	89 45 f4             	mov    %eax,-0xc(%ebp)
    lab6_set_priority(priority);
c010eb83:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eb86:	89 04 24             	mov    %eax,(%esp)
c010eb89:	e8 b2 f4 ff ff       	call   c010e040 <lab6_set_priority>
    return 0;
c010eb8e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010eb93:	c9                   	leave  
c010eb94:	c3                   	ret    

c010eb95 <sys_sleep>:

static int
sys_sleep(uint32_t arg[]) {
c010eb95:	55                   	push   %ebp
c010eb96:	89 e5                	mov    %esp,%ebp
c010eb98:	83 ec 28             	sub    $0x28,%esp
    unsigned int time = (unsigned int)arg[0];
c010eb9b:	8b 45 08             	mov    0x8(%ebp),%eax
c010eb9e:	8b 00                	mov    (%eax),%eax
c010eba0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_sleep(time);
c010eba3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eba6:	89 04 24             	mov    %eax,(%esp)
c010eba9:	e8 bc f4 ff ff       	call   c010e06a <do_sleep>
}
c010ebae:	c9                   	leave  
c010ebaf:	c3                   	ret    

c010ebb0 <sys_open>:

static int
sys_open(uint32_t arg[]) {
c010ebb0:	55                   	push   %ebp
c010ebb1:	89 e5                	mov    %esp,%ebp
c010ebb3:	83 ec 28             	sub    $0x28,%esp
    const char *path = (const char *)arg[0];
c010ebb6:	8b 45 08             	mov    0x8(%ebp),%eax
c010ebb9:	8b 00                	mov    (%eax),%eax
c010ebbb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t open_flags = (uint32_t)arg[1];
c010ebbe:	8b 45 08             	mov    0x8(%ebp),%eax
c010ebc1:	8b 40 04             	mov    0x4(%eax),%eax
c010ebc4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_open(path, open_flags);
c010ebc7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ebca:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ebce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ebd1:	89 04 24             	mov    %eax,(%esp)
c010ebd4:	e8 df c9 ff ff       	call   c010b5b8 <sysfile_open>
}
c010ebd9:	c9                   	leave  
c010ebda:	c3                   	ret    

c010ebdb <sys_close>:

static int
sys_close(uint32_t arg[]) {
c010ebdb:	55                   	push   %ebp
c010ebdc:	89 e5                	mov    %esp,%ebp
c010ebde:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010ebe1:	8b 45 08             	mov    0x8(%ebp),%eax
c010ebe4:	8b 00                	mov    (%eax),%eax
c010ebe6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sysfile_close(fd);
c010ebe9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ebec:	89 04 24             	mov    %eax,(%esp)
c010ebef:	e8 0f ca ff ff       	call   c010b603 <sysfile_close>
}
c010ebf4:	c9                   	leave  
c010ebf5:	c3                   	ret    

c010ebf6 <sys_read>:

static int
sys_read(uint32_t arg[]) {
c010ebf6:	55                   	push   %ebp
c010ebf7:	89 e5                	mov    %esp,%ebp
c010ebf9:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010ebfc:	8b 45 08             	mov    0x8(%ebp),%eax
c010ebff:	8b 00                	mov    (%eax),%eax
c010ec01:	89 45 f4             	mov    %eax,-0xc(%ebp)
    void *base = (void *)arg[1];
c010ec04:	8b 45 08             	mov    0x8(%ebp),%eax
c010ec07:	83 c0 04             	add    $0x4,%eax
c010ec0a:	8b 00                	mov    (%eax),%eax
c010ec0c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    size_t len = (size_t)arg[2];
c010ec0f:	8b 45 08             	mov    0x8(%ebp),%eax
c010ec12:	8b 40 08             	mov    0x8(%eax),%eax
c010ec15:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return sysfile_read(fd, base, len);
c010ec18:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ec1b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ec1f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ec22:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ec26:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ec29:	89 04 24             	mov    %eax,(%esp)
c010ec2c:	e8 e5 c9 ff ff       	call   c010b616 <sysfile_read>
}
c010ec31:	c9                   	leave  
c010ec32:	c3                   	ret    

c010ec33 <sys_write>:

static int
sys_write(uint32_t arg[]) {
c010ec33:	55                   	push   %ebp
c010ec34:	89 e5                	mov    %esp,%ebp
c010ec36:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010ec39:	8b 45 08             	mov    0x8(%ebp),%eax
c010ec3c:	8b 00                	mov    (%eax),%eax
c010ec3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    void *base = (void *)arg[1];
c010ec41:	8b 45 08             	mov    0x8(%ebp),%eax
c010ec44:	83 c0 04             	add    $0x4,%eax
c010ec47:	8b 00                	mov    (%eax),%eax
c010ec49:	89 45 f0             	mov    %eax,-0x10(%ebp)
    size_t len = (size_t)arg[2];
c010ec4c:	8b 45 08             	mov    0x8(%ebp),%eax
c010ec4f:	8b 40 08             	mov    0x8(%eax),%eax
c010ec52:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return sysfile_write(fd, base, len);
c010ec55:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ec58:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ec5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ec5f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ec63:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ec66:	89 04 24             	mov    %eax,(%esp)
c010ec69:	e8 20 cb ff ff       	call   c010b78e <sysfile_write>
}
c010ec6e:	c9                   	leave  
c010ec6f:	c3                   	ret    

c010ec70 <sys_seek>:

static int
sys_seek(uint32_t arg[]) {
c010ec70:	55                   	push   %ebp
c010ec71:	89 e5                	mov    %esp,%ebp
c010ec73:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010ec76:	8b 45 08             	mov    0x8(%ebp),%eax
c010ec79:	8b 00                	mov    (%eax),%eax
c010ec7b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    off_t pos = (off_t)arg[1];
c010ec7e:	8b 45 08             	mov    0x8(%ebp),%eax
c010ec81:	83 c0 04             	add    $0x4,%eax
c010ec84:	8b 00                	mov    (%eax),%eax
c010ec86:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int whence = (int)arg[2];
c010ec89:	8b 45 08             	mov    0x8(%ebp),%eax
c010ec8c:	83 c0 08             	add    $0x8,%eax
c010ec8f:	8b 00                	mov    (%eax),%eax
c010ec91:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return sysfile_seek(fd, pos, whence);
c010ec94:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ec97:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ec9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ec9e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010eca2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eca5:	89 04 24             	mov    %eax,(%esp)
c010eca8:	e8 5b cc ff ff       	call   c010b908 <sysfile_seek>
}
c010ecad:	c9                   	leave  
c010ecae:	c3                   	ret    

c010ecaf <sys_fstat>:

static int
sys_fstat(uint32_t arg[]) {
c010ecaf:	55                   	push   %ebp
c010ecb0:	89 e5                	mov    %esp,%ebp
c010ecb2:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010ecb5:	8b 45 08             	mov    0x8(%ebp),%eax
c010ecb8:	8b 00                	mov    (%eax),%eax
c010ecba:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct stat *stat = (struct stat *)arg[1];
c010ecbd:	8b 45 08             	mov    0x8(%ebp),%eax
c010ecc0:	83 c0 04             	add    $0x4,%eax
c010ecc3:	8b 00                	mov    (%eax),%eax
c010ecc5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_fstat(fd, stat);
c010ecc8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eccb:	89 44 24 04          	mov    %eax,0x4(%esp)
c010eccf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ecd2:	89 04 24             	mov    %eax,(%esp)
c010ecd5:	e8 4f cc ff ff       	call   c010b929 <sysfile_fstat>
}
c010ecda:	c9                   	leave  
c010ecdb:	c3                   	ret    

c010ecdc <sys_fsync>:

static int
sys_fsync(uint32_t arg[]) {
c010ecdc:	55                   	push   %ebp
c010ecdd:	89 e5                	mov    %esp,%ebp
c010ecdf:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010ece2:	8b 45 08             	mov    0x8(%ebp),%eax
c010ece5:	8b 00                	mov    (%eax),%eax
c010ece7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sysfile_fsync(fd);
c010ecea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eced:	89 04 24             	mov    %eax,(%esp)
c010ecf0:	e8 b2 cc ff ff       	call   c010b9a7 <sysfile_fsync>
}
c010ecf5:	c9                   	leave  
c010ecf6:	c3                   	ret    

c010ecf7 <sys_getcwd>:

static int
sys_getcwd(uint32_t arg[]) {
c010ecf7:	55                   	push   %ebp
c010ecf8:	89 e5                	mov    %esp,%ebp
c010ecfa:	83 ec 28             	sub    $0x28,%esp
    char *buf = (char *)arg[0];
c010ecfd:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed00:	8b 00                	mov    (%eax),%eax
c010ed02:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t len = (size_t)arg[1];
c010ed05:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed08:	8b 40 04             	mov    0x4(%eax),%eax
c010ed0b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_getcwd(buf, len);
c010ed0e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ed11:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ed15:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ed18:	89 04 24             	mov    %eax,(%esp)
c010ed1b:	e8 24 ce ff ff       	call   c010bb44 <sysfile_getcwd>
}
c010ed20:	c9                   	leave  
c010ed21:	c3                   	ret    

c010ed22 <sys_getdirentry>:

static int
sys_getdirentry(uint32_t arg[]) {
c010ed22:	55                   	push   %ebp
c010ed23:	89 e5                	mov    %esp,%ebp
c010ed25:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010ed28:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed2b:	8b 00                	mov    (%eax),%eax
c010ed2d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct dirent *direntp = (struct dirent *)arg[1];
c010ed30:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed33:	83 c0 04             	add    $0x4,%eax
c010ed36:	8b 00                	mov    (%eax),%eax
c010ed38:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_getdirentry(fd, direntp);
c010ed3b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ed3e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ed42:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ed45:	89 04 24             	mov    %eax,(%esp)
c010ed48:	e8 8e ce ff ff       	call   c010bbdb <sysfile_getdirentry>
}
c010ed4d:	c9                   	leave  
c010ed4e:	c3                   	ret    

c010ed4f <sys_dup>:

static int
sys_dup(uint32_t arg[]) {
c010ed4f:	55                   	push   %ebp
c010ed50:	89 e5                	mov    %esp,%ebp
c010ed52:	83 ec 28             	sub    $0x28,%esp
    int fd1 = (int)arg[0];
c010ed55:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed58:	8b 00                	mov    (%eax),%eax
c010ed5a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int fd2 = (int)arg[1];
c010ed5d:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed60:	83 c0 04             	add    $0x4,%eax
c010ed63:	8b 00                	mov    (%eax),%eax
c010ed65:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_dup(fd1, fd2);
c010ed68:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ed6b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ed6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ed72:	89 04 24             	mov    %eax,(%esp)
c010ed75:	e8 55 cf ff ff       	call   c010bccf <sysfile_dup>
}
c010ed7a:	c9                   	leave  
c010ed7b:	c3                   	ret    

c010ed7c <syscall>:
};

#define NUM_SYSCALLS        ((sizeof(syscalls)) / (sizeof(syscalls[0])))

void
syscall(void) {
c010ed7c:	55                   	push   %ebp
c010ed7d:	89 e5                	mov    %esp,%ebp
c010ed7f:	83 ec 48             	sub    $0x48,%esp
    struct trapframe *tf = current->tf;
c010ed82:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010ed87:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ed8a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t arg[5];
    int num = tf->tf_regs.reg_eax;
c010ed8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ed90:	8b 40 1c             	mov    0x1c(%eax),%eax
c010ed93:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (num >= 0 && num < NUM_SYSCALLS) {
c010ed96:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ed9a:	78 60                	js     c010edfc <syscall+0x80>
c010ed9c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ed9f:	3d ff 00 00 00       	cmp    $0xff,%eax
c010eda4:	77 56                	ja     c010edfc <syscall+0x80>
        if (syscalls[num] != NULL) {
c010eda6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eda9:	8b 04 85 c0 ea 14 c0 	mov    -0x3feb1540(,%eax,4),%eax
c010edb0:	85 c0                	test   %eax,%eax
c010edb2:	74 48                	je     c010edfc <syscall+0x80>
            arg[0] = tf->tf_regs.reg_edx;
c010edb4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010edb7:	8b 40 14             	mov    0x14(%eax),%eax
c010edba:	89 45 dc             	mov    %eax,-0x24(%ebp)
            arg[1] = tf->tf_regs.reg_ecx;
c010edbd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010edc0:	8b 40 18             	mov    0x18(%eax),%eax
c010edc3:	89 45 e0             	mov    %eax,-0x20(%ebp)
            arg[2] = tf->tf_regs.reg_ebx;
c010edc6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010edc9:	8b 40 10             	mov    0x10(%eax),%eax
c010edcc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            arg[3] = tf->tf_regs.reg_edi;
c010edcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010edd2:	8b 00                	mov    (%eax),%eax
c010edd4:	89 45 e8             	mov    %eax,-0x18(%ebp)
            arg[4] = tf->tf_regs.reg_esi;
c010edd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010edda:	8b 40 04             	mov    0x4(%eax),%eax
c010eddd:	89 45 ec             	mov    %eax,-0x14(%ebp)
            tf->tf_regs.reg_eax = syscalls[num](arg);
c010ede0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ede3:	8b 04 85 c0 ea 14 c0 	mov    -0x3feb1540(,%eax,4),%eax
c010edea:	8d 55 dc             	lea    -0x24(%ebp),%edx
c010eded:	89 14 24             	mov    %edx,(%esp)
c010edf0:	ff d0                	call   *%eax
c010edf2:	89 c2                	mov    %eax,%edx
c010edf4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010edf7:	89 50 1c             	mov    %edx,0x1c(%eax)
            return ;
c010edfa:	eb 46                	jmp    c010ee42 <syscall+0xc6>
        }
    }
    print_trapframe(tf);
c010edfc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010edff:	89 04 24             	mov    %eax,(%esp)
c010ee02:	e8 bb 36 ff ff       	call   c01024c2 <print_trapframe>
    panic("undefined syscall %d, pid = %d, name = %s.\n",
c010ee07:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010ee0c:	8d 50 48             	lea    0x48(%eax),%edx
c010ee0f:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010ee14:	8b 40 04             	mov    0x4(%eax),%eax
c010ee17:	89 54 24 14          	mov    %edx,0x14(%esp)
c010ee1b:	89 44 24 10          	mov    %eax,0x10(%esp)
c010ee1f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ee22:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010ee26:	c7 44 24 08 48 86 11 	movl   $0xc0118648,0x8(%esp)
c010ee2d:	c0 
c010ee2e:	c7 44 24 04 cd 00 00 	movl   $0xcd,0x4(%esp)
c010ee35:	00 
c010ee36:	c7 04 24 74 86 11 c0 	movl   $0xc0118674,(%esp)
c010ee3d:	e8 86 20 ff ff       	call   c0100ec8 <__panic>
            num, current->pid, current->name);
}
c010ee42:	c9                   	leave  
c010ee43:	c3                   	ret    

c010ee44 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010ee44:	55                   	push   %ebp
c010ee45:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010ee47:	8b 55 08             	mov    0x8(%ebp),%edx
c010ee4a:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010ee4f:	29 c2                	sub    %eax,%edx
c010ee51:	89 d0                	mov    %edx,%eax
c010ee53:	c1 f8 02             	sar    $0x2,%eax
c010ee56:	69 c0 39 8e e3 38    	imul   $0x38e38e39,%eax,%eax
}
c010ee5c:	5d                   	pop    %ebp
c010ee5d:	c3                   	ret    

c010ee5e <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010ee5e:	55                   	push   %ebp
c010ee5f:	89 e5                	mov    %esp,%ebp
c010ee61:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c010ee64:	8b 45 08             	mov    0x8(%ebp),%eax
c010ee67:	89 04 24             	mov    %eax,(%esp)
c010ee6a:	e8 d5 ff ff ff       	call   c010ee44 <page2ppn>
c010ee6f:	c1 e0 0c             	shl    $0xc,%eax
}
c010ee72:	c9                   	leave  
c010ee73:	c3                   	ret    

c010ee74 <page2kva>:
    }
    return &pages[PPN(pa)];
}

static inline void *
page2kva(struct Page *page) {
c010ee74:	55                   	push   %ebp
c010ee75:	89 e5                	mov    %esp,%ebp
c010ee77:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c010ee7a:	8b 45 08             	mov    0x8(%ebp),%eax
c010ee7d:	89 04 24             	mov    %eax,(%esp)
c010ee80:	e8 d9 ff ff ff       	call   c010ee5e <page2pa>
c010ee85:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ee88:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ee8b:	c1 e8 0c             	shr    $0xc,%eax
c010ee8e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ee91:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c010ee96:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010ee99:	72 23                	jb     c010eebe <page2kva+0x4a>
c010ee9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ee9e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010eea2:	c7 44 24 08 8c 86 11 	movl   $0xc011868c,0x8(%esp)
c010eea9:	c0 
c010eeaa:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c010eeb1:	00 
c010eeb2:	c7 04 24 af 86 11 c0 	movl   $0xc01186af,(%esp)
c010eeb9:	e8 0a 20 ff ff       	call   c0100ec8 <__panic>
c010eebe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eec1:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010eec6:	c9                   	leave  
c010eec7:	c3                   	ret    

c010eec8 <swapfs_init>:
#include <ide.h>
#include <pmm.h>
#include <assert.h>

void
swapfs_init(void) {
c010eec8:	55                   	push   %ebp
c010eec9:	89 e5                	mov    %esp,%ebp
c010eecb:	83 ec 18             	sub    $0x18,%esp
    static_assert((PGSIZE % SECTSIZE) == 0);
    if (!ide_device_valid(SWAP_DEV_NO)) {
c010eece:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010eed5:	e8 48 2d ff ff       	call   c0101c22 <ide_device_valid>
c010eeda:	85 c0                	test   %eax,%eax
c010eedc:	75 1c                	jne    c010eefa <swapfs_init+0x32>
        panic("swap fs isn't available.\n");
c010eede:	c7 44 24 08 bd 86 11 	movl   $0xc01186bd,0x8(%esp)
c010eee5:	c0 
c010eee6:	c7 44 24 04 0d 00 00 	movl   $0xd,0x4(%esp)
c010eeed:	00 
c010eeee:	c7 04 24 d7 86 11 c0 	movl   $0xc01186d7,(%esp)
c010eef5:	e8 ce 1f ff ff       	call   c0100ec8 <__panic>
    }
    max_swap_offset = ide_device_size(SWAP_DEV_NO) / (PGSIZE / SECTSIZE);
c010eefa:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010ef01:	e8 5b 2d ff ff       	call   c0101c61 <ide_device_size>
c010ef06:	c1 e8 03             	shr    $0x3,%eax
c010ef09:	a3 dc 30 15 c0       	mov    %eax,0xc01530dc
}
c010ef0e:	c9                   	leave  
c010ef0f:	c3                   	ret    

c010ef10 <swapfs_read>:

int
swapfs_read(swap_entry_t entry, struct Page *page) {
c010ef10:	55                   	push   %ebp
c010ef11:	89 e5                	mov    %esp,%ebp
c010ef13:	83 ec 28             	sub    $0x28,%esp
    return ide_read_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c010ef16:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ef19:	89 04 24             	mov    %eax,(%esp)
c010ef1c:	e8 53 ff ff ff       	call   c010ee74 <page2kva>
c010ef21:	8b 55 08             	mov    0x8(%ebp),%edx
c010ef24:	c1 ea 08             	shr    $0x8,%edx
c010ef27:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010ef2a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ef2e:	74 0b                	je     c010ef3b <swapfs_read+0x2b>
c010ef30:	8b 15 dc 30 15 c0    	mov    0xc01530dc,%edx
c010ef36:	39 55 f4             	cmp    %edx,-0xc(%ebp)
c010ef39:	72 23                	jb     c010ef5e <swapfs_read+0x4e>
c010ef3b:	8b 45 08             	mov    0x8(%ebp),%eax
c010ef3e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010ef42:	c7 44 24 08 ed 86 11 	movl   $0xc01186ed,0x8(%esp)
c010ef49:	c0 
c010ef4a:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
c010ef51:	00 
c010ef52:	c7 04 24 d7 86 11 c0 	movl   $0xc01186d7,(%esp)
c010ef59:	e8 6a 1f ff ff       	call   c0100ec8 <__panic>
c010ef5e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010ef61:	c1 e2 03             	shl    $0x3,%edx
c010ef64:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c010ef6b:	00 
c010ef6c:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ef70:	89 54 24 04          	mov    %edx,0x4(%esp)
c010ef74:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010ef7b:	e8 20 2d ff ff       	call   c0101ca0 <ide_read_secs>
}
c010ef80:	c9                   	leave  
c010ef81:	c3                   	ret    

c010ef82 <swapfs_write>:

int
swapfs_write(swap_entry_t entry, struct Page *page) {
c010ef82:	55                   	push   %ebp
c010ef83:	89 e5                	mov    %esp,%ebp
c010ef85:	83 ec 28             	sub    $0x28,%esp
    return ide_write_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c010ef88:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ef8b:	89 04 24             	mov    %eax,(%esp)
c010ef8e:	e8 e1 fe ff ff       	call   c010ee74 <page2kva>
c010ef93:	8b 55 08             	mov    0x8(%ebp),%edx
c010ef96:	c1 ea 08             	shr    $0x8,%edx
c010ef99:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010ef9c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010efa0:	74 0b                	je     c010efad <swapfs_write+0x2b>
c010efa2:	8b 15 dc 30 15 c0    	mov    0xc01530dc,%edx
c010efa8:	39 55 f4             	cmp    %edx,-0xc(%ebp)
c010efab:	72 23                	jb     c010efd0 <swapfs_write+0x4e>
c010efad:	8b 45 08             	mov    0x8(%ebp),%eax
c010efb0:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010efb4:	c7 44 24 08 ed 86 11 	movl   $0xc01186ed,0x8(%esp)
c010efbb:	c0 
c010efbc:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
c010efc3:	00 
c010efc4:	c7 04 24 d7 86 11 c0 	movl   $0xc01186d7,(%esp)
c010efcb:	e8 f8 1e ff ff       	call   c0100ec8 <__panic>
c010efd0:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010efd3:	c1 e2 03             	shl    $0x3,%edx
c010efd6:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c010efdd:	00 
c010efde:	89 44 24 08          	mov    %eax,0x8(%esp)
c010efe2:	89 54 24 04          	mov    %edx,0x4(%esp)
c010efe6:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010efed:	e8 f0 2e ff ff       	call   c0101ee2 <ide_write_secs>
}
c010eff2:	c9                   	leave  
c010eff3:	c3                   	ret    

c010eff4 <inode_ref_count>:
#define vop_open_inc(node)                                          inode_open_inc(node)
#define vop_open_dec(node)                                          inode_open_dec(node)


static inline int
inode_ref_count(struct inode *node) {
c010eff4:	55                   	push   %ebp
c010eff5:	89 e5                	mov    %esp,%ebp
    return node->ref_count;
c010eff7:	8b 45 08             	mov    0x8(%ebp),%eax
c010effa:	8b 40 30             	mov    0x30(%eax),%eax
}
c010effd:	5d                   	pop    %ebp
c010effe:	c3                   	ret    

c010efff <inode_open_count>:

static inline int
inode_open_count(struct inode *node) {
c010efff:	55                   	push   %ebp
c010f000:	89 e5                	mov    %esp,%ebp
    return node->open_count;
c010f002:	8b 45 08             	mov    0x8(%ebp),%eax
c010f005:	8b 40 34             	mov    0x34(%eax),%eax
}
c010f008:	5d                   	pop    %ebp
c010f009:	c3                   	ret    

c010f00a <__alloc_inode>:

/* *
 * __alloc_inode - alloc a inode structure and initialize in_type
 * */
struct inode *
__alloc_inode(int type) {
c010f00a:	55                   	push   %ebp
c010f00b:	89 e5                	mov    %esp,%ebp
c010f00d:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = kmalloc(sizeof(struct inode))) != NULL) {
c010f010:	c7 04 24 40 00 00 00 	movl   $0x40,(%esp)
c010f017:	e8 c3 5c ff ff       	call   c0104cdf <kmalloc>
c010f01c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f01f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f023:	74 09                	je     c010f02e <__alloc_inode+0x24>
        node->in_type = type;
c010f025:	8b 55 08             	mov    0x8(%ebp),%edx
c010f028:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f02b:	89 50 2c             	mov    %edx,0x2c(%eax)
    }
    return node;
c010f02e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f031:	c9                   	leave  
c010f032:	c3                   	ret    

c010f033 <inode_init>:
/* *
 * inode_init - initialize a inode structure
 * invoked by vop_init
 * */
void
inode_init(struct inode *node, const struct inode_ops *ops, struct fs *fs) {
c010f033:	55                   	push   %ebp
c010f034:	89 e5                	mov    %esp,%ebp
c010f036:	83 ec 18             	sub    $0x18,%esp
    node->ref_count = 0;
c010f039:	8b 45 08             	mov    0x8(%ebp),%eax
c010f03c:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
    node->open_count = 0;
c010f043:	8b 45 08             	mov    0x8(%ebp),%eax
c010f046:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
    node->in_ops = ops, node->in_fs = fs;
c010f04d:	8b 45 08             	mov    0x8(%ebp),%eax
c010f050:	8b 55 0c             	mov    0xc(%ebp),%edx
c010f053:	89 50 3c             	mov    %edx,0x3c(%eax)
c010f056:	8b 45 08             	mov    0x8(%ebp),%eax
c010f059:	8b 55 10             	mov    0x10(%ebp),%edx
c010f05c:	89 50 38             	mov    %edx,0x38(%eax)
    vop_ref_inc(node);
c010f05f:	8b 45 08             	mov    0x8(%ebp),%eax
c010f062:	89 04 24             	mov    %eax,(%esp)
c010f065:	e8 7b 00 00 00       	call   c010f0e5 <inode_ref_inc>
}
c010f06a:	c9                   	leave  
c010f06b:	c3                   	ret    

c010f06c <inode_kill>:
/* *
 * inode_kill - kill a inode structure
 * invoked by vop_kill
 * */
void
inode_kill(struct inode *node) {
c010f06c:	55                   	push   %ebp
c010f06d:	89 e5                	mov    %esp,%ebp
c010f06f:	83 ec 18             	sub    $0x18,%esp
    assert(inode_ref_count(node) == 0);
c010f072:	8b 45 08             	mov    0x8(%ebp),%eax
c010f075:	89 04 24             	mov    %eax,(%esp)
c010f078:	e8 77 ff ff ff       	call   c010eff4 <inode_ref_count>
c010f07d:	85 c0                	test   %eax,%eax
c010f07f:	74 24                	je     c010f0a5 <inode_kill+0x39>
c010f081:	c7 44 24 0c 0c 87 11 	movl   $0xc011870c,0xc(%esp)
c010f088:	c0 
c010f089:	c7 44 24 08 27 87 11 	movl   $0xc0118727,0x8(%esp)
c010f090:	c0 
c010f091:	c7 44 24 04 29 00 00 	movl   $0x29,0x4(%esp)
c010f098:	00 
c010f099:	c7 04 24 3c 87 11 c0 	movl   $0xc011873c,(%esp)
c010f0a0:	e8 23 1e ff ff       	call   c0100ec8 <__panic>
    assert(inode_open_count(node) == 0);
c010f0a5:	8b 45 08             	mov    0x8(%ebp),%eax
c010f0a8:	89 04 24             	mov    %eax,(%esp)
c010f0ab:	e8 4f ff ff ff       	call   c010efff <inode_open_count>
c010f0b0:	85 c0                	test   %eax,%eax
c010f0b2:	74 24                	je     c010f0d8 <inode_kill+0x6c>
c010f0b4:	c7 44 24 0c 50 87 11 	movl   $0xc0118750,0xc(%esp)
c010f0bb:	c0 
c010f0bc:	c7 44 24 08 27 87 11 	movl   $0xc0118727,0x8(%esp)
c010f0c3:	c0 
c010f0c4:	c7 44 24 04 2a 00 00 	movl   $0x2a,0x4(%esp)
c010f0cb:	00 
c010f0cc:	c7 04 24 3c 87 11 c0 	movl   $0xc011873c,(%esp)
c010f0d3:	e8 f0 1d ff ff       	call   c0100ec8 <__panic>
    kfree(node);
c010f0d8:	8b 45 08             	mov    0x8(%ebp),%eax
c010f0db:	89 04 24             	mov    %eax,(%esp)
c010f0de:	e8 17 5c ff ff       	call   c0104cfa <kfree>
}
c010f0e3:	c9                   	leave  
c010f0e4:	c3                   	ret    

c010f0e5 <inode_ref_inc>:
/* *
 * inode_ref_inc - increment ref_count
 * invoked by vop_ref_inc
 * */
int
inode_ref_inc(struct inode *node) {
c010f0e5:	55                   	push   %ebp
c010f0e6:	89 e5                	mov    %esp,%ebp
    node->ref_count += 1;
c010f0e8:	8b 45 08             	mov    0x8(%ebp),%eax
c010f0eb:	8b 40 30             	mov    0x30(%eax),%eax
c010f0ee:	8d 50 01             	lea    0x1(%eax),%edx
c010f0f1:	8b 45 08             	mov    0x8(%ebp),%eax
c010f0f4:	89 50 30             	mov    %edx,0x30(%eax)
    return node->ref_count;
c010f0f7:	8b 45 08             	mov    0x8(%ebp),%eax
c010f0fa:	8b 40 30             	mov    0x30(%eax),%eax
}
c010f0fd:	5d                   	pop    %ebp
c010f0fe:	c3                   	ret    

c010f0ff <inode_ref_dec>:
 * inode_ref_dec - decrement ref_count
 * invoked by vop_ref_dec
 * calls vop_reclaim if the ref_count hits zero
 * */
int
inode_ref_dec(struct inode *node) {
c010f0ff:	55                   	push   %ebp
c010f100:	89 e5                	mov    %esp,%ebp
c010f102:	83 ec 28             	sub    $0x28,%esp
    assert(inode_ref_count(node) > 0);
c010f105:	8b 45 08             	mov    0x8(%ebp),%eax
c010f108:	89 04 24             	mov    %eax,(%esp)
c010f10b:	e8 e4 fe ff ff       	call   c010eff4 <inode_ref_count>
c010f110:	85 c0                	test   %eax,%eax
c010f112:	7f 24                	jg     c010f138 <inode_ref_dec+0x39>
c010f114:	c7 44 24 0c 6c 87 11 	movl   $0xc011876c,0xc(%esp)
c010f11b:	c0 
c010f11c:	c7 44 24 08 27 87 11 	movl   $0xc0118727,0x8(%esp)
c010f123:	c0 
c010f124:	c7 44 24 04 3f 00 00 	movl   $0x3f,0x4(%esp)
c010f12b:	00 
c010f12c:	c7 04 24 3c 87 11 c0 	movl   $0xc011873c,(%esp)
c010f133:	e8 90 1d ff ff       	call   c0100ec8 <__panic>
    int ref_count, ret;
    node->ref_count-= 1;
c010f138:	8b 45 08             	mov    0x8(%ebp),%eax
c010f13b:	8b 40 30             	mov    0x30(%eax),%eax
c010f13e:	8d 50 ff             	lea    -0x1(%eax),%edx
c010f141:	8b 45 08             	mov    0x8(%ebp),%eax
c010f144:	89 50 30             	mov    %edx,0x30(%eax)
    ref_count = node->ref_count;
c010f147:	8b 45 08             	mov    0x8(%ebp),%eax
c010f14a:	8b 40 30             	mov    0x30(%eax),%eax
c010f14d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ref_count == 0) {
c010f150:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f154:	0f 85 8d 00 00 00    	jne    c010f1e7 <inode_ref_dec+0xe8>
        if ((ret = vop_reclaim(node)) != 0 && ret != -E_BUSY) {
c010f15a:	8b 45 08             	mov    0x8(%ebp),%eax
c010f15d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f160:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f164:	74 17                	je     c010f17d <inode_ref_dec+0x7e>
c010f166:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f169:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f16c:	85 c0                	test   %eax,%eax
c010f16e:	74 0d                	je     c010f17d <inode_ref_dec+0x7e>
c010f170:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f173:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f176:	8b 40 24             	mov    0x24(%eax),%eax
c010f179:	85 c0                	test   %eax,%eax
c010f17b:	75 24                	jne    c010f1a1 <inode_ref_dec+0xa2>
c010f17d:	c7 44 24 0c 88 87 11 	movl   $0xc0118788,0xc(%esp)
c010f184:	c0 
c010f185:	c7 44 24 08 27 87 11 	movl   $0xc0118727,0x8(%esp)
c010f18c:	c0 
c010f18d:	c7 44 24 04 44 00 00 	movl   $0x44,0x4(%esp)
c010f194:	00 
c010f195:	c7 04 24 3c 87 11 c0 	movl   $0xc011873c,(%esp)
c010f19c:	e8 27 1d ff ff       	call   c0100ec8 <__panic>
c010f1a1:	c7 44 24 04 d8 87 11 	movl   $0xc01187d8,0x4(%esp)
c010f1a8:	c0 
c010f1a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f1ac:	89 04 24             	mov    %eax,(%esp)
c010f1af:	e8 39 01 00 00       	call   c010f2ed <inode_check>
c010f1b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f1b7:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f1ba:	8b 40 24             	mov    0x24(%eax),%eax
c010f1bd:	8b 55 08             	mov    0x8(%ebp),%edx
c010f1c0:	89 14 24             	mov    %edx,(%esp)
c010f1c3:	ff d0                	call   *%eax
c010f1c5:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010f1c8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010f1cc:	74 19                	je     c010f1e7 <inode_ref_dec+0xe8>
c010f1ce:	83 7d ec f1          	cmpl   $0xfffffff1,-0x14(%ebp)
c010f1d2:	74 13                	je     c010f1e7 <inode_ref_dec+0xe8>
            cprintf("vfs: warning: vop_reclaim: %e.\n", ret);
c010f1d4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f1d7:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f1db:	c7 04 24 e0 87 11 c0 	movl   $0xc01187e0,(%esp)
c010f1e2:	e8 7e 11 ff ff       	call   c0100365 <cprintf>
        }
    }
    return ref_count;
c010f1e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f1ea:	c9                   	leave  
c010f1eb:	c3                   	ret    

c010f1ec <inode_open_inc>:
/* *
 * inode_open_inc - increment the open_count
 * invoked by vop_open_inc
 * */
int
inode_open_inc(struct inode *node) {
c010f1ec:	55                   	push   %ebp
c010f1ed:	89 e5                	mov    %esp,%ebp
    node->open_count += 1;
c010f1ef:	8b 45 08             	mov    0x8(%ebp),%eax
c010f1f2:	8b 40 34             	mov    0x34(%eax),%eax
c010f1f5:	8d 50 01             	lea    0x1(%eax),%edx
c010f1f8:	8b 45 08             	mov    0x8(%ebp),%eax
c010f1fb:	89 50 34             	mov    %edx,0x34(%eax)
    return node->open_count;
c010f1fe:	8b 45 08             	mov    0x8(%ebp),%eax
c010f201:	8b 40 34             	mov    0x34(%eax),%eax
}
c010f204:	5d                   	pop    %ebp
c010f205:	c3                   	ret    

c010f206 <inode_open_dec>:
 * inode_open_dec - decrement the open_count
 * invoked by vop_open_dec
 * calls vop_close if the open_count hits zero
 * */
int
inode_open_dec(struct inode *node) {
c010f206:	55                   	push   %ebp
c010f207:	89 e5                	mov    %esp,%ebp
c010f209:	83 ec 28             	sub    $0x28,%esp
    assert(inode_open_count(node) > 0);
c010f20c:	8b 45 08             	mov    0x8(%ebp),%eax
c010f20f:	89 04 24             	mov    %eax,(%esp)
c010f212:	e8 e8 fd ff ff       	call   c010efff <inode_open_count>
c010f217:	85 c0                	test   %eax,%eax
c010f219:	7f 24                	jg     c010f23f <inode_open_dec+0x39>
c010f21b:	c7 44 24 0c 00 88 11 	movl   $0xc0118800,0xc(%esp)
c010f222:	c0 
c010f223:	c7 44 24 08 27 87 11 	movl   $0xc0118727,0x8(%esp)
c010f22a:	c0 
c010f22b:	c7 44 24 04 5c 00 00 	movl   $0x5c,0x4(%esp)
c010f232:	00 
c010f233:	c7 04 24 3c 87 11 c0 	movl   $0xc011873c,(%esp)
c010f23a:	e8 89 1c ff ff       	call   c0100ec8 <__panic>
    int open_count, ret;
    node->open_count -= 1;
c010f23f:	8b 45 08             	mov    0x8(%ebp),%eax
c010f242:	8b 40 34             	mov    0x34(%eax),%eax
c010f245:	8d 50 ff             	lea    -0x1(%eax),%edx
c010f248:	8b 45 08             	mov    0x8(%ebp),%eax
c010f24b:	89 50 34             	mov    %edx,0x34(%eax)
    open_count = node->open_count;
c010f24e:	8b 45 08             	mov    0x8(%ebp),%eax
c010f251:	8b 40 34             	mov    0x34(%eax),%eax
c010f254:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (open_count == 0) {
c010f257:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f25b:	0f 85 87 00 00 00    	jne    c010f2e8 <inode_open_dec+0xe2>
        if ((ret = vop_close(node)) != 0) {
c010f261:	8b 45 08             	mov    0x8(%ebp),%eax
c010f264:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f267:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f26b:	74 17                	je     c010f284 <inode_open_dec+0x7e>
c010f26d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f270:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f273:	85 c0                	test   %eax,%eax
c010f275:	74 0d                	je     c010f284 <inode_open_dec+0x7e>
c010f277:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f27a:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f27d:	8b 40 08             	mov    0x8(%eax),%eax
c010f280:	85 c0                	test   %eax,%eax
c010f282:	75 24                	jne    c010f2a8 <inode_open_dec+0xa2>
c010f284:	c7 44 24 0c 1c 88 11 	movl   $0xc011881c,0xc(%esp)
c010f28b:	c0 
c010f28c:	c7 44 24 08 27 87 11 	movl   $0xc0118727,0x8(%esp)
c010f293:	c0 
c010f294:	c7 44 24 04 61 00 00 	movl   $0x61,0x4(%esp)
c010f29b:	00 
c010f29c:	c7 04 24 3c 87 11 c0 	movl   $0xc011873c,(%esp)
c010f2a3:	e8 20 1c ff ff       	call   c0100ec8 <__panic>
c010f2a8:	c7 44 24 04 6a 88 11 	movl   $0xc011886a,0x4(%esp)
c010f2af:	c0 
c010f2b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f2b3:	89 04 24             	mov    %eax,(%esp)
c010f2b6:	e8 32 00 00 00       	call   c010f2ed <inode_check>
c010f2bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f2be:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f2c1:	8b 40 08             	mov    0x8(%eax),%eax
c010f2c4:	8b 55 08             	mov    0x8(%ebp),%edx
c010f2c7:	89 14 24             	mov    %edx,(%esp)
c010f2ca:	ff d0                	call   *%eax
c010f2cc:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010f2cf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010f2d3:	74 13                	je     c010f2e8 <inode_open_dec+0xe2>
            cprintf("vfs: warning: vop_close: %e.\n", ret);
c010f2d5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f2d8:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f2dc:	c7 04 24 70 88 11 c0 	movl   $0xc0118870,(%esp)
c010f2e3:	e8 7d 10 ff ff       	call   c0100365 <cprintf>
        }
    }
    return open_count;
c010f2e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f2eb:	c9                   	leave  
c010f2ec:	c3                   	ret    

c010f2ed <inode_check>:
/* *
 * inode_check - check the various things being valid
 * called before all vop_* calls
 * */
void
inode_check(struct inode *node, const char *opstr) {
c010f2ed:	55                   	push   %ebp
c010f2ee:	89 e5                	mov    %esp,%ebp
c010f2f0:	83 ec 28             	sub    $0x28,%esp
    assert(node != NULL && node->in_ops != NULL);
c010f2f3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f2f7:	74 0a                	je     c010f303 <inode_check+0x16>
c010f2f9:	8b 45 08             	mov    0x8(%ebp),%eax
c010f2fc:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f2ff:	85 c0                	test   %eax,%eax
c010f301:	75 24                	jne    c010f327 <inode_check+0x3a>
c010f303:	c7 44 24 0c 90 88 11 	movl   $0xc0118890,0xc(%esp)
c010f30a:	c0 
c010f30b:	c7 44 24 08 27 87 11 	movl   $0xc0118727,0x8(%esp)
c010f312:	c0 
c010f313:	c7 44 24 04 6e 00 00 	movl   $0x6e,0x4(%esp)
c010f31a:	00 
c010f31b:	c7 04 24 3c 87 11 c0 	movl   $0xc011873c,(%esp)
c010f322:	e8 a1 1b ff ff       	call   c0100ec8 <__panic>
    assert(node->in_ops->vop_magic == VOP_MAGIC);
c010f327:	8b 45 08             	mov    0x8(%ebp),%eax
c010f32a:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f32d:	8b 00                	mov    (%eax),%eax
c010f32f:	3d 76 a4 4b 8c       	cmp    $0x8c4ba476,%eax
c010f334:	74 24                	je     c010f35a <inode_check+0x6d>
c010f336:	c7 44 24 0c b8 88 11 	movl   $0xc01188b8,0xc(%esp)
c010f33d:	c0 
c010f33e:	c7 44 24 08 27 87 11 	movl   $0xc0118727,0x8(%esp)
c010f345:	c0 
c010f346:	c7 44 24 04 6f 00 00 	movl   $0x6f,0x4(%esp)
c010f34d:	00 
c010f34e:	c7 04 24 3c 87 11 c0 	movl   $0xc011873c,(%esp)
c010f355:	e8 6e 1b ff ff       	call   c0100ec8 <__panic>
    int ref_count = inode_ref_count(node), open_count = inode_open_count(node);
c010f35a:	8b 45 08             	mov    0x8(%ebp),%eax
c010f35d:	89 04 24             	mov    %eax,(%esp)
c010f360:	e8 8f fc ff ff       	call   c010eff4 <inode_ref_count>
c010f365:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f368:	8b 45 08             	mov    0x8(%ebp),%eax
c010f36b:	89 04 24             	mov    %eax,(%esp)
c010f36e:	e8 8c fc ff ff       	call   c010efff <inode_open_count>
c010f373:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(ref_count >= open_count && open_count >= 0);
c010f376:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f379:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010f37c:	7c 06                	jl     c010f384 <inode_check+0x97>
c010f37e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f382:	79 24                	jns    c010f3a8 <inode_check+0xbb>
c010f384:	c7 44 24 0c e0 88 11 	movl   $0xc01188e0,0xc(%esp)
c010f38b:	c0 
c010f38c:	c7 44 24 08 27 87 11 	movl   $0xc0118727,0x8(%esp)
c010f393:	c0 
c010f394:	c7 44 24 04 71 00 00 	movl   $0x71,0x4(%esp)
c010f39b:	00 
c010f39c:	c7 04 24 3c 87 11 c0 	movl   $0xc011873c,(%esp)
c010f3a3:	e8 20 1b ff ff       	call   c0100ec8 <__panic>
    assert(ref_count < MAX_INODE_COUNT && open_count < MAX_INODE_COUNT);
c010f3a8:	81 7d f4 ff ff 00 00 	cmpl   $0xffff,-0xc(%ebp)
c010f3af:	7f 09                	jg     c010f3ba <inode_check+0xcd>
c010f3b1:	81 7d f0 ff ff 00 00 	cmpl   $0xffff,-0x10(%ebp)
c010f3b8:	7e 24                	jle    c010f3de <inode_check+0xf1>
c010f3ba:	c7 44 24 0c 0c 89 11 	movl   $0xc011890c,0xc(%esp)
c010f3c1:	c0 
c010f3c2:	c7 44 24 08 27 87 11 	movl   $0xc0118727,0x8(%esp)
c010f3c9:	c0 
c010f3ca:	c7 44 24 04 72 00 00 	movl   $0x72,0x4(%esp)
c010f3d1:	00 
c010f3d2:	c7 04 24 3c 87 11 c0 	movl   $0xc011873c,(%esp)
c010f3d9:	e8 ea 1a ff ff       	call   c0100ec8 <__panic>
}
c010f3de:	c9                   	leave  
c010f3df:	c3                   	ret    

c010f3e0 <__alloc_fs>:

extern void vfs_devlist_init(void);

// __alloc_fs - allocate memory for fs, and set fs type
struct fs *
__alloc_fs(int type) {
c010f3e0:	55                   	push   %ebp
c010f3e1:	89 e5                	mov    %esp,%ebp
c010f3e3:	83 ec 28             	sub    $0x28,%esp
    struct fs *fs;
    if ((fs = kmalloc(sizeof(struct fs))) != NULL) {
c010f3e6:	c7 04 24 80 00 00 00 	movl   $0x80,(%esp)
c010f3ed:	e8 ed 58 ff ff       	call   c0104cdf <kmalloc>
c010f3f2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f3f5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f3f9:	74 09                	je     c010f404 <__alloc_fs+0x24>
        fs->fs_type = type;
c010f3fb:	8b 55 08             	mov    0x8(%ebp),%edx
c010f3fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f401:	89 50 6c             	mov    %edx,0x6c(%eax)
    }
    return fs;
c010f404:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f407:	c9                   	leave  
c010f408:	c3                   	ret    

c010f409 <vfs_init>:

// vfs_init -  vfs initialize
void
vfs_init(void) {
c010f409:	55                   	push   %ebp
c010f40a:	89 e5                	mov    %esp,%ebp
c010f40c:	83 ec 18             	sub    $0x18,%esp
    sem_init(&bootfs_sem, 1);
c010f40f:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010f416:	00 
c010f417:	c7 04 24 b8 1f 15 c0 	movl   $0xc0151fb8,(%esp)
c010f41e:	e8 23 a7 ff ff       	call   c0109b46 <sem_init>
    vfs_devlist_init();
c010f423:	e8 63 01 00 00       	call   c010f58b <vfs_devlist_init>
}
c010f428:	c9                   	leave  
c010f429:	c3                   	ret    

c010f42a <lock_bootfs>:

// lock_bootfs - lock  for bootfs
static void
lock_bootfs(void) {
c010f42a:	55                   	push   %ebp
c010f42b:	89 e5                	mov    %esp,%ebp
c010f42d:	83 ec 18             	sub    $0x18,%esp
    down(&bootfs_sem);
c010f430:	c7 04 24 b8 1f 15 c0 	movl   $0xc0151fb8,(%esp)
c010f437:	e8 98 a8 ff ff       	call   c0109cd4 <down>
}
c010f43c:	c9                   	leave  
c010f43d:	c3                   	ret    

c010f43e <unlock_bootfs>:
// ulock_bootfs - ulock for bootfs
static void
unlock_bootfs(void) {
c010f43e:	55                   	push   %ebp
c010f43f:	89 e5                	mov    %esp,%ebp
c010f441:	83 ec 18             	sub    $0x18,%esp
    up(&bootfs_sem);
c010f444:	c7 04 24 b8 1f 15 c0 	movl   $0xc0151fb8,(%esp)
c010f44b:	e8 69 a8 ff ff       	call   c0109cb9 <up>
}
c010f450:	c9                   	leave  
c010f451:	c3                   	ret    

c010f452 <change_bootfs>:

// change_bootfs - set the new fs inode 
static void
change_bootfs(struct inode *node) {
c010f452:	55                   	push   %ebp
c010f453:	89 e5                	mov    %esp,%ebp
c010f455:	83 ec 28             	sub    $0x28,%esp
    struct inode *old;
    lock_bootfs();
c010f458:	e8 cd ff ff ff       	call   c010f42a <lock_bootfs>
    {
        old = bootfs_node, bootfs_node = node;
c010f45d:	a1 c4 1f 15 c0       	mov    0xc0151fc4,%eax
c010f462:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f465:	8b 45 08             	mov    0x8(%ebp),%eax
c010f468:	a3 c4 1f 15 c0       	mov    %eax,0xc0151fc4
    }
    unlock_bootfs();
c010f46d:	e8 cc ff ff ff       	call   c010f43e <unlock_bootfs>
    if (old != NULL) {
c010f472:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f476:	74 0b                	je     c010f483 <change_bootfs+0x31>
        vop_ref_dec(old);
c010f478:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f47b:	89 04 24             	mov    %eax,(%esp)
c010f47e:	e8 7c fc ff ff       	call   c010f0ff <inode_ref_dec>
    }
}
c010f483:	c9                   	leave  
c010f484:	c3                   	ret    

c010f485 <vfs_set_bootfs>:

// vfs_set_bootfs - change the dir of file system
int
vfs_set_bootfs(char *fsname) {
c010f485:	55                   	push   %ebp
c010f486:	89 e5                	mov    %esp,%ebp
c010f488:	83 ec 28             	sub    $0x28,%esp
    struct inode *node = NULL;
c010f48b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    if (fsname != NULL) {
c010f492:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f496:	74 62                	je     c010f4fa <vfs_set_bootfs+0x75>
        char *s;
        if ((s = strchr(fsname, ':')) == NULL || s[1] != '\0') {
c010f498:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
c010f49f:	00 
c010f4a0:	8b 45 08             	mov    0x8(%ebp),%eax
c010f4a3:	89 04 24             	mov    %eax,(%esp)
c010f4a6:	e8 db 5e 00 00       	call   c0115386 <strchr>
c010f4ab:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f4ae:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f4b2:	74 0d                	je     c010f4c1 <vfs_set_bootfs+0x3c>
c010f4b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f4b7:	83 c0 01             	add    $0x1,%eax
c010f4ba:	0f b6 00             	movzbl (%eax),%eax
c010f4bd:	84 c0                	test   %al,%al
c010f4bf:	74 07                	je     c010f4c8 <vfs_set_bootfs+0x43>
            return -E_INVAL;
c010f4c1:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010f4c6:	eb 42                	jmp    c010f50a <vfs_set_bootfs+0x85>
        }
        int ret;
        if ((ret = vfs_chdir(fsname)) != 0) {
c010f4c8:	8b 45 08             	mov    0x8(%ebp),%eax
c010f4cb:	89 04 24             	mov    %eax,(%esp)
c010f4ce:	e8 99 10 00 00       	call   c011056c <vfs_chdir>
c010f4d3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f4d6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f4da:	74 05                	je     c010f4e1 <vfs_set_bootfs+0x5c>
            return ret;
c010f4dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f4df:	eb 29                	jmp    c010f50a <vfs_set_bootfs+0x85>
        }
        if ((ret = vfs_get_curdir(&node)) != 0) {
c010f4e1:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010f4e4:	89 04 24             	mov    %eax,(%esp)
c010f4e7:	e8 54 0f 00 00       	call   c0110440 <vfs_get_curdir>
c010f4ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f4ef:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f4f3:	74 05                	je     c010f4fa <vfs_set_bootfs+0x75>
            return ret;
c010f4f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f4f8:	eb 10                	jmp    c010f50a <vfs_set_bootfs+0x85>
        }
    }
    change_bootfs(node);
c010f4fa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f4fd:	89 04 24             	mov    %eax,(%esp)
c010f500:	e8 4d ff ff ff       	call   c010f452 <change_bootfs>
    return 0;
c010f505:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010f50a:	c9                   	leave  
c010f50b:	c3                   	ret    

c010f50c <vfs_get_bootfs>:

// vfs_get_bootfs - get the inode of bootfs
int
vfs_get_bootfs(struct inode **node_store) {
c010f50c:	55                   	push   %ebp
c010f50d:	89 e5                	mov    %esp,%ebp
c010f50f:	83 ec 28             	sub    $0x28,%esp
    struct inode *node = NULL;
c010f512:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (bootfs_node != NULL) {
c010f519:	a1 c4 1f 15 c0       	mov    0xc0151fc4,%eax
c010f51e:	85 c0                	test   %eax,%eax
c010f520:	74 25                	je     c010f547 <vfs_get_bootfs+0x3b>
        lock_bootfs();
c010f522:	e8 03 ff ff ff       	call   c010f42a <lock_bootfs>
        {
            if ((node = bootfs_node) != NULL) {
c010f527:	a1 c4 1f 15 c0       	mov    0xc0151fc4,%eax
c010f52c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f52f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f533:	74 0d                	je     c010f542 <vfs_get_bootfs+0x36>
                vop_ref_inc(bootfs_node);
c010f535:	a1 c4 1f 15 c0       	mov    0xc0151fc4,%eax
c010f53a:	89 04 24             	mov    %eax,(%esp)
c010f53d:	e8 a3 fb ff ff       	call   c010f0e5 <inode_ref_inc>
            }
        }
        unlock_bootfs();
c010f542:	e8 f7 fe ff ff       	call   c010f43e <unlock_bootfs>
    }
    if (node == NULL) {
c010f547:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f54b:	75 07                	jne    c010f554 <vfs_get_bootfs+0x48>
        return -E_NOENT;
c010f54d:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
c010f552:	eb 0d                	jmp    c010f561 <vfs_get_bootfs+0x55>
    }
    *node_store = node;
c010f554:	8b 45 08             	mov    0x8(%ebp),%eax
c010f557:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010f55a:	89 10                	mov    %edx,(%eax)
    return 0;
c010f55c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010f561:	c9                   	leave  
c010f562:	c3                   	ret    

c010f563 <lock_vdev_list>:

static list_entry_t vdev_list;     // device info list in vfs layer
static semaphore_t vdev_list_sem;

static void
lock_vdev_list(void) {
c010f563:	55                   	push   %ebp
c010f564:	89 e5                	mov    %esp,%ebp
c010f566:	83 ec 18             	sub    $0x18,%esp
    down(&vdev_list_sem);
c010f569:	c7 04 24 d0 1f 15 c0 	movl   $0xc0151fd0,(%esp)
c010f570:	e8 5f a7 ff ff       	call   c0109cd4 <down>
}
c010f575:	c9                   	leave  
c010f576:	c3                   	ret    

c010f577 <unlock_vdev_list>:

static void
unlock_vdev_list(void) {
c010f577:	55                   	push   %ebp
c010f578:	89 e5                	mov    %esp,%ebp
c010f57a:	83 ec 18             	sub    $0x18,%esp
    up(&vdev_list_sem);
c010f57d:	c7 04 24 d0 1f 15 c0 	movl   $0xc0151fd0,(%esp)
c010f584:	e8 30 a7 ff ff       	call   c0109cb9 <up>
}
c010f589:	c9                   	leave  
c010f58a:	c3                   	ret    

c010f58b <vfs_devlist_init>:

void
vfs_devlist_init(void) {
c010f58b:	55                   	push   %ebp
c010f58c:	89 e5                	mov    %esp,%ebp
c010f58e:	83 ec 28             	sub    $0x28,%esp
c010f591:	c7 45 f4 c8 1f 15 c0 	movl   $0xc0151fc8,-0xc(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010f598:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f59b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010f59e:	89 50 04             	mov    %edx,0x4(%eax)
c010f5a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f5a4:	8b 50 04             	mov    0x4(%eax),%edx
c010f5a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f5aa:	89 10                	mov    %edx,(%eax)
    list_init(&vdev_list);
    sem_init(&vdev_list_sem, 1);
c010f5ac:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010f5b3:	00 
c010f5b4:	c7 04 24 d0 1f 15 c0 	movl   $0xc0151fd0,(%esp)
c010f5bb:	e8 86 a5 ff ff       	call   c0109b46 <sem_init>
}
c010f5c0:	c9                   	leave  
c010f5c1:	c3                   	ret    

c010f5c2 <vfs_cleanup>:

// vfs_cleanup - finally clean (or sync) fs
void
vfs_cleanup(void) {
c010f5c2:	55                   	push   %ebp
c010f5c3:	89 e5                	mov    %esp,%ebp
c010f5c5:	83 ec 38             	sub    $0x38,%esp
c010f5c8:	c7 45 e8 c8 1f 15 c0 	movl   $0xc0151fc8,-0x18(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010f5cf:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f5d2:	8b 40 04             	mov    0x4(%eax),%eax
c010f5d5:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010f5d8:	0f 94 c0             	sete   %al
c010f5db:	0f b6 c0             	movzbl %al,%eax
    if (!list_empty(&vdev_list)) {
c010f5de:	85 c0                	test   %eax,%eax
c010f5e0:	75 57                	jne    c010f639 <vfs_cleanup+0x77>
        lock_vdev_list();
c010f5e2:	e8 7c ff ff ff       	call   c010f563 <lock_vdev_list>
        {
            list_entry_t *list = &vdev_list, *le = list;
c010f5e7:	c7 45 f0 c8 1f 15 c0 	movl   $0xc0151fc8,-0x10(%ebp)
c010f5ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f5f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
            while ((le = list_next(le)) != list) {
c010f5f4:	eb 27                	jmp    c010f61d <vfs_cleanup+0x5b>
                vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010f5f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f5f9:	83 e8 10             	sub    $0x10,%eax
c010f5fc:	89 45 ec             	mov    %eax,-0x14(%ebp)
                if (vdev->fs != NULL) {
c010f5ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f602:	8b 40 08             	mov    0x8(%eax),%eax
c010f605:	85 c0                	test   %eax,%eax
c010f607:	74 14                	je     c010f61d <vfs_cleanup+0x5b>
                    fsop_cleanup(vdev->fs);
c010f609:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f60c:	8b 40 08             	mov    0x8(%eax),%eax
c010f60f:	8b 40 7c             	mov    0x7c(%eax),%eax
c010f612:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010f615:	8b 52 08             	mov    0x8(%edx),%edx
c010f618:	89 14 24             	mov    %edx,(%esp)
c010f61b:	ff d0                	call   *%eax
c010f61d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f620:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010f623:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f626:	8b 40 04             	mov    0x4(%eax),%eax
vfs_cleanup(void) {
    if (!list_empty(&vdev_list)) {
        lock_vdev_list();
        {
            list_entry_t *list = &vdev_list, *le = list;
            while ((le = list_next(le)) != list) {
c010f629:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f62c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f62f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010f632:	75 c2                	jne    c010f5f6 <vfs_cleanup+0x34>
                if (vdev->fs != NULL) {
                    fsop_cleanup(vdev->fs);
                }
            }
        }
        unlock_vdev_list();
c010f634:	e8 3e ff ff ff       	call   c010f577 <unlock_vdev_list>
    }
}
c010f639:	c9                   	leave  
c010f63a:	c3                   	ret    

c010f63b <vfs_get_root>:
/*
 * vfs_get_root - Given a device name (stdin, stdout, etc.), hand
 *                back an appropriate inode.
 */
int
vfs_get_root(const char *devname, struct inode **node_store) {
c010f63b:	55                   	push   %ebp
c010f63c:	89 e5                	mov    %esp,%ebp
c010f63e:	83 ec 38             	sub    $0x38,%esp
    assert(devname != NULL);
c010f641:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f645:	75 24                	jne    c010f66b <vfs_get_root+0x30>
c010f647:	c7 44 24 0c 48 89 11 	movl   $0xc0118948,0xc(%esp)
c010f64e:	c0 
c010f64f:	c7 44 24 08 58 89 11 	movl   $0xc0118958,0x8(%esp)
c010f656:	c0 
c010f657:	c7 44 24 04 45 00 00 	movl   $0x45,0x4(%esp)
c010f65e:	00 
c010f65f:	c7 04 24 6d 89 11 c0 	movl   $0xc011896d,(%esp)
c010f666:	e8 5d 18 ff ff       	call   c0100ec8 <__panic>
    int ret = -E_NO_DEV;
c010f66b:	c7 45 f4 f3 ff ff ff 	movl   $0xfffffff3,-0xc(%ebp)
c010f672:	c7 45 e0 c8 1f 15 c0 	movl   $0xc0151fc8,-0x20(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010f679:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010f67c:	8b 40 04             	mov    0x4(%eax),%eax
c010f67f:	39 45 e0             	cmp    %eax,-0x20(%ebp)
c010f682:	0f 94 c0             	sete   %al
c010f685:	0f b6 c0             	movzbl %al,%eax
    if (!list_empty(&vdev_list)) {
c010f688:	85 c0                	test   %eax,%eax
c010f68a:	0f 85 c3 00 00 00    	jne    c010f753 <vfs_get_root+0x118>
        lock_vdev_list();
c010f690:	e8 ce fe ff ff       	call   c010f563 <lock_vdev_list>
        {
            list_entry_t *list = &vdev_list, *le = list;
c010f695:	c7 45 e8 c8 1f 15 c0 	movl   $0xc0151fc8,-0x18(%ebp)
c010f69c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f69f:	89 45 f0             	mov    %eax,-0x10(%ebp)
            while ((le = list_next(le)) != list) {
c010f6a2:	e9 8c 00 00 00       	jmp    c010f733 <vfs_get_root+0xf8>
                vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010f6a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f6aa:	83 e8 10             	sub    $0x10,%eax
c010f6ad:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                if (strcmp(devname, vdev->devname) == 0) {
c010f6b0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f6b3:	8b 00                	mov    (%eax),%eax
c010f6b5:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f6b9:	8b 45 08             	mov    0x8(%ebp),%eax
c010f6bc:	89 04 24             	mov    %eax,(%esp)
c010f6bf:	e8 23 5c 00 00       	call   c01152e7 <strcmp>
c010f6c4:	85 c0                	test   %eax,%eax
c010f6c6:	75 6b                	jne    c010f733 <vfs_get_root+0xf8>
                    struct inode *found = NULL;
c010f6c8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
                    if (vdev->fs != NULL) {
c010f6cf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f6d2:	8b 40 08             	mov    0x8(%eax),%eax
c010f6d5:	85 c0                	test   %eax,%eax
c010f6d7:	74 19                	je     c010f6f2 <vfs_get_root+0xb7>
                        found = fsop_get_root(vdev->fs);
c010f6d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f6dc:	8b 40 08             	mov    0x8(%eax),%eax
c010f6df:	8b 40 74             	mov    0x74(%eax),%eax
c010f6e2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010f6e5:	8b 52 08             	mov    0x8(%edx),%edx
c010f6e8:	89 14 24             	mov    %edx,(%esp)
c010f6eb:	ff d0                	call   *%eax
c010f6ed:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010f6f0:	eb 21                	jmp    c010f713 <vfs_get_root+0xd8>
                    }
                    else if (!vdev->mountable) {
c010f6f2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f6f5:	8b 40 0c             	mov    0xc(%eax),%eax
c010f6f8:	85 c0                	test   %eax,%eax
c010f6fa:	75 17                	jne    c010f713 <vfs_get_root+0xd8>
                        vop_ref_inc(vdev->devnode);
c010f6fc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f6ff:	8b 40 04             	mov    0x4(%eax),%eax
c010f702:	89 04 24             	mov    %eax,(%esp)
c010f705:	e8 db f9 ff ff       	call   c010f0e5 <inode_ref_inc>
                        found = vdev->devnode;
c010f70a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f70d:	8b 40 04             	mov    0x4(%eax),%eax
c010f710:	89 45 ec             	mov    %eax,-0x14(%ebp)
                    }
                    if (found != NULL) {
c010f713:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010f717:	74 11                	je     c010f72a <vfs_get_root+0xef>
                        ret = 0, *node_store = found;
c010f719:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010f720:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f723:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010f726:	89 10                	mov    %edx,(%eax)
                    }
                    else {
                        ret = -E_NA_DEV;
                    }
                    break;
c010f728:	eb 24                	jmp    c010f74e <vfs_get_root+0x113>
                    }
                    if (found != NULL) {
                        ret = 0, *node_store = found;
                    }
                    else {
                        ret = -E_NA_DEV;
c010f72a:	c7 45 f4 f2 ff ff ff 	movl   $0xfffffff2,-0xc(%ebp)
                    }
                    break;
c010f731:	eb 1b                	jmp    c010f74e <vfs_get_root+0x113>
c010f733:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f736:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010f739:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010f73c:	8b 40 04             	mov    0x4(%eax),%eax
    int ret = -E_NO_DEV;
    if (!list_empty(&vdev_list)) {
        lock_vdev_list();
        {
            list_entry_t *list = &vdev_list, *le = list;
            while ((le = list_next(le)) != list) {
c010f73f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f742:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f745:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c010f748:	0f 85 59 ff ff ff    	jne    c010f6a7 <vfs_get_root+0x6c>
                    }
                    break;
                }
            }
        }
        unlock_vdev_list();
c010f74e:	e8 24 fe ff ff       	call   c010f577 <unlock_vdev_list>
    }
    return ret;
c010f753:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f756:	c9                   	leave  
c010f757:	c3                   	ret    

c010f758 <vfs_get_devname>:

/*
 * vfs_get_devname - Given a filesystem, hand back the name of the device it's mounted on.
 */
const char *
vfs_get_devname(struct fs *fs) {
c010f758:	55                   	push   %ebp
c010f759:	89 e5                	mov    %esp,%ebp
c010f75b:	83 ec 28             	sub    $0x28,%esp
    assert(fs != NULL);
c010f75e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f762:	75 24                	jne    c010f788 <vfs_get_devname+0x30>
c010f764:	c7 44 24 0c 82 89 11 	movl   $0xc0118982,0xc(%esp)
c010f76b:	c0 
c010f76c:	c7 44 24 08 58 89 11 	movl   $0xc0118958,0x8(%esp)
c010f773:	c0 
c010f774:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c010f77b:	00 
c010f77c:	c7 04 24 6d 89 11 c0 	movl   $0xc011896d,(%esp)
c010f783:	e8 40 17 ff ff       	call   c0100ec8 <__panic>
    list_entry_t *list = &vdev_list, *le = list;
c010f788:	c7 45 f0 c8 1f 15 c0 	movl   $0xc0151fc8,-0x10(%ebp)
c010f78f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f792:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c010f795:	eb 1b                	jmp    c010f7b2 <vfs_get_devname+0x5a>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010f797:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f79a:	83 e8 10             	sub    $0x10,%eax
c010f79d:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (vdev->fs == fs) {
c010f7a0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f7a3:	8b 40 08             	mov    0x8(%eax),%eax
c010f7a6:	3b 45 08             	cmp    0x8(%ebp),%eax
c010f7a9:	75 07                	jne    c010f7b2 <vfs_get_devname+0x5a>
            return vdev->devname;
c010f7ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f7ae:	8b 00                	mov    (%eax),%eax
c010f7b0:	eb 1c                	jmp    c010f7ce <vfs_get_devname+0x76>
c010f7b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f7b5:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010f7b8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f7bb:	8b 40 04             	mov    0x4(%eax),%eax
 */
const char *
vfs_get_devname(struct fs *fs) {
    assert(fs != NULL);
    list_entry_t *list = &vdev_list, *le = list;
    while ((le = list_next(le)) != list) {
c010f7be:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f7c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f7c4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010f7c7:	75 ce                	jne    c010f797 <vfs_get_devname+0x3f>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
        if (vdev->fs == fs) {
            return vdev->devname;
        }
    }
    return NULL;
c010f7c9:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010f7ce:	c9                   	leave  
c010f7cf:	c3                   	ret    

c010f7d0 <check_devname_conflict>:

/*
 * check_devname_confilct - Is there alreadily device which has the same name?
 */
static bool
check_devname_conflict(const char *devname) {
c010f7d0:	55                   	push   %ebp
c010f7d1:	89 e5                	mov    %esp,%ebp
c010f7d3:	83 ec 28             	sub    $0x28,%esp
    list_entry_t *list = &vdev_list, *le = list;
c010f7d6:	c7 45 f0 c8 1f 15 c0 	movl   $0xc0151fc8,-0x10(%ebp)
c010f7dd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f7e0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c010f7e3:	eb 28                	jmp    c010f80d <check_devname_conflict+0x3d>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010f7e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f7e8:	83 e8 10             	sub    $0x10,%eax
c010f7eb:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (strcmp(vdev->devname, devname) == 0) {
c010f7ee:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f7f1:	8b 00                	mov    (%eax),%eax
c010f7f3:	8b 55 08             	mov    0x8(%ebp),%edx
c010f7f6:	89 54 24 04          	mov    %edx,0x4(%esp)
c010f7fa:	89 04 24             	mov    %eax,(%esp)
c010f7fd:	e8 e5 5a 00 00       	call   c01152e7 <strcmp>
c010f802:	85 c0                	test   %eax,%eax
c010f804:	75 07                	jne    c010f80d <check_devname_conflict+0x3d>
            return 0;
c010f806:	b8 00 00 00 00       	mov    $0x0,%eax
c010f80b:	eb 1c                	jmp    c010f829 <check_devname_conflict+0x59>
c010f80d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f810:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010f813:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f816:	8b 40 04             	mov    0x4(%eax),%eax
 * check_devname_confilct - Is there alreadily device which has the same name?
 */
static bool
check_devname_conflict(const char *devname) {
    list_entry_t *list = &vdev_list, *le = list;
    while ((le = list_next(le)) != list) {
c010f819:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f81c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f81f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010f822:	75 c1                	jne    c010f7e5 <check_devname_conflict+0x15>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
        if (strcmp(vdev->devname, devname) == 0) {
            return 0;
        }
    }
    return 1;
c010f824:	b8 01 00 00 00       	mov    $0x1,%eax
}
c010f829:	c9                   	leave  
c010f82a:	c3                   	ret    

c010f82b <vfs_do_add>:
* If "mountable" is set, the device will be treated as one that expects
* to have a filesystem mounted on it, and a raw device will be created
* for direct access.
*/
static int
vfs_do_add(const char *devname, struct inode *devnode, struct fs *fs, bool mountable) {
c010f82b:	55                   	push   %ebp
c010f82c:	89 e5                	mov    %esp,%ebp
c010f82e:	83 ec 48             	sub    $0x48,%esp
    assert(devname != NULL);
c010f831:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f835:	75 24                	jne    c010f85b <vfs_do_add+0x30>
c010f837:	c7 44 24 0c 48 89 11 	movl   $0xc0118948,0xc(%esp)
c010f83e:	c0 
c010f83f:	c7 44 24 08 58 89 11 	movl   $0xc0118958,0x8(%esp)
c010f846:	c0 
c010f847:	c7 44 24 04 8e 00 00 	movl   $0x8e,0x4(%esp)
c010f84e:	00 
c010f84f:	c7 04 24 6d 89 11 c0 	movl   $0xc011896d,(%esp)
c010f856:	e8 6d 16 ff ff       	call   c0100ec8 <__panic>
    assert((devnode == NULL && !mountable) || (devnode != NULL && check_inode_type(devnode, device)));
c010f85b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010f85f:	75 06                	jne    c010f867 <vfs_do_add+0x3c>
c010f861:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010f865:	74 37                	je     c010f89e <vfs_do_add+0x73>
c010f867:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010f86b:	74 0d                	je     c010f87a <vfs_do_add+0x4f>
c010f86d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f870:	8b 40 2c             	mov    0x2c(%eax),%eax
c010f873:	3d 34 12 00 00       	cmp    $0x1234,%eax
c010f878:	74 24                	je     c010f89e <vfs_do_add+0x73>
c010f87a:	c7 44 24 0c 90 89 11 	movl   $0xc0118990,0xc(%esp)
c010f881:	c0 
c010f882:	c7 44 24 08 58 89 11 	movl   $0xc0118958,0x8(%esp)
c010f889:	c0 
c010f88a:	c7 44 24 04 8f 00 00 	movl   $0x8f,0x4(%esp)
c010f891:	00 
c010f892:	c7 04 24 6d 89 11 c0 	movl   $0xc011896d,(%esp)
c010f899:	e8 2a 16 ff ff       	call   c0100ec8 <__panic>
    if (strlen(devname) > FS_MAX_DNAME_LEN) {
c010f89e:	8b 45 08             	mov    0x8(%ebp),%eax
c010f8a1:	89 04 24             	mov    %eax,(%esp)
c010f8a4:	e8 46 59 00 00       	call   c01151ef <strlen>
c010f8a9:	83 f8 1f             	cmp    $0x1f,%eax
c010f8ac:	76 0a                	jbe    c010f8b8 <vfs_do_add+0x8d>
        return -E_TOO_BIG;
c010f8ae:	b8 f4 ff ff ff       	mov    $0xfffffff4,%eax
c010f8b3:	e9 00 01 00 00       	jmp    c010f9b8 <vfs_do_add+0x18d>
    }

    int ret = -E_NO_MEM;
c010f8b8:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    char *s_devname;
    if ((s_devname = strdup(devname)) == NULL) {
c010f8bf:	8b 45 08             	mov    0x8(%ebp),%eax
c010f8c2:	89 04 24             	mov    %eax,(%esp)
c010f8c5:	e8 3c 0b ff ff       	call   c0100406 <strdup>
c010f8ca:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f8cd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f8d1:	75 08                	jne    c010f8db <vfs_do_add+0xb0>
        return ret;
c010f8d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f8d6:	e9 dd 00 00 00       	jmp    c010f9b8 <vfs_do_add+0x18d>
    }

    vfs_dev_t *vdev;
    if ((vdev = kmalloc(sizeof(vfs_dev_t))) == NULL) {
c010f8db:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c010f8e2:	e8 f8 53 ff ff       	call   c0104cdf <kmalloc>
c010f8e7:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010f8ea:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010f8ee:	75 05                	jne    c010f8f5 <vfs_do_add+0xca>
        goto failed_cleanup_name;
c010f8f0:	e9 b5 00 00 00       	jmp    c010f9aa <vfs_do_add+0x17f>
    }

    ret = -E_EXISTS;
c010f8f5:	c7 45 f4 e9 ff ff ff 	movl   $0xffffffe9,-0xc(%ebp)
    lock_vdev_list();
c010f8fc:	e8 62 fc ff ff       	call   c010f563 <lock_vdev_list>
    if (!check_devname_conflict(s_devname)) {
c010f901:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f904:	89 04 24             	mov    %eax,(%esp)
c010f907:	e8 c4 fe ff ff       	call   c010f7d0 <check_devname_conflict>
c010f90c:	85 c0                	test   %eax,%eax
c010f90e:	75 16                	jne    c010f926 <vfs_do_add+0xfb>
        unlock_vdev_list();
c010f910:	e8 62 fc ff ff       	call   c010f577 <unlock_vdev_list>
        goto failed_cleanup_vdev;
c010f915:	90                   	nop
    list_add(&vdev_list, &(vdev->vdev_link));
    unlock_vdev_list();
    return 0;

failed_cleanup_vdev:
    kfree(vdev);
c010f916:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f919:	89 04 24             	mov    %eax,(%esp)
c010f91c:	e8 d9 53 ff ff       	call   c0104cfa <kfree>
c010f921:	e9 84 00 00 00       	jmp    c010f9aa <vfs_do_add+0x17f>
    lock_vdev_list();
    if (!check_devname_conflict(s_devname)) {
        unlock_vdev_list();
        goto failed_cleanup_vdev;
    }
    vdev->devname = s_devname;
c010f926:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f929:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010f92c:	89 10                	mov    %edx,(%eax)
    vdev->devnode = devnode;
c010f92e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f931:	8b 55 0c             	mov    0xc(%ebp),%edx
c010f934:	89 50 04             	mov    %edx,0x4(%eax)
    vdev->mountable = mountable;
c010f937:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f93a:	8b 55 14             	mov    0x14(%ebp),%edx
c010f93d:	89 50 0c             	mov    %edx,0xc(%eax)
    vdev->fs = fs;
c010f940:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f943:	8b 55 10             	mov    0x10(%ebp),%edx
c010f946:	89 50 08             	mov    %edx,0x8(%eax)

    list_add(&vdev_list, &(vdev->vdev_link));
c010f949:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f94c:	83 c0 10             	add    $0x10,%eax
c010f94f:	c7 45 e8 c8 1f 15 c0 	movl   $0xc0151fc8,-0x18(%ebp)
c010f956:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010f959:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f95c:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010f95f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f962:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010f965:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010f968:	8b 40 04             	mov    0x4(%eax),%eax
c010f96b:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010f96e:	89 55 d8             	mov    %edx,-0x28(%ebp)
c010f971:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010f974:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010f977:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010f97a:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010f97d:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010f980:	89 10                	mov    %edx,(%eax)
c010f982:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010f985:	8b 10                	mov    (%eax),%edx
c010f987:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010f98a:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010f98d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010f990:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010f993:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010f996:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010f999:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010f99c:	89 10                	mov    %edx,(%eax)
    unlock_vdev_list();
c010f99e:	e8 d4 fb ff ff       	call   c010f577 <unlock_vdev_list>
    return 0;
c010f9a3:	b8 00 00 00 00       	mov    $0x0,%eax
c010f9a8:	eb 0e                	jmp    c010f9b8 <vfs_do_add+0x18d>

failed_cleanup_vdev:
    kfree(vdev);
failed_cleanup_name:
    kfree(s_devname);
c010f9aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f9ad:	89 04 24             	mov    %eax,(%esp)
c010f9b0:	e8 45 53 ff ff       	call   c0104cfa <kfree>
    return ret;
c010f9b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f9b8:	c9                   	leave  
c010f9b9:	c3                   	ret    

c010f9ba <vfs_add_fs>:
/*
 * vfs_add_fs - Add a new fs,  by name. See  vfs_do_add information for the description of
 *              mountable.
 */
int
vfs_add_fs(const char *devname, struct fs *fs) {
c010f9ba:	55                   	push   %ebp
c010f9bb:	89 e5                	mov    %esp,%ebp
c010f9bd:	83 ec 18             	sub    $0x18,%esp
    return vfs_do_add(devname, NULL, fs, 0);
c010f9c0:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010f9c7:	00 
c010f9c8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f9cb:	89 44 24 08          	mov    %eax,0x8(%esp)
c010f9cf:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010f9d6:	00 
c010f9d7:	8b 45 08             	mov    0x8(%ebp),%eax
c010f9da:	89 04 24             	mov    %eax,(%esp)
c010f9dd:	e8 49 fe ff ff       	call   c010f82b <vfs_do_add>
}
c010f9e2:	c9                   	leave  
c010f9e3:	c3                   	ret    

c010f9e4 <vfs_add_dev>:
/*
 * vfs_add_dev - Add a new device, by name. See  vfs_do_add information for the description of
 *               mountable.
 */
int
vfs_add_dev(const char *devname, struct inode *devnode, bool mountable) {
c010f9e4:	55                   	push   %ebp
c010f9e5:	89 e5                	mov    %esp,%ebp
c010f9e7:	83 ec 18             	sub    $0x18,%esp
    return vfs_do_add(devname, devnode, NULL, mountable);
c010f9ea:	8b 45 10             	mov    0x10(%ebp),%eax
c010f9ed:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010f9f1:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010f9f8:	00 
c010f9f9:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f9fc:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fa00:	8b 45 08             	mov    0x8(%ebp),%eax
c010fa03:	89 04 24             	mov    %eax,(%esp)
c010fa06:	e8 20 fe ff ff       	call   c010f82b <vfs_do_add>
}
c010fa0b:	c9                   	leave  
c010fa0c:	c3                   	ret    

c010fa0d <find_mount>:
/*
 * find_mount - Look for a mountable device named DEVNAME.
 *              Should already hold vdev_list lock.
 */
static int
find_mount(const char *devname, vfs_dev_t **vdev_store) {
c010fa0d:	55                   	push   %ebp
c010fa0e:	89 e5                	mov    %esp,%ebp
c010fa10:	83 ec 28             	sub    $0x28,%esp
    assert(devname != NULL);
c010fa13:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010fa17:	75 24                	jne    c010fa3d <find_mount+0x30>
c010fa19:	c7 44 24 0c 48 89 11 	movl   $0xc0118948,0xc(%esp)
c010fa20:	c0 
c010fa21:	c7 44 24 08 58 89 11 	movl   $0xc0118958,0x8(%esp)
c010fa28:	c0 
c010fa29:	c7 44 24 04 cd 00 00 	movl   $0xcd,0x4(%esp)
c010fa30:	00 
c010fa31:	c7 04 24 6d 89 11 c0 	movl   $0xc011896d,(%esp)
c010fa38:	e8 8b 14 ff ff       	call   c0100ec8 <__panic>
    list_entry_t *list = &vdev_list, *le = list;
c010fa3d:	c7 45 f0 c8 1f 15 c0 	movl   $0xc0151fc8,-0x10(%ebp)
c010fa44:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fa47:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c010fa4a:	eb 3a                	jmp    c010fa86 <find_mount+0x79>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010fa4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fa4f:	83 e8 10             	sub    $0x10,%eax
c010fa52:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (vdev->mountable && strcmp(vdev->devname, devname) == 0) {
c010fa55:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fa58:	8b 40 0c             	mov    0xc(%eax),%eax
c010fa5b:	85 c0                	test   %eax,%eax
c010fa5d:	74 27                	je     c010fa86 <find_mount+0x79>
c010fa5f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fa62:	8b 00                	mov    (%eax),%eax
c010fa64:	8b 55 08             	mov    0x8(%ebp),%edx
c010fa67:	89 54 24 04          	mov    %edx,0x4(%esp)
c010fa6b:	89 04 24             	mov    %eax,(%esp)
c010fa6e:	e8 74 58 00 00       	call   c01152e7 <strcmp>
c010fa73:	85 c0                	test   %eax,%eax
c010fa75:	75 0f                	jne    c010fa86 <find_mount+0x79>
            *vdev_store = vdev;
c010fa77:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fa7a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010fa7d:	89 10                	mov    %edx,(%eax)
            return 0;
c010fa7f:	b8 00 00 00 00       	mov    $0x0,%eax
c010fa84:	eb 1c                	jmp    c010faa2 <find_mount+0x95>
c010fa86:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fa89:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010fa8c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fa8f:	8b 40 04             	mov    0x4(%eax),%eax
 */
static int
find_mount(const char *devname, vfs_dev_t **vdev_store) {
    assert(devname != NULL);
    list_entry_t *list = &vdev_list, *le = list;
    while ((le = list_next(le)) != list) {
c010fa92:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fa95:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fa98:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010fa9b:	75 af                	jne    c010fa4c <find_mount+0x3f>
        if (vdev->mountable && strcmp(vdev->devname, devname) == 0) {
            *vdev_store = vdev;
            return 0;
        }
    }
    return -E_NO_DEV;
c010fa9d:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
}
c010faa2:	c9                   	leave  
c010faa3:	c3                   	ret    

c010faa4 <vfs_mount>:
 *             set up the filesystem and hand back a struct fs.
 *
 * The DATA argument is passed through unchanged to MOUNTFUNC.
 */
int
vfs_mount(const char *devname, int (*mountfunc)(struct device *dev, struct fs **fs_store)) {
c010faa4:	55                   	push   %ebp
c010faa5:	89 e5                	mov    %esp,%ebp
c010faa7:	83 ec 28             	sub    $0x28,%esp
    int ret;
    lock_vdev_list();
c010faaa:	e8 b4 fa ff ff       	call   c010f563 <lock_vdev_list>
    vfs_dev_t *vdev;
    if ((ret = find_mount(devname, &vdev)) != 0) {
c010faaf:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010fab2:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fab6:	8b 45 08             	mov    0x8(%ebp),%eax
c010fab9:	89 04 24             	mov    %eax,(%esp)
c010fabc:	e8 4c ff ff ff       	call   c010fa0d <find_mount>
c010fac1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fac4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010fac8:	74 05                	je     c010facf <vfs_mount+0x2b>
        goto out;
c010faca:	e9 f4 00 00 00       	jmp    c010fbc3 <vfs_mount+0x11f>
    }
    if (vdev->fs != NULL) {
c010facf:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fad2:	8b 40 08             	mov    0x8(%eax),%eax
c010fad5:	85 c0                	test   %eax,%eax
c010fad7:	74 0c                	je     c010fae5 <vfs_mount+0x41>
        ret = -E_BUSY;
c010fad9:	c7 45 f4 f1 ff ff ff 	movl   $0xfffffff1,-0xc(%ebp)
        goto out;
c010fae0:	e9 de 00 00 00       	jmp    c010fbc3 <vfs_mount+0x11f>
    }
    assert(vdev->devname != NULL && vdev->mountable);
c010fae5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fae8:	8b 00                	mov    (%eax),%eax
c010faea:	85 c0                	test   %eax,%eax
c010faec:	74 0a                	je     c010faf8 <vfs_mount+0x54>
c010faee:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010faf1:	8b 40 0c             	mov    0xc(%eax),%eax
c010faf4:	85 c0                	test   %eax,%eax
c010faf6:	75 24                	jne    c010fb1c <vfs_mount+0x78>
c010faf8:	c7 44 24 0c ec 89 11 	movl   $0xc01189ec,0xc(%esp)
c010faff:	c0 
c010fb00:	c7 44 24 08 58 89 11 	movl   $0xc0118958,0x8(%esp)
c010fb07:	c0 
c010fb08:	c7 44 24 04 eb 00 00 	movl   $0xeb,0x4(%esp)
c010fb0f:	00 
c010fb10:	c7 04 24 6d 89 11 c0 	movl   $0xc011896d,(%esp)
c010fb17:	e8 ac 13 ff ff       	call   c0100ec8 <__panic>

    struct device *dev = vop_info(vdev->devnode, device);
c010fb1c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fb1f:	8b 40 04             	mov    0x4(%eax),%eax
c010fb22:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010fb25:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010fb29:	74 0d                	je     c010fb38 <vfs_mount+0x94>
c010fb2b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fb2e:	8b 40 2c             	mov    0x2c(%eax),%eax
c010fb31:	3d 34 12 00 00       	cmp    $0x1234,%eax
c010fb36:	74 24                	je     c010fb5c <vfs_mount+0xb8>
c010fb38:	c7 44 24 0c 18 8a 11 	movl   $0xc0118a18,0xc(%esp)
c010fb3f:	c0 
c010fb40:	c7 44 24 08 58 89 11 	movl   $0xc0118958,0x8(%esp)
c010fb47:	c0 
c010fb48:	c7 44 24 04 ed 00 00 	movl   $0xed,0x4(%esp)
c010fb4f:	00 
c010fb50:	c7 04 24 6d 89 11 c0 	movl   $0xc011896d,(%esp)
c010fb57:	e8 6c 13 ff ff       	call   c0100ec8 <__panic>
c010fb5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fb5f:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if ((ret = mountfunc(dev, &(vdev->fs))) == 0) {
c010fb62:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fb65:	83 c0 08             	add    $0x8,%eax
c010fb68:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fb6c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fb6f:	89 04 24             	mov    %eax,(%esp)
c010fb72:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fb75:	ff d0                	call   *%eax
c010fb77:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fb7a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010fb7e:	75 43                	jne    c010fbc3 <vfs_mount+0x11f>
        assert(vdev->fs != NULL);
c010fb80:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fb83:	8b 40 08             	mov    0x8(%eax),%eax
c010fb86:	85 c0                	test   %eax,%eax
c010fb88:	75 24                	jne    c010fbae <vfs_mount+0x10a>
c010fb8a:	c7 44 24 0c 4b 8a 11 	movl   $0xc0118a4b,0xc(%esp)
c010fb91:	c0 
c010fb92:	c7 44 24 08 58 89 11 	movl   $0xc0118958,0x8(%esp)
c010fb99:	c0 
c010fb9a:	c7 44 24 04 ef 00 00 	movl   $0xef,0x4(%esp)
c010fba1:	00 
c010fba2:	c7 04 24 6d 89 11 c0 	movl   $0xc011896d,(%esp)
c010fba9:	e8 1a 13 ff ff       	call   c0100ec8 <__panic>
        cprintf("vfs: mount %s.\n", vdev->devname);
c010fbae:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fbb1:	8b 00                	mov    (%eax),%eax
c010fbb3:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fbb7:	c7 04 24 5c 8a 11 c0 	movl   $0xc0118a5c,(%esp)
c010fbbe:	e8 a2 07 ff ff       	call   c0100365 <cprintf>
    }

out:
    unlock_vdev_list();
c010fbc3:	e8 af f9 ff ff       	call   c010f577 <unlock_vdev_list>
    return ret;
c010fbc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010fbcb:	c9                   	leave  
c010fbcc:	c3                   	ret    

c010fbcd <vfs_unmount>:
/*
 * vfs_unmount - Unmount a filesystem/device by name.
 *               First calls FSOP_SYNC on the filesystem; then calls FSOP_UNMOUNT.
 */
int
vfs_unmount(const char *devname) {
c010fbcd:	55                   	push   %ebp
c010fbce:	89 e5                	mov    %esp,%ebp
c010fbd0:	83 ec 28             	sub    $0x28,%esp
    int ret;
    lock_vdev_list();
c010fbd3:	e8 8b f9 ff ff       	call   c010f563 <lock_vdev_list>
    vfs_dev_t *vdev;
    if ((ret = find_mount(devname, &vdev)) != 0) {
c010fbd8:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010fbdb:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fbdf:	8b 45 08             	mov    0x8(%ebp),%eax
c010fbe2:	89 04 24             	mov    %eax,(%esp)
c010fbe5:	e8 23 fe ff ff       	call   c010fa0d <find_mount>
c010fbea:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fbed:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010fbf1:	74 05                	je     c010fbf8 <vfs_unmount+0x2b>
        goto out;
c010fbf3:	e9 a8 00 00 00       	jmp    c010fca0 <vfs_unmount+0xd3>
    }
    if (vdev->fs == NULL) {
c010fbf8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fbfb:	8b 40 08             	mov    0x8(%eax),%eax
c010fbfe:	85 c0                	test   %eax,%eax
c010fc00:	75 0c                	jne    c010fc0e <vfs_unmount+0x41>
        ret = -E_INVAL;
c010fc02:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
        goto out;
c010fc09:	e9 92 00 00 00       	jmp    c010fca0 <vfs_unmount+0xd3>
    }
    assert(vdev->devname != NULL && vdev->mountable);
c010fc0e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fc11:	8b 00                	mov    (%eax),%eax
c010fc13:	85 c0                	test   %eax,%eax
c010fc15:	74 0a                	je     c010fc21 <vfs_unmount+0x54>
c010fc17:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fc1a:	8b 40 0c             	mov    0xc(%eax),%eax
c010fc1d:	85 c0                	test   %eax,%eax
c010fc1f:	75 24                	jne    c010fc45 <vfs_unmount+0x78>
c010fc21:	c7 44 24 0c ec 89 11 	movl   $0xc01189ec,0xc(%esp)
c010fc28:	c0 
c010fc29:	c7 44 24 08 58 89 11 	movl   $0xc0118958,0x8(%esp)
c010fc30:	c0 
c010fc31:	c7 44 24 04 08 01 00 	movl   $0x108,0x4(%esp)
c010fc38:	00 
c010fc39:	c7 04 24 6d 89 11 c0 	movl   $0xc011896d,(%esp)
c010fc40:	e8 83 12 ff ff       	call   c0100ec8 <__panic>

    if ((ret = fsop_sync(vdev->fs)) != 0) {
c010fc45:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fc48:	8b 40 08             	mov    0x8(%eax),%eax
c010fc4b:	8b 40 70             	mov    0x70(%eax),%eax
c010fc4e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010fc51:	8b 52 08             	mov    0x8(%edx),%edx
c010fc54:	89 14 24             	mov    %edx,(%esp)
c010fc57:	ff d0                	call   *%eax
c010fc59:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fc5c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010fc60:	74 02                	je     c010fc64 <vfs_unmount+0x97>
        goto out;
c010fc62:	eb 3c                	jmp    c010fca0 <vfs_unmount+0xd3>
    }
    if ((ret = fsop_unmount(vdev->fs)) == 0) {
c010fc64:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fc67:	8b 40 08             	mov    0x8(%eax),%eax
c010fc6a:	8b 40 78             	mov    0x78(%eax),%eax
c010fc6d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010fc70:	8b 52 08             	mov    0x8(%edx),%edx
c010fc73:	89 14 24             	mov    %edx,(%esp)
c010fc76:	ff d0                	call   *%eax
c010fc78:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fc7b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010fc7f:	75 1f                	jne    c010fca0 <vfs_unmount+0xd3>
        vdev->fs = NULL;
c010fc81:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fc84:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        cprintf("vfs: unmount %s.\n", vdev->devname);
c010fc8b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fc8e:	8b 00                	mov    (%eax),%eax
c010fc90:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fc94:	c7 04 24 6c 8a 11 c0 	movl   $0xc0118a6c,(%esp)
c010fc9b:	e8 c5 06 ff ff       	call   c0100365 <cprintf>
    }

out:
    unlock_vdev_list();
c010fca0:	e8 d2 f8 ff ff       	call   c010f577 <unlock_vdev_list>
    return ret;
c010fca5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010fca8:	c9                   	leave  
c010fca9:	c3                   	ret    

c010fcaa <vfs_unmount_all>:

/*
 * vfs_unmount_all - Global unmount function.
 */
int
vfs_unmount_all(void) {
c010fcaa:	55                   	push   %ebp
c010fcab:	89 e5                	mov    %esp,%ebp
c010fcad:	83 ec 38             	sub    $0x38,%esp
c010fcb0:	c7 45 e4 c8 1f 15 c0 	movl   $0xc0151fc8,-0x1c(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010fcb7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010fcba:	8b 40 04             	mov    0x4(%eax),%eax
c010fcbd:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c010fcc0:	0f 94 c0             	sete   %al
c010fcc3:	0f b6 c0             	movzbl %al,%eax
    if (!list_empty(&vdev_list)) {
c010fcc6:	85 c0                	test   %eax,%eax
c010fcc8:	0f 85 f1 00 00 00    	jne    c010fdbf <vfs_unmount_all+0x115>
        lock_vdev_list();
c010fcce:	e8 90 f8 ff ff       	call   c010f563 <lock_vdev_list>
        {
            list_entry_t *list = &vdev_list, *le = list;
c010fcd3:	c7 45 f0 c8 1f 15 c0 	movl   $0xc0151fc8,-0x10(%ebp)
c010fcda:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fcdd:	89 45 f4             	mov    %eax,-0xc(%ebp)
            while ((le = list_next(le)) != list) {
c010fce0:	e9 ba 00 00 00       	jmp    c010fd9f <vfs_unmount_all+0xf5>
                vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010fce5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fce8:	83 e8 10             	sub    $0x10,%eax
c010fceb:	89 45 ec             	mov    %eax,-0x14(%ebp)
                if (vdev->mountable && vdev->fs != NULL) {
c010fcee:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fcf1:	8b 40 0c             	mov    0xc(%eax),%eax
c010fcf4:	85 c0                	test   %eax,%eax
c010fcf6:	0f 84 a3 00 00 00    	je     c010fd9f <vfs_unmount_all+0xf5>
c010fcfc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fcff:	8b 40 08             	mov    0x8(%eax),%eax
c010fd02:	85 c0                	test   %eax,%eax
c010fd04:	0f 84 95 00 00 00    	je     c010fd9f <vfs_unmount_all+0xf5>
                    int ret;
                    if ((ret = fsop_sync(vdev->fs)) != 0) {
c010fd0a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fd0d:	8b 40 08             	mov    0x8(%eax),%eax
c010fd10:	8b 40 70             	mov    0x70(%eax),%eax
c010fd13:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010fd16:	8b 52 08             	mov    0x8(%edx),%edx
c010fd19:	89 14 24             	mov    %edx,(%esp)
c010fd1c:	ff d0                	call   *%eax
c010fd1e:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010fd21:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010fd25:	74 1e                	je     c010fd45 <vfs_unmount_all+0x9b>
                        cprintf("vfs: warning: sync failed for %s: %e.\n", vdev->devname, ret);
c010fd27:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fd2a:	8b 00                	mov    (%eax),%eax
c010fd2c:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010fd2f:	89 54 24 08          	mov    %edx,0x8(%esp)
c010fd33:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fd37:	c7 04 24 80 8a 11 c0 	movl   $0xc0118a80,(%esp)
c010fd3e:	e8 22 06 ff ff       	call   c0100365 <cprintf>
                        continue ;
c010fd43:	eb 5a                	jmp    c010fd9f <vfs_unmount_all+0xf5>
                    }
                    if ((ret = fsop_unmount(vdev->fs)) != 0) {
c010fd45:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fd48:	8b 40 08             	mov    0x8(%eax),%eax
c010fd4b:	8b 40 78             	mov    0x78(%eax),%eax
c010fd4e:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010fd51:	8b 52 08             	mov    0x8(%edx),%edx
c010fd54:	89 14 24             	mov    %edx,(%esp)
c010fd57:	ff d0                	call   *%eax
c010fd59:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010fd5c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010fd60:	74 1e                	je     c010fd80 <vfs_unmount_all+0xd6>
                        cprintf("vfs: warning: unmount failed for %s: %e.\n", vdev->devname, ret);
c010fd62:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fd65:	8b 00                	mov    (%eax),%eax
c010fd67:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010fd6a:	89 54 24 08          	mov    %edx,0x8(%esp)
c010fd6e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fd72:	c7 04 24 a8 8a 11 c0 	movl   $0xc0118aa8,(%esp)
c010fd79:	e8 e7 05 ff ff       	call   c0100365 <cprintf>
                        continue ;
c010fd7e:	eb 1f                	jmp    c010fd9f <vfs_unmount_all+0xf5>
                    }
                    vdev->fs = NULL;
c010fd80:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fd83:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
                    cprintf("vfs: unmount %s.\n", vdev->devname);
c010fd8a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fd8d:	8b 00                	mov    (%eax),%eax
c010fd8f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fd93:	c7 04 24 6c 8a 11 c0 	movl   $0xc0118a6c,(%esp)
c010fd9a:	e8 c6 05 ff ff       	call   c0100365 <cprintf>
c010fd9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fda2:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010fda5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010fda8:	8b 40 04             	mov    0x4(%eax),%eax
vfs_unmount_all(void) {
    if (!list_empty(&vdev_list)) {
        lock_vdev_list();
        {
            list_entry_t *list = &vdev_list, *le = list;
            while ((le = list_next(le)) != list) {
c010fdab:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fdae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fdb1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010fdb4:	0f 85 2b ff ff ff    	jne    c010fce5 <vfs_unmount_all+0x3b>
                    vdev->fs = NULL;
                    cprintf("vfs: unmount %s.\n", vdev->devname);
                }
            }
        }
        unlock_vdev_list();
c010fdba:	e8 b8 f7 ff ff       	call   c010f577 <unlock_vdev_list>
    }
    return 0;
c010fdbf:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010fdc4:	c9                   	leave  
c010fdc5:	c3                   	ret    

c010fdc6 <vfs_open>:
#include <assert.h>


// open file in vfs, get/create inode for file with filename path.
int
vfs_open(char *path, uint32_t open_flags, struct inode **node_store) {
c010fdc6:	55                   	push   %ebp
c010fdc7:	89 e5                	mov    %esp,%ebp
c010fdc9:	53                   	push   %ebx
c010fdca:	83 ec 44             	sub    $0x44,%esp
    bool can_write = 0;
c010fdcd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    switch (open_flags & O_ACCMODE) {
c010fdd4:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fdd7:	83 e0 03             	and    $0x3,%eax
c010fdda:	85 c0                	test   %eax,%eax
c010fddc:	74 18                	je     c010fdf6 <vfs_open+0x30>
c010fdde:	83 f8 02             	cmp    $0x2,%eax
c010fde1:	77 09                	ja     c010fdec <vfs_open+0x26>
    case O_RDONLY:
        break;
    case O_WRONLY:
    case O_RDWR:
        can_write = 1;
c010fde3:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        break;
c010fdea:	eb 0b                	jmp    c010fdf7 <vfs_open+0x31>
    default:
        return -E_INVAL;
c010fdec:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010fdf1:	e9 ba 02 00 00       	jmp    c01100b0 <vfs_open+0x2ea>
int
vfs_open(char *path, uint32_t open_flags, struct inode **node_store) {
    bool can_write = 0;
    switch (open_flags & O_ACCMODE) {
    case O_RDONLY:
        break;
c010fdf6:	90                   	nop
        break;
    default:
        return -E_INVAL;
    }

    if (open_flags & O_TRUNC) {
c010fdf7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fdfa:	83 e0 10             	and    $0x10,%eax
c010fdfd:	85 c0                	test   %eax,%eax
c010fdff:	74 10                	je     c010fe11 <vfs_open+0x4b>
        if (!can_write) {
c010fe01:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010fe05:	75 0a                	jne    c010fe11 <vfs_open+0x4b>
            return -E_INVAL;
c010fe07:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010fe0c:	e9 9f 02 00 00       	jmp    c01100b0 <vfs_open+0x2ea>
        }
    }

    int ret; 
    struct inode *node;
    bool excl = (open_flags & O_EXCL) != 0;
c010fe11:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fe14:	83 e0 08             	and    $0x8,%eax
c010fe17:	85 c0                	test   %eax,%eax
c010fe19:	0f 95 c0             	setne  %al
c010fe1c:	0f b6 c0             	movzbl %al,%eax
c010fe1f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    bool create = (open_flags & O_CREAT) != 0;
c010fe22:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fe25:	83 e0 04             	and    $0x4,%eax
c010fe28:	85 c0                	test   %eax,%eax
c010fe2a:	0f 95 c0             	setne  %al
c010fe2d:	0f b6 c0             	movzbl %al,%eax
c010fe30:	89 45 ec             	mov    %eax,-0x14(%ebp)
    ret = vfs_lookup(path, &node);
c010fe33:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010fe36:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fe3a:	8b 45 08             	mov    0x8(%ebp),%eax
c010fe3d:	89 04 24             	mov    %eax,(%esp)
c010fe40:	e8 7a 04 00 00       	call   c01102bf <vfs_lookup>
c010fe45:	89 45 e8             	mov    %eax,-0x18(%ebp)

    if (ret != 0) {
c010fe48:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010fe4c:	0f 84 cc 00 00 00    	je     c010ff1e <vfs_open+0x158>
        if (ret == -16 && (create)) {
c010fe52:	83 7d e8 f0          	cmpl   $0xfffffff0,-0x18(%ebp)
c010fe56:	0f 85 ba 00 00 00    	jne    c010ff16 <vfs_open+0x150>
c010fe5c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010fe60:	0f 84 b0 00 00 00    	je     c010ff16 <vfs_open+0x150>
            char *name;
            struct inode *dir;
            if ((ret = vfs_lookup_parent(path, &dir, &name)) != 0) {
c010fe66:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010fe69:	89 44 24 08          	mov    %eax,0x8(%esp)
c010fe6d:	8d 45 d0             	lea    -0x30(%ebp),%eax
c010fe70:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fe74:	8b 45 08             	mov    0x8(%ebp),%eax
c010fe77:	89 04 24             	mov    %eax,(%esp)
c010fe7a:	e8 20 05 00 00       	call   c011039f <vfs_lookup_parent>
c010fe7f:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010fe82:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010fe86:	74 08                	je     c010fe90 <vfs_open+0xca>
                return ret;
c010fe88:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fe8b:	e9 20 02 00 00       	jmp    c01100b0 <vfs_open+0x2ea>
            }
            ret = vop_create(dir, name, excl, &node);
c010fe90:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010fe93:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010fe96:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010fe9a:	74 17                	je     c010feb3 <vfs_open+0xed>
c010fe9c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010fe9f:	8b 40 3c             	mov    0x3c(%eax),%eax
c010fea2:	85 c0                	test   %eax,%eax
c010fea4:	74 0d                	je     c010feb3 <vfs_open+0xed>
c010fea6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010fea9:	8b 40 3c             	mov    0x3c(%eax),%eax
c010feac:	8b 40 34             	mov    0x34(%eax),%eax
c010feaf:	85 c0                	test   %eax,%eax
c010feb1:	75 24                	jne    c010fed7 <vfs_open+0x111>
c010feb3:	c7 44 24 0c d4 8a 11 	movl   $0xc0118ad4,0xc(%esp)
c010feba:	c0 
c010febb:	c7 44 24 08 23 8b 11 	movl   $0xc0118b23,0x8(%esp)
c010fec2:	c0 
c010fec3:	c7 44 24 04 2c 00 00 	movl   $0x2c,0x4(%esp)
c010feca:	00 
c010fecb:	c7 04 24 38 8b 11 c0 	movl   $0xc0118b38,(%esp)
c010fed2:	e8 f1 0f ff ff       	call   c0100ec8 <__panic>
c010fed7:	c7 44 24 04 4e 8b 11 	movl   $0xc0118b4e,0x4(%esp)
c010fede:	c0 
c010fedf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010fee2:	89 04 24             	mov    %eax,(%esp)
c010fee5:	e8 03 f4 ff ff       	call   c010f2ed <inode_check>
c010feea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010feed:	8b 40 3c             	mov    0x3c(%eax),%eax
c010fef0:	8b 40 34             	mov    0x34(%eax),%eax
c010fef3:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c010fef6:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010fef9:	8d 5d d8             	lea    -0x28(%ebp),%ebx
c010fefc:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c010ff00:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c010ff03:	89 5c 24 08          	mov    %ebx,0x8(%esp)
c010ff07:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010ff0b:	89 14 24             	mov    %edx,(%esp)
c010ff0e:	ff d0                	call   *%eax
c010ff10:	89 45 e8             	mov    %eax,-0x18(%ebp)
    bool excl = (open_flags & O_EXCL) != 0;
    bool create = (open_flags & O_CREAT) != 0;
    ret = vfs_lookup(path, &node);

    if (ret != 0) {
        if (ret == -16 && (create)) {
c010ff13:	90                   	nop
c010ff14:	eb 1e                	jmp    c010ff34 <vfs_open+0x16e>
            struct inode *dir;
            if ((ret = vfs_lookup_parent(path, &dir, &name)) != 0) {
                return ret;
            }
            ret = vop_create(dir, name, excl, &node);
        } else return ret;
c010ff16:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ff19:	e9 92 01 00 00       	jmp    c01100b0 <vfs_open+0x2ea>
    } else if (excl && create) {
c010ff1e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ff22:	74 10                	je     c010ff34 <vfs_open+0x16e>
c010ff24:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010ff28:	74 0a                	je     c010ff34 <vfs_open+0x16e>
        return -E_EXISTS;
c010ff2a:	b8 e9 ff ff ff       	mov    $0xffffffe9,%eax
c010ff2f:	e9 7c 01 00 00       	jmp    c01100b0 <vfs_open+0x2ea>
    }
    assert(node != NULL);
c010ff34:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010ff37:	85 c0                	test   %eax,%eax
c010ff39:	75 24                	jne    c010ff5f <vfs_open+0x199>
c010ff3b:	c7 44 24 0c 55 8b 11 	movl   $0xc0118b55,0xc(%esp)
c010ff42:	c0 
c010ff43:	c7 44 24 08 23 8b 11 	movl   $0xc0118b23,0x8(%esp)
c010ff4a:	c0 
c010ff4b:	c7 44 24 04 31 00 00 	movl   $0x31,0x4(%esp)
c010ff52:	00 
c010ff53:	c7 04 24 38 8b 11 c0 	movl   $0xc0118b38,(%esp)
c010ff5a:	e8 69 0f ff ff       	call   c0100ec8 <__panic>
    
    if ((ret = vop_open(node, open_flags)) != 0) {
c010ff5f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010ff62:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010ff65:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c010ff69:	74 17                	je     c010ff82 <vfs_open+0x1bc>
c010ff6b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ff6e:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ff71:	85 c0                	test   %eax,%eax
c010ff73:	74 0d                	je     c010ff82 <vfs_open+0x1bc>
c010ff75:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ff78:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ff7b:	8b 40 04             	mov    0x4(%eax),%eax
c010ff7e:	85 c0                	test   %eax,%eax
c010ff80:	75 24                	jne    c010ffa6 <vfs_open+0x1e0>
c010ff82:	c7 44 24 0c 64 8b 11 	movl   $0xc0118b64,0xc(%esp)
c010ff89:	c0 
c010ff8a:	c7 44 24 08 23 8b 11 	movl   $0xc0118b23,0x8(%esp)
c010ff91:	c0 
c010ff92:	c7 44 24 04 33 00 00 	movl   $0x33,0x4(%esp)
c010ff99:	00 
c010ff9a:	c7 04 24 38 8b 11 c0 	movl   $0xc0118b38,(%esp)
c010ffa1:	e8 22 0f ff ff       	call   c0100ec8 <__panic>
c010ffa6:	c7 44 24 04 b1 8b 11 	movl   $0xc0118bb1,0x4(%esp)
c010ffad:	c0 
c010ffae:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ffb1:	89 04 24             	mov    %eax,(%esp)
c010ffb4:	e8 34 f3 ff ff       	call   c010f2ed <inode_check>
c010ffb9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ffbc:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ffbf:	8b 40 04             	mov    0x4(%eax),%eax
c010ffc2:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010ffc5:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010ffc8:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010ffcc:	89 14 24             	mov    %edx,(%esp)
c010ffcf:	ff d0                	call   *%eax
c010ffd1:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010ffd4:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010ffd8:	74 13                	je     c010ffed <vfs_open+0x227>
        vop_ref_dec(node);
c010ffda:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010ffdd:	89 04 24             	mov    %eax,(%esp)
c010ffe0:	e8 1a f1 ff ff       	call   c010f0ff <inode_ref_dec>
        return ret;
c010ffe5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ffe8:	e9 c3 00 00 00       	jmp    c01100b0 <vfs_open+0x2ea>
    }

    vop_open_inc(node);
c010ffed:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010fff0:	89 04 24             	mov    %eax,(%esp)
c010fff3:	e8 f4 f1 ff ff       	call   c010f1ec <inode_open_inc>
    if (open_flags & O_TRUNC || create) {
c010fff8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fffb:	83 e0 10             	and    $0x10,%eax
c010fffe:	85 c0                	test   %eax,%eax
c0110000:	75 0a                	jne    c011000c <vfs_open+0x246>
c0110002:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110006:	0f 84 97 00 00 00    	je     c01100a3 <vfs_open+0x2dd>
        if ((ret = vop_truncate(node, 0)) != 0) {
c011000c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011000f:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0110012:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0110016:	74 17                	je     c011002f <vfs_open+0x269>
c0110018:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011001b:	8b 40 3c             	mov    0x3c(%eax),%eax
c011001e:	85 c0                	test   %eax,%eax
c0110020:	74 0d                	je     c011002f <vfs_open+0x269>
c0110022:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0110025:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110028:	8b 40 30             	mov    0x30(%eax),%eax
c011002b:	85 c0                	test   %eax,%eax
c011002d:	75 24                	jne    c0110053 <vfs_open+0x28d>
c011002f:	c7 44 24 0c b8 8b 11 	movl   $0xc0118bb8,0xc(%esp)
c0110036:	c0 
c0110037:	c7 44 24 08 23 8b 11 	movl   $0xc0118b23,0x8(%esp)
c011003e:	c0 
c011003f:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
c0110046:	00 
c0110047:	c7 04 24 38 8b 11 c0 	movl   $0xc0118b38,(%esp)
c011004e:	e8 75 0e ff ff       	call   c0100ec8 <__panic>
c0110053:	c7 44 24 04 09 8c 11 	movl   $0xc0118c09,0x4(%esp)
c011005a:	c0 
c011005b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011005e:	89 04 24             	mov    %eax,(%esp)
c0110061:	e8 87 f2 ff ff       	call   c010f2ed <inode_check>
c0110066:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0110069:	8b 40 3c             	mov    0x3c(%eax),%eax
c011006c:	8b 40 30             	mov    0x30(%eax),%eax
c011006f:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0110072:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0110079:	00 
c011007a:	89 14 24             	mov    %edx,(%esp)
c011007d:	ff d0                	call   *%eax
c011007f:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0110082:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0110086:	74 1b                	je     c01100a3 <vfs_open+0x2dd>
            vop_open_dec(node);
c0110088:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011008b:	89 04 24             	mov    %eax,(%esp)
c011008e:	e8 73 f1 ff ff       	call   c010f206 <inode_open_dec>
            vop_ref_dec(node);
c0110093:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0110096:	89 04 24             	mov    %eax,(%esp)
c0110099:	e8 61 f0 ff ff       	call   c010f0ff <inode_ref_dec>
            return ret;
c011009e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01100a1:	eb 0d                	jmp    c01100b0 <vfs_open+0x2ea>
        }
    }
    *node_store = node;
c01100a3:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01100a6:	8b 45 10             	mov    0x10(%ebp),%eax
c01100a9:	89 10                	mov    %edx,(%eax)
    return 0;
c01100ab:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01100b0:	83 c4 44             	add    $0x44,%esp
c01100b3:	5b                   	pop    %ebx
c01100b4:	5d                   	pop    %ebp
c01100b5:	c3                   	ret    

c01100b6 <vfs_close>:

// close file in vfs
int
vfs_close(struct inode *node) {
c01100b6:	55                   	push   %ebp
c01100b7:	89 e5                	mov    %esp,%ebp
c01100b9:	83 ec 18             	sub    $0x18,%esp
    vop_open_dec(node);
c01100bc:	8b 45 08             	mov    0x8(%ebp),%eax
c01100bf:	89 04 24             	mov    %eax,(%esp)
c01100c2:	e8 3f f1 ff ff       	call   c010f206 <inode_open_dec>
    vop_ref_dec(node);
c01100c7:	8b 45 08             	mov    0x8(%ebp),%eax
c01100ca:	89 04 24             	mov    %eax,(%esp)
c01100cd:	e8 2d f0 ff ff       	call   c010f0ff <inode_ref_dec>
    return 0;
c01100d2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01100d7:	c9                   	leave  
c01100d8:	c3                   	ret    

c01100d9 <vfs_unlink>:

// unimplement
int
vfs_unlink(char *path) {
c01100d9:	55                   	push   %ebp
c01100da:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c01100dc:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c01100e1:	5d                   	pop    %ebp
c01100e2:	c3                   	ret    

c01100e3 <vfs_rename>:

// unimplement
int
vfs_rename(char *old_path, char *new_path) {
c01100e3:	55                   	push   %ebp
c01100e4:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c01100e6:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c01100eb:	5d                   	pop    %ebp
c01100ec:	c3                   	ret    

c01100ed <vfs_link>:

// unimplement
int
vfs_link(char *old_path, char *new_path) {
c01100ed:	55                   	push   %ebp
c01100ee:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c01100f0:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c01100f5:	5d                   	pop    %ebp
c01100f6:	c3                   	ret    

c01100f7 <vfs_symlink>:

// unimplement
int
vfs_symlink(char *old_path, char *new_path) {
c01100f7:	55                   	push   %ebp
c01100f8:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c01100fa:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c01100ff:	5d                   	pop    %ebp
c0110100:	c3                   	ret    

c0110101 <vfs_readlink>:

// unimplement
int
vfs_readlink(char *path, struct iobuf *iob) {
c0110101:	55                   	push   %ebp
c0110102:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c0110104:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c0110109:	5d                   	pop    %ebp
c011010a:	c3                   	ret    

c011010b <vfs_mkdir>:

// unimplement
int
vfs_mkdir(char *path){
c011010b:	55                   	push   %ebp
c011010c:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c011010e:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c0110113:	5d                   	pop    %ebp
c0110114:	c3                   	ret    

c0110115 <get_device>:
 * get_device- Common code to pull the device name, if any, off the front of a
 *             path and choose the inode to begin the name lookup relative to.
 */

static int
get_device(char *path, char **subpath, struct inode **node_store) {
c0110115:	55                   	push   %ebp
c0110116:	89 e5                	mov    %esp,%ebp
c0110118:	83 ec 38             	sub    $0x38,%esp
    int i, slash = -1, colon = -1;
c011011b:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
c0110122:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%ebp)
    for (i = 0; path[i] != '\0'; i ++) {
c0110129:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0110130:	eb 32                	jmp    c0110164 <get_device+0x4f>
        if (path[i] == ':') { colon = i; break; }
c0110132:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0110135:	8b 45 08             	mov    0x8(%ebp),%eax
c0110138:	01 d0                	add    %edx,%eax
c011013a:	0f b6 00             	movzbl (%eax),%eax
c011013d:	3c 3a                	cmp    $0x3a,%al
c011013f:	75 08                	jne    c0110149 <get_device+0x34>
c0110141:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110144:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110147:	eb 2a                	jmp    c0110173 <get_device+0x5e>
        if (path[i] == '/') { slash = i; break; }
c0110149:	8b 55 f4             	mov    -0xc(%ebp),%edx
c011014c:	8b 45 08             	mov    0x8(%ebp),%eax
c011014f:	01 d0                	add    %edx,%eax
c0110151:	0f b6 00             	movzbl (%eax),%eax
c0110154:	3c 2f                	cmp    $0x2f,%al
c0110156:	75 08                	jne    c0110160 <get_device+0x4b>
c0110158:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011015b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011015e:	eb 13                	jmp    c0110173 <get_device+0x5e>
 */

static int
get_device(char *path, char **subpath, struct inode **node_store) {
    int i, slash = -1, colon = -1;
    for (i = 0; path[i] != '\0'; i ++) {
c0110160:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0110164:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0110167:	8b 45 08             	mov    0x8(%ebp),%eax
c011016a:	01 d0                	add    %edx,%eax
c011016c:	0f b6 00             	movzbl (%eax),%eax
c011016f:	84 c0                	test   %al,%al
c0110171:	75 bf                	jne    c0110132 <get_device+0x1d>
        if (path[i] == ':') { colon = i; break; }
        if (path[i] == '/') { slash = i; break; }
    }
    if (colon < 0 && slash != 0) {
c0110173:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110177:	79 1e                	jns    c0110197 <get_device+0x82>
c0110179:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011017d:	74 18                	je     c0110197 <get_device+0x82>
        /* *
         * No colon before a slash, so no device name specified, and the slash isn't leading
         * or is also absent, so this is a relative path or just a bare filename. Start from
         * the current directory, and use the whole thing as the subpath.
         * */
        *subpath = path;
c011017f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110182:	8b 55 08             	mov    0x8(%ebp),%edx
c0110185:	89 10                	mov    %edx,(%eax)
        return vfs_get_curdir(node_store);
c0110187:	8b 45 10             	mov    0x10(%ebp),%eax
c011018a:	89 04 24             	mov    %eax,(%esp)
c011018d:	e8 ae 02 00 00       	call   c0110440 <vfs_get_curdir>
c0110192:	e9 26 01 00 00       	jmp    c01102bd <get_device+0x1a8>
    }
    if (colon > 0) {
c0110197:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011019b:	7e 42                	jle    c01101df <get_device+0xca>
        /* device:path - get root of device's filesystem */
        path[colon] = '\0';
c011019d:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01101a0:	8b 45 08             	mov    0x8(%ebp),%eax
c01101a3:	01 d0                	add    %edx,%eax
c01101a5:	c6 00 00             	movb   $0x0,(%eax)

        /* device:/path - skip slash, treat as device:path */
        while (path[++ colon] == '/');
c01101a8:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01101ac:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01101af:	8b 45 08             	mov    0x8(%ebp),%eax
c01101b2:	01 d0                	add    %edx,%eax
c01101b4:	0f b6 00             	movzbl (%eax),%eax
c01101b7:	3c 2f                	cmp    $0x2f,%al
c01101b9:	74 ed                	je     c01101a8 <get_device+0x93>
        *subpath = path + colon;
c01101bb:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01101be:	8b 45 08             	mov    0x8(%ebp),%eax
c01101c1:	01 c2                	add    %eax,%edx
c01101c3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01101c6:	89 10                	mov    %edx,(%eax)
        return vfs_get_root(path, node_store);
c01101c8:	8b 45 10             	mov    0x10(%ebp),%eax
c01101cb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01101cf:	8b 45 08             	mov    0x8(%ebp),%eax
c01101d2:	89 04 24             	mov    %eax,(%esp)
c01101d5:	e8 61 f4 ff ff       	call   c010f63b <vfs_get_root>
c01101da:	e9 de 00 00 00       	jmp    c01102bd <get_device+0x1a8>
     * we have either /path or :path
     * /path is a path relative to the root of the "boot filesystem"
     * :path is a path relative to the root of the current filesystem
     * */
    int ret;
    if (*path == '/') {
c01101df:	8b 45 08             	mov    0x8(%ebp),%eax
c01101e2:	0f b6 00             	movzbl (%eax),%eax
c01101e5:	3c 2f                	cmp    $0x2f,%al
c01101e7:	75 20                	jne    c0110209 <get_device+0xf4>
        if ((ret = vfs_get_bootfs(node_store)) != 0) {
c01101e9:	8b 45 10             	mov    0x10(%ebp),%eax
c01101ec:	89 04 24             	mov    %eax,(%esp)
c01101ef:	e8 18 f3 ff ff       	call   c010f50c <vfs_get_bootfs>
c01101f4:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01101f7:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01101fb:	0f 84 a1 00 00 00    	je     c01102a2 <get_device+0x18d>
            return ret;
c0110201:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110204:	e9 b4 00 00 00       	jmp    c01102bd <get_device+0x1a8>
        }
    }
    else {
        assert(*path == ':');
c0110209:	8b 45 08             	mov    0x8(%ebp),%eax
c011020c:	0f b6 00             	movzbl (%eax),%eax
c011020f:	3c 3a                	cmp    $0x3a,%al
c0110211:	74 24                	je     c0110237 <get_device+0x122>
c0110213:	c7 44 24 0c 14 8c 11 	movl   $0xc0118c14,0xc(%esp)
c011021a:	c0 
c011021b:	c7 44 24 08 21 8c 11 	movl   $0xc0118c21,0x8(%esp)
c0110222:	c0 
c0110223:	c7 44 24 04 33 00 00 	movl   $0x33,0x4(%esp)
c011022a:	00 
c011022b:	c7 04 24 36 8c 11 c0 	movl   $0xc0118c36,(%esp)
c0110232:	e8 91 0c ff ff       	call   c0100ec8 <__panic>
        struct inode *node;
        if ((ret = vfs_get_curdir(&node)) != 0) {
c0110237:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c011023a:	89 04 24             	mov    %eax,(%esp)
c011023d:	e8 fe 01 00 00       	call   c0110440 <vfs_get_curdir>
c0110242:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0110245:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0110249:	74 05                	je     c0110250 <get_device+0x13b>
            return ret;
c011024b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011024e:	eb 6d                	jmp    c01102bd <get_device+0x1a8>
        }
        /* The current directory may not be a device, so it must have a fs. */
        assert(node->in_fs != NULL);
c0110250:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110253:	8b 40 38             	mov    0x38(%eax),%eax
c0110256:	85 c0                	test   %eax,%eax
c0110258:	75 24                	jne    c011027e <get_device+0x169>
c011025a:	c7 44 24 0c 4e 8c 11 	movl   $0xc0118c4e,0xc(%esp)
c0110261:	c0 
c0110262:	c7 44 24 08 21 8c 11 	movl   $0xc0118c21,0x8(%esp)
c0110269:	c0 
c011026a:	c7 44 24 04 39 00 00 	movl   $0x39,0x4(%esp)
c0110271:	00 
c0110272:	c7 04 24 36 8c 11 c0 	movl   $0xc0118c36,(%esp)
c0110279:	e8 4a 0c ff ff       	call   c0100ec8 <__panic>
        *node_store = fsop_get_root(node->in_fs);
c011027e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110281:	8b 40 38             	mov    0x38(%eax),%eax
c0110284:	8b 40 74             	mov    0x74(%eax),%eax
c0110287:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c011028a:	8b 52 38             	mov    0x38(%edx),%edx
c011028d:	89 14 24             	mov    %edx,(%esp)
c0110290:	ff d0                	call   *%eax
c0110292:	8b 55 10             	mov    0x10(%ebp),%edx
c0110295:	89 02                	mov    %eax,(%edx)
        vop_ref_dec(node);
c0110297:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011029a:	89 04 24             	mov    %eax,(%esp)
c011029d:	e8 5d ee ff ff       	call   c010f0ff <inode_ref_dec>
    }

    /* ///... or :/... */
    while (*(++ path) == '/');
c01102a2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c01102a6:	8b 45 08             	mov    0x8(%ebp),%eax
c01102a9:	0f b6 00             	movzbl (%eax),%eax
c01102ac:	3c 2f                	cmp    $0x2f,%al
c01102ae:	74 f2                	je     c01102a2 <get_device+0x18d>
    *subpath = path;
c01102b0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01102b3:	8b 55 08             	mov    0x8(%ebp),%edx
c01102b6:	89 10                	mov    %edx,(%eax)
    return 0;
c01102b8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01102bd:	c9                   	leave  
c01102be:	c3                   	ret    

c01102bf <vfs_lookup>:

/*
 * vfs_lookup - get the inode according to the path filename
 */
int
vfs_lookup(char *path, struct inode **node_store) {
c01102bf:	55                   	push   %ebp
c01102c0:	89 e5                	mov    %esp,%ebp
c01102c2:	56                   	push   %esi
c01102c3:	53                   	push   %ebx
c01102c4:	83 ec 20             	sub    $0x20,%esp
    int ret;
    struct inode *node;
    if ((ret = get_device(path, &path, &node)) != 0) {
c01102c7:	8b 45 08             	mov    0x8(%ebp),%eax
c01102ca:	8d 55 ec             	lea    -0x14(%ebp),%edx
c01102cd:	89 54 24 08          	mov    %edx,0x8(%esp)
c01102d1:	8d 75 08             	lea    0x8(%ebp),%esi
c01102d4:	89 74 24 04          	mov    %esi,0x4(%esp)
c01102d8:	89 04 24             	mov    %eax,(%esp)
c01102db:	e8 35 fe ff ff       	call   c0110115 <get_device>
c01102e0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01102e3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01102e7:	74 08                	je     c01102f1 <vfs_lookup+0x32>
        return ret;
c01102e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01102ec:	e9 a7 00 00 00       	jmp    c0110398 <vfs_lookup+0xd9>
    }
    if (*path != '\0') {
c01102f1:	8b 45 08             	mov    0x8(%ebp),%eax
c01102f4:	0f b6 00             	movzbl (%eax),%eax
c01102f7:	84 c0                	test   %al,%al
c01102f9:	0f 84 8c 00 00 00    	je     c011038b <vfs_lookup+0xcc>
        ret = vop_lookup(node, path, node_store);
c01102ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110302:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0110305:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0110309:	74 17                	je     c0110322 <vfs_lookup+0x63>
c011030b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011030e:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110311:	85 c0                	test   %eax,%eax
c0110313:	74 0d                	je     c0110322 <vfs_lookup+0x63>
c0110315:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110318:	8b 40 3c             	mov    0x3c(%eax),%eax
c011031b:	8b 40 38             	mov    0x38(%eax),%eax
c011031e:	85 c0                	test   %eax,%eax
c0110320:	75 24                	jne    c0110346 <vfs_lookup+0x87>
c0110322:	c7 44 24 0c 64 8c 11 	movl   $0xc0118c64,0xc(%esp)
c0110329:	c0 
c011032a:	c7 44 24 08 21 8c 11 	movl   $0xc0118c21,0x8(%esp)
c0110331:	c0 
c0110332:	c7 44 24 04 4f 00 00 	movl   $0x4f,0x4(%esp)
c0110339:	00 
c011033a:	c7 04 24 36 8c 11 c0 	movl   $0xc0118c36,(%esp)
c0110341:	e8 82 0b ff ff       	call   c0100ec8 <__panic>
c0110346:	c7 44 24 04 b3 8c 11 	movl   $0xc0118cb3,0x4(%esp)
c011034d:	c0 
c011034e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110351:	89 04 24             	mov    %eax,(%esp)
c0110354:	e8 94 ef ff ff       	call   c010f2ed <inode_check>
c0110359:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011035c:	8b 40 3c             	mov    0x3c(%eax),%eax
c011035f:	8b 40 38             	mov    0x38(%eax),%eax
c0110362:	8b 4d 08             	mov    0x8(%ebp),%ecx
c0110365:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0110368:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c011036b:	89 5c 24 08          	mov    %ebx,0x8(%esp)
c011036f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0110373:	89 14 24             	mov    %edx,(%esp)
c0110376:	ff d0                	call   *%eax
c0110378:	89 45 f4             	mov    %eax,-0xc(%ebp)
        vop_ref_dec(node);
c011037b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011037e:	89 04 24             	mov    %eax,(%esp)
c0110381:	e8 79 ed ff ff       	call   c010f0ff <inode_ref_dec>
        return ret;
c0110386:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110389:	eb 0d                	jmp    c0110398 <vfs_lookup+0xd9>
    }
    *node_store = node;
c011038b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c011038e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110391:	89 10                	mov    %edx,(%eax)
    return 0;
c0110393:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110398:	83 c4 20             	add    $0x20,%esp
c011039b:	5b                   	pop    %ebx
c011039c:	5e                   	pop    %esi
c011039d:	5d                   	pop    %ebp
c011039e:	c3                   	ret    

c011039f <vfs_lookup_parent>:
/*
 * vfs_lookup_parent - Name-to-vnode translation.
 *  (In BSD, both of these are subsumed by namei().)
 */
int
vfs_lookup_parent(char *path, struct inode **node_store, char **endp){
c011039f:	55                   	push   %ebp
c01103a0:	89 e5                	mov    %esp,%ebp
c01103a2:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct inode *node;
    if ((ret = get_device(path, &path, &node)) != 0) {
c01103a5:	8b 45 08             	mov    0x8(%ebp),%eax
c01103a8:	8d 55 f0             	lea    -0x10(%ebp),%edx
c01103ab:	89 54 24 08          	mov    %edx,0x8(%esp)
c01103af:	8d 4d 08             	lea    0x8(%ebp),%ecx
c01103b2:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c01103b6:	89 04 24             	mov    %eax,(%esp)
c01103b9:	e8 57 fd ff ff       	call   c0110115 <get_device>
c01103be:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01103c1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01103c5:	74 05                	je     c01103cc <vfs_lookup_parent+0x2d>
        return ret;
c01103c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01103ca:	eb 15                	jmp    c01103e1 <vfs_lookup_parent+0x42>
    }
    *endp = path;
c01103cc:	8b 55 08             	mov    0x8(%ebp),%edx
c01103cf:	8b 45 10             	mov    0x10(%ebp),%eax
c01103d2:	89 10                	mov    %edx,(%eax)
    *node_store = node;
c01103d4:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01103d7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01103da:	89 10                	mov    %edx,(%eax)
    return 0;
c01103dc:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01103e1:	c9                   	leave  
c01103e2:	c3                   	ret    

c01103e3 <get_cwd_nolock>:

/*
 * get_cwd_nolock - retrieve current process's working directory. without lock protect
 */
static struct inode *
get_cwd_nolock(void) {
c01103e3:	55                   	push   %ebp
c01103e4:	89 e5                	mov    %esp,%ebp
    return current->filesp->pwd;
c01103e6:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c01103eb:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c01103f1:	8b 00                	mov    (%eax),%eax
}
c01103f3:	5d                   	pop    %ebp
c01103f4:	c3                   	ret    

c01103f5 <set_cwd_nolock>:
/*
 * set_cwd_nolock - set current working directory.
 */
static void
set_cwd_nolock(struct inode *pwd) {
c01103f5:	55                   	push   %ebp
c01103f6:	89 e5                	mov    %esp,%ebp
    current->filesp->pwd = pwd;
c01103f8:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c01103fd:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c0110403:	8b 55 08             	mov    0x8(%ebp),%edx
c0110406:	89 10                	mov    %edx,(%eax)
}
c0110408:	5d                   	pop    %ebp
c0110409:	c3                   	ret    

c011040a <lock_cfs>:

/*
 * lock_cfs - lock the fs related process on current process 
 */
static void
lock_cfs(void) {
c011040a:	55                   	push   %ebp
c011040b:	89 e5                	mov    %esp,%ebp
c011040d:	83 ec 18             	sub    $0x18,%esp
    lock_files(current->filesp);
c0110410:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c0110415:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c011041b:	89 04 24             	mov    %eax,(%esp)
c011041e:	e8 2e ac ff ff       	call   c010b051 <lock_files>
}
c0110423:	c9                   	leave  
c0110424:	c3                   	ret    

c0110425 <unlock_cfs>:
/*
 * unlock_cfs - unlock the fs related process on current process 
 */
static void
unlock_cfs(void) {
c0110425:	55                   	push   %ebp
c0110426:	89 e5                	mov    %esp,%ebp
c0110428:	83 ec 18             	sub    $0x18,%esp
    unlock_files(current->filesp);
c011042b:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c0110430:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c0110436:	89 04 24             	mov    %eax,(%esp)
c0110439:	e8 29 ac ff ff       	call   c010b067 <unlock_files>
}
c011043e:	c9                   	leave  
c011043f:	c3                   	ret    

c0110440 <vfs_get_curdir>:

/*
 *  vfs_get_curdir - Get current directory as a inode.
 */
int
vfs_get_curdir(struct inode **dir_store) {
c0110440:	55                   	push   %ebp
c0110441:	89 e5                	mov    %esp,%ebp
c0110443:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = get_cwd_nolock()) != NULL) {
c0110446:	e8 98 ff ff ff       	call   c01103e3 <get_cwd_nolock>
c011044b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011044e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110452:	74 1a                	je     c011046e <vfs_get_curdir+0x2e>
        vop_ref_inc(node);
c0110454:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110457:	89 04 24             	mov    %eax,(%esp)
c011045a:	e8 86 ec ff ff       	call   c010f0e5 <inode_ref_inc>
        *dir_store = node;
c011045f:	8b 45 08             	mov    0x8(%ebp),%eax
c0110462:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0110465:	89 10                	mov    %edx,(%eax)
        return 0;
c0110467:	b8 00 00 00 00       	mov    $0x0,%eax
c011046c:	eb 05                	jmp    c0110473 <vfs_get_curdir+0x33>
    }
    return -E_NOENT;
c011046e:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
c0110473:	c9                   	leave  
c0110474:	c3                   	ret    

c0110475 <vfs_set_curdir>:
/*
 * vfs_set_curdir - Set current directory as a inode.
 *                  The passed inode must in fact be a directory.
 */
int
vfs_set_curdir(struct inode *dir) {
c0110475:	55                   	push   %ebp
c0110476:	89 e5                	mov    %esp,%ebp
c0110478:	83 ec 28             	sub    $0x28,%esp
    int ret = 0;
c011047b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    lock_cfs();
c0110482:	e8 83 ff ff ff       	call   c011040a <lock_cfs>
    struct inode *old_dir;
    if ((old_dir = get_cwd_nolock()) != dir) {
c0110487:	e8 57 ff ff ff       	call   c01103e3 <get_cwd_nolock>
c011048c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011048f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110492:	3b 45 08             	cmp    0x8(%ebp),%eax
c0110495:	0f 84 c7 00 00 00    	je     c0110562 <vfs_set_curdir+0xed>
        if (dir != NULL) {
c011049b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c011049f:	0f 84 a1 00 00 00    	je     c0110546 <vfs_set_curdir+0xd1>
            uint32_t type;
            if ((ret = vop_gettype(dir, &type)) != 0) {
c01104a5:	8b 45 08             	mov    0x8(%ebp),%eax
c01104a8:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01104ab:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01104af:	74 17                	je     c01104c8 <vfs_set_curdir+0x53>
c01104b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01104b4:	8b 40 3c             	mov    0x3c(%eax),%eax
c01104b7:	85 c0                	test   %eax,%eax
c01104b9:	74 0d                	je     c01104c8 <vfs_set_curdir+0x53>
c01104bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01104be:	8b 40 3c             	mov    0x3c(%eax),%eax
c01104c1:	8b 40 28             	mov    0x28(%eax),%eax
c01104c4:	85 c0                	test   %eax,%eax
c01104c6:	75 24                	jne    c01104ec <vfs_set_curdir+0x77>
c01104c8:	c7 44 24 0c bc 8c 11 	movl   $0xc0118cbc,0xc(%esp)
c01104cf:	c0 
c01104d0:	c7 44 24 08 0c 8d 11 	movl   $0xc0118d0c,0x8(%esp)
c01104d7:	c0 
c01104d8:	c7 44 24 04 43 00 00 	movl   $0x43,0x4(%esp)
c01104df:	00 
c01104e0:	c7 04 24 21 8d 11 c0 	movl   $0xc0118d21,(%esp)
c01104e7:	e8 dc 09 ff ff       	call   c0100ec8 <__panic>
c01104ec:	c7 44 24 04 37 8d 11 	movl   $0xc0118d37,0x4(%esp)
c01104f3:	c0 
c01104f4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01104f7:	89 04 24             	mov    %eax,(%esp)
c01104fa:	e8 ee ed ff ff       	call   c010f2ed <inode_check>
c01104ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110502:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110505:	8b 40 28             	mov    0x28(%eax),%eax
c0110508:	8d 55 e8             	lea    -0x18(%ebp),%edx
c011050b:	89 54 24 04          	mov    %edx,0x4(%esp)
c011050f:	8b 55 08             	mov    0x8(%ebp),%edx
c0110512:	89 14 24             	mov    %edx,(%esp)
c0110515:	ff d0                	call   *%eax
c0110517:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011051a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011051e:	74 02                	je     c0110522 <vfs_set_curdir+0xad>
                goto out;
c0110520:	eb 40                	jmp    c0110562 <vfs_set_curdir+0xed>
            }
            if (!S_ISDIR(type)) {
c0110522:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110525:	25 00 70 00 00       	and    $0x7000,%eax
c011052a:	3d 00 20 00 00       	cmp    $0x2000,%eax
c011052f:	74 0a                	je     c011053b <vfs_set_curdir+0xc6>
                ret = -E_NOTDIR;
c0110531:	c7 45 f4 ee ff ff ff 	movl   $0xffffffee,-0xc(%ebp)
                goto out;
c0110538:	90                   	nop
c0110539:	eb 27                	jmp    c0110562 <vfs_set_curdir+0xed>
            }
            vop_ref_inc(dir);
c011053b:	8b 45 08             	mov    0x8(%ebp),%eax
c011053e:	89 04 24             	mov    %eax,(%esp)
c0110541:	e8 9f eb ff ff       	call   c010f0e5 <inode_ref_inc>
        }
        set_cwd_nolock(dir);
c0110546:	8b 45 08             	mov    0x8(%ebp),%eax
c0110549:	89 04 24             	mov    %eax,(%esp)
c011054c:	e8 a4 fe ff ff       	call   c01103f5 <set_cwd_nolock>
        if (old_dir != NULL) {
c0110551:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0110555:	74 0b                	je     c0110562 <vfs_set_curdir+0xed>
            vop_ref_dec(old_dir);
c0110557:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011055a:	89 04 24             	mov    %eax,(%esp)
c011055d:	e8 9d eb ff ff       	call   c010f0ff <inode_ref_dec>
        }
    }
out:
    unlock_cfs();
c0110562:	e8 be fe ff ff       	call   c0110425 <unlock_cfs>
    return ret;
c0110567:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011056a:	c9                   	leave  
c011056b:	c3                   	ret    

c011056c <vfs_chdir>:
/*
 * vfs_chdir - Set current directory, as a pathname. Use vfs_lookup to translate
 *             it to a inode.
 */
int
vfs_chdir(char *path) {
c011056c:	55                   	push   %ebp
c011056d:	89 e5                	mov    %esp,%ebp
c011056f:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct inode *node;
    if ((ret = vfs_lookup(path, &node)) == 0) {
c0110572:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0110575:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110579:	8b 45 08             	mov    0x8(%ebp),%eax
c011057c:	89 04 24             	mov    %eax,(%esp)
c011057f:	e8 3b fd ff ff       	call   c01102bf <vfs_lookup>
c0110584:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110587:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011058b:	75 19                	jne    c01105a6 <vfs_chdir+0x3a>
        ret = vfs_set_curdir(node);
c011058d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110590:	89 04 24             	mov    %eax,(%esp)
c0110593:	e8 dd fe ff ff       	call   c0110475 <vfs_set_curdir>
c0110598:	89 45 f4             	mov    %eax,-0xc(%ebp)
        vop_ref_dec(node);
c011059b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011059e:	89 04 24             	mov    %eax,(%esp)
c01105a1:	e8 59 eb ff ff       	call   c010f0ff <inode_ref_dec>
    }
    return ret;
c01105a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01105a9:	c9                   	leave  
c01105aa:	c3                   	ret    

c01105ab <vfs_getcwd>:
/*
 * vfs_getcwd - retrieve current working directory(cwd).
 */
int
vfs_getcwd(struct iobuf *iob) {
c01105ab:	55                   	push   %ebp
c01105ac:	89 e5                	mov    %esp,%ebp
c01105ae:	83 ec 48             	sub    $0x48,%esp
    int ret;
    struct inode *node;
    if ((ret = vfs_get_curdir(&node)) != 0) {
c01105b1:	8d 45 e8             	lea    -0x18(%ebp),%eax
c01105b4:	89 04 24             	mov    %eax,(%esp)
c01105b7:	e8 84 fe ff ff       	call   c0110440 <vfs_get_curdir>
c01105bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01105bf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01105c3:	74 08                	je     c01105cd <vfs_getcwd+0x22>
        return ret;
c01105c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01105c8:	e9 3a 01 00 00       	jmp    c0110707 <vfs_getcwd+0x15c>
    }
    assert(node->in_fs != NULL);
c01105cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01105d0:	8b 40 38             	mov    0x38(%eax),%eax
c01105d3:	85 c0                	test   %eax,%eax
c01105d5:	75 24                	jne    c01105fb <vfs_getcwd+0x50>
c01105d7:	c7 44 24 0c 3f 8d 11 	movl   $0xc0118d3f,0xc(%esp)
c01105de:	c0 
c01105df:	c7 44 24 08 0c 8d 11 	movl   $0xc0118d0c,0x8(%esp)
c01105e6:	c0 
c01105e7:	c7 44 24 04 6e 00 00 	movl   $0x6e,0x4(%esp)
c01105ee:	00 
c01105ef:	c7 04 24 21 8d 11 c0 	movl   $0xc0118d21,(%esp)
c01105f6:	e8 cd 08 ff ff       	call   c0100ec8 <__panic>

    const char *devname = vfs_get_devname(node->in_fs);
c01105fb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01105fe:	8b 40 38             	mov    0x38(%eax),%eax
c0110601:	89 04 24             	mov    %eax,(%esp)
c0110604:	e8 4f f1 ff ff       	call   c010f758 <vfs_get_devname>
c0110609:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = iobuf_move(iob, (char *)devname, strlen(devname), 1, NULL)) != 0) {
c011060c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011060f:	89 04 24             	mov    %eax,(%esp)
c0110612:	e8 d8 4b 00 00       	call   c01151ef <strlen>
c0110617:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c011061e:	00 
c011061f:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0110626:	00 
c0110627:	89 44 24 08          	mov    %eax,0x8(%esp)
c011062b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011062e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110632:	8b 45 08             	mov    0x8(%ebp),%eax
c0110635:	89 04 24             	mov    %eax,(%esp)
c0110638:	e8 0c ad ff ff       	call   c010b349 <iobuf_move>
c011063d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110640:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110644:	74 05                	je     c011064b <vfs_getcwd+0xa0>
        goto out;
c0110646:	e9 ae 00 00 00       	jmp    c01106f9 <vfs_getcwd+0x14e>
    }
    char colon = ':';
c011064b:	c6 45 e7 3a          	movb   $0x3a,-0x19(%ebp)
    if ((ret = iobuf_move(iob, &colon, sizeof(colon), 1, NULL)) != 0) {
c011064f:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0110656:	00 
c0110657:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c011065e:	00 
c011065f:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0110666:	00 
c0110667:	8d 45 e7             	lea    -0x19(%ebp),%eax
c011066a:	89 44 24 04          	mov    %eax,0x4(%esp)
c011066e:	8b 45 08             	mov    0x8(%ebp),%eax
c0110671:	89 04 24             	mov    %eax,(%esp)
c0110674:	e8 d0 ac ff ff       	call   c010b349 <iobuf_move>
c0110679:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011067c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110680:	74 02                	je     c0110684 <vfs_getcwd+0xd9>
        goto out;
c0110682:	eb 75                	jmp    c01106f9 <vfs_getcwd+0x14e>
    }
    ret = vop_namefile(node, iob);
c0110684:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110687:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011068a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011068e:	74 17                	je     c01106a7 <vfs_getcwd+0xfc>
c0110690:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110693:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110696:	85 c0                	test   %eax,%eax
c0110698:	74 0d                	je     c01106a7 <vfs_getcwd+0xfc>
c011069a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011069d:	8b 40 3c             	mov    0x3c(%eax),%eax
c01106a0:	8b 40 1c             	mov    0x1c(%eax),%eax
c01106a3:	85 c0                	test   %eax,%eax
c01106a5:	75 24                	jne    c01106cb <vfs_getcwd+0x120>
c01106a7:	c7 44 24 0c 54 8d 11 	movl   $0xc0118d54,0xc(%esp)
c01106ae:	c0 
c01106af:	c7 44 24 08 0c 8d 11 	movl   $0xc0118d0c,0x8(%esp)
c01106b6:	c0 
c01106b7:	c7 44 24 04 78 00 00 	movl   $0x78,0x4(%esp)
c01106be:	00 
c01106bf:	c7 04 24 21 8d 11 c0 	movl   $0xc0118d21,(%esp)
c01106c6:	e8 fd 07 ff ff       	call   c0100ec8 <__panic>
c01106cb:	c7 44 24 04 a5 8d 11 	movl   $0xc0118da5,0x4(%esp)
c01106d2:	c0 
c01106d3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01106d6:	89 04 24             	mov    %eax,(%esp)
c01106d9:	e8 0f ec ff ff       	call   c010f2ed <inode_check>
c01106de:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01106e1:	8b 40 3c             	mov    0x3c(%eax),%eax
c01106e4:	8b 40 1c             	mov    0x1c(%eax),%eax
c01106e7:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01106ea:	8b 4d 08             	mov    0x8(%ebp),%ecx
c01106ed:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c01106f1:	89 14 24             	mov    %edx,(%esp)
c01106f4:	ff d0                	call   *%eax
c01106f6:	89 45 f4             	mov    %eax,-0xc(%ebp)

out:
    vop_ref_dec(node);
c01106f9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01106fc:	89 04 24             	mov    %eax,(%esp)
c01106ff:	e8 fb e9 ff ff       	call   c010f0ff <inode_ref_dec>
    return ret;
c0110704:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0110707:	c9                   	leave  
c0110708:	c3                   	ret    

c0110709 <dev_open>:

/*
 * dev_open - Called for each open().
 */
static int
dev_open(struct inode *node, uint32_t open_flags) {
c0110709:	55                   	push   %ebp
c011070a:	89 e5                	mov    %esp,%ebp
c011070c:	83 ec 28             	sub    $0x28,%esp
    if (open_flags & (O_CREAT | O_TRUNC | O_EXCL | O_APPEND)) {
c011070f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110712:	83 e0 3c             	and    $0x3c,%eax
c0110715:	85 c0                	test   %eax,%eax
c0110717:	74 07                	je     c0110720 <dev_open+0x17>
        return -E_INVAL;
c0110719:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c011071e:	eb 58                	jmp    c0110778 <dev_open+0x6f>
    }
    struct device *dev = vop_info(node, device);
c0110720:	8b 45 08             	mov    0x8(%ebp),%eax
c0110723:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110726:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011072a:	74 0d                	je     c0110739 <dev_open+0x30>
c011072c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011072f:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110732:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0110737:	74 24                	je     c011075d <dev_open+0x54>
c0110739:	c7 44 24 0c c0 8d 11 	movl   $0xc0118dc0,0xc(%esp)
c0110740:	c0 
c0110741:	c7 44 24 08 f3 8d 11 	movl   $0xc0118df3,0x8(%esp)
c0110748:	c0 
c0110749:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
c0110750:	00 
c0110751:	c7 04 24 08 8e 11 c0 	movl   $0xc0118e08,(%esp)
c0110758:	e8 6b 07 ff ff       	call   c0100ec8 <__panic>
c011075d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110760:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_open(dev, open_flags);
c0110763:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110766:	8b 40 08             	mov    0x8(%eax),%eax
c0110769:	8b 55 0c             	mov    0xc(%ebp),%edx
c011076c:	89 54 24 04          	mov    %edx,0x4(%esp)
c0110770:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110773:	89 14 24             	mov    %edx,(%esp)
c0110776:	ff d0                	call   *%eax
}
c0110778:	c9                   	leave  
c0110779:	c3                   	ret    

c011077a <dev_close>:

/*
 * dev_close - Called on the last close(). Just pass through.
 */
static int
dev_close(struct inode *node) {
c011077a:	55                   	push   %ebp
c011077b:	89 e5                	mov    %esp,%ebp
c011077d:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c0110780:	8b 45 08             	mov    0x8(%ebp),%eax
c0110783:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110786:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011078a:	74 0d                	je     c0110799 <dev_close+0x1f>
c011078c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011078f:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110792:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0110797:	74 24                	je     c01107bd <dev_close+0x43>
c0110799:	c7 44 24 0c c0 8d 11 	movl   $0xc0118dc0,0xc(%esp)
c01107a0:	c0 
c01107a1:	c7 44 24 08 f3 8d 11 	movl   $0xc0118df3,0x8(%esp)
c01107a8:	c0 
c01107a9:	c7 44 24 04 1a 00 00 	movl   $0x1a,0x4(%esp)
c01107b0:	00 
c01107b1:	c7 04 24 08 8e 11 c0 	movl   $0xc0118e08,(%esp)
c01107b8:	e8 0b 07 ff ff       	call   c0100ec8 <__panic>
c01107bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01107c0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_close(dev);
c01107c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01107c6:	8b 40 0c             	mov    0xc(%eax),%eax
c01107c9:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01107cc:	89 14 24             	mov    %edx,(%esp)
c01107cf:	ff d0                	call   *%eax
}
c01107d1:	c9                   	leave  
c01107d2:	c3                   	ret    

c01107d3 <dev_read>:

/*
 * dev_read -Called for read. Hand off to iobuf.
 */
static int
dev_read(struct inode *node, struct iobuf *iob) {
c01107d3:	55                   	push   %ebp
c01107d4:	89 e5                	mov    %esp,%ebp
c01107d6:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c01107d9:	8b 45 08             	mov    0x8(%ebp),%eax
c01107dc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01107df:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01107e3:	74 0d                	je     c01107f2 <dev_read+0x1f>
c01107e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01107e8:	8b 40 2c             	mov    0x2c(%eax),%eax
c01107eb:	3d 34 12 00 00       	cmp    $0x1234,%eax
c01107f0:	74 24                	je     c0110816 <dev_read+0x43>
c01107f2:	c7 44 24 0c c0 8d 11 	movl   $0xc0118dc0,0xc(%esp)
c01107f9:	c0 
c01107fa:	c7 44 24 08 f3 8d 11 	movl   $0xc0118df3,0x8(%esp)
c0110801:	c0 
c0110802:	c7 44 24 04 23 00 00 	movl   $0x23,0x4(%esp)
c0110809:	00 
c011080a:	c7 04 24 08 8e 11 c0 	movl   $0xc0118e08,(%esp)
c0110811:	e8 b2 06 ff ff       	call   c0100ec8 <__panic>
c0110816:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110819:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_io(dev, iob, 0);
c011081c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011081f:	8b 40 10             	mov    0x10(%eax),%eax
c0110822:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0110829:	00 
c011082a:	8b 55 0c             	mov    0xc(%ebp),%edx
c011082d:	89 54 24 04          	mov    %edx,0x4(%esp)
c0110831:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110834:	89 14 24             	mov    %edx,(%esp)
c0110837:	ff d0                	call   *%eax
}
c0110839:	c9                   	leave  
c011083a:	c3                   	ret    

c011083b <dev_write>:

/*
 * dev_write -Called for write. Hand off to iobuf.
 */
static int
dev_write(struct inode *node, struct iobuf *iob) {
c011083b:	55                   	push   %ebp
c011083c:	89 e5                	mov    %esp,%ebp
c011083e:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c0110841:	8b 45 08             	mov    0x8(%ebp),%eax
c0110844:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110847:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011084b:	74 0d                	je     c011085a <dev_write+0x1f>
c011084d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110850:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110853:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0110858:	74 24                	je     c011087e <dev_write+0x43>
c011085a:	c7 44 24 0c c0 8d 11 	movl   $0xc0118dc0,0xc(%esp)
c0110861:	c0 
c0110862:	c7 44 24 08 f3 8d 11 	movl   $0xc0118df3,0x8(%esp)
c0110869:	c0 
c011086a:	c7 44 24 04 2c 00 00 	movl   $0x2c,0x4(%esp)
c0110871:	00 
c0110872:	c7 04 24 08 8e 11 c0 	movl   $0xc0118e08,(%esp)
c0110879:	e8 4a 06 ff ff       	call   c0100ec8 <__panic>
c011087e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110881:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_io(dev, iob, 1);
c0110884:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110887:	8b 40 10             	mov    0x10(%eax),%eax
c011088a:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0110891:	00 
c0110892:	8b 55 0c             	mov    0xc(%ebp),%edx
c0110895:	89 54 24 04          	mov    %edx,0x4(%esp)
c0110899:	8b 55 f0             	mov    -0x10(%ebp),%edx
c011089c:	89 14 24             	mov    %edx,(%esp)
c011089f:	ff d0                	call   *%eax
}
c01108a1:	c9                   	leave  
c01108a2:	c3                   	ret    

c01108a3 <dev_ioctl>:

/*
 * dev_ioctl - Called for ioctl(). Just pass through.
 */
static int
dev_ioctl(struct inode *node, int op, void *data) {
c01108a3:	55                   	push   %ebp
c01108a4:	89 e5                	mov    %esp,%ebp
c01108a6:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c01108a9:	8b 45 08             	mov    0x8(%ebp),%eax
c01108ac:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01108af:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01108b3:	74 0d                	je     c01108c2 <dev_ioctl+0x1f>
c01108b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01108b8:	8b 40 2c             	mov    0x2c(%eax),%eax
c01108bb:	3d 34 12 00 00       	cmp    $0x1234,%eax
c01108c0:	74 24                	je     c01108e6 <dev_ioctl+0x43>
c01108c2:	c7 44 24 0c c0 8d 11 	movl   $0xc0118dc0,0xc(%esp)
c01108c9:	c0 
c01108ca:	c7 44 24 08 f3 8d 11 	movl   $0xc0118df3,0x8(%esp)
c01108d1:	c0 
c01108d2:	c7 44 24 04 35 00 00 	movl   $0x35,0x4(%esp)
c01108d9:	00 
c01108da:	c7 04 24 08 8e 11 c0 	movl   $0xc0118e08,(%esp)
c01108e1:	e8 e2 05 ff ff       	call   c0100ec8 <__panic>
c01108e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01108e9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_ioctl(dev, op, data);
c01108ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01108ef:	8b 40 14             	mov    0x14(%eax),%eax
c01108f2:	8b 55 10             	mov    0x10(%ebp),%edx
c01108f5:	89 54 24 08          	mov    %edx,0x8(%esp)
c01108f9:	8b 55 0c             	mov    0xc(%ebp),%edx
c01108fc:	89 54 24 04          	mov    %edx,0x4(%esp)
c0110900:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110903:	89 14 24             	mov    %edx,(%esp)
c0110906:	ff d0                	call   *%eax
}
c0110908:	c9                   	leave  
c0110909:	c3                   	ret    

c011090a <dev_fstat>:
 * dev_fstat - Called for stat().
 *             Set the type and the size (block devices only).
 *             The link count for a device is always 1.
 */
static int
dev_fstat(struct inode *node, struct stat *stat) {
c011090a:	55                   	push   %ebp
c011090b:	89 e5                	mov    %esp,%ebp
c011090d:	83 ec 28             	sub    $0x28,%esp
    int ret;
    memset(stat, 0, sizeof(struct stat));
c0110910:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c0110917:	00 
c0110918:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c011091f:	00 
c0110920:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110923:	89 04 24             	mov    %eax,(%esp)
c0110926:	e8 1a 4c 00 00       	call   c0115545 <memset>
    if ((ret = vop_gettype(node, &(stat->st_mode))) != 0) {
c011092b:	8b 45 08             	mov    0x8(%ebp),%eax
c011092e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110931:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110935:	74 17                	je     c011094e <dev_fstat+0x44>
c0110937:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011093a:	8b 40 3c             	mov    0x3c(%eax),%eax
c011093d:	85 c0                	test   %eax,%eax
c011093f:	74 0d                	je     c011094e <dev_fstat+0x44>
c0110941:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110944:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110947:	8b 40 28             	mov    0x28(%eax),%eax
c011094a:	85 c0                	test   %eax,%eax
c011094c:	75 24                	jne    c0110972 <dev_fstat+0x68>
c011094e:	c7 44 24 0c 1c 8e 11 	movl   $0xc0118e1c,0xc(%esp)
c0110955:	c0 
c0110956:	c7 44 24 08 f3 8d 11 	movl   $0xc0118df3,0x8(%esp)
c011095d:	c0 
c011095e:	c7 44 24 04 42 00 00 	movl   $0x42,0x4(%esp)
c0110965:	00 
c0110966:	c7 04 24 08 8e 11 c0 	movl   $0xc0118e08,(%esp)
c011096d:	e8 56 05 ff ff       	call   c0100ec8 <__panic>
c0110972:	c7 44 24 04 6c 8e 11 	movl   $0xc0118e6c,0x4(%esp)
c0110979:	c0 
c011097a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011097d:	89 04 24             	mov    %eax,(%esp)
c0110980:	e8 68 e9 ff ff       	call   c010f2ed <inode_check>
c0110985:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110988:	8b 40 3c             	mov    0x3c(%eax),%eax
c011098b:	8b 40 28             	mov    0x28(%eax),%eax
c011098e:	8b 55 0c             	mov    0xc(%ebp),%edx
c0110991:	89 54 24 04          	mov    %edx,0x4(%esp)
c0110995:	8b 55 08             	mov    0x8(%ebp),%edx
c0110998:	89 14 24             	mov    %edx,(%esp)
c011099b:	ff d0                	call   *%eax
c011099d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01109a0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01109a4:	74 05                	je     c01109ab <dev_fstat+0xa1>
        return ret;
c01109a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01109a9:	eb 72                	jmp    c0110a1d <dev_fstat+0x113>
    }
    struct device *dev = vop_info(node, device);
c01109ab:	8b 45 08             	mov    0x8(%ebp),%eax
c01109ae:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01109b1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01109b5:	74 0d                	je     c01109c4 <dev_fstat+0xba>
c01109b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01109ba:	8b 40 2c             	mov    0x2c(%eax),%eax
c01109bd:	3d 34 12 00 00       	cmp    $0x1234,%eax
c01109c2:	74 24                	je     c01109e8 <dev_fstat+0xde>
c01109c4:	c7 44 24 0c c0 8d 11 	movl   $0xc0118dc0,0xc(%esp)
c01109cb:	c0 
c01109cc:	c7 44 24 08 f3 8d 11 	movl   $0xc0118df3,0x8(%esp)
c01109d3:	c0 
c01109d4:	c7 44 24 04 45 00 00 	movl   $0x45,0x4(%esp)
c01109db:	00 
c01109dc:	c7 04 24 08 8e 11 c0 	movl   $0xc0118e08,(%esp)
c01109e3:	e8 e0 04 ff ff       	call   c0100ec8 <__panic>
c01109e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01109eb:	89 45 e8             	mov    %eax,-0x18(%ebp)
    stat->st_nlinks = 1;
c01109ee:	8b 45 0c             	mov    0xc(%ebp),%eax
c01109f1:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    stat->st_blocks = dev->d_blocks;
c01109f8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01109fb:	8b 10                	mov    (%eax),%edx
c01109fd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110a00:	89 50 08             	mov    %edx,0x8(%eax)
    stat->st_size = stat->st_blocks * dev->d_blocksize;
c0110a03:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110a06:	8b 50 08             	mov    0x8(%eax),%edx
c0110a09:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110a0c:	8b 40 04             	mov    0x4(%eax),%eax
c0110a0f:	0f af d0             	imul   %eax,%edx
c0110a12:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110a15:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c0110a18:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110a1d:	c9                   	leave  
c0110a1e:	c3                   	ret    

c0110a1f <dev_gettype>:
 * dev_gettype - Return the type. A device is a "block device" if it has a known
 *               length. A device that generates data in a stream is a "character
 *               device".
 */
static int
dev_gettype(struct inode *node, uint32_t *type_store) {
c0110a1f:	55                   	push   %ebp
c0110a20:	89 e5                	mov    %esp,%ebp
c0110a22:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c0110a25:	8b 45 08             	mov    0x8(%ebp),%eax
c0110a28:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110a2b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110a2f:	74 0d                	je     c0110a3e <dev_gettype+0x1f>
c0110a31:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110a34:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110a37:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0110a3c:	74 24                	je     c0110a62 <dev_gettype+0x43>
c0110a3e:	c7 44 24 0c c0 8d 11 	movl   $0xc0118dc0,0xc(%esp)
c0110a45:	c0 
c0110a46:	c7 44 24 08 f3 8d 11 	movl   $0xc0118df3,0x8(%esp)
c0110a4d:	c0 
c0110a4e:	c7 44 24 04 53 00 00 	movl   $0x53,0x4(%esp)
c0110a55:	00 
c0110a56:	c7 04 24 08 8e 11 c0 	movl   $0xc0118e08,(%esp)
c0110a5d:	e8 66 04 ff ff       	call   c0100ec8 <__panic>
c0110a62:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110a65:	89 45 f0             	mov    %eax,-0x10(%ebp)
    *type_store = (dev->d_blocks > 0) ? S_IFBLK : S_IFCHR;
c0110a68:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110a6b:	8b 00                	mov    (%eax),%eax
c0110a6d:	85 c0                	test   %eax,%eax
c0110a6f:	74 07                	je     c0110a78 <dev_gettype+0x59>
c0110a71:	b8 00 50 00 00       	mov    $0x5000,%eax
c0110a76:	eb 05                	jmp    c0110a7d <dev_gettype+0x5e>
c0110a78:	b8 00 40 00 00       	mov    $0x4000,%eax
c0110a7d:	8b 55 0c             	mov    0xc(%ebp),%edx
c0110a80:	89 02                	mov    %eax,(%edx)
    return 0;
c0110a82:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110a87:	c9                   	leave  
c0110a88:	c3                   	ret    

c0110a89 <dev_tryseek>:
 * dev_tryseek - Attempt a seek.
 *               For block devices, require block alignment.
 *               For character devices, prohibit seeking entirely.
 */
static int
dev_tryseek(struct inode *node, off_t pos) {
c0110a89:	55                   	push   %ebp
c0110a8a:	89 e5                	mov    %esp,%ebp
c0110a8c:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c0110a8f:	8b 45 08             	mov    0x8(%ebp),%eax
c0110a92:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110a95:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110a99:	74 0d                	je     c0110aa8 <dev_tryseek+0x1f>
c0110a9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110a9e:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110aa1:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0110aa6:	74 24                	je     c0110acc <dev_tryseek+0x43>
c0110aa8:	c7 44 24 0c c0 8d 11 	movl   $0xc0118dc0,0xc(%esp)
c0110aaf:	c0 
c0110ab0:	c7 44 24 08 f3 8d 11 	movl   $0xc0118df3,0x8(%esp)
c0110ab7:	c0 
c0110ab8:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
c0110abf:	00 
c0110ac0:	c7 04 24 08 8e 11 c0 	movl   $0xc0118e08,(%esp)
c0110ac7:	e8 fc 03 ff ff       	call   c0100ec8 <__panic>
c0110acc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110acf:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (dev->d_blocks > 0) {
c0110ad2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110ad5:	8b 00                	mov    (%eax),%eax
c0110ad7:	85 c0                	test   %eax,%eax
c0110ad9:	74 38                	je     c0110b13 <dev_tryseek+0x8a>
        if ((pos % dev->d_blocksize) == 0) {
c0110adb:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110ade:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110ae1:	8b 4a 04             	mov    0x4(%edx),%ecx
c0110ae4:	ba 00 00 00 00       	mov    $0x0,%edx
c0110ae9:	f7 f1                	div    %ecx
c0110aeb:	89 d0                	mov    %edx,%eax
c0110aed:	85 c0                	test   %eax,%eax
c0110aef:	75 22                	jne    c0110b13 <dev_tryseek+0x8a>
            if (pos >= 0 && pos < dev->d_blocks * dev->d_blocksize) {
c0110af1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0110af5:	78 1c                	js     c0110b13 <dev_tryseek+0x8a>
c0110af7:	8b 55 0c             	mov    0xc(%ebp),%edx
c0110afa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110afd:	8b 08                	mov    (%eax),%ecx
c0110aff:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110b02:	8b 40 04             	mov    0x4(%eax),%eax
c0110b05:	0f af c1             	imul   %ecx,%eax
c0110b08:	39 c2                	cmp    %eax,%edx
c0110b0a:	73 07                	jae    c0110b13 <dev_tryseek+0x8a>
                return 0;
c0110b0c:	b8 00 00 00 00       	mov    $0x0,%eax
c0110b11:	eb 05                	jmp    c0110b18 <dev_tryseek+0x8f>
            }
        }
    }
    return -E_INVAL;
c0110b13:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c0110b18:	c9                   	leave  
c0110b19:	c3                   	ret    

c0110b1a <dev_lookup>:
 * mode.
 *
 * However, we have no support for this in the base system.
 */
static int
dev_lookup(struct inode *node, char *path, struct inode **node_store) {
c0110b1a:	55                   	push   %ebp
c0110b1b:	89 e5                	mov    %esp,%ebp
c0110b1d:	83 ec 18             	sub    $0x18,%esp
    if (*path != '\0') {
c0110b20:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110b23:	0f b6 00             	movzbl (%eax),%eax
c0110b26:	84 c0                	test   %al,%al
c0110b28:	74 07                	je     c0110b31 <dev_lookup+0x17>
        return -E_NOENT;
c0110b2a:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
c0110b2f:	eb 18                	jmp    c0110b49 <dev_lookup+0x2f>
    }
    vop_ref_inc(node);
c0110b31:	8b 45 08             	mov    0x8(%ebp),%eax
c0110b34:	89 04 24             	mov    %eax,(%esp)
c0110b37:	e8 a9 e5 ff ff       	call   c010f0e5 <inode_ref_inc>
    *node_store = node;
c0110b3c:	8b 45 10             	mov    0x10(%ebp),%eax
c0110b3f:	8b 55 08             	mov    0x8(%ebp),%edx
c0110b42:	89 10                	mov    %edx,(%eax)
    return 0;
c0110b44:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110b49:	c9                   	leave  
c0110b4a:	c3                   	ret    

c0110b4b <dev_init>:
        dev_init_##x();                                 \
    } while (0)

/* dev_init - Initialization functions for builtin vfs-level devices. */
void
dev_init(void) {
c0110b4b:	55                   	push   %ebp
c0110b4c:	89 e5                	mov    %esp,%ebp
c0110b4e:	83 ec 08             	sub    $0x8,%esp
   // init_device(null);
    init_device(stdin);
c0110b51:	e8 8f 07 00 00       	call   c01112e5 <dev_init_stdin>
    init_device(stdout);
c0110b56:	e8 0a 09 00 00       	call   c0111465 <dev_init_stdout>
    init_device(disk0);
c0110b5b:	e8 26 04 00 00       	call   c0110f86 <dev_init_disk0>
}
c0110b60:	c9                   	leave  
c0110b61:	c3                   	ret    

c0110b62 <dev_create_inode>:
/* dev_create_inode - Create inode for a vfs-level device. */
struct inode *
dev_create_inode(void) {
c0110b62:	55                   	push   %ebp
c0110b63:	89 e5                	mov    %esp,%ebp
c0110b65:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = alloc_inode(device)) != NULL) {
c0110b68:	c7 04 24 34 12 00 00 	movl   $0x1234,(%esp)
c0110b6f:	e8 96 e4 ff ff       	call   c010f00a <__alloc_inode>
c0110b74:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110b77:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110b7b:	74 1b                	je     c0110b98 <dev_create_inode+0x36>
        vop_init(node, &dev_node_ops, NULL);
c0110b7d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0110b84:	00 
c0110b85:	c7 44 24 04 80 8e 11 	movl   $0xc0118e80,0x4(%esp)
c0110b8c:	c0 
c0110b8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110b90:	89 04 24             	mov    %eax,(%esp)
c0110b93:	e8 9b e4 ff ff       	call   c010f033 <inode_init>
    }
    return node;
c0110b98:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0110b9b:	c9                   	leave  
c0110b9c:	c3                   	ret    

c0110b9d <lock_disk0>:

static char *disk0_buffer;
static semaphore_t disk0_sem;

static void
lock_disk0(void) {
c0110b9d:	55                   	push   %ebp
c0110b9e:	89 e5                	mov    %esp,%ebp
c0110ba0:	83 ec 18             	sub    $0x18,%esp
    down(&(disk0_sem));
c0110ba3:	c7 04 24 e0 1f 15 c0 	movl   $0xc0151fe0,(%esp)
c0110baa:	e8 25 91 ff ff       	call   c0109cd4 <down>
}
c0110baf:	c9                   	leave  
c0110bb0:	c3                   	ret    

c0110bb1 <unlock_disk0>:

static void
unlock_disk0(void) {
c0110bb1:	55                   	push   %ebp
c0110bb2:	89 e5                	mov    %esp,%ebp
c0110bb4:	83 ec 18             	sub    $0x18,%esp
    up(&(disk0_sem));
c0110bb7:	c7 04 24 e0 1f 15 c0 	movl   $0xc0151fe0,(%esp)
c0110bbe:	e8 f6 90 ff ff       	call   c0109cb9 <up>
}
c0110bc3:	c9                   	leave  
c0110bc4:	c3                   	ret    

c0110bc5 <disk0_open>:

static int
disk0_open(struct device *dev, uint32_t open_flags) {
c0110bc5:	55                   	push   %ebp
c0110bc6:	89 e5                	mov    %esp,%ebp
    return 0;
c0110bc8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110bcd:	5d                   	pop    %ebp
c0110bce:	c3                   	ret    

c0110bcf <disk0_close>:

static int
disk0_close(struct device *dev) {
c0110bcf:	55                   	push   %ebp
c0110bd0:	89 e5                	mov    %esp,%ebp
    return 0;
c0110bd2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110bd7:	5d                   	pop    %ebp
c0110bd8:	c3                   	ret    

c0110bd9 <disk0_read_blks_nolock>:

static void
disk0_read_blks_nolock(uint32_t blkno, uint32_t nblks) {
c0110bd9:	55                   	push   %ebp
c0110bda:	89 e5                	mov    %esp,%ebp
c0110bdc:	83 ec 38             	sub    $0x38,%esp
    int ret;
    uint32_t sectno = blkno * DISK0_BLK_NSECT, nsecs = nblks * DISK0_BLK_NSECT;
c0110bdf:	8b 45 08             	mov    0x8(%ebp),%eax
c0110be2:	c1 e0 03             	shl    $0x3,%eax
c0110be5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110be8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110beb:	c1 e0 03             	shl    $0x3,%eax
c0110bee:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = ide_read_secs(DISK0_DEV_NO, sectno, disk0_buffer, nsecs)) != 0) {
c0110bf1:	a1 dc 1f 15 c0       	mov    0xc0151fdc,%eax
c0110bf6:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110bf9:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0110bfd:	89 44 24 08          	mov    %eax,0x8(%esp)
c0110c01:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110c04:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110c08:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c0110c0f:	e8 8c 10 ff ff       	call   c0101ca0 <ide_read_secs>
c0110c14:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110c17:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110c1b:	74 3f                	je     c0110c5c <disk0_read_blks_nolock+0x83>
        panic("disk0: read blkno = %d (sectno = %d), nblks = %d (nsecs = %d): 0x%08x.\n",
c0110c1d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110c20:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c0110c24:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110c27:	89 44 24 18          	mov    %eax,0x18(%esp)
c0110c2b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110c2e:	89 44 24 14          	mov    %eax,0x14(%esp)
c0110c32:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110c35:	89 44 24 10          	mov    %eax,0x10(%esp)
c0110c39:	8b 45 08             	mov    0x8(%ebp),%eax
c0110c3c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0110c40:	c7 44 24 08 c0 8e 11 	movl   $0xc0118ec0,0x8(%esp)
c0110c47:	c0 
c0110c48:	c7 44 24 04 2e 00 00 	movl   $0x2e,0x4(%esp)
c0110c4f:	00 
c0110c50:	c7 04 24 08 8f 11 c0 	movl   $0xc0118f08,(%esp)
c0110c57:	e8 6c 02 ff ff       	call   c0100ec8 <__panic>
                blkno, sectno, nblks, nsecs, ret);
    }
}
c0110c5c:	c9                   	leave  
c0110c5d:	c3                   	ret    

c0110c5e <disk0_write_blks_nolock>:

static void
disk0_write_blks_nolock(uint32_t blkno, uint32_t nblks) {
c0110c5e:	55                   	push   %ebp
c0110c5f:	89 e5                	mov    %esp,%ebp
c0110c61:	83 ec 38             	sub    $0x38,%esp
    int ret;
    uint32_t sectno = blkno * DISK0_BLK_NSECT, nsecs = nblks * DISK0_BLK_NSECT;
c0110c64:	8b 45 08             	mov    0x8(%ebp),%eax
c0110c67:	c1 e0 03             	shl    $0x3,%eax
c0110c6a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110c6d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110c70:	c1 e0 03             	shl    $0x3,%eax
c0110c73:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = ide_write_secs(DISK0_DEV_NO, sectno, disk0_buffer, nsecs)) != 0) {
c0110c76:	a1 dc 1f 15 c0       	mov    0xc0151fdc,%eax
c0110c7b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110c7e:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0110c82:	89 44 24 08          	mov    %eax,0x8(%esp)
c0110c86:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110c89:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110c8d:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c0110c94:	e8 49 12 ff ff       	call   c0101ee2 <ide_write_secs>
c0110c99:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110c9c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110ca0:	74 3f                	je     c0110ce1 <disk0_write_blks_nolock+0x83>
        panic("disk0: write blkno = %d (sectno = %d), nblks = %d (nsecs = %d): 0x%08x.\n",
c0110ca2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110ca5:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c0110ca9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110cac:	89 44 24 18          	mov    %eax,0x18(%esp)
c0110cb0:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110cb3:	89 44 24 14          	mov    %eax,0x14(%esp)
c0110cb7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110cba:	89 44 24 10          	mov    %eax,0x10(%esp)
c0110cbe:	8b 45 08             	mov    0x8(%ebp),%eax
c0110cc1:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0110cc5:	c7 44 24 08 24 8f 11 	movl   $0xc0118f24,0x8(%esp)
c0110ccc:	c0 
c0110ccd:	c7 44 24 04 38 00 00 	movl   $0x38,0x4(%esp)
c0110cd4:	00 
c0110cd5:	c7 04 24 08 8f 11 c0 	movl   $0xc0118f08,(%esp)
c0110cdc:	e8 e7 01 ff ff       	call   c0100ec8 <__panic>
                blkno, sectno, nblks, nsecs, ret);
    }
}
c0110ce1:	c9                   	leave  
c0110ce2:	c3                   	ret    

c0110ce3 <disk0_io>:

static int
disk0_io(struct device *dev, struct iobuf *iob, bool write) {
c0110ce3:	55                   	push   %ebp
c0110ce4:	89 e5                	mov    %esp,%ebp
c0110ce6:	83 ec 48             	sub    $0x48,%esp
    off_t offset = iob->io_offset;
c0110ce9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110cec:	8b 40 04             	mov    0x4(%eax),%eax
c0110cef:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    size_t resid = iob->io_resid;
c0110cf2:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110cf5:	8b 40 0c             	mov    0xc(%eax),%eax
c0110cf8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t blkno = offset / DISK0_BLKSIZE;
c0110cfb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110cfe:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
c0110d04:	85 c0                	test   %eax,%eax
c0110d06:	0f 48 c2             	cmovs  %edx,%eax
c0110d09:	c1 f8 0c             	sar    $0xc,%eax
c0110d0c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    uint32_t nblks = resid / DISK0_BLKSIZE;
c0110d0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110d12:	c1 e8 0c             	shr    $0xc,%eax
c0110d15:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* don't allow I/O that isn't block-aligned */
    if ((offset % DISK0_BLKSIZE) != 0 || (resid % DISK0_BLKSIZE) != 0) {
c0110d18:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110d1b:	25 ff 0f 00 00       	and    $0xfff,%eax
c0110d20:	85 c0                	test   %eax,%eax
c0110d22:	75 0c                	jne    c0110d30 <disk0_io+0x4d>
c0110d24:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110d27:	25 ff 0f 00 00       	and    $0xfff,%eax
c0110d2c:	85 c0                	test   %eax,%eax
c0110d2e:	74 0a                	je     c0110d3a <disk0_io+0x57>
        return -E_INVAL;
c0110d30:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0110d35:	e9 7a 01 00 00       	jmp    c0110eb4 <disk0_io+0x1d1>
    }

    /* don't allow I/O past the end of disk0 */
    if (blkno + nblks > dev->d_blocks) {
c0110d3a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110d3d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110d40:	01 c2                	add    %eax,%edx
c0110d42:	8b 45 08             	mov    0x8(%ebp),%eax
c0110d45:	8b 00                	mov    (%eax),%eax
c0110d47:	39 c2                	cmp    %eax,%edx
c0110d49:	76 0a                	jbe    c0110d55 <disk0_io+0x72>
        return -E_INVAL;
c0110d4b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0110d50:	e9 5f 01 00 00       	jmp    c0110eb4 <disk0_io+0x1d1>
    }

    /* read/write nothing ? */
    if (nblks == 0) {
c0110d55:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110d59:	75 0a                	jne    c0110d65 <disk0_io+0x82>
        return 0;
c0110d5b:	b8 00 00 00 00       	mov    $0x0,%eax
c0110d60:	e9 4f 01 00 00       	jmp    c0110eb4 <disk0_io+0x1d1>
    }

    lock_disk0();
c0110d65:	e8 33 fe ff ff       	call   c0110b9d <lock_disk0>
    while (resid != 0) {
c0110d6a:	e9 31 01 00 00       	jmp    c0110ea0 <disk0_io+0x1bd>
        size_t copied, alen = DISK0_BUFSIZE;
c0110d6f:	c7 45 e8 00 40 00 00 	movl   $0x4000,-0x18(%ebp)
        if (write) {
c0110d76:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0110d7a:	0f 84 89 00 00 00    	je     c0110e09 <disk0_io+0x126>
            iobuf_move(iob, disk0_buffer, alen, 0, &copied);
c0110d80:	a1 dc 1f 15 c0       	mov    0xc0151fdc,%eax
c0110d85:	8d 55 e0             	lea    -0x20(%ebp),%edx
c0110d88:	89 54 24 10          	mov    %edx,0x10(%esp)
c0110d8c:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0110d93:	00 
c0110d94:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0110d97:	89 54 24 08          	mov    %edx,0x8(%esp)
c0110d9b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110d9f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110da2:	89 04 24             	mov    %eax,(%esp)
c0110da5:	e8 9f a5 ff ff       	call   c010b349 <iobuf_move>
            assert(copied != 0 && copied <= resid && copied % DISK0_BLKSIZE == 0);
c0110daa:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110dad:	85 c0                	test   %eax,%eax
c0110daf:	74 14                	je     c0110dc5 <disk0_io+0xe2>
c0110db1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110db4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0110db7:	77 0c                	ja     c0110dc5 <disk0_io+0xe2>
c0110db9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110dbc:	25 ff 0f 00 00       	and    $0xfff,%eax
c0110dc1:	85 c0                	test   %eax,%eax
c0110dc3:	74 24                	je     c0110de9 <disk0_io+0x106>
c0110dc5:	c7 44 24 0c 70 8f 11 	movl   $0xc0118f70,0xc(%esp)
c0110dcc:	c0 
c0110dcd:	c7 44 24 08 ae 8f 11 	movl   $0xc0118fae,0x8(%esp)
c0110dd4:	c0 
c0110dd5:	c7 44 24 04 57 00 00 	movl   $0x57,0x4(%esp)
c0110ddc:	00 
c0110ddd:	c7 04 24 08 8f 11 c0 	movl   $0xc0118f08,(%esp)
c0110de4:	e8 df 00 ff ff       	call   c0100ec8 <__panic>
            nblks = copied / DISK0_BLKSIZE;
c0110de9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110dec:	c1 e8 0c             	shr    $0xc,%eax
c0110def:	89 45 ec             	mov    %eax,-0x14(%ebp)
            disk0_write_blks_nolock(blkno, nblks);
c0110df2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110df5:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110df9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110dfc:	89 04 24             	mov    %eax,(%esp)
c0110dff:	e8 5a fe ff ff       	call   c0110c5e <disk0_write_blks_nolock>
c0110e04:	e9 8b 00 00 00       	jmp    c0110e94 <disk0_io+0x1b1>
        }
        else {
            if (alen > resid) {
c0110e09:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110e0c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0110e0f:	76 06                	jbe    c0110e17 <disk0_io+0x134>
                alen = resid;
c0110e11:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110e14:	89 45 e8             	mov    %eax,-0x18(%ebp)
            }
            nblks = alen / DISK0_BLKSIZE;
c0110e17:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110e1a:	c1 e8 0c             	shr    $0xc,%eax
c0110e1d:	89 45 ec             	mov    %eax,-0x14(%ebp)
            disk0_read_blks_nolock(blkno, nblks);
c0110e20:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110e23:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110e27:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110e2a:	89 04 24             	mov    %eax,(%esp)
c0110e2d:	e8 a7 fd ff ff       	call   c0110bd9 <disk0_read_blks_nolock>
            iobuf_move(iob, disk0_buffer, alen, 1, &copied);
c0110e32:	a1 dc 1f 15 c0       	mov    0xc0151fdc,%eax
c0110e37:	8d 55 e0             	lea    -0x20(%ebp),%edx
c0110e3a:	89 54 24 10          	mov    %edx,0x10(%esp)
c0110e3e:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0110e45:	00 
c0110e46:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0110e49:	89 54 24 08          	mov    %edx,0x8(%esp)
c0110e4d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110e51:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110e54:	89 04 24             	mov    %eax,(%esp)
c0110e57:	e8 ed a4 ff ff       	call   c010b349 <iobuf_move>
            assert(copied == alen && copied % DISK0_BLKSIZE == 0);
c0110e5c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110e5f:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0110e62:	75 0c                	jne    c0110e70 <disk0_io+0x18d>
c0110e64:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110e67:	25 ff 0f 00 00       	and    $0xfff,%eax
c0110e6c:	85 c0                	test   %eax,%eax
c0110e6e:	74 24                	je     c0110e94 <disk0_io+0x1b1>
c0110e70:	c7 44 24 0c c4 8f 11 	movl   $0xc0118fc4,0xc(%esp)
c0110e77:	c0 
c0110e78:	c7 44 24 08 ae 8f 11 	movl   $0xc0118fae,0x8(%esp)
c0110e7f:	c0 
c0110e80:	c7 44 24 04 62 00 00 	movl   $0x62,0x4(%esp)
c0110e87:	00 
c0110e88:	c7 04 24 08 8f 11 c0 	movl   $0xc0118f08,(%esp)
c0110e8f:	e8 34 00 ff ff       	call   c0100ec8 <__panic>
        }
        resid -= copied, blkno += nblks;
c0110e94:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110e97:	29 45 f4             	sub    %eax,-0xc(%ebp)
c0110e9a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110e9d:	01 45 f0             	add    %eax,-0x10(%ebp)
    if (nblks == 0) {
        return 0;
    }

    lock_disk0();
    while (resid != 0) {
c0110ea0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110ea4:	0f 85 c5 fe ff ff    	jne    c0110d6f <disk0_io+0x8c>
            iobuf_move(iob, disk0_buffer, alen, 1, &copied);
            assert(copied == alen && copied % DISK0_BLKSIZE == 0);
        }
        resid -= copied, blkno += nblks;
    }
    unlock_disk0();
c0110eaa:	e8 02 fd ff ff       	call   c0110bb1 <unlock_disk0>
    return 0;
c0110eaf:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110eb4:	c9                   	leave  
c0110eb5:	c3                   	ret    

c0110eb6 <disk0_ioctl>:

static int
disk0_ioctl(struct device *dev, int op, void *data) {
c0110eb6:	55                   	push   %ebp
c0110eb7:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c0110eb9:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c0110ebe:	5d                   	pop    %ebp
c0110ebf:	c3                   	ret    

c0110ec0 <disk0_device_init>:

static void
disk0_device_init(struct device *dev) {
c0110ec0:	55                   	push   %ebp
c0110ec1:	89 e5                	mov    %esp,%ebp
c0110ec3:	83 ec 18             	sub    $0x18,%esp
    static_assert(DISK0_BLKSIZE % SECTSIZE == 0);
    if (!ide_device_valid(DISK0_DEV_NO)) {
c0110ec6:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c0110ecd:	e8 50 0d ff ff       	call   c0101c22 <ide_device_valid>
c0110ed2:	85 c0                	test   %eax,%eax
c0110ed4:	75 1c                	jne    c0110ef2 <disk0_device_init+0x32>
        panic("disk0 device isn't available.\n");
c0110ed6:	c7 44 24 08 f4 8f 11 	movl   $0xc0118ff4,0x8(%esp)
c0110edd:	c0 
c0110ede:	c7 44 24 04 73 00 00 	movl   $0x73,0x4(%esp)
c0110ee5:	00 
c0110ee6:	c7 04 24 08 8f 11 c0 	movl   $0xc0118f08,(%esp)
c0110eed:	e8 d6 ff fe ff       	call   c0100ec8 <__panic>
    }
    dev->d_blocks = ide_device_size(DISK0_DEV_NO) / DISK0_BLK_NSECT;
c0110ef2:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c0110ef9:	e8 63 0d ff ff       	call   c0101c61 <ide_device_size>
c0110efe:	c1 e8 03             	shr    $0x3,%eax
c0110f01:	89 c2                	mov    %eax,%edx
c0110f03:	8b 45 08             	mov    0x8(%ebp),%eax
c0110f06:	89 10                	mov    %edx,(%eax)
    dev->d_blocksize = DISK0_BLKSIZE;
c0110f08:	8b 45 08             	mov    0x8(%ebp),%eax
c0110f0b:	c7 40 04 00 10 00 00 	movl   $0x1000,0x4(%eax)
    dev->d_open = disk0_open;
c0110f12:	8b 45 08             	mov    0x8(%ebp),%eax
c0110f15:	c7 40 08 c5 0b 11 c0 	movl   $0xc0110bc5,0x8(%eax)
    dev->d_close = disk0_close;
c0110f1c:	8b 45 08             	mov    0x8(%ebp),%eax
c0110f1f:	c7 40 0c cf 0b 11 c0 	movl   $0xc0110bcf,0xc(%eax)
    dev->d_io = disk0_io;
c0110f26:	8b 45 08             	mov    0x8(%ebp),%eax
c0110f29:	c7 40 10 e3 0c 11 c0 	movl   $0xc0110ce3,0x10(%eax)
    dev->d_ioctl = disk0_ioctl;
c0110f30:	8b 45 08             	mov    0x8(%ebp),%eax
c0110f33:	c7 40 14 b6 0e 11 c0 	movl   $0xc0110eb6,0x14(%eax)
    sem_init(&(disk0_sem), 1);
c0110f3a:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0110f41:	00 
c0110f42:	c7 04 24 e0 1f 15 c0 	movl   $0xc0151fe0,(%esp)
c0110f49:	e8 f8 8b ff ff       	call   c0109b46 <sem_init>

    static_assert(DISK0_BUFSIZE % DISK0_BLKSIZE == 0);
    if ((disk0_buffer = kmalloc(DISK0_BUFSIZE)) == NULL) {
c0110f4e:	c7 04 24 00 40 00 00 	movl   $0x4000,(%esp)
c0110f55:	e8 85 3d ff ff       	call   c0104cdf <kmalloc>
c0110f5a:	a3 dc 1f 15 c0       	mov    %eax,0xc0151fdc
c0110f5f:	a1 dc 1f 15 c0       	mov    0xc0151fdc,%eax
c0110f64:	85 c0                	test   %eax,%eax
c0110f66:	75 1c                	jne    c0110f84 <disk0_device_init+0xc4>
        panic("disk0 alloc buffer failed.\n");
c0110f68:	c7 44 24 08 13 90 11 	movl   $0xc0119013,0x8(%esp)
c0110f6f:	c0 
c0110f70:	c7 44 24 04 7f 00 00 	movl   $0x7f,0x4(%esp)
c0110f77:	00 
c0110f78:	c7 04 24 08 8f 11 c0 	movl   $0xc0118f08,(%esp)
c0110f7f:	e8 44 ff fe ff       	call   c0100ec8 <__panic>
    }
}
c0110f84:	c9                   	leave  
c0110f85:	c3                   	ret    

c0110f86 <dev_init_disk0>:

void
dev_init_disk0(void) {
c0110f86:	55                   	push   %ebp
c0110f87:	89 e5                	mov    %esp,%ebp
c0110f89:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = dev_create_inode()) == NULL) {
c0110f8c:	e8 d1 fb ff ff       	call   c0110b62 <dev_create_inode>
c0110f91:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110f94:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110f98:	75 1c                	jne    c0110fb6 <dev_init_disk0+0x30>
        panic("disk0: dev_create_node.\n");
c0110f9a:	c7 44 24 08 2f 90 11 	movl   $0xc011902f,0x8(%esp)
c0110fa1:	c0 
c0110fa2:	c7 44 24 04 87 00 00 	movl   $0x87,0x4(%esp)
c0110fa9:	00 
c0110faa:	c7 04 24 08 8f 11 c0 	movl   $0xc0118f08,(%esp)
c0110fb1:	e8 12 ff fe ff       	call   c0100ec8 <__panic>
    }
    disk0_device_init(vop_info(node, device));
c0110fb6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110fb9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0110fbc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0110fc0:	74 0d                	je     c0110fcf <dev_init_disk0+0x49>
c0110fc2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110fc5:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110fc8:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0110fcd:	74 24                	je     c0110ff3 <dev_init_disk0+0x6d>
c0110fcf:	c7 44 24 0c 48 90 11 	movl   $0xc0119048,0xc(%esp)
c0110fd6:	c0 
c0110fd7:	c7 44 24 08 ae 8f 11 	movl   $0xc0118fae,0x8(%esp)
c0110fde:	c0 
c0110fdf:	c7 44 24 04 89 00 00 	movl   $0x89,0x4(%esp)
c0110fe6:	00 
c0110fe7:	c7 04 24 08 8f 11 c0 	movl   $0xc0118f08,(%esp)
c0110fee:	e8 d5 fe fe ff       	call   c0100ec8 <__panic>
c0110ff3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110ff6:	89 04 24             	mov    %eax,(%esp)
c0110ff9:	e8 c2 fe ff ff       	call   c0110ec0 <disk0_device_init>

    int ret;
    if ((ret = vfs_add_dev("disk0", node, 1)) != 0) {
c0110ffe:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0111005:	00 
c0111006:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111009:	89 44 24 04          	mov    %eax,0x4(%esp)
c011100d:	c7 04 24 7b 90 11 c0 	movl   $0xc011907b,(%esp)
c0111014:	e8 cb e9 ff ff       	call   c010f9e4 <vfs_add_dev>
c0111019:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011101c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0111020:	74 23                	je     c0111045 <dev_init_disk0+0xbf>
        panic("disk0: vfs_add_dev: %e.\n", ret);
c0111022:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111025:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0111029:	c7 44 24 08 81 90 11 	movl   $0xc0119081,0x8(%esp)
c0111030:	c0 
c0111031:	c7 44 24 04 8d 00 00 	movl   $0x8d,0x4(%esp)
c0111038:	00 
c0111039:	c7 04 24 08 8f 11 c0 	movl   $0xc0118f08,(%esp)
c0111040:	e8 83 fe fe ff       	call   c0100ec8 <__panic>
    }
}
c0111045:	c9                   	leave  
c0111046:	c3                   	ret    

c0111047 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0111047:	55                   	push   %ebp
c0111048:	89 e5                	mov    %esp,%ebp
c011104a:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c011104d:	9c                   	pushf  
c011104e:	58                   	pop    %eax
c011104f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0111052:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0111055:	25 00 02 00 00       	and    $0x200,%eax
c011105a:	85 c0                	test   %eax,%eax
c011105c:	74 0c                	je     c011106a <__intr_save+0x23>
        intr_disable();
c011105e:	e8 c7 10 ff ff       	call   c010212a <intr_disable>
        return 1;
c0111063:	b8 01 00 00 00       	mov    $0x1,%eax
c0111068:	eb 05                	jmp    c011106f <__intr_save+0x28>
    }
    return 0;
c011106a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011106f:	c9                   	leave  
c0111070:	c3                   	ret    

c0111071 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0111071:	55                   	push   %ebp
c0111072:	89 e5                	mov    %esp,%ebp
c0111074:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0111077:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c011107b:	74 05                	je     c0111082 <__intr_restore+0x11>
        intr_enable();
c011107d:	e8 a2 10 ff ff       	call   c0102124 <intr_enable>
    }
}
c0111082:	c9                   	leave  
c0111083:	c3                   	ret    

c0111084 <dev_stdin_write>:
static char stdin_buffer[STDIN_BUFSIZE];
static off_t p_rpos, p_wpos;
static wait_queue_t __wait_queue, *wait_queue = &__wait_queue;

void
dev_stdin_write(char c) {
c0111084:	55                   	push   %ebp
c0111085:	89 e5                	mov    %esp,%ebp
c0111087:	83 ec 28             	sub    $0x28,%esp
c011108a:	8b 45 08             	mov    0x8(%ebp),%eax
c011108d:	88 45 e4             	mov    %al,-0x1c(%ebp)
    bool intr_flag;
    if (c != '\0') {
c0111090:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
c0111094:	0f 84 80 00 00 00    	je     c011111a <dev_stdin_write+0x96>
        local_intr_save(intr_flag);
c011109a:	e8 a8 ff ff ff       	call   c0111047 <__intr_save>
c011109f:	89 45 f4             	mov    %eax,-0xc(%ebp)
        {
            stdin_buffer[p_wpos % STDIN_BUFSIZE] = c;
c01110a2:	a1 04 30 15 c0       	mov    0xc0153004,%eax
c01110a7:	99                   	cltd   
c01110a8:	c1 ea 14             	shr    $0x14,%edx
c01110ab:	01 d0                	add    %edx,%eax
c01110ad:	25 ff 0f 00 00       	and    $0xfff,%eax
c01110b2:	29 d0                	sub    %edx,%eax
c01110b4:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
c01110b8:	88 90 00 20 15 c0    	mov    %dl,-0x3feae000(%eax)
            if (p_wpos - p_rpos < STDIN_BUFSIZE) {
c01110be:	8b 15 04 30 15 c0    	mov    0xc0153004,%edx
c01110c4:	a1 00 30 15 c0       	mov    0xc0153000,%eax
c01110c9:	29 c2                	sub    %eax,%edx
c01110cb:	89 d0                	mov    %edx,%eax
c01110cd:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c01110d2:	7f 0d                	jg     c01110e1 <dev_stdin_write+0x5d>
                p_wpos ++;
c01110d4:	a1 04 30 15 c0       	mov    0xc0153004,%eax
c01110d9:	83 c0 01             	add    $0x1,%eax
c01110dc:	a3 04 30 15 c0       	mov    %eax,0xc0153004
            }
            if (!wait_queue_empty(wait_queue)) {
c01110e1:	a1 c0 ee 14 c0       	mov    0xc014eec0,%eax
c01110e6:	89 04 24             	mov    %eax,(%esp)
c01110e9:	e8 52 8f ff ff       	call   c010a040 <wait_queue_empty>
c01110ee:	85 c0                	test   %eax,%eax
c01110f0:	75 1d                	jne    c011110f <dev_stdin_write+0x8b>
                wakeup_queue(wait_queue, WT_KBD, 1);
c01110f2:	a1 c0 ee 14 c0       	mov    0xc014eec0,%eax
c01110f7:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c01110fe:	00 
c01110ff:	c7 44 24 04 04 00 00 	movl   $0x80000004,0x4(%esp)
c0111106:	80 
c0111107:	89 04 24             	mov    %eax,(%esp)
c011110a:	e8 e8 8f ff ff       	call   c010a0f7 <wakeup_queue>
            }
        }
        local_intr_restore(intr_flag);
c011110f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111112:	89 04 24             	mov    %eax,(%esp)
c0111115:	e8 57 ff ff ff       	call   c0111071 <__intr_restore>
    }
}
c011111a:	c9                   	leave  
c011111b:	c3                   	ret    

c011111c <dev_stdin_read>:

static int
dev_stdin_read(char *buf, size_t len) {
c011111c:	55                   	push   %ebp
c011111d:	89 e5                	mov    %esp,%ebp
c011111f:	83 ec 38             	sub    $0x38,%esp
    int ret = 0;
c0111122:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c0111129:	e8 19 ff ff ff       	call   c0111047 <__intr_save>
c011112e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        for (; ret < len; ret ++, p_rpos ++) {
c0111131:	e9 bb 00 00 00       	jmp    c01111f1 <dev_stdin_read+0xd5>
        try_again:
            if (p_rpos < p_wpos) {
c0111136:	8b 15 00 30 15 c0    	mov    0xc0153000,%edx
c011113c:	a1 04 30 15 c0       	mov    0xc0153004,%eax
c0111141:	39 c2                	cmp    %eax,%edx
c0111143:	7d 3d                	jge    c0111182 <dev_stdin_read+0x66>
                *buf ++ = stdin_buffer[p_rpos % STDIN_BUFSIZE];
c0111145:	8b 45 08             	mov    0x8(%ebp),%eax
c0111148:	8d 50 01             	lea    0x1(%eax),%edx
c011114b:	89 55 08             	mov    %edx,0x8(%ebp)
c011114e:	8b 15 00 30 15 c0    	mov    0xc0153000,%edx
c0111154:	89 d1                	mov    %edx,%ecx
c0111156:	c1 f9 1f             	sar    $0x1f,%ecx
c0111159:	c1 e9 14             	shr    $0x14,%ecx
c011115c:	01 ca                	add    %ecx,%edx
c011115e:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
c0111164:	29 ca                	sub    %ecx,%edx
c0111166:	0f b6 92 00 20 15 c0 	movzbl -0x3feae000(%edx),%edx
c011116d:	88 10                	mov    %dl,(%eax)
dev_stdin_read(char *buf, size_t len) {
    int ret = 0;
    bool intr_flag;
    local_intr_save(intr_flag);
    {
        for (; ret < len; ret ++, p_rpos ++) {
c011116f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0111173:	a1 00 30 15 c0       	mov    0xc0153000,%eax
c0111178:	83 c0 01             	add    $0x1,%eax
c011117b:	a3 00 30 15 c0       	mov    %eax,0xc0153000
c0111180:	eb 6f                	jmp    c01111f1 <dev_stdin_read+0xd5>
        try_again:
            if (p_rpos < p_wpos) {
                *buf ++ = stdin_buffer[p_rpos % STDIN_BUFSIZE];
            }
            else {
                wait_t __wait, *wait = &__wait;
c0111182:	8d 45 d8             	lea    -0x28(%ebp),%eax
c0111185:	89 45 ec             	mov    %eax,-0x14(%ebp)
                wait_current_set(wait_queue, wait, WT_KBD);
c0111188:	a1 c0 ee 14 c0       	mov    0xc014eec0,%eax
c011118d:	c7 44 24 08 04 00 00 	movl   $0x80000004,0x8(%esp)
c0111194:	80 
c0111195:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0111198:	89 54 24 04          	mov    %edx,0x4(%esp)
c011119c:	89 04 24             	mov    %eax,(%esp)
c011119f:	e8 e8 8f ff ff       	call   c010a18c <wait_current_set>
                local_intr_restore(intr_flag);
c01111a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01111a7:	89 04 24             	mov    %eax,(%esp)
c01111aa:	e8 c2 fe ff ff       	call   c0111071 <__intr_restore>

                schedule();
c01111af:	e8 c6 d4 ff ff       	call   c010e67a <schedule>

                local_intr_save(intr_flag);
c01111b4:	e8 8e fe ff ff       	call   c0111047 <__intr_save>
c01111b9:	89 45 f0             	mov    %eax,-0x10(%ebp)
                wait_current_del(wait_queue, wait);
c01111bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01111bf:	89 04 24             	mov    %eax,(%esp)
c01111c2:	e8 96 8e ff ff       	call   c010a05d <wait_in_queue>
c01111c7:	85 c0                	test   %eax,%eax
c01111c9:	74 14                	je     c01111df <dev_stdin_read+0xc3>
c01111cb:	a1 c0 ee 14 c0       	mov    0xc014eec0,%eax
c01111d0:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01111d3:	89 54 24 04          	mov    %edx,0x4(%esp)
c01111d7:	89 04 24             	mov    %eax,(%esp)
c01111da:	e8 79 8c ff ff       	call   c0109e58 <wait_queue_del>
                if (wait->wakeup_flags == WT_KBD) {
c01111df:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01111e2:	8b 40 04             	mov    0x4(%eax),%eax
c01111e5:	3d 04 00 00 80       	cmp    $0x80000004,%eax
c01111ea:	75 11                	jne    c01111fd <dev_stdin_read+0xe1>
c01111ec:	e9 45 ff ff ff       	jmp    c0111136 <dev_stdin_read+0x1a>
dev_stdin_read(char *buf, size_t len) {
    int ret = 0;
    bool intr_flag;
    local_intr_save(intr_flag);
    {
        for (; ret < len; ret ++, p_rpos ++) {
c01111f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01111f4:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01111f7:	0f 82 39 ff ff ff    	jb     c0111136 <dev_stdin_read+0x1a>
                }
                break;
            }
        }
    }
    local_intr_restore(intr_flag);
c01111fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111200:	89 04 24             	mov    %eax,(%esp)
c0111203:	e8 69 fe ff ff       	call   c0111071 <__intr_restore>
    return ret;
c0111208:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011120b:	c9                   	leave  
c011120c:	c3                   	ret    

c011120d <stdin_open>:

static int
stdin_open(struct device *dev, uint32_t open_flags) {
c011120d:	55                   	push   %ebp
c011120e:	89 e5                	mov    %esp,%ebp
    if (open_flags != O_RDONLY) {
c0111210:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0111214:	74 07                	je     c011121d <stdin_open+0x10>
        return -E_INVAL;
c0111216:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c011121b:	eb 05                	jmp    c0111222 <stdin_open+0x15>
    }
    return 0;
c011121d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0111222:	5d                   	pop    %ebp
c0111223:	c3                   	ret    

c0111224 <stdin_close>:

static int
stdin_close(struct device *dev) {
c0111224:	55                   	push   %ebp
c0111225:	89 e5                	mov    %esp,%ebp
    return 0;
c0111227:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011122c:	5d                   	pop    %ebp
c011122d:	c3                   	ret    

c011122e <stdin_io>:

static int
stdin_io(struct device *dev, struct iobuf *iob, bool write) {
c011122e:	55                   	push   %ebp
c011122f:	89 e5                	mov    %esp,%ebp
c0111231:	83 ec 28             	sub    $0x28,%esp
    if (!write) {
c0111234:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0111238:	75 36                	jne    c0111270 <stdin_io+0x42>
        int ret;
        if ((ret = dev_stdin_read(iob->io_base, iob->io_resid)) > 0) {
c011123a:	8b 45 0c             	mov    0xc(%ebp),%eax
c011123d:	8b 50 0c             	mov    0xc(%eax),%edx
c0111240:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111243:	8b 00                	mov    (%eax),%eax
c0111245:	89 54 24 04          	mov    %edx,0x4(%esp)
c0111249:	89 04 24             	mov    %eax,(%esp)
c011124c:	e8 cb fe ff ff       	call   c011111c <dev_stdin_read>
c0111251:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111254:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111258:	7e 11                	jle    c011126b <stdin_io+0x3d>
            iob->io_resid -= ret;
c011125a:	8b 45 0c             	mov    0xc(%ebp),%eax
c011125d:	8b 50 0c             	mov    0xc(%eax),%edx
c0111260:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111263:	29 c2                	sub    %eax,%edx
c0111265:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111268:	89 50 0c             	mov    %edx,0xc(%eax)
        }
        return ret;
c011126b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011126e:	eb 05                	jmp    c0111275 <stdin_io+0x47>
    }
    return -E_INVAL;
c0111270:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c0111275:	c9                   	leave  
c0111276:	c3                   	ret    

c0111277 <stdin_ioctl>:

static int
stdin_ioctl(struct device *dev, int op, void *data) {
c0111277:	55                   	push   %ebp
c0111278:	89 e5                	mov    %esp,%ebp
    return -E_INVAL;
c011127a:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c011127f:	5d                   	pop    %ebp
c0111280:	c3                   	ret    

c0111281 <stdin_device_init>:

static void
stdin_device_init(struct device *dev) {
c0111281:	55                   	push   %ebp
c0111282:	89 e5                	mov    %esp,%ebp
c0111284:	83 ec 18             	sub    $0x18,%esp
    dev->d_blocks = 0;
c0111287:	8b 45 08             	mov    0x8(%ebp),%eax
c011128a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    dev->d_blocksize = 1;
c0111290:	8b 45 08             	mov    0x8(%ebp),%eax
c0111293:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    dev->d_open = stdin_open;
c011129a:	8b 45 08             	mov    0x8(%ebp),%eax
c011129d:	c7 40 08 0d 12 11 c0 	movl   $0xc011120d,0x8(%eax)
    dev->d_close = stdin_close;
c01112a4:	8b 45 08             	mov    0x8(%ebp),%eax
c01112a7:	c7 40 0c 24 12 11 c0 	movl   $0xc0111224,0xc(%eax)
    dev->d_io = stdin_io;
c01112ae:	8b 45 08             	mov    0x8(%ebp),%eax
c01112b1:	c7 40 10 2e 12 11 c0 	movl   $0xc011122e,0x10(%eax)
    dev->d_ioctl = stdin_ioctl;
c01112b8:	8b 45 08             	mov    0x8(%ebp),%eax
c01112bb:	c7 40 14 77 12 11 c0 	movl   $0xc0111277,0x14(%eax)

    p_rpos = p_wpos = 0;
c01112c2:	c7 05 04 30 15 c0 00 	movl   $0x0,0xc0153004
c01112c9:	00 00 00 
c01112cc:	a1 04 30 15 c0       	mov    0xc0153004,%eax
c01112d1:	a3 00 30 15 c0       	mov    %eax,0xc0153000
    wait_queue_init(wait_queue);
c01112d6:	a1 c0 ee 14 c0       	mov    0xc014eec0,%eax
c01112db:	89 04 24             	mov    %eax,(%esp)
c01112de:	e8 b2 8a ff ff       	call   c0109d95 <wait_queue_init>
}
c01112e3:	c9                   	leave  
c01112e4:	c3                   	ret    

c01112e5 <dev_init_stdin>:

void
dev_init_stdin(void) {
c01112e5:	55                   	push   %ebp
c01112e6:	89 e5                	mov    %esp,%ebp
c01112e8:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = dev_create_inode()) == NULL) {
c01112eb:	e8 72 f8 ff ff       	call   c0110b62 <dev_create_inode>
c01112f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01112f3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01112f7:	75 1c                	jne    c0111315 <dev_init_stdin+0x30>
        panic("stdin: dev_create_node.\n");
c01112f9:	c7 44 24 08 9c 90 11 	movl   $0xc011909c,0x8(%esp)
c0111300:	c0 
c0111301:	c7 44 24 04 75 00 00 	movl   $0x75,0x4(%esp)
c0111308:	00 
c0111309:	c7 04 24 b5 90 11 c0 	movl   $0xc01190b5,(%esp)
c0111310:	e8 b3 fb fe ff       	call   c0100ec8 <__panic>
    }
    stdin_device_init(vop_info(node, device));
c0111315:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111318:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011131b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011131f:	74 0d                	je     c011132e <dev_init_stdin+0x49>
c0111321:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111324:	8b 40 2c             	mov    0x2c(%eax),%eax
c0111327:	3d 34 12 00 00       	cmp    $0x1234,%eax
c011132c:	74 24                	je     c0111352 <dev_init_stdin+0x6d>
c011132e:	c7 44 24 0c d0 90 11 	movl   $0xc01190d0,0xc(%esp)
c0111335:	c0 
c0111336:	c7 44 24 08 03 91 11 	movl   $0xc0119103,0x8(%esp)
c011133d:	c0 
c011133e:	c7 44 24 04 77 00 00 	movl   $0x77,0x4(%esp)
c0111345:	00 
c0111346:	c7 04 24 b5 90 11 c0 	movl   $0xc01190b5,(%esp)
c011134d:	e8 76 fb fe ff       	call   c0100ec8 <__panic>
c0111352:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111355:	89 04 24             	mov    %eax,(%esp)
c0111358:	e8 24 ff ff ff       	call   c0111281 <stdin_device_init>

    int ret;
    if ((ret = vfs_add_dev("stdin", node, 0)) != 0) {
c011135d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0111364:	00 
c0111365:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111368:	89 44 24 04          	mov    %eax,0x4(%esp)
c011136c:	c7 04 24 18 91 11 c0 	movl   $0xc0119118,(%esp)
c0111373:	e8 6c e6 ff ff       	call   c010f9e4 <vfs_add_dev>
c0111378:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011137b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011137f:	74 23                	je     c01113a4 <dev_init_stdin+0xbf>
        panic("stdin: vfs_add_dev: %e.\n", ret);
c0111381:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111384:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0111388:	c7 44 24 08 1e 91 11 	movl   $0xc011911e,0x8(%esp)
c011138f:	c0 
c0111390:	c7 44 24 04 7b 00 00 	movl   $0x7b,0x4(%esp)
c0111397:	00 
c0111398:	c7 04 24 b5 90 11 c0 	movl   $0xc01190b5,(%esp)
c011139f:	e8 24 fb fe ff       	call   c0100ec8 <__panic>
    }
}
c01113a4:	c9                   	leave  
c01113a5:	c3                   	ret    

c01113a6 <stdout_open>:
#include <unistd.h>
#include <error.h>
#include <assert.h>

static int
stdout_open(struct device *dev, uint32_t open_flags) {
c01113a6:	55                   	push   %ebp
c01113a7:	89 e5                	mov    %esp,%ebp
    if (open_flags != O_WRONLY) {
c01113a9:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c01113ad:	74 07                	je     c01113b6 <stdout_open+0x10>
        return -E_INVAL;
c01113af:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01113b4:	eb 05                	jmp    c01113bb <stdout_open+0x15>
    }
    return 0;
c01113b6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01113bb:	5d                   	pop    %ebp
c01113bc:	c3                   	ret    

c01113bd <stdout_close>:

static int
stdout_close(struct device *dev) {
c01113bd:	55                   	push   %ebp
c01113be:	89 e5                	mov    %esp,%ebp
    return 0;
c01113c0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01113c5:	5d                   	pop    %ebp
c01113c6:	c3                   	ret    

c01113c7 <stdout_io>:

static int
stdout_io(struct device *dev, struct iobuf *iob, bool write) {
c01113c7:	55                   	push   %ebp
c01113c8:	89 e5                	mov    %esp,%ebp
c01113ca:	83 ec 28             	sub    $0x28,%esp
    if (write) {
c01113cd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01113d1:	74 41                	je     c0111414 <stdout_io+0x4d>
        char *data = iob->io_base;
c01113d3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01113d6:	8b 00                	mov    (%eax),%eax
c01113d8:	89 45 f4             	mov    %eax,-0xc(%ebp)
        for (; iob->io_resid != 0; iob->io_resid --) {
c01113db:	eb 26                	jmp    c0111403 <stdout_io+0x3c>
            cputchar(*data ++);
c01113dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01113e0:	8d 50 01             	lea    0x1(%eax),%edx
c01113e3:	89 55 f4             	mov    %edx,-0xc(%ebp)
c01113e6:	0f b6 00             	movzbl (%eax),%eax
c01113e9:	0f be c0             	movsbl %al,%eax
c01113ec:	89 04 24             	mov    %eax,(%esp)
c01113ef:	e8 97 ef fe ff       	call   c010038b <cputchar>

static int
stdout_io(struct device *dev, struct iobuf *iob, bool write) {
    if (write) {
        char *data = iob->io_base;
        for (; iob->io_resid != 0; iob->io_resid --) {
c01113f4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01113f7:	8b 40 0c             	mov    0xc(%eax),%eax
c01113fa:	8d 50 ff             	lea    -0x1(%eax),%edx
c01113fd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111400:	89 50 0c             	mov    %edx,0xc(%eax)
c0111403:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111406:	8b 40 0c             	mov    0xc(%eax),%eax
c0111409:	85 c0                	test   %eax,%eax
c011140b:	75 d0                	jne    c01113dd <stdout_io+0x16>
            cputchar(*data ++);
        }
        return 0;
c011140d:	b8 00 00 00 00       	mov    $0x0,%eax
c0111412:	eb 05                	jmp    c0111419 <stdout_io+0x52>
    }
    return -E_INVAL;
c0111414:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c0111419:	c9                   	leave  
c011141a:	c3                   	ret    

c011141b <stdout_ioctl>:

static int
stdout_ioctl(struct device *dev, int op, void *data) {
c011141b:	55                   	push   %ebp
c011141c:	89 e5                	mov    %esp,%ebp
    return -E_INVAL;
c011141e:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c0111423:	5d                   	pop    %ebp
c0111424:	c3                   	ret    

c0111425 <stdout_device_init>:

static void
stdout_device_init(struct device *dev) {
c0111425:	55                   	push   %ebp
c0111426:	89 e5                	mov    %esp,%ebp
    dev->d_blocks = 0;
c0111428:	8b 45 08             	mov    0x8(%ebp),%eax
c011142b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    dev->d_blocksize = 1;
c0111431:	8b 45 08             	mov    0x8(%ebp),%eax
c0111434:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    dev->d_open = stdout_open;
c011143b:	8b 45 08             	mov    0x8(%ebp),%eax
c011143e:	c7 40 08 a6 13 11 c0 	movl   $0xc01113a6,0x8(%eax)
    dev->d_close = stdout_close;
c0111445:	8b 45 08             	mov    0x8(%ebp),%eax
c0111448:	c7 40 0c bd 13 11 c0 	movl   $0xc01113bd,0xc(%eax)
    dev->d_io = stdout_io;
c011144f:	8b 45 08             	mov    0x8(%ebp),%eax
c0111452:	c7 40 10 c7 13 11 c0 	movl   $0xc01113c7,0x10(%eax)
    dev->d_ioctl = stdout_ioctl;
c0111459:	8b 45 08             	mov    0x8(%ebp),%eax
c011145c:	c7 40 14 1b 14 11 c0 	movl   $0xc011141b,0x14(%eax)
}
c0111463:	5d                   	pop    %ebp
c0111464:	c3                   	ret    

c0111465 <dev_init_stdout>:

void
dev_init_stdout(void) {
c0111465:	55                   	push   %ebp
c0111466:	89 e5                	mov    %esp,%ebp
c0111468:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = dev_create_inode()) == NULL) {
c011146b:	e8 f2 f6 ff ff       	call   c0110b62 <dev_create_inode>
c0111470:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111473:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111477:	75 1c                	jne    c0111495 <dev_init_stdout+0x30>
        panic("stdout: dev_create_node.\n");
c0111479:	c7 44 24 08 38 91 11 	movl   $0xc0119138,0x8(%esp)
c0111480:	c0 
c0111481:	c7 44 24 04 37 00 00 	movl   $0x37,0x4(%esp)
c0111488:	00 
c0111489:	c7 04 24 52 91 11 c0 	movl   $0xc0119152,(%esp)
c0111490:	e8 33 fa fe ff       	call   c0100ec8 <__panic>
    }
    stdout_device_init(vop_info(node, device));
c0111495:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111498:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011149b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011149f:	74 0d                	je     c01114ae <dev_init_stdout+0x49>
c01114a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01114a4:	8b 40 2c             	mov    0x2c(%eax),%eax
c01114a7:	3d 34 12 00 00       	cmp    $0x1234,%eax
c01114ac:	74 24                	je     c01114d2 <dev_init_stdout+0x6d>
c01114ae:	c7 44 24 0c 6c 91 11 	movl   $0xc011916c,0xc(%esp)
c01114b5:	c0 
c01114b6:	c7 44 24 08 9f 91 11 	movl   $0xc011919f,0x8(%esp)
c01114bd:	c0 
c01114be:	c7 44 24 04 39 00 00 	movl   $0x39,0x4(%esp)
c01114c5:	00 
c01114c6:	c7 04 24 52 91 11 c0 	movl   $0xc0119152,(%esp)
c01114cd:	e8 f6 f9 fe ff       	call   c0100ec8 <__panic>
c01114d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01114d5:	89 04 24             	mov    %eax,(%esp)
c01114d8:	e8 48 ff ff ff       	call   c0111425 <stdout_device_init>

    int ret;
    if ((ret = vfs_add_dev("stdout", node, 0)) != 0) {
c01114dd:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01114e4:	00 
c01114e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01114e8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01114ec:	c7 04 24 b4 91 11 c0 	movl   $0xc01191b4,(%esp)
c01114f3:	e8 ec e4 ff ff       	call   c010f9e4 <vfs_add_dev>
c01114f8:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01114fb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01114ff:	74 23                	je     c0111524 <dev_init_stdout+0xbf>
        panic("stdout: vfs_add_dev: %e.\n", ret);
c0111501:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111504:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0111508:	c7 44 24 08 bb 91 11 	movl   $0xc01191bb,0x8(%esp)
c011150f:	c0 
c0111510:	c7 44 24 04 3d 00 00 	movl   $0x3d,0x4(%esp)
c0111517:	00 
c0111518:	c7 04 24 52 91 11 c0 	movl   $0xc0119152,(%esp)
c011151f:	e8 a4 f9 fe ff       	call   c0100ec8 <__panic>
    }
}
c0111524:	c9                   	leave  
c0111525:	c3                   	ret    

c0111526 <bitmap_create>:
    WORD_TYPE *map;
};

// bitmap_create - allocate a new bitmap object.
struct bitmap *
bitmap_create(uint32_t nbits) {
c0111526:	55                   	push   %ebp
c0111527:	89 e5                	mov    %esp,%ebp
c0111529:	56                   	push   %esi
c011152a:	53                   	push   %ebx
c011152b:	83 ec 30             	sub    $0x30,%esp
    static_assert(WORD_BITS != 0);
    assert(nbits != 0 && nbits + WORD_BITS > nbits);
c011152e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0111532:	74 0b                	je     c011153f <bitmap_create+0x19>
c0111534:	8b 45 08             	mov    0x8(%ebp),%eax
c0111537:	83 c0 20             	add    $0x20,%eax
c011153a:	3b 45 08             	cmp    0x8(%ebp),%eax
c011153d:	77 24                	ja     c0111563 <bitmap_create+0x3d>
c011153f:	c7 44 24 0c d8 91 11 	movl   $0xc01191d8,0xc(%esp)
c0111546:	c0 
c0111547:	c7 44 24 08 00 92 11 	movl   $0xc0119200,0x8(%esp)
c011154e:	c0 
c011154f:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
c0111556:	00 
c0111557:	c7 04 24 15 92 11 c0 	movl   $0xc0119215,(%esp)
c011155e:	e8 65 f9 fe ff       	call   c0100ec8 <__panic>

    struct bitmap *bitmap;
    if ((bitmap = kmalloc(sizeof(struct bitmap))) == NULL) {
c0111563:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c011156a:	e8 70 37 ff ff       	call   c0104cdf <kmalloc>
c011156f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0111572:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111576:	75 0a                	jne    c0111582 <bitmap_create+0x5c>
        return NULL;
c0111578:	b8 00 00 00 00       	mov    $0x0,%eax
c011157d:	e9 43 01 00 00       	jmp    c01116c5 <bitmap_create+0x19f>
    }

    uint32_t nwords = ROUNDUP_DIV(nbits, WORD_BITS);
c0111582:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
c0111589:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011158c:	8b 55 08             	mov    0x8(%ebp),%edx
c011158f:	01 d0                	add    %edx,%eax
c0111591:	83 e8 01             	sub    $0x1,%eax
c0111594:	ba 00 00 00 00       	mov    $0x0,%edx
c0111599:	f7 75 ec             	divl   -0x14(%ebp)
c011159c:	89 45 e8             	mov    %eax,-0x18(%ebp)
    WORD_TYPE *map;
    if ((map = kmalloc(sizeof(WORD_TYPE) * nwords)) == NULL) {
c011159f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01115a2:	c1 e0 02             	shl    $0x2,%eax
c01115a5:	89 04 24             	mov    %eax,(%esp)
c01115a8:	e8 32 37 ff ff       	call   c0104cdf <kmalloc>
c01115ad:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01115b0:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01115b4:	75 15                	jne    c01115cb <bitmap_create+0xa5>
        kfree(bitmap);
c01115b6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01115b9:	89 04 24             	mov    %eax,(%esp)
c01115bc:	e8 39 37 ff ff       	call   c0104cfa <kfree>
        return NULL;
c01115c1:	b8 00 00 00 00       	mov    $0x0,%eax
c01115c6:	e9 fa 00 00 00       	jmp    c01116c5 <bitmap_create+0x19f>
    }

    bitmap->nbits = nbits, bitmap->nwords = nwords;
c01115cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01115ce:	8b 55 08             	mov    0x8(%ebp),%edx
c01115d1:	89 10                	mov    %edx,(%eax)
c01115d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01115d6:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01115d9:	89 50 04             	mov    %edx,0x4(%eax)
    bitmap->map = memset(map, 0xFF, sizeof(WORD_TYPE) * nwords);
c01115dc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01115df:	c1 e0 02             	shl    $0x2,%eax
c01115e2:	89 44 24 08          	mov    %eax,0x8(%esp)
c01115e6:	c7 44 24 04 ff ff ff 	movl   $0xffffffff,0x4(%esp)
c01115ed:	ff 
c01115ee:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01115f1:	89 04 24             	mov    %eax,(%esp)
c01115f4:	e8 4c 3f 00 00       	call   c0115545 <memset>
c01115f9:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01115fc:	89 42 08             	mov    %eax,0x8(%edx)

    /* mark any leftover bits at the end in use(0) */
    if (nbits != nwords * WORD_BITS) {
c01115ff:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111602:	c1 e0 05             	shl    $0x5,%eax
c0111605:	3b 45 08             	cmp    0x8(%ebp),%eax
c0111608:	0f 84 b4 00 00 00    	je     c01116c2 <bitmap_create+0x19c>
        uint32_t ix = nwords - 1, overbits = nbits - ix * WORD_BITS;
c011160e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111611:	83 e8 01             	sub    $0x1,%eax
c0111614:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0111617:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011161a:	c1 e0 05             	shl    $0x5,%eax
c011161d:	89 c2                	mov    %eax,%edx
c011161f:	8b 45 08             	mov    0x8(%ebp),%eax
c0111622:	29 d0                	sub    %edx,%eax
c0111624:	89 45 f4             	mov    %eax,-0xc(%ebp)

        assert(nbits / WORD_BITS == ix);
c0111627:	8b 45 08             	mov    0x8(%ebp),%eax
c011162a:	c1 e8 05             	shr    $0x5,%eax
c011162d:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0111630:	74 24                	je     c0111656 <bitmap_create+0x130>
c0111632:	c7 44 24 0c 2a 92 11 	movl   $0xc011922a,0xc(%esp)
c0111639:	c0 
c011163a:	c7 44 24 08 00 92 11 	movl   $0xc0119200,0x8(%esp)
c0111641:	c0 
c0111642:	c7 44 24 04 2a 00 00 	movl   $0x2a,0x4(%esp)
c0111649:	00 
c011164a:	c7 04 24 15 92 11 c0 	movl   $0xc0119215,(%esp)
c0111651:	e8 72 f8 fe ff       	call   c0100ec8 <__panic>
        assert(overbits > 0 && overbits < WORD_BITS);
c0111656:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011165a:	74 06                	je     c0111662 <bitmap_create+0x13c>
c011165c:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c0111660:	76 24                	jbe    c0111686 <bitmap_create+0x160>
c0111662:	c7 44 24 0c 44 92 11 	movl   $0xc0119244,0xc(%esp)
c0111669:	c0 
c011166a:	c7 44 24 08 00 92 11 	movl   $0xc0119200,0x8(%esp)
c0111671:	c0 
c0111672:	c7 44 24 04 2b 00 00 	movl   $0x2b,0x4(%esp)
c0111679:	00 
c011167a:	c7 04 24 15 92 11 c0 	movl   $0xc0119215,(%esp)
c0111681:	e8 42 f8 fe ff       	call   c0100ec8 <__panic>

        for (; overbits < WORD_BITS; overbits ++) {
c0111686:	eb 34                	jmp    c01116bc <bitmap_create+0x196>
            bitmap->map[ix] ^= (1 << overbits);
c0111688:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011168b:	8b 40 08             	mov    0x8(%eax),%eax
c011168e:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0111691:	c1 e2 02             	shl    $0x2,%edx
c0111694:	01 c2                	add    %eax,%edx
c0111696:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111699:	8b 40 08             	mov    0x8(%eax),%eax
c011169c:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c011169f:	c1 e1 02             	shl    $0x2,%ecx
c01116a2:	01 c8                	add    %ecx,%eax
c01116a4:	8b 18                	mov    (%eax),%ebx
c01116a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01116a9:	be 01 00 00 00       	mov    $0x1,%esi
c01116ae:	89 c1                	mov    %eax,%ecx
c01116b0:	d3 e6                	shl    %cl,%esi
c01116b2:	89 f0                	mov    %esi,%eax
c01116b4:	31 d8                	xor    %ebx,%eax
c01116b6:	89 02                	mov    %eax,(%edx)
        uint32_t ix = nwords - 1, overbits = nbits - ix * WORD_BITS;

        assert(nbits / WORD_BITS == ix);
        assert(overbits > 0 && overbits < WORD_BITS);

        for (; overbits < WORD_BITS; overbits ++) {
c01116b8:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01116bc:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c01116c0:	76 c6                	jbe    c0111688 <bitmap_create+0x162>
            bitmap->map[ix] ^= (1 << overbits);
        }
    }
    return bitmap;
c01116c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01116c5:	83 c4 30             	add    $0x30,%esp
c01116c8:	5b                   	pop    %ebx
c01116c9:	5e                   	pop    %esi
c01116ca:	5d                   	pop    %ebp
c01116cb:	c3                   	ret    

c01116cc <bitmap_alloc>:

// bitmap_alloc - locate a cleared bit, set it, and return its index.
int
bitmap_alloc(struct bitmap *bitmap, uint32_t *index_store) {
c01116cc:	55                   	push   %ebp
c01116cd:	89 e5                	mov    %esp,%ebp
c01116cf:	83 ec 38             	sub    $0x38,%esp
    WORD_TYPE *map = bitmap->map;
c01116d2:	8b 45 08             	mov    0x8(%ebp),%eax
c01116d5:	8b 40 08             	mov    0x8(%eax),%eax
c01116d8:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32_t ix, offset, nwords = bitmap->nwords;
c01116db:	8b 45 08             	mov    0x8(%ebp),%eax
c01116de:	8b 40 04             	mov    0x4(%eax),%eax
c01116e1:	89 45 e8             	mov    %eax,-0x18(%ebp)
    for (ix = 0; ix < nwords; ix ++) {
c01116e4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01116eb:	e9 bb 00 00 00       	jmp    c01117ab <bitmap_alloc+0xdf>
        if (map[ix] != 0) {
c01116f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01116f3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01116fa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01116fd:	01 d0                	add    %edx,%eax
c01116ff:	8b 00                	mov    (%eax),%eax
c0111701:	85 c0                	test   %eax,%eax
c0111703:	0f 84 9e 00 00 00    	je     c01117a7 <bitmap_alloc+0xdb>
            for (offset = 0; offset < WORD_BITS; offset ++) {
c0111709:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0111710:	eb 6b                	jmp    c011177d <bitmap_alloc+0xb1>
                WORD_TYPE mask = (1 << offset);
c0111712:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111715:	ba 01 00 00 00       	mov    $0x1,%edx
c011171a:	89 c1                	mov    %eax,%ecx
c011171c:	d3 e2                	shl    %cl,%edx
c011171e:	89 d0                	mov    %edx,%eax
c0111720:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                if (map[ix] & mask) {
c0111723:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111726:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c011172d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111730:	01 d0                	add    %edx,%eax
c0111732:	8b 00                	mov    (%eax),%eax
c0111734:	23 45 e4             	and    -0x1c(%ebp),%eax
c0111737:	85 c0                	test   %eax,%eax
c0111739:	74 3e                	je     c0111779 <bitmap_alloc+0xad>
                    map[ix] ^= mask;
c011173b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011173e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0111745:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111748:	01 c2                	add    %eax,%edx
c011174a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011174d:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
c0111754:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111757:	01 c8                	add    %ecx,%eax
c0111759:	8b 00                	mov    (%eax),%eax
c011175b:	33 45 e4             	xor    -0x1c(%ebp),%eax
c011175e:	89 02                	mov    %eax,(%edx)
                    *index_store = ix * WORD_BITS + offset;
c0111760:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111763:	c1 e0 05             	shl    $0x5,%eax
c0111766:	89 c2                	mov    %eax,%edx
c0111768:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011176b:	01 c2                	add    %eax,%edx
c011176d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111770:	89 10                	mov    %edx,(%eax)
                    return 0;
c0111772:	b8 00 00 00 00       	mov    $0x0,%eax
c0111777:	eb 43                	jmp    c01117bc <bitmap_alloc+0xf0>
bitmap_alloc(struct bitmap *bitmap, uint32_t *index_store) {
    WORD_TYPE *map = bitmap->map;
    uint32_t ix, offset, nwords = bitmap->nwords;
    for (ix = 0; ix < nwords; ix ++) {
        if (map[ix] != 0) {
            for (offset = 0; offset < WORD_BITS; offset ++) {
c0111779:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c011177d:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c0111781:	76 8f                	jbe    c0111712 <bitmap_alloc+0x46>
                    map[ix] ^= mask;
                    *index_store = ix * WORD_BITS + offset;
                    return 0;
                }
            }
            assert(0);
c0111783:	c7 44 24 0c 69 92 11 	movl   $0xc0119269,0xc(%esp)
c011178a:	c0 
c011178b:	c7 44 24 08 00 92 11 	movl   $0xc0119200,0x8(%esp)
c0111792:	c0 
c0111793:	c7 44 24 04 43 00 00 	movl   $0x43,0x4(%esp)
c011179a:	00 
c011179b:	c7 04 24 15 92 11 c0 	movl   $0xc0119215,(%esp)
c01117a2:	e8 21 f7 fe ff       	call   c0100ec8 <__panic>
// bitmap_alloc - locate a cleared bit, set it, and return its index.
int
bitmap_alloc(struct bitmap *bitmap, uint32_t *index_store) {
    WORD_TYPE *map = bitmap->map;
    uint32_t ix, offset, nwords = bitmap->nwords;
    for (ix = 0; ix < nwords; ix ++) {
c01117a7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01117ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01117ae:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c01117b1:	0f 82 39 ff ff ff    	jb     c01116f0 <bitmap_alloc+0x24>
                }
            }
            assert(0);
        }
    }
    return -E_NO_MEM;
c01117b7:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c01117bc:	c9                   	leave  
c01117bd:	c3                   	ret    

c01117be <bitmap_translate>:

// bitmap_translate - according index, get the related word and mask
static void
bitmap_translate(struct bitmap *bitmap, uint32_t index, WORD_TYPE **word, WORD_TYPE *mask) {
c01117be:	55                   	push   %ebp
c01117bf:	89 e5                	mov    %esp,%ebp
c01117c1:	83 ec 28             	sub    $0x28,%esp
    assert(index < bitmap->nbits);
c01117c4:	8b 45 08             	mov    0x8(%ebp),%eax
c01117c7:	8b 00                	mov    (%eax),%eax
c01117c9:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01117cc:	77 24                	ja     c01117f2 <bitmap_translate+0x34>
c01117ce:	c7 44 24 0c 6b 92 11 	movl   $0xc011926b,0xc(%esp)
c01117d5:	c0 
c01117d6:	c7 44 24 08 00 92 11 	movl   $0xc0119200,0x8(%esp)
c01117dd:	c0 
c01117de:	c7 44 24 04 4c 00 00 	movl   $0x4c,0x4(%esp)
c01117e5:	00 
c01117e6:	c7 04 24 15 92 11 c0 	movl   $0xc0119215,(%esp)
c01117ed:	e8 d6 f6 fe ff       	call   c0100ec8 <__panic>
    uint32_t ix = index / WORD_BITS, offset = index % WORD_BITS;
c01117f2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01117f5:	c1 e8 05             	shr    $0x5,%eax
c01117f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01117fb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01117fe:	83 e0 1f             	and    $0x1f,%eax
c0111801:	89 45 f0             	mov    %eax,-0x10(%ebp)
    *word = bitmap->map + ix;
c0111804:	8b 45 08             	mov    0x8(%ebp),%eax
c0111807:	8b 40 08             	mov    0x8(%eax),%eax
c011180a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c011180d:	c1 e2 02             	shl    $0x2,%edx
c0111810:	01 c2                	add    %eax,%edx
c0111812:	8b 45 10             	mov    0x10(%ebp),%eax
c0111815:	89 10                	mov    %edx,(%eax)
    *mask = (1 << offset);
c0111817:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011181a:	ba 01 00 00 00       	mov    $0x1,%edx
c011181f:	89 c1                	mov    %eax,%ecx
c0111821:	d3 e2                	shl    %cl,%edx
c0111823:	89 d0                	mov    %edx,%eax
c0111825:	89 c2                	mov    %eax,%edx
c0111827:	8b 45 14             	mov    0x14(%ebp),%eax
c011182a:	89 10                	mov    %edx,(%eax)
}
c011182c:	c9                   	leave  
c011182d:	c3                   	ret    

c011182e <bitmap_test>:

// bitmap_test - according index, get the related value (0 OR 1) in the bitmap
bool
bitmap_test(struct bitmap *bitmap, uint32_t index) {
c011182e:	55                   	push   %ebp
c011182f:	89 e5                	mov    %esp,%ebp
c0111831:	83 ec 28             	sub    $0x28,%esp
    WORD_TYPE *word, mask;
    bitmap_translate(bitmap, index, &word, &mask);
c0111834:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0111837:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011183b:	8d 45 f4             	lea    -0xc(%ebp),%eax
c011183e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0111842:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111845:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111849:	8b 45 08             	mov    0x8(%ebp),%eax
c011184c:	89 04 24             	mov    %eax,(%esp)
c011184f:	e8 6a ff ff ff       	call   c01117be <bitmap_translate>
    return (*word & mask);
c0111854:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111857:	8b 10                	mov    (%eax),%edx
c0111859:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011185c:	21 d0                	and    %edx,%eax
}
c011185e:	c9                   	leave  
c011185f:	c3                   	ret    

c0111860 <bitmap_free>:

// bitmap_free - according index, set related bit to 1
void
bitmap_free(struct bitmap *bitmap, uint32_t index) {
c0111860:	55                   	push   %ebp
c0111861:	89 e5                	mov    %esp,%ebp
c0111863:	83 ec 28             	sub    $0x28,%esp
    WORD_TYPE *word, mask;
    bitmap_translate(bitmap, index, &word, &mask);
c0111866:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0111869:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011186d:	8d 45 f4             	lea    -0xc(%ebp),%eax
c0111870:	89 44 24 08          	mov    %eax,0x8(%esp)
c0111874:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111877:	89 44 24 04          	mov    %eax,0x4(%esp)
c011187b:	8b 45 08             	mov    0x8(%ebp),%eax
c011187e:	89 04 24             	mov    %eax,(%esp)
c0111881:	e8 38 ff ff ff       	call   c01117be <bitmap_translate>
    assert(!(*word & mask));
c0111886:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111889:	8b 10                	mov    (%eax),%edx
c011188b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011188e:	21 d0                	and    %edx,%eax
c0111890:	85 c0                	test   %eax,%eax
c0111892:	74 24                	je     c01118b8 <bitmap_free+0x58>
c0111894:	c7 44 24 0c 81 92 11 	movl   $0xc0119281,0xc(%esp)
c011189b:	c0 
c011189c:	c7 44 24 08 00 92 11 	movl   $0xc0119200,0x8(%esp)
c01118a3:	c0 
c01118a4:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
c01118ab:	00 
c01118ac:	c7 04 24 15 92 11 c0 	movl   $0xc0119215,(%esp)
c01118b3:	e8 10 f6 fe ff       	call   c0100ec8 <__panic>
    *word |= mask;
c01118b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01118bb:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01118be:	8b 0a                	mov    (%edx),%ecx
c01118c0:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01118c3:	09 ca                	or     %ecx,%edx
c01118c5:	89 10                	mov    %edx,(%eax)
}
c01118c7:	c9                   	leave  
c01118c8:	c3                   	ret    

c01118c9 <bitmap_destroy>:

// bitmap_destroy - free memory contains bitmap
void
bitmap_destroy(struct bitmap *bitmap) {
c01118c9:	55                   	push   %ebp
c01118ca:	89 e5                	mov    %esp,%ebp
c01118cc:	83 ec 18             	sub    $0x18,%esp
    kfree(bitmap->map);
c01118cf:	8b 45 08             	mov    0x8(%ebp),%eax
c01118d2:	8b 40 08             	mov    0x8(%eax),%eax
c01118d5:	89 04 24             	mov    %eax,(%esp)
c01118d8:	e8 1d 34 ff ff       	call   c0104cfa <kfree>
    kfree(bitmap);
c01118dd:	8b 45 08             	mov    0x8(%ebp),%eax
c01118e0:	89 04 24             	mov    %eax,(%esp)
c01118e3:	e8 12 34 ff ff       	call   c0104cfa <kfree>
}
c01118e8:	c9                   	leave  
c01118e9:	c3                   	ret    

c01118ea <bitmap_getdata>:

// bitmap_getdata - return bitmap->map, return the length of bits to len_store
void *
bitmap_getdata(struct bitmap *bitmap, size_t *len_store) {
c01118ea:	55                   	push   %ebp
c01118eb:	89 e5                	mov    %esp,%ebp
    if (len_store != NULL) {
c01118ed:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01118f1:	74 12                	je     c0111905 <bitmap_getdata+0x1b>
        *len_store = sizeof(WORD_TYPE) * bitmap->nwords;
c01118f3:	8b 45 08             	mov    0x8(%ebp),%eax
c01118f6:	8b 40 04             	mov    0x4(%eax),%eax
c01118f9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0111900:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111903:	89 10                	mov    %edx,(%eax)
    }
    return bitmap->map;
c0111905:	8b 45 08             	mov    0x8(%ebp),%eax
c0111908:	8b 40 08             	mov    0x8(%eax),%eax
}
c011190b:	5d                   	pop    %ebp
c011190c:	c3                   	ret    

c011190d <sfs_init>:
 *
 * CALL GRAPH:
 *   kern_init-->fs_init-->sfs_init
 */
void
sfs_init(void) {
c011190d:	55                   	push   %ebp
c011190e:	89 e5                	mov    %esp,%ebp
c0111910:	83 ec 28             	sub    $0x28,%esp
    int ret;
    if ((ret = sfs_mount("disk0")) != 0) {
c0111913:	c7 04 24 91 92 11 c0 	movl   $0xc0119291,(%esp)
c011191a:	e8 d6 08 00 00       	call   c01121f5 <sfs_mount>
c011191f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111922:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111926:	74 23                	je     c011194b <sfs_init+0x3e>
        panic("failed: sfs: sfs_mount: %e.\n", ret);
c0111928:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011192b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011192f:	c7 44 24 08 97 92 11 	movl   $0xc0119297,0x8(%esp)
c0111936:	c0 
c0111937:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
c011193e:	00 
c011193f:	c7 04 24 b4 92 11 c0 	movl   $0xc01192b4,(%esp)
c0111946:	e8 7d f5 fe ff       	call   c0100ec8 <__panic>
    }
}
c011194b:	c9                   	leave  
c011194c:	c3                   	ret    

c011194d <sfs_sync>:

/*
 * sfs_sync - sync sfs's superblock and freemap in memroy into disk
 */
static int
sfs_sync(struct fs *fs) {
c011194d:	55                   	push   %ebp
c011194e:	89 e5                	mov    %esp,%ebp
c0111950:	83 ec 38             	sub    $0x38,%esp
    struct sfs_fs *sfs = fsop_info(fs, sfs);
c0111953:	8b 45 08             	mov    0x8(%ebp),%eax
c0111956:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0111959:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011195d:	74 0a                	je     c0111969 <sfs_sync+0x1c>
c011195f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111962:	8b 40 6c             	mov    0x6c(%eax),%eax
c0111965:	85 c0                	test   %eax,%eax
c0111967:	74 24                	je     c011198d <sfs_sync+0x40>
c0111969:	c7 44 24 0c c8 92 11 	movl   $0xc01192c8,0xc(%esp)
c0111970:	c0 
c0111971:	c7 44 24 08 f1 92 11 	movl   $0xc01192f1,0x8(%esp)
c0111978:	c0 
c0111979:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
c0111980:	00 
c0111981:	c7 04 24 06 93 11 c0 	movl   $0xc0119306,(%esp)
c0111988:	e8 3b f5 fe ff       	call   c0100ec8 <__panic>
c011198d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111990:	89 45 ec             	mov    %eax,-0x14(%ebp)
    lock_sfs_fs(sfs);
c0111993:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111996:	89 04 24             	mov    %eax,(%esp)
c0111999:	e8 f5 2f 00 00       	call   c0114993 <lock_sfs_fs>
    {
        list_entry_t *list = &(sfs->inode_list), *le = list;
c011199e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01119a1:	83 c0 60             	add    $0x60,%eax
c01119a4:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01119a7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01119aa:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le)) != list) {
c01119ad:	eb 74                	jmp    c0111a23 <sfs_sync+0xd6>
            struct sfs_inode *sin = le2sin(le, inode_link);
c01119af:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01119b2:	83 e8 1c             	sub    $0x1c,%eax
c01119b5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            vop_fsync(info2node(sin, sfs_inode));
c01119b8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01119bb:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01119be:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01119c2:	74 17                	je     c01119db <sfs_sync+0x8e>
c01119c4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01119c7:	8b 40 3c             	mov    0x3c(%eax),%eax
c01119ca:	85 c0                	test   %eax,%eax
c01119cc:	74 0d                	je     c01119db <sfs_sync+0x8e>
c01119ce:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01119d1:	8b 40 3c             	mov    0x3c(%eax),%eax
c01119d4:	8b 40 18             	mov    0x18(%eax),%eax
c01119d7:	85 c0                	test   %eax,%eax
c01119d9:	75 24                	jne    c01119ff <sfs_sync+0xb2>
c01119db:	c7 44 24 0c 1c 93 11 	movl   $0xc011931c,0xc(%esp)
c01119e2:	c0 
c01119e3:	c7 44 24 08 f1 92 11 	movl   $0xc01192f1,0x8(%esp)
c01119ea:	c0 
c01119eb:	c7 44 24 04 1b 00 00 	movl   $0x1b,0x4(%esp)
c01119f2:	00 
c01119f3:	c7 04 24 06 93 11 c0 	movl   $0xc0119306,(%esp)
c01119fa:	e8 c9 f4 fe ff       	call   c0100ec8 <__panic>
c01119ff:	c7 44 24 04 6a 93 11 	movl   $0xc011936a,0x4(%esp)
c0111a06:	c0 
c0111a07:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111a0a:	89 04 24             	mov    %eax,(%esp)
c0111a0d:	e8 db d8 ff ff       	call   c010f2ed <inode_check>
c0111a12:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111a15:	8b 40 3c             	mov    0x3c(%eax),%eax
c0111a18:	8b 40 18             	mov    0x18(%eax),%eax
c0111a1b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0111a1e:	89 14 24             	mov    %edx,(%esp)
c0111a21:	ff d0                	call   *%eax
c0111a23:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111a26:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0111a29:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111a2c:	8b 40 04             	mov    0x4(%eax),%eax
sfs_sync(struct fs *fs) {
    struct sfs_fs *sfs = fsop_info(fs, sfs);
    lock_sfs_fs(sfs);
    {
        list_entry_t *list = &(sfs->inode_list), *le = list;
        while ((le = list_next(le)) != list) {
c0111a2f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111a32:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111a35:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0111a38:	0f 85 71 ff ff ff    	jne    c01119af <sfs_sync+0x62>
            struct sfs_inode *sin = le2sin(le, inode_link);
            vop_fsync(info2node(sin, sfs_inode));
        }
    }
    unlock_sfs_fs(sfs);
c0111a3e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111a41:	89 04 24             	mov    %eax,(%esp)
c0111a44:	e8 76 2f 00 00       	call   c01149bf <unlock_sfs_fs>

    int ret;
    if (sfs->super_dirty) {
c0111a49:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111a4c:	8b 40 34             	mov    0x34(%eax),%eax
c0111a4f:	85 c0                	test   %eax,%eax
c0111a51:	74 50                	je     c0111aa3 <sfs_sync+0x156>
        sfs->super_dirty = 0;
c0111a53:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111a56:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
        if ((ret = sfs_sync_super(sfs)) != 0) {
c0111a5d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111a60:	89 04 24             	mov    %eax,(%esp)
c0111a63:	e8 bd 2d 00 00       	call   c0114825 <sfs_sync_super>
c0111a68:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0111a6b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0111a6f:	74 0f                	je     c0111a80 <sfs_sync+0x133>
            sfs->super_dirty = 1;
c0111a71:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111a74:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%eax)
            return ret;
c0111a7b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0111a7e:	eb 28                	jmp    c0111aa8 <sfs_sync+0x15b>
        }
        if ((ret = sfs_sync_freemap(sfs)) != 0) {
c0111a80:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111a83:	89 04 24             	mov    %eax,(%esp)
c0111a86:	e8 26 2e 00 00       	call   c01148b1 <sfs_sync_freemap>
c0111a8b:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0111a8e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0111a92:	74 0f                	je     c0111aa3 <sfs_sync+0x156>
            sfs->super_dirty = 1;
c0111a94:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111a97:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%eax)
            return ret;
c0111a9e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0111aa1:	eb 05                	jmp    c0111aa8 <sfs_sync+0x15b>
        }
    }
    return 0;
c0111aa3:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0111aa8:	c9                   	leave  
c0111aa9:	c3                   	ret    

c0111aaa <sfs_get_root>:

/*
 * sfs_get_root - get the root directory inode  from disk (SFS_BLKN_ROOT,1)
 */
static struct inode *
sfs_get_root(struct fs *fs) {
c0111aaa:	55                   	push   %ebp
c0111aab:	89 e5                	mov    %esp,%ebp
c0111aad:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    int ret;
    if ((ret = sfs_load_inode(fsop_info(fs, sfs), &node, SFS_BLKN_ROOT)) != 0) {
c0111ab0:	8b 45 08             	mov    0x8(%ebp),%eax
c0111ab3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111ab6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111aba:	74 0a                	je     c0111ac6 <sfs_get_root+0x1c>
c0111abc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111abf:	8b 40 6c             	mov    0x6c(%eax),%eax
c0111ac2:	85 c0                	test   %eax,%eax
c0111ac4:	74 24                	je     c0111aea <sfs_get_root+0x40>
c0111ac6:	c7 44 24 0c c8 92 11 	movl   $0xc01192c8,0xc(%esp)
c0111acd:	c0 
c0111ace:	c7 44 24 08 f1 92 11 	movl   $0xc01192f1,0x8(%esp)
c0111ad5:	c0 
c0111ad6:	c7 44 24 04 36 00 00 	movl   $0x36,0x4(%esp)
c0111add:	00 
c0111ade:	c7 04 24 06 93 11 c0 	movl   $0xc0119306,(%esp)
c0111ae5:	e8 de f3 fe ff       	call   c0100ec8 <__panic>
c0111aea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111aed:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0111af4:	00 
c0111af5:	8d 55 ec             	lea    -0x14(%ebp),%edx
c0111af8:	89 54 24 04          	mov    %edx,0x4(%esp)
c0111afc:	89 04 24             	mov    %eax,(%esp)
c0111aff:	e8 e1 0b 00 00       	call   c01126e5 <sfs_load_inode>
c0111b04:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0111b07:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111b0b:	74 23                	je     c0111b30 <sfs_get_root+0x86>
        panic("load sfs root failed: %e", ret);
c0111b0d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111b10:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0111b14:	c7 44 24 08 70 93 11 	movl   $0xc0119370,0x8(%esp)
c0111b1b:	c0 
c0111b1c:	c7 44 24 04 37 00 00 	movl   $0x37,0x4(%esp)
c0111b23:	00 
c0111b24:	c7 04 24 06 93 11 c0 	movl   $0xc0119306,(%esp)
c0111b2b:	e8 98 f3 fe ff       	call   c0100ec8 <__panic>
    }
    return node;
c0111b30:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
c0111b33:	c9                   	leave  
c0111b34:	c3                   	ret    

c0111b35 <sfs_unmount>:

/*
 * sfs_unmount - unmount sfs, and free the memorys contain sfs->freemap/sfs_buffer/hash_liskt and sfs itself.
 */
static int
sfs_unmount(struct fs *fs) {
c0111b35:	55                   	push   %ebp
c0111b36:	89 e5                	mov    %esp,%ebp
c0111b38:	83 ec 28             	sub    $0x28,%esp
    struct sfs_fs *sfs = fsop_info(fs, sfs);
c0111b3b:	8b 45 08             	mov    0x8(%ebp),%eax
c0111b3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111b41:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111b45:	74 0a                	je     c0111b51 <sfs_unmount+0x1c>
c0111b47:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111b4a:	8b 40 6c             	mov    0x6c(%eax),%eax
c0111b4d:	85 c0                	test   %eax,%eax
c0111b4f:	74 24                	je     c0111b75 <sfs_unmount+0x40>
c0111b51:	c7 44 24 0c c8 92 11 	movl   $0xc01192c8,0xc(%esp)
c0111b58:	c0 
c0111b59:	c7 44 24 08 f1 92 11 	movl   $0xc01192f1,0x8(%esp)
c0111b60:	c0 
c0111b61:	c7 44 24 04 41 00 00 	movl   $0x41,0x4(%esp)
c0111b68:	00 
c0111b69:	c7 04 24 06 93 11 c0 	movl   $0xc0119306,(%esp)
c0111b70:	e8 53 f3 fe ff       	call   c0100ec8 <__panic>
c0111b75:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111b78:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!list_empty(&(sfs->inode_list))) {
c0111b7b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111b7e:	83 c0 60             	add    $0x60,%eax
c0111b81:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0111b84:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111b87:	8b 40 04             	mov    0x4(%eax),%eax
c0111b8a:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c0111b8d:	0f 94 c0             	sete   %al
c0111b90:	0f b6 c0             	movzbl %al,%eax
c0111b93:	85 c0                	test   %eax,%eax
c0111b95:	75 07                	jne    c0111b9e <sfs_unmount+0x69>
        return -E_BUSY;
c0111b97:	b8 f1 ff ff ff       	mov    $0xfffffff1,%eax
c0111b9c:	eb 68                	jmp    c0111c06 <sfs_unmount+0xd1>
    }
    assert(!sfs->super_dirty);
c0111b9e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111ba1:	8b 40 34             	mov    0x34(%eax),%eax
c0111ba4:	85 c0                	test   %eax,%eax
c0111ba6:	74 24                	je     c0111bcc <sfs_unmount+0x97>
c0111ba8:	c7 44 24 0c 89 93 11 	movl   $0xc0119389,0xc(%esp)
c0111baf:	c0 
c0111bb0:	c7 44 24 08 f1 92 11 	movl   $0xc01192f1,0x8(%esp)
c0111bb7:	c0 
c0111bb8:	c7 44 24 04 45 00 00 	movl   $0x45,0x4(%esp)
c0111bbf:	00 
c0111bc0:	c7 04 24 06 93 11 c0 	movl   $0xc0119306,(%esp)
c0111bc7:	e8 fc f2 fe ff       	call   c0100ec8 <__panic>
    bitmap_destroy(sfs->freemap);
c0111bcc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111bcf:	8b 40 30             	mov    0x30(%eax),%eax
c0111bd2:	89 04 24             	mov    %eax,(%esp)
c0111bd5:	e8 ef fc ff ff       	call   c01118c9 <bitmap_destroy>
    kfree(sfs->sfs_buffer);
c0111bda:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111bdd:	8b 40 38             	mov    0x38(%eax),%eax
c0111be0:	89 04 24             	mov    %eax,(%esp)
c0111be3:	e8 12 31 ff ff       	call   c0104cfa <kfree>
    kfree(sfs->hash_list);
c0111be8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111beb:	8b 40 68             	mov    0x68(%eax),%eax
c0111bee:	89 04 24             	mov    %eax,(%esp)
c0111bf1:	e8 04 31 ff ff       	call   c0104cfa <kfree>
    kfree(sfs);
c0111bf6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111bf9:	89 04 24             	mov    %eax,(%esp)
c0111bfc:	e8 f9 30 ff ff       	call   c0104cfa <kfree>
    return 0;
c0111c01:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0111c06:	c9                   	leave  
c0111c07:	c3                   	ret    

c0111c08 <sfs_cleanup>:
 * sfs_cleanup - when sfs failed, then should call this function to sync sfs by calling sfs_sync
 *
 * NOTICE: nouse now.
 */
static void
sfs_cleanup(struct fs *fs) {
c0111c08:	55                   	push   %ebp
c0111c09:	89 e5                	mov    %esp,%ebp
c0111c0b:	83 ec 48             	sub    $0x48,%esp
    struct sfs_fs *sfs = fsop_info(fs, sfs);
c0111c0e:	8b 45 08             	mov    0x8(%ebp),%eax
c0111c11:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0111c14:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0111c18:	74 0a                	je     c0111c24 <sfs_cleanup+0x1c>
c0111c1a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111c1d:	8b 40 6c             	mov    0x6c(%eax),%eax
c0111c20:	85 c0                	test   %eax,%eax
c0111c22:	74 24                	je     c0111c48 <sfs_cleanup+0x40>
c0111c24:	c7 44 24 0c c8 92 11 	movl   $0xc01192c8,0xc(%esp)
c0111c2b:	c0 
c0111c2c:	c7 44 24 08 f1 92 11 	movl   $0xc01192f1,0x8(%esp)
c0111c33:	c0 
c0111c34:	c7 44 24 04 54 00 00 	movl   $0x54,0x4(%esp)
c0111c3b:	00 
c0111c3c:	c7 04 24 06 93 11 c0 	movl   $0xc0119306,(%esp)
c0111c43:	e8 80 f2 fe ff       	call   c0100ec8 <__panic>
c0111c48:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111c4b:	89 45 e8             	mov    %eax,-0x18(%ebp)
    uint32_t blocks = sfs->super.blocks, unused_blocks = sfs->super.unused_blocks;
c0111c4e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111c51:	8b 40 04             	mov    0x4(%eax),%eax
c0111c54:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0111c57:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111c5a:	8b 40 08             	mov    0x8(%eax),%eax
c0111c5d:	89 45 e0             	mov    %eax,-0x20(%ebp)
    cprintf("sfs: cleanup: '%s' (%d/%d/%d)\n", sfs->super.info,
c0111c60:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111c63:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0111c66:	89 d1                	mov    %edx,%ecx
c0111c68:	29 c1                	sub    %eax,%ecx
c0111c6a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111c6d:	8d 50 0c             	lea    0xc(%eax),%edx
c0111c70:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111c73:	89 44 24 10          	mov    %eax,0x10(%esp)
c0111c77:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111c7a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0111c7e:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0111c82:	89 54 24 04          	mov    %edx,0x4(%esp)
c0111c86:	c7 04 24 9c 93 11 c0 	movl   $0xc011939c,(%esp)
c0111c8d:	e8 d3 e6 fe ff       	call   c0100365 <cprintf>
            blocks - unused_blocks, unused_blocks, blocks);
    int i, ret;
    for (i = 0; i < 32; i ++) {
c0111c92:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0111c99:	eb 1d                	jmp    c0111cb8 <sfs_cleanup+0xb0>
        if ((ret = fsop_sync(fs)) == 0) {
c0111c9b:	8b 45 08             	mov    0x8(%ebp),%eax
c0111c9e:	8b 40 70             	mov    0x70(%eax),%eax
c0111ca1:	8b 55 08             	mov    0x8(%ebp),%edx
c0111ca4:	89 14 24             	mov    %edx,(%esp)
c0111ca7:	ff d0                	call   *%eax
c0111ca9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0111cac:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111cb0:	75 02                	jne    c0111cb4 <sfs_cleanup+0xac>
            break;
c0111cb2:	eb 0a                	jmp    c0111cbe <sfs_cleanup+0xb6>
    struct sfs_fs *sfs = fsop_info(fs, sfs);
    uint32_t blocks = sfs->super.blocks, unused_blocks = sfs->super.unused_blocks;
    cprintf("sfs: cleanup: '%s' (%d/%d/%d)\n", sfs->super.info,
            blocks - unused_blocks, unused_blocks, blocks);
    int i, ret;
    for (i = 0; i < 32; i ++) {
c0111cb4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0111cb8:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c0111cbc:	7e dd                	jle    c0111c9b <sfs_cleanup+0x93>
        if ((ret = fsop_sync(fs)) == 0) {
            break;
        }
    }
    if (ret != 0) {
c0111cbe:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111cc2:	74 2d                	je     c0111cf1 <sfs_cleanup+0xe9>
        warn("sfs: sync error: '%s': %e.\n", sfs->super.info, ret);
c0111cc4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111cc7:	8d 50 0c             	lea    0xc(%eax),%edx
c0111cca:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111ccd:	89 44 24 10          	mov    %eax,0x10(%esp)
c0111cd1:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0111cd5:	c7 44 24 08 bb 93 11 	movl   $0xc01193bb,0x8(%esp)
c0111cdc:	c0 
c0111cdd:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
c0111ce4:	00 
c0111ce5:	c7 04 24 06 93 11 c0 	movl   $0xc0119306,(%esp)
c0111cec:	e8 43 f2 fe ff       	call   c0100f34 <__warn>
    }
}
c0111cf1:	c9                   	leave  
c0111cf2:	c3                   	ret    

c0111cf3 <sfs_init_read>:
 *
 *      (1) init iobuf
 *      (2) read dev into iobuf
 */
static int
sfs_init_read(struct device *dev, uint32_t blkno, void *blk_buffer) {
c0111cf3:	55                   	push   %ebp
c0111cf4:	89 e5                	mov    %esp,%ebp
c0111cf6:	83 ec 38             	sub    $0x38,%esp
    struct iobuf __iob, *iob = iobuf_init(&__iob, blk_buffer, SFS_BLKSIZE, blkno * SFS_BLKSIZE);
c0111cf9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111cfc:	c1 e0 0c             	shl    $0xc,%eax
c0111cff:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0111d03:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0111d0a:	00 
c0111d0b:	8b 45 10             	mov    0x10(%ebp),%eax
c0111d0e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111d12:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0111d15:	89 04 24             	mov    %eax,(%esp)
c0111d18:	e8 fe 95 ff ff       	call   c010b31b <iobuf_init>
c0111d1d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dop_io(dev, iob, 0);
c0111d20:	8b 45 08             	mov    0x8(%ebp),%eax
c0111d23:	8b 40 10             	mov    0x10(%eax),%eax
c0111d26:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0111d2d:	00 
c0111d2e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0111d31:	89 54 24 04          	mov    %edx,0x4(%esp)
c0111d35:	8b 55 08             	mov    0x8(%ebp),%edx
c0111d38:	89 14 24             	mov    %edx,(%esp)
c0111d3b:	ff d0                	call   *%eax
}
c0111d3d:	c9                   	leave  
c0111d3e:	c3                   	ret    

c0111d3f <sfs_init_freemap>:
 *
 *      (1) get data addr in bitmap
 *      (2) read dev into iobuf
 */
static int
sfs_init_freemap(struct device *dev, struct bitmap *freemap, uint32_t blkno, uint32_t nblks, void *blk_buffer) {
c0111d3f:	55                   	push   %ebp
c0111d40:	89 e5                	mov    %esp,%ebp
c0111d42:	83 ec 28             	sub    $0x28,%esp
    size_t len;
    void *data = bitmap_getdata(freemap, &len);
c0111d45:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0111d48:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111d4c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111d4f:	89 04 24             	mov    %eax,(%esp)
c0111d52:	e8 93 fb ff ff       	call   c01118ea <bitmap_getdata>
c0111d57:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(data != NULL && len == nblks * SFS_BLKSIZE);
c0111d5a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111d5e:	74 0f                	je     c0111d6f <sfs_init_freemap+0x30>
c0111d60:	8b 45 14             	mov    0x14(%ebp),%eax
c0111d63:	c1 e0 0c             	shl    $0xc,%eax
c0111d66:	89 c2                	mov    %eax,%edx
c0111d68:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111d6b:	39 c2                	cmp    %eax,%edx
c0111d6d:	74 24                	je     c0111d93 <sfs_init_freemap+0x54>
c0111d6f:	c7 44 24 0c d8 93 11 	movl   $0xc01193d8,0xc(%esp)
c0111d76:	c0 
c0111d77:	c7 44 24 08 f1 92 11 	movl   $0xc01192f1,0x8(%esp)
c0111d7e:	c0 
c0111d7f:	c7 44 24 04 83 00 00 	movl   $0x83,0x4(%esp)
c0111d86:	00 
c0111d87:	c7 04 24 06 93 11 c0 	movl   $0xc0119306,(%esp)
c0111d8e:	e8 35 f1 fe ff       	call   c0100ec8 <__panic>
    while (nblks != 0) {
c0111d93:	eb 36                	jmp    c0111dcb <sfs_init_freemap+0x8c>
        int ret;
        if ((ret = sfs_init_read(dev, blkno, data)) != 0) {
c0111d95:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111d98:	89 44 24 08          	mov    %eax,0x8(%esp)
c0111d9c:	8b 45 10             	mov    0x10(%ebp),%eax
c0111d9f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111da3:	8b 45 08             	mov    0x8(%ebp),%eax
c0111da6:	89 04 24             	mov    %eax,(%esp)
c0111da9:	e8 45 ff ff ff       	call   c0111cf3 <sfs_init_read>
c0111dae:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0111db1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111db5:	74 05                	je     c0111dbc <sfs_init_freemap+0x7d>
            return ret;
c0111db7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111dba:	eb 1a                	jmp    c0111dd6 <sfs_init_freemap+0x97>
        }
        blkno ++, nblks --, data += SFS_BLKSIZE;
c0111dbc:	83 45 10 01          	addl   $0x1,0x10(%ebp)
c0111dc0:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0111dc4:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
static int
sfs_init_freemap(struct device *dev, struct bitmap *freemap, uint32_t blkno, uint32_t nblks, void *blk_buffer) {
    size_t len;
    void *data = bitmap_getdata(freemap, &len);
    assert(data != NULL && len == nblks * SFS_BLKSIZE);
    while (nblks != 0) {
c0111dcb:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0111dcf:	75 c4                	jne    c0111d95 <sfs_init_freemap+0x56>
        if ((ret = sfs_init_read(dev, blkno, data)) != 0) {
            return ret;
        }
        blkno ++, nblks --, data += SFS_BLKSIZE;
    }
    return 0;
c0111dd1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0111dd6:	c9                   	leave  
c0111dd7:	c3                   	ret    

c0111dd8 <sfs_do_mount>:
 *
 * @dev:        the block device contains sfs file system
 * @fs_store:   the fs struct in memroy
 */
static int
sfs_do_mount(struct device *dev, struct fs **fs_store) {
c0111dd8:	55                   	push   %ebp
c0111dd9:	89 e5                	mov    %esp,%ebp
c0111ddb:	83 ec 78             	sub    $0x78,%esp
    static_assert(SFS_BLKSIZE >= sizeof(struct sfs_super));
    static_assert(SFS_BLKSIZE >= sizeof(struct sfs_disk_inode));
    static_assert(SFS_BLKSIZE >= sizeof(struct sfs_disk_entry));

    if (dev->d_blocksize != SFS_BLKSIZE) {
c0111dde:	8b 45 08             	mov    0x8(%ebp),%eax
c0111de1:	8b 40 04             	mov    0x4(%eax),%eax
c0111de4:	3d 00 10 00 00       	cmp    $0x1000,%eax
c0111de9:	74 0a                	je     c0111df5 <sfs_do_mount+0x1d>
        return -E_NA_DEV;
c0111deb:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
c0111df0:	e9 fe 03 00 00       	jmp    c01121f3 <sfs_do_mount+0x41b>
    }

    /* allocate fs structure */
    struct fs *fs;
    if ((fs = alloc_fs(sfs)) == NULL) {
c0111df5:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0111dfc:	e8 df d5 ff ff       	call   c010f3e0 <__alloc_fs>
c0111e01:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0111e04:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0111e08:	75 0a                	jne    c0111e14 <sfs_do_mount+0x3c>
        return -E_NO_MEM;
c0111e0a:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0111e0f:	e9 df 03 00 00       	jmp    c01121f3 <sfs_do_mount+0x41b>
    }
    struct sfs_fs *sfs = fsop_info(fs, sfs);
c0111e14:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111e17:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0111e1a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0111e1e:	74 0a                	je     c0111e2a <sfs_do_mount+0x52>
c0111e20:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111e23:	8b 40 6c             	mov    0x6c(%eax),%eax
c0111e26:	85 c0                	test   %eax,%eax
c0111e28:	74 24                	je     c0111e4e <sfs_do_mount+0x76>
c0111e2a:	c7 44 24 0c c8 92 11 	movl   $0xc01192c8,0xc(%esp)
c0111e31:	c0 
c0111e32:	c7 44 24 08 f1 92 11 	movl   $0xc01192f1,0x8(%esp)
c0111e39:	c0 
c0111e3a:	c7 44 24 04 a3 00 00 	movl   $0xa3,0x4(%esp)
c0111e41:	00 
c0111e42:	c7 04 24 06 93 11 c0 	movl   $0xc0119306,(%esp)
c0111e49:	e8 7a f0 fe ff       	call   c0100ec8 <__panic>
c0111e4e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111e51:	89 45 e0             	mov    %eax,-0x20(%ebp)
    sfs->dev = dev;
c0111e54:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111e57:	8b 55 08             	mov    0x8(%ebp),%edx
c0111e5a:	89 50 2c             	mov    %edx,0x2c(%eax)

    int ret = -E_NO_MEM;
c0111e5d:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    void *sfs_buffer;
    if ((sfs->sfs_buffer = sfs_buffer = kmalloc(SFS_BLKSIZE)) == NULL) {
c0111e64:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c0111e6b:	e8 6f 2e ff ff       	call   c0104cdf <kmalloc>
c0111e70:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0111e73:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111e76:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0111e79:	89 50 38             	mov    %edx,0x38(%eax)
c0111e7c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111e7f:	8b 40 38             	mov    0x38(%eax),%eax
c0111e82:	85 c0                	test   %eax,%eax
c0111e84:	75 05                	jne    c0111e8b <sfs_do_mount+0xb3>
        goto failed_cleanup_fs;
c0111e86:	e9 5a 03 00 00       	jmp    c01121e5 <sfs_do_mount+0x40d>
    }

    /* load and check superblock */
    if ((ret = sfs_init_read(dev, SFS_BLKN_SUPER, sfs_buffer)) != 0) {
c0111e8b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0111e8e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0111e92:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0111e99:	00 
c0111e9a:	8b 45 08             	mov    0x8(%ebp),%eax
c0111e9d:	89 04 24             	mov    %eax,(%esp)
c0111ea0:	e8 4e fe ff ff       	call   c0111cf3 <sfs_init_read>
c0111ea5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111ea8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111eac:	74 05                	je     c0111eb3 <sfs_do_mount+0xdb>
        goto failed_cleanup_sfs_buffer;
c0111eae:	e9 27 03 00 00       	jmp    c01121da <sfs_do_mount+0x402>
    }

    ret = -E_INVAL;
c0111eb3:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)

    struct sfs_super *super = sfs_buffer;
c0111eba:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0111ebd:	89 45 d8             	mov    %eax,-0x28(%ebp)
    if (super->magic != SFS_MAGIC) {
c0111ec0:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111ec3:	8b 00                	mov    (%eax),%eax
c0111ec5:	3d 2a be 8d 2f       	cmp    $0x2f8dbe2a,%eax
c0111eca:	74 22                	je     c0111eee <sfs_do_mount+0x116>
        cprintf("sfs: wrong magic in superblock. (%08x should be %08x).\n",
c0111ecc:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111ecf:	8b 00                	mov    (%eax),%eax
c0111ed1:	c7 44 24 08 2a be 8d 	movl   $0x2f8dbe2a,0x8(%esp)
c0111ed8:	2f 
c0111ed9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111edd:	c7 04 24 04 94 11 c0 	movl   $0xc0119404,(%esp)
c0111ee4:	e8 7c e4 fe ff       	call   c0100365 <cprintf>
                super->magic, SFS_MAGIC);
        goto failed_cleanup_sfs_buffer;
c0111ee9:	e9 ec 02 00 00       	jmp    c01121da <sfs_do_mount+0x402>
    }
    if (super->blocks > dev->d_blocks) {
c0111eee:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111ef1:	8b 50 04             	mov    0x4(%eax),%edx
c0111ef4:	8b 45 08             	mov    0x8(%ebp),%eax
c0111ef7:	8b 00                	mov    (%eax),%eax
c0111ef9:	39 c2                	cmp    %eax,%edx
c0111efb:	76 24                	jbe    c0111f21 <sfs_do_mount+0x149>
        cprintf("sfs: fs has %u blocks, device has %u blocks.\n",
c0111efd:	8b 45 08             	mov    0x8(%ebp),%eax
c0111f00:	8b 10                	mov    (%eax),%edx
c0111f02:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111f05:	8b 40 04             	mov    0x4(%eax),%eax
c0111f08:	89 54 24 08          	mov    %edx,0x8(%esp)
c0111f0c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111f10:	c7 04 24 3c 94 11 c0 	movl   $0xc011943c,(%esp)
c0111f17:	e8 49 e4 fe ff       	call   c0100365 <cprintf>
                super->blocks, dev->d_blocks);
        goto failed_cleanup_sfs_buffer;
c0111f1c:	e9 b9 02 00 00       	jmp    c01121da <sfs_do_mount+0x402>
    }
    super->info[SFS_MAX_INFO_LEN] = '\0';
c0111f21:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111f24:	c6 40 2b 00          	movb   $0x0,0x2b(%eax)
    sfs->super = *super;
c0111f28:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111f2b:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0111f2e:	8b 0a                	mov    (%edx),%ecx
c0111f30:	89 08                	mov    %ecx,(%eax)
c0111f32:	8b 4a 04             	mov    0x4(%edx),%ecx
c0111f35:	89 48 04             	mov    %ecx,0x4(%eax)
c0111f38:	8b 4a 08             	mov    0x8(%edx),%ecx
c0111f3b:	89 48 08             	mov    %ecx,0x8(%eax)
c0111f3e:	8b 4a 0c             	mov    0xc(%edx),%ecx
c0111f41:	89 48 0c             	mov    %ecx,0xc(%eax)
c0111f44:	8b 4a 10             	mov    0x10(%edx),%ecx
c0111f47:	89 48 10             	mov    %ecx,0x10(%eax)
c0111f4a:	8b 4a 14             	mov    0x14(%edx),%ecx
c0111f4d:	89 48 14             	mov    %ecx,0x14(%eax)
c0111f50:	8b 4a 18             	mov    0x18(%edx),%ecx
c0111f53:	89 48 18             	mov    %ecx,0x18(%eax)
c0111f56:	8b 4a 1c             	mov    0x1c(%edx),%ecx
c0111f59:	89 48 1c             	mov    %ecx,0x1c(%eax)
c0111f5c:	8b 4a 20             	mov    0x20(%edx),%ecx
c0111f5f:	89 48 20             	mov    %ecx,0x20(%eax)
c0111f62:	8b 4a 24             	mov    0x24(%edx),%ecx
c0111f65:	89 48 24             	mov    %ecx,0x24(%eax)
c0111f68:	8b 52 28             	mov    0x28(%edx),%edx
c0111f6b:	89 50 28             	mov    %edx,0x28(%eax)

    ret = -E_NO_MEM;
c0111f6e:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    uint32_t i;

    /* alloc and initialize hash list */
    list_entry_t *hash_list;
    if ((sfs->hash_list = hash_list = kmalloc(sizeof(list_entry_t) * SFS_HLIST_SIZE)) == NULL) {
c0111f75:	c7 04 24 00 20 00 00 	movl   $0x2000,(%esp)
c0111f7c:	e8 5e 2d ff ff       	call   c0104cdf <kmalloc>
c0111f81:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0111f84:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111f87:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0111f8a:	89 50 68             	mov    %edx,0x68(%eax)
c0111f8d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111f90:	8b 40 68             	mov    0x68(%eax),%eax
c0111f93:	85 c0                	test   %eax,%eax
c0111f95:	75 05                	jne    c0111f9c <sfs_do_mount+0x1c4>
        goto failed_cleanup_sfs_buffer;
c0111f97:	e9 3e 02 00 00       	jmp    c01121da <sfs_do_mount+0x402>
    }
    for (i = 0; i < SFS_HLIST_SIZE; i ++) {
c0111f9c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0111fa3:	eb 2a                	jmp    c0111fcf <sfs_do_mount+0x1f7>
        list_init(hash_list + i);
c0111fa5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111fa8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0111faf:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0111fb2:	01 d0                	add    %edx,%eax
c0111fb4:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0111fb7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0111fba:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0111fbd:	89 50 04             	mov    %edx,0x4(%eax)
c0111fc0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0111fc3:	8b 50 04             	mov    0x4(%eax),%edx
c0111fc6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0111fc9:	89 10                	mov    %edx,(%eax)
    /* alloc and initialize hash list */
    list_entry_t *hash_list;
    if ((sfs->hash_list = hash_list = kmalloc(sizeof(list_entry_t) * SFS_HLIST_SIZE)) == NULL) {
        goto failed_cleanup_sfs_buffer;
    }
    for (i = 0; i < SFS_HLIST_SIZE; i ++) {
c0111fcb:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0111fcf:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
c0111fd6:	76 cd                	jbe    c0111fa5 <sfs_do_mount+0x1cd>
        list_init(hash_list + i);
    }

    /* load and check freemap */
    struct bitmap *freemap;
    uint32_t freemap_size_nbits = sfs_freemap_bits(super);
c0111fd8:	c7 45 d0 00 80 00 00 	movl   $0x8000,-0x30(%ebp)
c0111fdf:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111fe2:	8b 50 04             	mov    0x4(%eax),%edx
c0111fe5:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0111fe8:	01 d0                	add    %edx,%eax
c0111fea:	83 e8 01             	sub    $0x1,%eax
c0111fed:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0111ff0:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0111ff3:	ba 00 00 00 00       	mov    $0x0,%edx
c0111ff8:	f7 75 d0             	divl   -0x30(%ebp)
c0111ffb:	89 d0                	mov    %edx,%eax
c0111ffd:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0112000:	29 c2                	sub    %eax,%edx
c0112002:	89 d0                	mov    %edx,%eax
c0112004:	89 45 c8             	mov    %eax,-0x38(%ebp)
    if ((sfs->freemap = freemap = bitmap_create(freemap_size_nbits)) == NULL) {
c0112007:	8b 45 c8             	mov    -0x38(%ebp),%eax
c011200a:	89 04 24             	mov    %eax,(%esp)
c011200d:	e8 14 f5 ff ff       	call   c0111526 <bitmap_create>
c0112012:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0112015:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112018:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c011201b:	89 50 30             	mov    %edx,0x30(%eax)
c011201e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112021:	8b 40 30             	mov    0x30(%eax),%eax
c0112024:	85 c0                	test   %eax,%eax
c0112026:	75 05                	jne    c011202d <sfs_do_mount+0x255>
        goto failed_cleanup_hash_list;
c0112028:	e9 a2 01 00 00       	jmp    c01121cf <sfs_do_mount+0x3f7>
    }
    uint32_t freemap_size_nblks = sfs_freemap_blocks(super);
c011202d:	c7 45 c0 00 80 00 00 	movl   $0x8000,-0x40(%ebp)
c0112034:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0112037:	8b 50 04             	mov    0x4(%eax),%edx
c011203a:	8b 45 c0             	mov    -0x40(%ebp),%eax
c011203d:	01 d0                	add    %edx,%eax
c011203f:	83 e8 01             	sub    $0x1,%eax
c0112042:	ba 00 00 00 00       	mov    $0x0,%edx
c0112047:	f7 75 c0             	divl   -0x40(%ebp)
c011204a:	89 45 bc             	mov    %eax,-0x44(%ebp)
    if ((ret = sfs_init_freemap(dev, freemap, SFS_BLKN_FREEMAP, freemap_size_nblks, sfs_buffer)) != 0) {
c011204d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0112050:	89 44 24 10          	mov    %eax,0x10(%esp)
c0112054:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0112057:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011205b:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c0112062:	00 
c0112063:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0112066:	89 44 24 04          	mov    %eax,0x4(%esp)
c011206a:	8b 45 08             	mov    0x8(%ebp),%eax
c011206d:	89 04 24             	mov    %eax,(%esp)
c0112070:	e8 ca fc ff ff       	call   c0111d3f <sfs_init_freemap>
c0112075:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112078:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011207c:	74 11                	je     c011208f <sfs_do_mount+0x2b7>
        goto failed_cleanup_freemap;
c011207e:	90                   	nop
    fs->fs_cleanup = sfs_cleanup;
    *fs_store = fs;
    return 0;

failed_cleanup_freemap:
    bitmap_destroy(freemap);
c011207f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0112082:	89 04 24             	mov    %eax,(%esp)
c0112085:	e8 3f f8 ff ff       	call   c01118c9 <bitmap_destroy>
c011208a:	e9 40 01 00 00       	jmp    c01121cf <sfs_do_mount+0x3f7>
    uint32_t freemap_size_nblks = sfs_freemap_blocks(super);
    if ((ret = sfs_init_freemap(dev, freemap, SFS_BLKN_FREEMAP, freemap_size_nblks, sfs_buffer)) != 0) {
        goto failed_cleanup_freemap;
    }

    uint32_t blocks = sfs->super.blocks, unused_blocks = 0;
c011208f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112092:	8b 40 04             	mov    0x4(%eax),%eax
c0112095:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0112098:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    for (i = 0; i < freemap_size_nbits; i ++) {
c011209f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c01120a6:	eb 1e                	jmp    c01120c6 <sfs_do_mount+0x2ee>
        if (bitmap_test(freemap, i)) {
c01120a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01120ab:	89 44 24 04          	mov    %eax,0x4(%esp)
c01120af:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01120b2:	89 04 24             	mov    %eax,(%esp)
c01120b5:	e8 74 f7 ff ff       	call   c011182e <bitmap_test>
c01120ba:	85 c0                	test   %eax,%eax
c01120bc:	74 04                	je     c01120c2 <sfs_do_mount+0x2ea>
            unused_blocks ++;
c01120be:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    if ((ret = sfs_init_freemap(dev, freemap, SFS_BLKN_FREEMAP, freemap_size_nblks, sfs_buffer)) != 0) {
        goto failed_cleanup_freemap;
    }

    uint32_t blocks = sfs->super.blocks, unused_blocks = 0;
    for (i = 0; i < freemap_size_nbits; i ++) {
c01120c2:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c01120c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01120c9:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c01120cc:	72 da                	jb     c01120a8 <sfs_do_mount+0x2d0>
        if (bitmap_test(freemap, i)) {
            unused_blocks ++;
        }
    }
    assert(unused_blocks == sfs->super.unused_blocks);
c01120ce:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01120d1:	8b 40 08             	mov    0x8(%eax),%eax
c01120d4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01120d7:	74 24                	je     c01120fd <sfs_do_mount+0x325>
c01120d9:	c7 44 24 0c 6c 94 11 	movl   $0xc011946c,0xc(%esp)
c01120e0:	c0 
c01120e1:	c7 44 24 08 f1 92 11 	movl   $0xc01192f1,0x8(%esp)
c01120e8:	c0 
c01120e9:	c7 44 24 04 e0 00 00 	movl   $0xe0,0x4(%esp)
c01120f0:	00 
c01120f1:	c7 04 24 06 93 11 c0 	movl   $0xc0119306,(%esp)
c01120f8:	e8 cb ed fe ff       	call   c0100ec8 <__panic>

    /* and other fields */
    sfs->super_dirty = 0;
c01120fd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112100:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
    sem_init(&(sfs->fs_sem), 1);
c0112107:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011210a:	83 c0 3c             	add    $0x3c,%eax
c011210d:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0112114:	00 
c0112115:	89 04 24             	mov    %eax,(%esp)
c0112118:	e8 29 7a ff ff       	call   c0109b46 <sem_init>
    sem_init(&(sfs->io_sem), 1);
c011211d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112120:	83 c0 48             	add    $0x48,%eax
c0112123:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c011212a:	00 
c011212b:	89 04 24             	mov    %eax,(%esp)
c011212e:	e8 13 7a ff ff       	call   c0109b46 <sem_init>
    sem_init(&(sfs->mutex_sem), 1);
c0112133:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112136:	83 c0 54             	add    $0x54,%eax
c0112139:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0112140:	00 
c0112141:	89 04 24             	mov    %eax,(%esp)
c0112144:	e8 fd 79 ff ff       	call   c0109b46 <sem_init>
    list_init(&(sfs->inode_list));
c0112149:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011214c:	83 c0 60             	add    $0x60,%eax
c011214f:	89 45 b0             	mov    %eax,-0x50(%ebp)
c0112152:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0112155:	8b 55 b0             	mov    -0x50(%ebp),%edx
c0112158:	89 50 04             	mov    %edx,0x4(%eax)
c011215b:	8b 45 b0             	mov    -0x50(%ebp),%eax
c011215e:	8b 50 04             	mov    0x4(%eax),%edx
c0112161:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0112164:	89 10                	mov    %edx,(%eax)
    cprintf("sfs: mount: '%s' (%d/%d/%d)\n", sfs->super.info,
c0112166:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112169:	8b 55 b8             	mov    -0x48(%ebp),%edx
c011216c:	89 d1                	mov    %edx,%ecx
c011216e:	29 c1                	sub    %eax,%ecx
c0112170:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112173:	8d 50 0c             	lea    0xc(%eax),%edx
c0112176:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0112179:	89 44 24 10          	mov    %eax,0x10(%esp)
c011217d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112180:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112184:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0112188:	89 54 24 04          	mov    %edx,0x4(%esp)
c011218c:	c7 04 24 96 94 11 c0 	movl   $0xc0119496,(%esp)
c0112193:	e8 cd e1 fe ff       	call   c0100365 <cprintf>
            blocks - unused_blocks, unused_blocks, blocks);

    /* link addr of sync/get_root/unmount/cleanup funciton  fs's function pointers*/
    fs->fs_sync = sfs_sync;
c0112198:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011219b:	c7 40 70 4d 19 11 c0 	movl   $0xc011194d,0x70(%eax)
    fs->fs_get_root = sfs_get_root;
c01121a2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01121a5:	c7 40 74 aa 1a 11 c0 	movl   $0xc0111aaa,0x74(%eax)
    fs->fs_unmount = sfs_unmount;
c01121ac:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01121af:	c7 40 78 35 1b 11 c0 	movl   $0xc0111b35,0x78(%eax)
    fs->fs_cleanup = sfs_cleanup;
c01121b6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01121b9:	c7 40 7c 08 1c 11 c0 	movl   $0xc0111c08,0x7c(%eax)
    *fs_store = fs;
c01121c0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01121c3:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01121c6:	89 10                	mov    %edx,(%eax)
    return 0;
c01121c8:	b8 00 00 00 00       	mov    $0x0,%eax
c01121cd:	eb 24                	jmp    c01121f3 <sfs_do_mount+0x41b>

failed_cleanup_freemap:
    bitmap_destroy(freemap);
failed_cleanup_hash_list:
    kfree(hash_list);
c01121cf:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01121d2:	89 04 24             	mov    %eax,(%esp)
c01121d5:	e8 20 2b ff ff       	call   c0104cfa <kfree>
failed_cleanup_sfs_buffer:
    kfree(sfs_buffer);
c01121da:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01121dd:	89 04 24             	mov    %eax,(%esp)
c01121e0:	e8 15 2b ff ff       	call   c0104cfa <kfree>
failed_cleanup_fs:
    kfree(fs);
c01121e5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01121e8:	89 04 24             	mov    %eax,(%esp)
c01121eb:	e8 0a 2b ff ff       	call   c0104cfa <kfree>
    return ret;
c01121f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01121f3:	c9                   	leave  
c01121f4:	c3                   	ret    

c01121f5 <sfs_mount>:

int
sfs_mount(const char *devname) {
c01121f5:	55                   	push   %ebp
c01121f6:	89 e5                	mov    %esp,%ebp
c01121f8:	83 ec 18             	sub    $0x18,%esp
    return vfs_mount(devname, sfs_do_mount);
c01121fb:	c7 44 24 04 d8 1d 11 	movl   $0xc0111dd8,0x4(%esp)
c0112202:	c0 
c0112203:	8b 45 08             	mov    0x8(%ebp),%eax
c0112206:	89 04 24             	mov    %eax,(%esp)
c0112209:	e8 96 d8 ff ff       	call   c010faa4 <vfs_mount>
}
c011220e:	c9                   	leave  
c011220f:	c3                   	ret    

c0112210 <inode_ref_count>:
#define vop_open_inc(node)                                          inode_open_inc(node)
#define vop_open_dec(node)                                          inode_open_dec(node)


static inline int
inode_ref_count(struct inode *node) {
c0112210:	55                   	push   %ebp
c0112211:	89 e5                	mov    %esp,%ebp
    return node->ref_count;
c0112213:	8b 45 08             	mov    0x8(%ebp),%eax
c0112216:	8b 40 30             	mov    0x30(%eax),%eax
}
c0112219:	5d                   	pop    %ebp
c011221a:	c3                   	ret    

c011221b <lock_sin>:

/*
 * lock_sin - lock the process of inode Rd/Wr
 */
static void
lock_sin(struct sfs_inode *sin) {
c011221b:	55                   	push   %ebp
c011221c:	89 e5                	mov    %esp,%ebp
c011221e:	83 ec 18             	sub    $0x18,%esp
    down(&(sin->sem));
c0112221:	8b 45 08             	mov    0x8(%ebp),%eax
c0112224:	83 c0 10             	add    $0x10,%eax
c0112227:	89 04 24             	mov    %eax,(%esp)
c011222a:	e8 a5 7a ff ff       	call   c0109cd4 <down>
}
c011222f:	c9                   	leave  
c0112230:	c3                   	ret    

c0112231 <unlock_sin>:

/*
 * unlock_sin - unlock the process of inode Rd/Wr
 */
static void
unlock_sin(struct sfs_inode *sin) {
c0112231:	55                   	push   %ebp
c0112232:	89 e5                	mov    %esp,%ebp
c0112234:	83 ec 18             	sub    $0x18,%esp
    up(&(sin->sem));
c0112237:	8b 45 08             	mov    0x8(%ebp),%eax
c011223a:	83 c0 10             	add    $0x10,%eax
c011223d:	89 04 24             	mov    %eax,(%esp)
c0112240:	e8 74 7a ff ff       	call   c0109cb9 <up>
}
c0112245:	c9                   	leave  
c0112246:	c3                   	ret    

c0112247 <sfs_get_ops>:

/*
 * sfs_get_ops - return function addr of fs_node_dirops/sfs_node_fileops
 */
static const struct inode_ops *
sfs_get_ops(uint16_t type) {
c0112247:	55                   	push   %ebp
c0112248:	89 e5                	mov    %esp,%ebp
c011224a:	83 ec 28             	sub    $0x28,%esp
c011224d:	8b 45 08             	mov    0x8(%ebp),%eax
c0112250:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
    switch (type) {
c0112254:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c0112258:	83 f8 01             	cmp    $0x1,%eax
c011225b:	74 0c                	je     c0112269 <sfs_get_ops+0x22>
c011225d:	83 f8 02             	cmp    $0x2,%eax
c0112260:	75 0e                	jne    c0112270 <sfs_get_ops+0x29>
    case SFS_TYPE_DIR:
        return &sfs_node_dirops;
c0112262:	b8 c0 94 11 c0       	mov    $0xc01194c0,%eax
c0112267:	eb 2b                	jmp    c0112294 <sfs_get_ops+0x4d>
    case SFS_TYPE_FILE:
        return &sfs_node_fileops;
c0112269:	b8 00 95 11 c0       	mov    $0xc0119500,%eax
c011226e:	eb 24                	jmp    c0112294 <sfs_get_ops+0x4d>
    }
    panic("invalid file type %d.\n", type);
c0112270:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c0112274:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112278:	c7 44 24 08 40 95 11 	movl   $0xc0119540,0x8(%esp)
c011227f:	c0 
c0112280:	c7 44 24 04 2e 00 00 	movl   $0x2e,0x4(%esp)
c0112287:	00 
c0112288:	c7 04 24 57 95 11 c0 	movl   $0xc0119557,(%esp)
c011228f:	e8 34 ec fe ff       	call   c0100ec8 <__panic>
}
c0112294:	c9                   	leave  
c0112295:	c3                   	ret    

c0112296 <sfs_hash_list>:

/*
 * sfs_hash_list - return inode entry in sfs->hash_list
 */
static list_entry_t *
sfs_hash_list(struct sfs_fs *sfs, uint32_t ino) {
c0112296:	55                   	push   %ebp
c0112297:	89 e5                	mov    %esp,%ebp
c0112299:	53                   	push   %ebx
c011229a:	83 ec 14             	sub    $0x14,%esp
    return sfs->hash_list + sin_hashfn(ino);
c011229d:	8b 45 08             	mov    0x8(%ebp),%eax
c01122a0:	8b 58 68             	mov    0x68(%eax),%ebx
c01122a3:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c01122aa:	00 
c01122ab:	8b 45 0c             	mov    0xc(%ebp),%eax
c01122ae:	89 04 24             	mov    %eax,(%esp)
c01122b1:	e8 35 27 00 00       	call   c01149eb <hash32>
c01122b6:	c1 e0 03             	shl    $0x3,%eax
c01122b9:	01 d8                	add    %ebx,%eax
}
c01122bb:	83 c4 14             	add    $0x14,%esp
c01122be:	5b                   	pop    %ebx
c01122bf:	5d                   	pop    %ebp
c01122c0:	c3                   	ret    

c01122c1 <sfs_set_links>:

/*
 * sfs_set_links - link inode sin in sfs->linked-list AND sfs->hash_link
 */
static void
sfs_set_links(struct sfs_fs *sfs, struct sfs_inode *sin) {
c01122c1:	55                   	push   %ebp
c01122c2:	89 e5                	mov    %esp,%ebp
c01122c4:	53                   	push   %ebx
c01122c5:	83 ec 54             	sub    $0x54,%esp
    list_add(&(sfs->inode_list), &(sin->inode_link));
c01122c8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01122cb:	83 c0 1c             	add    $0x1c,%eax
c01122ce:	8b 55 08             	mov    0x8(%ebp),%edx
c01122d1:	83 c2 60             	add    $0x60,%edx
c01122d4:	89 55 f4             	mov    %edx,-0xc(%ebp)
c01122d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01122da:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01122dd:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01122e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01122e3:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c01122e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01122e9:	8b 40 04             	mov    0x4(%eax),%eax
c01122ec:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01122ef:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c01122f2:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01122f5:	89 55 e0             	mov    %edx,-0x20(%ebp)
c01122f8:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01122fb:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01122fe:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0112301:	89 10                	mov    %edx,(%eax)
c0112303:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0112306:	8b 10                	mov    (%eax),%edx
c0112308:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011230b:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c011230e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0112311:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0112314:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0112317:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011231a:	8b 55 e0             	mov    -0x20(%ebp),%edx
c011231d:	89 10                	mov    %edx,(%eax)
    list_add(sfs_hash_list(sfs, sin->ino), &(sin->hash_link));
c011231f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112322:	8d 58 24             	lea    0x24(%eax),%ebx
c0112325:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112328:	8b 40 04             	mov    0x4(%eax),%eax
c011232b:	89 44 24 04          	mov    %eax,0x4(%esp)
c011232f:	8b 45 08             	mov    0x8(%ebp),%eax
c0112332:	89 04 24             	mov    %eax,(%esp)
c0112335:	e8 5c ff ff ff       	call   c0112296 <sfs_hash_list>
c011233a:	89 45 d8             	mov    %eax,-0x28(%ebp)
c011233d:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
c0112340:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0112343:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0112346:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0112349:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c011234c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011234f:	8b 40 04             	mov    0x4(%eax),%eax
c0112352:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0112355:	89 55 c8             	mov    %edx,-0x38(%ebp)
c0112358:	8b 55 d0             	mov    -0x30(%ebp),%edx
c011235b:	89 55 c4             	mov    %edx,-0x3c(%ebp)
c011235e:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0112361:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0112364:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0112367:	89 10                	mov    %edx,(%eax)
c0112369:	8b 45 c0             	mov    -0x40(%ebp),%eax
c011236c:	8b 10                	mov    (%eax),%edx
c011236e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0112371:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0112374:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0112377:	8b 55 c0             	mov    -0x40(%ebp),%edx
c011237a:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c011237d:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0112380:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0112383:	89 10                	mov    %edx,(%eax)
}
c0112385:	83 c4 54             	add    $0x54,%esp
c0112388:	5b                   	pop    %ebx
c0112389:	5d                   	pop    %ebp
c011238a:	c3                   	ret    

c011238b <sfs_remove_links>:

/*
 * sfs_remove_links - unlink inode sin in sfs->linked-list AND sfs->hash_link
 */
static void
sfs_remove_links(struct sfs_inode *sin) {
c011238b:	55                   	push   %ebp
c011238c:	89 e5                	mov    %esp,%ebp
c011238e:	83 ec 20             	sub    $0x20,%esp
    list_del(&(sin->inode_link));
c0112391:	8b 45 08             	mov    0x8(%ebp),%eax
c0112394:	83 c0 1c             	add    $0x1c,%eax
c0112397:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c011239a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c011239d:	8b 40 04             	mov    0x4(%eax),%eax
c01123a0:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01123a3:	8b 12                	mov    (%edx),%edx
c01123a5:	89 55 f8             	mov    %edx,-0x8(%ebp)
c01123a8:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01123ab:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01123ae:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01123b1:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c01123b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01123b7:	8b 55 f8             	mov    -0x8(%ebp),%edx
c01123ba:	89 10                	mov    %edx,(%eax)
    list_del(&(sin->hash_link));
c01123bc:	8b 45 08             	mov    0x8(%ebp),%eax
c01123bf:	83 c0 24             	add    $0x24,%eax
c01123c2:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c01123c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01123c8:	8b 40 04             	mov    0x4(%eax),%eax
c01123cb:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01123ce:	8b 12                	mov    (%edx),%edx
c01123d0:	89 55 ec             	mov    %edx,-0x14(%ebp)
c01123d3:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01123d6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01123d9:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01123dc:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c01123df:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01123e2:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01123e5:	89 10                	mov    %edx,(%eax)
}
c01123e7:	c9                   	leave  
c01123e8:	c3                   	ret    

c01123e9 <sfs_block_inuse>:

/*
 * sfs_block_inuse - check the inode with NO. ino inuse info in bitmap
 */
static bool
sfs_block_inuse(struct sfs_fs *sfs, uint32_t ino) {
c01123e9:	55                   	push   %ebp
c01123ea:	89 e5                	mov    %esp,%ebp
c01123ec:	83 ec 28             	sub    $0x28,%esp
    if (ino != 0 && ino < sfs->super.blocks) {
c01123ef:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01123f3:	74 2a                	je     c011241f <sfs_block_inuse+0x36>
c01123f5:	8b 45 08             	mov    0x8(%ebp),%eax
c01123f8:	8b 40 04             	mov    0x4(%eax),%eax
c01123fb:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01123fe:	76 1f                	jbe    c011241f <sfs_block_inuse+0x36>
        return !bitmap_test(sfs->freemap, ino);
c0112400:	8b 45 08             	mov    0x8(%ebp),%eax
c0112403:	8b 40 30             	mov    0x30(%eax),%eax
c0112406:	8b 55 0c             	mov    0xc(%ebp),%edx
c0112409:	89 54 24 04          	mov    %edx,0x4(%esp)
c011240d:	89 04 24             	mov    %eax,(%esp)
c0112410:	e8 19 f4 ff ff       	call   c011182e <bitmap_test>
c0112415:	85 c0                	test   %eax,%eax
c0112417:	0f 94 c0             	sete   %al
c011241a:	0f b6 c0             	movzbl %al,%eax
c011241d:	eb 2d                	jmp    c011244c <sfs_block_inuse+0x63>
    }
    panic("sfs_block_inuse: called out of range (0, %u) %u.\n", sfs->super.blocks, ino);
c011241f:	8b 45 08             	mov    0x8(%ebp),%eax
c0112422:	8b 40 04             	mov    0x4(%eax),%eax
c0112425:	8b 55 0c             	mov    0xc(%ebp),%edx
c0112428:	89 54 24 10          	mov    %edx,0x10(%esp)
c011242c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112430:	c7 44 24 08 70 95 11 	movl   $0xc0119570,0x8(%esp)
c0112437:	c0 
c0112438:	c7 44 24 04 53 00 00 	movl   $0x53,0x4(%esp)
c011243f:	00 
c0112440:	c7 04 24 57 95 11 c0 	movl   $0xc0119557,(%esp)
c0112447:	e8 7c ea fe ff       	call   c0100ec8 <__panic>
}
c011244c:	c9                   	leave  
c011244d:	c3                   	ret    

c011244e <sfs_block_alloc>:

/*
 * sfs_block_alloc -  check and get a free disk block
 */
static int
sfs_block_alloc(struct sfs_fs *sfs, uint32_t *ino_store) {
c011244e:	55                   	push   %ebp
c011244f:	89 e5                	mov    %esp,%ebp
c0112451:	83 ec 28             	sub    $0x28,%esp
    int ret;
    if ((ret = bitmap_alloc(sfs->freemap, ino_store)) != 0) {
c0112454:	8b 45 08             	mov    0x8(%ebp),%eax
c0112457:	8b 40 30             	mov    0x30(%eax),%eax
c011245a:	8b 55 0c             	mov    0xc(%ebp),%edx
c011245d:	89 54 24 04          	mov    %edx,0x4(%esp)
c0112461:	89 04 24             	mov    %eax,(%esp)
c0112464:	e8 63 f2 ff ff       	call   c01116cc <bitmap_alloc>
c0112469:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011246c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112470:	74 08                	je     c011247a <sfs_block_alloc+0x2c>
        return ret;
c0112472:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112475:	e9 9f 00 00 00       	jmp    c0112519 <sfs_block_alloc+0xcb>
    }
    assert(sfs->super.unused_blocks > 0);
c011247a:	8b 45 08             	mov    0x8(%ebp),%eax
c011247d:	8b 40 08             	mov    0x8(%eax),%eax
c0112480:	85 c0                	test   %eax,%eax
c0112482:	75 24                	jne    c01124a8 <sfs_block_alloc+0x5a>
c0112484:	c7 44 24 0c a2 95 11 	movl   $0xc01195a2,0xc(%esp)
c011248b:	c0 
c011248c:	c7 44 24 08 bf 95 11 	movl   $0xc01195bf,0x8(%esp)
c0112493:	c0 
c0112494:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
c011249b:	00 
c011249c:	c7 04 24 57 95 11 c0 	movl   $0xc0119557,(%esp)
c01124a3:	e8 20 ea fe ff       	call   c0100ec8 <__panic>
    sfs->super.unused_blocks --, sfs->super_dirty = 1;
c01124a8:	8b 45 08             	mov    0x8(%ebp),%eax
c01124ab:	8b 40 08             	mov    0x8(%eax),%eax
c01124ae:	8d 50 ff             	lea    -0x1(%eax),%edx
c01124b1:	8b 45 08             	mov    0x8(%ebp),%eax
c01124b4:	89 50 08             	mov    %edx,0x8(%eax)
c01124b7:	8b 45 08             	mov    0x8(%ebp),%eax
c01124ba:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%eax)
    assert(sfs_block_inuse(sfs, *ino_store));
c01124c1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01124c4:	8b 00                	mov    (%eax),%eax
c01124c6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01124ca:	8b 45 08             	mov    0x8(%ebp),%eax
c01124cd:	89 04 24             	mov    %eax,(%esp)
c01124d0:	e8 14 ff ff ff       	call   c01123e9 <sfs_block_inuse>
c01124d5:	85 c0                	test   %eax,%eax
c01124d7:	75 24                	jne    c01124fd <sfs_block_alloc+0xaf>
c01124d9:	c7 44 24 0c d4 95 11 	movl   $0xc01195d4,0xc(%esp)
c01124e0:	c0 
c01124e1:	c7 44 24 08 bf 95 11 	movl   $0xc01195bf,0x8(%esp)
c01124e8:	c0 
c01124e9:	c7 44 24 04 61 00 00 	movl   $0x61,0x4(%esp)
c01124f0:	00 
c01124f1:	c7 04 24 57 95 11 c0 	movl   $0xc0119557,(%esp)
c01124f8:	e8 cb e9 fe ff       	call   c0100ec8 <__panic>
    return sfs_clear_block(sfs, *ino_store, 1);
c01124fd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112500:	8b 00                	mov    (%eax),%eax
c0112502:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0112509:	00 
c011250a:	89 44 24 04          	mov    %eax,0x4(%esp)
c011250e:	8b 45 08             	mov    0x8(%ebp),%eax
c0112511:	89 04 24             	mov    %eax,(%esp)
c0112514:	e8 f4 23 00 00       	call   c011490d <sfs_clear_block>
}
c0112519:	c9                   	leave  
c011251a:	c3                   	ret    

c011251b <sfs_block_free>:

/*
 * sfs_block_free - set related bits for ino block to 1(means free) in bitmap, add sfs->super.unused_blocks, set superblock dirty *
 */
static void
sfs_block_free(struct sfs_fs *sfs, uint32_t ino) {
c011251b:	55                   	push   %ebp
c011251c:	89 e5                	mov    %esp,%ebp
c011251e:	83 ec 18             	sub    $0x18,%esp
    assert(sfs_block_inuse(sfs, ino));
c0112521:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112524:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112528:	8b 45 08             	mov    0x8(%ebp),%eax
c011252b:	89 04 24             	mov    %eax,(%esp)
c011252e:	e8 b6 fe ff ff       	call   c01123e9 <sfs_block_inuse>
c0112533:	85 c0                	test   %eax,%eax
c0112535:	75 24                	jne    c011255b <sfs_block_free+0x40>
c0112537:	c7 44 24 0c f5 95 11 	movl   $0xc01195f5,0xc(%esp)
c011253e:	c0 
c011253f:	c7 44 24 08 bf 95 11 	movl   $0xc01195bf,0x8(%esp)
c0112546:	c0 
c0112547:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c011254e:	00 
c011254f:	c7 04 24 57 95 11 c0 	movl   $0xc0119557,(%esp)
c0112556:	e8 6d e9 fe ff       	call   c0100ec8 <__panic>
    bitmap_free(sfs->freemap, ino);
c011255b:	8b 45 08             	mov    0x8(%ebp),%eax
c011255e:	8b 40 30             	mov    0x30(%eax),%eax
c0112561:	8b 55 0c             	mov    0xc(%ebp),%edx
c0112564:	89 54 24 04          	mov    %edx,0x4(%esp)
c0112568:	89 04 24             	mov    %eax,(%esp)
c011256b:	e8 f0 f2 ff ff       	call   c0111860 <bitmap_free>
    sfs->super.unused_blocks ++, sfs->super_dirty = 1;
c0112570:	8b 45 08             	mov    0x8(%ebp),%eax
c0112573:	8b 40 08             	mov    0x8(%eax),%eax
c0112576:	8d 50 01             	lea    0x1(%eax),%edx
c0112579:	8b 45 08             	mov    0x8(%ebp),%eax
c011257c:	89 50 08             	mov    %edx,0x8(%eax)
c011257f:	8b 45 08             	mov    0x8(%ebp),%eax
c0112582:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%eax)
}
c0112589:	c9                   	leave  
c011258a:	c3                   	ret    

c011258b <sfs_create_inode>:

/*
 * sfs_create_inode - alloc a inode in memroy, and init din/ino/dirty/reclian_count/sem fields in sfs_inode in inode
 */
static int
sfs_create_inode(struct sfs_fs *sfs, struct sfs_disk_inode *din, uint32_t ino, struct inode **node_store) {
c011258b:	55                   	push   %ebp
c011258c:	89 e5                	mov    %esp,%ebp
c011258e:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = alloc_inode(sfs_inode)) != NULL) {
c0112591:	c7 04 24 35 12 00 00 	movl   $0x1235,(%esp)
c0112598:	e8 6d ca ff ff       	call   c010f00a <__alloc_inode>
c011259d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01125a0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01125a4:	0f 84 b5 00 00 00    	je     c011265f <sfs_create_inode+0xd4>
        vop_init(node, sfs_get_ops(din->type), info2fs(sfs, sfs));
c01125aa:	8b 45 0c             	mov    0xc(%ebp),%eax
c01125ad:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c01125b1:	0f b7 c0             	movzwl %ax,%eax
c01125b4:	89 04 24             	mov    %eax,(%esp)
c01125b7:	e8 8b fc ff ff       	call   c0112247 <sfs_get_ops>
c01125bc:	8b 55 08             	mov    0x8(%ebp),%edx
c01125bf:	89 54 24 08          	mov    %edx,0x8(%esp)
c01125c3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01125c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01125ca:	89 04 24             	mov    %eax,(%esp)
c01125cd:	e8 61 ca ff ff       	call   c010f033 <inode_init>
        struct sfs_inode *sin = vop_info(node, sfs_inode);
c01125d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01125d5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01125d8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01125dc:	74 0d                	je     c01125eb <sfs_create_inode+0x60>
c01125de:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01125e1:	8b 40 2c             	mov    0x2c(%eax),%eax
c01125e4:	3d 35 12 00 00       	cmp    $0x1235,%eax
c01125e9:	74 24                	je     c011260f <sfs_create_inode+0x84>
c01125eb:	c7 44 24 0c 10 96 11 	movl   $0xc0119610,0xc(%esp)
c01125f2:	c0 
c01125f3:	c7 44 24 08 bf 95 11 	movl   $0xc01195bf,0x8(%esp)
c01125fa:	c0 
c01125fb:	c7 44 24 04 77 00 00 	movl   $0x77,0x4(%esp)
c0112602:	00 
c0112603:	c7 04 24 57 95 11 c0 	movl   $0xc0119557,(%esp)
c011260a:	e8 b9 e8 fe ff       	call   c0100ec8 <__panic>
c011260f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112612:	89 45 ec             	mov    %eax,-0x14(%ebp)
        sin->din = din, sin->ino = ino, sin->dirty = 0, sin->reclaim_count = 1;
c0112615:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112618:	8b 55 0c             	mov    0xc(%ebp),%edx
c011261b:	89 10                	mov    %edx,(%eax)
c011261d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112620:	8b 55 10             	mov    0x10(%ebp),%edx
c0112623:	89 50 04             	mov    %edx,0x4(%eax)
c0112626:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112629:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c0112630:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112633:	c7 40 0c 01 00 00 00 	movl   $0x1,0xc(%eax)
        sem_init(&(sin->sem), 1);
c011263a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011263d:	83 c0 10             	add    $0x10,%eax
c0112640:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0112647:	00 
c0112648:	89 04 24             	mov    %eax,(%esp)
c011264b:	e8 f6 74 ff ff       	call   c0109b46 <sem_init>
        *node_store = node;
c0112650:	8b 45 14             	mov    0x14(%ebp),%eax
c0112653:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0112656:	89 10                	mov    %edx,(%eax)
        return 0;
c0112658:	b8 00 00 00 00       	mov    $0x0,%eax
c011265d:	eb 05                	jmp    c0112664 <sfs_create_inode+0xd9>
    }
    return -E_NO_MEM;
c011265f:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c0112664:	c9                   	leave  
c0112665:	c3                   	ret    

c0112666 <lookup_sfs_nolock>:
 * lookup_sfs_nolock - according ino, find related inode
 *
 * NOTICE: le2sin, info2node MACRO
 */
static struct inode *
lookup_sfs_nolock(struct sfs_fs *sfs, uint32_t ino) {
c0112666:	55                   	push   %ebp
c0112667:	89 e5                	mov    %esp,%ebp
c0112669:	83 ec 38             	sub    $0x38,%esp
    struct inode *node;
    list_entry_t *list = sfs_hash_list(sfs, ino), *le = list;
c011266c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011266f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112673:	8b 45 08             	mov    0x8(%ebp),%eax
c0112676:	89 04 24             	mov    %eax,(%esp)
c0112679:	e8 18 fc ff ff       	call   c0112296 <sfs_hash_list>
c011267e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112681:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112684:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c0112687:	eb 3e                	jmp    c01126c7 <lookup_sfs_nolock+0x61>
        struct sfs_inode *sin = le2sin(le, hash_link);
c0112689:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011268c:	83 e8 24             	sub    $0x24,%eax
c011268f:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (sin->ino == ino) {
c0112692:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112695:	8b 40 04             	mov    0x4(%eax),%eax
c0112698:	3b 45 0c             	cmp    0xc(%ebp),%eax
c011269b:	75 2a                	jne    c01126c7 <lookup_sfs_nolock+0x61>
            node = info2node(sin, sfs_inode);
c011269d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01126a0:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (vop_ref_inc(node) == 1) {
c01126a3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01126a6:	89 04 24             	mov    %eax,(%esp)
c01126a9:	e8 37 ca ff ff       	call   c010f0e5 <inode_ref_inc>
c01126ae:	83 f8 01             	cmp    $0x1,%eax
c01126b1:	75 0f                	jne    c01126c2 <lookup_sfs_nolock+0x5c>
                sin->reclaim_count ++;
c01126b3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01126b6:	8b 40 0c             	mov    0xc(%eax),%eax
c01126b9:	8d 50 01             	lea    0x1(%eax),%edx
c01126bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01126bf:	89 50 0c             	mov    %edx,0xc(%eax)
            }
            return node;
c01126c2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01126c5:	eb 1c                	jmp    c01126e3 <lookup_sfs_nolock+0x7d>
c01126c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01126ca:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01126cd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01126d0:	8b 40 04             	mov    0x4(%eax),%eax
 */
static struct inode *
lookup_sfs_nolock(struct sfs_fs *sfs, uint32_t ino) {
    struct inode *node;
    list_entry_t *list = sfs_hash_list(sfs, ino), *le = list;
    while ((le = list_next(le)) != list) {
c01126d3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01126d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01126d9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01126dc:	75 ab                	jne    c0112689 <lookup_sfs_nolock+0x23>
                sin->reclaim_count ++;
            }
            return node;
        }
    }
    return NULL;
c01126de:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01126e3:	c9                   	leave  
c01126e4:	c3                   	ret    

c01126e5 <sfs_load_inode>:
/*
 * sfs_load_inode - If the inode isn't existed, load inode related ino disk block data into a new created inode.
 *                  If the inode is in memory alreadily, then do nothing
 */
int
sfs_load_inode(struct sfs_fs *sfs, struct inode **node_store, uint32_t ino) {
c01126e5:	55                   	push   %ebp
c01126e6:	89 e5                	mov    %esp,%ebp
c01126e8:	83 ec 38             	sub    $0x38,%esp
    lock_sfs_fs(sfs);
c01126eb:	8b 45 08             	mov    0x8(%ebp),%eax
c01126ee:	89 04 24             	mov    %eax,(%esp)
c01126f1:	e8 9d 22 00 00       	call   c0114993 <lock_sfs_fs>
    struct inode *node;
    if ((node = lookup_sfs_nolock(sfs, ino)) != NULL) {
c01126f6:	8b 45 10             	mov    0x10(%ebp),%eax
c01126f9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01126fd:	8b 45 08             	mov    0x8(%ebp),%eax
c0112700:	89 04 24             	mov    %eax,(%esp)
c0112703:	e8 5e ff ff ff       	call   c0112666 <lookup_sfs_nolock>
c0112708:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011270b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011270e:	85 c0                	test   %eax,%eax
c0112710:	74 05                	je     c0112717 <sfs_load_inode+0x32>
        goto out_unlock;
c0112712:	e9 3c 01 00 00       	jmp    c0112853 <sfs_load_inode+0x16e>
    }

    int ret = -E_NO_MEM;
c0112717:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    struct sfs_disk_inode *din;
    if ((din = kmalloc(sizeof(struct sfs_disk_inode))) == NULL) {
c011271e:	c7 04 24 40 00 00 00 	movl   $0x40,(%esp)
c0112725:	e8 b5 25 ff ff       	call   c0104cdf <kmalloc>
c011272a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011272d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112731:	75 05                	jne    c0112738 <sfs_load_inode+0x53>
        goto failed_unlock;
c0112733:	e9 40 01 00 00       	jmp    c0112878 <sfs_load_inode+0x193>
    }

    assert(sfs_block_inuse(sfs, ino));
c0112738:	8b 45 10             	mov    0x10(%ebp),%eax
c011273b:	89 44 24 04          	mov    %eax,0x4(%esp)
c011273f:	8b 45 08             	mov    0x8(%ebp),%eax
c0112742:	89 04 24             	mov    %eax,(%esp)
c0112745:	e8 9f fc ff ff       	call   c01123e9 <sfs_block_inuse>
c011274a:	85 c0                	test   %eax,%eax
c011274c:	75 24                	jne    c0112772 <sfs_load_inode+0x8d>
c011274e:	c7 44 24 0c f5 95 11 	movl   $0xc01195f5,0xc(%esp)
c0112755:	c0 
c0112756:	c7 44 24 08 bf 95 11 	movl   $0xc01195bf,0x8(%esp)
c011275d:	c0 
c011275e:	c7 44 24 04 a8 00 00 	movl   $0xa8,0x4(%esp)
c0112765:	00 
c0112766:	c7 04 24 57 95 11 c0 	movl   $0xc0119557,(%esp)
c011276d:	e8 56 e7 fe ff       	call   c0100ec8 <__panic>
    if ((ret = sfs_rbuf(sfs, din, sizeof(struct sfs_disk_inode), ino, 0)) != 0) {
c0112772:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0112779:	00 
c011277a:	8b 45 10             	mov    0x10(%ebp),%eax
c011277d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112781:	c7 44 24 08 40 00 00 	movl   $0x40,0x8(%esp)
c0112788:	00 
c0112789:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011278c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112790:	8b 45 08             	mov    0x8(%ebp),%eax
c0112793:	89 04 24             	mov    %eax,(%esp)
c0112796:	e8 e9 1e 00 00       	call   c0114684 <sfs_rbuf>
c011279b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011279e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01127a2:	74 05                	je     c01127a9 <sfs_load_inode+0xc4>
        goto failed_cleanup_din;
c01127a4:	e9 c4 00 00 00       	jmp    c011286d <sfs_load_inode+0x188>
    }

    assert(din->nlinks != 0);
c01127a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01127ac:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c01127b0:	66 85 c0             	test   %ax,%ax
c01127b3:	75 24                	jne    c01127d9 <sfs_load_inode+0xf4>
c01127b5:	c7 44 24 0c 46 96 11 	movl   $0xc0119646,0xc(%esp)
c01127bc:	c0 
c01127bd:	c7 44 24 08 bf 95 11 	movl   $0xc01195bf,0x8(%esp)
c01127c4:	c0 
c01127c5:	c7 44 24 04 ad 00 00 	movl   $0xad,0x4(%esp)
c01127cc:	00 
c01127cd:	c7 04 24 57 95 11 c0 	movl   $0xc0119557,(%esp)
c01127d4:	e8 ef e6 fe ff       	call   c0100ec8 <__panic>
    if ((ret = sfs_create_inode(sfs, din, ino, &node)) != 0) {
c01127d9:	8d 45 e8             	lea    -0x18(%ebp),%eax
c01127dc:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01127e0:	8b 45 10             	mov    0x10(%ebp),%eax
c01127e3:	89 44 24 08          	mov    %eax,0x8(%esp)
c01127e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01127ea:	89 44 24 04          	mov    %eax,0x4(%esp)
c01127ee:	8b 45 08             	mov    0x8(%ebp),%eax
c01127f1:	89 04 24             	mov    %eax,(%esp)
c01127f4:	e8 92 fd ff ff       	call   c011258b <sfs_create_inode>
c01127f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01127fc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112800:	74 02                	je     c0112804 <sfs_load_inode+0x11f>
        goto failed_cleanup_din;
c0112802:	eb 69                	jmp    c011286d <sfs_load_inode+0x188>
    }
    sfs_set_links(sfs, vop_info(node, sfs_inode));
c0112804:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112807:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011280a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011280e:	74 0d                	je     c011281d <sfs_load_inode+0x138>
c0112810:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112813:	8b 40 2c             	mov    0x2c(%eax),%eax
c0112816:	3d 35 12 00 00       	cmp    $0x1235,%eax
c011281b:	74 24                	je     c0112841 <sfs_load_inode+0x15c>
c011281d:	c7 44 24 0c 10 96 11 	movl   $0xc0119610,0xc(%esp)
c0112824:	c0 
c0112825:	c7 44 24 08 bf 95 11 	movl   $0xc01195bf,0x8(%esp)
c011282c:	c0 
c011282d:	c7 44 24 04 b1 00 00 	movl   $0xb1,0x4(%esp)
c0112834:	00 
c0112835:	c7 04 24 57 95 11 c0 	movl   $0xc0119557,(%esp)
c011283c:	e8 87 e6 fe ff       	call   c0100ec8 <__panic>
c0112841:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112844:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112848:	8b 45 08             	mov    0x8(%ebp),%eax
c011284b:	89 04 24             	mov    %eax,(%esp)
c011284e:	e8 6e fa ff ff       	call   c01122c1 <sfs_set_links>

out_unlock:
    unlock_sfs_fs(sfs);
c0112853:	8b 45 08             	mov    0x8(%ebp),%eax
c0112856:	89 04 24             	mov    %eax,(%esp)
c0112859:	e8 61 21 00 00       	call   c01149bf <unlock_sfs_fs>
    *node_store = node;
c011285e:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0112861:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112864:	89 10                	mov    %edx,(%eax)
    return 0;
c0112866:	b8 00 00 00 00       	mov    $0x0,%eax
c011286b:	eb 19                	jmp    c0112886 <sfs_load_inode+0x1a1>

failed_cleanup_din:
    kfree(din);
c011286d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112870:	89 04 24             	mov    %eax,(%esp)
c0112873:	e8 82 24 ff ff       	call   c0104cfa <kfree>
failed_unlock:
    unlock_sfs_fs(sfs);
c0112878:	8b 45 08             	mov    0x8(%ebp),%eax
c011287b:	89 04 24             	mov    %eax,(%esp)
c011287e:	e8 3c 21 00 00       	call   c01149bf <unlock_sfs_fs>
    return ret;
c0112883:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0112886:	c9                   	leave  
c0112887:	c3                   	ret    

c0112888 <sfs_bmap_get_sub_nolock>:
 * @index:    the index of block in indrect block
 * @create:   BOOL, if the block isn't allocated, if create = 1 the alloc a block,  otherwise just do nothing
 * @ino_store: 0 OR the index of already inused block or new allocated block.
 */
static int
sfs_bmap_get_sub_nolock(struct sfs_fs *sfs, uint32_t *entp, uint32_t index, bool create, uint32_t *ino_store) {
c0112888:	55                   	push   %ebp
c0112889:	89 e5                	mov    %esp,%ebp
c011288b:	83 ec 38             	sub    $0x38,%esp
    assert(index < SFS_BLK_NENTRY);
c011288e:	81 7d 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%ebp)
c0112895:	76 24                	jbe    c01128bb <sfs_bmap_get_sub_nolock+0x33>
c0112897:	c7 44 24 0c 57 96 11 	movl   $0xc0119657,0xc(%esp)
c011289e:	c0 
c011289f:	c7 44 24 08 bf 95 11 	movl   $0xc01195bf,0x8(%esp)
c01128a6:	c0 
c01128a7:	c7 44 24 04 ca 00 00 	movl   $0xca,0x4(%esp)
c01128ae:	00 
c01128af:	c7 04 24 57 95 11 c0 	movl   $0xc0119557,(%esp)
c01128b6:	e8 0d e6 fe ff       	call   c0100ec8 <__panic>
    int ret;
    uint32_t ent, ino = 0;
c01128bb:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    off_t offset = index * sizeof(uint32_t);  // the offset of entry in entry block
c01128c2:	8b 45 10             	mov    0x10(%ebp),%eax
c01128c5:	c1 e0 02             	shl    $0x2,%eax
c01128c8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	// if entry block is existd, read the content of entry block into  sfs->sfs_buffer
    if ((ent = *entp) != 0) {
c01128cb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01128ce:	8b 00                	mov    (%eax),%eax
c01128d0:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01128d3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01128d6:	85 c0                	test   %eax,%eax
c01128d8:	74 50                	je     c011292a <sfs_bmap_get_sub_nolock+0xa2>
        if ((ret = sfs_rbuf(sfs, &ino, sizeof(uint32_t), ent, offset)) != 0) {
c01128da:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01128dd:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01128e0:	89 54 24 10          	mov    %edx,0x10(%esp)
c01128e4:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01128e8:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c01128ef:	00 
c01128f0:	8d 45 e8             	lea    -0x18(%ebp),%eax
c01128f3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01128f7:	8b 45 08             	mov    0x8(%ebp),%eax
c01128fa:	89 04 24             	mov    %eax,(%esp)
c01128fd:	e8 82 1d 00 00       	call   c0114684 <sfs_rbuf>
c0112902:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112905:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112909:	74 08                	je     c0112913 <sfs_bmap_get_sub_nolock+0x8b>
            return ret;
c011290b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011290e:	e9 eb 00 00 00       	jmp    c01129fe <sfs_bmap_get_sub_nolock+0x176>
        }
        if (ino != 0 || !create) {
c0112913:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112916:	85 c0                	test   %eax,%eax
c0112918:	0f 85 9c 00 00 00    	jne    c01129ba <sfs_bmap_get_sub_nolock+0x132>
c011291e:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0112922:	0f 84 92 00 00 00    	je     c01129ba <sfs_bmap_get_sub_nolock+0x132>
c0112928:	eb 2e                	jmp    c0112958 <sfs_bmap_get_sub_nolock+0xd0>
            goto out;
        }
    }
    else {
        if (!create) {
c011292a:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c011292e:	75 05                	jne    c0112935 <sfs_bmap_get_sub_nolock+0xad>
            goto out;
c0112930:	e9 85 00 00 00       	jmp    c01129ba <sfs_bmap_get_sub_nolock+0x132>
        }
		//if entry block isn't existd, allocated a entry block (for indrect block)
        if ((ret = sfs_block_alloc(sfs, &ent)) != 0) {
c0112935:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0112938:	89 44 24 04          	mov    %eax,0x4(%esp)
c011293c:	8b 45 08             	mov    0x8(%ebp),%eax
c011293f:	89 04 24             	mov    %eax,(%esp)
c0112942:	e8 07 fb ff ff       	call   c011244e <sfs_block_alloc>
c0112947:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011294a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011294e:	74 08                	je     c0112958 <sfs_bmap_get_sub_nolock+0xd0>
            return ret;
c0112950:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112953:	e9 a6 00 00 00       	jmp    c01129fe <sfs_bmap_get_sub_nolock+0x176>
        }
    }
    
    if ((ret = sfs_block_alloc(sfs, &ino)) != 0) {
c0112958:	8d 45 e8             	lea    -0x18(%ebp),%eax
c011295b:	89 44 24 04          	mov    %eax,0x4(%esp)
c011295f:	8b 45 08             	mov    0x8(%ebp),%eax
c0112962:	89 04 24             	mov    %eax,(%esp)
c0112965:	e8 e4 fa ff ff       	call   c011244e <sfs_block_alloc>
c011296a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011296d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112971:	74 02                	je     c0112975 <sfs_bmap_get_sub_nolock+0xed>
        goto failed_cleanup;
c0112973:	eb 68                	jmp    c01129dd <sfs_bmap_get_sub_nolock+0x155>
    }
    if ((ret = sfs_wbuf(sfs, &ino, sizeof(uint32_t), ent, offset)) != 0) {
c0112975:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112978:	8b 55 f0             	mov    -0x10(%ebp),%edx
c011297b:	89 54 24 10          	mov    %edx,0x10(%esp)
c011297f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112983:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c011298a:	00 
c011298b:	8d 45 e8             	lea    -0x18(%ebp),%eax
c011298e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112992:	8b 45 08             	mov    0x8(%ebp),%eax
c0112995:	89 04 24             	mov    %eax,(%esp)
c0112998:	e8 a0 1d 00 00       	call   c011473d <sfs_wbuf>
c011299d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01129a0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01129a4:	74 14                	je     c01129ba <sfs_bmap_get_sub_nolock+0x132>
        sfs_block_free(sfs, ino);
c01129a6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01129a9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01129ad:	8b 45 08             	mov    0x8(%ebp),%eax
c01129b0:	89 04 24             	mov    %eax,(%esp)
c01129b3:	e8 63 fb ff ff       	call   c011251b <sfs_block_free>
        goto failed_cleanup;
c01129b8:	eb 23                	jmp    c01129dd <sfs_bmap_get_sub_nolock+0x155>
    }

out:
    if (ent != *entp) {
c01129ba:	8b 45 0c             	mov    0xc(%ebp),%eax
c01129bd:	8b 10                	mov    (%eax),%edx
c01129bf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01129c2:	39 c2                	cmp    %eax,%edx
c01129c4:	74 08                	je     c01129ce <sfs_bmap_get_sub_nolock+0x146>
        *entp = ent;
c01129c6:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01129c9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01129cc:	89 10                	mov    %edx,(%eax)
    }
    *ino_store = ino;
c01129ce:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01129d1:	8b 45 18             	mov    0x18(%ebp),%eax
c01129d4:	89 10                	mov    %edx,(%eax)
    return 0;
c01129d6:	b8 00 00 00 00       	mov    $0x0,%eax
c01129db:	eb 21                	jmp    c01129fe <sfs_bmap_get_sub_nolock+0x176>

failed_cleanup:
    if (ent != *entp) {
c01129dd:	8b 45 0c             	mov    0xc(%ebp),%eax
c01129e0:	8b 10                	mov    (%eax),%edx
c01129e2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01129e5:	39 c2                	cmp    %eax,%edx
c01129e7:	74 12                	je     c01129fb <sfs_bmap_get_sub_nolock+0x173>
        sfs_block_free(sfs, ent);
c01129e9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01129ec:	89 44 24 04          	mov    %eax,0x4(%esp)
c01129f0:	8b 45 08             	mov    0x8(%ebp),%eax
c01129f3:	89 04 24             	mov    %eax,(%esp)
c01129f6:	e8 20 fb ff ff       	call   c011251b <sfs_block_free>
    }
    return ret;
c01129fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01129fe:	c9                   	leave  
c01129ff:	c3                   	ret    

c0112a00 <sfs_bmap_get_nolock>:
 * @index:    the index of block in inode
 * @create:   BOOL, if the block isn't allocated, if create = 1 the alloc a block,  otherwise just do nothing
 * @ino_store: 0 OR the index of already inused block or new allocated block.
 */
static int
sfs_bmap_get_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t index, bool create, uint32_t *ino_store) {
c0112a00:	55                   	push   %ebp
c0112a01:	89 e5                	mov    %esp,%ebp
c0112a03:	83 ec 38             	sub    $0x38,%esp
    struct sfs_disk_inode *din = sin->din;
c0112a06:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112a09:	8b 00                	mov    (%eax),%eax
c0112a0b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int ret;
    uint32_t ent, ino;
	// the index of disk block is in the fist SFS_NDIRECT  direct blocks
    if (index < SFS_NDIRECT) {
c0112a0e:	83 7d 10 0b          	cmpl   $0xb,0x10(%ebp)
c0112a12:	77 5e                	ja     c0112a72 <sfs_bmap_get_nolock+0x72>
        if ((ino = din->direct[index]) == 0 && create) {
c0112a14:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112a17:	8b 55 10             	mov    0x10(%ebp),%edx
c0112a1a:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
c0112a1e:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0112a21:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112a24:	85 c0                	test   %eax,%eax
c0112a26:	75 45                	jne    c0112a6d <sfs_bmap_get_nolock+0x6d>
c0112a28:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0112a2c:	74 3f                	je     c0112a6d <sfs_bmap_get_nolock+0x6d>
            if ((ret = sfs_block_alloc(sfs, &ino)) != 0) {
c0112a2e:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0112a31:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112a35:	8b 45 08             	mov    0x8(%ebp),%eax
c0112a38:	89 04 24             	mov    %eax,(%esp)
c0112a3b:	e8 0e fa ff ff       	call   c011244e <sfs_block_alloc>
c0112a40:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112a43:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112a47:	74 08                	je     c0112a51 <sfs_bmap_get_nolock+0x51>
                return ret;
c0112a49:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112a4c:	e9 2f 01 00 00       	jmp    c0112b80 <sfs_bmap_get_nolock+0x180>
            }
            din->direct[index] = ino;
c0112a51:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0112a54:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112a57:	8b 55 10             	mov    0x10(%ebp),%edx
c0112a5a:	89 4c 90 0c          	mov    %ecx,0xc(%eax,%edx,4)
            sin->dirty = 1;
c0112a5e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112a61:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
        }
        goto out;
c0112a68:	e9 c5 00 00 00       	jmp    c0112b32 <sfs_bmap_get_nolock+0x132>
c0112a6d:	e9 c0 00 00 00       	jmp    c0112b32 <sfs_bmap_get_nolock+0x132>
    }
    // the index of disk block is in the indirect blocks.
    index -= SFS_NDIRECT;
c0112a72:	83 6d 10 0c          	subl   $0xc,0x10(%ebp)
    if (index < SFS_BLK_NENTRY) {
c0112a76:	81 7d 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%ebp)
c0112a7d:	0f 87 93 00 00 00    	ja     c0112b16 <sfs_bmap_get_nolock+0x116>
        ent = din->indirect;
c0112a83:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112a86:	8b 40 3c             	mov    0x3c(%eax),%eax
c0112a89:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if ((ret = sfs_bmap_get_sub_nolock(sfs, &ent, index, create, &ino)) != 0) {
c0112a8c:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0112a8f:	89 44 24 10          	mov    %eax,0x10(%esp)
c0112a93:	8b 45 14             	mov    0x14(%ebp),%eax
c0112a96:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112a9a:	8b 45 10             	mov    0x10(%ebp),%eax
c0112a9d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112aa1:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0112aa4:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112aa8:	8b 45 08             	mov    0x8(%ebp),%eax
c0112aab:	89 04 24             	mov    %eax,(%esp)
c0112aae:	e8 d5 fd ff ff       	call   c0112888 <sfs_bmap_get_sub_nolock>
c0112ab3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112ab6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112aba:	74 08                	je     c0112ac4 <sfs_bmap_get_nolock+0xc4>
            return ret;
c0112abc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112abf:	e9 bc 00 00 00       	jmp    c0112b80 <sfs_bmap_get_nolock+0x180>
        }
        if (ent != din->indirect) {
c0112ac4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112ac7:	8b 50 3c             	mov    0x3c(%eax),%edx
c0112aca:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112acd:	39 c2                	cmp    %eax,%edx
c0112acf:	74 43                	je     c0112b14 <sfs_bmap_get_nolock+0x114>
            assert(din->indirect == 0);
c0112ad1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112ad4:	8b 40 3c             	mov    0x3c(%eax),%eax
c0112ad7:	85 c0                	test   %eax,%eax
c0112ad9:	74 24                	je     c0112aff <sfs_bmap_get_nolock+0xff>
c0112adb:	c7 44 24 0c 6e 96 11 	movl   $0xc011966e,0xc(%esp)
c0112ae2:	c0 
c0112ae3:	c7 44 24 08 bf 95 11 	movl   $0xc01195bf,0x8(%esp)
c0112aea:	c0 
c0112aeb:	c7 44 24 04 18 01 00 	movl   $0x118,0x4(%esp)
c0112af2:	00 
c0112af3:	c7 04 24 57 95 11 c0 	movl   $0xc0119557,(%esp)
c0112afa:	e8 c9 e3 fe ff       	call   c0100ec8 <__panic>
            din->indirect = ent;
c0112aff:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0112b02:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112b05:	89 50 3c             	mov    %edx,0x3c(%eax)
            sin->dirty = 1;
c0112b08:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112b0b:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
        }
        goto out;
c0112b12:	eb 1e                	jmp    c0112b32 <sfs_bmap_get_nolock+0x132>
c0112b14:	eb 1c                	jmp    c0112b32 <sfs_bmap_get_nolock+0x132>
    } else {
		panic ("sfs_bmap_get_nolock - index out of range");
c0112b16:	c7 44 24 08 84 96 11 	movl   $0xc0119684,0x8(%esp)
c0112b1d:	c0 
c0112b1e:	c7 44 24 04 1e 01 00 	movl   $0x11e,0x4(%esp)
c0112b25:	00 
c0112b26:	c7 04 24 57 95 11 c0 	movl   $0xc0119557,(%esp)
c0112b2d:	e8 96 e3 fe ff       	call   c0100ec8 <__panic>
	}
out:
    assert(ino == 0 || sfs_block_inuse(sfs, ino));
c0112b32:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112b35:	85 c0                	test   %eax,%eax
c0112b37:	74 3a                	je     c0112b73 <sfs_bmap_get_nolock+0x173>
c0112b39:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112b3c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112b40:	8b 45 08             	mov    0x8(%ebp),%eax
c0112b43:	89 04 24             	mov    %eax,(%esp)
c0112b46:	e8 9e f8 ff ff       	call   c01123e9 <sfs_block_inuse>
c0112b4b:	85 c0                	test   %eax,%eax
c0112b4d:	75 24                	jne    c0112b73 <sfs_bmap_get_nolock+0x173>
c0112b4f:	c7 44 24 0c b0 96 11 	movl   $0xc01196b0,0xc(%esp)
c0112b56:	c0 
c0112b57:	c7 44 24 08 bf 95 11 	movl   $0xc01195bf,0x8(%esp)
c0112b5e:	c0 
c0112b5f:	c7 44 24 04 21 01 00 	movl   $0x121,0x4(%esp)
c0112b66:	00 
c0112b67:	c7 04 24 57 95 11 c0 	movl   $0xc0119557,(%esp)
c0112b6e:	e8 55 e3 fe ff       	call   c0100ec8 <__panic>
    *ino_store = ino;
c0112b73:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0112b76:	8b 45 18             	mov    0x18(%ebp),%eax
c0112b79:	89 10                	mov    %edx,(%eax)
    return 0;
c0112b7b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112b80:	c9                   	leave  
c0112b81:	c3                   	ret    

c0112b82 <sfs_bmap_free_sub_nolock>:

/*
 * sfs_bmap_free_sub_nolock - set the entry item to 0 (free) in the indirect block
 */
static int
sfs_bmap_free_sub_nolock(struct sfs_fs *sfs, uint32_t ent, uint32_t index) {
c0112b82:	55                   	push   %ebp
c0112b83:	89 e5                	mov    %esp,%ebp
c0112b85:	83 ec 38             	sub    $0x38,%esp
    assert(sfs_block_inuse(sfs, ent) && index < SFS_BLK_NENTRY);
c0112b88:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112b8b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112b8f:	8b 45 08             	mov    0x8(%ebp),%eax
c0112b92:	89 04 24             	mov    %eax,(%esp)
c0112b95:	e8 4f f8 ff ff       	call   c01123e9 <sfs_block_inuse>
c0112b9a:	85 c0                	test   %eax,%eax
c0112b9c:	74 09                	je     c0112ba7 <sfs_bmap_free_sub_nolock+0x25>
c0112b9e:	81 7d 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%ebp)
c0112ba5:	76 24                	jbe    c0112bcb <sfs_bmap_free_sub_nolock+0x49>
c0112ba7:	c7 44 24 0c d8 96 11 	movl   $0xc01196d8,0xc(%esp)
c0112bae:	c0 
c0112baf:	c7 44 24 08 bf 95 11 	movl   $0xc01195bf,0x8(%esp)
c0112bb6:	c0 
c0112bb7:	c7 44 24 04 2b 01 00 	movl   $0x12b,0x4(%esp)
c0112bbe:	00 
c0112bbf:	c7 04 24 57 95 11 c0 	movl   $0xc0119557,(%esp)
c0112bc6:	e8 fd e2 fe ff       	call   c0100ec8 <__panic>
    int ret;
    uint32_t ino, zero = 0;
c0112bcb:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    off_t offset = index * sizeof(uint32_t);
c0112bd2:	8b 45 10             	mov    0x10(%ebp),%eax
c0112bd5:	c1 e0 02             	shl    $0x2,%eax
c0112bd8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if ((ret = sfs_rbuf(sfs, &ino, sizeof(uint32_t), ent, offset)) != 0) {
c0112bdb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112bde:	89 44 24 10          	mov    %eax,0x10(%esp)
c0112be2:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112be5:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112be9:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c0112bf0:	00 
c0112bf1:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0112bf4:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112bf8:	8b 45 08             	mov    0x8(%ebp),%eax
c0112bfb:	89 04 24             	mov    %eax,(%esp)
c0112bfe:	e8 81 1a 00 00       	call   c0114684 <sfs_rbuf>
c0112c03:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112c06:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112c0a:	74 05                	je     c0112c11 <sfs_bmap_free_sub_nolock+0x8f>
        return ret;
c0112c0c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112c0f:	eb 54                	jmp    c0112c65 <sfs_bmap_free_sub_nolock+0xe3>
    }
    if (ino != 0) {
c0112c11:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112c14:	85 c0                	test   %eax,%eax
c0112c16:	74 48                	je     c0112c60 <sfs_bmap_free_sub_nolock+0xde>
        if ((ret = sfs_wbuf(sfs, &zero, sizeof(uint32_t), ent, offset)) != 0) {
c0112c18:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112c1b:	89 44 24 10          	mov    %eax,0x10(%esp)
c0112c1f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112c22:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112c26:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c0112c2d:	00 
c0112c2e:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0112c31:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112c35:	8b 45 08             	mov    0x8(%ebp),%eax
c0112c38:	89 04 24             	mov    %eax,(%esp)
c0112c3b:	e8 fd 1a 00 00       	call   c011473d <sfs_wbuf>
c0112c40:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112c43:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112c47:	74 05                	je     c0112c4e <sfs_bmap_free_sub_nolock+0xcc>
            return ret;
c0112c49:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112c4c:	eb 17                	jmp    c0112c65 <sfs_bmap_free_sub_nolock+0xe3>
        }
        sfs_block_free(sfs, ino);
c0112c4e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112c51:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112c55:	8b 45 08             	mov    0x8(%ebp),%eax
c0112c58:	89 04 24             	mov    %eax,(%esp)
c0112c5b:	e8 bb f8 ff ff       	call   c011251b <sfs_block_free>
    }
    return 0;
c0112c60:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112c65:	c9                   	leave  
c0112c66:	c3                   	ret    

c0112c67 <sfs_bmap_free_nolock>:

/*
 * sfs_bmap_free_nolock - free a block with logical index in inode and reset the inode's fields
 */
static int
sfs_bmap_free_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t index) {
c0112c67:	55                   	push   %ebp
c0112c68:	89 e5                	mov    %esp,%ebp
c0112c6a:	83 ec 28             	sub    $0x28,%esp
    struct sfs_disk_inode *din = sin->din;
c0112c6d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112c70:	8b 00                	mov    (%eax),%eax
c0112c72:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int ret;
    uint32_t ent, ino;
    if (index < SFS_NDIRECT) {
c0112c75:	83 7d 10 0b          	cmpl   $0xb,0x10(%ebp)
c0112c79:	77 44                	ja     c0112cbf <sfs_bmap_free_nolock+0x58>
        if ((ino = din->direct[index]) != 0) {
c0112c7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112c7e:	8b 55 10             	mov    0x10(%ebp),%edx
c0112c81:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
c0112c85:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112c88:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112c8c:	74 2a                	je     c0112cb8 <sfs_bmap_free_nolock+0x51>
			// free the block
            sfs_block_free(sfs, ino);
c0112c8e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112c91:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112c95:	8b 45 08             	mov    0x8(%ebp),%eax
c0112c98:	89 04 24             	mov    %eax,(%esp)
c0112c9b:	e8 7b f8 ff ff       	call   c011251b <sfs_block_free>
            din->direct[index] = 0;
c0112ca0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112ca3:	8b 55 10             	mov    0x10(%ebp),%edx
c0112ca6:	c7 44 90 0c 00 00 00 	movl   $0x0,0xc(%eax,%edx,4)
c0112cad:	00 
            sin->dirty = 1;
c0112cae:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112cb1:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
        }
        return 0;
c0112cb8:	b8 00 00 00 00       	mov    $0x0,%eax
c0112cbd:	eb 4f                	jmp    c0112d0e <sfs_bmap_free_nolock+0xa7>
    }

    index -= SFS_NDIRECT;
c0112cbf:	83 6d 10 0c          	subl   $0xc,0x10(%ebp)
    if (index < SFS_BLK_NENTRY) {
c0112cc3:	81 7d 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%ebp)
c0112cca:	77 3d                	ja     c0112d09 <sfs_bmap_free_nolock+0xa2>
        if ((ent = din->indirect) != 0) {
c0112ccc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112ccf:	8b 40 3c             	mov    0x3c(%eax),%eax
c0112cd2:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0112cd5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0112cd9:	74 27                	je     c0112d02 <sfs_bmap_free_nolock+0x9b>
			// set the entry item to 0 in the indirect block
            if ((ret = sfs_bmap_free_sub_nolock(sfs, ent, index)) != 0) {
c0112cdb:	8b 45 10             	mov    0x10(%ebp),%eax
c0112cde:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112ce2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112ce5:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112ce9:	8b 45 08             	mov    0x8(%ebp),%eax
c0112cec:	89 04 24             	mov    %eax,(%esp)
c0112cef:	e8 8e fe ff ff       	call   c0112b82 <sfs_bmap_free_sub_nolock>
c0112cf4:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0112cf7:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0112cfb:	74 05                	je     c0112d02 <sfs_bmap_free_nolock+0x9b>
                return ret;
c0112cfd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112d00:	eb 0c                	jmp    c0112d0e <sfs_bmap_free_nolock+0xa7>
            }
        }
        return 0;
c0112d02:	b8 00 00 00 00       	mov    $0x0,%eax
c0112d07:	eb 05                	jmp    c0112d0e <sfs_bmap_free_nolock+0xa7>
    }
    return 0;
c0112d09:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112d0e:	c9                   	leave  
c0112d0f:	c3                   	ret    

c0112d10 <sfs_bmap_load_nolock>:
 * @sin:      sfs inode in memory
 * @index:    the logical index of disk block in inode
 * @ino_store:the NO. of disk block
 */
static int
sfs_bmap_load_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t index, uint32_t *ino_store) {
c0112d10:	55                   	push   %ebp
c0112d11:	89 e5                	mov    %esp,%ebp
c0112d13:	83 ec 38             	sub    $0x38,%esp
    struct sfs_disk_inode *din = sin->din;
c0112d16:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112d19:	8b 00                	mov    (%eax),%eax
c0112d1b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(index <= din->blocks);
c0112d1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112d21:	8b 40 08             	mov    0x8(%eax),%eax
c0112d24:	3b 45 10             	cmp    0x10(%ebp),%eax
c0112d27:	73 24                	jae    c0112d4d <sfs_bmap_load_nolock+0x3d>
c0112d29:	c7 44 24 0c 0c 97 11 	movl   $0xc011970c,0xc(%esp)
c0112d30:	c0 
c0112d31:	c7 44 24 08 bf 95 11 	movl   $0xc01195bf,0x8(%esp)
c0112d38:	c0 
c0112d39:	c7 44 24 04 64 01 00 	movl   $0x164,0x4(%esp)
c0112d40:	00 
c0112d41:	c7 04 24 57 95 11 c0 	movl   $0xc0119557,(%esp)
c0112d48:	e8 7b e1 fe ff       	call   c0100ec8 <__panic>
    int ret;
    uint32_t ino;
    bool create = (index == din->blocks);
c0112d4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112d50:	8b 40 08             	mov    0x8(%eax),%eax
c0112d53:	3b 45 10             	cmp    0x10(%ebp),%eax
c0112d56:	0f 94 c0             	sete   %al
c0112d59:	0f b6 c0             	movzbl %al,%eax
c0112d5c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = sfs_bmap_get_nolock(sfs, sin, index, create, &ino)) != 0) {
c0112d5f:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0112d62:	89 44 24 10          	mov    %eax,0x10(%esp)
c0112d66:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112d69:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112d6d:	8b 45 10             	mov    0x10(%ebp),%eax
c0112d70:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112d74:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112d77:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112d7b:	8b 45 08             	mov    0x8(%ebp),%eax
c0112d7e:	89 04 24             	mov    %eax,(%esp)
c0112d81:	e8 7a fc ff ff       	call   c0112a00 <sfs_bmap_get_nolock>
c0112d86:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0112d89:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0112d8d:	74 05                	je     c0112d94 <sfs_bmap_load_nolock+0x84>
        return ret;
c0112d8f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112d92:	eb 62                	jmp    c0112df6 <sfs_bmap_load_nolock+0xe6>
    }
    assert(sfs_block_inuse(sfs, ino));
c0112d94:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112d97:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112d9b:	8b 45 08             	mov    0x8(%ebp),%eax
c0112d9e:	89 04 24             	mov    %eax,(%esp)
c0112da1:	e8 43 f6 ff ff       	call   c01123e9 <sfs_block_inuse>
c0112da6:	85 c0                	test   %eax,%eax
c0112da8:	75 24                	jne    c0112dce <sfs_bmap_load_nolock+0xbe>
c0112daa:	c7 44 24 0c f5 95 11 	movl   $0xc01195f5,0xc(%esp)
c0112db1:	c0 
c0112db2:	c7 44 24 08 bf 95 11 	movl   $0xc01195bf,0x8(%esp)
c0112db9:	c0 
c0112dba:	c7 44 24 04 6b 01 00 	movl   $0x16b,0x4(%esp)
c0112dc1:	00 
c0112dc2:	c7 04 24 57 95 11 c0 	movl   $0xc0119557,(%esp)
c0112dc9:	e8 fa e0 fe ff       	call   c0100ec8 <__panic>
    if (create) {
c0112dce:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112dd2:	74 0f                	je     c0112de3 <sfs_bmap_load_nolock+0xd3>
        din->blocks ++;
c0112dd4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112dd7:	8b 40 08             	mov    0x8(%eax),%eax
c0112dda:	8d 50 01             	lea    0x1(%eax),%edx
c0112ddd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112de0:	89 50 08             	mov    %edx,0x8(%eax)
    }
    if (ino_store != NULL) {
c0112de3:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0112de7:	74 08                	je     c0112df1 <sfs_bmap_load_nolock+0xe1>
        *ino_store = ino;
c0112de9:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0112dec:	8b 45 14             	mov    0x14(%ebp),%eax
c0112def:	89 10                	mov    %edx,(%eax)
    }
    return 0;
c0112df1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112df6:	c9                   	leave  
c0112df7:	c3                   	ret    

c0112df8 <sfs_bmap_truncate_nolock>:

/*
 * sfs_bmap_truncate_nolock - free the disk block at the end of file
 */
static int
sfs_bmap_truncate_nolock(struct sfs_fs *sfs, struct sfs_inode *sin) {
c0112df8:	55                   	push   %ebp
c0112df9:	89 e5                	mov    %esp,%ebp
c0112dfb:	83 ec 28             	sub    $0x28,%esp
    struct sfs_disk_inode *din = sin->din;
c0112dfe:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112e01:	8b 00                	mov    (%eax),%eax
c0112e03:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(din->blocks != 0);
c0112e06:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112e09:	8b 40 08             	mov    0x8(%eax),%eax
c0112e0c:	85 c0                	test   %eax,%eax
c0112e0e:	75 24                	jne    c0112e34 <sfs_bmap_truncate_nolock+0x3c>
c0112e10:	c7 44 24 0c 21 97 11 	movl   $0xc0119721,0xc(%esp)
c0112e17:	c0 
c0112e18:	c7 44 24 08 bf 95 11 	movl   $0xc01195bf,0x8(%esp)
c0112e1f:	c0 
c0112e20:	c7 44 24 04 7b 01 00 	movl   $0x17b,0x4(%esp)
c0112e27:	00 
c0112e28:	c7 04 24 57 95 11 c0 	movl   $0xc0119557,(%esp)
c0112e2f:	e8 94 e0 fe ff       	call   c0100ec8 <__panic>
    int ret;
    if ((ret = sfs_bmap_free_nolock(sfs, sin, din->blocks - 1)) != 0) {
c0112e34:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112e37:	8b 40 08             	mov    0x8(%eax),%eax
c0112e3a:	83 e8 01             	sub    $0x1,%eax
c0112e3d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112e41:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112e44:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112e48:	8b 45 08             	mov    0x8(%ebp),%eax
c0112e4b:	89 04 24             	mov    %eax,(%esp)
c0112e4e:	e8 14 fe ff ff       	call   c0112c67 <sfs_bmap_free_nolock>
c0112e53:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112e56:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112e5a:	74 05                	je     c0112e61 <sfs_bmap_truncate_nolock+0x69>
        return ret;
c0112e5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112e5f:	eb 1e                	jmp    c0112e7f <sfs_bmap_truncate_nolock+0x87>
    }
    din->blocks --;
c0112e61:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112e64:	8b 40 08             	mov    0x8(%eax),%eax
c0112e67:	8d 50 ff             	lea    -0x1(%eax),%edx
c0112e6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112e6d:	89 50 08             	mov    %edx,0x8(%eax)
    sin->dirty = 1;
c0112e70:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112e73:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
    return 0;
c0112e7a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112e7f:	c9                   	leave  
c0112e80:	c3                   	ret    

c0112e81 <sfs_dirent_read_nolock>:
 * @sin:      sfs inode in memory
 * @slot:     the index of file entry
 * @entry:    file entry
 */
static int
sfs_dirent_read_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, int slot, struct sfs_disk_entry *entry) {
c0112e81:	55                   	push   %ebp
c0112e82:	89 e5                	mov    %esp,%ebp
c0112e84:	83 ec 38             	sub    $0x38,%esp
    assert(sin->din->type == SFS_TYPE_DIR && (slot >= 0 && slot < sin->din->blocks));
c0112e87:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112e8a:	8b 00                	mov    (%eax),%eax
c0112e8c:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0112e90:	66 83 f8 02          	cmp    $0x2,%ax
c0112e94:	75 15                	jne    c0112eab <sfs_dirent_read_nolock+0x2a>
c0112e96:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0112e9a:	78 0f                	js     c0112eab <sfs_dirent_read_nolock+0x2a>
c0112e9c:	8b 55 10             	mov    0x10(%ebp),%edx
c0112e9f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112ea2:	8b 00                	mov    (%eax),%eax
c0112ea4:	8b 40 08             	mov    0x8(%eax),%eax
c0112ea7:	39 c2                	cmp    %eax,%edx
c0112ea9:	72 24                	jb     c0112ecf <sfs_dirent_read_nolock+0x4e>
c0112eab:	c7 44 24 0c 34 97 11 	movl   $0xc0119734,0xc(%esp)
c0112eb2:	c0 
c0112eb3:	c7 44 24 08 bf 95 11 	movl   $0xc01195bf,0x8(%esp)
c0112eba:	c0 
c0112ebb:	c7 44 24 04 8e 01 00 	movl   $0x18e,0x4(%esp)
c0112ec2:	00 
c0112ec3:	c7 04 24 57 95 11 c0 	movl   $0xc0119557,(%esp)
c0112eca:	e8 f9 df fe ff       	call   c0100ec8 <__panic>
    int ret;
    uint32_t ino;
	// according to the DIR's inode and the slot of file entry, find the index of disk block which contains this file entry
    if ((ret = sfs_bmap_load_nolock(sfs, sin, slot, &ino)) != 0) {
c0112ecf:	8b 45 10             	mov    0x10(%ebp),%eax
c0112ed2:	8d 55 f0             	lea    -0x10(%ebp),%edx
c0112ed5:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0112ed9:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112edd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112ee0:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112ee4:	8b 45 08             	mov    0x8(%ebp),%eax
c0112ee7:	89 04 24             	mov    %eax,(%esp)
c0112eea:	e8 21 fe ff ff       	call   c0112d10 <sfs_bmap_load_nolock>
c0112eef:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112ef2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112ef6:	74 08                	je     c0112f00 <sfs_dirent_read_nolock+0x7f>
        return ret;
c0112ef8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112efb:	e9 80 00 00 00       	jmp    c0112f80 <sfs_dirent_read_nolock+0xff>
    }
    assert(sfs_block_inuse(sfs, ino));
c0112f00:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112f03:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112f07:	8b 45 08             	mov    0x8(%ebp),%eax
c0112f0a:	89 04 24             	mov    %eax,(%esp)
c0112f0d:	e8 d7 f4 ff ff       	call   c01123e9 <sfs_block_inuse>
c0112f12:	85 c0                	test   %eax,%eax
c0112f14:	75 24                	jne    c0112f3a <sfs_dirent_read_nolock+0xb9>
c0112f16:	c7 44 24 0c f5 95 11 	movl   $0xc01195f5,0xc(%esp)
c0112f1d:	c0 
c0112f1e:	c7 44 24 08 bf 95 11 	movl   $0xc01195bf,0x8(%esp)
c0112f25:	c0 
c0112f26:	c7 44 24 04 95 01 00 	movl   $0x195,0x4(%esp)
c0112f2d:	00 
c0112f2e:	c7 04 24 57 95 11 c0 	movl   $0xc0119557,(%esp)
c0112f35:	e8 8e df fe ff       	call   c0100ec8 <__panic>
	// read the content of file entry in the disk block 
    if ((ret = sfs_rbuf(sfs, entry, sizeof(struct sfs_disk_entry), ino, 0)) != 0) {
c0112f3a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112f3d:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0112f44:	00 
c0112f45:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112f49:	c7 44 24 08 04 01 00 	movl   $0x104,0x8(%esp)
c0112f50:	00 
c0112f51:	8b 45 14             	mov    0x14(%ebp),%eax
c0112f54:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112f58:	8b 45 08             	mov    0x8(%ebp),%eax
c0112f5b:	89 04 24             	mov    %eax,(%esp)
c0112f5e:	e8 21 17 00 00       	call   c0114684 <sfs_rbuf>
c0112f63:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112f66:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112f6a:	74 05                	je     c0112f71 <sfs_dirent_read_nolock+0xf0>
        return ret;
c0112f6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112f6f:	eb 0f                	jmp    c0112f80 <sfs_dirent_read_nolock+0xff>
    }
    entry->name[SFS_MAX_FNAME_LEN] = '\0';
c0112f71:	8b 45 14             	mov    0x14(%ebp),%eax
c0112f74:	c6 80 03 01 00 00 00 	movb   $0x0,0x103(%eax)
    return 0;
c0112f7b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112f80:	c9                   	leave  
c0112f81:	c3                   	ret    

c0112f82 <sfs_dirent_search_nolock>:
 * @ino_store:  NO. of disk of this file (with the filename)'s inode
 * @slot:       logical index of file entry (NOTICE: each file entry ocupied one  disk block)
 * @empty_slot: the empty logical index of file entry.
 */
static int
sfs_dirent_search_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, const char *name, uint32_t *ino_store, int *slot, int *empty_slot) {
c0112f82:	55                   	push   %ebp
c0112f83:	89 e5                	mov    %esp,%ebp
c0112f85:	83 ec 28             	sub    $0x28,%esp
    assert(strlen(name) <= SFS_MAX_FNAME_LEN);
c0112f88:	8b 45 10             	mov    0x10(%ebp),%eax
c0112f8b:	89 04 24             	mov    %eax,(%esp)
c0112f8e:	e8 5c 22 00 00       	call   c01151ef <strlen>
c0112f93:	3d ff 00 00 00       	cmp    $0xff,%eax
c0112f98:	76 24                	jbe    c0112fbe <sfs_dirent_search_nolock+0x3c>
c0112f9a:	c7 44 24 0c 80 97 11 	movl   $0xc0119780,0xc(%esp)
c0112fa1:	c0 
c0112fa2:	c7 44 24 08 bf 95 11 	movl   $0xc01195bf,0x8(%esp)
c0112fa9:	c0 
c0112faa:	c7 44 24 04 ba 01 00 	movl   $0x1ba,0x4(%esp)
c0112fb1:	00 
c0112fb2:	c7 04 24 57 95 11 c0 	movl   $0xc0119557,(%esp)
c0112fb9:	e8 0a df fe ff       	call   c0100ec8 <__panic>
    struct sfs_disk_entry *entry;
    if ((entry = kmalloc(sizeof(struct sfs_disk_entry))) == NULL) {
c0112fbe:	c7 04 24 04 01 00 00 	movl   $0x104,(%esp)
c0112fc5:	e8 15 1d ff ff       	call   c0104cdf <kmalloc>
c0112fca:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0112fcd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0112fd1:	75 0a                	jne    c0112fdd <sfs_dirent_search_nolock+0x5b>
        return -E_NO_MEM;
c0112fd3:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0112fd8:	e9 cb 00 00 00       	jmp    c01130a8 <sfs_dirent_search_nolock+0x126>
    }

#define set_pvalue(x, v)            do { if ((x) != NULL) { *(x) = (v); } } while (0)
    int ret, i, nslots = sin->din->blocks;
c0112fdd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112fe0:	8b 00                	mov    (%eax),%eax
c0112fe2:	8b 40 08             	mov    0x8(%eax),%eax
c0112fe5:	89 45 e8             	mov    %eax,-0x18(%ebp)
    set_pvalue(empty_slot, nslots);
c0112fe8:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c0112fec:	74 08                	je     c0112ff6 <sfs_dirent_search_nolock+0x74>
c0112fee:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0112ff1:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0112ff4:	89 10                	mov    %edx,(%eax)
    for (i = 0; i < nslots; i ++) {
c0112ff6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0112ffd:	e9 85 00 00 00       	jmp    c0113087 <sfs_dirent_search_nolock+0x105>
        if ((ret = sfs_dirent_read_nolock(sfs, sin, i, entry)) != 0) {
c0113002:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113005:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0113009:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011300c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113010:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113013:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113017:	8b 45 08             	mov    0x8(%ebp),%eax
c011301a:	89 04 24             	mov    %eax,(%esp)
c011301d:	e8 5f fe ff ff       	call   c0112e81 <sfs_dirent_read_nolock>
c0113022:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113025:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113029:	74 02                	je     c011302d <sfs_dirent_search_nolock+0xab>
            goto out;
c011302b:	eb 6d                	jmp    c011309a <sfs_dirent_search_nolock+0x118>
        }
        if (entry->ino == 0) {
c011302d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113030:	8b 00                	mov    (%eax),%eax
c0113032:	85 c0                	test   %eax,%eax
c0113034:	75 12                	jne    c0113048 <sfs_dirent_search_nolock+0xc6>
            set_pvalue(empty_slot, i);
c0113036:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c011303a:	74 0a                	je     c0113046 <sfs_dirent_search_nolock+0xc4>
c011303c:	8b 45 1c             	mov    0x1c(%ebp),%eax
c011303f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0113042:	89 10                	mov    %edx,(%eax)
            continue ;
c0113044:	eb 3d                	jmp    c0113083 <sfs_dirent_search_nolock+0x101>
c0113046:	eb 3b                	jmp    c0113083 <sfs_dirent_search_nolock+0x101>
        }
        if (strcmp(name, entry->name) == 0) {
c0113048:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011304b:	83 c0 04             	add    $0x4,%eax
c011304e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113052:	8b 45 10             	mov    0x10(%ebp),%eax
c0113055:	89 04 24             	mov    %eax,(%esp)
c0113058:	e8 8a 22 00 00       	call   c01152e7 <strcmp>
c011305d:	85 c0                	test   %eax,%eax
c011305f:	75 22                	jne    c0113083 <sfs_dirent_search_nolock+0x101>
            set_pvalue(slot, i);
c0113061:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0113065:	74 08                	je     c011306f <sfs_dirent_search_nolock+0xed>
c0113067:	8b 45 18             	mov    0x18(%ebp),%eax
c011306a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c011306d:	89 10                	mov    %edx,(%eax)
            set_pvalue(ino_store, entry->ino);
c011306f:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0113073:	74 0c                	je     c0113081 <sfs_dirent_search_nolock+0xff>
c0113075:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113078:	8b 10                	mov    (%eax),%edx
c011307a:	8b 45 14             	mov    0x14(%ebp),%eax
c011307d:	89 10                	mov    %edx,(%eax)
            goto out;
c011307f:	eb 19                	jmp    c011309a <sfs_dirent_search_nolock+0x118>
c0113081:	eb 17                	jmp    c011309a <sfs_dirent_search_nolock+0x118>
    }

#define set_pvalue(x, v)            do { if ((x) != NULL) { *(x) = (v); } } while (0)
    int ret, i, nslots = sin->din->blocks;
    set_pvalue(empty_slot, nslots);
    for (i = 0; i < nslots; i ++) {
c0113083:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0113087:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011308a:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c011308d:	0f 8c 6f ff ff ff    	jl     c0113002 <sfs_dirent_search_nolock+0x80>
            set_pvalue(ino_store, entry->ino);
            goto out;
        }
    }
#undef set_pvalue
    ret = -E_NOENT;
c0113093:	c7 45 f4 f0 ff ff ff 	movl   $0xfffffff0,-0xc(%ebp)
out:
    kfree(entry);
c011309a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011309d:	89 04 24             	mov    %eax,(%esp)
c01130a0:	e8 55 1c ff ff       	call   c0104cfa <kfree>
    return ret;
c01130a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01130a8:	c9                   	leave  
c01130a9:	c3                   	ret    

c01130aa <sfs_dirent_findino_nolock>:
/*
 * sfs_dirent_findino_nolock - read all file entries in DIR's inode and find a entry->ino == ino
 */

static int
sfs_dirent_findino_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t ino, struct sfs_disk_entry *entry) {
c01130aa:	55                   	push   %ebp
c01130ab:	89 e5                	mov    %esp,%ebp
c01130ad:	83 ec 28             	sub    $0x28,%esp
    int ret, i, nslots = sin->din->blocks;
c01130b0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01130b3:	8b 00                	mov    (%eax),%eax
c01130b5:	8b 40 08             	mov    0x8(%eax),%eax
c01130b8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (i = 0; i < nslots; i ++) {
c01130bb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01130c2:	eb 43                	jmp    c0113107 <sfs_dirent_findino_nolock+0x5d>
        if ((ret = sfs_dirent_read_nolock(sfs, sin, i, entry)) != 0) {
c01130c4:	8b 45 14             	mov    0x14(%ebp),%eax
c01130c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01130cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01130ce:	89 44 24 08          	mov    %eax,0x8(%esp)
c01130d2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01130d5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01130d9:	8b 45 08             	mov    0x8(%ebp),%eax
c01130dc:	89 04 24             	mov    %eax,(%esp)
c01130df:	e8 9d fd ff ff       	call   c0112e81 <sfs_dirent_read_nolock>
c01130e4:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01130e7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01130eb:	74 05                	je     c01130f2 <sfs_dirent_findino_nolock+0x48>
            return ret;
c01130ed:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01130f0:	eb 22                	jmp    c0113114 <sfs_dirent_findino_nolock+0x6a>
        }
        if (entry->ino == ino) {
c01130f2:	8b 45 14             	mov    0x14(%ebp),%eax
c01130f5:	8b 00                	mov    (%eax),%eax
c01130f7:	3b 45 10             	cmp    0x10(%ebp),%eax
c01130fa:	75 07                	jne    c0113103 <sfs_dirent_findino_nolock+0x59>
            return 0;
c01130fc:	b8 00 00 00 00       	mov    $0x0,%eax
c0113101:	eb 11                	jmp    c0113114 <sfs_dirent_findino_nolock+0x6a>
 */

static int
sfs_dirent_findino_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t ino, struct sfs_disk_entry *entry) {
    int ret, i, nslots = sin->din->blocks;
    for (i = 0; i < nslots; i ++) {
c0113103:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0113107:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011310a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c011310d:	7c b5                	jl     c01130c4 <sfs_dirent_findino_nolock+0x1a>
        }
        if (entry->ino == ino) {
            return 0;
        }
    }
    return -E_NOENT;
c011310f:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
c0113114:	c9                   	leave  
c0113115:	c3                   	ret    

c0113116 <sfs_lookup_once>:
 * @name:       the file name in DIR
 * @node_store: the inode corresponding the file name in DIR
 * @slot:       the logical index of file entry
 */
static int
sfs_lookup_once(struct sfs_fs *sfs, struct sfs_inode *sin, const char *name, struct inode **node_store, int *slot) {
c0113116:	55                   	push   %ebp
c0113117:	89 e5                	mov    %esp,%ebp
c0113119:	83 ec 38             	sub    $0x38,%esp
    int ret;
    uint32_t ino;
    lock_sin(sin);
c011311c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011311f:	89 04 24             	mov    %eax,(%esp)
c0113122:	e8 f4 f0 ff ff       	call   c011221b <lock_sin>
    {   // find the NO. of disk block and logical index of file entry
        ret = sfs_dirent_search_nolock(sfs, sin, name, &ino, slot, NULL);
c0113127:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
c011312e:	00 
c011312f:	8b 45 18             	mov    0x18(%ebp),%eax
c0113132:	89 44 24 10          	mov    %eax,0x10(%esp)
c0113136:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0113139:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011313d:	8b 45 10             	mov    0x10(%ebp),%eax
c0113140:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113144:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113147:	89 44 24 04          	mov    %eax,0x4(%esp)
c011314b:	8b 45 08             	mov    0x8(%ebp),%eax
c011314e:	89 04 24             	mov    %eax,(%esp)
c0113151:	e8 2c fe ff ff       	call   c0112f82 <sfs_dirent_search_nolock>
c0113156:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    unlock_sin(sin);
c0113159:	8b 45 0c             	mov    0xc(%ebp),%eax
c011315c:	89 04 24             	mov    %eax,(%esp)
c011315f:	e8 cd f0 ff ff       	call   c0112231 <unlock_sin>
    if (ret == 0) {
c0113164:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113168:	75 1c                	jne    c0113186 <sfs_lookup_once+0x70>
		// load the content of inode with the the NO. of disk block
        ret = sfs_load_inode(sfs, node_store, ino);
c011316a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011316d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113171:	8b 45 14             	mov    0x14(%ebp),%eax
c0113174:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113178:	8b 45 08             	mov    0x8(%ebp),%eax
c011317b:	89 04 24             	mov    %eax,(%esp)
c011317e:	e8 62 f5 ff ff       	call   c01126e5 <sfs_load_inode>
c0113183:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    return ret;
c0113186:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0113189:	c9                   	leave  
c011318a:	c3                   	ret    

c011318b <sfs_opendir>:

// sfs_opendir - just check the opne_flags, now support readonly
static int
sfs_opendir(struct inode *node, uint32_t open_flags) {
c011318b:	55                   	push   %ebp
c011318c:	89 e5                	mov    %esp,%ebp
    switch (open_flags & O_ACCMODE) {
c011318e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113191:	83 e0 03             	and    $0x3,%eax
c0113194:	85 c0                	test   %eax,%eax
c0113196:	74 07                	je     c011319f <sfs_opendir+0x14>
    case O_RDONLY:
        break;
    case O_WRONLY:
    case O_RDWR:
    default:
        return -E_ISDIR;
c0113198:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
c011319d:	eb 17                	jmp    c01131b6 <sfs_opendir+0x2b>
// sfs_opendir - just check the opne_flags, now support readonly
static int
sfs_opendir(struct inode *node, uint32_t open_flags) {
    switch (open_flags & O_ACCMODE) {
    case O_RDONLY:
        break;
c011319f:	90                   	nop
    case O_WRONLY:
    case O_RDWR:
    default:
        return -E_ISDIR;
    }
    if (open_flags & O_APPEND) {
c01131a0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01131a3:	83 e0 20             	and    $0x20,%eax
c01131a6:	85 c0                	test   %eax,%eax
c01131a8:	74 07                	je     c01131b1 <sfs_opendir+0x26>
        return -E_ISDIR;
c01131aa:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
c01131af:	eb 05                	jmp    c01131b6 <sfs_opendir+0x2b>
    }
    return 0;
c01131b1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01131b6:	5d                   	pop    %ebp
c01131b7:	c3                   	ret    

c01131b8 <sfs_openfile>:

// sfs_openfile - open file (no use)
static int
sfs_openfile(struct inode *node, uint32_t open_flags) {
c01131b8:	55                   	push   %ebp
c01131b9:	89 e5                	mov    %esp,%ebp
    return 0;
c01131bb:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01131c0:	5d                   	pop    %ebp
c01131c1:	c3                   	ret    

c01131c2 <sfs_close>:

// sfs_close - close file
static int
sfs_close(struct inode *node) {
c01131c2:	55                   	push   %ebp
c01131c3:	89 e5                	mov    %esp,%ebp
c01131c5:	83 ec 28             	sub    $0x28,%esp
    return vop_fsync(node);
c01131c8:	8b 45 08             	mov    0x8(%ebp),%eax
c01131cb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01131ce:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01131d2:	74 17                	je     c01131eb <sfs_close+0x29>
c01131d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01131d7:	8b 40 3c             	mov    0x3c(%eax),%eax
c01131da:	85 c0                	test   %eax,%eax
c01131dc:	74 0d                	je     c01131eb <sfs_close+0x29>
c01131de:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01131e1:	8b 40 3c             	mov    0x3c(%eax),%eax
c01131e4:	8b 40 18             	mov    0x18(%eax),%eax
c01131e7:	85 c0                	test   %eax,%eax
c01131e9:	75 24                	jne    c011320f <sfs_close+0x4d>
c01131eb:	c7 44 24 0c a4 97 11 	movl   $0xc01197a4,0xc(%esp)
c01131f2:	c0 
c01131f3:	c7 44 24 08 bf 95 11 	movl   $0xc01195bf,0x8(%esp)
c01131fa:	c0 
c01131fb:	c7 44 24 04 1c 02 00 	movl   $0x21c,0x4(%esp)
c0113202:	00 
c0113203:	c7 04 24 57 95 11 c0 	movl   $0xc0119557,(%esp)
c011320a:	e8 b9 dc fe ff       	call   c0100ec8 <__panic>
c011320f:	c7 44 24 04 f2 97 11 	movl   $0xc01197f2,0x4(%esp)
c0113216:	c0 
c0113217:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011321a:	89 04 24             	mov    %eax,(%esp)
c011321d:	e8 cb c0 ff ff       	call   c010f2ed <inode_check>
c0113222:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113225:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113228:	8b 40 18             	mov    0x18(%eax),%eax
c011322b:	8b 55 08             	mov    0x8(%ebp),%edx
c011322e:	89 14 24             	mov    %edx,(%esp)
c0113231:	ff d0                	call   *%eax
}
c0113233:	c9                   	leave  
c0113234:	c3                   	ret    

c0113235 <sfs_io_nolock>:
 * @offset:   the offset of file
 * @alenp:    the length need to read (is a pointer). and will RETURN the really Rd/Wr lenght
 * @write:    BOOL, 0 read, 1 write
 */
static int
sfs_io_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, void *buf, off_t offset, size_t *alenp, bool write) {
c0113235:	55                   	push   %ebp
c0113236:	89 e5                	mov    %esp,%ebp
c0113238:	83 ec 58             	sub    $0x58,%esp
    struct sfs_disk_inode *din = sin->din;
c011323b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011323e:	8b 00                	mov    (%eax),%eax
c0113240:	89 45 d8             	mov    %eax,-0x28(%ebp)
    assert(din->type != SFS_TYPE_DIR);
c0113243:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0113246:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c011324a:	66 83 f8 02          	cmp    $0x2,%ax
c011324e:	75 24                	jne    c0113274 <sfs_io_nolock+0x3f>
c0113250:	c7 44 24 0c f8 97 11 	movl   $0xc01197f8,0xc(%esp)
c0113257:	c0 
c0113258:	c7 44 24 08 bf 95 11 	movl   $0xc01195bf,0x8(%esp)
c011325f:	c0 
c0113260:	c7 44 24 04 2b 02 00 	movl   $0x22b,0x4(%esp)
c0113267:	00 
c0113268:	c7 04 24 57 95 11 c0 	movl   $0xc0119557,(%esp)
c011326f:	e8 54 dc fe ff       	call   c0100ec8 <__panic>
    off_t endpos = offset + *alenp, blkoff;
c0113274:	8b 45 18             	mov    0x18(%ebp),%eax
c0113277:	8b 10                	mov    (%eax),%edx
c0113279:	8b 45 14             	mov    0x14(%ebp),%eax
c011327c:	01 d0                	add    %edx,%eax
c011327e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    *alenp = 0;
c0113281:	8b 45 18             	mov    0x18(%ebp),%eax
c0113284:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	// calculate the Rd/Wr end position
    if (offset < 0 || offset >= SFS_MAX_FILE_SIZE || offset > endpos) {
c011328a:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c011328e:	78 12                	js     c01132a2 <sfs_io_nolock+0x6d>
c0113290:	8b 45 14             	mov    0x14(%ebp),%eax
c0113293:	3d ff ff ff 07       	cmp    $0x7ffffff,%eax
c0113298:	77 08                	ja     c01132a2 <sfs_io_nolock+0x6d>
c011329a:	8b 45 14             	mov    0x14(%ebp),%eax
c011329d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01132a0:	7e 0a                	jle    c01132ac <sfs_io_nolock+0x77>
        return -E_INVAL;
c01132a2:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01132a7:	e9 a0 02 00 00       	jmp    c011354c <sfs_io_nolock+0x317>
    }
    if (offset == endpos) {
c01132ac:	8b 45 14             	mov    0x14(%ebp),%eax
c01132af:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01132b2:	75 0a                	jne    c01132be <sfs_io_nolock+0x89>
        return 0;
c01132b4:	b8 00 00 00 00       	mov    $0x0,%eax
c01132b9:	e9 8e 02 00 00       	jmp    c011354c <sfs_io_nolock+0x317>
    }
    if (endpos > SFS_MAX_FILE_SIZE) {
c01132be:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01132c1:	3d 00 00 00 08       	cmp    $0x8000000,%eax
c01132c6:	76 07                	jbe    c01132cf <sfs_io_nolock+0x9a>
        endpos = SFS_MAX_FILE_SIZE;
c01132c8:	c7 45 f4 00 00 00 08 	movl   $0x8000000,-0xc(%ebp)
    }
    if (!write) {
c01132cf:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c01132d3:	75 2a                	jne    c01132ff <sfs_io_nolock+0xca>
        if (offset >= din->size) {
c01132d5:	8b 55 14             	mov    0x14(%ebp),%edx
c01132d8:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01132db:	8b 00                	mov    (%eax),%eax
c01132dd:	39 c2                	cmp    %eax,%edx
c01132df:	72 0a                	jb     c01132eb <sfs_io_nolock+0xb6>
            return 0;
c01132e1:	b8 00 00 00 00       	mov    $0x0,%eax
c01132e6:	e9 61 02 00 00       	jmp    c011354c <sfs_io_nolock+0x317>
        }
        if (endpos > din->size) {
c01132eb:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01132ee:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01132f1:	8b 00                	mov    (%eax),%eax
c01132f3:	39 c2                	cmp    %eax,%edx
c01132f5:	76 08                	jbe    c01132ff <sfs_io_nolock+0xca>
            endpos = din->size;
c01132f7:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01132fa:	8b 00                	mov    (%eax),%eax
c01132fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
    }

    int (*sfs_buf_op)(struct sfs_fs *sfs, void *buf, size_t len, uint32_t blkno, off_t offset);
    int (*sfs_block_op)(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks);
    if (write) {
c01132ff:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c0113303:	74 10                	je     c0113315 <sfs_io_nolock+0xe0>
        sfs_buf_op = sfs_wbuf, sfs_block_op = sfs_wblock;
c0113305:	c7 45 f0 3d 47 11 c0 	movl   $0xc011473d,-0x10(%ebp)
c011330c:	c7 45 ec 54 46 11 c0 	movl   $0xc0114654,-0x14(%ebp)
c0113313:	eb 0e                	jmp    c0113323 <sfs_io_nolock+0xee>
    }
    else {
        sfs_buf_op = sfs_rbuf, sfs_block_op = sfs_rblock;
c0113315:	c7 45 f0 84 46 11 c0 	movl   $0xc0114684,-0x10(%ebp)
c011331c:	c7 45 ec 24 46 11 c0 	movl   $0xc0114624,-0x14(%ebp)
    }

    int ret = 0;
c0113323:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    size_t size, alen = 0;
c011332a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    uint32_t ino;
    uint32_t blkno = offset / SFS_BLKSIZE;          // The NO. of Rd/Wr begin block
c0113331:	8b 45 14             	mov    0x14(%ebp),%eax
c0113334:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
c011333a:	85 c0                	test   %eax,%eax
c011333c:	0f 48 c2             	cmovs  %edx,%eax
c011333f:	c1 f8 0c             	sar    $0xc,%eax
c0113342:	89 45 e0             	mov    %eax,-0x20(%ebp)
    uint32_t nblks = endpos / SFS_BLKSIZE - blkno;  // The size of Rd/Wr blocks
c0113345:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113348:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
c011334e:	85 c0                	test   %eax,%eax
c0113350:	0f 48 c2             	cmovs  %edx,%eax
c0113353:	c1 f8 0c             	sar    $0xc,%eax
c0113356:	2b 45 e0             	sub    -0x20(%ebp),%eax
c0113359:	89 45 dc             	mov    %eax,-0x24(%ebp)
	 * (2) Rd/Wr aligned blocks 
	 *       NOTICE: useful function: sfs_bmap_load_nolock, sfs_block_op
     * (3) If end position isn't aligned with the last block, Rd/Wr some content from begin to the (endpos % SFS_BLKSIZE) of the last block
	 *       NOTICE: useful function: sfs_bmap_load_nolock, sfs_buf_op	
	*/
    if ((blkoff = offset % SFS_BLKSIZE) != 0) {
c011335c:	8b 45 14             	mov    0x14(%ebp),%eax
c011335f:	99                   	cltd   
c0113360:	c1 ea 14             	shr    $0x14,%edx
c0113363:	01 d0                	add    %edx,%eax
c0113365:	25 ff 0f 00 00       	and    $0xfff,%eax
c011336a:	29 d0                	sub    %edx,%eax
c011336c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c011336f:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c0113373:	0f 84 9f 00 00 00    	je     c0113418 <sfs_io_nolock+0x1e3>
        size = (nblks != 0) ? (SFS_BLKSIZE - blkoff) : (endpos - offset);
c0113379:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c011337d:	74 0a                	je     c0113389 <sfs_io_nolock+0x154>
c011337f:	b8 00 10 00 00       	mov    $0x1000,%eax
c0113384:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c0113387:	eb 0a                	jmp    c0113393 <sfs_io_nolock+0x15e>
c0113389:	8b 45 14             	mov    0x14(%ebp),%eax
c011338c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c011338f:	29 c2                	sub    %eax,%edx
c0113391:	89 d0                	mov    %edx,%eax
c0113393:	89 45 d0             	mov    %eax,-0x30(%ebp)
        if ((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) != 0) {
c0113396:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0113399:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011339d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01133a0:	89 44 24 08          	mov    %eax,0x8(%esp)
c01133a4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01133a7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01133ab:	8b 45 08             	mov    0x8(%ebp),%eax
c01133ae:	89 04 24             	mov    %eax,(%esp)
c01133b1:	e8 5a f9 ff ff       	call   c0112d10 <sfs_bmap_load_nolock>
c01133b6:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01133b9:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01133bd:	74 05                	je     c01133c4 <sfs_io_nolock+0x18f>
            goto out;
c01133bf:	e9 51 01 00 00       	jmp    c0113515 <sfs_io_nolock+0x2e0>
        }
        if ((ret = sfs_buf_op(sfs, buf, size, ino, blkoff)) != 0) {
c01133c4:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01133c7:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01133ca:	89 54 24 10          	mov    %edx,0x10(%esp)
c01133ce:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01133d2:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01133d5:	89 44 24 08          	mov    %eax,0x8(%esp)
c01133d9:	8b 45 10             	mov    0x10(%ebp),%eax
c01133dc:	89 44 24 04          	mov    %eax,0x4(%esp)
c01133e0:	8b 45 08             	mov    0x8(%ebp),%eax
c01133e3:	89 04 24             	mov    %eax,(%esp)
c01133e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01133e9:	ff d0                	call   *%eax
c01133eb:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01133ee:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01133f2:	74 05                	je     c01133f9 <sfs_io_nolock+0x1c4>
            goto out;
c01133f4:	e9 1c 01 00 00       	jmp    c0113515 <sfs_io_nolock+0x2e0>
        }
        alen += size;
c01133f9:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01133fc:	01 45 e4             	add    %eax,-0x1c(%ebp)
        if (nblks == 0) {
c01133ff:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0113403:	75 05                	jne    c011340a <sfs_io_nolock+0x1d5>
            goto out;
c0113405:	e9 0b 01 00 00       	jmp    c0113515 <sfs_io_nolock+0x2e0>
        }
        buf += size, blkno ++, nblks --;
c011340a:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011340d:	01 45 10             	add    %eax,0x10(%ebp)
c0113410:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
c0113414:	83 6d dc 01          	subl   $0x1,-0x24(%ebp)
    }

    size = SFS_BLKSIZE;
c0113418:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
    while (nblks != 0) {
c011341f:	eb 71                	jmp    c0113492 <sfs_io_nolock+0x25d>
        if ((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) != 0) {
c0113421:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0113424:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0113428:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011342b:	89 44 24 08          	mov    %eax,0x8(%esp)
c011342f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113432:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113436:	8b 45 08             	mov    0x8(%ebp),%eax
c0113439:	89 04 24             	mov    %eax,(%esp)
c011343c:	e8 cf f8 ff ff       	call   c0112d10 <sfs_bmap_load_nolock>
c0113441:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0113444:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0113448:	74 05                	je     c011344f <sfs_io_nolock+0x21a>
            goto out;
c011344a:	e9 c6 00 00 00       	jmp    c0113515 <sfs_io_nolock+0x2e0>
        }
        if ((ret = sfs_block_op(sfs, buf, ino, 1)) != 0) {
c011344f:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0113452:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0113459:	00 
c011345a:	89 44 24 08          	mov    %eax,0x8(%esp)
c011345e:	8b 45 10             	mov    0x10(%ebp),%eax
c0113461:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113465:	8b 45 08             	mov    0x8(%ebp),%eax
c0113468:	89 04 24             	mov    %eax,(%esp)
c011346b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011346e:	ff d0                	call   *%eax
c0113470:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0113473:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0113477:	74 05                	je     c011347e <sfs_io_nolock+0x249>
            goto out;
c0113479:	e9 97 00 00 00       	jmp    c0113515 <sfs_io_nolock+0x2e0>
        }
        alen += size, buf += size, blkno ++, nblks --;
c011347e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113481:	01 45 e4             	add    %eax,-0x1c(%ebp)
c0113484:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113487:	01 45 10             	add    %eax,0x10(%ebp)
c011348a:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
c011348e:	83 6d dc 01          	subl   $0x1,-0x24(%ebp)
        }
        buf += size, blkno ++, nblks --;
    }

    size = SFS_BLKSIZE;
    while (nblks != 0) {
c0113492:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0113496:	75 89                	jne    c0113421 <sfs_io_nolock+0x1ec>
            goto out;
        }
        alen += size, buf += size, blkno ++, nblks --;
    }

    if ((size = endpos % SFS_BLKSIZE) != 0) {
c0113498:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011349b:	99                   	cltd   
c011349c:	c1 ea 14             	shr    $0x14,%edx
c011349f:	01 d0                	add    %edx,%eax
c01134a1:	25 ff 0f 00 00       	and    $0xfff,%eax
c01134a6:	29 d0                	sub    %edx,%eax
c01134a8:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01134ab:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c01134af:	74 64                	je     c0113515 <sfs_io_nolock+0x2e0>
        if ((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) != 0) {
c01134b1:	8d 45 cc             	lea    -0x34(%ebp),%eax
c01134b4:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01134b8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01134bb:	89 44 24 08          	mov    %eax,0x8(%esp)
c01134bf:	8b 45 0c             	mov    0xc(%ebp),%eax
c01134c2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01134c6:	8b 45 08             	mov    0x8(%ebp),%eax
c01134c9:	89 04 24             	mov    %eax,(%esp)
c01134cc:	e8 3f f8 ff ff       	call   c0112d10 <sfs_bmap_load_nolock>
c01134d1:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01134d4:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01134d8:	74 02                	je     c01134dc <sfs_io_nolock+0x2a7>
            goto out;
c01134da:	eb 39                	jmp    c0113515 <sfs_io_nolock+0x2e0>
        }
        if ((ret = sfs_buf_op(sfs, buf, size, ino, 0)) != 0) {
c01134dc:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01134df:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c01134e6:	00 
c01134e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01134eb:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01134ee:	89 44 24 08          	mov    %eax,0x8(%esp)
c01134f2:	8b 45 10             	mov    0x10(%ebp),%eax
c01134f5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01134f9:	8b 45 08             	mov    0x8(%ebp),%eax
c01134fc:	89 04 24             	mov    %eax,(%esp)
c01134ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113502:	ff d0                	call   *%eax
c0113504:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0113507:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c011350b:	74 02                	je     c011350f <sfs_io_nolock+0x2da>
            goto out;
c011350d:	eb 06                	jmp    c0113515 <sfs_io_nolock+0x2e0>
        }
        alen += size;
c011350f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113512:	01 45 e4             	add    %eax,-0x1c(%ebp)
    }
out:
    *alenp = alen;
c0113515:	8b 45 18             	mov    0x18(%ebp),%eax
c0113518:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c011351b:	89 10                	mov    %edx,(%eax)
    if (offset + alen > sin->din->size) {
c011351d:	8b 55 14             	mov    0x14(%ebp),%edx
c0113520:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113523:	01 c2                	add    %eax,%edx
c0113525:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113528:	8b 00                	mov    (%eax),%eax
c011352a:	8b 00                	mov    (%eax),%eax
c011352c:	39 c2                	cmp    %eax,%edx
c011352e:	76 19                	jbe    c0113549 <sfs_io_nolock+0x314>
        sin->din->size = offset + alen;
c0113530:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113533:	8b 00                	mov    (%eax),%eax
c0113535:	8b 4d 14             	mov    0x14(%ebp),%ecx
c0113538:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c011353b:	01 ca                	add    %ecx,%edx
c011353d:	89 10                	mov    %edx,(%eax)
        sin->dirty = 1;
c011353f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113542:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
    }
    return ret;
c0113549:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
c011354c:	c9                   	leave  
c011354d:	c3                   	ret    

c011354e <sfs_io>:
/*
 * sfs_io - Rd/Wr file. the wrapper of sfs_io_nolock
            with lock protect
 */
static inline int
sfs_io(struct inode *node, struct iobuf *iob, bool write) {
c011354e:	55                   	push   %ebp
c011354f:	89 e5                	mov    %esp,%ebp
c0113551:	83 ec 48             	sub    $0x48,%esp
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c0113554:	8b 45 08             	mov    0x8(%ebp),%eax
c0113557:	8b 40 38             	mov    0x38(%eax),%eax
c011355a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011355d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113561:	74 0a                	je     c011356d <sfs_io+0x1f>
c0113563:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113566:	8b 40 6c             	mov    0x6c(%eax),%eax
c0113569:	85 c0                	test   %eax,%eax
c011356b:	74 24                	je     c0113591 <sfs_io+0x43>
c011356d:	c7 44 24 0c 14 98 11 	movl   $0xc0119814,0xc(%esp)
c0113574:	c0 
c0113575:	c7 44 24 08 bf 95 11 	movl   $0xc01195bf,0x8(%esp)
c011357c:	c0 
c011357d:	c7 44 24 04 8c 02 00 	movl   $0x28c,0x4(%esp)
c0113584:	00 
c0113585:	c7 04 24 57 95 11 c0 	movl   $0xc0119557,(%esp)
c011358c:	e8 37 d9 fe ff       	call   c0100ec8 <__panic>
c0113591:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113594:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0113597:	8b 45 08             	mov    0x8(%ebp),%eax
c011359a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011359d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01135a1:	74 0d                	je     c01135b0 <sfs_io+0x62>
c01135a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01135a6:	8b 40 2c             	mov    0x2c(%eax),%eax
c01135a9:	3d 35 12 00 00       	cmp    $0x1235,%eax
c01135ae:	74 24                	je     c01135d4 <sfs_io+0x86>
c01135b0:	c7 44 24 0c 10 96 11 	movl   $0xc0119610,0xc(%esp)
c01135b7:	c0 
c01135b8:	c7 44 24 08 bf 95 11 	movl   $0xc01195bf,0x8(%esp)
c01135bf:	c0 
c01135c0:	c7 44 24 04 8d 02 00 	movl   $0x28d,0x4(%esp)
c01135c7:	00 
c01135c8:	c7 04 24 57 95 11 c0 	movl   $0xc0119557,(%esp)
c01135cf:	e8 f4 d8 fe ff       	call   c0100ec8 <__panic>
c01135d4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01135d7:	89 45 e8             	mov    %eax,-0x18(%ebp)
    int ret;
    lock_sin(sin);
c01135da:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01135dd:	89 04 24             	mov    %eax,(%esp)
c01135e0:	e8 36 ec ff ff       	call   c011221b <lock_sin>
    {
        size_t alen = iob->io_resid;
c01135e5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01135e8:	8b 40 0c             	mov    0xc(%eax),%eax
c01135eb:	89 45 e0             	mov    %eax,-0x20(%ebp)
        ret = sfs_io_nolock(sfs, sin, iob->io_base, iob->io_offset, &alen, write);
c01135ee:	8b 45 0c             	mov    0xc(%ebp),%eax
c01135f1:	8b 50 04             	mov    0x4(%eax),%edx
c01135f4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01135f7:	8b 00                	mov    (%eax),%eax
c01135f9:	8b 4d 10             	mov    0x10(%ebp),%ecx
c01135fc:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c0113600:	8d 4d e0             	lea    -0x20(%ebp),%ecx
c0113603:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0113607:	89 54 24 0c          	mov    %edx,0xc(%esp)
c011360b:	89 44 24 08          	mov    %eax,0x8(%esp)
c011360f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113612:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113616:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113619:	89 04 24             	mov    %eax,(%esp)
c011361c:	e8 14 fc ff ff       	call   c0113235 <sfs_io_nolock>
c0113621:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (alen != 0) {
c0113624:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113627:	85 c0                	test   %eax,%eax
c0113629:	74 12                	je     c011363d <sfs_io+0xef>
            iobuf_skip(iob, alen);
c011362b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011362e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113632:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113635:	89 04 24             	mov    %eax,(%esp)
c0113638:	e8 21 7e ff ff       	call   c010b45e <iobuf_skip>
        }
    }
    unlock_sin(sin);
c011363d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113640:	89 04 24             	mov    %eax,(%esp)
c0113643:	e8 e9 eb ff ff       	call   c0112231 <unlock_sin>
    return ret;
c0113648:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
c011364b:	c9                   	leave  
c011364c:	c3                   	ret    

c011364d <sfs_read>:

// sfs_read - read file
static int
sfs_read(struct inode *node, struct iobuf *iob) {
c011364d:	55                   	push   %ebp
c011364e:	89 e5                	mov    %esp,%ebp
c0113650:	83 ec 18             	sub    $0x18,%esp
    return sfs_io(node, iob, 0);
c0113653:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c011365a:	00 
c011365b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011365e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113662:	8b 45 08             	mov    0x8(%ebp),%eax
c0113665:	89 04 24             	mov    %eax,(%esp)
c0113668:	e8 e1 fe ff ff       	call   c011354e <sfs_io>
}
c011366d:	c9                   	leave  
c011366e:	c3                   	ret    

c011366f <sfs_write>:

// sfs_write - write file
static int
sfs_write(struct inode *node, struct iobuf *iob) {
c011366f:	55                   	push   %ebp
c0113670:	89 e5                	mov    %esp,%ebp
c0113672:	83 ec 18             	sub    $0x18,%esp
    return sfs_io(node, iob, 1);
c0113675:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c011367c:	00 
c011367d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113680:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113684:	8b 45 08             	mov    0x8(%ebp),%eax
c0113687:	89 04 24             	mov    %eax,(%esp)
c011368a:	e8 bf fe ff ff       	call   c011354e <sfs_io>
}
c011368f:	c9                   	leave  
c0113690:	c3                   	ret    

c0113691 <sfs_fstat>:

/*
 * sfs_fstat - Return nlinks/block/size, etc. info about a file. The pointer is a pointer to struct stat;
 */
static int
sfs_fstat(struct inode *node, struct stat *stat) {
c0113691:	55                   	push   %ebp
c0113692:	89 e5                	mov    %esp,%ebp
c0113694:	83 ec 28             	sub    $0x28,%esp
    int ret;
    memset(stat, 0, sizeof(struct stat));
c0113697:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c011369e:	00 
c011369f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01136a6:	00 
c01136a7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01136aa:	89 04 24             	mov    %eax,(%esp)
c01136ad:	e8 93 1e 00 00       	call   c0115545 <memset>
    if ((ret = vop_gettype(node, &(stat->st_mode))) != 0) {
c01136b2:	8b 45 08             	mov    0x8(%ebp),%eax
c01136b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01136b8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01136bc:	74 17                	je     c01136d5 <sfs_fstat+0x44>
c01136be:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01136c1:	8b 40 3c             	mov    0x3c(%eax),%eax
c01136c4:	85 c0                	test   %eax,%eax
c01136c6:	74 0d                	je     c01136d5 <sfs_fstat+0x44>
c01136c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01136cb:	8b 40 3c             	mov    0x3c(%eax),%eax
c01136ce:	8b 40 28             	mov    0x28(%eax),%eax
c01136d1:	85 c0                	test   %eax,%eax
c01136d3:	75 24                	jne    c01136f9 <sfs_fstat+0x68>
c01136d5:	c7 44 24 0c 40 98 11 	movl   $0xc0119840,0xc(%esp)
c01136dc:	c0 
c01136dd:	c7 44 24 08 bf 95 11 	movl   $0xc01195bf,0x8(%esp)
c01136e4:	c0 
c01136e5:	c7 44 24 04 ae 02 00 	movl   $0x2ae,0x4(%esp)
c01136ec:	00 
c01136ed:	c7 04 24 57 95 11 c0 	movl   $0xc0119557,(%esp)
c01136f4:	e8 cf d7 fe ff       	call   c0100ec8 <__panic>
c01136f9:	c7 44 24 04 90 98 11 	movl   $0xc0119890,0x4(%esp)
c0113700:	c0 
c0113701:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113704:	89 04 24             	mov    %eax,(%esp)
c0113707:	e8 e1 bb ff ff       	call   c010f2ed <inode_check>
c011370c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011370f:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113712:	8b 40 28             	mov    0x28(%eax),%eax
c0113715:	8b 55 0c             	mov    0xc(%ebp),%edx
c0113718:	89 54 24 04          	mov    %edx,0x4(%esp)
c011371c:	8b 55 08             	mov    0x8(%ebp),%edx
c011371f:	89 14 24             	mov    %edx,(%esp)
c0113722:	ff d0                	call   *%eax
c0113724:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0113727:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011372b:	74 05                	je     c0113732 <sfs_fstat+0xa1>
        return ret;
c011372d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113730:	eb 71                	jmp    c01137a3 <sfs_fstat+0x112>
    }
    struct sfs_disk_inode *din = vop_info(node, sfs_inode)->din;
c0113732:	8b 45 08             	mov    0x8(%ebp),%eax
c0113735:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0113738:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011373c:	74 0d                	je     c011374b <sfs_fstat+0xba>
c011373e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113741:	8b 40 2c             	mov    0x2c(%eax),%eax
c0113744:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0113749:	74 24                	je     c011376f <sfs_fstat+0xde>
c011374b:	c7 44 24 0c 10 96 11 	movl   $0xc0119610,0xc(%esp)
c0113752:	c0 
c0113753:	c7 44 24 08 bf 95 11 	movl   $0xc01195bf,0x8(%esp)
c011375a:	c0 
c011375b:	c7 44 24 04 b1 02 00 	movl   $0x2b1,0x4(%esp)
c0113762:	00 
c0113763:	c7 04 24 57 95 11 c0 	movl   $0xc0119557,(%esp)
c011376a:	e8 59 d7 fe ff       	call   c0100ec8 <__panic>
c011376f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113772:	8b 00                	mov    (%eax),%eax
c0113774:	89 45 e8             	mov    %eax,-0x18(%ebp)
    stat->st_nlinks = din->nlinks;
c0113777:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011377a:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c011377e:	0f b7 d0             	movzwl %ax,%edx
c0113781:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113784:	89 50 04             	mov    %edx,0x4(%eax)
    stat->st_blocks = din->blocks;
c0113787:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011378a:	8b 50 08             	mov    0x8(%eax),%edx
c011378d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113790:	89 50 08             	mov    %edx,0x8(%eax)
    stat->st_size = din->size;
c0113793:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113796:	8b 10                	mov    (%eax),%edx
c0113798:	8b 45 0c             	mov    0xc(%ebp),%eax
c011379b:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c011379e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01137a3:	c9                   	leave  
c01137a4:	c3                   	ret    

c01137a5 <sfs_fsync>:

/*
 * sfs_fsync - Force any dirty inode info associated with this file to stable storage.
 */
static int
sfs_fsync(struct inode *node) {
c01137a5:	55                   	push   %ebp
c01137a6:	89 e5                	mov    %esp,%ebp
c01137a8:	83 ec 48             	sub    $0x48,%esp
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c01137ab:	8b 45 08             	mov    0x8(%ebp),%eax
c01137ae:	8b 40 38             	mov    0x38(%eax),%eax
c01137b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01137b4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01137b8:	74 0a                	je     c01137c4 <sfs_fsync+0x1f>
c01137ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01137bd:	8b 40 6c             	mov    0x6c(%eax),%eax
c01137c0:	85 c0                	test   %eax,%eax
c01137c2:	74 24                	je     c01137e8 <sfs_fsync+0x43>
c01137c4:	c7 44 24 0c 14 98 11 	movl   $0xc0119814,0xc(%esp)
c01137cb:	c0 
c01137cc:	c7 44 24 08 bf 95 11 	movl   $0xc01195bf,0x8(%esp)
c01137d3:	c0 
c01137d4:	c7 44 24 04 bd 02 00 	movl   $0x2bd,0x4(%esp)
c01137db:	00 
c01137dc:	c7 04 24 57 95 11 c0 	movl   $0xc0119557,(%esp)
c01137e3:	e8 e0 d6 fe ff       	call   c0100ec8 <__panic>
c01137e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01137eb:	89 45 ec             	mov    %eax,-0x14(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c01137ee:	8b 45 08             	mov    0x8(%ebp),%eax
c01137f1:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01137f4:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01137f8:	74 0d                	je     c0113807 <sfs_fsync+0x62>
c01137fa:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01137fd:	8b 40 2c             	mov    0x2c(%eax),%eax
c0113800:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0113805:	74 24                	je     c011382b <sfs_fsync+0x86>
c0113807:	c7 44 24 0c 10 96 11 	movl   $0xc0119610,0xc(%esp)
c011380e:	c0 
c011380f:	c7 44 24 08 bf 95 11 	movl   $0xc01195bf,0x8(%esp)
c0113816:	c0 
c0113817:	c7 44 24 04 be 02 00 	movl   $0x2be,0x4(%esp)
c011381e:	00 
c011381f:	c7 04 24 57 95 11 c0 	movl   $0xc0119557,(%esp)
c0113826:	e8 9d d6 fe ff       	call   c0100ec8 <__panic>
c011382b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011382e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    int ret = 0;
c0113831:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (sin->dirty) {
c0113838:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011383b:	8b 40 08             	mov    0x8(%eax),%eax
c011383e:	85 c0                	test   %eax,%eax
c0113840:	74 6b                	je     c01138ad <sfs_fsync+0x108>
        lock_sin(sin);
c0113842:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113845:	89 04 24             	mov    %eax,(%esp)
c0113848:	e8 ce e9 ff ff       	call   c011221b <lock_sin>
        {
            if (sin->dirty) {
c011384d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113850:	8b 40 08             	mov    0x8(%eax),%eax
c0113853:	85 c0                	test   %eax,%eax
c0113855:	74 4b                	je     c01138a2 <sfs_fsync+0xfd>
                sin->dirty = 0;
c0113857:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011385a:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
                if ((ret = sfs_wbuf(sfs, sin->din, sizeof(struct sfs_disk_inode), sin->ino, 0)) != 0) {
c0113861:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113864:	8b 50 04             	mov    0x4(%eax),%edx
c0113867:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011386a:	8b 00                	mov    (%eax),%eax
c011386c:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0113873:	00 
c0113874:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0113878:	c7 44 24 08 40 00 00 	movl   $0x40,0x8(%esp)
c011387f:	00 
c0113880:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113884:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113887:	89 04 24             	mov    %eax,(%esp)
c011388a:	e8 ae 0e 00 00       	call   c011473d <sfs_wbuf>
c011388f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113892:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113896:	74 0a                	je     c01138a2 <sfs_fsync+0xfd>
                    sin->dirty = 1;
c0113898:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011389b:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
                }
            }
        }
        unlock_sin(sin);
c01138a2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01138a5:	89 04 24             	mov    %eax,(%esp)
c01138a8:	e8 84 e9 ff ff       	call   c0112231 <unlock_sin>
    }
    return ret;
c01138ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01138b0:	c9                   	leave  
c01138b1:	c3                   	ret    

c01138b2 <sfs_namefile>:
/*
 *sfs_namefile -Compute pathname relative to filesystem root of the file and copy to the specified io buffer.
 *  
 */
static int
sfs_namefile(struct inode *node, struct iobuf *iob) {
c01138b2:	55                   	push   %ebp
c01138b3:	89 e5                	mov    %esp,%ebp
c01138b5:	83 ec 58             	sub    $0x58,%esp
    struct sfs_disk_entry *entry;
    if (iob->io_resid <= 2 || (entry = kmalloc(sizeof(struct sfs_disk_entry))) == NULL) {
c01138b8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01138bb:	8b 40 0c             	mov    0xc(%eax),%eax
c01138be:	83 f8 02             	cmp    $0x2,%eax
c01138c1:	76 15                	jbe    c01138d8 <sfs_namefile+0x26>
c01138c3:	c7 04 24 04 01 00 00 	movl   $0x104,(%esp)
c01138ca:	e8 10 14 ff ff       	call   c0104cdf <kmalloc>
c01138cf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01138d2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01138d6:	75 0a                	jne    c01138e2 <sfs_namefile+0x30>
        return -E_NO_MEM;
c01138d8:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c01138dd:	e9 bd 02 00 00       	jmp    c0113b9f <sfs_namefile+0x2ed>
    }

    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c01138e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01138e5:	8b 40 38             	mov    0x38(%eax),%eax
c01138e8:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01138eb:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01138ef:	74 0a                	je     c01138fb <sfs_namefile+0x49>
c01138f1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01138f4:	8b 40 6c             	mov    0x6c(%eax),%eax
c01138f7:	85 c0                	test   %eax,%eax
c01138f9:	74 24                	je     c011391f <sfs_namefile+0x6d>
c01138fb:	c7 44 24 0c 14 98 11 	movl   $0xc0119814,0xc(%esp)
c0113902:	c0 
c0113903:	c7 44 24 08 bf 95 11 	movl   $0xc01195bf,0x8(%esp)
c011390a:	c0 
c011390b:	c7 44 24 04 da 02 00 	movl   $0x2da,0x4(%esp)
c0113912:	00 
c0113913:	c7 04 24 57 95 11 c0 	movl   $0xc0119557,(%esp)
c011391a:	e8 a9 d5 fe ff       	call   c0100ec8 <__panic>
c011391f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113922:	89 45 dc             	mov    %eax,-0x24(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0113925:	8b 45 08             	mov    0x8(%ebp),%eax
c0113928:	89 45 d8             	mov    %eax,-0x28(%ebp)
c011392b:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c011392f:	74 0d                	je     c011393e <sfs_namefile+0x8c>
c0113931:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0113934:	8b 40 2c             	mov    0x2c(%eax),%eax
c0113937:	3d 35 12 00 00       	cmp    $0x1235,%eax
c011393c:	74 24                	je     c0113962 <sfs_namefile+0xb0>
c011393e:	c7 44 24 0c 10 96 11 	movl   $0xc0119610,0xc(%esp)
c0113945:	c0 
c0113946:	c7 44 24 08 bf 95 11 	movl   $0xc01195bf,0x8(%esp)
c011394d:	c0 
c011394e:	c7 44 24 04 db 02 00 	movl   $0x2db,0x4(%esp)
c0113955:	00 
c0113956:	c7 04 24 57 95 11 c0 	movl   $0xc0119557,(%esp)
c011395d:	e8 66 d5 fe ff       	call   c0100ec8 <__panic>
c0113962:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0113965:	89 45 f4             	mov    %eax,-0xc(%ebp)

    int ret;
    char *ptr = iob->io_base + iob->io_resid;
c0113968:	8b 45 0c             	mov    0xc(%ebp),%eax
c011396b:	8b 10                	mov    (%eax),%edx
c011396d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113970:	8b 40 0c             	mov    0xc(%eax),%eax
c0113973:	01 d0                	add    %edx,%eax
c0113975:	89 45 ec             	mov    %eax,-0x14(%ebp)
    size_t alen, resid = iob->io_resid - 2;
c0113978:	8b 45 0c             	mov    0xc(%ebp),%eax
c011397b:	8b 40 0c             	mov    0xc(%eax),%eax
c011397e:	83 e8 02             	sub    $0x2,%eax
c0113981:	89 45 e8             	mov    %eax,-0x18(%ebp)
    vop_ref_inc(node);
c0113984:	8b 45 08             	mov    0x8(%ebp),%eax
c0113987:	89 04 24             	mov    %eax,(%esp)
c011398a:	e8 56 b7 ff ff       	call   c010f0e5 <inode_ref_inc>
    while (1) {
        struct inode *parent;
        if ((ret = sfs_lookup_once(sfs, sin, "..", &parent, NULL)) != 0) {
c011398f:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0113996:	00 
c0113997:	8d 45 c8             	lea    -0x38(%ebp),%eax
c011399a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011399e:	c7 44 24 08 98 98 11 	movl   $0xc0119898,0x8(%esp)
c01139a5:	c0 
c01139a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01139a9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01139ad:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01139b0:	89 04 24             	mov    %eax,(%esp)
c01139b3:	e8 5e f7 ff ff       	call   c0113116 <sfs_lookup_once>
c01139b8:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01139bb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01139bf:	74 05                	je     c01139c6 <sfs_namefile+0x114>
            goto failed;
c01139c1:	e9 c0 01 00 00       	jmp    c0113b86 <sfs_namefile+0x2d4>
        }

        uint32_t ino = sin->ino;
c01139c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01139c9:	8b 40 04             	mov    0x4(%eax),%eax
c01139cc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        vop_ref_dec(node);
c01139cf:	8b 45 08             	mov    0x8(%ebp),%eax
c01139d2:	89 04 24             	mov    %eax,(%esp)
c01139d5:	e8 25 b7 ff ff       	call   c010f0ff <inode_ref_dec>
        if (node == parent) {
c01139da:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01139dd:	39 45 08             	cmp    %eax,0x8(%ebp)
c01139e0:	75 76                	jne    c0113a58 <sfs_namefile+0x1a6>
            vop_ref_dec(node);
c01139e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01139e5:	89 04 24             	mov    %eax,(%esp)
c01139e8:	e8 12 b7 ff ff       	call   c010f0ff <inode_ref_dec>
        }
        resid -= alen, ptr -= alen;
        memcpy(ptr, entry->name, alen - 1);
        ptr[alen - 1] = '/';
    }
    alen = iob->io_resid - resid - 2;
c01139ed:	8b 45 0c             	mov    0xc(%ebp),%eax
c01139f0:	8b 40 0c             	mov    0xc(%eax),%eax
c01139f3:	2b 45 e8             	sub    -0x18(%ebp),%eax
c01139f6:	83 e8 02             	sub    $0x2,%eax
c01139f9:	89 45 d0             	mov    %eax,-0x30(%ebp)
    ptr = memmove(iob->io_base + 1, ptr, alen);
c01139fc:	8b 45 0c             	mov    0xc(%ebp),%eax
c01139ff:	8b 00                	mov    (%eax),%eax
c0113a01:	8d 50 01             	lea    0x1(%eax),%edx
c0113a04:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113a07:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113a0b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113a0e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113a12:	89 14 24             	mov    %edx,(%esp)
c0113a15:	e8 6a 1b 00 00       	call   c0115584 <memmove>
c0113a1a:	89 45 ec             	mov    %eax,-0x14(%ebp)
    ptr[-1] = '/', ptr[alen] = '\0';
c0113a1d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113a20:	83 e8 01             	sub    $0x1,%eax
c0113a23:	c6 00 2f             	movb   $0x2f,(%eax)
c0113a26:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113a29:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0113a2c:	01 d0                	add    %edx,%eax
c0113a2e:	c6 00 00             	movb   $0x0,(%eax)
    iobuf_skip(iob, alen);
c0113a31:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113a34:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113a38:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113a3b:	89 04 24             	mov    %eax,(%esp)
c0113a3e:	e8 1b 7a ff ff       	call   c010b45e <iobuf_skip>
    kfree(entry);
c0113a43:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113a46:	89 04 24             	mov    %eax,(%esp)
c0113a49:	e8 ac 12 ff ff       	call   c0104cfa <kfree>
    return 0;
c0113a4e:	b8 00 00 00 00       	mov    $0x0,%eax
c0113a53:	e9 47 01 00 00       	jmp    c0113b9f <sfs_namefile+0x2ed>
        if (node == parent) {
            vop_ref_dec(node);
            break;
        }

        node = parent, sin = vop_info(node, sfs_inode);
c0113a58:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0113a5b:	89 45 08             	mov    %eax,0x8(%ebp)
c0113a5e:	8b 45 08             	mov    0x8(%ebp),%eax
c0113a61:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0113a64:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0113a68:	74 0d                	je     c0113a77 <sfs_namefile+0x1c5>
c0113a6a:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0113a6d:	8b 40 2c             	mov    0x2c(%eax),%eax
c0113a70:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0113a75:	74 24                	je     c0113a9b <sfs_namefile+0x1e9>
c0113a77:	c7 44 24 0c 10 96 11 	movl   $0xc0119610,0xc(%esp)
c0113a7e:	c0 
c0113a7f:	c7 44 24 08 bf 95 11 	movl   $0xc01195bf,0x8(%esp)
c0113a86:	c0 
c0113a87:	c7 44 24 04 ee 02 00 	movl   $0x2ee,0x4(%esp)
c0113a8e:	00 
c0113a8f:	c7 04 24 57 95 11 c0 	movl   $0xc0119557,(%esp)
c0113a96:	e8 2d d4 fe ff       	call   c0100ec8 <__panic>
c0113a9b:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0113a9e:	89 45 f4             	mov    %eax,-0xc(%ebp)
        assert(ino != sin->ino && sin->din->type == SFS_TYPE_DIR);
c0113aa1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113aa4:	8b 40 04             	mov    0x4(%eax),%eax
c0113aa7:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0113aaa:	74 0f                	je     c0113abb <sfs_namefile+0x209>
c0113aac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113aaf:	8b 00                	mov    (%eax),%eax
c0113ab1:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0113ab5:	66 83 f8 02          	cmp    $0x2,%ax
c0113ab9:	74 24                	je     c0113adf <sfs_namefile+0x22d>
c0113abb:	c7 44 24 0c 9c 98 11 	movl   $0xc011989c,0xc(%esp)
c0113ac2:	c0 
c0113ac3:	c7 44 24 08 bf 95 11 	movl   $0xc01195bf,0x8(%esp)
c0113aca:	c0 
c0113acb:	c7 44 24 04 ef 02 00 	movl   $0x2ef,0x4(%esp)
c0113ad2:	00 
c0113ad3:	c7 04 24 57 95 11 c0 	movl   $0xc0119557,(%esp)
c0113ada:	e8 e9 d3 fe ff       	call   c0100ec8 <__panic>

        lock_sin(sin);
c0113adf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113ae2:	89 04 24             	mov    %eax,(%esp)
c0113ae5:	e8 31 e7 ff ff       	call   c011221b <lock_sin>
        {
            ret = sfs_dirent_findino_nolock(sfs, sin, ino, entry);
c0113aea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113aed:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0113af1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0113af4:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113af8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113afb:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113aff:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113b02:	89 04 24             	mov    %eax,(%esp)
c0113b05:	e8 a0 f5 ff ff       	call   c01130aa <sfs_dirent_findino_nolock>
c0113b0a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
        unlock_sin(sin);
c0113b0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113b10:	89 04 24             	mov    %eax,(%esp)
c0113b13:	e8 19 e7 ff ff       	call   c0112231 <unlock_sin>

        if (ret != 0) {
c0113b18:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0113b1c:	74 03                	je     c0113b21 <sfs_namefile+0x26f>
            goto failed;
c0113b1e:	90                   	nop
c0113b1f:	eb 65                	jmp    c0113b86 <sfs_namefile+0x2d4>
        }

        if ((alen = strlen(entry->name) + 1) > resid) {
c0113b21:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113b24:	83 c0 04             	add    $0x4,%eax
c0113b27:	89 04 24             	mov    %eax,(%esp)
c0113b2a:	e8 c0 16 00 00       	call   c01151ef <strlen>
c0113b2f:	83 c0 01             	add    $0x1,%eax
c0113b32:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0113b35:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113b38:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0113b3b:	76 09                	jbe    c0113b46 <sfs_namefile+0x294>
    iobuf_skip(iob, alen);
    kfree(entry);
    return 0;

failed_nomem:
    ret = -E_NO_MEM;
c0113b3d:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
c0113b44:	eb 40                	jmp    c0113b86 <sfs_namefile+0x2d4>
        }

        if ((alen = strlen(entry->name) + 1) > resid) {
            goto failed_nomem;
        }
        resid -= alen, ptr -= alen;
c0113b46:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113b49:	29 45 e8             	sub    %eax,-0x18(%ebp)
c0113b4c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113b4f:	f7 d8                	neg    %eax
c0113b51:	01 45 ec             	add    %eax,-0x14(%ebp)
        memcpy(ptr, entry->name, alen - 1);
c0113b54:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113b57:	8d 50 ff             	lea    -0x1(%eax),%edx
c0113b5a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113b5d:	83 c0 04             	add    $0x4,%eax
c0113b60:	89 54 24 08          	mov    %edx,0x8(%esp)
c0113b64:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113b68:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113b6b:	89 04 24             	mov    %eax,(%esp)
c0113b6e:	e8 b4 1a 00 00       	call   c0115627 <memcpy>
        ptr[alen - 1] = '/';
c0113b73:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113b76:	8d 50 ff             	lea    -0x1(%eax),%edx
c0113b79:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113b7c:	01 d0                	add    %edx,%eax
c0113b7e:	c6 00 2f             	movb   $0x2f,(%eax)
    }
c0113b81:	e9 09 fe ff ff       	jmp    c011398f <sfs_namefile+0xdd>
    return 0;

failed_nomem:
    ret = -E_NO_MEM;
failed:
    vop_ref_dec(node);
c0113b86:	8b 45 08             	mov    0x8(%ebp),%eax
c0113b89:	89 04 24             	mov    %eax,(%esp)
c0113b8c:	e8 6e b5 ff ff       	call   c010f0ff <inode_ref_dec>
    kfree(entry);
c0113b91:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113b94:	89 04 24             	mov    %eax,(%esp)
c0113b97:	e8 5e 11 ff ff       	call   c0104cfa <kfree>
    return ret;
c0113b9c:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0113b9f:	c9                   	leave  
c0113ba0:	c3                   	ret    

c0113ba1 <sfs_getdirentry_sub_nolock>:

/*
 * sfs_getdirentry_sub_noblock - get the content of file entry in DIR
 */
static int
sfs_getdirentry_sub_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, int slot, struct sfs_disk_entry *entry) {
c0113ba1:	55                   	push   %ebp
c0113ba2:	89 e5                	mov    %esp,%ebp
c0113ba4:	83 ec 28             	sub    $0x28,%esp
    int ret, i, nslots = sin->din->blocks;
c0113ba7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113baa:	8b 00                	mov    (%eax),%eax
c0113bac:	8b 40 08             	mov    0x8(%eax),%eax
c0113baf:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (i = 0; i < nslots; i ++) {
c0113bb2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0113bb9:	eb 4c                	jmp    c0113c07 <sfs_getdirentry_sub_nolock+0x66>
        if ((ret = sfs_dirent_read_nolock(sfs, sin, i, entry)) != 0) {
c0113bbb:	8b 45 14             	mov    0x14(%ebp),%eax
c0113bbe:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0113bc2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113bc5:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113bc9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113bcc:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113bd0:	8b 45 08             	mov    0x8(%ebp),%eax
c0113bd3:	89 04 24             	mov    %eax,(%esp)
c0113bd6:	e8 a6 f2 ff ff       	call   c0112e81 <sfs_dirent_read_nolock>
c0113bdb:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0113bde:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0113be2:	74 05                	je     c0113be9 <sfs_getdirentry_sub_nolock+0x48>
            return ret;
c0113be4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113be7:	eb 2b                	jmp    c0113c14 <sfs_getdirentry_sub_nolock+0x73>
        }
        if (entry->ino != 0) {
c0113be9:	8b 45 14             	mov    0x14(%ebp),%eax
c0113bec:	8b 00                	mov    (%eax),%eax
c0113bee:	85 c0                	test   %eax,%eax
c0113bf0:	74 11                	je     c0113c03 <sfs_getdirentry_sub_nolock+0x62>
            if (slot == 0) {
c0113bf2:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0113bf6:	75 07                	jne    c0113bff <sfs_getdirentry_sub_nolock+0x5e>
                return 0;
c0113bf8:	b8 00 00 00 00       	mov    $0x0,%eax
c0113bfd:	eb 15                	jmp    c0113c14 <sfs_getdirentry_sub_nolock+0x73>
            }
            slot --;
c0113bff:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
 * sfs_getdirentry_sub_noblock - get the content of file entry in DIR
 */
static int
sfs_getdirentry_sub_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, int slot, struct sfs_disk_entry *entry) {
    int ret, i, nslots = sin->din->blocks;
    for (i = 0; i < nslots; i ++) {
c0113c03:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0113c07:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113c0a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0113c0d:	7c ac                	jl     c0113bbb <sfs_getdirentry_sub_nolock+0x1a>
                return 0;
            }
            slot --;
        }
    }
    return -E_NOENT;
c0113c0f:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
c0113c14:	c9                   	leave  
c0113c15:	c3                   	ret    

c0113c16 <sfs_getdirentry>:
/*
 * sfs_getdirentry - according to the iob->io_offset, calculate the dir entry's slot in disk block,
                     get dir entry content from the disk 
 */
static int
sfs_getdirentry(struct inode *node, struct iobuf *iob) {
c0113c16:	55                   	push   %ebp
c0113c17:	89 e5                	mov    %esp,%ebp
c0113c19:	83 ec 48             	sub    $0x48,%esp
    struct sfs_disk_entry *entry;
    if ((entry = kmalloc(sizeof(struct sfs_disk_entry))) == NULL) {
c0113c1c:	c7 04 24 04 01 00 00 	movl   $0x104,(%esp)
c0113c23:	e8 b7 10 ff ff       	call   c0104cdf <kmalloc>
c0113c28:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0113c2b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0113c2f:	75 0a                	jne    c0113c3b <sfs_getdirentry+0x25>
        return -E_NO_MEM;
c0113c31:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0113c36:	e9 6b 01 00 00       	jmp    c0113da6 <sfs_getdirentry+0x190>
    }

    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c0113c3b:	8b 45 08             	mov    0x8(%ebp),%eax
c0113c3e:	8b 40 38             	mov    0x38(%eax),%eax
c0113c41:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0113c44:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0113c48:	74 0a                	je     c0113c54 <sfs_getdirentry+0x3e>
c0113c4a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113c4d:	8b 40 6c             	mov    0x6c(%eax),%eax
c0113c50:	85 c0                	test   %eax,%eax
c0113c52:	74 24                	je     c0113c78 <sfs_getdirentry+0x62>
c0113c54:	c7 44 24 0c 14 98 11 	movl   $0xc0119814,0xc(%esp)
c0113c5b:	c0 
c0113c5c:	c7 44 24 08 bf 95 11 	movl   $0xc01195bf,0x8(%esp)
c0113c63:	c0 
c0113c64:	c7 44 24 04 30 03 00 	movl   $0x330,0x4(%esp)
c0113c6b:	00 
c0113c6c:	c7 04 24 57 95 11 c0 	movl   $0xc0119557,(%esp)
c0113c73:	e8 50 d2 fe ff       	call   c0100ec8 <__panic>
c0113c78:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113c7b:	89 45 e8             	mov    %eax,-0x18(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0113c7e:	8b 45 08             	mov    0x8(%ebp),%eax
c0113c81:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0113c84:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0113c88:	74 0d                	je     c0113c97 <sfs_getdirentry+0x81>
c0113c8a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113c8d:	8b 40 2c             	mov    0x2c(%eax),%eax
c0113c90:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0113c95:	74 24                	je     c0113cbb <sfs_getdirentry+0xa5>
c0113c97:	c7 44 24 0c 10 96 11 	movl   $0xc0119610,0xc(%esp)
c0113c9e:	c0 
c0113c9f:	c7 44 24 08 bf 95 11 	movl   $0xc01195bf,0x8(%esp)
c0113ca6:	c0 
c0113ca7:	c7 44 24 04 31 03 00 	movl   $0x331,0x4(%esp)
c0113cae:	00 
c0113caf:	c7 04 24 57 95 11 c0 	movl   $0xc0119557,(%esp)
c0113cb6:	e8 0d d2 fe ff       	call   c0100ec8 <__panic>
c0113cbb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113cbe:	89 45 e0             	mov    %eax,-0x20(%ebp)

    int ret, slot;
    off_t offset = iob->io_offset;
c0113cc1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113cc4:	8b 40 04             	mov    0x4(%eax),%eax
c0113cc7:	89 45 dc             	mov    %eax,-0x24(%ebp)
    if (offset < 0 || offset % sfs_dentry_size != 0) {
c0113cca:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0113cce:	78 0a                	js     c0113cda <sfs_getdirentry+0xc4>
c0113cd0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113cd3:	0f b6 c0             	movzbl %al,%eax
c0113cd6:	85 c0                	test   %eax,%eax
c0113cd8:	74 15                	je     c0113cef <sfs_getdirentry+0xd9>
        kfree(entry);
c0113cda:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113cdd:	89 04 24             	mov    %eax,(%esp)
c0113ce0:	e8 15 10 ff ff       	call   c0104cfa <kfree>
        return -E_INVAL;
c0113ce5:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0113cea:	e9 b7 00 00 00       	jmp    c0113da6 <sfs_getdirentry+0x190>
    }
    if ((slot = offset / sfs_dentry_size) > sin->din->blocks) {
c0113cef:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113cf2:	c1 e8 08             	shr    $0x8,%eax
c0113cf5:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0113cf8:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0113cfb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113cfe:	8b 00                	mov    (%eax),%eax
c0113d00:	8b 40 08             	mov    0x8(%eax),%eax
c0113d03:	39 c2                	cmp    %eax,%edx
c0113d05:	76 15                	jbe    c0113d1c <sfs_getdirentry+0x106>
        kfree(entry);
c0113d07:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113d0a:	89 04 24             	mov    %eax,(%esp)
c0113d0d:	e8 e8 0f ff ff       	call   c0104cfa <kfree>
        return -E_NOENT;
c0113d12:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
c0113d17:	e9 8a 00 00 00       	jmp    c0113da6 <sfs_getdirentry+0x190>
    }
    lock_sin(sin);
c0113d1c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113d1f:	89 04 24             	mov    %eax,(%esp)
c0113d22:	e8 f4 e4 ff ff       	call   c011221b <lock_sin>
    if ((ret = sfs_getdirentry_sub_nolock(sfs, sin, slot, entry)) != 0) {
c0113d27:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113d2a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0113d2e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0113d31:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113d35:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113d38:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113d3c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113d3f:	89 04 24             	mov    %eax,(%esp)
c0113d42:	e8 5a fe ff ff       	call   c0113ba1 <sfs_getdirentry_sub_nolock>
c0113d47:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113d4a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113d4e:	74 0d                	je     c0113d5d <sfs_getdirentry+0x147>
        unlock_sin(sin);
c0113d50:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113d53:	89 04 24             	mov    %eax,(%esp)
c0113d56:	e8 d6 e4 ff ff       	call   c0112231 <unlock_sin>
        goto out;
c0113d5b:	eb 3b                	jmp    c0113d98 <sfs_getdirentry+0x182>
    }
    unlock_sin(sin);
c0113d5d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113d60:	89 04 24             	mov    %eax,(%esp)
c0113d63:	e8 c9 e4 ff ff       	call   c0112231 <unlock_sin>
    ret = iobuf_move(iob, entry->name, sfs_dentry_size, 1, NULL);
c0113d68:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113d6b:	83 c0 04             	add    $0x4,%eax
c0113d6e:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0113d75:	00 
c0113d76:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0113d7d:	00 
c0113d7e:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
c0113d85:	00 
c0113d86:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113d8a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113d8d:	89 04 24             	mov    %eax,(%esp)
c0113d90:	e8 b4 75 ff ff       	call   c010b349 <iobuf_move>
c0113d95:	89 45 f4             	mov    %eax,-0xc(%ebp)
out:
    kfree(entry);
c0113d98:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113d9b:	89 04 24             	mov    %eax,(%esp)
c0113d9e:	e8 57 0f ff ff       	call   c0104cfa <kfree>
    return ret;
c0113da3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0113da6:	c9                   	leave  
c0113da7:	c3                   	ret    

c0113da8 <sfs_reclaim>:

/*
 * sfs_reclaim - Free all resources inode occupied . Called when inode is no longer in use. 
 */
static int
sfs_reclaim(struct inode *node) {
c0113da8:	55                   	push   %ebp
c0113da9:	89 e5                	mov    %esp,%ebp
c0113dab:	83 ec 38             	sub    $0x38,%esp
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c0113dae:	8b 45 08             	mov    0x8(%ebp),%eax
c0113db1:	8b 40 38             	mov    0x38(%eax),%eax
c0113db4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0113db7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0113dbb:	74 0a                	je     c0113dc7 <sfs_reclaim+0x1f>
c0113dbd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113dc0:	8b 40 6c             	mov    0x6c(%eax),%eax
c0113dc3:	85 c0                	test   %eax,%eax
c0113dc5:	74 24                	je     c0113deb <sfs_reclaim+0x43>
c0113dc7:	c7 44 24 0c 14 98 11 	movl   $0xc0119814,0xc(%esp)
c0113dce:	c0 
c0113dcf:	c7 44 24 08 bf 95 11 	movl   $0xc01195bf,0x8(%esp)
c0113dd6:	c0 
c0113dd7:	c7 44 24 04 4e 03 00 	movl   $0x34e,0x4(%esp)
c0113dde:	00 
c0113ddf:	c7 04 24 57 95 11 c0 	movl   $0xc0119557,(%esp)
c0113de6:	e8 dd d0 fe ff       	call   c0100ec8 <__panic>
c0113deb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113dee:	89 45 ec             	mov    %eax,-0x14(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0113df1:	8b 45 08             	mov    0x8(%ebp),%eax
c0113df4:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0113df7:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0113dfb:	74 0d                	je     c0113e0a <sfs_reclaim+0x62>
c0113dfd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113e00:	8b 40 2c             	mov    0x2c(%eax),%eax
c0113e03:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0113e08:	74 24                	je     c0113e2e <sfs_reclaim+0x86>
c0113e0a:	c7 44 24 0c 10 96 11 	movl   $0xc0119610,0xc(%esp)
c0113e11:	c0 
c0113e12:	c7 44 24 08 bf 95 11 	movl   $0xc01195bf,0x8(%esp)
c0113e19:	c0 
c0113e1a:	c7 44 24 04 4f 03 00 	movl   $0x34f,0x4(%esp)
c0113e21:	00 
c0113e22:	c7 04 24 57 95 11 c0 	movl   $0xc0119557,(%esp)
c0113e29:	e8 9a d0 fe ff       	call   c0100ec8 <__panic>
c0113e2e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113e31:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    int  ret = -E_BUSY;
c0113e34:	c7 45 f4 f1 ff ff ff 	movl   $0xfffffff1,-0xc(%ebp)
    uint32_t ent;
    lock_sfs_fs(sfs);
c0113e3b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113e3e:	89 04 24             	mov    %eax,(%esp)
c0113e41:	e8 4d 0b 00 00       	call   c0114993 <lock_sfs_fs>
    assert(sin->reclaim_count > 0);
c0113e46:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113e49:	8b 40 0c             	mov    0xc(%eax),%eax
c0113e4c:	85 c0                	test   %eax,%eax
c0113e4e:	7f 24                	jg     c0113e74 <sfs_reclaim+0xcc>
c0113e50:	c7 44 24 0c ce 98 11 	movl   $0xc01198ce,0xc(%esp)
c0113e57:	c0 
c0113e58:	c7 44 24 08 bf 95 11 	movl   $0xc01195bf,0x8(%esp)
c0113e5f:	c0 
c0113e60:	c7 44 24 04 54 03 00 	movl   $0x354,0x4(%esp)
c0113e67:	00 
c0113e68:	c7 04 24 57 95 11 c0 	movl   $0xc0119557,(%esp)
c0113e6f:	e8 54 d0 fe ff       	call   c0100ec8 <__panic>
    if ((-- sin->reclaim_count) != 0 || inode_ref_count(node) != 0) {
c0113e74:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113e77:	8b 40 0c             	mov    0xc(%eax),%eax
c0113e7a:	8d 50 ff             	lea    -0x1(%eax),%edx
c0113e7d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113e80:	89 50 0c             	mov    %edx,0xc(%eax)
c0113e83:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113e86:	8b 40 0c             	mov    0xc(%eax),%eax
c0113e89:	85 c0                	test   %eax,%eax
c0113e8b:	0f 85 a1 01 00 00    	jne    c0114032 <sfs_reclaim+0x28a>
c0113e91:	8b 45 08             	mov    0x8(%ebp),%eax
c0113e94:	89 04 24             	mov    %eax,(%esp)
c0113e97:	e8 74 e3 ff ff       	call   c0112210 <inode_ref_count>
c0113e9c:	85 c0                	test   %eax,%eax
c0113e9e:	0f 85 8e 01 00 00    	jne    c0114032 <sfs_reclaim+0x28a>
        goto failed_unlock;
    }
    if (sin->din->nlinks == 0) {
c0113ea4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113ea7:	8b 00                	mov    (%eax),%eax
c0113ea9:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c0113ead:	66 85 c0             	test   %ax,%ax
c0113eb0:	0f 85 81 00 00 00    	jne    c0113f37 <sfs_reclaim+0x18f>
        if ((ret = vop_truncate(node, 0)) != 0) {
c0113eb6:	8b 45 08             	mov    0x8(%ebp),%eax
c0113eb9:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0113ebc:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0113ec0:	74 17                	je     c0113ed9 <sfs_reclaim+0x131>
c0113ec2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113ec5:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113ec8:	85 c0                	test   %eax,%eax
c0113eca:	74 0d                	je     c0113ed9 <sfs_reclaim+0x131>
c0113ecc:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113ecf:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113ed2:	8b 40 30             	mov    0x30(%eax),%eax
c0113ed5:	85 c0                	test   %eax,%eax
c0113ed7:	75 24                	jne    c0113efd <sfs_reclaim+0x155>
c0113ed9:	c7 44 24 0c e8 98 11 	movl   $0xc01198e8,0xc(%esp)
c0113ee0:	c0 
c0113ee1:	c7 44 24 08 bf 95 11 	movl   $0xc01195bf,0x8(%esp)
c0113ee8:	c0 
c0113ee9:	c7 44 24 04 59 03 00 	movl   $0x359,0x4(%esp)
c0113ef0:	00 
c0113ef1:	c7 04 24 57 95 11 c0 	movl   $0xc0119557,(%esp)
c0113ef8:	e8 cb cf fe ff       	call   c0100ec8 <__panic>
c0113efd:	c7 44 24 04 39 99 11 	movl   $0xc0119939,0x4(%esp)
c0113f04:	c0 
c0113f05:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113f08:	89 04 24             	mov    %eax,(%esp)
c0113f0b:	e8 dd b3 ff ff       	call   c010f2ed <inode_check>
c0113f10:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113f13:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113f16:	8b 40 30             	mov    0x30(%eax),%eax
c0113f19:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0113f20:	00 
c0113f21:	8b 55 08             	mov    0x8(%ebp),%edx
c0113f24:	89 14 24             	mov    %edx,(%esp)
c0113f27:	ff d0                	call   *%eax
c0113f29:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113f2c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113f30:	74 05                	je     c0113f37 <sfs_reclaim+0x18f>
            goto failed_unlock;
c0113f32:	e9 fb 00 00 00       	jmp    c0114032 <sfs_reclaim+0x28a>
        }
    }
    if (sin->dirty) {
c0113f37:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113f3a:	8b 40 08             	mov    0x8(%eax),%eax
c0113f3d:	85 c0                	test   %eax,%eax
c0113f3f:	74 76                	je     c0113fb7 <sfs_reclaim+0x20f>
        if ((ret = vop_fsync(node)) != 0) {
c0113f41:	8b 45 08             	mov    0x8(%ebp),%eax
c0113f44:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0113f47:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0113f4b:	74 17                	je     c0113f64 <sfs_reclaim+0x1bc>
c0113f4d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113f50:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113f53:	85 c0                	test   %eax,%eax
c0113f55:	74 0d                	je     c0113f64 <sfs_reclaim+0x1bc>
c0113f57:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113f5a:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113f5d:	8b 40 18             	mov    0x18(%eax),%eax
c0113f60:	85 c0                	test   %eax,%eax
c0113f62:	75 24                	jne    c0113f88 <sfs_reclaim+0x1e0>
c0113f64:	c7 44 24 0c a4 97 11 	movl   $0xc01197a4,0xc(%esp)
c0113f6b:	c0 
c0113f6c:	c7 44 24 08 bf 95 11 	movl   $0xc01195bf,0x8(%esp)
c0113f73:	c0 
c0113f74:	c7 44 24 04 5e 03 00 	movl   $0x35e,0x4(%esp)
c0113f7b:	00 
c0113f7c:	c7 04 24 57 95 11 c0 	movl   $0xc0119557,(%esp)
c0113f83:	e8 40 cf fe ff       	call   c0100ec8 <__panic>
c0113f88:	c7 44 24 04 f2 97 11 	movl   $0xc01197f2,0x4(%esp)
c0113f8f:	c0 
c0113f90:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113f93:	89 04 24             	mov    %eax,(%esp)
c0113f96:	e8 52 b3 ff ff       	call   c010f2ed <inode_check>
c0113f9b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113f9e:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113fa1:	8b 40 18             	mov    0x18(%eax),%eax
c0113fa4:	8b 55 08             	mov    0x8(%ebp),%edx
c0113fa7:	89 14 24             	mov    %edx,(%esp)
c0113faa:	ff d0                	call   *%eax
c0113fac:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113faf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113fb3:	74 02                	je     c0113fb7 <sfs_reclaim+0x20f>
            goto failed_unlock;
c0113fb5:	eb 7b                	jmp    c0114032 <sfs_reclaim+0x28a>
        }
    }
    sfs_remove_links(sin);
c0113fb7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113fba:	89 04 24             	mov    %eax,(%esp)
c0113fbd:	e8 c9 e3 ff ff       	call   c011238b <sfs_remove_links>
    unlock_sfs_fs(sfs);
c0113fc2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113fc5:	89 04 24             	mov    %eax,(%esp)
c0113fc8:	e8 f2 09 00 00       	call   c01149bf <unlock_sfs_fs>

    if (sin->din->nlinks == 0) {
c0113fcd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113fd0:	8b 00                	mov    (%eax),%eax
c0113fd2:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c0113fd6:	66 85 c0             	test   %ax,%ax
c0113fd9:	75 38                	jne    c0114013 <sfs_reclaim+0x26b>
        sfs_block_free(sfs, sin->ino);
c0113fdb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113fde:	8b 40 04             	mov    0x4(%eax),%eax
c0113fe1:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113fe5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113fe8:	89 04 24             	mov    %eax,(%esp)
c0113feb:	e8 2b e5 ff ff       	call   c011251b <sfs_block_free>
        if ((ent = sin->din->indirect) != 0) {
c0113ff0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113ff3:	8b 00                	mov    (%eax),%eax
c0113ff5:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113ff8:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0113ffb:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0113fff:	74 12                	je     c0114013 <sfs_reclaim+0x26b>
            sfs_block_free(sfs, ent);
c0114001:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0114004:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114008:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011400b:	89 04 24             	mov    %eax,(%esp)
c011400e:	e8 08 e5 ff ff       	call   c011251b <sfs_block_free>
        }
    }
    kfree(sin->din);
c0114013:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114016:	8b 00                	mov    (%eax),%eax
c0114018:	89 04 24             	mov    %eax,(%esp)
c011401b:	e8 da 0c ff ff       	call   c0104cfa <kfree>
    vop_kill(node);
c0114020:	8b 45 08             	mov    0x8(%ebp),%eax
c0114023:	89 04 24             	mov    %eax,(%esp)
c0114026:	e8 41 b0 ff ff       	call   c010f06c <inode_kill>
    return 0;
c011402b:	b8 00 00 00 00       	mov    $0x0,%eax
c0114030:	eb 0e                	jmp    c0114040 <sfs_reclaim+0x298>

failed_unlock:
    unlock_sfs_fs(sfs);
c0114032:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114035:	89 04 24             	mov    %eax,(%esp)
c0114038:	e8 82 09 00 00       	call   c01149bf <unlock_sfs_fs>
    return ret;
c011403d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0114040:	c9                   	leave  
c0114041:	c3                   	ret    

c0114042 <sfs_gettype>:

/*
 * sfs_gettype - Return type of file. The values for file types are in sfs.h.
 */
static int
sfs_gettype(struct inode *node, uint32_t *type_store) {
c0114042:	55                   	push   %ebp
c0114043:	89 e5                	mov    %esp,%ebp
c0114045:	83 ec 28             	sub    $0x28,%esp
    struct sfs_disk_inode *din = vop_info(node, sfs_inode)->din;
c0114048:	8b 45 08             	mov    0x8(%ebp),%eax
c011404b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011404e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0114052:	74 0d                	je     c0114061 <sfs_gettype+0x1f>
c0114054:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114057:	8b 40 2c             	mov    0x2c(%eax),%eax
c011405a:	3d 35 12 00 00       	cmp    $0x1235,%eax
c011405f:	74 24                	je     c0114085 <sfs_gettype+0x43>
c0114061:	c7 44 24 0c 10 96 11 	movl   $0xc0119610,0xc(%esp)
c0114068:	c0 
c0114069:	c7 44 24 08 bf 95 11 	movl   $0xc01195bf,0x8(%esp)
c0114070:	c0 
c0114071:	c7 44 24 04 79 03 00 	movl   $0x379,0x4(%esp)
c0114078:	00 
c0114079:	c7 04 24 57 95 11 c0 	movl   $0xc0119557,(%esp)
c0114080:	e8 43 ce fe ff       	call   c0100ec8 <__panic>
c0114085:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114088:	8b 00                	mov    (%eax),%eax
c011408a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    switch (din->type) {
c011408d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114090:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0114094:	0f b7 c0             	movzwl %ax,%eax
c0114097:	83 f8 02             	cmp    $0x2,%eax
c011409a:	74 0c                	je     c01140a8 <sfs_gettype+0x66>
c011409c:	83 f8 03             	cmp    $0x3,%eax
c011409f:	74 27                	je     c01140c8 <sfs_gettype+0x86>
c01140a1:	83 f8 01             	cmp    $0x1,%eax
c01140a4:	74 12                	je     c01140b8 <sfs_gettype+0x76>
c01140a6:	eb 30                	jmp    c01140d8 <sfs_gettype+0x96>
    case SFS_TYPE_DIR:
        *type_store = S_IFDIR;
c01140a8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01140ab:	c7 00 00 20 00 00    	movl   $0x2000,(%eax)
        return 0;
c01140b1:	b8 00 00 00 00       	mov    $0x0,%eax
c01140b6:	eb 4a                	jmp    c0114102 <sfs_gettype+0xc0>
    case SFS_TYPE_FILE:
        *type_store = S_IFREG;
c01140b8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01140bb:	c7 00 00 10 00 00    	movl   $0x1000,(%eax)
        return 0;
c01140c1:	b8 00 00 00 00       	mov    $0x0,%eax
c01140c6:	eb 3a                	jmp    c0114102 <sfs_gettype+0xc0>
    case SFS_TYPE_LINK:
        *type_store = S_IFLNK;
c01140c8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01140cb:	c7 00 00 30 00 00    	movl   $0x3000,(%eax)
        return 0;
c01140d1:	b8 00 00 00 00       	mov    $0x0,%eax
c01140d6:	eb 2a                	jmp    c0114102 <sfs_gettype+0xc0>
    }
    panic("invalid file type %d.\n", din->type);
c01140d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01140db:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c01140df:	0f b7 c0             	movzwl %ax,%eax
c01140e2:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01140e6:	c7 44 24 08 40 95 11 	movl   $0xc0119540,0x8(%esp)
c01140ed:	c0 
c01140ee:	c7 44 24 04 85 03 00 	movl   $0x385,0x4(%esp)
c01140f5:	00 
c01140f6:	c7 04 24 57 95 11 c0 	movl   $0xc0119557,(%esp)
c01140fd:	e8 c6 cd fe ff       	call   c0100ec8 <__panic>
}
c0114102:	c9                   	leave  
c0114103:	c3                   	ret    

c0114104 <sfs_tryseek>:

/* 
 * sfs_tryseek - Check if seeking to the specified position within the file is legal.
 */
static int
sfs_tryseek(struct inode *node, off_t pos) {
c0114104:	55                   	push   %ebp
c0114105:	89 e5                	mov    %esp,%ebp
c0114107:	83 ec 28             	sub    $0x28,%esp
    if (pos < 0 || pos >= SFS_MAX_FILE_SIZE) {
c011410a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c011410e:	78 0a                	js     c011411a <sfs_tryseek+0x16>
c0114110:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114113:	3d ff ff ff 07       	cmp    $0x7ffffff,%eax
c0114118:	76 0a                	jbe    c0114124 <sfs_tryseek+0x20>
        return -E_INVAL;
c011411a:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c011411f:	e9 ca 00 00 00       	jmp    c01141ee <sfs_tryseek+0xea>
    }
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0114124:	8b 45 08             	mov    0x8(%ebp),%eax
c0114127:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011412a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011412e:	74 0d                	je     c011413d <sfs_tryseek+0x39>
c0114130:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114133:	8b 40 2c             	mov    0x2c(%eax),%eax
c0114136:	3d 35 12 00 00       	cmp    $0x1235,%eax
c011413b:	74 24                	je     c0114161 <sfs_tryseek+0x5d>
c011413d:	c7 44 24 0c 10 96 11 	movl   $0xc0119610,0xc(%esp)
c0114144:	c0 
c0114145:	c7 44 24 08 bf 95 11 	movl   $0xc01195bf,0x8(%esp)
c011414c:	c0 
c011414d:	c7 44 24 04 90 03 00 	movl   $0x390,0x4(%esp)
c0114154:	00 
c0114155:	c7 04 24 57 95 11 c0 	movl   $0xc0119557,(%esp)
c011415c:	e8 67 cd fe ff       	call   c0100ec8 <__panic>
c0114161:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114164:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pos > sin->din->size) {
c0114167:	8b 55 0c             	mov    0xc(%ebp),%edx
c011416a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011416d:	8b 00                	mov    (%eax),%eax
c011416f:	8b 00                	mov    (%eax),%eax
c0114171:	39 c2                	cmp    %eax,%edx
c0114173:	76 74                	jbe    c01141e9 <sfs_tryseek+0xe5>
        return vop_truncate(node, pos);
c0114175:	8b 45 08             	mov    0x8(%ebp),%eax
c0114178:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011417b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011417f:	74 17                	je     c0114198 <sfs_tryseek+0x94>
c0114181:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114184:	8b 40 3c             	mov    0x3c(%eax),%eax
c0114187:	85 c0                	test   %eax,%eax
c0114189:	74 0d                	je     c0114198 <sfs_tryseek+0x94>
c011418b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011418e:	8b 40 3c             	mov    0x3c(%eax),%eax
c0114191:	8b 40 30             	mov    0x30(%eax),%eax
c0114194:	85 c0                	test   %eax,%eax
c0114196:	75 24                	jne    c01141bc <sfs_tryseek+0xb8>
c0114198:	c7 44 24 0c e8 98 11 	movl   $0xc01198e8,0xc(%esp)
c011419f:	c0 
c01141a0:	c7 44 24 08 bf 95 11 	movl   $0xc01195bf,0x8(%esp)
c01141a7:	c0 
c01141a8:	c7 44 24 04 92 03 00 	movl   $0x392,0x4(%esp)
c01141af:	00 
c01141b0:	c7 04 24 57 95 11 c0 	movl   $0xc0119557,(%esp)
c01141b7:	e8 0c cd fe ff       	call   c0100ec8 <__panic>
c01141bc:	c7 44 24 04 39 99 11 	movl   $0xc0119939,0x4(%esp)
c01141c3:	c0 
c01141c4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01141c7:	89 04 24             	mov    %eax,(%esp)
c01141ca:	e8 1e b1 ff ff       	call   c010f2ed <inode_check>
c01141cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01141d2:	8b 40 3c             	mov    0x3c(%eax),%eax
c01141d5:	8b 40 30             	mov    0x30(%eax),%eax
c01141d8:	8b 55 0c             	mov    0xc(%ebp),%edx
c01141db:	89 54 24 04          	mov    %edx,0x4(%esp)
c01141df:	8b 55 08             	mov    0x8(%ebp),%edx
c01141e2:	89 14 24             	mov    %edx,(%esp)
c01141e5:	ff d0                	call   *%eax
c01141e7:	eb 05                	jmp    c01141ee <sfs_tryseek+0xea>
    }
    return 0;
c01141e9:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01141ee:	c9                   	leave  
c01141ef:	c3                   	ret    

c01141f0 <sfs_truncfile>:

/*
 * sfs_truncfile : reszie the file with new length
 */
static int
sfs_truncfile(struct inode *node, off_t len) {
c01141f0:	55                   	push   %ebp
c01141f1:	89 e5                	mov    %esp,%ebp
c01141f3:	83 ec 48             	sub    $0x48,%esp
    if (len < 0 || len > SFS_MAX_FILE_SIZE) {
c01141f6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01141fa:	78 0a                	js     c0114206 <sfs_truncfile+0x16>
c01141fc:	8b 45 0c             	mov    0xc(%ebp),%eax
c01141ff:	3d 00 00 00 08       	cmp    $0x8000000,%eax
c0114204:	76 0a                	jbe    c0114210 <sfs_truncfile+0x20>
        return -E_INVAL;
c0114206:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c011420b:	e9 d4 01 00 00       	jmp    c01143e4 <sfs_truncfile+0x1f4>
    }
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c0114210:	8b 45 08             	mov    0x8(%ebp),%eax
c0114213:	8b 40 38             	mov    0x38(%eax),%eax
c0114216:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0114219:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011421d:	74 0a                	je     c0114229 <sfs_truncfile+0x39>
c011421f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114222:	8b 40 6c             	mov    0x6c(%eax),%eax
c0114225:	85 c0                	test   %eax,%eax
c0114227:	74 24                	je     c011424d <sfs_truncfile+0x5d>
c0114229:	c7 44 24 0c 14 98 11 	movl   $0xc0119814,0xc(%esp)
c0114230:	c0 
c0114231:	c7 44 24 08 bf 95 11 	movl   $0xc01195bf,0x8(%esp)
c0114238:	c0 
c0114239:	c7 44 24 04 9f 03 00 	movl   $0x39f,0x4(%esp)
c0114240:	00 
c0114241:	c7 04 24 57 95 11 c0 	movl   $0xc0119557,(%esp)
c0114248:	e8 7b cc fe ff       	call   c0100ec8 <__panic>
c011424d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114250:	89 45 e8             	mov    %eax,-0x18(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0114253:	8b 45 08             	mov    0x8(%ebp),%eax
c0114256:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0114259:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c011425d:	74 0d                	je     c011426c <sfs_truncfile+0x7c>
c011425f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114262:	8b 40 2c             	mov    0x2c(%eax),%eax
c0114265:	3d 35 12 00 00       	cmp    $0x1235,%eax
c011426a:	74 24                	je     c0114290 <sfs_truncfile+0xa0>
c011426c:	c7 44 24 0c 10 96 11 	movl   $0xc0119610,0xc(%esp)
c0114273:	c0 
c0114274:	c7 44 24 08 bf 95 11 	movl   $0xc01195bf,0x8(%esp)
c011427b:	c0 
c011427c:	c7 44 24 04 a0 03 00 	movl   $0x3a0,0x4(%esp)
c0114283:	00 
c0114284:	c7 04 24 57 95 11 c0 	movl   $0xc0119557,(%esp)
c011428b:	e8 38 cc fe ff       	call   c0100ec8 <__panic>
c0114290:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114293:	89 45 e0             	mov    %eax,-0x20(%ebp)
    struct sfs_disk_inode *din = sin->din;
c0114296:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114299:	8b 00                	mov    (%eax),%eax
c011429b:	89 45 dc             	mov    %eax,-0x24(%ebp)

    int ret = 0;
c011429e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//new number of disk blocks of file
    uint32_t nblks, tblks = ROUNDUP_DIV(len, SFS_BLKSIZE);
c01142a5:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
c01142ac:	8b 55 0c             	mov    0xc(%ebp),%edx
c01142af:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01142b2:	01 d0                	add    %edx,%eax
c01142b4:	83 e8 01             	sub    $0x1,%eax
c01142b7:	ba 00 00 00 00       	mov    $0x0,%edx
c01142bc:	f7 75 d8             	divl   -0x28(%ebp)
c01142bf:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    if (din->size == len) {
c01142c2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01142c5:	8b 10                	mov    (%eax),%edx
c01142c7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01142ca:	39 c2                	cmp    %eax,%edx
c01142cc:	75 39                	jne    c0114307 <sfs_truncfile+0x117>
        assert(tblks == din->blocks);
c01142ce:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01142d1:	8b 40 08             	mov    0x8(%eax),%eax
c01142d4:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c01142d7:	74 24                	je     c01142fd <sfs_truncfile+0x10d>
c01142d9:	c7 44 24 0c 42 99 11 	movl   $0xc0119942,0xc(%esp)
c01142e0:	c0 
c01142e1:	c7 44 24 08 bf 95 11 	movl   $0xc01195bf,0x8(%esp)
c01142e8:	c0 
c01142e9:	c7 44 24 04 a7 03 00 	movl   $0x3a7,0x4(%esp)
c01142f0:	00 
c01142f1:	c7 04 24 57 95 11 c0 	movl   $0xc0119557,(%esp)
c01142f8:	e8 cb cb fe ff       	call   c0100ec8 <__panic>
        return 0;
c01142fd:	b8 00 00 00 00       	mov    $0x0,%eax
c0114302:	e9 dd 00 00 00       	jmp    c01143e4 <sfs_truncfile+0x1f4>
    }

    lock_sin(sin);
c0114307:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011430a:	89 04 24             	mov    %eax,(%esp)
c011430d:	e8 09 df ff ff       	call   c011221b <lock_sin>
	// old number of disk blocks of file
    nblks = din->blocks;
c0114312:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0114315:	8b 40 08             	mov    0x8(%eax),%eax
c0114318:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (nblks < tblks) {
c011431b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011431e:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0114321:	73 3f                	jae    c0114362 <sfs_truncfile+0x172>
		// try to enlarge the file size by add new disk block at the end of file
        while (nblks != tblks) {
c0114323:	eb 33                	jmp    c0114358 <sfs_truncfile+0x168>
            if ((ret = sfs_bmap_load_nolock(sfs, sin, nblks, NULL)) != 0) {
c0114325:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c011432c:	00 
c011432d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114330:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114334:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114337:	89 44 24 04          	mov    %eax,0x4(%esp)
c011433b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011433e:	89 04 24             	mov    %eax,(%esp)
c0114341:	e8 ca e9 ff ff       	call   c0112d10 <sfs_bmap_load_nolock>
c0114346:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114349:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011434d:	74 05                	je     c0114354 <sfs_truncfile+0x164>
                goto out_unlock;
c011434f:	e9 82 00 00 00       	jmp    c01143d6 <sfs_truncfile+0x1e6>
            }
            nblks ++;
c0114354:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
    lock_sin(sin);
	// old number of disk blocks of file
    nblks = din->blocks;
    if (nblks < tblks) {
		// try to enlarge the file size by add new disk block at the end of file
        while (nblks != tblks) {
c0114358:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011435b:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c011435e:	75 c5                	jne    c0114325 <sfs_truncfile+0x135>
c0114360:	eb 33                	jmp    c0114395 <sfs_truncfile+0x1a5>
                goto out_unlock;
            }
            nblks ++;
        }
    }
    else if (tblks < nblks) {
c0114362:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0114365:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0114368:	73 2b                	jae    c0114395 <sfs_truncfile+0x1a5>
		// try to reduce the file size 
        while (tblks != nblks) {
c011436a:	eb 21                	jmp    c011438d <sfs_truncfile+0x19d>
            if ((ret = sfs_bmap_truncate_nolock(sfs, sin)) != 0) {
c011436c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011436f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114373:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0114376:	89 04 24             	mov    %eax,(%esp)
c0114379:	e8 7a ea ff ff       	call   c0112df8 <sfs_bmap_truncate_nolock>
c011437e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114381:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0114385:	74 02                	je     c0114389 <sfs_truncfile+0x199>
                goto out_unlock;
c0114387:	eb 4d                	jmp    c01143d6 <sfs_truncfile+0x1e6>
            }
            nblks --;
c0114389:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
            nblks ++;
        }
    }
    else if (tblks < nblks) {
		// try to reduce the file size 
        while (tblks != nblks) {
c011438d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0114390:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0114393:	75 d7                	jne    c011436c <sfs_truncfile+0x17c>
                goto out_unlock;
            }
            nblks --;
        }
    }
    assert(din->blocks == tblks);
c0114395:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0114398:	8b 40 08             	mov    0x8(%eax),%eax
c011439b:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c011439e:	74 24                	je     c01143c4 <sfs_truncfile+0x1d4>
c01143a0:	c7 44 24 0c 57 99 11 	movl   $0xc0119957,0xc(%esp)
c01143a7:	c0 
c01143a8:	c7 44 24 08 bf 95 11 	movl   $0xc01195bf,0x8(%esp)
c01143af:	c0 
c01143b0:	c7 44 24 04 c0 03 00 	movl   $0x3c0,0x4(%esp)
c01143b7:	00 
c01143b8:	c7 04 24 57 95 11 c0 	movl   $0xc0119557,(%esp)
c01143bf:	e8 04 cb fe ff       	call   c0100ec8 <__panic>
    din->size = len;
c01143c4:	8b 55 0c             	mov    0xc(%ebp),%edx
c01143c7:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01143ca:	89 10                	mov    %edx,(%eax)
    sin->dirty = 1;
c01143cc:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01143cf:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)

out_unlock:
    unlock_sin(sin);
c01143d6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01143d9:	89 04 24             	mov    %eax,(%esp)
c01143dc:	e8 50 de ff ff       	call   c0112231 <unlock_sin>
    return ret;
c01143e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01143e4:	c9                   	leave  
c01143e5:	c3                   	ret    

c01143e6 <sfs_lookup>:
 * sfs_lookup - Parse path relative to the passed directory
 *              DIR, and hand back the inode for the file it
 *              refers to.
 */
static int
sfs_lookup(struct inode *node, char *path, struct inode **node_store) {
c01143e6:	55                   	push   %ebp
c01143e7:	89 e5                	mov    %esp,%ebp
c01143e9:	83 ec 48             	sub    $0x48,%esp
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c01143ec:	8b 45 08             	mov    0x8(%ebp),%eax
c01143ef:	8b 40 38             	mov    0x38(%eax),%eax
c01143f2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01143f5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01143f9:	74 0a                	je     c0114405 <sfs_lookup+0x1f>
c01143fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01143fe:	8b 40 6c             	mov    0x6c(%eax),%eax
c0114401:	85 c0                	test   %eax,%eax
c0114403:	74 24                	je     c0114429 <sfs_lookup+0x43>
c0114405:	c7 44 24 0c 14 98 11 	movl   $0xc0119814,0xc(%esp)
c011440c:	c0 
c011440d:	c7 44 24 08 bf 95 11 	movl   $0xc01195bf,0x8(%esp)
c0114414:	c0 
c0114415:	c7 44 24 04 d0 03 00 	movl   $0x3d0,0x4(%esp)
c011441c:	00 
c011441d:	c7 04 24 57 95 11 c0 	movl   $0xc0119557,(%esp)
c0114424:	e8 9f ca fe ff       	call   c0100ec8 <__panic>
c0114429:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011442c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(*path != '\0' && *path != '/');
c011442f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114432:	0f b6 00             	movzbl (%eax),%eax
c0114435:	84 c0                	test   %al,%al
c0114437:	74 0a                	je     c0114443 <sfs_lookup+0x5d>
c0114439:	8b 45 0c             	mov    0xc(%ebp),%eax
c011443c:	0f b6 00             	movzbl (%eax),%eax
c011443f:	3c 2f                	cmp    $0x2f,%al
c0114441:	75 24                	jne    c0114467 <sfs_lookup+0x81>
c0114443:	c7 44 24 0c 6c 99 11 	movl   $0xc011996c,0xc(%esp)
c011444a:	c0 
c011444b:	c7 44 24 08 bf 95 11 	movl   $0xc01195bf,0x8(%esp)
c0114452:	c0 
c0114453:	c7 44 24 04 d1 03 00 	movl   $0x3d1,0x4(%esp)
c011445a:	00 
c011445b:	c7 04 24 57 95 11 c0 	movl   $0xc0119557,(%esp)
c0114462:	e8 61 ca fe ff       	call   c0100ec8 <__panic>
    vop_ref_inc(node);
c0114467:	8b 45 08             	mov    0x8(%ebp),%eax
c011446a:	89 04 24             	mov    %eax,(%esp)
c011446d:	e8 73 ac ff ff       	call   c010f0e5 <inode_ref_inc>
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0114472:	8b 45 08             	mov    0x8(%ebp),%eax
c0114475:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0114478:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011447c:	74 0d                	je     c011448b <sfs_lookup+0xa5>
c011447e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114481:	8b 40 2c             	mov    0x2c(%eax),%eax
c0114484:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0114489:	74 24                	je     c01144af <sfs_lookup+0xc9>
c011448b:	c7 44 24 0c 10 96 11 	movl   $0xc0119610,0xc(%esp)
c0114492:	c0 
c0114493:	c7 44 24 08 bf 95 11 	movl   $0xc01195bf,0x8(%esp)
c011449a:	c0 
c011449b:	c7 44 24 04 d3 03 00 	movl   $0x3d3,0x4(%esp)
c01144a2:	00 
c01144a3:	c7 04 24 57 95 11 c0 	movl   $0xc0119557,(%esp)
c01144aa:	e8 19 ca fe ff       	call   c0100ec8 <__panic>
c01144af:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01144b2:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (sin->din->type != SFS_TYPE_DIR) {
c01144b5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01144b8:	8b 00                	mov    (%eax),%eax
c01144ba:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c01144be:	66 83 f8 02          	cmp    $0x2,%ax
c01144c2:	74 12                	je     c01144d6 <sfs_lookup+0xf0>
        vop_ref_dec(node);
c01144c4:	8b 45 08             	mov    0x8(%ebp),%eax
c01144c7:	89 04 24             	mov    %eax,(%esp)
c01144ca:	e8 30 ac ff ff       	call   c010f0ff <inode_ref_dec>
        return -E_NOTDIR;
c01144cf:	b8 ee ff ff ff       	mov    $0xffffffee,%eax
c01144d4:	eb 4e                	jmp    c0114524 <sfs_lookup+0x13e>
    }
    struct inode *subnode;
    int ret = sfs_lookup_once(sfs, sin, path, &subnode, NULL);
c01144d6:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c01144dd:	00 
c01144de:	8d 45 e0             	lea    -0x20(%ebp),%eax
c01144e1:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01144e5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01144e8:	89 44 24 08          	mov    %eax,0x8(%esp)
c01144ec:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01144ef:	89 44 24 04          	mov    %eax,0x4(%esp)
c01144f3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01144f6:	89 04 24             	mov    %eax,(%esp)
c01144f9:	e8 18 ec ff ff       	call   c0113116 <sfs_lookup_once>
c01144fe:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    vop_ref_dec(node);
c0114501:	8b 45 08             	mov    0x8(%ebp),%eax
c0114504:	89 04 24             	mov    %eax,(%esp)
c0114507:	e8 f3 ab ff ff       	call   c010f0ff <inode_ref_dec>
    if (ret != 0) {
c011450c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0114510:	74 05                	je     c0114517 <sfs_lookup+0x131>
        return ret;
c0114512:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114515:	eb 0d                	jmp    c0114524 <sfs_lookup+0x13e>
    }
    *node_store = subnode;
c0114517:	8b 55 e0             	mov    -0x20(%ebp),%edx
c011451a:	8b 45 10             	mov    0x10(%ebp),%eax
c011451d:	89 10                	mov    %edx,(%eax)
    return 0;
c011451f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0114524:	c9                   	leave  
c0114525:	c3                   	ret    

c0114526 <sfs_rwblock_nolock>:
 * @blkno: the NO. of disk block
 * @write: BOOL: Read or Write
 * @check: BOOL: if check (blono < sfs super.blocks)
 */
static int
sfs_rwblock_nolock(struct sfs_fs *sfs, void *buf, uint32_t blkno, bool write, bool check) {
c0114526:	55                   	push   %ebp
c0114527:	89 e5                	mov    %esp,%ebp
c0114529:	83 ec 38             	sub    $0x38,%esp
    assert((blkno != 0 || !check) && blkno < sfs->super.blocks);
c011452c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0114530:	75 06                	jne    c0114538 <sfs_rwblock_nolock+0x12>
c0114532:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0114536:	75 0b                	jne    c0114543 <sfs_rwblock_nolock+0x1d>
c0114538:	8b 45 08             	mov    0x8(%ebp),%eax
c011453b:	8b 40 04             	mov    0x4(%eax),%eax
c011453e:	3b 45 10             	cmp    0x10(%ebp),%eax
c0114541:	77 24                	ja     c0114567 <sfs_rwblock_nolock+0x41>
c0114543:	c7 44 24 0c 8c 99 11 	movl   $0xc011998c,0xc(%esp)
c011454a:	c0 
c011454b:	c7 44 24 08 c0 99 11 	movl   $0xc01199c0,0x8(%esp)
c0114552:	c0 
c0114553:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
c011455a:	00 
c011455b:	c7 04 24 d5 99 11 c0 	movl   $0xc01199d5,(%esp)
c0114562:	e8 61 c9 fe ff       	call   c0100ec8 <__panic>
    struct iobuf __iob, *iob = iobuf_init(&__iob, buf, SFS_BLKSIZE, blkno * SFS_BLKSIZE);
c0114567:	8b 45 10             	mov    0x10(%ebp),%eax
c011456a:	c1 e0 0c             	shl    $0xc,%eax
c011456d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0114571:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0114578:	00 
c0114579:	8b 45 0c             	mov    0xc(%ebp),%eax
c011457c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114580:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0114583:	89 04 24             	mov    %eax,(%esp)
c0114586:	e8 90 6d ff ff       	call   c010b31b <iobuf_init>
c011458b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dop_io(sfs->dev, iob, write);
c011458e:	8b 45 08             	mov    0x8(%ebp),%eax
c0114591:	8b 40 2c             	mov    0x2c(%eax),%eax
c0114594:	8b 40 10             	mov    0x10(%eax),%eax
c0114597:	8b 55 08             	mov    0x8(%ebp),%edx
c011459a:	8b 52 2c             	mov    0x2c(%edx),%edx
c011459d:	8b 4d 14             	mov    0x14(%ebp),%ecx
c01145a0:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01145a4:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c01145a7:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c01145ab:	89 14 24             	mov    %edx,(%esp)
c01145ae:	ff d0                	call   *%eax
}
c01145b0:	c9                   	leave  
c01145b1:	c3                   	ret    

c01145b2 <sfs_rwblock>:
 * @blkno: the NO. of disk block
 * @nblks: Rd/Wr number of disk block
 * @write: BOOL: Read - 0 or Write - 1
 */
static int
sfs_rwblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks, bool write) {
c01145b2:	55                   	push   %ebp
c01145b3:	89 e5                	mov    %esp,%ebp
c01145b5:	83 ec 38             	sub    $0x38,%esp
    int ret = 0;
c01145b8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    lock_sfs_io(sfs);
c01145bf:	8b 45 08             	mov    0x8(%ebp),%eax
c01145c2:	89 04 24             	mov    %eax,(%esp)
c01145c5:	e8 df 03 00 00       	call   c01149a9 <lock_sfs_io>
    {
        while (nblks != 0) {
c01145ca:	eb 42                	jmp    c011460e <sfs_rwblock+0x5c>
            if ((ret = sfs_rwblock_nolock(sfs, buf, blkno, write, 1)) != 0) {
c01145cc:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c01145d3:	00 
c01145d4:	8b 45 18             	mov    0x18(%ebp),%eax
c01145d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01145db:	8b 45 10             	mov    0x10(%ebp),%eax
c01145de:	89 44 24 08          	mov    %eax,0x8(%esp)
c01145e2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01145e5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01145e9:	8b 45 08             	mov    0x8(%ebp),%eax
c01145ec:	89 04 24             	mov    %eax,(%esp)
c01145ef:	e8 32 ff ff ff       	call   c0114526 <sfs_rwblock_nolock>
c01145f4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01145f7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01145fb:	74 02                	je     c01145ff <sfs_rwblock+0x4d>
                break;
c01145fd:	eb 15                	jmp    c0114614 <sfs_rwblock+0x62>
            }
            blkno ++, nblks --;
c01145ff:	83 45 10 01          	addl   $0x1,0x10(%ebp)
c0114603:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
            buf += SFS_BLKSIZE;
c0114607:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
static int
sfs_rwblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks, bool write) {
    int ret = 0;
    lock_sfs_io(sfs);
    {
        while (nblks != 0) {
c011460e:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0114612:	75 b8                	jne    c01145cc <sfs_rwblock+0x1a>
            }
            blkno ++, nblks --;
            buf += SFS_BLKSIZE;
        }
    }
    unlock_sfs_io(sfs);
c0114614:	8b 45 08             	mov    0x8(%ebp),%eax
c0114617:	89 04 24             	mov    %eax,(%esp)
c011461a:	e8 b6 03 00 00       	call   c01149d5 <unlock_sfs_io>
    return ret;
c011461f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0114622:	c9                   	leave  
c0114623:	c3                   	ret    

c0114624 <sfs_rblock>:
 * @buf:   the buffer uesed for Rd/Wr
 * @blkno: the NO. of disk block
 * @nblks: Rd/Wr number of disk block
 */
int
sfs_rblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks) {
c0114624:	55                   	push   %ebp
c0114625:	89 e5                	mov    %esp,%ebp
c0114627:	83 ec 28             	sub    $0x28,%esp
    return sfs_rwblock(sfs, buf, blkno, nblks, 0);
c011462a:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0114631:	00 
c0114632:	8b 45 14             	mov    0x14(%ebp),%eax
c0114635:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0114639:	8b 45 10             	mov    0x10(%ebp),%eax
c011463c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114640:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114643:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114647:	8b 45 08             	mov    0x8(%ebp),%eax
c011464a:	89 04 24             	mov    %eax,(%esp)
c011464d:	e8 60 ff ff ff       	call   c01145b2 <sfs_rwblock>
}
c0114652:	c9                   	leave  
c0114653:	c3                   	ret    

c0114654 <sfs_wblock>:
 * @buf:   the buffer uesed for Rd/Wr
 * @blkno: the NO. of disk block
 * @nblks: Rd/Wr number of disk block
 */
int
sfs_wblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks) {
c0114654:	55                   	push   %ebp
c0114655:	89 e5                	mov    %esp,%ebp
c0114657:	83 ec 28             	sub    $0x28,%esp
    return sfs_rwblock(sfs, buf, blkno, nblks, 1);
c011465a:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c0114661:	00 
c0114662:	8b 45 14             	mov    0x14(%ebp),%eax
c0114665:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0114669:	8b 45 10             	mov    0x10(%ebp),%eax
c011466c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114670:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114673:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114677:	8b 45 08             	mov    0x8(%ebp),%eax
c011467a:	89 04 24             	mov    %eax,(%esp)
c011467d:	e8 30 ff ff ff       	call   c01145b2 <sfs_rwblock>
}
c0114682:	c9                   	leave  
c0114683:	c3                   	ret    

c0114684 <sfs_rbuf>:
 * @len:    the length need to Rd
 * @blkno:  the NO. of disk block
 * @offset: the offset in the content of disk block
 */
int
sfs_rbuf(struct sfs_fs *sfs, void *buf, size_t len, uint32_t blkno, off_t offset) {
c0114684:	55                   	push   %ebp
c0114685:	89 e5                	mov    %esp,%ebp
c0114687:	83 ec 38             	sub    $0x38,%esp
    assert(offset >= 0 && offset < SFS_BLKSIZE && offset + len <= SFS_BLKSIZE);
c011468a:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c011468e:	78 18                	js     c01146a8 <sfs_rbuf+0x24>
c0114690:	81 7d 18 ff 0f 00 00 	cmpl   $0xfff,0x18(%ebp)
c0114697:	7f 0f                	jg     c01146a8 <sfs_rbuf+0x24>
c0114699:	8b 55 18             	mov    0x18(%ebp),%edx
c011469c:	8b 45 10             	mov    0x10(%ebp),%eax
c011469f:	01 d0                	add    %edx,%eax
c01146a1:	3d 00 10 00 00       	cmp    $0x1000,%eax
c01146a6:	76 24                	jbe    c01146cc <sfs_rbuf+0x48>
c01146a8:	c7 44 24 0c ec 99 11 	movl   $0xc01199ec,0xc(%esp)
c01146af:	c0 
c01146b0:	c7 44 24 08 c0 99 11 	movl   $0xc01199c0,0x8(%esp)
c01146b7:	c0 
c01146b8:	c7 44 24 04 55 00 00 	movl   $0x55,0x4(%esp)
c01146bf:	00 
c01146c0:	c7 04 24 d5 99 11 c0 	movl   $0xc01199d5,(%esp)
c01146c7:	e8 fc c7 fe ff       	call   c0100ec8 <__panic>
    int ret;
    lock_sfs_io(sfs);
c01146cc:	8b 45 08             	mov    0x8(%ebp),%eax
c01146cf:	89 04 24             	mov    %eax,(%esp)
c01146d2:	e8 d2 02 00 00       	call   c01149a9 <lock_sfs_io>
    {
        if ((ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 0, 1)) == 0) {
c01146d7:	8b 45 08             	mov    0x8(%ebp),%eax
c01146da:	8b 40 38             	mov    0x38(%eax),%eax
c01146dd:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c01146e4:	00 
c01146e5:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01146ec:	00 
c01146ed:	8b 55 14             	mov    0x14(%ebp),%edx
c01146f0:	89 54 24 08          	mov    %edx,0x8(%esp)
c01146f4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01146f8:	8b 45 08             	mov    0x8(%ebp),%eax
c01146fb:	89 04 24             	mov    %eax,(%esp)
c01146fe:	e8 23 fe ff ff       	call   c0114526 <sfs_rwblock_nolock>
c0114703:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114706:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011470a:	75 21                	jne    c011472d <sfs_rbuf+0xa9>
            memcpy(buf, sfs->sfs_buffer + offset, len);
c011470c:	8b 45 08             	mov    0x8(%ebp),%eax
c011470f:	8b 50 38             	mov    0x38(%eax),%edx
c0114712:	8b 45 18             	mov    0x18(%ebp),%eax
c0114715:	01 c2                	add    %eax,%edx
c0114717:	8b 45 10             	mov    0x10(%ebp),%eax
c011471a:	89 44 24 08          	mov    %eax,0x8(%esp)
c011471e:	89 54 24 04          	mov    %edx,0x4(%esp)
c0114722:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114725:	89 04 24             	mov    %eax,(%esp)
c0114728:	e8 fa 0e 00 00       	call   c0115627 <memcpy>
        }
    }
    unlock_sfs_io(sfs);
c011472d:	8b 45 08             	mov    0x8(%ebp),%eax
c0114730:	89 04 24             	mov    %eax,(%esp)
c0114733:	e8 9d 02 00 00       	call   c01149d5 <unlock_sfs_io>
    return ret;
c0114738:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011473b:	c9                   	leave  
c011473c:	c3                   	ret    

c011473d <sfs_wbuf>:
 * @len:    the length need to Wr
 * @blkno:  the NO. of disk block
 * @offset: the offset in the content of disk block
 */
int
sfs_wbuf(struct sfs_fs *sfs, void *buf, size_t len, uint32_t blkno, off_t offset) {
c011473d:	55                   	push   %ebp
c011473e:	89 e5                	mov    %esp,%ebp
c0114740:	83 ec 38             	sub    $0x38,%esp
    assert(offset >= 0 && offset < SFS_BLKSIZE && offset + len <= SFS_BLKSIZE);
c0114743:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0114747:	78 18                	js     c0114761 <sfs_wbuf+0x24>
c0114749:	81 7d 18 ff 0f 00 00 	cmpl   $0xfff,0x18(%ebp)
c0114750:	7f 0f                	jg     c0114761 <sfs_wbuf+0x24>
c0114752:	8b 55 18             	mov    0x18(%ebp),%edx
c0114755:	8b 45 10             	mov    0x10(%ebp),%eax
c0114758:	01 d0                	add    %edx,%eax
c011475a:	3d 00 10 00 00       	cmp    $0x1000,%eax
c011475f:	76 24                	jbe    c0114785 <sfs_wbuf+0x48>
c0114761:	c7 44 24 0c ec 99 11 	movl   $0xc01199ec,0xc(%esp)
c0114768:	c0 
c0114769:	c7 44 24 08 c0 99 11 	movl   $0xc01199c0,0x8(%esp)
c0114770:	c0 
c0114771:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
c0114778:	00 
c0114779:	c7 04 24 d5 99 11 c0 	movl   $0xc01199d5,(%esp)
c0114780:	e8 43 c7 fe ff       	call   c0100ec8 <__panic>
    int ret;
    lock_sfs_io(sfs);
c0114785:	8b 45 08             	mov    0x8(%ebp),%eax
c0114788:	89 04 24             	mov    %eax,(%esp)
c011478b:	e8 19 02 00 00       	call   c01149a9 <lock_sfs_io>
    {
        if ((ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 0, 1)) == 0) {
c0114790:	8b 45 08             	mov    0x8(%ebp),%eax
c0114793:	8b 40 38             	mov    0x38(%eax),%eax
c0114796:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c011479d:	00 
c011479e:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01147a5:	00 
c01147a6:	8b 55 14             	mov    0x14(%ebp),%edx
c01147a9:	89 54 24 08          	mov    %edx,0x8(%esp)
c01147ad:	89 44 24 04          	mov    %eax,0x4(%esp)
c01147b1:	8b 45 08             	mov    0x8(%ebp),%eax
c01147b4:	89 04 24             	mov    %eax,(%esp)
c01147b7:	e8 6a fd ff ff       	call   c0114526 <sfs_rwblock_nolock>
c01147bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01147bf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01147c3:	75 50                	jne    c0114815 <sfs_wbuf+0xd8>
            memcpy(sfs->sfs_buffer + offset, buf, len);
c01147c5:	8b 45 08             	mov    0x8(%ebp),%eax
c01147c8:	8b 50 38             	mov    0x38(%eax),%edx
c01147cb:	8b 45 18             	mov    0x18(%ebp),%eax
c01147ce:	01 c2                	add    %eax,%edx
c01147d0:	8b 45 10             	mov    0x10(%ebp),%eax
c01147d3:	89 44 24 08          	mov    %eax,0x8(%esp)
c01147d7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01147da:	89 44 24 04          	mov    %eax,0x4(%esp)
c01147de:	89 14 24             	mov    %edx,(%esp)
c01147e1:	e8 41 0e 00 00       	call   c0115627 <memcpy>
            ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 1, 1);
c01147e6:	8b 45 08             	mov    0x8(%ebp),%eax
c01147e9:	8b 40 38             	mov    0x38(%eax),%eax
c01147ec:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c01147f3:	00 
c01147f4:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c01147fb:	00 
c01147fc:	8b 55 14             	mov    0x14(%ebp),%edx
c01147ff:	89 54 24 08          	mov    %edx,0x8(%esp)
c0114803:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114807:	8b 45 08             	mov    0x8(%ebp),%eax
c011480a:	89 04 24             	mov    %eax,(%esp)
c011480d:	e8 14 fd ff ff       	call   c0114526 <sfs_rwblock_nolock>
c0114812:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
    }
    unlock_sfs_io(sfs);
c0114815:	8b 45 08             	mov    0x8(%ebp),%eax
c0114818:	89 04 24             	mov    %eax,(%esp)
c011481b:	e8 b5 01 00 00       	call   c01149d5 <unlock_sfs_io>
    return ret;
c0114820:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0114823:	c9                   	leave  
c0114824:	c3                   	ret    

c0114825 <sfs_sync_super>:

/*
 * sfs_sync_super - write sfs->super (in memory) into disk (SFS_BLKN_SUPER, 1) with lock protect.
 */
int
sfs_sync_super(struct sfs_fs *sfs) {
c0114825:	55                   	push   %ebp
c0114826:	89 e5                	mov    %esp,%ebp
c0114828:	83 ec 38             	sub    $0x38,%esp
    int ret;
    lock_sfs_io(sfs);
c011482b:	8b 45 08             	mov    0x8(%ebp),%eax
c011482e:	89 04 24             	mov    %eax,(%esp)
c0114831:	e8 73 01 00 00       	call   c01149a9 <lock_sfs_io>
    {
        memset(sfs->sfs_buffer, 0, SFS_BLKSIZE);
c0114836:	8b 45 08             	mov    0x8(%ebp),%eax
c0114839:	8b 40 38             	mov    0x38(%eax),%eax
c011483c:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0114843:	00 
c0114844:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c011484b:	00 
c011484c:	89 04 24             	mov    %eax,(%esp)
c011484f:	e8 f1 0c 00 00       	call   c0115545 <memset>
        memcpy(sfs->sfs_buffer, &(sfs->super), sizeof(sfs->super));
c0114854:	8b 55 08             	mov    0x8(%ebp),%edx
c0114857:	8b 45 08             	mov    0x8(%ebp),%eax
c011485a:	8b 40 38             	mov    0x38(%eax),%eax
c011485d:	c7 44 24 08 2c 00 00 	movl   $0x2c,0x8(%esp)
c0114864:	00 
c0114865:	89 54 24 04          	mov    %edx,0x4(%esp)
c0114869:	89 04 24             	mov    %eax,(%esp)
c011486c:	e8 b6 0d 00 00       	call   c0115627 <memcpy>
        ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, SFS_BLKN_SUPER, 1, 0);
c0114871:	8b 45 08             	mov    0x8(%ebp),%eax
c0114874:	8b 40 38             	mov    0x38(%eax),%eax
c0114877:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c011487e:	00 
c011487f:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0114886:	00 
c0114887:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c011488e:	00 
c011488f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114893:	8b 45 08             	mov    0x8(%ebp),%eax
c0114896:	89 04 24             	mov    %eax,(%esp)
c0114899:	e8 88 fc ff ff       	call   c0114526 <sfs_rwblock_nolock>
c011489e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    unlock_sfs_io(sfs);
c01148a1:	8b 45 08             	mov    0x8(%ebp),%eax
c01148a4:	89 04 24             	mov    %eax,(%esp)
c01148a7:	e8 29 01 00 00       	call   c01149d5 <unlock_sfs_io>
    return ret;
c01148ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01148af:	c9                   	leave  
c01148b0:	c3                   	ret    

c01148b1 <sfs_sync_freemap>:

/*
 * sfs_sync_freemap - write sfs bitmap into disk (SFS_BLKN_FREEMAP, nblks)  without lock protect.
 */
int
sfs_sync_freemap(struct sfs_fs *sfs) {
c01148b1:	55                   	push   %ebp
c01148b2:	89 e5                	mov    %esp,%ebp
c01148b4:	83 ec 28             	sub    $0x28,%esp
    uint32_t nblks = sfs_freemap_blocks(&(sfs->super));
c01148b7:	c7 45 f4 00 80 00 00 	movl   $0x8000,-0xc(%ebp)
c01148be:	8b 45 08             	mov    0x8(%ebp),%eax
c01148c1:	8b 50 04             	mov    0x4(%eax),%edx
c01148c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01148c7:	01 d0                	add    %edx,%eax
c01148c9:	83 e8 01             	sub    $0x1,%eax
c01148cc:	ba 00 00 00 00       	mov    $0x0,%edx
c01148d1:	f7 75 f4             	divl   -0xc(%ebp)
c01148d4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sfs_wblock(sfs, bitmap_getdata(sfs->freemap, NULL), SFS_BLKN_FREEMAP, nblks);
c01148d7:	8b 45 08             	mov    0x8(%ebp),%eax
c01148da:	8b 40 30             	mov    0x30(%eax),%eax
c01148dd:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01148e4:	00 
c01148e5:	89 04 24             	mov    %eax,(%esp)
c01148e8:	e8 fd cf ff ff       	call   c01118ea <bitmap_getdata>
c01148ed:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01148f0:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01148f4:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c01148fb:	00 
c01148fc:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114900:	8b 45 08             	mov    0x8(%ebp),%eax
c0114903:	89 04 24             	mov    %eax,(%esp)
c0114906:	e8 49 fd ff ff       	call   c0114654 <sfs_wblock>
}
c011490b:	c9                   	leave  
c011490c:	c3                   	ret    

c011490d <sfs_clear_block>:
 * @sfs:   sfs_fs which will be process
 * @blkno: the NO. of disk block
 * @nblks: Rd/Wr number of disk block
 */
int
sfs_clear_block(struct sfs_fs *sfs, uint32_t blkno, uint32_t nblks) {
c011490d:	55                   	push   %ebp
c011490e:	89 e5                	mov    %esp,%ebp
c0114910:	83 ec 38             	sub    $0x38,%esp
    int ret;
    lock_sfs_io(sfs);
c0114913:	8b 45 08             	mov    0x8(%ebp),%eax
c0114916:	89 04 24             	mov    %eax,(%esp)
c0114919:	e8 8b 00 00 00       	call   c01149a9 <lock_sfs_io>
    {
        memset(sfs->sfs_buffer, 0, SFS_BLKSIZE);
c011491e:	8b 45 08             	mov    0x8(%ebp),%eax
c0114921:	8b 40 38             	mov    0x38(%eax),%eax
c0114924:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c011492b:	00 
c011492c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0114933:	00 
c0114934:	89 04 24             	mov    %eax,(%esp)
c0114937:	e8 09 0c 00 00       	call   c0115545 <memset>
        while (nblks != 0) {
c011493c:	eb 3f                	jmp    c011497d <sfs_clear_block+0x70>
            if ((ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 1, 1)) != 0) {
c011493e:	8b 45 08             	mov    0x8(%ebp),%eax
c0114941:	8b 40 38             	mov    0x38(%eax),%eax
c0114944:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c011494b:	00 
c011494c:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0114953:	00 
c0114954:	8b 55 0c             	mov    0xc(%ebp),%edx
c0114957:	89 54 24 08          	mov    %edx,0x8(%esp)
c011495b:	89 44 24 04          	mov    %eax,0x4(%esp)
c011495f:	8b 45 08             	mov    0x8(%ebp),%eax
c0114962:	89 04 24             	mov    %eax,(%esp)
c0114965:	e8 bc fb ff ff       	call   c0114526 <sfs_rwblock_nolock>
c011496a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011496d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0114971:	74 02                	je     c0114975 <sfs_clear_block+0x68>
                break;
c0114973:	eb 0e                	jmp    c0114983 <sfs_clear_block+0x76>
            }
            blkno ++, nblks --;
c0114975:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
c0114979:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
sfs_clear_block(struct sfs_fs *sfs, uint32_t blkno, uint32_t nblks) {
    int ret;
    lock_sfs_io(sfs);
    {
        memset(sfs->sfs_buffer, 0, SFS_BLKSIZE);
        while (nblks != 0) {
c011497d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0114981:	75 bb                	jne    c011493e <sfs_clear_block+0x31>
                break;
            }
            blkno ++, nblks --;
        }
    }
    unlock_sfs_io(sfs);
c0114983:	8b 45 08             	mov    0x8(%ebp),%eax
c0114986:	89 04 24             	mov    %eax,(%esp)
c0114989:	e8 47 00 00 00       	call   c01149d5 <unlock_sfs_io>
    return ret;
c011498e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0114991:	c9                   	leave  
c0114992:	c3                   	ret    

c0114993 <lock_sfs_fs>:
 * lock_sfs_fs - lock the process of  SFS Filesystem Rd/Wr Disk Block
 *
 * called by: sfs_load_inode, sfs_sync, sfs_reclaim
 */
void
lock_sfs_fs(struct sfs_fs *sfs) {
c0114993:	55                   	push   %ebp
c0114994:	89 e5                	mov    %esp,%ebp
c0114996:	83 ec 18             	sub    $0x18,%esp
    down(&(sfs->fs_sem));
c0114999:	8b 45 08             	mov    0x8(%ebp),%eax
c011499c:	83 c0 3c             	add    $0x3c,%eax
c011499f:	89 04 24             	mov    %eax,(%esp)
c01149a2:	e8 2d 53 ff ff       	call   c0109cd4 <down>
}
c01149a7:	c9                   	leave  
c01149a8:	c3                   	ret    

c01149a9 <lock_sfs_io>:
 * lock_sfs_io - lock the process of SFS File Rd/Wr Disk Block
 *
 * called by: sfs_rwblock, sfs_clear_block, sfs_sync_super
 */
void
lock_sfs_io(struct sfs_fs *sfs) {
c01149a9:	55                   	push   %ebp
c01149aa:	89 e5                	mov    %esp,%ebp
c01149ac:	83 ec 18             	sub    $0x18,%esp
    down(&(sfs->io_sem));
c01149af:	8b 45 08             	mov    0x8(%ebp),%eax
c01149b2:	83 c0 48             	add    $0x48,%eax
c01149b5:	89 04 24             	mov    %eax,(%esp)
c01149b8:	e8 17 53 ff ff       	call   c0109cd4 <down>
}
c01149bd:	c9                   	leave  
c01149be:	c3                   	ret    

c01149bf <unlock_sfs_fs>:
 * unlock_sfs_fs - unlock the process of  SFS Filesystem Rd/Wr Disk Block
 *
 * called by: sfs_load_inode, sfs_sync, sfs_reclaim
 */
void
unlock_sfs_fs(struct sfs_fs *sfs) {
c01149bf:	55                   	push   %ebp
c01149c0:	89 e5                	mov    %esp,%ebp
c01149c2:	83 ec 18             	sub    $0x18,%esp
    up(&(sfs->fs_sem));
c01149c5:	8b 45 08             	mov    0x8(%ebp),%eax
c01149c8:	83 c0 3c             	add    $0x3c,%eax
c01149cb:	89 04 24             	mov    %eax,(%esp)
c01149ce:	e8 e6 52 ff ff       	call   c0109cb9 <up>
}
c01149d3:	c9                   	leave  
c01149d4:	c3                   	ret    

c01149d5 <unlock_sfs_io>:
 * unlock_sfs_io - unlock the process of sfs Rd/Wr Disk Block
 *
 * called by: sfs_rwblock sfs_clear_block sfs_sync_super
 */
void
unlock_sfs_io(struct sfs_fs *sfs) {
c01149d5:	55                   	push   %ebp
c01149d6:	89 e5                	mov    %esp,%ebp
c01149d8:	83 ec 18             	sub    $0x18,%esp
    up(&(sfs->io_sem));
c01149db:	8b 45 08             	mov    0x8(%ebp),%eax
c01149de:	83 c0 48             	add    $0x48,%eax
c01149e1:	89 04 24             	mov    %eax,(%esp)
c01149e4:	e8 d0 52 ff ff       	call   c0109cb9 <up>
}
c01149e9:	c9                   	leave  
c01149ea:	c3                   	ret    

c01149eb <hash32>:
 * @bits:   the number of bits in a return value
 *
 * High bits are more random, so we use them.
 * */
uint32_t
hash32(uint32_t val, unsigned int bits) {
c01149eb:	55                   	push   %ebp
c01149ec:	89 e5                	mov    %esp,%ebp
c01149ee:	83 ec 10             	sub    $0x10,%esp
    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
c01149f1:	8b 45 08             	mov    0x8(%ebp),%eax
c01149f4:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
c01149fa:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (hash >> (32 - bits));
c01149fd:	b8 20 00 00 00       	mov    $0x20,%eax
c0114a02:	2b 45 0c             	sub    0xc(%ebp),%eax
c0114a05:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0114a08:	89 c1                	mov    %eax,%ecx
c0114a0a:	d3 ea                	shr    %cl,%edx
c0114a0c:	89 d0                	mov    %edx,%eax
}
c0114a0e:	c9                   	leave  
c0114a0f:	c3                   	ret    

c0114a10 <printnum>:
 * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
 * @padc:       character that padded on the left if the actual width is less than @width
 * */
static void
printnum(void (*putch)(int, void*, int), int fd, void *putdat,
        unsigned long long num, unsigned base, int width, int padc) {
c0114a10:	55                   	push   %ebp
c0114a11:	89 e5                	mov    %esp,%ebp
c0114a13:	83 ec 58             	sub    $0x58,%esp
c0114a16:	8b 45 14             	mov    0x14(%ebp),%eax
c0114a19:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0114a1c:	8b 45 18             	mov    0x18(%ebp),%eax
c0114a1f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    unsigned long long result = num;
c0114a22:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0114a25:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0114a28:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0114a2b:	89 55 ec             	mov    %edx,-0x14(%ebp)
    unsigned mod = do_div(result, base);
c0114a2e:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0114a31:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0114a34:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0114a37:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0114a3a:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0114a3d:	89 55 f0             	mov    %edx,-0x10(%ebp)
c0114a40:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114a43:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114a46:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0114a4a:	74 1c                	je     c0114a68 <printnum+0x58>
c0114a4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114a4f:	ba 00 00 00 00       	mov    $0x0,%edx
c0114a54:	f7 75 e4             	divl   -0x1c(%ebp)
c0114a57:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0114a5a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114a5d:	ba 00 00 00 00       	mov    $0x0,%edx
c0114a62:	f7 75 e4             	divl   -0x1c(%ebp)
c0114a65:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0114a68:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114a6b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0114a6e:	f7 75 e4             	divl   -0x1c(%ebp)
c0114a71:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0114a74:	89 55 dc             	mov    %edx,-0x24(%ebp)
c0114a77:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114a7a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0114a7d:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0114a80:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0114a83:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0114a86:	89 45 d8             	mov    %eax,-0x28(%ebp)

    // first recursively print all preceding (more significant) digits
    if (num >= base) {
c0114a89:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0114a8c:	ba 00 00 00 00       	mov    $0x0,%edx
c0114a91:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c0114a94:	77 64                	ja     c0114afa <printnum+0xea>
c0114a96:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c0114a99:	72 05                	jb     c0114aa0 <printnum+0x90>
c0114a9b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c0114a9e:	77 5a                	ja     c0114afa <printnum+0xea>
        printnum(putch, fd, putdat, result, base, width - 1, padc);
c0114aa0:	8b 45 20             	mov    0x20(%ebp),%eax
c0114aa3:	8d 50 ff             	lea    -0x1(%eax),%edx
c0114aa6:	8b 45 24             	mov    0x24(%ebp),%eax
c0114aa9:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c0114aad:	89 54 24 18          	mov    %edx,0x18(%esp)
c0114ab1:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0114ab4:	89 44 24 14          	mov    %eax,0x14(%esp)
c0114ab8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0114abb:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0114abe:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0114ac2:	89 54 24 10          	mov    %edx,0x10(%esp)
c0114ac6:	8b 45 10             	mov    0x10(%ebp),%eax
c0114ac9:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114acd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114ad0:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114ad4:	8b 45 08             	mov    0x8(%ebp),%eax
c0114ad7:	89 04 24             	mov    %eax,(%esp)
c0114ada:	e8 31 ff ff ff       	call   c0114a10 <printnum>
c0114adf:	eb 23                	jmp    c0114b04 <printnum+0xf4>
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
            putch(padc, putdat, fd);
c0114ae1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114ae4:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114ae8:	8b 45 10             	mov    0x10(%ebp),%eax
c0114aeb:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114aef:	8b 45 24             	mov    0x24(%ebp),%eax
c0114af2:	89 04 24             	mov    %eax,(%esp)
c0114af5:	8b 45 08             	mov    0x8(%ebp),%eax
c0114af8:	ff d0                	call   *%eax
    // first recursively print all preceding (more significant) digits
    if (num >= base) {
        printnum(putch, fd, putdat, result, base, width - 1, padc);
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
c0114afa:	83 6d 20 01          	subl   $0x1,0x20(%ebp)
c0114afe:	83 7d 20 00          	cmpl   $0x0,0x20(%ebp)
c0114b02:	7f dd                	jg     c0114ae1 <printnum+0xd1>
            putch(padc, putdat, fd);
    }
    // then print this (the least significant) digit
    putch("0123456789abcdef"[mod], putdat, fd);
c0114b04:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0114b07:	05 44 9c 11 c0       	add    $0xc0119c44,%eax
c0114b0c:	0f b6 00             	movzbl (%eax),%eax
c0114b0f:	0f be c0             	movsbl %al,%eax
c0114b12:	8b 55 0c             	mov    0xc(%ebp),%edx
c0114b15:	89 54 24 08          	mov    %edx,0x8(%esp)
c0114b19:	8b 55 10             	mov    0x10(%ebp),%edx
c0114b1c:	89 54 24 04          	mov    %edx,0x4(%esp)
c0114b20:	89 04 24             	mov    %eax,(%esp)
c0114b23:	8b 45 08             	mov    0x8(%ebp),%eax
c0114b26:	ff d0                	call   *%eax
}
c0114b28:	c9                   	leave  
c0114b29:	c3                   	ret    

c0114b2a <getuint>:
 * getuint - get an unsigned int of various possible sizes from a varargs list
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static unsigned long long
getuint(va_list *ap, int lflag) {
c0114b2a:	55                   	push   %ebp
c0114b2b:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c0114b2d:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c0114b31:	7e 14                	jle    c0114b47 <getuint+0x1d>
        return va_arg(*ap, unsigned long long);
c0114b33:	8b 45 08             	mov    0x8(%ebp),%eax
c0114b36:	8b 00                	mov    (%eax),%eax
c0114b38:	8d 48 08             	lea    0x8(%eax),%ecx
c0114b3b:	8b 55 08             	mov    0x8(%ebp),%edx
c0114b3e:	89 0a                	mov    %ecx,(%edx)
c0114b40:	8b 50 04             	mov    0x4(%eax),%edx
c0114b43:	8b 00                	mov    (%eax),%eax
c0114b45:	eb 30                	jmp    c0114b77 <getuint+0x4d>
    }
    else if (lflag) {
c0114b47:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0114b4b:	74 16                	je     c0114b63 <getuint+0x39>
        return va_arg(*ap, unsigned long);
c0114b4d:	8b 45 08             	mov    0x8(%ebp),%eax
c0114b50:	8b 00                	mov    (%eax),%eax
c0114b52:	8d 48 04             	lea    0x4(%eax),%ecx
c0114b55:	8b 55 08             	mov    0x8(%ebp),%edx
c0114b58:	89 0a                	mov    %ecx,(%edx)
c0114b5a:	8b 00                	mov    (%eax),%eax
c0114b5c:	ba 00 00 00 00       	mov    $0x0,%edx
c0114b61:	eb 14                	jmp    c0114b77 <getuint+0x4d>
    }
    else {
        return va_arg(*ap, unsigned int);
c0114b63:	8b 45 08             	mov    0x8(%ebp),%eax
c0114b66:	8b 00                	mov    (%eax),%eax
c0114b68:	8d 48 04             	lea    0x4(%eax),%ecx
c0114b6b:	8b 55 08             	mov    0x8(%ebp),%edx
c0114b6e:	89 0a                	mov    %ecx,(%edx)
c0114b70:	8b 00                	mov    (%eax),%eax
c0114b72:	ba 00 00 00 00       	mov    $0x0,%edx
    }
}
c0114b77:	5d                   	pop    %ebp
c0114b78:	c3                   	ret    

c0114b79 <getint>:
 * getint - same as getuint but signed, we can't use getuint because of sign extension
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static long long
getint(va_list *ap, int lflag) {
c0114b79:	55                   	push   %ebp
c0114b7a:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c0114b7c:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c0114b80:	7e 14                	jle    c0114b96 <getint+0x1d>
        return va_arg(*ap, long long);
c0114b82:	8b 45 08             	mov    0x8(%ebp),%eax
c0114b85:	8b 00                	mov    (%eax),%eax
c0114b87:	8d 48 08             	lea    0x8(%eax),%ecx
c0114b8a:	8b 55 08             	mov    0x8(%ebp),%edx
c0114b8d:	89 0a                	mov    %ecx,(%edx)
c0114b8f:	8b 50 04             	mov    0x4(%eax),%edx
c0114b92:	8b 00                	mov    (%eax),%eax
c0114b94:	eb 28                	jmp    c0114bbe <getint+0x45>
    }
    else if (lflag) {
c0114b96:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0114b9a:	74 12                	je     c0114bae <getint+0x35>
        return va_arg(*ap, long);
c0114b9c:	8b 45 08             	mov    0x8(%ebp),%eax
c0114b9f:	8b 00                	mov    (%eax),%eax
c0114ba1:	8d 48 04             	lea    0x4(%eax),%ecx
c0114ba4:	8b 55 08             	mov    0x8(%ebp),%edx
c0114ba7:	89 0a                	mov    %ecx,(%edx)
c0114ba9:	8b 00                	mov    (%eax),%eax
c0114bab:	99                   	cltd   
c0114bac:	eb 10                	jmp    c0114bbe <getint+0x45>
    }
    else {
        return va_arg(*ap, int);
c0114bae:	8b 45 08             	mov    0x8(%ebp),%eax
c0114bb1:	8b 00                	mov    (%eax),%eax
c0114bb3:	8d 48 04             	lea    0x4(%eax),%ecx
c0114bb6:	8b 55 08             	mov    0x8(%ebp),%edx
c0114bb9:	89 0a                	mov    %ecx,(%edx)
c0114bbb:	8b 00                	mov    (%eax),%eax
c0114bbd:	99                   	cltd   
    }
}
c0114bbe:	5d                   	pop    %ebp
c0114bbf:	c3                   	ret    

c0114bc0 <printfmt>:
 * @fd:         file descriptor
 * @putdat:     used by @putch function
 * @fmt:        the format string to use
 * */
void
printfmt(void (*putch)(int, void*, int), int fd, void *putdat, const char *fmt, ...) {
c0114bc0:	55                   	push   %ebp
c0114bc1:	89 e5                	mov    %esp,%ebp
c0114bc3:	83 ec 38             	sub    $0x38,%esp
    va_list ap;

    va_start(ap, fmt);
c0114bc6:	8d 45 18             	lea    0x18(%ebp),%eax
c0114bc9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vprintfmt(putch, fd, putdat, fmt, ap);
c0114bcc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114bcf:	89 44 24 10          	mov    %eax,0x10(%esp)
c0114bd3:	8b 45 14             	mov    0x14(%ebp),%eax
c0114bd6:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0114bda:	8b 45 10             	mov    0x10(%ebp),%eax
c0114bdd:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114be1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114be4:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114be8:	8b 45 08             	mov    0x8(%ebp),%eax
c0114beb:	89 04 24             	mov    %eax,(%esp)
c0114bee:	e8 02 00 00 00       	call   c0114bf5 <vprintfmt>
    va_end(ap);
}
c0114bf3:	c9                   	leave  
c0114bf4:	c3                   	ret    

c0114bf5 <vprintfmt>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want printfmt() instead.
 * */
void
vprintfmt(void (*putch)(int, void*, int), int fd, void *putdat, const char *fmt, va_list ap) {
c0114bf5:	55                   	push   %ebp
c0114bf6:	89 e5                	mov    %esp,%ebp
c0114bf8:	56                   	push   %esi
c0114bf9:	53                   	push   %ebx
c0114bfa:	83 ec 40             	sub    $0x40,%esp
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c0114bfd:	eb 1f                	jmp    c0114c1e <vprintfmt+0x29>
            if (ch == '\0') {
c0114bff:	85 db                	test   %ebx,%ebx
c0114c01:	75 05                	jne    c0114c08 <vprintfmt+0x13>
                return;
c0114c03:	e9 33 04 00 00       	jmp    c011503b <vprintfmt+0x446>
            }
            putch(ch, putdat, fd);
c0114c08:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114c0b:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114c0f:	8b 45 10             	mov    0x10(%ebp),%eax
c0114c12:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114c16:	89 1c 24             	mov    %ebx,(%esp)
c0114c19:	8b 45 08             	mov    0x8(%ebp),%eax
c0114c1c:	ff d0                	call   *%eax
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c0114c1e:	8b 45 14             	mov    0x14(%ebp),%eax
c0114c21:	8d 50 01             	lea    0x1(%eax),%edx
c0114c24:	89 55 14             	mov    %edx,0x14(%ebp)
c0114c27:	0f b6 00             	movzbl (%eax),%eax
c0114c2a:	0f b6 d8             	movzbl %al,%ebx
c0114c2d:	83 fb 25             	cmp    $0x25,%ebx
c0114c30:	75 cd                	jne    c0114bff <vprintfmt+0xa>
            }
            putch(ch, putdat, fd);
        }

        // Process a %-escape sequence
        char padc = ' ';
c0114c32:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
        width = precision = -1;
c0114c36:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
c0114c3d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114c40:	89 45 e8             	mov    %eax,-0x18(%ebp)
        lflag = altflag = 0;
c0114c43:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0114c4a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0114c4d:	89 45 e0             	mov    %eax,-0x20(%ebp)

    reswitch:
        switch (ch = *(unsigned char *)fmt ++) {
c0114c50:	8b 45 14             	mov    0x14(%ebp),%eax
c0114c53:	8d 50 01             	lea    0x1(%eax),%edx
c0114c56:	89 55 14             	mov    %edx,0x14(%ebp)
c0114c59:	0f b6 00             	movzbl (%eax),%eax
c0114c5c:	0f b6 d8             	movzbl %al,%ebx
c0114c5f:	8d 43 dd             	lea    -0x23(%ebx),%eax
c0114c62:	83 f8 55             	cmp    $0x55,%eax
c0114c65:	0f 87 98 03 00 00    	ja     c0115003 <vprintfmt+0x40e>
c0114c6b:	8b 04 85 68 9c 11 c0 	mov    -0x3fee6398(,%eax,4),%eax
c0114c72:	ff e0                	jmp    *%eax

        // flag to pad on the right
        case '-':
            padc = '-';
c0114c74:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
            goto reswitch;
c0114c78:	eb d6                	jmp    c0114c50 <vprintfmt+0x5b>

        // flag to pad with 0's instead of spaces
        case '0':
            padc = '0';
c0114c7a:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
            goto reswitch;
c0114c7e:	eb d0                	jmp    c0114c50 <vprintfmt+0x5b>

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c0114c80:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
                precision = precision * 10 + ch - '0';
c0114c87:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0114c8a:	89 d0                	mov    %edx,%eax
c0114c8c:	c1 e0 02             	shl    $0x2,%eax
c0114c8f:	01 d0                	add    %edx,%eax
c0114c91:	01 c0                	add    %eax,%eax
c0114c93:	01 d8                	add    %ebx,%eax
c0114c95:	83 e8 30             	sub    $0x30,%eax
c0114c98:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                ch = *fmt;
c0114c9b:	8b 45 14             	mov    0x14(%ebp),%eax
c0114c9e:	0f b6 00             	movzbl (%eax),%eax
c0114ca1:	0f be d8             	movsbl %al,%ebx
                if (ch < '0' || ch > '9') {
c0114ca4:	83 fb 2f             	cmp    $0x2f,%ebx
c0114ca7:	7e 0b                	jle    c0114cb4 <vprintfmt+0xbf>
c0114ca9:	83 fb 39             	cmp    $0x39,%ebx
c0114cac:	7f 06                	jg     c0114cb4 <vprintfmt+0xbf>
            padc = '0';
            goto reswitch;

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c0114cae:	83 45 14 01          	addl   $0x1,0x14(%ebp)
                precision = precision * 10 + ch - '0';
                ch = *fmt;
                if (ch < '0' || ch > '9') {
                    break;
                }
            }
c0114cb2:	eb d3                	jmp    c0114c87 <vprintfmt+0x92>
            goto process_precision;
c0114cb4:	eb 33                	jmp    c0114ce9 <vprintfmt+0xf4>

        case '*':
            precision = va_arg(ap, int);
c0114cb6:	8b 45 18             	mov    0x18(%ebp),%eax
c0114cb9:	8d 50 04             	lea    0x4(%eax),%edx
c0114cbc:	89 55 18             	mov    %edx,0x18(%ebp)
c0114cbf:	8b 00                	mov    (%eax),%eax
c0114cc1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            goto process_precision;
c0114cc4:	eb 23                	jmp    c0114ce9 <vprintfmt+0xf4>

        case '.':
            if (width < 0)
c0114cc6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0114cca:	79 0c                	jns    c0114cd8 <vprintfmt+0xe3>
                width = 0;
c0114ccc:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
            goto reswitch;
c0114cd3:	e9 78 ff ff ff       	jmp    c0114c50 <vprintfmt+0x5b>
c0114cd8:	e9 73 ff ff ff       	jmp    c0114c50 <vprintfmt+0x5b>

        case '#':
            altflag = 1;
c0114cdd:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
            goto reswitch;
c0114ce4:	e9 67 ff ff ff       	jmp    c0114c50 <vprintfmt+0x5b>

        process_precision:
            if (width < 0)
c0114ce9:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0114ced:	79 12                	jns    c0114d01 <vprintfmt+0x10c>
                width = precision, precision = -1;
c0114cef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114cf2:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0114cf5:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
            goto reswitch;
c0114cfc:	e9 4f ff ff ff       	jmp    c0114c50 <vprintfmt+0x5b>
c0114d01:	e9 4a ff ff ff       	jmp    c0114c50 <vprintfmt+0x5b>

        // long flag (doubled for long long)
        case 'l':
            lflag ++;
c0114d06:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
            goto reswitch;
c0114d0a:	e9 41 ff ff ff       	jmp    c0114c50 <vprintfmt+0x5b>

        // character
        case 'c':
            putch(va_arg(ap, int), putdat, fd);
c0114d0f:	8b 45 18             	mov    0x18(%ebp),%eax
c0114d12:	8d 50 04             	lea    0x4(%eax),%edx
c0114d15:	89 55 18             	mov    %edx,0x18(%ebp)
c0114d18:	8b 00                	mov    (%eax),%eax
c0114d1a:	8b 55 0c             	mov    0xc(%ebp),%edx
c0114d1d:	89 54 24 08          	mov    %edx,0x8(%esp)
c0114d21:	8b 55 10             	mov    0x10(%ebp),%edx
c0114d24:	89 54 24 04          	mov    %edx,0x4(%esp)
c0114d28:	89 04 24             	mov    %eax,(%esp)
c0114d2b:	8b 45 08             	mov    0x8(%ebp),%eax
c0114d2e:	ff d0                	call   *%eax
            break;
c0114d30:	e9 00 03 00 00       	jmp    c0115035 <vprintfmt+0x440>

        // error message
        case 'e':
            err = va_arg(ap, int);
c0114d35:	8b 45 18             	mov    0x18(%ebp),%eax
c0114d38:	8d 50 04             	lea    0x4(%eax),%edx
c0114d3b:	89 55 18             	mov    %edx,0x18(%ebp)
c0114d3e:	8b 18                	mov    (%eax),%ebx
            if (err < 0) {
c0114d40:	85 db                	test   %ebx,%ebx
c0114d42:	79 02                	jns    c0114d46 <vprintfmt+0x151>
                err = -err;
c0114d44:	f7 db                	neg    %ebx
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
c0114d46:	83 fb 18             	cmp    $0x18,%ebx
c0114d49:	7f 0b                	jg     c0114d56 <vprintfmt+0x161>
c0114d4b:	8b 34 9d e0 9b 11 c0 	mov    -0x3fee6420(,%ebx,4),%esi
c0114d52:	85 f6                	test   %esi,%esi
c0114d54:	75 2a                	jne    c0114d80 <vprintfmt+0x18b>
                printfmt(putch, fd, putdat, "error %d", err);
c0114d56:	89 5c 24 10          	mov    %ebx,0x10(%esp)
c0114d5a:	c7 44 24 0c 55 9c 11 	movl   $0xc0119c55,0xc(%esp)
c0114d61:	c0 
c0114d62:	8b 45 10             	mov    0x10(%ebp),%eax
c0114d65:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114d69:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114d6c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114d70:	8b 45 08             	mov    0x8(%ebp),%eax
c0114d73:	89 04 24             	mov    %eax,(%esp)
c0114d76:	e8 45 fe ff ff       	call   c0114bc0 <printfmt>
            }
            else {
                printfmt(putch, fd, putdat, "%s", p);
            }
            break;
c0114d7b:	e9 b5 02 00 00       	jmp    c0115035 <vprintfmt+0x440>
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
                printfmt(putch, fd, putdat, "error %d", err);
            }
            else {
                printfmt(putch, fd, putdat, "%s", p);
c0114d80:	89 74 24 10          	mov    %esi,0x10(%esp)
c0114d84:	c7 44 24 0c 5e 9c 11 	movl   $0xc0119c5e,0xc(%esp)
c0114d8b:	c0 
c0114d8c:	8b 45 10             	mov    0x10(%ebp),%eax
c0114d8f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114d93:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114d96:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114d9a:	8b 45 08             	mov    0x8(%ebp),%eax
c0114d9d:	89 04 24             	mov    %eax,(%esp)
c0114da0:	e8 1b fe ff ff       	call   c0114bc0 <printfmt>
            }
            break;
c0114da5:	e9 8b 02 00 00       	jmp    c0115035 <vprintfmt+0x440>

        // string
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
c0114daa:	8b 45 18             	mov    0x18(%ebp),%eax
c0114dad:	8d 50 04             	lea    0x4(%eax),%edx
c0114db0:	89 55 18             	mov    %edx,0x18(%ebp)
c0114db3:	8b 30                	mov    (%eax),%esi
c0114db5:	85 f6                	test   %esi,%esi
c0114db7:	75 05                	jne    c0114dbe <vprintfmt+0x1c9>
                p = "(null)";
c0114db9:	be 61 9c 11 c0       	mov    $0xc0119c61,%esi
            }
            if (width > 0 && padc != '-') {
c0114dbe:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0114dc2:	7e 45                	jle    c0114e09 <vprintfmt+0x214>
c0114dc4:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
c0114dc8:	74 3f                	je     c0114e09 <vprintfmt+0x214>
                for (width -= strnlen(p, precision); width > 0; width --) {
c0114dca:	8b 5d e8             	mov    -0x18(%ebp),%ebx
c0114dcd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114dd0:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114dd4:	89 34 24             	mov    %esi,(%esp)
c0114dd7:	e8 3b 04 00 00       	call   c0115217 <strnlen>
c0114ddc:	29 c3                	sub    %eax,%ebx
c0114dde:	89 d8                	mov    %ebx,%eax
c0114de0:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0114de3:	eb 1e                	jmp    c0114e03 <vprintfmt+0x20e>
                    putch(padc, putdat, fd);
c0114de5:	0f be 45 db          	movsbl -0x25(%ebp),%eax
c0114de9:	8b 55 0c             	mov    0xc(%ebp),%edx
c0114dec:	89 54 24 08          	mov    %edx,0x8(%esp)
c0114df0:	8b 55 10             	mov    0x10(%ebp),%edx
c0114df3:	89 54 24 04          	mov    %edx,0x4(%esp)
c0114df7:	89 04 24             	mov    %eax,(%esp)
c0114dfa:	8b 45 08             	mov    0x8(%ebp),%eax
c0114dfd:	ff d0                	call   *%eax
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
                p = "(null)";
            }
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
c0114dff:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c0114e03:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0114e07:	7f dc                	jg     c0114de5 <vprintfmt+0x1f0>
                    putch(padc, putdat, fd);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c0114e09:	eb 46                	jmp    c0114e51 <vprintfmt+0x25c>
                if (altflag && (ch < ' ' || ch > '~')) {
c0114e0b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0114e0f:	74 26                	je     c0114e37 <vprintfmt+0x242>
c0114e11:	83 fb 1f             	cmp    $0x1f,%ebx
c0114e14:	7e 05                	jle    c0114e1b <vprintfmt+0x226>
c0114e16:	83 fb 7e             	cmp    $0x7e,%ebx
c0114e19:	7e 1c                	jle    c0114e37 <vprintfmt+0x242>
                    putch('?', putdat, fd);
c0114e1b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114e1e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114e22:	8b 45 10             	mov    0x10(%ebp),%eax
c0114e25:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114e29:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
c0114e30:	8b 45 08             	mov    0x8(%ebp),%eax
c0114e33:	ff d0                	call   *%eax
c0114e35:	eb 16                	jmp    c0114e4d <vprintfmt+0x258>
                }
                else {
                    putch(ch, putdat, fd);
c0114e37:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114e3a:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114e3e:	8b 45 10             	mov    0x10(%ebp),%eax
c0114e41:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114e45:	89 1c 24             	mov    %ebx,(%esp)
c0114e48:	8b 45 08             	mov    0x8(%ebp),%eax
c0114e4b:	ff d0                	call   *%eax
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
                    putch(padc, putdat, fd);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c0114e4d:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c0114e51:	89 f0                	mov    %esi,%eax
c0114e53:	8d 70 01             	lea    0x1(%eax),%esi
c0114e56:	0f b6 00             	movzbl (%eax),%eax
c0114e59:	0f be d8             	movsbl %al,%ebx
c0114e5c:	85 db                	test   %ebx,%ebx
c0114e5e:	74 10                	je     c0114e70 <vprintfmt+0x27b>
c0114e60:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0114e64:	78 a5                	js     c0114e0b <vprintfmt+0x216>
c0114e66:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
c0114e6a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0114e6e:	79 9b                	jns    c0114e0b <vprintfmt+0x216>
                }
                else {
                    putch(ch, putdat, fd);
                }
            }
            for (; width > 0; width --) {
c0114e70:	eb 1e                	jmp    c0114e90 <vprintfmt+0x29b>
                putch(' ', putdat, fd);
c0114e72:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114e75:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114e79:	8b 45 10             	mov    0x10(%ebp),%eax
c0114e7c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114e80:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c0114e87:	8b 45 08             	mov    0x8(%ebp),%eax
c0114e8a:	ff d0                	call   *%eax
                }
                else {
                    putch(ch, putdat, fd);
                }
            }
            for (; width > 0; width --) {
c0114e8c:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c0114e90:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0114e94:	7f dc                	jg     c0114e72 <vprintfmt+0x27d>
                putch(' ', putdat, fd);
            }
            break;
c0114e96:	e9 9a 01 00 00       	jmp    c0115035 <vprintfmt+0x440>

        // (signed) decimal
        case 'd':
            num = getint(&ap, lflag);
c0114e9b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114e9e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114ea2:	8d 45 18             	lea    0x18(%ebp),%eax
c0114ea5:	89 04 24             	mov    %eax,(%esp)
c0114ea8:	e8 cc fc ff ff       	call   c0114b79 <getint>
c0114ead:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0114eb0:	89 55 f4             	mov    %edx,-0xc(%ebp)
            if ((long long)num < 0) {
c0114eb3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114eb6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0114eb9:	85 d2                	test   %edx,%edx
c0114ebb:	79 2d                	jns    c0114eea <vprintfmt+0x2f5>
                putch('-', putdat, fd);
c0114ebd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114ec0:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114ec4:	8b 45 10             	mov    0x10(%ebp),%eax
c0114ec7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114ecb:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
c0114ed2:	8b 45 08             	mov    0x8(%ebp),%eax
c0114ed5:	ff d0                	call   *%eax
                num = -(long long)num;
c0114ed7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114eda:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0114edd:	f7 d8                	neg    %eax
c0114edf:	83 d2 00             	adc    $0x0,%edx
c0114ee2:	f7 da                	neg    %edx
c0114ee4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0114ee7:	89 55 f4             	mov    %edx,-0xc(%ebp)
            }
            base = 10;
c0114eea:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c0114ef1:	e9 b6 00 00 00       	jmp    c0114fac <vprintfmt+0x3b7>

        // unsigned decimal
        case 'u':
            num = getuint(&ap, lflag);
c0114ef6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114ef9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114efd:	8d 45 18             	lea    0x18(%ebp),%eax
c0114f00:	89 04 24             	mov    %eax,(%esp)
c0114f03:	e8 22 fc ff ff       	call   c0114b2a <getuint>
c0114f08:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0114f0b:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 10;
c0114f0e:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c0114f15:	e9 92 00 00 00       	jmp    c0114fac <vprintfmt+0x3b7>

        // (unsigned) octal
        case 'o':
            num = getuint(&ap, lflag);
c0114f1a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114f1d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114f21:	8d 45 18             	lea    0x18(%ebp),%eax
c0114f24:	89 04 24             	mov    %eax,(%esp)
c0114f27:	e8 fe fb ff ff       	call   c0114b2a <getuint>
c0114f2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0114f2f:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 8;
c0114f32:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
            goto number;
c0114f39:	eb 71                	jmp    c0114fac <vprintfmt+0x3b7>

        // pointer
        case 'p':
            putch('0', putdat, fd);
c0114f3b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114f3e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114f42:	8b 45 10             	mov    0x10(%ebp),%eax
c0114f45:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114f49:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
c0114f50:	8b 45 08             	mov    0x8(%ebp),%eax
c0114f53:	ff d0                	call   *%eax
            putch('x', putdat, fd);
c0114f55:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114f58:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114f5c:	8b 45 10             	mov    0x10(%ebp),%eax
c0114f5f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114f63:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
c0114f6a:	8b 45 08             	mov    0x8(%ebp),%eax
c0114f6d:	ff d0                	call   *%eax
            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
c0114f6f:	8b 45 18             	mov    0x18(%ebp),%eax
c0114f72:	8d 50 04             	lea    0x4(%eax),%edx
c0114f75:	89 55 18             	mov    %edx,0x18(%ebp)
c0114f78:	8b 00                	mov    (%eax),%eax
c0114f7a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0114f7d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            base = 16;
c0114f84:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
            goto number;
c0114f8b:	eb 1f                	jmp    c0114fac <vprintfmt+0x3b7>

        // (unsigned) hexadecimal
        case 'x':
            num = getuint(&ap, lflag);
c0114f8d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114f90:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114f94:	8d 45 18             	lea    0x18(%ebp),%eax
c0114f97:	89 04 24             	mov    %eax,(%esp)
c0114f9a:	e8 8b fb ff ff       	call   c0114b2a <getuint>
c0114f9f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0114fa2:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 16;
c0114fa5:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
        number:
            printnum(putch, fd, putdat, num, base, width, padc);
c0114fac:	0f be 55 db          	movsbl -0x25(%ebp),%edx
c0114fb0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114fb3:	89 54 24 1c          	mov    %edx,0x1c(%esp)
c0114fb7:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0114fba:	89 54 24 18          	mov    %edx,0x18(%esp)
c0114fbe:	89 44 24 14          	mov    %eax,0x14(%esp)
c0114fc2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114fc5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0114fc8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0114fcc:	89 54 24 10          	mov    %edx,0x10(%esp)
c0114fd0:	8b 45 10             	mov    0x10(%ebp),%eax
c0114fd3:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114fd7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114fda:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114fde:	8b 45 08             	mov    0x8(%ebp),%eax
c0114fe1:	89 04 24             	mov    %eax,(%esp)
c0114fe4:	e8 27 fa ff ff       	call   c0114a10 <printnum>
            break;
c0114fe9:	eb 4a                	jmp    c0115035 <vprintfmt+0x440>

        // escaped '%' character
        case '%':
            putch(ch, putdat, fd);
c0114feb:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114fee:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114ff2:	8b 45 10             	mov    0x10(%ebp),%eax
c0114ff5:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114ff9:	89 1c 24             	mov    %ebx,(%esp)
c0114ffc:	8b 45 08             	mov    0x8(%ebp),%eax
c0114fff:	ff d0                	call   *%eax
            break;
c0115001:	eb 32                	jmp    c0115035 <vprintfmt+0x440>

        // unrecognized escape sequence - just print it literally
        default:
            putch('%', putdat, fd);
c0115003:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115006:	89 44 24 08          	mov    %eax,0x8(%esp)
c011500a:	8b 45 10             	mov    0x10(%ebp),%eax
c011500d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0115011:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
c0115018:	8b 45 08             	mov    0x8(%ebp),%eax
c011501b:	ff d0                	call   *%eax
            for (fmt --; fmt[-1] != '%'; fmt --)
c011501d:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0115021:	eb 04                	jmp    c0115027 <vprintfmt+0x432>
c0115023:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0115027:	8b 45 14             	mov    0x14(%ebp),%eax
c011502a:	83 e8 01             	sub    $0x1,%eax
c011502d:	0f b6 00             	movzbl (%eax),%eax
c0115030:	3c 25                	cmp    $0x25,%al
c0115032:	75 ef                	jne    c0115023 <vprintfmt+0x42e>
                /* do nothing */;
            break;
c0115034:	90                   	nop
        }
    }
c0115035:	90                   	nop
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c0115036:	e9 e3 fb ff ff       	jmp    c0114c1e <vprintfmt+0x29>
            for (fmt --; fmt[-1] != '%'; fmt --)
                /* do nothing */;
            break;
        }
    }
}
c011503b:	83 c4 40             	add    $0x40,%esp
c011503e:	5b                   	pop    %ebx
c011503f:	5e                   	pop    %esi
c0115040:	5d                   	pop    %ebp
c0115041:	c3                   	ret    

c0115042 <sprintputch>:
 * sprintputch - 'print' a single character in a buffer
 * @ch:         the character will be printed
 * @b:          the buffer to place the character @ch
 * */
static void
sprintputch(int ch, struct sprintbuf *b) {
c0115042:	55                   	push   %ebp
c0115043:	89 e5                	mov    %esp,%ebp
    b->cnt ++;
c0115045:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115048:	8b 40 08             	mov    0x8(%eax),%eax
c011504b:	8d 50 01             	lea    0x1(%eax),%edx
c011504e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115051:	89 50 08             	mov    %edx,0x8(%eax)
    if (b->buf < b->ebuf) {
c0115054:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115057:	8b 10                	mov    (%eax),%edx
c0115059:	8b 45 0c             	mov    0xc(%ebp),%eax
c011505c:	8b 40 04             	mov    0x4(%eax),%eax
c011505f:	39 c2                	cmp    %eax,%edx
c0115061:	73 12                	jae    c0115075 <sprintputch+0x33>
        *b->buf ++ = ch;
c0115063:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115066:	8b 00                	mov    (%eax),%eax
c0115068:	8d 48 01             	lea    0x1(%eax),%ecx
c011506b:	8b 55 0c             	mov    0xc(%ebp),%edx
c011506e:	89 0a                	mov    %ecx,(%edx)
c0115070:	8b 55 08             	mov    0x8(%ebp),%edx
c0115073:	88 10                	mov    %dl,(%eax)
    }
}
c0115075:	5d                   	pop    %ebp
c0115076:	c3                   	ret    

c0115077 <snprintf>:
 * @str:        the buffer to place the result into
 * @size:       the size of buffer, including the trailing null space
 * @fmt:        the format string to use
 * */
int
snprintf(char *str, size_t size, const char *fmt, ...) {
c0115077:	55                   	push   %ebp
c0115078:	89 e5                	mov    %esp,%ebp
c011507a:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c011507d:	8d 45 14             	lea    0x14(%ebp),%eax
c0115080:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vsnprintf(str, size, fmt, ap);
c0115083:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0115086:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011508a:	8b 45 10             	mov    0x10(%ebp),%eax
c011508d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0115091:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115094:	89 44 24 04          	mov    %eax,0x4(%esp)
c0115098:	8b 45 08             	mov    0x8(%ebp),%eax
c011509b:	89 04 24             	mov    %eax,(%esp)
c011509e:	e8 08 00 00 00       	call   c01150ab <vsnprintf>
c01150a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c01150a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01150a9:	c9                   	leave  
c01150aa:	c3                   	ret    

c01150ab <vsnprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want snprintf() instead.
 * */
int
vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
c01150ab:	55                   	push   %ebp
c01150ac:	89 e5                	mov    %esp,%ebp
c01150ae:	83 ec 38             	sub    $0x38,%esp
    struct sprintbuf b = {str, str + size - 1, 0};
c01150b1:	8b 45 08             	mov    0x8(%ebp),%eax
c01150b4:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01150b7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01150ba:	8d 50 ff             	lea    -0x1(%eax),%edx
c01150bd:	8b 45 08             	mov    0x8(%ebp),%eax
c01150c0:	01 d0                	add    %edx,%eax
c01150c2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01150c5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (str == NULL || b.buf > b.ebuf) {
c01150cc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01150d0:	74 0a                	je     c01150dc <vsnprintf+0x31>
c01150d2:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01150d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01150d8:	39 c2                	cmp    %eax,%edx
c01150da:	76 07                	jbe    c01150e3 <vsnprintf+0x38>
        return -E_INVAL;
c01150dc:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01150e1:	eb 32                	jmp    c0115115 <vsnprintf+0x6a>
    }
    // print the string to the buffer
    vprintfmt((void*)sprintputch, NO_FD, &b, fmt, ap);
c01150e3:	8b 45 14             	mov    0x14(%ebp),%eax
c01150e6:	89 44 24 10          	mov    %eax,0x10(%esp)
c01150ea:	8b 45 10             	mov    0x10(%ebp),%eax
c01150ed:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01150f1:	8d 45 ec             	lea    -0x14(%ebp),%eax
c01150f4:	89 44 24 08          	mov    %eax,0x8(%esp)
c01150f8:	c7 44 24 04 d9 6a ff 	movl   $0xffff6ad9,0x4(%esp)
c01150ff:	ff 
c0115100:	c7 04 24 42 50 11 c0 	movl   $0xc0115042,(%esp)
c0115107:	e8 e9 fa ff ff       	call   c0114bf5 <vprintfmt>
    // null terminate the buffer
    *b.buf = '\0';
c011510c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011510f:	c6 00 00             	movb   $0x0,(%eax)
    return b.cnt;
c0115112:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0115115:	c9                   	leave  
c0115116:	c3                   	ret    

c0115117 <rand>:
 * rand - returns a pseudo-random integer
 *
 * The rand() function return a value in the range [0, RAND_MAX].
 * */
int
rand(void) {
c0115117:	55                   	push   %ebp
c0115118:	89 e5                	mov    %esp,%ebp
c011511a:	57                   	push   %edi
c011511b:	56                   	push   %esi
c011511c:	53                   	push   %ebx
c011511d:	83 ec 24             	sub    $0x24,%esp
    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
c0115120:	a1 c8 ee 14 c0       	mov    0xc014eec8,%eax
c0115125:	8b 15 cc ee 14 c0    	mov    0xc014eecc,%edx
c011512b:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
c0115131:	6b f0 05             	imul   $0x5,%eax,%esi
c0115134:	01 f7                	add    %esi,%edi
c0115136:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
c011513b:	f7 e6                	mul    %esi
c011513d:	8d 34 17             	lea    (%edi,%edx,1),%esi
c0115140:	89 f2                	mov    %esi,%edx
c0115142:	83 c0 0b             	add    $0xb,%eax
c0115145:	83 d2 00             	adc    $0x0,%edx
c0115148:	89 c7                	mov    %eax,%edi
c011514a:	83 e7 ff             	and    $0xffffffff,%edi
c011514d:	89 f9                	mov    %edi,%ecx
c011514f:	0f b7 da             	movzwl %dx,%ebx
c0115152:	89 0d c8 ee 14 c0    	mov    %ecx,0xc014eec8
c0115158:	89 1d cc ee 14 c0    	mov    %ebx,0xc014eecc
    unsigned long long result = (next >> 12);
c011515e:	a1 c8 ee 14 c0       	mov    0xc014eec8,%eax
c0115163:	8b 15 cc ee 14 c0    	mov    0xc014eecc,%edx
c0115169:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c011516d:	c1 ea 0c             	shr    $0xc,%edx
c0115170:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0115173:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    return (int)do_div(result, RAND_MAX + 1);
c0115176:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
c011517d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0115180:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0115183:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0115186:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0115189:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011518c:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011518f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0115193:	74 1c                	je     c01151b1 <rand+0x9a>
c0115195:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0115198:	ba 00 00 00 00       	mov    $0x0,%edx
c011519d:	f7 75 dc             	divl   -0x24(%ebp)
c01151a0:	89 55 ec             	mov    %edx,-0x14(%ebp)
c01151a3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01151a6:	ba 00 00 00 00       	mov    $0x0,%edx
c01151ab:	f7 75 dc             	divl   -0x24(%ebp)
c01151ae:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01151b1:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01151b4:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01151b7:	f7 75 dc             	divl   -0x24(%ebp)
c01151ba:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01151bd:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c01151c0:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01151c3:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01151c6:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01151c9:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c01151cc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
}
c01151cf:	83 c4 24             	add    $0x24,%esp
c01151d2:	5b                   	pop    %ebx
c01151d3:	5e                   	pop    %esi
c01151d4:	5f                   	pop    %edi
c01151d5:	5d                   	pop    %ebp
c01151d6:	c3                   	ret    

c01151d7 <srand>:
/* *
 * srand - seed the random number generator with the given number
 * @seed:   the required seed number
 * */
void
srand(unsigned int seed) {
c01151d7:	55                   	push   %ebp
c01151d8:	89 e5                	mov    %esp,%ebp
    next = seed;
c01151da:	8b 45 08             	mov    0x8(%ebp),%eax
c01151dd:	ba 00 00 00 00       	mov    $0x0,%edx
c01151e2:	a3 c8 ee 14 c0       	mov    %eax,0xc014eec8
c01151e7:	89 15 cc ee 14 c0    	mov    %edx,0xc014eecc
}
c01151ed:	5d                   	pop    %ebp
c01151ee:	c3                   	ret    

c01151ef <strlen>:
 * @s:      the input string
 *
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
c01151ef:	55                   	push   %ebp
c01151f0:	89 e5                	mov    %esp,%ebp
c01151f2:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c01151f5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*s ++ != '\0') {
c01151fc:	eb 04                	jmp    c0115202 <strlen+0x13>
        cnt ++;
c01151fe:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
    size_t cnt = 0;
    while (*s ++ != '\0') {
c0115202:	8b 45 08             	mov    0x8(%ebp),%eax
c0115205:	8d 50 01             	lea    0x1(%eax),%edx
c0115208:	89 55 08             	mov    %edx,0x8(%ebp)
c011520b:	0f b6 00             	movzbl (%eax),%eax
c011520e:	84 c0                	test   %al,%al
c0115210:	75 ec                	jne    c01151fe <strlen+0xf>
        cnt ++;
    }
    return cnt;
c0115212:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0115215:	c9                   	leave  
c0115216:	c3                   	ret    

c0115217 <strnlen>:
 * The return value is strlen(s), if that is less than @len, or
 * @len if there is no '\0' character among the first @len characters
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
c0115217:	55                   	push   %ebp
c0115218:	89 e5                	mov    %esp,%ebp
c011521a:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c011521d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (cnt < len && *s ++ != '\0') {
c0115224:	eb 04                	jmp    c011522a <strnlen+0x13>
        cnt ++;
c0115226:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
    size_t cnt = 0;
    while (cnt < len && *s ++ != '\0') {
c011522a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c011522d:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0115230:	73 10                	jae    c0115242 <strnlen+0x2b>
c0115232:	8b 45 08             	mov    0x8(%ebp),%eax
c0115235:	8d 50 01             	lea    0x1(%eax),%edx
c0115238:	89 55 08             	mov    %edx,0x8(%ebp)
c011523b:	0f b6 00             	movzbl (%eax),%eax
c011523e:	84 c0                	test   %al,%al
c0115240:	75 e4                	jne    c0115226 <strnlen+0xf>
        cnt ++;
    }
    return cnt;
c0115242:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0115245:	c9                   	leave  
c0115246:	c3                   	ret    

c0115247 <strcat>:
 * @dst:    pointer to the @dst array, which should be large enough to contain the concatenated
 *          resulting string.
 * @src:    string to be appended, this should not overlap @dst
 * */
char *
strcat(char *dst, const char *src) {
c0115247:	55                   	push   %ebp
c0115248:	89 e5                	mov    %esp,%ebp
c011524a:	83 ec 18             	sub    $0x18,%esp
    return strcpy(dst + strlen(dst), src);
c011524d:	8b 45 08             	mov    0x8(%ebp),%eax
c0115250:	89 04 24             	mov    %eax,(%esp)
c0115253:	e8 97 ff ff ff       	call   c01151ef <strlen>
c0115258:	8b 55 08             	mov    0x8(%ebp),%edx
c011525b:	01 c2                	add    %eax,%edx
c011525d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115260:	89 44 24 04          	mov    %eax,0x4(%esp)
c0115264:	89 14 24             	mov    %edx,(%esp)
c0115267:	e8 02 00 00 00       	call   c011526e <strcpy>
}
c011526c:	c9                   	leave  
c011526d:	c3                   	ret    

c011526e <strcpy>:
 * To avoid overflows, the size of array pointed by @dst should be long enough to
 * contain the same string as @src (including the terminating null character), and
 * should not overlap in memory with @src.
 * */
char *
strcpy(char *dst, const char *src) {
c011526e:	55                   	push   %ebp
c011526f:	89 e5                	mov    %esp,%ebp
c0115271:	57                   	push   %edi
c0115272:	56                   	push   %esi
c0115273:	83 ec 20             	sub    $0x20,%esp
c0115276:	8b 45 08             	mov    0x8(%ebp),%eax
c0115279:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011527c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011527f:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCPY
#define __HAVE_ARCH_STRCPY
static inline char *
__strcpy(char *dst, const char *src) {
    int d0, d1, d2;
    asm volatile (
c0115282:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0115285:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0115288:	89 d1                	mov    %edx,%ecx
c011528a:	89 c2                	mov    %eax,%edx
c011528c:	89 ce                	mov    %ecx,%esi
c011528e:	89 d7                	mov    %edx,%edi
c0115290:	ac                   	lods   %ds:(%esi),%al
c0115291:	aa                   	stos   %al,%es:(%edi)
c0115292:	84 c0                	test   %al,%al
c0115294:	75 fa                	jne    c0115290 <strcpy+0x22>
c0115296:	89 fa                	mov    %edi,%edx
c0115298:	89 f1                	mov    %esi,%ecx
c011529a:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c011529d:	89 55 e8             	mov    %edx,-0x18(%ebp)
c01152a0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        "stosb;"
        "testb %%al, %%al;"
        "jne 1b;"
        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
        : "0" (src), "1" (dst) : "memory");
    return dst;
c01152a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
    char *p = dst;
    while ((*p ++ = *src ++) != '\0')
        /* nothing */;
    return dst;
#endif /* __HAVE_ARCH_STRCPY */
}
c01152a6:	83 c4 20             	add    $0x20,%esp
c01152a9:	5e                   	pop    %esi
c01152aa:	5f                   	pop    %edi
c01152ab:	5d                   	pop    %ebp
c01152ac:	c3                   	ret    

c01152ad <strncpy>:
 * @len:    maximum number of characters to be copied from @src
 *
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
c01152ad:	55                   	push   %ebp
c01152ae:	89 e5                	mov    %esp,%ebp
c01152b0:	83 ec 10             	sub    $0x10,%esp
    char *p = dst;
c01152b3:	8b 45 08             	mov    0x8(%ebp),%eax
c01152b6:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (len > 0) {
c01152b9:	eb 21                	jmp    c01152dc <strncpy+0x2f>
        if ((*p = *src) != '\0') {
c01152bb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01152be:	0f b6 10             	movzbl (%eax),%edx
c01152c1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01152c4:	88 10                	mov    %dl,(%eax)
c01152c6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01152c9:	0f b6 00             	movzbl (%eax),%eax
c01152cc:	84 c0                	test   %al,%al
c01152ce:	74 04                	je     c01152d4 <strncpy+0x27>
            src ++;
c01152d0:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        }
        p ++, len --;
c01152d4:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01152d8:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
    char *p = dst;
    while (len > 0) {
c01152dc:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01152e0:	75 d9                	jne    c01152bb <strncpy+0xe>
        if ((*p = *src) != '\0') {
            src ++;
        }
        p ++, len --;
    }
    return dst;
c01152e2:	8b 45 08             	mov    0x8(%ebp),%eax
}
c01152e5:	c9                   	leave  
c01152e6:	c3                   	ret    

c01152e7 <strcmp>:
 * - A value greater than zero indicates that the first character that does
 *   not match has a greater value in @s1 than in @s2;
 * - And a value less than zero indicates the opposite.
 * */
int
strcmp(const char *s1, const char *s2) {
c01152e7:	55                   	push   %ebp
c01152e8:	89 e5                	mov    %esp,%ebp
c01152ea:	57                   	push   %edi
c01152eb:	56                   	push   %esi
c01152ec:	83 ec 20             	sub    $0x20,%esp
c01152ef:	8b 45 08             	mov    0x8(%ebp),%eax
c01152f2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01152f5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01152f8:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCMP
#define __HAVE_ARCH_STRCMP
static inline int
__strcmp(const char *s1, const char *s2) {
    int d0, d1, ret;
    asm volatile (
c01152fb:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01152fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0115301:	89 d1                	mov    %edx,%ecx
c0115303:	89 c2                	mov    %eax,%edx
c0115305:	89 ce                	mov    %ecx,%esi
c0115307:	89 d7                	mov    %edx,%edi
c0115309:	ac                   	lods   %ds:(%esi),%al
c011530a:	ae                   	scas   %es:(%edi),%al
c011530b:	75 08                	jne    c0115315 <strcmp+0x2e>
c011530d:	84 c0                	test   %al,%al
c011530f:	75 f8                	jne    c0115309 <strcmp+0x22>
c0115311:	31 c0                	xor    %eax,%eax
c0115313:	eb 04                	jmp    c0115319 <strcmp+0x32>
c0115315:	19 c0                	sbb    %eax,%eax
c0115317:	0c 01                	or     $0x1,%al
c0115319:	89 fa                	mov    %edi,%edx
c011531b:	89 f1                	mov    %esi,%ecx
c011531d:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0115320:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c0115323:	89 55 e4             	mov    %edx,-0x1c(%ebp)
        "orb $1, %%al;"
        "3:"
        : "=a" (ret), "=&S" (d0), "=&D" (d1)
        : "1" (s1), "2" (s2)
        : "memory");
    return ret;
c0115326:	8b 45 ec             	mov    -0x14(%ebp),%eax
    while (*s1 != '\0' && *s1 == *s2) {
        s1 ++, s2 ++;
    }
    return (int)((unsigned char)*s1 - (unsigned char)*s2);
#endif /* __HAVE_ARCH_STRCMP */
}
c0115329:	83 c4 20             	add    $0x20,%esp
c011532c:	5e                   	pop    %esi
c011532d:	5f                   	pop    %edi
c011532e:	5d                   	pop    %ebp
c011532f:	c3                   	ret    

c0115330 <strncmp>:
 * they are equal to each other, it continues with the following pairs until
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
c0115330:	55                   	push   %ebp
c0115331:	89 e5                	mov    %esp,%ebp
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c0115333:	eb 0c                	jmp    c0115341 <strncmp+0x11>
        n --, s1 ++, s2 ++;
c0115335:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c0115339:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c011533d:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c0115341:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0115345:	74 1a                	je     c0115361 <strncmp+0x31>
c0115347:	8b 45 08             	mov    0x8(%ebp),%eax
c011534a:	0f b6 00             	movzbl (%eax),%eax
c011534d:	84 c0                	test   %al,%al
c011534f:	74 10                	je     c0115361 <strncmp+0x31>
c0115351:	8b 45 08             	mov    0x8(%ebp),%eax
c0115354:	0f b6 10             	movzbl (%eax),%edx
c0115357:	8b 45 0c             	mov    0xc(%ebp),%eax
c011535a:	0f b6 00             	movzbl (%eax),%eax
c011535d:	38 c2                	cmp    %al,%dl
c011535f:	74 d4                	je     c0115335 <strncmp+0x5>
        n --, s1 ++, s2 ++;
    }
    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
c0115361:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0115365:	74 18                	je     c011537f <strncmp+0x4f>
c0115367:	8b 45 08             	mov    0x8(%ebp),%eax
c011536a:	0f b6 00             	movzbl (%eax),%eax
c011536d:	0f b6 d0             	movzbl %al,%edx
c0115370:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115373:	0f b6 00             	movzbl (%eax),%eax
c0115376:	0f b6 c0             	movzbl %al,%eax
c0115379:	29 c2                	sub    %eax,%edx
c011537b:	89 d0                	mov    %edx,%eax
c011537d:	eb 05                	jmp    c0115384 <strncmp+0x54>
c011537f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0115384:	5d                   	pop    %ebp
c0115385:	c3                   	ret    

c0115386 <strchr>:
 *
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
c0115386:	55                   	push   %ebp
c0115387:	89 e5                	mov    %esp,%ebp
c0115389:	83 ec 04             	sub    $0x4,%esp
c011538c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011538f:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c0115392:	eb 14                	jmp    c01153a8 <strchr+0x22>
        if (*s == c) {
c0115394:	8b 45 08             	mov    0x8(%ebp),%eax
c0115397:	0f b6 00             	movzbl (%eax),%eax
c011539a:	3a 45 fc             	cmp    -0x4(%ebp),%al
c011539d:	75 05                	jne    c01153a4 <strchr+0x1e>
            return (char *)s;
c011539f:	8b 45 08             	mov    0x8(%ebp),%eax
c01153a2:	eb 13                	jmp    c01153b7 <strchr+0x31>
        }
        s ++;
c01153a4:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
    while (*s != '\0') {
c01153a8:	8b 45 08             	mov    0x8(%ebp),%eax
c01153ab:	0f b6 00             	movzbl (%eax),%eax
c01153ae:	84 c0                	test   %al,%al
c01153b0:	75 e2                	jne    c0115394 <strchr+0xe>
        if (*s == c) {
            return (char *)s;
        }
        s ++;
    }
    return NULL;
c01153b2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01153b7:	c9                   	leave  
c01153b8:	c3                   	ret    

c01153b9 <strfind>:
 * The strfind() function is like strchr() except that if @c is
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
c01153b9:	55                   	push   %ebp
c01153ba:	89 e5                	mov    %esp,%ebp
c01153bc:	83 ec 04             	sub    $0x4,%esp
c01153bf:	8b 45 0c             	mov    0xc(%ebp),%eax
c01153c2:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c01153c5:	eb 11                	jmp    c01153d8 <strfind+0x1f>
        if (*s == c) {
c01153c7:	8b 45 08             	mov    0x8(%ebp),%eax
c01153ca:	0f b6 00             	movzbl (%eax),%eax
c01153cd:	3a 45 fc             	cmp    -0x4(%ebp),%al
c01153d0:	75 02                	jne    c01153d4 <strfind+0x1b>
            break;
c01153d2:	eb 0e                	jmp    c01153e2 <strfind+0x29>
        }
        s ++;
c01153d4:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
    while (*s != '\0') {
c01153d8:	8b 45 08             	mov    0x8(%ebp),%eax
c01153db:	0f b6 00             	movzbl (%eax),%eax
c01153de:	84 c0                	test   %al,%al
c01153e0:	75 e5                	jne    c01153c7 <strfind+0xe>
        if (*s == c) {
            break;
        }
        s ++;
    }
    return (char *)s;
c01153e2:	8b 45 08             	mov    0x8(%ebp),%eax
}
c01153e5:	c9                   	leave  
c01153e6:	c3                   	ret    

c01153e7 <strtol>:
 * an optional "0x" or "0X" prefix.
 *
 * The strtol() function returns the converted integral number as a long int value.
 * */
long
strtol(const char *s, char **endptr, int base) {
c01153e7:	55                   	push   %ebp
c01153e8:	89 e5                	mov    %esp,%ebp
c01153ea:	83 ec 10             	sub    $0x10,%esp
    int neg = 0;
c01153ed:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    long val = 0;
c01153f4:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c01153fb:	eb 04                	jmp    c0115401 <strtol+0x1a>
        s ++;
c01153fd:	83 45 08 01          	addl   $0x1,0x8(%ebp)
strtol(const char *s, char **endptr, int base) {
    int neg = 0;
    long val = 0;

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c0115401:	8b 45 08             	mov    0x8(%ebp),%eax
c0115404:	0f b6 00             	movzbl (%eax),%eax
c0115407:	3c 20                	cmp    $0x20,%al
c0115409:	74 f2                	je     c01153fd <strtol+0x16>
c011540b:	8b 45 08             	mov    0x8(%ebp),%eax
c011540e:	0f b6 00             	movzbl (%eax),%eax
c0115411:	3c 09                	cmp    $0x9,%al
c0115413:	74 e8                	je     c01153fd <strtol+0x16>
        s ++;
    }

    // plus/minus sign
    if (*s == '+') {
c0115415:	8b 45 08             	mov    0x8(%ebp),%eax
c0115418:	0f b6 00             	movzbl (%eax),%eax
c011541b:	3c 2b                	cmp    $0x2b,%al
c011541d:	75 06                	jne    c0115425 <strtol+0x3e>
        s ++;
c011541f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0115423:	eb 15                	jmp    c011543a <strtol+0x53>
    }
    else if (*s == '-') {
c0115425:	8b 45 08             	mov    0x8(%ebp),%eax
c0115428:	0f b6 00             	movzbl (%eax),%eax
c011542b:	3c 2d                	cmp    $0x2d,%al
c011542d:	75 0b                	jne    c011543a <strtol+0x53>
        s ++, neg = 1;
c011542f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0115433:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
    }

    // hex or octal base prefix
    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
c011543a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c011543e:	74 06                	je     c0115446 <strtol+0x5f>
c0115440:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
c0115444:	75 24                	jne    c011546a <strtol+0x83>
c0115446:	8b 45 08             	mov    0x8(%ebp),%eax
c0115449:	0f b6 00             	movzbl (%eax),%eax
c011544c:	3c 30                	cmp    $0x30,%al
c011544e:	75 1a                	jne    c011546a <strtol+0x83>
c0115450:	8b 45 08             	mov    0x8(%ebp),%eax
c0115453:	83 c0 01             	add    $0x1,%eax
c0115456:	0f b6 00             	movzbl (%eax),%eax
c0115459:	3c 78                	cmp    $0x78,%al
c011545b:	75 0d                	jne    c011546a <strtol+0x83>
        s += 2, base = 16;
c011545d:	83 45 08 02          	addl   $0x2,0x8(%ebp)
c0115461:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
c0115468:	eb 2a                	jmp    c0115494 <strtol+0xad>
    }
    else if (base == 0 && s[0] == '0') {
c011546a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c011546e:	75 17                	jne    c0115487 <strtol+0xa0>
c0115470:	8b 45 08             	mov    0x8(%ebp),%eax
c0115473:	0f b6 00             	movzbl (%eax),%eax
c0115476:	3c 30                	cmp    $0x30,%al
c0115478:	75 0d                	jne    c0115487 <strtol+0xa0>
        s ++, base = 8;
c011547a:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c011547e:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
c0115485:	eb 0d                	jmp    c0115494 <strtol+0xad>
    }
    else if (base == 0) {
c0115487:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c011548b:	75 07                	jne    c0115494 <strtol+0xad>
        base = 10;
c011548d:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

    // digits
    while (1) {
        int dig;

        if (*s >= '0' && *s <= '9') {
c0115494:	8b 45 08             	mov    0x8(%ebp),%eax
c0115497:	0f b6 00             	movzbl (%eax),%eax
c011549a:	3c 2f                	cmp    $0x2f,%al
c011549c:	7e 1b                	jle    c01154b9 <strtol+0xd2>
c011549e:	8b 45 08             	mov    0x8(%ebp),%eax
c01154a1:	0f b6 00             	movzbl (%eax),%eax
c01154a4:	3c 39                	cmp    $0x39,%al
c01154a6:	7f 11                	jg     c01154b9 <strtol+0xd2>
            dig = *s - '0';
c01154a8:	8b 45 08             	mov    0x8(%ebp),%eax
c01154ab:	0f b6 00             	movzbl (%eax),%eax
c01154ae:	0f be c0             	movsbl %al,%eax
c01154b1:	83 e8 30             	sub    $0x30,%eax
c01154b4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01154b7:	eb 48                	jmp    c0115501 <strtol+0x11a>
        }
        else if (*s >= 'a' && *s <= 'z') {
c01154b9:	8b 45 08             	mov    0x8(%ebp),%eax
c01154bc:	0f b6 00             	movzbl (%eax),%eax
c01154bf:	3c 60                	cmp    $0x60,%al
c01154c1:	7e 1b                	jle    c01154de <strtol+0xf7>
c01154c3:	8b 45 08             	mov    0x8(%ebp),%eax
c01154c6:	0f b6 00             	movzbl (%eax),%eax
c01154c9:	3c 7a                	cmp    $0x7a,%al
c01154cb:	7f 11                	jg     c01154de <strtol+0xf7>
            dig = *s - 'a' + 10;
c01154cd:	8b 45 08             	mov    0x8(%ebp),%eax
c01154d0:	0f b6 00             	movzbl (%eax),%eax
c01154d3:	0f be c0             	movsbl %al,%eax
c01154d6:	83 e8 57             	sub    $0x57,%eax
c01154d9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01154dc:	eb 23                	jmp    c0115501 <strtol+0x11a>
        }
        else if (*s >= 'A' && *s <= 'Z') {
c01154de:	8b 45 08             	mov    0x8(%ebp),%eax
c01154e1:	0f b6 00             	movzbl (%eax),%eax
c01154e4:	3c 40                	cmp    $0x40,%al
c01154e6:	7e 3d                	jle    c0115525 <strtol+0x13e>
c01154e8:	8b 45 08             	mov    0x8(%ebp),%eax
c01154eb:	0f b6 00             	movzbl (%eax),%eax
c01154ee:	3c 5a                	cmp    $0x5a,%al
c01154f0:	7f 33                	jg     c0115525 <strtol+0x13e>
            dig = *s - 'A' + 10;
c01154f2:	8b 45 08             	mov    0x8(%ebp),%eax
c01154f5:	0f b6 00             	movzbl (%eax),%eax
c01154f8:	0f be c0             	movsbl %al,%eax
c01154fb:	83 e8 37             	sub    $0x37,%eax
c01154fe:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        else {
            break;
        }
        if (dig >= base) {
c0115501:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0115504:	3b 45 10             	cmp    0x10(%ebp),%eax
c0115507:	7c 02                	jl     c011550b <strtol+0x124>
            break;
c0115509:	eb 1a                	jmp    c0115525 <strtol+0x13e>
        }
        s ++, val = (val * base) + dig;
c011550b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c011550f:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0115512:	0f af 45 10          	imul   0x10(%ebp),%eax
c0115516:	89 c2                	mov    %eax,%edx
c0115518:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011551b:	01 d0                	add    %edx,%eax
c011551d:	89 45 f8             	mov    %eax,-0x8(%ebp)
        // we don't properly detect overflow!
    }
c0115520:	e9 6f ff ff ff       	jmp    c0115494 <strtol+0xad>

    if (endptr) {
c0115525:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0115529:	74 08                	je     c0115533 <strtol+0x14c>
        *endptr = (char *) s;
c011552b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011552e:	8b 55 08             	mov    0x8(%ebp),%edx
c0115531:	89 10                	mov    %edx,(%eax)
    }
    return (neg ? -val : val);
c0115533:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0115537:	74 07                	je     c0115540 <strtol+0x159>
c0115539:	8b 45 f8             	mov    -0x8(%ebp),%eax
c011553c:	f7 d8                	neg    %eax
c011553e:	eb 03                	jmp    c0115543 <strtol+0x15c>
c0115540:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c0115543:	c9                   	leave  
c0115544:	c3                   	ret    

c0115545 <memset>:
 * @n:      number of bytes to be set to the value
 *
 * The memset() function returns @s.
 * */
void *
memset(void *s, char c, size_t n) {
c0115545:	55                   	push   %ebp
c0115546:	89 e5                	mov    %esp,%ebp
c0115548:	57                   	push   %edi
c0115549:	83 ec 24             	sub    $0x24,%esp
c011554c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011554f:	88 45 d8             	mov    %al,-0x28(%ebp)
#ifdef __HAVE_ARCH_MEMSET
    return __memset(s, c, n);
c0115552:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
c0115556:	8b 55 08             	mov    0x8(%ebp),%edx
c0115559:	89 55 f8             	mov    %edx,-0x8(%ebp)
c011555c:	88 45 f7             	mov    %al,-0x9(%ebp)
c011555f:	8b 45 10             	mov    0x10(%ebp),%eax
c0115562:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_MEMSET
#define __HAVE_ARCH_MEMSET
static inline void *
__memset(void *s, char c, size_t n) {
    int d0, d1;
    asm volatile (
c0115565:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0115568:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c011556c:	8b 55 f8             	mov    -0x8(%ebp),%edx
c011556f:	89 d7                	mov    %edx,%edi
c0115571:	f3 aa                	rep stos %al,%es:(%edi)
c0115573:	89 fa                	mov    %edi,%edx
c0115575:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c0115578:	89 55 e8             	mov    %edx,-0x18(%ebp)
        "rep; stosb;"
        : "=&c" (d0), "=&D" (d1)
        : "0" (n), "a" (c), "1" (s)
        : "memory");
    return s;
c011557b:	8b 45 f8             	mov    -0x8(%ebp),%eax
    while (n -- > 0) {
        *p ++ = c;
    }
    return s;
#endif /* __HAVE_ARCH_MEMSET */
}
c011557e:	83 c4 24             	add    $0x24,%esp
c0115581:	5f                   	pop    %edi
c0115582:	5d                   	pop    %ebp
c0115583:	c3                   	ret    

c0115584 <memmove>:
 * @n:      number of bytes to copy
 *
 * The memmove() function returns @dst.
 * */
void *
memmove(void *dst, const void *src, size_t n) {
c0115584:	55                   	push   %ebp
c0115585:	89 e5                	mov    %esp,%ebp
c0115587:	57                   	push   %edi
c0115588:	56                   	push   %esi
c0115589:	53                   	push   %ebx
c011558a:	83 ec 30             	sub    $0x30,%esp
c011558d:	8b 45 08             	mov    0x8(%ebp),%eax
c0115590:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0115593:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115596:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0115599:	8b 45 10             	mov    0x10(%ebp),%eax
c011559c:	89 45 e8             	mov    %eax,-0x18(%ebp)

#ifndef __HAVE_ARCH_MEMMOVE
#define __HAVE_ARCH_MEMMOVE
static inline void *
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
c011559f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01155a2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01155a5:	73 42                	jae    c01155e9 <memmove+0x65>
c01155a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01155aa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01155ad:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01155b0:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01155b3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01155b6:	89 45 dc             	mov    %eax,-0x24(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c01155b9:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01155bc:	c1 e8 02             	shr    $0x2,%eax
c01155bf:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c01155c1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01155c4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01155c7:	89 d7                	mov    %edx,%edi
c01155c9:	89 c6                	mov    %eax,%esi
c01155cb:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c01155cd:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c01155d0:	83 e1 03             	and    $0x3,%ecx
c01155d3:	74 02                	je     c01155d7 <memmove+0x53>
c01155d5:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c01155d7:	89 f0                	mov    %esi,%eax
c01155d9:	89 fa                	mov    %edi,%edx
c01155db:	89 4d d8             	mov    %ecx,-0x28(%ebp)
c01155de:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c01155e1:	89 45 d0             	mov    %eax,-0x30(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c01155e4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01155e7:	eb 36                	jmp    c011561f <memmove+0x9b>
    asm volatile (
        "std;"
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
c01155e9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01155ec:	8d 50 ff             	lea    -0x1(%eax),%edx
c01155ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01155f2:	01 c2                	add    %eax,%edx
c01155f4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01155f7:	8d 48 ff             	lea    -0x1(%eax),%ecx
c01155fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01155fd:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
        return __memcpy(dst, src, n);
    }
    int d0, d1, d2;
    asm volatile (
c0115600:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0115603:	89 c1                	mov    %eax,%ecx
c0115605:	89 d8                	mov    %ebx,%eax
c0115607:	89 d6                	mov    %edx,%esi
c0115609:	89 c7                	mov    %eax,%edi
c011560b:	fd                   	std    
c011560c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c011560e:	fc                   	cld    
c011560f:	89 f8                	mov    %edi,%eax
c0115611:	89 f2                	mov    %esi,%edx
c0115613:	89 4d cc             	mov    %ecx,-0x34(%ebp)
c0115616:	89 55 c8             	mov    %edx,-0x38(%ebp)
c0115619:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
        : "memory");
    return dst;
c011561c:	8b 45 f0             	mov    -0x10(%ebp),%eax
            *d ++ = *s ++;
        }
    }
    return dst;
#endif /* __HAVE_ARCH_MEMMOVE */
}
c011561f:	83 c4 30             	add    $0x30,%esp
c0115622:	5b                   	pop    %ebx
c0115623:	5e                   	pop    %esi
c0115624:	5f                   	pop    %edi
c0115625:	5d                   	pop    %ebp
c0115626:	c3                   	ret    

c0115627 <memcpy>:
 * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
 * by both @src and @dst, should be at least @n bytes, and should not overlap
 * (for overlapping memory area, memmove is a safer approach).
 * */
void *
memcpy(void *dst, const void *src, size_t n) {
c0115627:	55                   	push   %ebp
c0115628:	89 e5                	mov    %esp,%ebp
c011562a:	57                   	push   %edi
c011562b:	56                   	push   %esi
c011562c:	83 ec 20             	sub    $0x20,%esp
c011562f:	8b 45 08             	mov    0x8(%ebp),%eax
c0115632:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0115635:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115638:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011563b:	8b 45 10             	mov    0x10(%ebp),%eax
c011563e:	89 45 ec             	mov    %eax,-0x14(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c0115641:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0115644:	c1 e8 02             	shr    $0x2,%eax
c0115647:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c0115649:	8b 55 f4             	mov    -0xc(%ebp),%edx
c011564c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011564f:	89 d7                	mov    %edx,%edi
c0115651:	89 c6                	mov    %eax,%esi
c0115653:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c0115655:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c0115658:	83 e1 03             	and    $0x3,%ecx
c011565b:	74 02                	je     c011565f <memcpy+0x38>
c011565d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c011565f:	89 f0                	mov    %esi,%eax
c0115661:	89 fa                	mov    %edi,%edx
c0115663:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c0115666:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0115669:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c011566c:	8b 45 f4             	mov    -0xc(%ebp),%eax
    while (n -- > 0) {
        *d ++ = *s ++;
    }
    return dst;
#endif /* __HAVE_ARCH_MEMCPY */
}
c011566f:	83 c4 20             	add    $0x20,%esp
c0115672:	5e                   	pop    %esi
c0115673:	5f                   	pop    %edi
c0115674:	5d                   	pop    %ebp
c0115675:	c3                   	ret    

c0115676 <memcmp>:
 *   match in both memory blocks has a greater value in @v1 than in @v2
 *   as if evaluated as unsigned char values;
 * - And a value less than zero indicates the opposite.
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
c0115676:	55                   	push   %ebp
c0115677:	89 e5                	mov    %esp,%ebp
c0115679:	83 ec 10             	sub    $0x10,%esp
    const char *s1 = (const char *)v1;
c011567c:	8b 45 08             	mov    0x8(%ebp),%eax
c011567f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s2 = (const char *)v2;
c0115682:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115685:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (n -- > 0) {
c0115688:	eb 30                	jmp    c01156ba <memcmp+0x44>
        if (*s1 != *s2) {
c011568a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c011568d:	0f b6 10             	movzbl (%eax),%edx
c0115690:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0115693:	0f b6 00             	movzbl (%eax),%eax
c0115696:	38 c2                	cmp    %al,%dl
c0115698:	74 18                	je     c01156b2 <memcmp+0x3c>
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
c011569a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c011569d:	0f b6 00             	movzbl (%eax),%eax
c01156a0:	0f b6 d0             	movzbl %al,%edx
c01156a3:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01156a6:	0f b6 00             	movzbl (%eax),%eax
c01156a9:	0f b6 c0             	movzbl %al,%eax
c01156ac:	29 c2                	sub    %eax,%edx
c01156ae:	89 d0                	mov    %edx,%eax
c01156b0:	eb 1a                	jmp    c01156cc <memcmp+0x56>
        }
        s1 ++, s2 ++;
c01156b2:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01156b6:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
    const char *s1 = (const char *)v1;
    const char *s2 = (const char *)v2;
    while (n -- > 0) {
c01156ba:	8b 45 10             	mov    0x10(%ebp),%eax
c01156bd:	8d 50 ff             	lea    -0x1(%eax),%edx
c01156c0:	89 55 10             	mov    %edx,0x10(%ebp)
c01156c3:	85 c0                	test   %eax,%eax
c01156c5:	75 c3                	jne    c011568a <memcmp+0x14>
        if (*s1 != *s2) {
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
        }
        s1 ++, s2 ++;
    }
    return 0;
c01156c7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01156cc:	c9                   	leave  
c01156cd:	c3                   	ret    
